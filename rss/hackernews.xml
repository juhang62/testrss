<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>The side of Paul Allen I wish more people knew about</title>
<link>https://www.gatesnotes.com/About-Bill-Gates/Forbes-Philanthropy-Summit-honors-Paul-Allen</link>
<guid isPermaLink="true" >https://www.gatesnotes.com/About-Bill-Gates/Forbes-Philanthropy-Summit-honors-Paul-Allen</guid>
<description>&lt;div id=&quot;content_0_articlePanel&quot; readability=&quot;260&quot;&gt;
&lt;p&gt;&lt;em&gt;Paul Allen was one of the most intellectually curious people I’ve ever known. Ever since we were kids, he seemed to be interested in just about everything. Paul was just as comfortable discussing Shakespeare and playing the guitar as he was talking about computers.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;As an adult, Paul continued to embrace that curiosity. It influenced every part of his life—including his approach to philanthropy. His generosity was well known, but I wish more people understood just how wide-ranging his giving was. He made a real impact in so many areas, from scientific research to conservation to community engagement.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;I recently had the opportunity to talk about Paul (and show some old photos!) at the Forbes Philanthropy Summit in New York, where he was posthumously honored with the Lifetime Achievement Award for Philanthropy. This is what I said:&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Remarks as prepared&lt;br/&gt;Forbes Philanthropy Summit&lt;br/&gt;June 27, 2019&lt;br/&gt;New York, New York&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I’m honored to have the opportunity today to talk about my friend Paul Allen, this year’s recipient of the Lifetime Achievement Award for Philanthropy.&lt;/p&gt;
&lt;p&gt;To fully appreciate the philosophy behind Paul’s giving, you need to know one thing about him: Paul was driven by an incredible curiosity his whole life. Even when we were just kids, he seemed to be interested in just about everything.&lt;/p&gt;
&lt;p&gt;Later in life, Paul gave to a huge spectrum of issues that seem unrelated at first glance. He wanted to prevent elephant poaching, improve ocean health, and promote smart cities. He funded new housing for the homeless and arts education in the Puget Sound region. In 2014 alone, he supported research into the polio virus and efforts to contain the Ebola outbreak in West Africa – all while standing up an amazing new institute for studying artificial intelligence.&lt;/p&gt;
&lt;p&gt;If you knew him, the logic in Paul’s portfolio is easy to see. He gave to the things that he was most interested in, and to the places where he thought he could have the most impact. Even though Paul cared about a lot of different things, he was deeply passionate about each of them.&lt;/p&gt;
&lt;p&gt;&lt;img width=&quot;480&quot; height=&quot;340&quot; alt=&quot;Forbes Philanthropy Summit honors Paul Allen&quot; src=&quot;https://www.gatesnotes.com/-/media/Images/Articles/About-Bill-Gates/Forbes-Philanthropy-Summit-honors-Paul-Allen/GA11174181_Lakeside-Photo-1.jpg?la=en&amp;amp;hash=8468FE2B59E30C96E6EAC7177072C47CE15758AF&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The first time I saw how passionate Paul could get about something, I was in 8th grade. This picture might make you think he was my teacher, but he was actually a sophomore, just a little less than three years older than me.&lt;/p&gt;
&lt;p&gt;This teletype is the thing that brought us together. Our school, Lakeside, held a rummage sale and used the proceeds to buy a teletype terminal. We were obsessed with it. The problem was, it was really expensive to use – 40 dollars an hour! The only way for us to get computer time was by exploiting a bug in the system.&lt;/p&gt;
&lt;p&gt;We eventually got busted, but that led to our first official partnership between Paul and me: we worked out a deal with the company to use computers for free if we would identify problems.&lt;/p&gt;
&lt;p&gt;We spent just about all our free time messing around with any machine we could get our hands on. But computers weren’t the only thing Paul was obsessed with back then.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; height=&quot;340&quot; width=&quot;480&quot; src=&quot;https://www.gatesnotes.com/-/media/Images/Articles/About-Bill-Gates/Forbes-Philanthropy-Summit-honors-Paul-Allen/PaulAllen1971_0276-Framed.jpg?la=en&amp;amp;hash=E4A149D404EB1902D70B2C349E42FFA0815256CB&quot;/&gt;&lt;/p&gt;
&lt;p&gt;This was his high school yearbook picture. He always loved to read, and he picked out all these books himself. I know it’s a little hard to see, but it includes James Joyce’s &lt;em&gt;Dubliners,&lt;/em&gt; textbooks on philosophy and physics, and the Bible. And this stack doesn’t even include his favorite genre: science fiction. I thought I read a lot of science fiction, but he put me to shame. &lt;em&gt;The Moon is a Harsh Mistress&lt;/em&gt;, every Heinlein book, the Foundation series – we used to go over to his house to look through his collection and make sure I wasn’t missing anything.&lt;/p&gt;
&lt;p&gt;Paul’s dad was the assistant librarian at the University of Washington. Every time I’d go over to their house, it was just utterly full of books. And because Paul read so much, he knew a lot about a lot of things.&lt;/p&gt;
&lt;p&gt;Once, I got curious about – of all things – gasoline. I didn’t understand what “refining” meant. So I turned to the most knowledgeable person I knew. Paul explained it in a super-clear and interesting way.&lt;/p&gt;
&lt;p&gt;&lt;img width=&quot;688&quot; height=&quot;529&quot; alt=&quot;Forbes Philanthropy Summit honors Paul Allen&quot; src=&quot;https://www.gatesnotes.com/-/media/Images/Articles/About-Bill-Gates/Forbes-Philanthropy-Summit-honors-Paul-Allen/Paul_PKT_House-BC-2.jpg?la=en&amp;amp;hash=D280B5DF8D9389E278D71DA2C9153EE304837C39&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Paul was also cooler than I was. He played the guitar and was really into Jimi Hendrix, and I remember him playing “Are You Experienced?” for me. I wasn’t experienced at much of anything back then.&lt;/p&gt;
&lt;p&gt;But Paul was so passionate about the album that he wanted to share it with me. His early love for music – and pop culture in general – would end up influencing a lot of his giving later on.&lt;/p&gt;
&lt;p&gt;One day – when Paul and I were both in Boston – he insisted that I rush over to a nearby newsstand with him. He wanted to show me the cover of the January 1975 issue of &lt;em&gt;Popular Electronics&lt;/em&gt;. It featured a new computer called the Altair 8800, which ran on a powerful new chip. I remember him holding up the cover and saying, “This is happening without us!”&lt;/p&gt;
&lt;p&gt;Paul was always good at seeing the big picture. He understood before most people that, as microprocessors grew more powerful, the only thing limiting their potential would be the software.&lt;/p&gt;
&lt;p&gt;&lt;img height=&quot;621&quot; alt=&quot;Forbes Philanthropy Summit honors Paul Allen&quot; width=&quot;900&quot; src=&quot;https://www.gatesnotes.com/-/media/Images/Articles/About-Bill-Gates/Forbes-Philanthropy-Summit-honors-Paul-Allen/GA11174087_GatesAllen1980-pic4.jpg?la=en&amp;amp;hash=8B1E9E2F4AF6B8196D0D4AB7C4074DD7BFF19594&quot;/&gt;&lt;/p&gt;
&lt;p&gt;His ability to think creatively and solve difficult problems was important for a lot of Microsoft’s early success. This photo was taken right after the company started to grow and we relocated from Albuquerque to Seattle.&lt;/p&gt;
&lt;p&gt;Across the hall from my office and Paul’s office was a gigantic room. There were a bunch of tables with different systems on them, and that’s where Paul and I would do much of our work. The machines in this photograph are the ones we actually used to program a lot of Microsoft’s early software.&lt;/p&gt;
&lt;p&gt;Although we were pretty focused on the work in those days, Paul maintained his curiosity in other subjects. And after he left the company, he began to explore those interests in a way that only Paul could.&lt;/p&gt;
&lt;p&gt;One time we were watching a Seattle SuperSonics basketball game together. Paul turned to me and asked if I thought someone could just buy a team. I thought he was joking! Nobody who went to school with us would have ever pegged Paul as a future sports owner.&lt;/p&gt;
&lt;p&gt;But in 1988, he purchased the Portland Trailblazers. And then the Seattle Seahawks a few years later.&lt;/p&gt;
&lt;p&gt;&lt;img width=&quot;594&quot; height=&quot;436&quot; alt=&quot;Forbes Philanthropy Summit honors Paul Allen&quot; src=&quot;https://www.gatesnotes.com/-/media/Images/Articles/About-Bill-Gates/Forbes-Philanthropy-Summit-honors-Paul-Allen/Paul-Allen-Photo-5.jpg?la=en&amp;amp;hash=DF195FF85F7E205305D2126974FB77E18BE397F4&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The Seahawks proved to be a valuable asset down the line, but that’s not why he bought the team. The owner at the time had announced the Seahawks were moving to Southern California.&lt;/p&gt;
&lt;p&gt;The city was devastated. Local officials approached Paul. They knew he was the only sports-minded person in town who could afford to keep them in town.&lt;/p&gt;
&lt;p&gt;Paul wasn’t a big football fan at the time. Plus, the team was pretty bad. But he wanted to help Seattle – so he took a risk and became the Seahawks new owner. Clearly, it paid off.&lt;/p&gt;
&lt;p&gt;Paul did a lot for the city. He loved our hometown and always wanted to make it better.&lt;/p&gt;
&lt;p&gt;He gave millions to improve the lives of homeless people in the region and helped turn a barren area downtown into one of the most vibrant neighborhoods in the city.&lt;/p&gt;
&lt;p&gt;He established a super cool Museum of Pop Culture, supported the local alternative radio station, and even saved the Cinerama movie theater we used to go to as kids. The University of Washington named the computer science department after him for his contributions to the school.&lt;/p&gt;
&lt;p&gt;Seattle is also home to what I think might be Paul’s most lasting impact: the Allen Institute.&lt;/p&gt;
&lt;p&gt;&lt;img width=&quot;1054&quot; height=&quot;792&quot; alt=&quot;Forbes Philanthropy Summit honors Paul Allen&quot; src=&quot;https://www.gatesnotes.com/-/media/Images/Articles/About-Bill-Gates/Forbes-Philanthropy-Summit-honors-Paul-Allen/Paul_Allan-Jones_AllenInst-Photo-6.jpg?h=792&amp;amp;w=1054&amp;amp;la=en&amp;amp;hash=C7791A86ACCA8CCE7C4641BDF8D1736BE992E220&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Paul always wanted to push the boundaries of science. He did it when we were testing the limits of what a chip could do at Microsoft, and he continues to do it today – even after he’s gone – through the work of the Allen Institute.&lt;/p&gt;
&lt;p&gt;When I first heard he was creating an organization to study brain science, I thought, “Of course.”&lt;/p&gt;
&lt;p&gt;Paul had been obsessed with understanding the human mind since we were kids. How does it manage to learn? Will software ever be able to do that?&lt;/p&gt;
&lt;p&gt;The big thing if you’re creating software is figuring out how the brain works. And the more you study it, the more you learn how little we actually know.&lt;/p&gt;
&lt;p&gt;Each of the Allen Institute divisions is dedicated to unlocking the mysteries of how the body works. In addition to the brain, the Institute has divisions that study cell science, bioscience and – as of last December, two months after Paul passed – immunology. There’s also a separate institute dedicated to studying artificial intelligence in service of the public good.&lt;/p&gt;
&lt;p&gt;All of them are still in the early years of their research. Although they have already produced amazing insights – particularly the Institute’s groundbreaking maps of the brain – I think their most important discoveries are yet to come.&lt;/p&gt;
&lt;p&gt;I wish Paul had gotten to see all of the good his generosity will do. He was one of the most thoughtful, brilliant, and curious people I’ve ever met. He deserved so much more time than he got – although no one can say his wasn’t a life well-lived.&lt;/p&gt;
&lt;p&gt;When he became one of the earliest signers of the Giving Pledge, he said, “Our net worth is ultimately defined not by dollars but rather by how well we serve others.”&lt;/p&gt;
&lt;p&gt;By that measure, Paul’s life was one of immense worth. I will miss him tremendously.&lt;/p&gt;
&lt;p&gt;Thank you.&lt;/p&gt;
&lt;div id=&quot;PrevNextTabsHolder&quot; class=&quot;PrevNextTabsHolder&quot;&gt;
&lt;div id=&quot;PrevNextTabs_PrevTab&quot;&gt;

&lt;p&gt;Previous Article&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;PrevNextTabs_NextTab&quot;&gt;
&lt;p&gt;Next Article&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div id=&quot;content_0_articlePrevNextCont&quot; readability=&quot;57&quot;&gt; 
&lt;p&gt;NEXT&lt;br/&gt;&lt;span class=&quot;nextPrevText&quot;&gt;Here’s one great way to use your tech skills&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;</description>
<pubDate>Sat, 29 Jun 2019 16:24:16 +0000</pubDate>
<dc:creator>jvmiert</dc:creator>
<og:description>Bill Gates talks about Paul Allen at the Forbes Philanthropy Summit, where he was posthumously honored with the Lifetime Achievement Award for Philanthropy.</og:description>
<og:image>https://www.gatesnotes.com/-/media/Images/Articles/About-Bill-Gates/Forbes-Philanthropy-Summit-honors-Paul-Allen/Forbes-Paul_Allen-2019-Article-Hero-Image-001.jpg</og:image>
<og:title>The side of Paul Allen I wish more people knew about</og:title>
<og:type>article</og:type>
<og:url>https://www.gatesnotes.com/About-Bill-Gates/Forbes-Philanthropy-Summit-honors-Paul-Allen</og:url>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.gatesnotes.com/About-Bill-Gates/Forbes-Philanthropy-Summit-honors-Paul-Allen</dc:identifier>
</item>
<item>
<title>SKS Keyserver Network Under Attack</title>
<link>https://gist.github.com/rjhansen/67ab921ffb4084c865b3618d6955275f</link>
<guid isPermaLink="true" >https://gist.github.com/rjhansen/67ab921ffb4084c865b3618d6955275f</guid>
<description>
&lt;p&gt;&lt;em&gt;This work is released under a &lt;a href=&quot;http://creativecommons.org/licenses/by-nd/4.0/&quot; rel=&quot;nofollow&quot;&gt;Creative Commons Attribution-NoDerivatives 4.0 International License&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Terminological Note&lt;/h2&gt;
&lt;p&gt;&quot;OpenPGP&quot; refers to the OpenPGP protocol, in much the same way that HTML refers to the protocol that specifies how to write a web page. &quot;GnuPG&quot;, &quot;SequoiaPGP&quot;, &quot;OpenPGP.js&quot;, and others are implementations of the OpenPGP protocol in the same way that Mozilla Firefox, Google Chromium, and Microsoft Edge refer to software packages that process HTML data.&lt;/p&gt;
&lt;h2&gt;Who am I?&lt;/h2&gt;
&lt;p&gt;Robert J. Hansen &amp;lt;&lt;a href=&quot;mailto:rjh@sixdemonbag.org?subject=SKS%20Keyserver%20network%20attack&quot;&gt;rjh@sixdemonbag.org&lt;/a&gt;&amp;gt;. I maintain the GnuPG FAQ and unofficially hold the position of crisis communicator. This is not an official statement of the GnuPG project, but does come from someone with commit access to the GnuPG git repo.&lt;/p&gt;
&lt;h2&gt;Executive Summary&lt;/h2&gt;
&lt;p&gt;In the last week of June 2019 unknown actors deployed a certificate spamming attack against two high-profile contributors in the OpenPGP community (Robert J. Hansen and Daniel Kahn Gillmor, better known in the community as &quot;rjh&quot; and &quot;dkg&quot;). This attack exploited a defect in the OpenPGP protocol itself in order to &quot;poison&quot; rjh and dkg's OpenPGP certificates. Anyone who attempts to import a poisoned certificate into a vulnerable OpenPGP installation will very likely break their installation in hard-to-debug ways. Poisoned certificates are already on the SKS keyserver network. There is no reason to believe the attacker will stop at just poisoning two certificates. Further, given the ease of the attack and the highly publicized success of the attack, it is prudent to believe other certificates will soon be poisoned.&lt;/p&gt;
&lt;p&gt;This attack cannot be mitigated by the SKS keyserver network in any reasonable time period. It is unlikely to be mitigated by the OpenPGP Working Group in any reasonable time period. Future releases of OpenPGP software will likely have some sort of mitigation, but there is no time frame. The best mitigation that can be applied at present is simple: stop retrieving data from the SKS keyserver network.&lt;/p&gt;
&lt;h2&gt;How Keyservers Work&lt;/h2&gt;
&lt;p&gt;When Phil Zimmermann first developed PGP (&quot;Pretty Good Privacy&quot;) in the early 1990s there was a clear chicken and egg problem. Public key cryptography could revolutionize communications but required individuals possess each other's public keys. Over time terminology has shifted: now public key cryptography is mostly called &quot;asymmetric cryptography&quot; and public keys are more often called &quot;public certificates&quot;, but the chicken-and-egg problem remains. To communicate privately, each party must have a small piece of public data with which to bootstrap a private communication channel.&lt;/p&gt;
&lt;p&gt;Special software was written to facilitate the discovery and distribution of public certificates. Called &quot;keyserver software&quot;, it can be thought of as analogous to a telephone directory. Users can search the keyserver by a variety of different criteria to discover public certificates which claim to belong to the desired user. The keyserver network does not attest to the accuracy of the information, however: that's left for each user to ascertain according to their own criteria.&lt;/p&gt;
&lt;p&gt;Once a user has verified a certificate really and truly belongs to the person in question, they can affix an affidavit to the certificate attesting that they have reason to believe the certificate really belongs to the user in question.&lt;/p&gt;
&lt;p&gt;For instance: John Hawley (&lt;a href=&quot;mailto:john@example.org&quot;&gt;john@example.org&lt;/a&gt;) and I (&lt;a href=&quot;mailto:rjh@example.org&quot;&gt;rjh@example.org&lt;/a&gt;) are good friends in real life. We have sat down face-to-face and confirmed certificates. I know with complete certainty a specific public certificate belongs to him; he knows with complete certainty a different one belongs to me. John also knows H. Peter Anvin (&lt;a href=&quot;mailto:hpa@example.org&quot;&gt;hpa@example.org&lt;/a&gt;) and has done the same with him. If I need to communicate privately with Peter, I can look him up in the keyserver. Whichever certificate bears an attestation by John, I can trust really belongs to Peter.&lt;/p&gt;
&lt;h2&gt;Keyserver Design Goals&lt;/h2&gt;
&lt;p&gt;In the early 1990s we were concerned repressive regimes would attempt to force keyserver operators to replace certificates with different ones of the government's choosing. (I speak from firsthand experience. I've been involved in the PGP community since 1992. I was there for these discussions.) We made a quick decision that keyservers would never, ever, ever, delete information. Keyservers could add information to existing certificates but could never, ever, ever, delete either a certificate or information about a certificate.&lt;/p&gt;
&lt;p&gt;To meet this goal, we started running an international network of keyservers. Keyservers around the world would regularly communicate with each other to compare directories. If a government forced a keyserver operator to delete or modify a certificate, that would be discovered in the comparison step. The maimed keyserver would update itself with the content in the good keyserver's directory. This was a simple and effective solution to the problem of government censorship.&lt;/p&gt;
&lt;p&gt;In the early 1990s this design seemed sound. It is not sound in 2019. We've known it has problems for well over a decade.&lt;/p&gt;
&lt;h2&gt;Why Hasn't It Been Fixed?&lt;/h2&gt;
&lt;p&gt;There are powerful technical and social factors inhibiting further keyserver development.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The software is Byzantine.&lt;/strong&gt; The standard keyserver software is called SKS, for &quot;Synchronizing Key Server&quot;. A bright fellow named Yaron Minsky devised a brilliant algorithm that could do reconciliations very quickly. It became the keystone of his Ph.D thesis, and he wrote SKS originally as a proof of concept of his idea. It's written in an unusual programming language called OCaml, and in a fairly idiosyncratic dialect of it at that. This is of course no problem for a proof of concept meant to support a Ph.D thesis, but for software that's deployed in the field it makes maintenance quite difficult. Not only do we need to be bright enough to understand an algorithm that's literally someone's Ph.D thesis, but we need expertise in obscure programming languages and strange programming customs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The software is unmaintained.&lt;/strong&gt; Due to the above, there is literally no one in the keyserver community who feels qualified to do a serious overhaul on the codebase.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Changing a design goal is not the same as fixing a bug.&lt;/strong&gt; The design goal of the keyserver network is &quot;baked into&quot; essentially every part of the infrastructure. This isn't a case where there's a bug that's inhibiting the keyserver network from functioning correctly. Bugs are generally speaking fairly easy to fix once you know where the problem is. Changing design goals often requires an overhaul of such magnitude it may be better to just start over with a fresh sheet of paper.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;There is no centralized authority in the keyserver network.&lt;/strong&gt; The lack of centralized authority was a feature, not a bug. If there is no keyserver that controls the others, there is no single point of failure for a government to go after. On the other hand it also means that even after the software is overhauled and/or rewritten, each keyserver operator has to commit to making the upgrade and stomping out the difficulties that inevitably arise when new software is fielded. The confederated nature of the keyserver network makes changing the design goals even harder than it would normally be—and rest assured, it would normally be very hard!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;The Vulnerabilities&lt;/h2&gt;
&lt;p&gt;The keyserver network is susceptible to a variety of attacks as a consequence of its write-only design. The keyserver network can be thought of as an extremely large, extremely reliable, extremely censorship-resistant distributed filesystem which anyone can write to.&lt;/p&gt;
&lt;p&gt;Imagine if Dropbox allowed any Tom, Dick, or Harry to not only put information in your public Dropbox folder, but made it impossible for you to delete it. How would everyone from spammers to child pornographers abuse this?&lt;/p&gt;
&lt;p&gt;Many of the same attacks are possible on the keyserver network. We have known about these vulnerabilities for well over a decade. Fixing the keyserver network is, however, problematic for the reasons listed above.&lt;/p&gt;
&lt;p&gt;In order to limit the scope of this document a detailed breakdown of only one such vulnerability will be presented (see below).&lt;/p&gt;
&lt;h3&gt;The Certificate Spamming Attack&lt;/h3&gt;
&lt;p&gt;Consider public certificates. In order to make them easier to use, they have a list of attestations: statements from other people, represented by their own public certificates, that this certificate really belongs to the individual in question. In my example from before, John Hawley attested to H. Peter Anvin's certificate. When I looked for H. Peter Anvin's certificate I checked all the certificates which claimed to belong to him and selected the one John attested as being really his.&lt;/p&gt;
&lt;p&gt;These attestations — what we call &lt;em&gt;certificate signatures&lt;/em&gt; — can be made by anyone for any purpose. And once made, they never go away. Ever. Even when a certificate signature gets revoked the original remains on the certificate: all that happens is a second signature is affixed saying &quot;don't trust the previous one I made&quot;.&lt;/p&gt;
&lt;p&gt;The OpenPGP specification puts no limitation on how many signatures can be attached to a certificate. The keyserver network handles certificates with up to about 150,000 signatures.&lt;/p&gt;
&lt;p&gt;GnuPG, on the other hand … doesn't. Any time GnuPG has to deal with such a spammed certificate, GnuPG grinds to a halt. It doesn't stop, per se, but it gets wedged for so long it is for all intents and purposes completely unusable.&lt;/p&gt;
&lt;p&gt;My public certificate as found on the keyserver network now has just short of 150,000 signatures on it.&lt;/p&gt;
&lt;p&gt;Further, pay attention to that phrase &lt;em&gt;any time GnuPG has to deal with such a spammed certificate.&lt;/em&gt; If John were to ask GnuPG to verify my signature on H. Peter Anvin's certificate, GnuPG would attempt to comply and in the course of business would have to deal with my now-spammed certificate.&lt;/p&gt;
&lt;h2&gt;The Consequences&lt;/h2&gt;
&lt;p&gt;We've known for a decade this attack is possible. It's now here and it's devastating. There are a few major takeaways and all of them are bad.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;If you fetch a poisoned certificate from the keyserver network, you will break your GnuPG installation.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Poisoned certificates cannot be deleted from the keyserver network.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The number of deliberately poisoned certificates, currently at only a few, will only rise over time.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;We do not know whether the attackers are intent on poisoning other certificates.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;We do not even know the scope of the damage.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;That last one requires some explanation. &lt;em&gt;Any certificate may be poisoned at any time, and is unlikely to be discovered until it breaks an OpenPGP installation.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The number one use of OpenPGP today is to verify downloaded packages for Linux-based operating systems, usually using a software tool called GnuPG. If someone were to poison a vendor's public certificate and upload it to the keyserver network, the next time a system administrator refreshed their keyring from the keyserver network the vendor's now-poisoned certificate would be downloaded. At that point upgrades become impossible because the authenticity of downloaded packages cannot be verified. Even downloading the vendor's certificate and re-importing it would be of no use, because GnuPG would choke trying to import the new certificate. It is not hard to imagine how motivated adversaries could employ this against a Linux-based computer network.&lt;/p&gt;
&lt;h2&gt;Mitigations&lt;/h2&gt;
&lt;p&gt;At present I (speaking only for myself) do not believe the global keyserver network is salvageable. &lt;strong&gt;High-risk users should stop using the keyserver network immediately.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Users who are confident editing their GnuPG configuration files should follow the following process:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Open &lt;code&gt;gpg.conf&lt;/code&gt; in a text editor. Ensure there is no line starting with &lt;code&gt;keyserver&lt;/code&gt;. If there is, remove it.&lt;/li&gt;
&lt;li&gt;Open &lt;code&gt;dirmngr.conf&lt;/code&gt; in a text editor. Add the line &lt;code&gt;keyserver hkps://keys.openpgp.org&lt;/code&gt; to the end of it.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;code&gt;keys.openpgp.org&lt;/code&gt; is a new experimental keyserver which is not part of the keyserver network and has some features which make it resistant to this sort of attack. It is not a drop-in replacement: it has some limitations (for instance, its search functionality is sharply constrained). However, once you make this change you will be able to run &lt;code&gt;gpg --refresh-keys&lt;/code&gt; with confidence.&lt;/p&gt;
&lt;h2&gt;Repairs&lt;/h2&gt;
&lt;p&gt;If you know which certificate is likely poisoned, try deleting it: this normally goes pretty quickly. If your OpenPGP installation becomes usable again, congratulations. Acquire a new unpoisoned copy of the certificate and import that.&lt;/p&gt;
&lt;p&gt;If you don't know which certificate is poisoned, your best bet is to get a list of all your certificate IDs, delete your keyrings completely, and rebuild from scratch using known-good copies of the public certificates.&lt;/p&gt;
&lt;h2&gt;A Personal Postscript&lt;/h2&gt;
&lt;p&gt;dkg wrote a &lt;a href=&quot;https://dkg.fifthhorseman.net/blog/openpgp-certificate-flooding.html&quot; rel=&quot;nofollow&quot;&gt;blog post&lt;/a&gt; about this. He sums up my feelings pretty well, so I'm going to quote him liberally with only a trivial correction.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I've spent a significant amount of time over the years trying to push the ecosystem into a more responsible posture with respect to OpenPGP certificates, and have clearly not been as successful at it or as fast as I wanted to be. Complex ecosystems can take time to move.&lt;/p&gt;
&lt;p&gt;To have my own certificate directly spammed in this way felt surprisingly personal, as though someone was trying to attack or punish me, specifically. I can't know whether that's actually the case, of course, nor do I really want to. And the fact that Robert J. Hansen's certificate was also spammed makes me feel a little less like a singular or unique target, but I also don't feel particularly proud of feeling relieved that someone else is also being &quot;punished&quot; in addition to me.&lt;/p&gt;
&lt;p&gt;But this report wouldn't be complete if I didn't mention that I've felt disheartened and demotivated by this situation. I'm a stubborn person, and I'm trying to make the best of the situation by being constructive about at least documenting the places that are most severely broken by this. But I've also found myself tempted to walk away from this ecosystem entirely because of this incident. I don't want to be too dramatic about this, but whoever did this basically experimented on me (and Rob) directly, and it's a pretty shitty thing to do.&lt;/p&gt;
&lt;p&gt;If you're reading this, and you set this off, and you selected me specifically because of my role in the OpenPGP ecosystem, or because I wrote the abuse-resistant-keystore draft, or because I'm part of the Autocrypt project, then you should know that I care about making this stuff work for people. If you'd reached out to me to describe what you were planning to do, we could have done all of the above bug reporting and triage using demonstration certificates, and worked on it together. I would have happily helped. I still might! But because of the way this was done, I'm not feeling particularly happy right now. I hope that someone is, somewhere.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To which I'd like to add: I have never in my adult life wished violence on any human being. I have witnessed too much of it and its barbaric effects, stood by the graves of too many people cut down too young. I do not hate you and I do not wish any harm to befall you.&lt;/p&gt;
&lt;p&gt;But if you get hit by a bus while crossing the street, I'll tell the driver everyone deserves a mulligan once in a while.&lt;/p&gt;
&lt;p&gt;You fool. You absolute, unmitigated, unadulterated, complete and utter, fool.&lt;/p&gt;
&lt;p&gt;Peace to everyone — including you, you son of a bitch.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;— Rob&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 29 Jun 2019 14:38:24 +0000</pubDate>
<dc:creator>Spellman</dc:creator>
<og:image>https://avatars2.githubusercontent.com/u/346091?s=400&amp;v=4</og:image>
<og:type>article</og:type>
<og:title>SKS Keyserver Network Under Attack</og:title>
<og:url>https://gist.github.com/rjhansen/67ab921ffb4084c865b3618d6955275f</og:url>
<og:description>SKS Keyserver Network Under Attack. GitHub Gist: instantly share code, notes, and snippets.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://gist.github.com/rjhansen/67ab921ffb4084c865b3618d6955275f</dc:identifier>
</item>
<item>
<title>Open Letter from the OpenID Foundation to Apple Regarding Sign in with Apple</title>
<link>https://openid.net/2019/06/27/open-letter-from-the-openid-foundation-to-apple-regarding-sign-in-with-apple/</link>
<guid isPermaLink="true" >https://openid.net/2019/06/27/open-letter-from-the-openid-foundation-to-apple-regarding-sign-in-with-apple/</guid>
<description>
&lt;p&gt;&lt;span&gt;June 27, 2019&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Mr.&lt;/span&gt; &lt;span&gt;Craig Federighi&lt;br/&gt;&lt;/span&gt;&lt;span&gt;Apple&lt;br/&gt;&lt;/span&gt;&lt;span&gt;Senior Vice President of Software Engineering&lt;br/&gt;&lt;/span&gt;&lt;span&gt;One Apple Park Way&lt;br/&gt;&lt;/span&gt;&lt;span&gt;Cupertino, CA 95014&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RE: Open Letter from the OpenID Foundation to Apple Regarding Sign In with Apple&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Dear Mr.&lt;/span&gt; &lt;span&gt;Federighi,&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;The OpenID Foundation applauds Apple’s efforts to allow users to login to third-party mobile and Web applications with their Apple ID using OpenID Connect.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Over the course of the last decade,&lt;/span&gt; &lt;a href=&quot;https://openid.net/connect/&quot;&gt;&lt;span&gt;OpenID Connect&lt;/span&gt;&lt;/a&gt; &lt;span&gt;was developed by a large number of companies and industry experts within the OpenID Foundation (OIDF). OpenID Connect is a modern, widely-adopted identity protocol built on OAuth 2.0 that enables third-party login to applications in a standard way.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;It appears Apple has largely adopted OpenID Connect for their Sign In with Apple implementation offering, or at least has intended to. Known differences between the two are tracked in a document managed by the OIDF certification team, found here:&lt;/span&gt; &lt;a href=&quot;https://bitbucket.org/openid/connect/src/default/How-Sign-in-with-Apple-differs-from-OpenID-Connect.md&quot;&gt;&lt;span&gt;https://bitbucket.org/openid/connect/src/default/How-Sign-in-with-Apple-differs-from-OpenID-Connect.md&lt;/span&gt;&lt;/a&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;The current set of differences between OpenID Connect and Sign In with Apple reduces the places where users can use Sign In with Apple and exposes them to greater security and privacy risks. It also places an unnecessary burden on developers of both OpenID Connect and Sign In with Apple. By closing the current gaps, Apple would be interoperable with widely-available OpenID Connect Relying Party software.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Therefore the OpenID Foundation invites Apple to:&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;Address the gaps between Sign In with Apple and OpenID Connect based on the feedback.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Use the&lt;/span&gt; &lt;a href=&quot;https://openid.net/certification/&quot;&gt;&lt;span&gt;OpenID Connect Self Certification Test Suite&lt;/span&gt;&lt;/a&gt; &lt;span&gt;to improve the interoperability and security of Sign In with Apple.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Publicly state that Sign In with Apple is compatible and interoperable with widely-available OpenID Connect Relying Party software.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Join the OpenID Foundation.&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span&gt;The OpenID Foundation and the community at large would appreciate Apple’s feedback.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Thank you for your consideration.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Regards,&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Nat Sakimura&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;OpenID Foundation Chairman &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;On behalf of the Board of Directors of the OpenID Foundation&lt;/span&gt;&lt;/p&gt;


</description>
<pubDate>Sat, 29 Jun 2019 05:56:51 +0000</pubDate>
<dc:creator>julian37</dc:creator>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://openid.net/2019/06/27/open-letter-from-the-openid-foundation-to-apple-regarding-sign-in-with-apple/</dc:identifier>
</item>
<item>
<title>I’ve spent five years writing a JavaScript framework</title>
<link>https://medium.com/@jcormont/ive-spent-5-years-writing-a-javascript-framework-on-my-own-af1201f4075c</link>
<guid isPermaLink="true" >https://medium.com/@jcormont/ive-spent-5-years-writing-a-javascript-framework-on-my-own-af1201f4075c</guid>
<description>&lt;div readability=&quot;6.1340206185567&quot;&gt;

&lt;div class=&quot;gt&quot;&gt;
&lt;div class=&quot;ah ag&quot;&gt;
&lt;div&gt;&lt;a href=&quot;https://medium.com/@jcormont&quot;&gt;&lt;img alt=&quot;Jelmer&quot; src=&quot;https://miro.medium.com/fit/c/96/96/0*FFcWUGjDlqMAEO-e.png&quot; class=&quot;n dv gu gv&quot; width=&quot;48&quot; height=&quot;48&quot;/&gt;&lt;/a&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;hj hk eq bh hl b hm hn ho hp hq hr hs ht hu hv hw&quot;&gt;Typescene is a robust front end library written in TypeScript: strongly typed, no dependencies, no nonsense. It’s really great for desktop-like (or mobile) applications, not so great for blogs and other content. It isn’t backed by some major corporation, not even a startup, but it’s been built by me: one developer on a mission to build a no-nonsense dependency-less framework — not scared of rework and refactoring because not much was at stake all this time except my own &lt;a href=&quot;https://en.wikipedia.org/wiki/Eating_your_own_dog_food&quot; class=&quot;aq cc hx hy hz ia&quot;&gt;dog food&lt;/a&gt; work, &lt;em class=&quot;ib&quot;&gt;until now&lt;/em&gt;.&lt;/p&gt;
&lt;p class=&quot;hj hk eq bh hl b hm hn ho hp hq hr hs ht hu hv hw&quot;&gt;Go check out &lt;a href=&quot;https://typescene.dev&quot; class=&quot;aq cc hx hy hz ia&quot;&gt;https://typescene.dev&lt;/a&gt; and take it for a spin.&lt;/p&gt;
&lt;p class=&quot;hj hk eq bh hl b hm hn ho hp hq hr hs ht hu hv hw&quot;&gt;&lt;strong class=&quot;hl ic&quot;&gt;But why?&lt;/strong&gt;&lt;/p&gt;

Photo by &lt;a href=&quot;https://unsplash.com/@lucabravo?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot; class=&quot;aq cc hx hy hz ia&quot;&gt;Luca Bravo&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/search/photos/computer-coffee?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot; class=&quot;aq cc hx hy hz ia&quot;&gt;Unsplash&lt;/a&gt;
&lt;p class=&quot;hj hk eq bh hl b hm hn ho hp hq hr hs ht hu hv hw&quot;&gt;With so many great platforms and tools that are available for Web development today, it’s easier than ever to build rich Internet apps using one of the existing frameworks. But all of this progress in Web development comes at a cost. Have you ever opened a years-old project that used the favorite Web framework-du-jour, and tried to make sense of it now? Would you be able to &lt;em class=&quot;ib&quot;&gt;maintain&lt;/em&gt; such a piece of software?&lt;/p&gt;
&lt;blockquote class=&quot;iv&quot; readability=&quot;5&quot;&gt;
&lt;div class=&quot;iw ix iy bh gk b iz ja jb jc jd je hw&quot; readability=&quot;9&quot;&gt;
&lt;p class=&quot;gk b jf jg bl&quot;&gt;All of this progress comes at a cost. Have you ever opened a years-old project that used the favorite Web framework-du-jour, and tried to make sense of it now?&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;hj hk eq bh hl b hm jh ho ji hq jj hs jk hu jl hw&quot;&gt;Sure enough, modern package managers solve some of the compatibility issues, but library APIs are constantly in flux. New ideas come in and ‘legacy’ ones disappear. Who will remember the (hypothetical) peculiarities of the &lt;em class=&quot;ib&quot;&gt;willUpdate&lt;/em&gt; method in version 14.2.132 of framework X?&lt;/p&gt;
&lt;p class=&quot;hj hk eq bh hl b hm hn ho hp hq hr hs ht hu hv hw&quot;&gt;If constantly upgrading to the latest version is not an option, we’re setting ourselves up for trouble down the road.&lt;/p&gt;
</description>
<pubDate>Sat, 29 Jun 2019 00:35:07 +0000</pubDate>
<dc:creator>jcormont</dc:creator>
<og:type>article</og:type>
<og:title>I’ve spent 5 years writing a JavaScript framework on my own.</og:title>
<og:description>Typescene is a robust front end library written in TypeScript: strongly typed, no dependencies, no nonsense. It’s really great for…</og:description>
<og:url>https://medium.com/@jcormont/ive-spent-5-years-writing-a-javascript-framework-on-my-own-af1201f4075c</og:url>
<og:image>https://miro.medium.com/max/1200/1*cnuwLA55oIKrozWFKmUc-w.jpeg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://medium.com/@jcormont/ive-spent-5-years-writing-a-javascript-framework-on-my-own-af1201f4075c</dc:identifier>
</item>
<item>
<title>Microsoft&amp;#039;s Linux Kernel</title>
<link>https://github.com/microsoft/WSLv2-Linux-Kernel</link>
<guid isPermaLink="true" >https://github.com/microsoft/WSLv2-Linux-Kernel</guid>
<description>&lt;div class=&quot;Box-body&quot;&gt;
&lt;div class=&quot;plain&quot;&gt;
&lt;pre&gt;
Linux kernel
============

There are several guides for kernel developers and users. These guides can
be rendered in a number of formats, like HTML and PDF. Please read
Documentation/admin-guide/README.rst first.

In order to build the documentation, use ``make htmldocs`` or
``make pdfdocs``.  The formatted documentation can also be read online at:

    &lt;a href=&quot;https://www.kernel.org/doc/html/latest/&quot; rel=&quot;nofollow&quot;&gt;https://www.kernel.org/doc/html/latest/&lt;/a&gt;

There are various text files in the Documentation/ subdirectory,
several of them using the Restructured Text markup notation.
See Documentation/00-INDEX for a list of what is contained in each file.

Please read the Documentation/process/changes.rst file, as it contains the
requirements for building and running the kernel, and information about
the problems which may result by upgrading your kernel.
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Fri, 28 Jun 2019 22:28:16 +0000</pubDate>
<dc:creator>polyomino</dc:creator>
<og:image>https://avatars2.githubusercontent.com/u/6154722?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>microsoft/WSL2-Linux-Kernel</og:title>
<og:url>https://github.com/microsoft/WSL2-Linux-Kernel</og:url>
<og:description>The source for the Linux kernel used in Windows Subsystem for Linux 2 (WSL2) - microsoft/WSL2-Linux-Kernel</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/microsoft/WSL2-Linux-Kernel</dc:identifier>
</item>
<item>
<title>New Property of Light Discovered</title>
<link>https://phys.org/news/2019-06-property.html</link>
<guid isPermaLink="true" >https://phys.org/news/2019-06-property.html</guid>
<description>&lt;div class=&quot;article-gallery lightGallery&quot; readability=&quot;31&quot;&gt;
&lt;div data-thumb=&quot;https://3c1703fe8d.site.internapcdn.net/newman/csz/news/tmb/2019/lightbeam.jpg&quot; data-src=&quot;https://3c1703fe8d.site.internapcdn.net/newman/gfx/news/hires/2019/lightbeam.jpg&quot; data-sub-html=&quot;Credit: CC0 Public Domain&quot; readability=&quot;7&quot;&gt;&lt;img src=&quot;https://3c1703fe8d.site.internapcdn.net/newman/csz/news/800/2019/lightbeam.jpg&quot; alt=&quot;light beam&quot; title=&quot;Credit: CC0 Public Domain&quot;/&gt; Credit: CC0 Public Domain&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;A team of researchers affiliated with several institutions in Spain and the U.S. has announced that they have discovered a new property of light—self-torque. In their paper published in the journal &lt;em&gt;Science&lt;/em&gt;, the group describes how they happened to spot the new property and possible uses for it.&lt;/p&gt;
&lt;section class=&quot;article-banner first-banner&quot;&gt;
&lt;/section&gt;&lt;p&gt;Scientists have long known about such properties of light as wavelength. More recently, researchers have found that light can also be twisted, a property called &lt;a href=&quot;https://phys.org/tags/angular+momentum/&quot; rel=&quot;tag&quot; class=&quot;textTag&quot;&gt;angular momentum&lt;/a&gt;. Beams with highly structured angular momentum are said to have orbital angular momentum (OAM), and are called &lt;a href=&quot;https://phys.org/tags/vortex+beams/&quot; rel=&quot;tag&quot; class=&quot;textTag&quot;&gt;vortex beams&lt;/a&gt;. They appear as a helix surrounding a common center, and when they strike a flat surface, they appear as doughnut-shaped. In this new effort, the researchers were working with OAM beams when they found the light behaving in a way that had never been seen before.&lt;/p&gt;
&lt;p&gt;The experiments involved firing two lasers at a cloud of argon gas—doing so forced the beams to overlap, and they joined and were emitted as a single beam from the other side of the argon cloud. The result was a type of vortex beam. The researchers then wondered what would happen if the lasers had different orbital angular momentum and if they were slightly out of sync. This resulted in a beam that looked like a corkscrew with a gradually changing twist. And when the beam struck a &lt;a href=&quot;https://phys.org/tags/flat+surface/&quot; rel=&quot;tag&quot; class=&quot;textTag&quot;&gt;flat surface&lt;/a&gt;, it looked like a crescent moon. The researchers noted that looked at another way, a &lt;a href=&quot;https://phys.org/tags/single+photon/&quot; rel=&quot;tag&quot; class=&quot;textTag&quot;&gt;single photon&lt;/a&gt; at the front of the beam was orbiting around its center more slowly than a photon at the back of the &lt;a href=&quot;https://phys.org/tags/beam/&quot; rel=&quot;tag&quot; class=&quot;textTag&quot;&gt;beam&lt;/a&gt;. The researchers promptly dubbed the new property self-torque—and not only is it a newly discovered property of light, it is also one that has never even been predicted.&lt;/p&gt;
A new property of light beams, the self-torque of light, which is associated to a temporal variation of the orbital angular momentum. Extreme-ultraviolet ultrafast pulses with self-torque are generated through high harmonic generation. Credit: JILA (USA) Rebecca Jacobson, Servicio de Produccion e Innovacion Digital – Universidad de Salamanca (Spain)
&lt;p&gt;The researchers suggest that it should be possible to use their technique to modulate the &lt;a href=&quot;https://phys.org/tags/orbital+angular+momentum/&quot; rel=&quot;tag&quot; class=&quot;textTag&quot;&gt;orbital angular momentum&lt;/a&gt; of light in ways very similar to modulating frequencies in communications equipment. This could lead to the development of novel devices that make use of manipulating extremely tiny materials.&lt;/p&gt;
&lt;hr/&gt;&lt;div class=&quot;article-main__explore my-4 d-print-none&quot;&gt;
&lt;div class=&quot;d-flex align-items-center&quot;&gt;
&lt;p class=&quot;text-bold mb-0 ml-2&quot;&gt;Explore further&lt;/p&gt;
&lt;/div&gt;
&lt;a class=&quot;text-medium text-info mt-2 d-inline-block&quot; href=&quot;https://phys.org/news/2019-06-multicolored-ways.html&quot;&gt;Multicolored light twists in new knotted ways&lt;/a&gt;&lt;/div&gt;
&lt;hr class=&quot;mb-4&quot;/&gt;&lt;div class=&quot;article-main__more p-4&quot; readability=&quot;27.834196891192&quot;&gt;&lt;strong&gt;More information:&lt;/strong&gt; Laura Rego et al. Generation of extreme-ultraviolet beams with time-varying orbital angular momentum, &lt;em&gt;Science&lt;/em&gt; (2019). &lt;a data-doi=&quot;1&quot; href=&quot;http://dx.doi.org/10.1126/science.aaw9486&quot; target=&quot;_blank&quot;&gt;DOI: 10.1126/science.aaw9486&lt;/a&gt;

&lt;/div&gt;
&lt;p class=&quot;article-main__note mt-4&quot;&gt;© 2019 Science X Network&lt;/p&gt;
&lt;div class=&quot;d-none d-print-block&quot; readability=&quot;14&quot;&gt;
&lt;p&gt;&lt;strong&gt;Citation&lt;/strong&gt;: New property of light discovered (2019, June 28) retrieved 29 June 2019 from https://phys.org/news/2019-06-property.html&lt;/p&gt;
&lt;p&gt;This document is subject to copyright. Apart from any fair dealing for the purpose of private study or research, no part may be reproduced without the written permission. The content is provided for information purposes only.&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Fri, 28 Jun 2019 22:09:34 +0000</pubDate>
<dc:creator>jchanimal</dc:creator>
<og:title>New property of light discovered</og:title>
<og:description>A team of researchers affiliated with several institutions in Spain and the U.S. has announced that they have discovered a new property of light—self-torque. In their paper published in the journal Science, the group describes how they happened to spot the new property and possible uses for it.</og:description>
<og:image>https://3c1703fe8d.site.internapcdn.net/newman/gfx/news/hires/2019/lightbeam.jpg</og:image>
<og:type>article</og:type>
<og:url>https://phys.org/news/2019-06-property.html</og:url>
<dc:format>text/html</dc:format>
<dc:identifier>https://phys.org/news/2019-06-property.html</dc:identifier>
</item>
<item>
<title>Boeing&amp;#039;s 737 Max software outsourced to lower-paid engineers</title>
<link>https://www.bloomberg.com/news/articles/2019-06-28/boeing-s-737-max-software-outsourced-to-9-an-hour-engineers</link>
<guid isPermaLink="true" >https://www.bloomberg.com/news/articles/2019-06-28/boeing-s-737-max-software-outsourced-to-9-an-hour-engineers</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://www.bloomberg.com/news/articles/2019-06-28/boeing-s-737-max-software-outsourced-to-9-an-hour-engineers&quot;&gt;https://www.bloomberg.com/news/articles/2019-06-28/boeing-s-737-max-software-outsourced-to-9-an-hour-engineers&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=20309052&quot;&gt;https://news.ycombinator.com/item?id=20309052&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 251&lt;/p&gt;
&lt;p&gt;# Comments: 139&lt;/p&gt;
</description>
<pubDate>Fri, 28 Jun 2019 21:49:13 +0000</pubDate>
<dc:creator>pseudolus</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.bloomberg.com/tosv2.html?vid=&amp;uuid=986f2020-9ad2-11e9-aa9d-67935c393407&amp;url=L25ld3MvYXJ0aWNsZXMvMjAxOS0wNi0yOC9ib2Vpbmctcy03MzctbWF4LXNvZnR3YXJlLW91dHNvdXJjZWQtdG8tOS1hbi1ob3VyLWVuZ2luZWVycw==</dc:identifier>
</item>
<item>
<title>Awk by Example</title>
<link>https://developer.ibm.com/tutorials/l-awk1/</link>
<guid isPermaLink="true" >https://developer.ibm.com/tutorials/l-awk1/</guid>
<description>&lt;p xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;In this series of articles, I’m going to turn you into a proficient awk coder. I’ll admit, awk doesn’t have a very pretty or particularly “hip” name, and the GNU version of awk, called gawk, sounds downright weird. Those unfamiliar with the language may hear “awk” and think of a mess of code so backwards and antiquated that it’s capable of driving even the most knowledgeable UNIX guru to the brink of insanity (causing him to repeatedly yelp “kill -9!” as he runs for coffee machine).&lt;/p&gt;&lt;p&gt;Sure, awk doesn’t have a great name. But it is a great language. Awk is geared toward text processing and report generation, yet features many well-designed features that allow for serious programming. And, unlike some languages, awk’s syntax is familiar, and borrows some of the best parts of languages like C, python, and bash (although, technically, awk was created before both python and bash). Awk is one of those languages that, once learned, will become a key part of your strategic coding arsenal.&lt;/p&gt;
&lt;h2 id=&quot;the-first-awk&quot;&gt;The first awk&lt;/h2&gt;
&lt;p&gt;Let’s go ahead and start playing around with awk to see how it works. At the command line, enter the following command:&lt;/p&gt;
&lt;div class=&quot;ibm-codeblock&quot;&gt;
&lt;div class=&quot;bx--snippet bx--snippet--multi&quot; data-code-snippet=&quot;&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;bx--snippet-container&quot; aria-label=&quot;Code Snippet Text&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;code&gt;$ awk '{ print }' /etc/passwd&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;button data-copy-btn=&quot;&quot; class=&quot;bx--snippet-button&quot; type=&quot;button&quot; aria-label=&quot;Copy code&quot; tabindex=&quot;0&quot;&gt;

&lt;/button&gt;&lt;button class=&quot;bx--btn bx--btn--ghost bx--btn--sm bx--snippet-btn--expand&quot; type=&quot;button&quot;&gt;&lt;span class=&quot;bx--snippet-btn--text&quot; data-show-more-text=&quot;Show more&quot; data-show-less-text=&quot;Show less&quot;&gt;Show more&lt;/span&gt;&lt;/button&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;You should see the contents of your /etc/passwd file appear before your eyes. Now, for an explanation of what awk did. When we called awk, we specified /etc/passwd as our input file. When we executed awk, it evaluated the print command for each line in /etc/passwd, in order. All output is sent to stdout, and we get a result identical to catting /etc/passwd. Now, for an explanation of the &lt;code&gt;{ print }&lt;/code&gt; code block. In awk, curly braces are used to group blocks of code together, similar to C. Inside our block of code, we have a single print command. In awk, when a print command appears by itself, the full contents of the current line are printed.&lt;/p&gt;
&lt;p&gt;Here is another awk example that does exactly the same thing:&lt;/p&gt;
&lt;div class=&quot;ibm-codeblock&quot;&gt;
&lt;div class=&quot;bx--snippet bx--snippet--multi&quot; data-code-snippet=&quot;&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;bx--snippet-container&quot; aria-label=&quot;Code Snippet Text&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;code&gt;$ awk '{ print $0 }' /etc/passwd&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;button data-copy-btn=&quot;&quot; class=&quot;bx--snippet-button&quot; type=&quot;button&quot; aria-label=&quot;Copy code&quot; tabindex=&quot;0&quot;&gt;

&lt;/button&gt;&lt;button class=&quot;bx--btn bx--btn--ghost bx--btn--sm bx--snippet-btn--expand&quot; type=&quot;button&quot;&gt;&lt;span class=&quot;bx--snippet-btn--text&quot; data-show-more-text=&quot;Show more&quot; data-show-less-text=&quot;Show less&quot;&gt;Show more&lt;/span&gt;&lt;/button&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;In awk, the &lt;code&gt;$0&lt;/code&gt; variable represents the entire current line, so &lt;code&gt;print&lt;/code&gt; and &lt;code&gt;print $0&lt;/code&gt; do exactly the same thing. If you’d like, you can create an awk program that will output data totally unrelated to the input data. Here’s an example:&lt;/p&gt;
&lt;div class=&quot;ibm-codeblock&quot;&gt;
&lt;div class=&quot;bx--snippet bx--snippet--multi&quot; data-code-snippet=&quot;&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;bx--snippet-container&quot; aria-label=&quot;Code Snippet Text&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;code&gt;$ awk '{ print &quot;&quot; }' /etc/passwd&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;button data-copy-btn=&quot;&quot; class=&quot;bx--snippet-button&quot; type=&quot;button&quot; aria-label=&quot;Copy code&quot; tabindex=&quot;0&quot;&gt;

&lt;/button&gt;&lt;button class=&quot;bx--btn bx--btn--ghost bx--btn--sm bx--snippet-btn--expand&quot; type=&quot;button&quot;&gt;&lt;span class=&quot;bx--snippet-btn--text&quot; data-show-more-text=&quot;Show more&quot; data-show-less-text=&quot;Show less&quot;&gt;Show more&lt;/span&gt;&lt;/button&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;Whenever you pass the “” string to the print command, it prints a blank line. If you test this script, you’ll find that awk outputs one blank line for every line in your /etc/passwd file. Again, this is because awk executes your script for every line in the input file. Here’s another example:&lt;/p&gt;
&lt;div class=&quot;ibm-codeblock&quot;&gt;
&lt;div class=&quot;bx--snippet bx--snippet--multi&quot; data-code-snippet=&quot;&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;bx--snippet-container&quot; aria-label=&quot;Code Snippet Text&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;code&gt;$ awk '{ print &quot;hiya&quot; }' /etc/passwd&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;button data-copy-btn=&quot;&quot; class=&quot;bx--snippet-button&quot; type=&quot;button&quot; aria-label=&quot;Copy code&quot; tabindex=&quot;0&quot;&gt;

&lt;/button&gt;&lt;button class=&quot;bx--btn bx--btn--ghost bx--btn--sm bx--snippet-btn--expand&quot; type=&quot;button&quot;&gt;&lt;span class=&quot;bx--snippet-btn--text&quot; data-show-more-text=&quot;Show more&quot; data-show-less-text=&quot;Show less&quot;&gt;Show more&lt;/span&gt;&lt;/button&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;Running this script will fill your screen with hiya’s. 🙂&lt;/p&gt;
&lt;h2 id=&quot;h2multiplefields&quot;&gt;Multiple fields&lt;/h2&gt;
&lt;p&gt;Awk is really good at handling text that has been broken into multiple logical fields, and allows you to effortlessly reference each individual field from inside your awk script. The following script will print out a list of all user accounts on your system:&lt;/p&gt;
&lt;div class=&quot;ibm-codeblock&quot;&gt;
&lt;div class=&quot;bx--snippet bx--snippet--multi&quot; data-code-snippet=&quot;&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;bx--snippet-container&quot; aria-label=&quot;Code Snippet Text&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;code&gt;$ awk ‑F&quot;:&quot; '{ print $1 }' /etc/passwd&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;button data-copy-btn=&quot;&quot; class=&quot;bx--snippet-button&quot; type=&quot;button&quot; aria-label=&quot;Copy code&quot; tabindex=&quot;0&quot;&gt;

&lt;/button&gt;&lt;button class=&quot;bx--btn bx--btn--ghost bx--btn--sm bx--snippet-btn--expand&quot; type=&quot;button&quot;&gt;&lt;span class=&quot;bx--snippet-btn--text&quot; data-show-more-text=&quot;Show more&quot; data-show-less-text=&quot;Show less&quot;&gt;Show more&lt;/span&gt;&lt;/button&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;Above, when we called awk, we use the -F option to specify “:” as the field separator. When awk processes the &lt;code&gt;print $1&lt;/code&gt; command, it will print out the first field that appears on each line in the input file. Here’s another example:&lt;/p&gt;
&lt;div class=&quot;ibm-codeblock&quot;&gt;
&lt;div class=&quot;bx--snippet bx--snippet--multi&quot; data-code-snippet=&quot;&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;bx--snippet-container&quot; aria-label=&quot;Code Snippet Text&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;code&gt;$ awk ‑F&quot;:&quot; '{ print $1 $3 }' /etc/passwd&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;button data-copy-btn=&quot;&quot; class=&quot;bx--snippet-button&quot; type=&quot;button&quot; aria-label=&quot;Copy code&quot; tabindex=&quot;0&quot;&gt;

&lt;/button&gt;&lt;button class=&quot;bx--btn bx--btn--ghost bx--btn--sm bx--snippet-btn--expand&quot; type=&quot;button&quot;&gt;&lt;span class=&quot;bx--snippet-btn--text&quot; data-show-more-text=&quot;Show more&quot; data-show-less-text=&quot;Show less&quot;&gt;Show more&lt;/span&gt;&lt;/button&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;Here’s an excerpt of the output from this script:&lt;/p&gt;
&lt;div class=&quot;ibm-codeblock&quot;&gt;
&lt;div class=&quot;bx--snippet bx--snippet--multi&quot; data-code-snippet=&quot;&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;bx--snippet-container&quot; aria-label=&quot;Code Snippet Text&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;code&gt;halt7 
operator11 
root0 
shutdown6 
sync5 
bin1 
....etc.&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;button data-copy-btn=&quot;&quot; class=&quot;bx--snippet-button&quot; type=&quot;button&quot; aria-label=&quot;Copy code&quot; tabindex=&quot;0&quot;&gt;

&lt;/button&gt;&lt;button class=&quot;bx--btn bx--btn--ghost bx--btn--sm bx--snippet-btn--expand&quot; type=&quot;button&quot;&gt;&lt;span class=&quot;bx--snippet-btn--text&quot; data-show-more-text=&quot;Show more&quot; data-show-less-text=&quot;Show less&quot;&gt;Show more&lt;/span&gt;&lt;/button&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;As you can see, awk prints out the first and third fields of the /etc/passwd file, which happen to be the username and uid fields respectively. Now, while the script did work, it’s not perfect — there aren’t any spaces between the two output fields! If you’re used to programming in bash or python, you may have expected the &lt;code&gt;print $1 $3&lt;/code&gt;command to insert a space between the two fields. However, when two strings appear next to each other in an awk program, awk concatenates them without adding an intermediate space. The following command will insert a space between both fields:&lt;/p&gt;
&lt;div class=&quot;ibm-codeblock&quot;&gt;
&lt;div class=&quot;bx--snippet bx--snippet--multi&quot; data-code-snippet=&quot;&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;bx--snippet-container&quot; aria-label=&quot;Code Snippet Text&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;code&gt;$ awk ‑F&quot;:&quot; '{ print $1 &quot; &quot; $3 }' /etc/passwd&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;button data-copy-btn=&quot;&quot; class=&quot;bx--snippet-button&quot; type=&quot;button&quot; aria-label=&quot;Copy code&quot; tabindex=&quot;0&quot;&gt;

&lt;/button&gt;&lt;button class=&quot;bx--btn bx--btn--ghost bx--btn--sm bx--snippet-btn--expand&quot; type=&quot;button&quot;&gt;&lt;span class=&quot;bx--snippet-btn--text&quot; data-show-more-text=&quot;Show more&quot; data-show-less-text=&quot;Show less&quot;&gt;Show more&lt;/span&gt;&lt;/button&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;When you call print this way, it’ll concatenate &lt;code&gt;$1&lt;/code&gt;, &lt;code&gt;&quot; &quot;&lt;/code&gt;, and &lt;code&gt;$3&lt;/code&gt;, creating readable output. Of course, we can also insert some text labels if needed:&lt;/p&gt;
&lt;div class=&quot;ibm-codeblock&quot;&gt;
&lt;div class=&quot;bx--snippet bx--snippet--multi&quot; data-code-snippet=&quot;&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;bx--snippet-container&quot; aria-label=&quot;Code Snippet Text&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;code&gt;$ awk ‑F&quot;:&quot; '{ print &quot;username: &quot; $1 &quot;\t\tuid:&quot; $3 }' /etc/passwd&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;button data-copy-btn=&quot;&quot; class=&quot;bx--snippet-button&quot; type=&quot;button&quot; aria-label=&quot;Copy code&quot; tabindex=&quot;0&quot;&gt;

&lt;/button&gt;&lt;button class=&quot;bx--btn bx--btn--ghost bx--btn--sm bx--snippet-btn--expand&quot; type=&quot;button&quot;&gt;&lt;span class=&quot;bx--snippet-btn--text&quot; data-show-more-text=&quot;Show more&quot; data-show-less-text=&quot;Show less&quot;&gt;Show more&lt;/span&gt;&lt;/button&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;This will cause the output to be:&lt;/p&gt;
&lt;div class=&quot;ibm-codeblock&quot;&gt;
&lt;div class=&quot;bx--snippet bx--snippet--multi&quot; data-code-snippet=&quot;&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;bx--snippet-container&quot; aria-label=&quot;Code Snippet Text&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;code&gt;username: halt     uid:7 
username: operator uid:11 
username: root     uid:0 
username: shutdown uid:6 
username: sync     uid:5 
username: bin      uid:1 
....etc.&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;button data-copy-btn=&quot;&quot; class=&quot;bx--snippet-button&quot; type=&quot;button&quot; aria-label=&quot;Copy code&quot; tabindex=&quot;0&quot;&gt;

&lt;/button&gt;&lt;button class=&quot;bx--btn bx--btn--ghost bx--btn--sm bx--snippet-btn--expand&quot; type=&quot;button&quot;&gt;&lt;span class=&quot;bx--snippet-btn--text&quot; data-show-more-text=&quot;Show more&quot; data-show-less-text=&quot;Show less&quot;&gt;Show more&lt;/span&gt;&lt;/button&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h2 xmlns=&quot;http://www.w3.org/1999/xhtml&quot; id=&quot;external-scripts&quot;&gt;External scripts&lt;/h2&gt;
&lt;p&gt;Passing your scripts to awk as a command line argument can be very handy for small one-liners, but when it comes to complex, multi-line programs, you’ll definitely want to compose your script in an external file. Awk can then be told to source this script file by passing it the -f option:&lt;/p&gt;
&lt;div class=&quot;ibm-codeblock&quot;&gt;
&lt;div class=&quot;bx--snippet bx--snippet--multi&quot; data-code-snippet=&quot;&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;bx--snippet-container&quot; aria-label=&quot;Code Snippet Text&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;code&gt;$ awk ‑f myscript.awk myfile.in&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;button data-copy-btn=&quot;&quot; class=&quot;bx--snippet-button&quot; type=&quot;button&quot; aria-label=&quot;Copy code&quot; tabindex=&quot;0&quot;&gt;

&lt;/button&gt;&lt;button class=&quot;bx--btn bx--btn--ghost bx--btn--sm bx--snippet-btn--expand&quot; type=&quot;button&quot;&gt;&lt;span class=&quot;bx--snippet-btn--text&quot; data-show-more-text=&quot;Show more&quot; data-show-less-text=&quot;Show less&quot;&gt;Show more&lt;/span&gt;&lt;/button&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;Putting your scripts in their own text files also allows you to take advantage of additional awk features. For example, this multi-line script does the same thing as one of our earlier one-liners, printing out the first field of each line in /etc/passwd:&lt;/p&gt;
&lt;div class=&quot;ibm-codeblock&quot;&gt;
&lt;div class=&quot;bx--snippet bx--snippet--multi&quot; data-code-snippet=&quot;&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;bx--snippet-container&quot; aria-label=&quot;Code Snippet Text&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;code&gt;BEGIN { 
        FS=&quot;:&quot; 
} 
{ print $1 }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;button data-copy-btn=&quot;&quot; class=&quot;bx--snippet-button&quot; type=&quot;button&quot; aria-label=&quot;Copy code&quot; tabindex=&quot;0&quot;&gt;

&lt;/button&gt;&lt;button class=&quot;bx--btn bx--btn--ghost bx--btn--sm bx--snippet-btn--expand&quot; type=&quot;button&quot;&gt;&lt;span class=&quot;bx--snippet-btn--text&quot; data-show-more-text=&quot;Show more&quot; data-show-less-text=&quot;Show less&quot;&gt;Show more&lt;/span&gt;&lt;/button&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;The difference between these two methods has to do with how we set the field separator. In this script, the field separator is specified within the code itself (by setting the FS variable), while our previous example set FS by passing the -F”:” option to awk on the command line. It’s generally best to set the field separator inside the script itself, simply because it means you have one less command line argument to remember to type. We’ll cover the FS variable in more detail later in this article.&lt;/p&gt;
&lt;h2 id=&quot;the-begin-and-end-blocks&quot;&gt;The BEGIN and END blocks&lt;/h2&gt;
&lt;p&gt;Normally, awk executes each block of your script’s code once for each input line. However, there are many programming situations where you may need to execute initialization code &lt;em&gt;before&lt;/em&gt; awk begins processing the text from the input file. For such situations, awk allows you to define a BEGIN block. We used a BEGIN block in the previous example. Because the BEGIN block is evaluated before awk starts processing the input file, it’s an excellent place to initialize the FS (field separator) variable, print a heading, or initialize other global variables that you’ll reference later in the program.&lt;/p&gt;
&lt;p&gt;Awk also provides another special block, called the END block. Awk executes this block after all lines in the input file have been processed. Typically, the END block is used to perform final calculations or print summaries that should appear at the end of the output stream.&lt;/p&gt;
&lt;h2 id=&quot;regular-expressions-and-blocks&quot;&gt;Regular expressions and blocks&lt;/h2&gt;
&lt;p&gt;Awk allows the use of regular expressions to selectively execute an individual block of code, depending on whether or not the regular expression matches the current line. Here’s an example script that outputs only those lines that contain the character sequence &lt;code&gt;foo&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;ibm-codeblock&quot;&gt;
&lt;div class=&quot;bx--snippet bx--snippet--multi&quot; data-code-snippet=&quot;&quot;&gt;
&lt;div class=&quot;bx--snippet-container&quot; aria-label=&quot;Code Snippet Text&quot;&gt;
&lt;pre&gt;
&lt;code&gt;/foo/ { print }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;button data-copy-btn=&quot;&quot; class=&quot;bx--snippet-button&quot; type=&quot;button&quot; aria-label=&quot;Copy code&quot; tabindex=&quot;0&quot;&gt;

&lt;/button&gt;&lt;button class=&quot;bx--btn bx--btn--ghost bx--btn--sm bx--snippet-btn--expand&quot; type=&quot;button&quot;&gt;&lt;span class=&quot;bx--snippet-btn--text&quot; data-show-more-text=&quot;Show more&quot; data-show-less-text=&quot;Show less&quot;&gt;Show more&lt;/span&gt;&lt;/button&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;Of course, you can use more complicated regular expressions. Here’s a script that will print only lines that contain a floating point number:&lt;/p&gt;
&lt;div class=&quot;ibm-codeblock&quot;&gt;
&lt;div class=&quot;bx--snippet bx--snippet--multi&quot; data-code-snippet=&quot;&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;bx--snippet-container&quot; aria-label=&quot;Code Snippet Text&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;code&gt;/[0‑9]+\.[0‑9]∗/ { print }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;button data-copy-btn=&quot;&quot; class=&quot;bx--snippet-button&quot; type=&quot;button&quot; aria-label=&quot;Copy code&quot; tabindex=&quot;0&quot;&gt;

&lt;/button&gt;&lt;button class=&quot;bx--btn bx--btn--ghost bx--btn--sm bx--snippet-btn--expand&quot; type=&quot;button&quot;&gt;&lt;span class=&quot;bx--snippet-btn--text&quot; data-show-more-text=&quot;Show more&quot; data-show-less-text=&quot;Show less&quot;&gt;Show more&lt;/span&gt;&lt;/button&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h2 xmlns=&quot;http://www.w3.org/1999/xhtml&quot; id=&quot;expressions-and-blocks&quot;&gt;Expressions and blocks&lt;/h2&gt;
&lt;p&gt;There are many other ways to selectively execute a block of code. We can place any kind of boolean expression before a code block to control when a particular block is executed. Awk will execute a code block only if the preceding boolean expression evaluates to true. The following example script will output the third field of all lines that have a first field equal to &lt;code&gt;fred&lt;/code&gt;. If the first field of the current line is not equal to &lt;code&gt;fred&lt;/code&gt;, awk will continue processing the file and will not execute the &lt;code&gt;print&lt;/code&gt; statement for the current line:&lt;/p&gt;
&lt;div class=&quot;ibm-codeblock&quot;&gt;
&lt;div class=&quot;bx--snippet bx--snippet--multi&quot; data-code-snippet=&quot;&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;bx--snippet-container&quot; aria-label=&quot;Code Snippet Text&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;code&gt;$1 == &quot;fred&quot; { print $3 }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;button data-copy-btn=&quot;&quot; class=&quot;bx--snippet-button&quot; type=&quot;button&quot; aria-label=&quot;Copy code&quot; tabindex=&quot;0&quot;&gt;

&lt;/button&gt;&lt;button class=&quot;bx--btn bx--btn--ghost bx--btn--sm bx--snippet-btn--expand&quot; type=&quot;button&quot;&gt;&lt;span class=&quot;bx--snippet-btn--text&quot; data-show-more-text=&quot;Show more&quot; data-show-less-text=&quot;Show less&quot;&gt;Show more&lt;/span&gt;&lt;/button&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;Awk offers a full selection of comparison operators, including the usual “==”, “&amp;lt;“, “&amp;gt;”, “&amp;lt;=”, “&amp;gt;=”, and “!=”. In addition, awk provides the “~” and “!~” operators, which mean “matches” and “does not match”. They’re used by specifying a variable on the left side of the operator, and a regular expression on the right side. Here’s an example that will print only the third field on the line if the fifth field on the same line contains the character sequence &lt;code&gt;root&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;ibm-codeblock&quot;&gt;
&lt;div class=&quot;bx--snippet bx--snippet--multi&quot; data-code-snippet=&quot;&quot;&gt;
&lt;div class=&quot;bx--snippet-container&quot; aria-label=&quot;Code Snippet Text&quot;&gt;
&lt;pre&gt;
&lt;code&gt;$5 ~ /root/ { print $3 }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;button data-copy-btn=&quot;&quot; class=&quot;bx--snippet-button&quot; type=&quot;button&quot; aria-label=&quot;Copy code&quot; tabindex=&quot;0&quot;&gt;

&lt;/button&gt;&lt;button class=&quot;bx--btn bx--btn--ghost bx--btn--sm bx--snippet-btn--expand&quot; type=&quot;button&quot;&gt;&lt;span class=&quot;bx--snippet-btn--text&quot; data-show-more-text=&quot;Show more&quot; data-show-less-text=&quot;Show less&quot;&gt;Show more&lt;/span&gt;&lt;/button&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h2 xmlns=&quot;http://www.w3.org/1999/xhtml&quot; id=&quot;conditional-statements&quot;&gt;Conditional statements&lt;/h2&gt;
&lt;p&gt;Awk also offers very nice C-like if statements. If you’d like, you could rewrite the previous script using an &lt;code&gt;if&lt;/code&gt; statement:&lt;/p&gt;
&lt;div class=&quot;ibm-codeblock&quot;&gt;
&lt;div class=&quot;bx--snippet bx--snippet--multi&quot; data-code-snippet=&quot;&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;bx--snippet-container&quot; aria-label=&quot;Code Snippet Text&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;code&gt;{ 
  if ( $5 ~ /root/ ) { 
          print $3 
  } 
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;button data-copy-btn=&quot;&quot; class=&quot;bx--snippet-button&quot; type=&quot;button&quot; aria-label=&quot;Copy code&quot; tabindex=&quot;0&quot;&gt;

&lt;/button&gt;&lt;button class=&quot;bx--btn bx--btn--ghost bx--btn--sm bx--snippet-btn--expand&quot; type=&quot;button&quot;&gt;&lt;span class=&quot;bx--snippet-btn--text&quot; data-show-more-text=&quot;Show more&quot; data-show-less-text=&quot;Show less&quot;&gt;Show more&lt;/span&gt;&lt;/button&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;Both scripts function identically. In the first example, the boolean expression is placed outside the block, while in the second example, the block is executed for every input line, and we selectively perform the print command by using an &lt;code&gt;if&lt;/code&gt; statement. Both methods are available, and you can choose the one that best meshes with the other parts of your script.&lt;/p&gt;
&lt;p&gt;Here’s a more complicated example of an awk &lt;code&gt;if&lt;/code&gt; statement. As you can see, even with complex, nested conditionals, &lt;code&gt;if&lt;/code&gt; statements look identical to their C counterparts:&lt;/p&gt;
&lt;div class=&quot;ibm-codeblock&quot;&gt;
&lt;div class=&quot;bx--snippet bx--snippet--multi&quot; data-code-snippet=&quot;&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;bx--snippet-container&quot; aria-label=&quot;Code Snippet Text&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;code&gt;{ 
  if ( $1 == &quot;foo&quot; ) { 
           if ( $2 == &quot;foo&quot; ) { 
                    print &quot;uno&quot; 
           } else { 
                    print &quot;one&quot; 
           } 
  } else if ($1 == &quot;bar&quot; ) { 
           print &quot;two&quot; 
  } else { 
           print &quot;three&quot; 
  } 
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;button data-copy-btn=&quot;&quot; class=&quot;bx--snippet-button&quot; type=&quot;button&quot; aria-label=&quot;Copy code&quot; tabindex=&quot;0&quot;&gt;

&lt;/button&gt;&lt;button class=&quot;bx--btn bx--btn--ghost bx--btn--sm bx--snippet-btn--expand&quot; type=&quot;button&quot;&gt;&lt;span class=&quot;bx--snippet-btn--text&quot; data-show-more-text=&quot;Show more&quot; data-show-less-text=&quot;Show less&quot;&gt;Show more&lt;/span&gt;&lt;/button&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;Using if statements, we can also transform this code:&lt;/p&gt;
&lt;div class=&quot;ibm-codeblock&quot;&gt;
&lt;div class=&quot;bx--snippet bx--snippet--multi&quot; data-code-snippet=&quot;&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;bx--snippet-container&quot; aria-label=&quot;Code Snippet Text&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;code&gt;! /matchme/ { print $1 $3 $4 }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;button data-copy-btn=&quot;&quot; class=&quot;bx--snippet-button&quot; type=&quot;button&quot; aria-label=&quot;Copy code&quot; tabindex=&quot;0&quot;&gt;

&lt;/button&gt;&lt;button class=&quot;bx--btn bx--btn--ghost bx--btn--sm bx--snippet-btn--expand&quot; type=&quot;button&quot;&gt;&lt;span class=&quot;bx--snippet-btn--text&quot; data-show-more-text=&quot;Show more&quot; data-show-less-text=&quot;Show less&quot;&gt;Show more&lt;/span&gt;&lt;/button&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;to this:&lt;/p&gt;
&lt;div class=&quot;ibm-codeblock&quot;&gt;
&lt;div class=&quot;bx--snippet bx--snippet--multi&quot; data-code-snippet=&quot;&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;bx--snippet-container&quot; aria-label=&quot;Code Snippet Text&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;code&gt;{ 
  if ( $0 !~ /matchme/ ) { 
          print $1 $3 $4 
  } 
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;button data-copy-btn=&quot;&quot; class=&quot;bx--snippet-button&quot; type=&quot;button&quot; aria-label=&quot;Copy code&quot; tabindex=&quot;0&quot;&gt;

&lt;/button&gt;&lt;button class=&quot;bx--btn bx--btn--ghost bx--btn--sm bx--snippet-btn--expand&quot; type=&quot;button&quot;&gt;&lt;span class=&quot;bx--snippet-btn--text&quot; data-show-more-text=&quot;Show more&quot; data-show-less-text=&quot;Show less&quot;&gt;Show more&lt;/span&gt;&lt;/button&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;Both scripts will output only those lines that &lt;em&gt;don’t&lt;/em&gt; contain a &lt;code&gt;matchme&lt;/code&gt; character sequence. Again, you can choose the method that works best for your code. They both do the same thing.&lt;/p&gt;
&lt;p&gt;Awk also allows the use of boolean operators “||” (for “logical or”) and “&amp;amp;&amp;amp;”(for “logical and”) to allow the creation of more complex boolean expressions:&lt;/p&gt;
&lt;div class=&quot;ibm-codeblock&quot;&gt;
&lt;div class=&quot;bx--snippet bx--snippet--multi&quot; data-code-snippet=&quot;&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;bx--snippet-container&quot; aria-label=&quot;Code Snippet Text&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;code&gt;( $1 == &quot;foo&quot; ) &amp;amp;&amp;amp; ( $2 == &quot;bar&quot; ) { print }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;button data-copy-btn=&quot;&quot; class=&quot;bx--snippet-button&quot; type=&quot;button&quot; aria-label=&quot;Copy code&quot; tabindex=&quot;0&quot;&gt;

&lt;/button&gt;&lt;button class=&quot;bx--btn bx--btn--ghost bx--btn--sm bx--snippet-btn--expand&quot; type=&quot;button&quot;&gt;&lt;span class=&quot;bx--snippet-btn--text&quot; data-show-more-text=&quot;Show more&quot; data-show-less-text=&quot;Show less&quot;&gt;Show more&lt;/span&gt;&lt;/button&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;This example will print only those lines where field one equals &lt;code&gt;foo&lt;/code&gt;&lt;em&gt;and&lt;/em&gt; field two equals &lt;code&gt;bar&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;numeric-variables-&quot;&gt;Numeric variables!&lt;/h2&gt;
&lt;p&gt;So far, we’ve either printed strings, the entire line, or specific fields. However, awk also allows us to perform both integer and floating point math. Using mathematical expressions, it’s very easy to write a script that counts the number of blank lines in a file. Here’s one that does just that:&lt;/p&gt;
&lt;div class=&quot;ibm-codeblock&quot;&gt;
&lt;div class=&quot;bx--snippet bx--snippet--multi&quot; data-code-snippet=&quot;&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;bx--snippet-container&quot; aria-label=&quot;Code Snippet Text&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;code&gt;BEGIN { x=0 } 
/^$/  { x=x+1 } 
END   { print &quot;I found &quot; x &quot; blank lines. :)&quot; }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;button data-copy-btn=&quot;&quot; class=&quot;bx--snippet-button&quot; type=&quot;button&quot; aria-label=&quot;Copy code&quot; tabindex=&quot;0&quot;&gt;

&lt;/button&gt;&lt;button class=&quot;bx--btn bx--btn--ghost bx--btn--sm bx--snippet-btn--expand&quot; type=&quot;button&quot;&gt;&lt;span class=&quot;bx--snippet-btn--text&quot; data-show-more-text=&quot;Show more&quot; data-show-less-text=&quot;Show less&quot;&gt;Show more&lt;/span&gt;&lt;/button&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;In the BEGIN block, we initialize our integer variable &lt;code&gt;x&lt;/code&gt; to zero. Then, each time awk encounters a blank line, awk will execute the &lt;code&gt;x=x+1&lt;/code&gt; statement, incrementing &lt;code&gt;x&lt;/code&gt;. After all the lines have been processed, the END block will execute, and awk will print out a final summary, specifying the number of blank lines it found.&lt;/p&gt;
&lt;h2 id=&quot;stringy-variables&quot;&gt;Stringy variables&lt;/h2&gt;
&lt;p&gt;One of the neat things about awk variables is that they are “simple and stringy.” I consider awk variables “stringy” because all awk variables are stored internally as strings. At the same time, awk variables are “simple” because you can perform mathematical operations on a variable, and as long as it contains a valid numeric string, awk automatically takes care of the string-to-number conversion steps. To see what I mean, check out this example:&lt;/p&gt;
&lt;div class=&quot;ibm-codeblock&quot;&gt;
&lt;div class=&quot;bx--snippet bx--snippet--multi&quot; data-code-snippet=&quot;&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;bx--snippet-container&quot; aria-label=&quot;Code Snippet Text&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;code&gt;x=&quot;1.01&quot; 
#We just set x to contain the ∗string∗ &quot;1.01&quot; 
x=x+1 
#We just added one to a ∗string∗ 
print x 
#Incidentally, these are comments :)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;button data-copy-btn=&quot;&quot; class=&quot;bx--snippet-button&quot; type=&quot;button&quot; aria-label=&quot;Copy code&quot; tabindex=&quot;0&quot;&gt;

&lt;/button&gt;&lt;button class=&quot;bx--btn bx--btn--ghost bx--btn--sm bx--snippet-btn--expand&quot; type=&quot;button&quot;&gt;&lt;span class=&quot;bx--snippet-btn--text&quot; data-show-more-text=&quot;Show more&quot; data-show-less-text=&quot;Show less&quot;&gt;Show more&lt;/span&gt;&lt;/button&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;Awk will output:&lt;/p&gt;

&lt;p xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;Interesting! Although we assigned the string value 1.01 to the variable x, we were still able to add one to it. We wouldn’t be able to do this in bash or python. First of all, bash doesn’t support floating point arithmetic. And, while bash has “stringy” variables, they aren’t “simple”; to perform any mathematical operations, bash requires that we enclose our math in an ugly &lt;code&gt;$( )&lt;/code&gt; construct. If we were using python, we would have to explicitly convert our &lt;code&gt;1.01&lt;/code&gt; string to a floating point value before performing any arithmetic on it. While this isn’t difficult, it’s still an additional step. With awk, it’s all automatic, and that makes our code nice and clean. If we wanted to square and add one to the first field in each input line, we would use this script:&lt;/p&gt;
&lt;div class=&quot;ibm-codeblock&quot;&gt;
&lt;div class=&quot;bx--snippet bx--snippet--multi&quot; data-code-snippet=&quot;&quot;&gt;
&lt;div class=&quot;bx--snippet-container&quot; aria-label=&quot;Code Snippet Text&quot;&gt;
&lt;pre&gt;
&lt;code&gt;{ print ($1^2)+1 }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;button data-copy-btn=&quot;&quot; class=&quot;bx--snippet-button&quot; type=&quot;button&quot; aria-label=&quot;Copy code&quot; tabindex=&quot;0&quot;&gt;

&lt;/button&gt;&lt;button class=&quot;bx--btn bx--btn--ghost bx--btn--sm bx--snippet-btn--expand&quot; type=&quot;button&quot;&gt;&lt;span class=&quot;bx--snippet-btn--text&quot; data-show-more-text=&quot;Show more&quot; data-show-less-text=&quot;Show less&quot;&gt;Show more&lt;/span&gt;&lt;/button&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;If you do a little experimenting, you’ll find that if a particular variable doesn’t contain a valid number, awk will treat that variable as a numerical zero when it evaluates your mathematical expression.&lt;/p&gt;
&lt;h2 id=&quot;lots-of-operators&quot;&gt;Lots of operators&lt;/h2&gt;
&lt;p&gt;Another nice thing about awk is its full complement of mathematical operators. In addition to standard addition, subtraction, multiplication, and division, awk allows us to use the previously demonstrated exponent operator “^”, the modulo (remainder) operator “%”, and a bunch of other handy assignment operators borrowed from C.&lt;/p&gt;
&lt;p&gt;These include pre- and post-increment/decrement ( &lt;code&gt;i++, --foo&lt;/code&gt;), add/sub/mult/div assign operators ( &lt;code&gt;a+=3, b*=2, c/=2.2, d-=6.2&lt;/code&gt; ). But that’s not all — we also get handy modulo/exponent assign ops as well ( &lt;code&gt;a^=2, b%=4&lt;/code&gt; ).&lt;/p&gt;
&lt;h2 id=&quot;field-separators&quot;&gt;Field separators&lt;/h2&gt;
&lt;p&gt;Awk has its own complement of special variables. Some of them allow you to fine-tune how awk functions, while others can be read to glean valuable information about the input. We’ve already touched on one of these special variables, FS. As mentioned earlier, this variable allows you to set the character sequence that awk expects to find between fields. When we were using /etc/passwd as input, FS was set to “:”. While this did the trick, FS allows us even more flexibility.&lt;/p&gt;
&lt;p&gt;The FS value is not limited to a single character; it can also be set to a regular expression, specifying a character pattern of any length. If you’re processing fields separated by one or more tabs, you’ll want to set FS like so:&lt;/p&gt;

&lt;p xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;Above, we use the special “+” regular expression character, which means “one or more of the previous character”.&lt;/p&gt;
&lt;p&gt;If your fields are separated by whitespace (one or more spaces or tabs), you may be tempted to set FS to the following regular expression:&lt;/p&gt;
&lt;div class=&quot;ibm-codeblock&quot;&gt;
&lt;div class=&quot;bx--snippet bx--snippet--multi&quot; data-code-snippet=&quot;&quot;&gt;
&lt;div class=&quot;bx--snippet-container&quot; aria-label=&quot;Code Snippet Text&quot;&gt;
&lt;pre&gt;
&lt;code&gt;FS=&quot;[[:space:]+]&quot;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;button data-copy-btn=&quot;&quot; class=&quot;bx--snippet-button&quot; type=&quot;button&quot; aria-label=&quot;Copy code&quot; tabindex=&quot;0&quot;&gt;

&lt;/button&gt;&lt;button class=&quot;bx--btn bx--btn--ghost bx--btn--sm bx--snippet-btn--expand&quot; type=&quot;button&quot;&gt;&lt;span class=&quot;bx--snippet-btn--text&quot; data-show-more-text=&quot;Show more&quot; data-show-less-text=&quot;Show less&quot;&gt;Show more&lt;/span&gt;&lt;/button&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;While this assignment will do the trick, it’s not necessary. Why? Because by default, FS is set to a single space character, which awk interprets to mean “one or more spaces or tabs.” In this particular example, the default FS setting was exactly what you wanted in the first place!&lt;/p&gt;
&lt;p&gt;Complex regular expressions are no problem. Even if your records are separated by the word “foo,” followed by three digits, the following regular expression will allow your data to be parsed properly:&lt;/p&gt;
&lt;div class=&quot;ibm-codeblock&quot;&gt;
&lt;div class=&quot;bx--snippet bx--snippet--multi&quot; data-code-snippet=&quot;&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;bx--snippet-container&quot; aria-label=&quot;Code Snippet Text&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;code&gt;FS=&quot;foo[0‑9][0‑9][0‑9]&quot;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;button data-copy-btn=&quot;&quot; class=&quot;bx--snippet-button&quot; type=&quot;button&quot; aria-label=&quot;Copy code&quot; tabindex=&quot;0&quot;&gt;

&lt;/button&gt;&lt;button class=&quot;bx--btn bx--btn--ghost bx--btn--sm bx--snippet-btn--expand&quot; type=&quot;button&quot;&gt;&lt;span class=&quot;bx--snippet-btn--text&quot; data-show-more-text=&quot;Show more&quot; data-show-less-text=&quot;Show less&quot;&gt;Show more&lt;/span&gt;&lt;/button&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h2 xmlns=&quot;http://www.w3.org/1999/xhtml&quot; id=&quot;number-of-fields&quot;&gt;Number of fields&lt;/h2&gt;
&lt;p&gt;The next two variables we’re going to cover are not normally intended to be written to, but are normally read and used to gain useful information about the input. The first is the NF variable, also called the “number of fields” variable. Awk will automatically set this variable to the number of fields in the current record. You can use the NF variable to display only certain input lines:&lt;/p&gt;
&lt;div class=&quot;ibm-codeblock&quot;&gt;
&lt;div class=&quot;bx--snippet bx--snippet--multi&quot; data-code-snippet=&quot;&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;bx--snippet-container&quot; aria-label=&quot;Code Snippet Text&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;code&gt;NF == 3 { print &quot;this particular record has three fields: &quot; $0 }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;button data-copy-btn=&quot;&quot; class=&quot;bx--snippet-button&quot; type=&quot;button&quot; aria-label=&quot;Copy code&quot; tabindex=&quot;0&quot;&gt;

&lt;/button&gt;&lt;button class=&quot;bx--btn bx--btn--ghost bx--btn--sm bx--snippet-btn--expand&quot; type=&quot;button&quot;&gt;&lt;span class=&quot;bx--snippet-btn--text&quot; data-show-more-text=&quot;Show more&quot; data-show-less-text=&quot;Show less&quot;&gt;Show more&lt;/span&gt;&lt;/button&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;Of course, you can also use the NF variable in conditional statements, as follows:&lt;/p&gt;
&lt;div class=&quot;ibm-codeblock&quot;&gt;
&lt;div class=&quot;bx--snippet bx--snippet--multi&quot; data-code-snippet=&quot;&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;bx--snippet-container&quot; aria-label=&quot;Code Snippet Text&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;code&gt;{ 
  if ( NF &amp;gt; 2 ) { 
          print $1 &quot; &quot; $2 &quot;:&quot; $3 
  } 
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;button data-copy-btn=&quot;&quot; class=&quot;bx--snippet-button&quot; type=&quot;button&quot; aria-label=&quot;Copy code&quot; tabindex=&quot;0&quot;&gt;

&lt;/button&gt;&lt;button class=&quot;bx--btn bx--btn--ghost bx--btn--sm bx--snippet-btn--expand&quot; type=&quot;button&quot;&gt;&lt;span class=&quot;bx--snippet-btn--text&quot; data-show-more-text=&quot;Show more&quot; data-show-less-text=&quot;Show less&quot;&gt;Show more&lt;/span&gt;&lt;/button&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h2 xmlns=&quot;http://www.w3.org/1999/xhtml&quot; id=&quot;record-number&quot;&gt;Record number&lt;/h2&gt;
&lt;p&gt;The record number (NR) is another handy variable. It will always contain the number of the current record (awk counts the first record as record number 1). Up until now, we’ve been dealing with input files that contain one record per line. For these situations, NR will also tell you the current line number. However, when we start to process multi-line records later in the series, this will no longer be the case, so be careful! NR can be used like the NF variable to print only certain lines of the input:&lt;/p&gt;
&lt;div class=&quot;ibm-codeblock&quot;&gt;
&lt;div class=&quot;bx--snippet bx--snippet--multi&quot; data-code-snippet=&quot;&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;bx--snippet-container&quot; aria-label=&quot;Code Snippet Text&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;code&gt;(NR &amp;lt; 10 ) || (NR &amp;gt; 100) { print &quot;We are on record number 1‑9 or 101+&quot; }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;button data-copy-btn=&quot;&quot; class=&quot;bx--snippet-button&quot; type=&quot;button&quot; aria-label=&quot;Copy code&quot; tabindex=&quot;0&quot;&gt;

&lt;/button&gt;&lt;button class=&quot;bx--btn bx--btn--ghost bx--btn--sm bx--snippet-btn--expand&quot; type=&quot;button&quot;&gt;&lt;span class=&quot;bx--snippet-btn--text&quot; data-show-more-text=&quot;Show more&quot; data-show-less-text=&quot;Show less&quot;&gt;Show more&lt;/span&gt;&lt;/button&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;Another example:&lt;/p&gt;
&lt;div class=&quot;ibm-codeblock&quot;&gt;
&lt;div class=&quot;bx--snippet bx--snippet--multi&quot; data-code-snippet=&quot;&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;bx--snippet-container&quot; aria-label=&quot;Code Snippet Text&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;code&gt;{ 
  #skip header 
  if ( NR &amp;gt; 10 ) { 
          print &quot;ok, now for the real information!&quot; 
  } 
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;button data-copy-btn=&quot;&quot; class=&quot;bx--snippet-button&quot; type=&quot;button&quot; aria-label=&quot;Copy code&quot; tabindex=&quot;0&quot;&gt;

&lt;/button&gt;&lt;button class=&quot;bx--btn bx--btn--ghost bx--btn--sm bx--snippet-btn--expand&quot; type=&quot;button&quot;&gt;&lt;span class=&quot;bx--snippet-btn--text&quot; data-show-more-text=&quot;Show more&quot; data-show-less-text=&quot;Show less&quot;&gt;Show more&lt;/span&gt;&lt;/button&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;Awk provides additional variables that can be used for a variety of purposes. We’ll cover more of these variables in later articles. We’ve come to the end of our initial exploration of awk. As the series continues, I’ll demonstrate more advanced awk functionality, and we’ll end the series with a real-world awk application. In the meantime, if you’re eager to learn more, check out the resources listed below.&lt;/p&gt;
</description>
<pubDate>Fri, 28 Jun 2019 21:18:31 +0000</pubDate>
<dc:creator>tosh</dc:creator>
<og:title>An intro to the great language with the strange name</og:title>
<og:description>Awk is a very nice language with a very strange name. In this first article of a three-part series, Daniel Robbins will quickly get your awk programming skills up to speed. As the series progresses, more advanced topics will be covered, culminating with an advanced real-world awk application demo.</og:description>
<og:type>Tutorial</og:type>
<og:url>https://developer.ibm.com/tutorials/l-awk1/</og:url>
<og:image>https://s3.us.cloud-object-storage.appdomain.cloud/ibmdev/social/tutorials.jpg</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://developer.ibm.com/tutorials/l-awk1/</dc:identifier>
</item>
<item>
<title>Infinite loop in macOS Night Shift in the summer near the Arctic Circle</title>
<link>https://twitter.com/AustinJ/status/1144655793612107778</link>
<guid isPermaLink="true" >https://twitter.com/AustinJ/status/1144655793612107778</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://twitter.com/AustinJ/status/1144655793612107778&quot;&gt;https://twitter.com/AustinJ/status/1144655793612107778&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=20307891&quot;&gt;https://news.ycombinator.com/item?id=20307891&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 541&lt;/p&gt;
&lt;p&gt;# Comments: 152&lt;/p&gt;
</description>
<pubDate>Fri, 28 Jun 2019 19:16:50 +0000</pubDate>
<dc:creator>guessmyname</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://mobile.twitter.com/AustinJ/status/1144655793612107778</dc:identifier>
</item>
<item>
<title>AMD Responds to WSJ ‘Keys to the Kingdom’ Story</title>
<link>https://www.amd.com/en/corporate/wsj-response</link>
<guid isPermaLink="true" >https://www.amd.com/en/corporate/wsj-response</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://www.amd.com/en/corporate/wsj-response&quot;&gt;https://www.amd.com/en/corporate/wsj-response&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=20307128&quot;&gt;https://news.ycombinator.com/item?id=20307128&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 207&lt;/p&gt;
&lt;p&gt;# Comments: 54&lt;/p&gt;
</description>
<pubDate>Fri, 28 Jun 2019 18:03:34 +0000</pubDate>
<dc:creator>JackFaker</dc:creator>
<dc:identifier>https://www.amd.com/en/corporate/wsj-response</dc:identifier>
</item>
</channel>
</rss>