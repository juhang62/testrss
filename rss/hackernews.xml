<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Repl.it Multiplayer</title>
<link>https://repl.it/site/blog/multi</link>
<guid isPermaLink="true" >https://repl.it/site/blog/multi</guid>
<description>&lt;p&gt;Today we're announcing the most-significant evolution of our platform — something we've been building towards for a long time that we're thrilled to share with you.&lt;/p&gt;
&lt;p&gt;Introducing &lt;em&gt;Multiplayer&lt;/em&gt;: code with friends in the same editor, execute programs in the same interpreter, interact with the same terminal, chat in the IDE, edit files and share the same system resources, and ship applications from the same interface! We've redesigned every part of our infrastructure to work in multiplayer mode -- from the filesystem to the interpreter.&lt;/p&gt;
&lt;p&gt;This works with all the &lt;a target=&quot;_blank&quot; href=&quot;https://repl.it/languages&quot;&gt;languages&lt;/a&gt; that works on Repl.it. All free and ready for you to use right now. All you have to do is login, create a repl, start a Multiplayer session, give a link to your friends, wait for them to join, and start hacking!&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;We started beta-testing Multiplayer last month. And while we think we're merely scratching the surface in terms of what can be done with it, a walkthrough of some of the emergent use-cases will give you an idea of how it works and how you can use it at your work, school, or for your side-project:&lt;/p&gt;
&lt;h2 id=&quot;help&quot;&gt;Help&lt;/h2&gt;
&lt;p&gt;Last week user &lt;a target=&quot;_blank&quot; href=&quot;https://repl.it/@marc_rosenberg&quot;&gt;@marc_rosenberg&lt;/a&gt; hopped on our Discord server and asked for help with his Advent of Code work. After a bit of back-and-forth with other users, they decided to hop on a Multiplayer session. Marc shared a link and off they went:&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://repl.it/public/images/blog/multi.png&quot;&gt;&lt;img src=&quot;https://repl.it/public/images/blog/multi.png&quot; alt=&quot;people collaborating in the IDE&quot; title=&quot;people collaborating in the IDE&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Four players joined and started helping him with his problem. Not only did they show him how to solve it, but they also leveraged comments and chat to teach him how it's done.&lt;/p&gt;
&lt;p&gt;The fact that everyone shares the same compute infrastructure means they all see the same errors and the same output — this is crucial for collaboration and something that we've found to be lacking from existing IDE's that support &quot;collaboration&quot;.&lt;/p&gt;
&lt;h2 id=&quot;interviews&quot;&gt;Interviews&lt;/h2&gt;
&lt;p&gt;As part of our interview process at Repl.it (&lt;a target=&quot;_blank&quot; href=&quot;https://repl.it/jobs&quot;&gt;work with us&lt;/a&gt;) we have a phone screen where we hop on a Multiplayer session with a candidate and work on some coding problems together. Other people in the company can tune-in as well to give their opinion or to provide feedback for the interviewer.&lt;/p&gt;
&lt;p&gt;The fact that it's shared repl allows the interviewer to write test cases for the candidate's program to verify its validity. It also allows both of them to see the results and errors in the terminal.&lt;/p&gt;
&lt;h2 id=&quot;teaching&quot;&gt;Teaching&lt;/h2&gt;
&lt;p&gt;Repler &lt;a target=&quot;_blank&quot; href=&quot;https://repl.it/@fractalbach&quot;&gt;@fractalbach&lt;/a&gt; wanted to teach his younger sister programming. Sadly, they were hundreds of miles apart which made it seem impossible (or at least suboptimal) to attempt is. That is until chris discovered Multiplayer. Now they hop on the phone and crank open a session and start coding together.&lt;/p&gt;
&lt;p&gt;Schools are also starting to explore Multiplayer in an educational setting. Some teachers split their students into groups to work on projects. This helps students stay engaged and makes the activity fun. Other teachers use Multiplayer to cast their coding session out for their students to follow and watch.&lt;/p&gt;
&lt;h2 id=&quot;collaborations&quot;&gt;Collaborations&lt;/h2&gt;
&lt;p&gt;Repl.it users organize a 48-hour code jam every other month. For the last one, they decided to work on building &lt;a target=&quot;_blank&quot; href=&quot;https://repl.it/site/blog/codejam-db&quot;&gt;databases&lt;/a&gt;. But this time they decided to make it more interesting and form teams to work with each other. This made the competition a lot more engaging and fun. The results were also quite impressive.&lt;/p&gt;
&lt;p&gt;With Repl.it you can &lt;a target=&quot;_blank&quot; href=&quot;https://repl.it/site/docs/repls/web-hosting&quot;&gt;build and host&lt;/a&gt; web apps, bots, or websites. Users &lt;a target=&quot;_blank&quot; href=&quot;https://repl.it/@mat1&quot;&gt;@mat1&lt;/a&gt; and &lt;a target=&quot;_blank&quot; href=&quot;https://repl.it/@Boopydoop&quot;&gt;@Boopydoop&lt;/a&gt; worked on and shipped a discord bot together. They called it &lt;a target=&quot;_blank&quot; href=&quot;https://repl.it/talk/challenge/4bit/8792&quot;&gt;4bit&lt;/a&gt;, and it makes it possible to play some rad games in discord such as Hangman, Simon Says, and even UNO!&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Multiplayer opens up whole new levels of creativity in the community and makes it easier and more fun to teach and learn. Since we started opening up the beta the &lt;a target=&quot;_blank&quot; href=&quot;https://repl.it/feedback/p/multiplayer-feedback-1&quot;&gt;feedback&lt;/a&gt; has been rolling in non-stop and we've been very happy with community reception.&lt;/p&gt;
&lt;p&gt;Finally, Multiplayer is built on solid infrastructure. We spent a lot of time trying to make the underlying system resources work in multiplayer mode because we think this feature, in the future, might transcend our websites and work with other IDEs and on different platforms. We're excited to explore the opportunities this opens up.&lt;/p&gt;
&lt;p&gt;We'll write some more soon about the underlying technology but, for now, go forth and multiplay!&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://repl.it/public/images/blog/multiart.png&quot;&gt;&lt;img src=&quot;https://repl.it/public/images/blog/multiart.png&quot; alt=&quot;multiplayer&quot; title=&quot;multiplayer&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 06 Dec 2018 21:59:48 +0000</pubDate>
<dc:creator>rozhok</dc:creator>
<og:title>Repl.it Multiplayer</og:title>
<og:description>Today we're announcing the most-significant evolution of our platform — something we've been building towards for a long time that we're thrilled to share…</og:description>
<og:type>article</og:type>
<og:image>https://repl.it/public/images/blog/multi.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://repl.it/site/blog/multi</dc:identifier>
</item>
<item>
<title>Goodbye, EdgeHTML</title>
<link>https://blog.mozilla.org/blog/2018/12/06/goodbye-edge/</link>
<guid isPermaLink="true" >https://blog.mozilla.org/blog/2018/12/06/goodbye-edge/</guid>
<description>&lt;p&gt;Microsoft is officially giving up on an independent shared platform for the internet. By adopting Chromium, Microsoft hands over control of even more of online life to Google.&lt;/p&gt;
&lt;p&gt;This may sound melodramatic, but it’s not. The “browser engines” — Chromium from Google and Gecko Quantum from Mozilla — are “inside baseball” pieces of software that actually determine a great deal of what each of us can do online. They determine core capabilities such as which content we as consumers can see, how secure we are when we watch content, and how much control we have over what websites and services can do to us. Microsoft’s decision gives Google more ability to single-handedly decide what possibilities are available to each one of us.&lt;/p&gt;
&lt;p&gt;From a business point of view Microsoft’s decision may well make sense. Google is so close to almost complete control of the infrastructure of our online lives that it may not be profitable to continue to fight this. The interests of Microsoft’s shareholders may well be served by giving up on the freedom and choice that the internet once offered us. Google is a fierce competitor with highly talented employees and a monopolistic hold on unique assets. Google’s dominance across search, advertising, smartphones, and data capture creates a vastly tilted playing field that works against the rest of us.&lt;/p&gt;
&lt;p&gt;From a social, civic and individual empowerment perspective ceding control of fundamental online infrastructure to a single company is terrible. This is &lt;a href=&quot;https://www.mozilla.org/en-US/about/manifesto/&quot;&gt;why Mozilla exists&lt;/a&gt;. We compete with Google not because it’s a good business opportunity. We compete with Google because the health of the internet and online life depend on competition and choice. They depend on consumers being able to decide we want something better and to take action.&lt;/p&gt;
&lt;p&gt;Will Microsoft’s decision make it harder for Firefox to prosper? It could. Making Google more powerful is risky on many fronts. And a big part of the answer depends on what the web developers and businesses who create services and websites do. If one product like Chromium has enough market share, then it becomes easier for web developers and businesses to decide not to worry if their services and sites work with anything other than Chromium. That’s what happened when Microsoft had a monopoly on browsers in the early 2000s before Firefox was released. And it could happen again.&lt;/p&gt;
&lt;p&gt;If you care about what’s happening with online life today, take another look at Firefox. It’s radically better than it was 18 months ago — Firefox once again holds its own when it comes to speed and performance. &lt;a href=&quot;https://www.mozilla.org/en-US/firefox/fights-for-you/&quot;&gt;Try Firefox&lt;/a&gt; as your default browser for a week and then decide. Making Firefox stronger won’t solve all the problems of online life — browsers are only one part of the equation. But if you find Firefox is a good product for you, then your use makes Firefox stronger. Your use helps web developers and businesses think beyond Chrome. And this helps Firefox and Mozilla make overall life on the internet better — more choice, more security options, more competition.&lt;/p&gt;
</description>
<pubDate>Thu, 06 Dec 2018 21:38:33 +0000</pubDate>
<dc:creator>__michaelg</dc:creator>
<og:url>https://blog.mozilla.org/blog/2018/12/06/goodbye-edge</og:url>
<og:title>Goodbye, EdgeHTML – The Mozilla Blog</og:title>
<og:description>Microsoft is officially giving up on an independent shared platform for the internet. By adopting Chromium, Microsoft hands over control of even more of online life to Google. This may ...</og:description>
<og:image>https://blog.mozilla.org/wp-content/uploads/2018/03/Pasted-image-at-2018_03_07-09_16-PM.png</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.mozilla.org/blog/2018/12/06/goodbye-edge/</dc:identifier>
</item>
<item>
<title>Facebook accused of striking &amp;#039;secret deals over user data&amp;#039;</title>
<link>https://www.bbc.com/news/technology-46456695</link>
<guid isPermaLink="true" >https://www.bbc.com/news/technology-46456695</guid>
<description>&lt;figure class=&quot;media-landscape no-caption full-width lead&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                &lt;img class=&quot;js-image-replace&quot; alt=&quot;Facebook documents&quot; src=&quot;https://ichef.bbci.co.uk/news/320/cpsprodpb/13D3D/production/_104631218_mediaitem104631215.jpg&quot; width=&quot;976&quot; height=&quot;549&quot;/&gt;&lt;span class=&quot;off-screen&quot;&gt;Image copyright&lt;/span&gt;
                 &lt;span class=&quot;story-image-copyright&quot;&gt;Getty Images&lt;/span&gt;
                
            &lt;/span&gt;
            
        &lt;/figure&gt;&lt;p class=&quot;story-body__introduction&quot;&gt;Emails written by Facebook's chief and his deputies show the firm struck secret deals to give some developers special access to user data while refusing others, according to MPs. &lt;/p&gt;&lt;p&gt;A cache of &lt;a href=&quot;https://www.parliament.uk/documents/commons-committees/culture-media-and-sport/Note-by-Chair-and-selected-documents-ordered-from-Six4Three.pdf&quot; class=&quot;story-body__link-external&quot;&gt;internal documents has been published online&lt;/a&gt; by a parliamentary committee.&lt;/p&gt;&lt;p&gt;It said the files also showed Facebook had deliberately made it &quot;as hard as possible&quot; for users to be aware of privacy changes to its Android app.&lt;/p&gt;&lt;p&gt;Facebook had objected to their release.&lt;/p&gt;&lt;p&gt;It said that the documents had been presented in a &quot;very misleading manner&quot; and required additional context.&lt;/p&gt;&lt;p&gt;The emails were obtained from the chief of Six4Three - a software firm that is suing the tech giant - and were disclosed by the Digital, Culture, Media and Sport Committee as part of its inquiry into fake news.&lt;/p&gt;&lt;p&gt;About 250 pages have been published, some of which are marked &quot;highly confidential&quot;.&lt;/p&gt;&lt;p&gt;Damian Collins MP, the chair of the committee, highlighted several &quot;key issues&quot; in an introductory note. &lt;/p&gt;&lt;p&gt;He wrote that:&lt;/p&gt;&lt;ul class=&quot;story-body__unordered-list&quot;&gt;&lt;li class=&quot;story-body__list-item&quot;&gt;Facebook allowed some companies to maintain &quot;full access&quot; to users' friends data even after announcing changes to its platform in 2014/2015 to limit what developers' could see. &quot;It is not clear that there was any user consent for this, nor how Facebook decided which companies should be whitelisted,&quot; Mr Collins wrote&lt;/li&gt;
&lt;li class=&quot;story-body__list-item&quot;&gt;Facebook had been aware that an update to its Android app that let it collect records of users' calls and texts would be controversial. &quot;To mitigate any bad PR, Facebook planned to make it as hard as possible for users to know that this was one of the underlying features,&quot; Mr Collins wrote&lt;/li&gt;
&lt;li class=&quot;story-body__list-item&quot;&gt;Facebook used data provided by the Israeli analytics firm Onavo to determine which other mobile apps were being downloaded and used by the public. It then used this knowledge to decide which apps to acquire or otherwise treat as a threat&lt;/li&gt;
&lt;li class=&quot;story-body__list-item&quot;&gt;there was evidence that Facebook's refusal to share data with some apps caused them to fail&lt;/li&gt;
&lt;li class=&quot;story-body__list-item&quot;&gt;there had been much discussion of the financial value of providing access to friends' data&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;social-embed&quot;&gt;&lt;div class=&quot;social-embed-post social-embed-twitter&quot;&gt;
    &lt;div class=&quot;embed embed-twitter&quot; readability=&quot;5.1471321695761&quot;&gt;
        &lt;div class=&quot;embed-region&quot; role=&quot;region&quot; aria-label=&quot;Twitter post by @DamianCollins&quot; readability=&quot;6.0049875311721&quot;&gt;
            &lt;a class=&quot;off-screen jump-link&quot; href=&quot;#jump-linkhttps://twitter.com/DamianCollins/status/1070324910109675525&quot;&gt;Skip Twitter post  by @DamianCollins&lt;/a&gt;
            &lt;div class=&quot;twitter-wrap&quot; readability=&quot;7.4617737003058&quot;&gt;
                &lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot; readability=&quot;8.55&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;I believe there is considerable public interest in releasing these documents. They raise important questions about how Facebook treats users data, their policies for working with app developers, and how they exercise their dominant position in the social media market.&lt;/p&gt;— Damian Collins (@DamianCollins) &lt;a href=&quot;https://twitter.com/DamianCollins/status/1070324910109675525?ref_src=twsrc%5Etfw&quot;&gt;December 5, 2018&lt;/a&gt;&lt;/blockquote&gt;

            
            &lt;/div&gt;
            &lt;p class=&quot;off-screen&quot; id=&quot;jump-linkhttps://twitter.com/DamianCollins/status/1070324910109675525&quot; tabindex=&quot;-1&quot;&gt;End of Twitter post  by @DamianCollins&lt;/p&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Facebook said Six4Three had &quot;cherry-picked&quot; the documents and claimed they had omitted &quot;important context&quot;.&lt;/p&gt;&lt;p&gt;&quot;We stand by the platform changes we made in 2015 to stop a person from sharing their friends' data with developers,&quot; said a spokeswoman.&lt;/p&gt;&lt;p&gt;&quot;Like any business, we had many internal conversations about the various ways we could build a sustainable business model for our platform. &lt;/p&gt;&lt;p&gt;&quot;But the facts are clear: we've never sold people's data.&quot;&lt;/p&gt;&lt;p&gt;Mr Zuckerberg has also &lt;a href=&quot;https://www.facebook.com/zuck/posts/10105559172610321&quot; class=&quot;story-body__link-external&quot;&gt;posted a personal response on his Facebook page&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&quot;I understand there is a lot of scrutiny on how we run our systems. That's healthy given the vast number of people who use our services around the world, and it is right that we are constantly asked to explain what we do,&quot; he said.&lt;/p&gt;&lt;p&gt;&quot;But it's also important that the coverage of what we do - including the explanation of these internal documents - doesn't misrepresent our actions or motives.&quot;&lt;/p&gt;&lt;h2 class=&quot;story-body__crosshead&quot;&gt;Tactics revealed&lt;/h2&gt;&lt;p&gt;The correspondence includes emails between Facebook and several other tech firms, in which the social network appears to agree to add third-party apps to a &quot;whitelist&quot; of those given permission to access data about users' friends.&lt;/p&gt;&lt;p&gt;This might be used, for example, to allow an app's users to continue seeing which of their Facebook friends were using the same service.&lt;/p&gt;&lt;figure class=&quot;media-landscape has-caption full-width&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                
                
                
                
                 &lt;span class=&quot;off-screen&quot;&gt;Image copyright&lt;/span&gt;
                 &lt;span class=&quot;story-image-copyright&quot;&gt;Netflix&lt;/span&gt;
                
            &lt;/span&gt;
            
            &lt;figcaption class=&quot;media-caption&quot;&gt;&lt;span class=&quot;off-screen&quot;&gt;Image caption&lt;/span&gt;
                &lt;span class=&quot;media-caption__text&quot;&gt;
                    Netflix tapped into Facebook friends lists to let users see what titles their contacts had watched and rated highly
                &lt;/span&gt;
            &lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;They include:&lt;/p&gt;&lt;ul class=&quot;story-body__unordered-list&quot;&gt;&lt;li class=&quot;story-body__list-item&quot;&gt;the dating service Badoo, its spin-off Hot or Not, and Bumble - another dating app that it had invested in&lt;/li&gt;
&lt;li class=&quot;story-body__list-item&quot;&gt;the car pick-up service Lyft&lt;/li&gt;
&lt;li class=&quot;story-body__list-item&quot;&gt;the video-streaming service Netflix&lt;/li&gt;
&lt;li class=&quot;story-body__list-item&quot;&gt;the home rental service Airbnb&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;However, others including the ticket sales service Ticketmaster, Twitter's short-video platform Vine and the connected-cars specialist Airbiquity seem to have been denied the privilege.&lt;/p&gt;&lt;p&gt;Among the emails that have been published are the following extracts:&lt;/p&gt;&lt;figure class=&quot;media-landscape no-caption full-width&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                
                
                
                
            &lt;/span&gt;
            
        &lt;/figure&gt;&lt;h2 class=&quot;story-body__crosshead&quot;&gt;Blocking Vine&lt;/h2&gt;&lt;p&gt;&lt;i&gt;The following concerns a decision to prevent Twitter's short-form video service having access to users' friends lists. It is dated 24 January 2012.&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Justin Osofsky&lt;/strong&gt; (Facebook vice president):&lt;/p&gt;&lt;p&gt;&quot;Twitter launched Vine today which lets you shoot multiple short video segments to make one single, 6-second video... Unless anyone raises objections, we will shut down their friends API access today. We've prepared reactive PR, and I will let Jana know our decision.&quot;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Mark Zuckerberg&lt;/strong&gt; (Facebook chief executive):&lt;/p&gt;&lt;p&gt;&quot;Yup, go for it.&quot;&lt;/p&gt;&lt;figure class=&quot;media-landscape no-caption full-width&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                
                
                
                
            &lt;/span&gt;
            
        &lt;/figure&gt;&lt;h2 class=&quot;story-body__crosshead&quot;&gt;Android update&lt;/h2&gt;&lt;p&gt;&lt;i&gt;The following is part of a discussion about giving Facebook's Android app permission to read users' call logs. It is dated 4 February 2015.&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Michael LeBeau&lt;/strong&gt; (Facebook product manager):&lt;/p&gt;&lt;p&gt;&quot;As you know all the growth team is planning on shipping a permissions update on Android at the end of this month. They are going to include the 'read call log' permission... This is a pretty high-risk thing to do from a PR perspective but it appears that the growth team will charge ahead and do it...[The danger is] screenshot of the scary Android permissions screen becomes a meme (as it has in the past), propagates around the web, it gets press attention, and enterprising journalists dig into what exactly the new update is requesting, then write stories about &quot;Facebook uses new Android update to pry into your private life in ever more terrifying ways&quot;.&lt;/p&gt;&lt;figure class=&quot;media-landscape no-caption full-width&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                
                
                
                
            &lt;/span&gt;
            
        &lt;/figure&gt;&lt;h2 class=&quot;story-body__crosshead&quot;&gt;Data leaks&lt;/h2&gt;&lt;p&gt;&lt;i&gt;The following is from a discussion in which Mark Zuckerberg mulled the idea of selling developers access to users' friends' data. It is dated October 2012, pre-dating the quiz involved in the Cambridge Analytica scandal. It was sent to Sam Mullin, who was vice president of product management.&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Mark Zuckerberg&lt;/strong&gt; (Facebook chief executive):&lt;/p&gt;&lt;p&gt;&quot;It's not at all clear to me here that we have a model that will actually make us the revenue we want at scale. I'm getting more on board with locking down some parts of platform, including friends' data and potentially email addresses for mobile apps. I'm generally sceptical that there is as much data leak strategic risk as you think... I think we leak info to developers but I just can't think of any instances where that data has leaked from developer to developer and caused a real issue for us.&quot;&lt;/p&gt;&lt;figure class=&quot;media-landscape no-caption full-width&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                
                
                
                
            &lt;/span&gt;
            
        &lt;/figure&gt;&lt;h2 class=&quot;story-body__crosshead&quot;&gt;Membership fees&lt;/h2&gt;&lt;p&gt;&lt;i&gt;The following is from an email sent by Mark Zuckerberg to several of his executives in which he explains why he does not think making users pay for Facebook would be a good idea. It is dated 19 November 2012.&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Mark Zuckerberg&lt;/strong&gt; (Facebook chief executive):&lt;/p&gt;&lt;p&gt;&quot;The question is whether we could charge and still achieve ubiquity. Theoretically, if we could do that, it would be better to get ubiquity and get paid. My sense is there may be some price we could charge that wouldn't interfere with ubiquity, but this price wouldn't be enough to make us real money. Conversely, we could probably make real money of we were willing to sacrifice ubiquity, but that doesn't seem like the right trade here.&quot;&lt;/p&gt;
            </description>
<pubDate>Thu, 06 Dec 2018 19:57:17 +0000</pubDate>
<dc:creator>arduinomancer</dc:creator>
<og:title>Facebook accused of 'secret data deals'</og:title>
<og:type>article</og:type>
<og:description>More than 200 pages of confidential emails are shared online by Parliament's fake news inquiry.</og:description>
<og:url>https://www.bbc.com/news/technology-46456695</og:url>
<og:image>https://ichef.bbci.co.uk/news/1024/branded_news/13D3D/production/_104631218_mediaitem104631215.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.bbc.com/news/technology-46456695</dc:identifier>
</item>
<item>
<title>The Rise of Microsoft Visual Studio Code</title>
<link>https://triplebyte.com/blog/editor-report-the-rise-of-visual-studio-code</link>
<guid isPermaLink="true" >https://triplebyte.com/blog/editor-report-the-rise-of-visual-studio-code</guid>
<description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;tl;dr Visual Studio Code usage is rising rapidly! VS Code is now the editor chosen by the majority of engineers during programming interviews, and it appears to be rapidly taking market share from other top editors.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Triplebyte interviews hundreds of engineers every week. For each interview, we record the editor, language and operating system used. We don't use this information to decide who passes our interview (I don't think that would be fair). However, it is fascinating data! &lt;strong&gt;It gives us insight into which tools different cohorts of engineers prefer, and how these preferences change over time. It also allows us to identify correlations between the tools engineers choose and their performance during programming interviews.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;My co-worker Mike wrote &lt;a href=&quot;https://triplebyte.com/blog/technical-interview-performance-by-editor-os-language&quot;&gt;a post about this data&lt;/a&gt; a year ago. But Triplebyte has grown a LOT since then, and we now have enough data to dive much deeper. That's my goal for this blog post.&lt;/p&gt;

&lt;p&gt;To get started, I pulled data on the editors used during all interviews conducted over the last year:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://d25hn4jiqx5f7l.cloudfront.net/file_attachments/files/original/a8e3535633ab4fceb3b06a5af4eb4a0473d319ac.png?1543944864&quot; alt=&quot;editor-popularity-margin.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The first thing that jumps out from this graph is the prominence of Visual Studio Code. With 17% of the pie, VS Code was the editor used by the plurality of Triplebyte candidates last year. This was a surprise to me for two reasons. First, VS Code is a relatively new product from Microsoft, and, second, last year it didn't even appear on our charts—its share was small enough to fall into the “other” bucket.&lt;/p&gt;
&lt;p&gt;To get a better view of this, I graphed the same data over time:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://d25hn4jiqx5f7l.cloudfront.net/file_attachments/files/original/d689450a0d53419d62d0d988a73571c7edb6f236.png?1543937184&quot; alt=&quot;editor-popularity-over-time-margin.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Yikes! VS Code is eating everyone else's lunch! The story here is pretty clear. Over the past year, VS Code usage has gone from 5% to 22%. Over the same time, Sublime Text usage has fallen from 17% to 11%, and Atom usage has fallen from 11% to 6%. Even Eclipse is falling. And VS Code is accelerating every month. Google Trends shows the same thing:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://d25hn4jiqx5f7l.cloudfront.net/file_attachments/files/original/6d6ea7bd464b4fd9e6af347e1a69bcf5d45c8b4d.png?1543937366&quot; alt=&quot;editor-popularity-google-trends-margin.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;VS Code is on the rise and is poised to become the most dominant editor we've ever seen. Maybe &lt;em&gt;I&lt;/em&gt; should give it a try!&lt;/p&gt;

&lt;p&gt;Editor usage is only one part of the story, however. Not all usage is equal. I wanted to see which editors are used by the best programmers. To look at that, I pulled data on how Triplebyte candidates performed during our interview, grouped by the editor they used:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://d25hn4jiqx5f7l.cloudfront.net/file_attachments/files/original/9dc03a46ea6663c2a7e3bbf74a855347a445c3df.png?1543937461&quot; alt=&quot;editor-performance-margin.png&quot;/&gt; This chart shows the rates at which each editor's users pass our interview compared to the mean pass rate for all candidates. First, notice the preeminence of Emacs and Vim! Engineers who use these editors pass our interview at significantly higher rates than other engineers. And the effect size is not small. Emacs users pass our interview at a rate 50% higher than other engineers. What could explain this phenomenon? One possible explanation is that Vim and Emacs are old school. You might expect their users to have more experience and, thus, to do better. However, notice that VS Code is the third best editor—and it is brand new. This undercuts that narrative a bit (and makes VS Code look even more dominant).&lt;/p&gt;
&lt;p&gt;Do Emacs and Vim users have some other characteristic that makes them more likely to succeed during interviews? Perhaps they tend to be more willing to invest time and effort customizing a complex editor in the short-term in order to get returns from a more powerful tool in the long-term?&lt;/p&gt;
&lt;p&gt;On the negative end, engineers who use Eclipse, intelliJ and Visual Studio pass our interview at lower rates. What do Eclipse, IntelliJ and Visual Studio have in common? Well, they are all IDEs. However, PyCharm is also a full-featured IDE, and it shows a high pass rate. What else could be going on? Another distinguishing feature of Eclipes, IntelliJ, and Visual Studio is their strong association with Java and C#, so might we merely be seeing the result of a correlation between specific editors and specific languages?&lt;/p&gt;
&lt;p&gt;To investigate this, I looked at interview pass rates by language as well:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://d25hn4jiqx5f7l.cloudfront.net/file_attachments/files/original/2d91c7bc54323641aa5e69ca602bdd01935d21ee.png?1543937547&quot; alt=&quot;language-performance-margin.png&quot;/&gt; Java and C# do have relatively low pass rates, although notice that Eclipse has a lower pass rate than Java (-21.4% vs. -16.7), so we cannot fully explain its poor performance as Java dragging it down.&lt;/p&gt;
&lt;p&gt;Also, what's going on with Go? Go programmers are great! To dig deeper into these questions, I looked at editor usage by language:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://d25hn4jiqx5f7l.cloudfront.net/file_attachments/files/original/96551f0f84b87bd438ab1e7be23c269038383620.png?1543937640&quot; alt=&quot;editor-by-language-margin.png&quot;/&gt; The percentages on this graph are per editor. So we can see, for example, that 97% of engineers using PyCharm program in Python (which makes sense — it's in the name). Eclipse is dominated by Java (94%) and Visual Studio is mostly C# and C++ (88%). I can't really say which way the causality goes, but it seems that both the languages (Java, C#) and the IDEs (Eclipse, Visual Studio) are associated with lower pass rates in interviews. This data comes from our internal interviews, but the same result holds for interviews conducted by the outside companies who use our platform.&lt;/p&gt;
&lt;p&gt;Triplebyte does not take language or editor selection into account when making interview decisions. And there are tons of great C# and Java programmers out there (and we've helped many of them get jobs with companies on our platform). However, it seems that the average C# or Java engineer who goes through our process does less well than the average Ruby or Go engineer. I have no idea why.&lt;/p&gt;
&lt;p&gt;Another finding from this chart is the difference between VS Code and Sublime. VS Code is primarily used for JavaScript development (61%) but less frequently for Python development (22%). With Sublime, the numbers are basically reversed (51% Python and 30% JavaScript). It's interesting that VS Code users pass interviews at a higher rate than Sublime engineers, even though they predominately use a language with a lower success rate (JavaSript).&lt;/p&gt;

&lt;p&gt;To wrap things up, I sliced the data by experience level and location. Here you can see language usage by experience level:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://d25hn4jiqx5f7l.cloudfront.net/file_attachments/files/original/4c2f593ed560712a9797b0b51aaac6930385c3cc.png?1543937735&quot; alt=&quot;language-by-experience-margin.png&quot;/&gt; Again, rows sum to 100%, so the chart shows what percentage of people with a given level of experience use each language. Most notable here is how popular Python and Java are among candidates with only internships or part time experience. Are we seeing folks who recently graduated from college using the languages in which they were taught?&lt;/p&gt;
&lt;p&gt;Then there's editor usage by experience level:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://d25hn4jiqx5f7l.cloudfront.net/file_attachments/files/original/e457fdbdc9abf4c76c3173d5b930397d67c648b0.png?1543937787&quot; alt=&quot;editor-by-experience-margin.png&quot;/&gt; First off, you can see VS Code usage dropping off as experience level increases. It's definitely more popular among junior engineers. You can also see that Vim and Emacs are more popular among more experienced engineers. It seems plausible that this is indeed the main reason why Vim and Emacs users have such a high pass rate in our interviews.&lt;/p&gt;
&lt;p&gt;Finally, we looked at the relationship between location and language used:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://d25hn4jiqx5f7l.cloudfront.net/file_attachments/files/original/83a4765150b75a476f728963366223b1890c44b9.png?1543937843&quot; alt=&quot;language-by-location.png&quot;/&gt; I like this chart for what it says about Bay Area geography. On the peninsula, where larger companies tend to be located, you see a lot of Java developers. In San Francisco, where startups dominate, you see more JavaScript.&lt;/p&gt;

&lt;p&gt;Here's a summary of the trends in tool usage we saw over the past year along with some intriguing relationships between the tools engineers choose and their programming ability:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Visual Studio Code is on the rise.&lt;/strong&gt; Over the past year, it has become the most popular editor across the board, and it's gaining ground every month. I wonder if the editor landscape is experiencing a tectonic shift, from a relatively fractured market to a world in which a single editor has over 50% of the market?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Engineers who use old school editors like Vim or Emacs tend to be strong programmers.&lt;/strong&gt; That said, this finding may be best explained by the fact that these editors are especially popular among more experienced engineers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Engineers who use Go are also especially strong.&lt;/strong&gt; If you know why, please let me know.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Engineers who use Eclipse or Visual Studio do less well (on average) in our interviews.&lt;/strong&gt; This correlation still stands for interviews with external companies who use our platform.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Take all of this with a grain of salt.&lt;/strong&gt; I want to end by saying that we don't think any of this is causative. That is, I don't recommend that you start using Emacs and Go (or stop using Eclipse and Java) on the basis of this data. There are strong programmers who use every set of tools. The most important thing in any interview is using the tool that you are most comfortable with.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I would really appreciate your feedback.&lt;/strong&gt; I have a lot of questions about this data, and I would love to know what other programmers think about what we've seen over the past year. Email Ammon at &lt;a href=&quot;mailto:ammon@triplebyte.com&quot;&gt;ammon@triplebyte.com&lt;/a&gt; or Lyn at &lt;a href=&quot;mailto:lyn@triplebyte.com&quot;&gt;lyn@triplebyte.com&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;No matter which editor you choose, if you're an engineer interested in being matched with top tech companies in San Francisco, New York, Los Angeles, and/or Seattle, &lt;a href=&quot;https://triplebyte.com/users/sign_up&quot;&gt;check out our process.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you're a company interested in hiring great engineers, &lt;a href=&quot;https://triplebyte.com/company&quot;&gt;explore our platform!&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 06 Dec 2018 18:00:41 +0000</pubDate>
<dc:creator>Harj</dc:creator>
<og:type>article</og:type>
<og:title>The Rise of Microsoft Visual Studio Code</og:title>
<og:description>tl;dr Visual Studio Code usage is rising rapidly! VS Code is now the editor chosen by the majority of engineers during programming interviews, and it appears to be rapidly taking market share from other top editors. Triplebyte interviews hundreds of engineers each week. For every interview, we record the editor, language and operating system each candidate uses. We don't use this data to decide who passes our interview (I don't think that would be fair). However, it is fascinating data! It gives us insight into which tools different cohorts of engineers prefer, and how these preferences have changed over time. It also allows us to identify correlations between the tools engineers choose and their performance during programming interviews.</og:description>
<og:url>https://triplebyte.com/blog/editor-report-the-rise-of-visual-studio-code</og:url>
<og:image>https://d25hn4jiqx5f7l.cloudfront.net/blog-posts/og_images/og/31_1543935106.jpg?1543935106</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>https://triplebyte.com/blog/editor-report-the-rise-of-visual-studio-code</dc:identifier>
</item>
<item>
<title>Microsoft Edge and open source collaboration</title>
<link>https://blogs.windows.com/windowsexperience/2018/12/06/microsoft-edge-making-the-web-better-through-more-open-source-collaboration/</link>
<guid isPermaLink="true" >https://blogs.windows.com/windowsexperience/2018/12/06/microsoft-edge-making-the-web-better-through-more-open-source-collaboration/</guid>
<description>&lt;p&gt;For the past few years, Microsoft has meaningfully increased participation in the open source software (OSS) community, becoming one of the world’s largest supporters of OSS projects. Today we’re announcing that we intend to adopt the Chromium open source project in the development of Microsoft Edge on the desktop to create better web compatibility for our customers and less fragmentation of the web for all web developers.&lt;/p&gt;&lt;p&gt;As part of this, we intend to become a significant contributor to the Chromium project, in a way that can make not just Microsoft Edge — but other browsers as well — better on both PCs and other devices.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Making the web better for many audiences&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Working with open source is not new for Microsoft Edge. Our mobile browser has been based on open source from its beginnings over a year ago. We’ve also used open source for various features of Microsoft Edge on the desktop (e.g. Angle, Web Audio, Brotli) and we’ve begun making contributions to the Chromium project to help move browsing forward on new ARM-based Windows devices.&lt;/p&gt;
&lt;p&gt;Our goal is to do this in a way that embraces the well-established open source model that’s been working effectively for years: meaningful and positive contributions that align to long-standing, thoughtfully designed architecture, and collaborative engineering. Together we seek the best outcome for all people who use the web across many devices.&lt;/p&gt;
&lt;p&gt;Ultimately, we want to make the web experience better for many different audiences. &lt;em&gt;People&lt;/em&gt; using Microsoft Edge (and potentially other browsers) will experience improved compatibility with all web sites, while getting the best-possible battery life and hardware integration on all kinds of Windows devices. &lt;em&gt;Web developers&lt;/em&gt; will have a less-fragmented web platform to test their sites against, ensuring that there are fewer problems and increased satisfaction for users of their sites; and because we’ll continue to provide the Microsoft Edge service-driven understanding of legacy IE-only sites, &lt;em&gt;Corporate IT&lt;/em&gt; will have improved compatibility for both old and new web apps in the browser that comes with Windows.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Microsoft Edge + OSS: a new emphasis for Microsoft&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Over the next year or so, we’ll be making a technology change that happens “under the hood” for Microsoft Edge, gradually over time, and developed in the open so those of you who are interested can follow along. The key aspects of this evolution in direction are:&lt;/p&gt;
&lt;p&gt;1. &lt;em&gt;We will move to a Chromium-compatible web platform for Microsoft Edge on the desktop.&lt;/em&gt; Our intent is to align the Microsoft Edge web platform simultaneously (a) with web standards and (b) with other Chromium-based browsers. This will deliver improved compatibility for everyone and create a simpler test-matrix for web developers.&lt;/p&gt;
&lt;p&gt;2. &lt;em&gt;Microsoft Edge will now be delivered&lt;/em&gt; &lt;em&gt;and&lt;/em&gt; &lt;em&gt;updated for all supported versions of Windows and on a more frequent cadence.&lt;/em&gt; We also expect this work to enable us to bring Microsoft Edge to other platforms like macOS. Improving the web-platform experience for both end users and developers requires that the web platform and the browser be consistently available to as many devices as possible. To accomplish this, we will evolve the browser code more broadly, so that our distribution model offers an updated Microsoft Edge experience + platform across all supported versions of Windows, while still maintaining the benefits of the browser’s close integration with Windows.&lt;/p&gt;
&lt;p&gt;3. &lt;em&gt;We will contribute web platform enhancements to make Chromium&lt;/em&gt;&lt;em&gt;-based&lt;/em&gt; &lt;em&gt;browsers better on Windows devices&lt;/em&gt;. Our philosophy of greater participation in Chromium open source will embrace contribution of beneficial new tech, consistent with some of the work we described above. We recognize that making the web better on Windows is good for our customers, partners and our business – and we intend to actively contribute to that end.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What happens next&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you’re a Microsoft Edge customer, there is nothing you need to do as the Microsoft Edge you use today isn’t changing. If you are a web developer, &lt;a href=&quot;https://www.microsoftedgeinsider.com/&quot;&gt;we invite you to join our community&lt;/a&gt; by installing preview builds when they’re available and staying current on our testing and contributions. We expect to have a preview build ready in early 2019 for you to try for yourself.&lt;/p&gt;
&lt;p&gt;If you’re part of the open-source community developing browsers, we invite you to collaborate with us as we build the future of Microsoft Edge and contribute to the Chromium project. A few near-term examples will include continued work on ARM64 support, web accessibility, and taking advantage of other hardware features like touch support.&lt;/p&gt;
&lt;p&gt;We look forward to sharing more details in the future as we test and learn. We are excited about the opportunity to be an even-more-active part of this community and bring the best of Microsoft forward to continue to make the web better for everyone.&lt;/p&gt;
&lt;p&gt;Thanks,&lt;/p&gt;
&lt;p&gt;Joe&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;post-modified&quot;&gt;Updated December 6, 2018 10:40 am&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 06 Dec 2018 17:03:05 +0000</pubDate>
<dc:creator>xPaw</dc:creator>
<og:type>article</og:type>
<og:title>Microsoft Edge: Making the web better through more open source collaboration - Windows Experience Blog</og:title>
<og:description>For the past few years, Microsoft has meaningfully increased participation in the open source software (OSS) community, becoming one of the world’s largest supporters of OSS projects. Today we’re announcing that we intend to adopt the Chromium open source project in the development of Microsoft Edge on the desktop to create better web compatibility for …</og:description>
<og:url>https://blogs.windows.com/windowsexperience/2018/12/06/microsoft-edge-making-the-web-better-through-more-open-source-collaboration/</og:url>
<og:image>https://blogs.windows.com/uploads/sites/2/2016/12/cropped-cropped-Windows-logo1.png</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://blogs.windows.com/windowsexperience/2018/12/06/microsoft-edge-making-the-web-better-through-more-open-source-collaboration/</dc:identifier>
</item>
<item>
<title>Rust 2018 is here, but what is it?</title>
<link>https://hacks.mozilla.org/2018/12/rust-2018-is-here?</link>
<guid isPermaLink="true" >https://hacks.mozilla.org/2018/12/rust-2018-is-here?</guid>
<description>&lt;p&gt;&lt;strong&gt;This post was written in collaboration with the Rust Team (the “we” in this article). You can also read &lt;a href=&quot;https://blog.rust-lang.org/2018/12/06/Rust-1.31-and-rust-2018.html&quot;&gt;their announcement&lt;/a&gt; on the Rust blog.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Starting today, the Rust 2018 edition is in its first release. With this edition, we’ve focused on productivity… on making Rust developers as productive as they can be.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/12/01_01-rust2018.png&quot;&gt;&lt;img class=&quot;alignnone size-large wp-image-32986&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/12/01_01-rust2018-500x549.png&quot; alt=&quot;A timeline showing the different channels: beta, Rust 2018, and Rust 2015, with features flowing from beta to the other two. The timeline is surrounded by icons for tooling and for 4 domains: WebAssembly, embedded, networking, and CLI. A red circle surrounds everything except for Rust 2015 and is labeled with Developer Productivity.&quot; width=&quot;500&quot; height=&quot;549&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/12/01_01-rust2018-500x549.png 500w, https://hacks.mozilla.org/files/2018/12/01_01-rust2018-250x275.png 250w, https://hacks.mozilla.org/files/2018/12/01_01-rust2018-768x843.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But beyond that, it can be hard to explain exactly what Rust 2018 is.&lt;/p&gt;
&lt;p&gt;Some people think of it as a new version of the language, which it is… kind of, but not really. I say “not really” because if this is a new version, it doesn’t work like versioning does in other languages.&lt;/p&gt;
&lt;p&gt;In most other languages, when a new version of the language comes out, any new features are added to that new version. The previous version doesn’t get new features.&lt;/p&gt;
&lt;p&gt;Rust editions are different. This is because of the way the language is evolving. Almost all of the new features are 100% compatible with Rust as it is. They don’t require any breaking changes. That means there’s no reason to limit them to Rust 2018 code. New versions of the compiler will continue to support “Rust 2015 mode”, which is what you get by default.&lt;/p&gt;
&lt;p&gt;But sometimes to advance the language, you need to add things like new syntax. And this new syntax can break things in existing code bases.&lt;/p&gt;
&lt;p&gt;An example of this is the &lt;code&gt;async/await&lt;/code&gt; feature. Rust initially didn’t have the concepts of &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt;. But it turns out that these primitives are really helpful. They make it easier to write code that is asynchronous without the code getting unwieldy.&lt;/p&gt;
&lt;p&gt;To make it possible to add this feature, we need to add both &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; as keywords. But we also have to be careful that we’re not making old code invalid… code that might’ve used the words &lt;code&gt;async&lt;/code&gt; or &lt;code&gt;await&lt;/code&gt; as variable names.&lt;/p&gt;
&lt;p&gt;So we’re adding the keywords as part of Rust 2018. Even though the feature hasn’t landed yet, the keywords are now reserved. All of the breaking changes needed for the next three years of development (like adding new keywords) are being made in one go, in Rust 1.31.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/12/01_02-breaking-changes-02.png&quot;&gt;&lt;img class=&quot;alignnone size-large wp-image-32997&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/12/01_02-breaking-changes-02-500x353.png&quot; alt=&quot;Timeline with a line connecting Rust 2015 to the start of Rust 2018 at release 1.31.&quot; width=&quot;500&quot; height=&quot;353&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/12/01_02-breaking-changes-02-500x353.png 500w, https://hacks.mozilla.org/files/2018/12/01_02-breaking-changes-02-250x177.png 250w, https://hacks.mozilla.org/files/2018/12/01_02-breaking-changes-02-768x543.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Even though there are breaking changes in Rust 2018, that doesn’t mean your code will break. Your code will continue compiling even if it has &lt;code&gt;async&lt;/code&gt; or &lt;code&gt;await&lt;/code&gt; as a variable name. Unless you tell it otherwise, the compiler assumes you want it to compile your code the same way that it has been up to this point.&lt;/p&gt;
&lt;p&gt;But as soon as you want to use one of these new, breaking features, you can opt in to Rust 2018 mode. You just run &lt;code&gt;cargo fix&lt;/code&gt;, which will tell you if you need to update your code to use the new features. It will also mostly automate the process of making the changes. Then you can add &lt;code&gt;edition=2018&lt;/code&gt; to your Cargo.toml to opt in and use the new features.&lt;/p&gt;
&lt;p&gt;This edition specifier in Cargo.toml doesn’t apply to your whole project… it doesn’t apply to your dependencies. It’s scoped to just the one crate. This means you’ll be able to have crate graphs that have Rust 2015 and Rust 2018 interspersed.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/12/01_03-crate-graph.png&quot;&gt;&lt;img class=&quot;alignnone size-large wp-image-32988&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/12/01_03-crate-graph-500x330.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;330&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/12/01_03-crate-graph-500x330.png 500w, https://hacks.mozilla.org/files/2018/12/01_03-crate-graph-250x165.png 250w, https://hacks.mozilla.org/files/2018/12/01_03-crate-graph-768x506.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Because of this, even once Rust 2018 is out there, it’s mostly going to look the same as Rust 2015. Most changes will land in both Rust 2018 and Rust 2015. Only the handful of features that require breaking changes won’t pass through. &lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/12/01_04-rust2018-only.png&quot;&gt;&lt;img class=&quot;alignnone size-large wp-image-32998&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/12/01_04-rust2018-only-500x290.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;290&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/12/01_04-rust2018-only-500x290.png 500w, https://hacks.mozilla.org/files/2018/12/01_04-rust2018-only-250x145.png 250w, https://hacks.mozilla.org/files/2018/12/01_04-rust2018-only-768x446.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rust 2018 isn’t just about changes to the core language, though. In fact, far from it.&lt;/p&gt;
&lt;p&gt;Rust 2018 is a push to make Rust developers more productive. Many productivity wins come from things outside of the core language… things like tooling. They also come from focusing on specific use cases and figuring out how Rust can be the most productive language for those use cases.&lt;/p&gt;
&lt;p&gt;So you could think of Rust 2018 as the specifier in Cargo.toml that you use to enable the handful of features that require breaking changes…&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/12/01_05-handful-of-changes.png&quot;&gt;&lt;img class=&quot;alignnone size-large wp-image-32999&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/12/01_05-handful-of-changes-500x381.png&quot; alt=&quot;Timeline with arrows pointing to the couple of Rust 2018 features that aren't passing through to Rust 2015.&quot; width=&quot;500&quot; height=&quot;381&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/12/01_05-handful-of-changes-500x381.png 500w, https://hacks.mozilla.org/files/2018/12/01_05-handful-of-changes-250x191.png 250w, https://hacks.mozilla.org/files/2018/12/01_05-handful-of-changes-768x586.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Or you can think about it as a moment in time, where Rust becomes one of the most productive languages you can use in many cases — whenever you need performance, light footprint, or high reliability.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/12/01_06-as_this.png&quot;&gt;&lt;img class=&quot;alignnone size-large wp-image-33000&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/12/01_06-as_this-500x463.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;463&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/12/01_06-as_this-500x463.png 500w, https://hacks.mozilla.org/files/2018/12/01_06-as_this-250x231.png 250w, https://hacks.mozilla.org/files/2018/12/01_06-as_this-768x711.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In our minds, it’s the second. So let’s look at all that happened outside of the core language. Then we can dive into the core language itself.&lt;/p&gt;

&lt;p&gt;A programming language can’t be productive by itself, in the abstract. It’s productive when put to some use. Because of this, the team knew we didn’t just need to make Rust as a language or Rust tooling better. We also needed to make it easier to use Rust in particular domains.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/12/02_01-specific-use-cases.png&quot;&gt;&lt;img class=&quot;alignnone size-large wp-image-33001&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/12/02_01-specific-use-cases-500x376.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;376&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/12/02_01-specific-use-cases-500x376.png 500w, https://hacks.mozilla.org/files/2018/12/02_01-specific-use-cases-250x188.png 250w, https://hacks.mozilla.org/files/2018/12/02_01-specific-use-cases-768x578.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In some cases, this meant creating a whole new set of tools for a whole new ecosystem.&lt;/p&gt;
&lt;p&gt;In other cases, it meant polishing what was already in the ecosystem and documenting it well so that it’s easy to get up and running.&lt;/p&gt;
&lt;p&gt;The Rust team formed working groups focused on four domains:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;WebAssembly&lt;/li&gt;
&lt;li&gt;Embedded applications&lt;/li&gt;
&lt;li&gt;Networking&lt;/li&gt;
&lt;li&gt;Command line tools&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;WebAssembly&lt;/h2&gt;
&lt;p&gt;For WebAssembly, the working group needed to create a whole new suite of tools.&lt;/p&gt;
&lt;p&gt;Just last year, WebAssembly &lt;a href=&quot;https://hacks.mozilla.org/2017/02/creating-and-working-with-webassembly-modules/&quot;&gt;made it possible to compile languages like Rust&lt;/a&gt; to run on the web. Since then, Rust has quickly become the &lt;a href=&quot;https://hacks.mozilla.org/2018/03/making-webassembly-better-for-rust-for-all-languages/&quot;&gt;best language for integrating&lt;/a&gt; with existing web applications.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/03/01_rust_loves_js.png&quot;&gt;&lt;img class=&quot;alignnone size-large wp-image-32009&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/03/01_rust_loves_js-500x201.png&quot; alt=&quot;Rust logo and JS logo with a heart in between&quot; width=&quot;500&quot; height=&quot;201&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/03/01_rust_loves_js-500x201.png 500w, https://hacks.mozilla.org/files/2018/03/01_rust_loves_js-250x101.png 250w, https://hacks.mozilla.org/files/2018/03/01_rust_loves_js-768x309.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rust is a good fit for web development for two reasons:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt; Cargo’s crates ecosystem works in the same way that most web app developers are used to. You pull together a bunch of small modules to form a larger application. This means that it’s easy to use Rust just where you need it.&lt;/li&gt;
&lt;li&gt;Rust has a light footprint and doesn’t require a runtime. This means that you don’t need to ship down a bunch of code. If you have a tiny module doing lots of heavy computational work, you can introduce a few lines of Rust just to make that run faster.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;With the &lt;a href=&quot;https://rustwasm.github.io/2018/09/26/announcing-web-sys.html&quot;&gt;&lt;code&gt;web-sys&lt;/code&gt; and &lt;code&gt;js-sys&lt;/code&gt; crates&lt;/a&gt;, it’s easy to call web APIs like &lt;code&gt;fetch&lt;/code&gt; or &lt;code&gt;appendChild&lt;/code&gt; from Rust code. And &lt;code&gt;wasm-bindgen&lt;/code&gt; makes it easy support high-level data types that WebAssembly doesn’t natively support.&lt;/p&gt;
&lt;p&gt;Once you’ve coded up your Rust WebAssembly module, there are tools to make it easy to plug it into the rest of your web application. You can use &lt;a href=&quot;https://github.com/rustwasm/wasm-pack&quot;&gt;wasm-pack&lt;/a&gt; to run these tools automatically, and push your new module up to npm if you want.&lt;/p&gt;
&lt;p&gt;Check out the &lt;a href=&quot;https://rustwasm.github.io/book/&quot;&gt;Rust and WebAssembly book&lt;/a&gt; to try it yourself.&lt;/p&gt;
&lt;h3&gt;What’s next?&lt;/h3&gt;
&lt;p&gt;Now that Rust 2018 has shipped, the working group is figuring out where to take things next. They’ll be working with the community to determine the next areas of focus.&lt;/p&gt;
&lt;h2&gt;Embedded&lt;/h2&gt;
&lt;p&gt;For embedded development, the working group needed to make existing functionality stable.&lt;/p&gt;
&lt;p&gt;In theory, Rust has always been a good language for embedded development. It gives embedded developers the modern day tooling that they are sorely lacking, and very convenient high-level language features. All this without sacrificing on resource usage. So Rust seemed like a great fit for embedded development.&lt;/p&gt;
&lt;p&gt;However, in practice it was a bit of a wild ride. Necessary features weren’t in the &lt;a href=&quot;https://blog.rust-lang.org/2014/10/30/Stability.html&quot;&gt;stable channel&lt;/a&gt;. Plus, the standard library needed to be tweaked for use on embedded devices. That meant that people had to compile their own version of the Rust core crate (the crate which is used in every Rust app to provide Rust’s basic building blocks — intrinsics and primitives).&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/12/02_02-bronco.png&quot;&gt;&lt;img class=&quot;alignnone size-large wp-image-32990&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/12/02_02-bronco-500x444.png&quot; alt=&quot;On the left: Someone riding a bucking microprocesser chip, saying &amp;quot;Whoa, Rusty!&amp;quot;. On the right, someone riding a tame microprocessor chip saing &amp;quot;Good Rusty, nice and steady&amp;quot;&quot; width=&quot;500&quot; height=&quot;444&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/12/02_02-bronco-500x444.png 500w, https://hacks.mozilla.org/files/2018/12/02_02-bronco-250x222.png 250w, https://hacks.mozilla.org/files/2018/12/02_02-bronco-768x683.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Together, these two things meant developers had to depend on the nightly version of Rust. And since there were no automated tests for micro-controller targets, nightly would often break for these targets.&lt;/p&gt;
&lt;p&gt;To fix this, the working group needed to make sure that necessary features were in the stable channel. We also had to add tests to the CI system for micro-controller targets. This means a person adding something for a desktop component won’t break something for an embedded component.&lt;/p&gt;
&lt;p&gt;With these changes, embedded development with Rust moves away from the bleeding edge and towards the plateau of productivity.&lt;/p&gt;
&lt;p&gt;Check out the &lt;a href=&quot;https://rust-embedded.github.io/book/&quot;&gt;Embedded Rust book&lt;/a&gt; to try it yourself.&lt;/p&gt;
&lt;h3&gt;What’s next?&lt;/h3&gt;
&lt;p&gt;With this year’s push, Rust has really good support for ARM Cortex-M family of microprocessor cores, which are used in a lot of devices. However, there are lots of architectures used on embedded devices, and those aren’t as well supported. Rust needs to expand to have the same level of support for these other architectures.&lt;/p&gt;
&lt;h2&gt;Networking&lt;/h2&gt;
&lt;p&gt;For networking, the working group needed to build a core abstraction into the language—&lt;code&gt;async/await&lt;/code&gt;. This way, developers can use idiomatic Rust even when the code is asynchronous.&lt;/p&gt;
&lt;p&gt;For networking tasks, you often have to wait. For example, you may be waiting for a response to a request. If your code is synchronous, that means the work will stop—the CPU core that is running the code can’t do anything else until the request comes in. But if you code asynchronously, then the function that’s waiting for the response can go on hold while the CPU core takes care of running other functions.&lt;/p&gt;
&lt;p&gt;Coding asynchronous Rust is possible even with Rust 2015. And there are lots of upsides to this. On the large scale, for things like server applications, it means that your code can handle many more connections per server. On the small scale, for things like embedded applications that are running on tiny, single threaded CPUs, it means you can make better use of your single thread.&lt;/p&gt;
&lt;p&gt;But these upsides came with a major downside—you couldn’t use the borrow checker for that code, and you would have to write unidiomatic (and somewhat confusing) Rust. This is where &lt;code&gt;async/await&lt;/code&gt; comes in. It gives the compiler the information it needs to borrow check across asynchronous function calls.&lt;/p&gt;
&lt;p&gt;The keywords for &lt;code&gt;async/await&lt;/code&gt; were introduced in 1.31, although they aren’t currently backed by an implementation. Much of that work is done, and you can expect the feature to be available in an upcoming release.&lt;/p&gt;
&lt;h3&gt;What’s next?&lt;/h3&gt;
&lt;p&gt;Beyond just enabling productive low-level development for networking applications, Rust could enable more productive development at a higher level.&lt;/p&gt;
&lt;p&gt;Many servers need to do the same kinds of tasks. They need to parse URLs or work with HTTP. If these were turned into components—common abstractions that could be shared as crates—then it would be easy to plug them together to form all sorts of different servers and frameworks.&lt;/p&gt;
&lt;p&gt;To drive the component development process, the &lt;a href=&quot;https://github.com/rust-net-web/tide&quot;&gt;Tide framework&lt;/a&gt; is providing a test bed for, and eventually example usage of, these components.&lt;/p&gt;
&lt;h2&gt;Command line tools&lt;/h2&gt;
&lt;p&gt;For command line tools, the working group needed to bring together smaller, low-level libraries into higher level abstractions, and polish some existing tools.&lt;/p&gt;
&lt;p&gt;For some CLI scripts, you really want to use bash. For example, if you just need to call out to other shell tools and pipe data between them, then bash is best.&lt;/p&gt;
&lt;p&gt;But Rust is a great fit for a lot of other kinds of CLI tools. For example, it’s great if you are building a complex tool like &lt;a href=&quot;https://github.com/BurntSushi/ripgrep/&quot;&gt;ripgrep&lt;/a&gt; or building a CLI tool on top of an existing library’s functionality.&lt;/p&gt;
&lt;p&gt;Rust doesn’t require a runtime and allows you to compile to a single static binary, which makes it easy to distribute. And you get high-level abstractions that you don’t get with other languages like C and C++, so that already makes Rust CLI developers productive.&lt;/p&gt;
&lt;p&gt;What did the working group need to make this better still? Even higher-level abstractions.&lt;/p&gt;
&lt;p&gt;With these higher-level abstractions, it’s quick and easy to assemble a production ready CLI.&lt;/p&gt;
&lt;p&gt;An example of one of these abstractions is the &lt;a href=&quot;https://github.com/rust-clique/human-panic&quot;&gt;human panic&lt;/a&gt; library. Without this library, if your CLI code panics, it probably outputs the entire back trace. But that’s not very helpful for your end users. You could add custom error handling, but that requires effort.&lt;/p&gt;
&lt;p&gt;If you use human panic, then the output will be automatically routed to an error dump file. What the user will see is a helpful message suggesting that they report the issue and upload the error dump file.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/12/02_04-human-panic.png&quot;&gt;&lt;img class=&quot;alignnone size-large wp-image-32991&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/12/02_04-human-panic-500x323.png&quot; alt=&quot;A cli tool with friendly output from human-panic&quot; width=&quot;500&quot; height=&quot;323&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/12/02_04-human-panic-500x323.png 500w, https://hacks.mozilla.org/files/2018/12/02_04-human-panic-250x162.png 250w, https://hacks.mozilla.org/files/2018/12/02_04-human-panic-768x496.png 768w, https://hacks.mozilla.org/files/2018/12/02_04-human-panic.png 1565w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The working group also made it easier to get started with CLI development. For example, the &lt;a href=&quot;https://github.com/rust-clique/confy&quot;&gt;confy&lt;/a&gt; library will automate a lot of setup for a new CLI tool. It only asks you two things:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;What’s the name of your application?&lt;/li&gt;
&lt;li&gt;What are configuration options you want to expose (which you define as a struct that can be serialized and deserialized)?&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;From that, confy will figure out the rest for you.&lt;/p&gt;
&lt;h3&gt;What’s next?&lt;/h3&gt;
&lt;p&gt;The working group abstracted away a lot of different tasks that are common between CLIs. But there’s still more that could be abstracted away. The working group will be making more of these high level libraries, and fixing more paper cuts as they go.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/12/03_01-tooling-1.png&quot;&gt;&lt;img class=&quot;alignnone size-large wp-image-33002&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/12/03_01-tooling-1-500x435.png&quot; alt=&quot;Tooling icon&quot; width=&quot;500&quot; height=&quot;435&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/12/03_01-tooling-1-500x435.png 500w, https://hacks.mozilla.org/files/2018/12/03_01-tooling-1-250x217.png 250w, https://hacks.mozilla.org/files/2018/12/03_01-tooling-1-768x668.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When you experience a language, you experience it through tools. This starts with the editor that you use. It continues through every stage of the development process, and through maintenance.&lt;/p&gt;
&lt;p&gt;This means that a productive language depends on productive tooling.&lt;/p&gt;
&lt;p&gt;Here are some tools (and improvements to Rust’s existing tooling) that were introduced as part of Rust 2018.&lt;/p&gt;
&lt;h2&gt;IDE support&lt;/h2&gt;
&lt;p&gt;Of course, productivity hinges on fluidly getting code from your mind to the screen quickly. IDE support is critical to this. To support IDEs, we need tools that can tell the IDE what Rust code actually means — for example, to tell the IDE what strings make sense for code completion.&lt;/p&gt;
&lt;p&gt;In the Rust 2018 push, the community focused on the features that IDEs needed. With Rust Language Server and IntelliJ Rust, many IDEs now have fluid Rust support.&lt;/p&gt;
&lt;h2&gt;&lt;strong class=&quot;markup--strong markup--h4-strong&quot;&gt;Faster compilation&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;With compilation, faster means more productive. So we’ve made the compiler faster.&lt;/p&gt;
&lt;p&gt;Before, when you would compile a Rust crate, the compiler would recompile every single file in the crate. But now, with &lt;a href=&quot;https://rust-lang-nursery.github.io/edition-guide/rust-2018/the-compiler/incremental-compilation-for-faster-compiles.html&quot;&gt;incremental compilation&lt;/a&gt;, the compiler is smart and only recompiles the parts that have changed. This, along with &lt;a href=&quot;https://blog.mozilla.org/nnethercote/2018/04/30/how-to-speed-up-the-rust-compiler-in-2018/&quot;&gt;other optimizations&lt;/a&gt;, has made the Rust compiler much faster.&lt;/p&gt;
&lt;h2&gt;rustfmt&lt;/h2&gt;
&lt;p&gt;Productivity also means not having to fix style nits (and never having to argue over formatting rules).&lt;/p&gt;
&lt;p&gt;The rustfmt tool helps with this by automatically reformatting your code using a default code style (which the &lt;a href=&quot;https://github.com/rust-lang/rfcs/pull/2436&quot;&gt;community reached consensus&lt;/a&gt; on). Using rustfmt ensures that all of your Rust code conforms to the same style, like clang format does for C++ and Prettier does for JavaScript.&lt;/p&gt;
&lt;h2&gt;Clippy&lt;/h2&gt;
&lt;p&gt;Sometimes it’s nice to have an experienced advisor by your side… giving you tips on best practices as you code. That’s what Clippy does —it reviews your code as you go and tells you how to make that code more idiomatic.&lt;/p&gt;
&lt;h2&gt;rustfix&lt;/h2&gt;
&lt;p&gt;But if you have an older code base that uses outmoded idioms, then just getting tips and correcting the code yourself can be tedious. You just want someone to go into your code base an make the corrections.&lt;/p&gt;
&lt;p&gt;For these cases, rustfix will automate the process. It will both apply lints from tools like Clippy and update older code to match Rust 2018 idioms.&lt;/p&gt;

&lt;p&gt;These changes in the ecosystem have brought lots of productivity wins. But some productivity issues could only be fixed with changes to the language itself.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/12/04_01-language.png&quot;&gt;&lt;img class=&quot;alignnone size-large wp-image-33003&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/12/04_01-language-500x377.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;377&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/12/04_01-language-500x377.png 500w, https://hacks.mozilla.org/files/2018/12/04_01-language-250x188.png 250w, https://hacks.mozilla.org/files/2018/12/04_01-language-768x579.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As I talked about in the intro, most of the language changes are completely compatible with existing Rust code. These changes are all part of Rust 2018. But because they don’t break any code, they also work in any Rust code… even if that code doesn’t use Rust 2018.&lt;/p&gt;
&lt;p&gt;Let’s look at a few of the big language features that were added to all editions. Then we can look at the small list of Rust 2018-specific features.&lt;/p&gt;
&lt;h2&gt;New language features for all editions&lt;/h2&gt;
&lt;p&gt;Here’s a small sample of the big new language features that are (or will be) in all language editions.&lt;/p&gt;
&lt;h3&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;More precise borrow checking (e.g. Non-Lexical Lifetimes)&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;One big selling point for Rust is the borrow checker. The borrow checker helps ensure that your code is memory safe. But it has also been a pain point for new Rust developers.&lt;/p&gt;
&lt;p&gt;Part of that is learning new concepts. But there was another big part… the borrow checker would sometimes reject code that seemed like it should work, even to those who understood the concepts.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/12/04_03-nll-01.png&quot;&gt;&lt;img class=&quot;alignnone size-large wp-image-32994&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/12/04_03-nll-01-500x268.png&quot; alt=&quot;borrow checker telling a programmer that they can't borrow a variable because it's already borrowed&quot; width=&quot;500&quot; height=&quot;268&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/12/04_03-nll-01-500x268.png 500w, https://hacks.mozilla.org/files/2018/12/04_03-nll-01-250x134.png 250w, https://hacks.mozilla.org/files/2018/12/04_03-nll-01-768x411.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is because the lifetime of a borrow was assumed to go all the way to the end of its scope — for example, to the end of the function that the variable is in.&lt;/p&gt;
&lt;p&gt;This meant that even though the variable was done with the value and wouldn’t try to access it anymore, other variables were still denied access to it until the end of the function.&lt;/p&gt;
&lt;p&gt;To fix this, we’ve made the borrow checker smarter. Now it can see when a variable is &lt;em&gt;actually&lt;/em&gt; done using a value. If it is done, then it doesn’t block other borrowers from using the data.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/12/04_04-nll-02.png&quot;&gt;&lt;img class=&quot;alignnone size-large wp-image-32995&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/12/04_04-nll-02-500x303.png&quot; alt=&quot;borrow checker saying, Oh, now I see&quot; width=&quot;500&quot; height=&quot;303&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/12/04_04-nll-02-500x303.png 500w, https://hacks.mozilla.org/files/2018/12/04_04-nll-02-250x152.png 250w, https://hacks.mozilla.org/files/2018/12/04_04-nll-02-768x466.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;While this is only available in Rust 2018 as of today, it will be available in all editions in the near future. I’ll be writing more about all of this soon.&lt;/p&gt;
&lt;h3&gt;Procedural macros on stable Rust&lt;/h3&gt;
&lt;p&gt;Macros in Rust have been around since before Rust 1.0. But with Rust 2018, we’ve made some big improvements, like introducing procedural macros.&lt;/p&gt;
&lt;p&gt;With procedural macros, it’s kind of like you can add your own syntax to Rust.&lt;/p&gt;
&lt;p&gt;Rust 2018 brings two kinds of procedural macros:&lt;/p&gt;
&lt;h3&gt;Function-like macros&lt;/h3&gt;
&lt;p&gt;Function-like macros allow you to have things that look like regular function calls, but that are actually run during compilation. They take in some code and spit out different code, which the compiler then inserts into the binary.&lt;/p&gt;
&lt;p&gt;They’ve been around for a while, but what you could do with them was limited. Your macro could only take the input code and run a match statement on it. It didn’t have access to look at all of the tokens in that input code.&lt;/p&gt;
&lt;p&gt;But with procedural macros, you get the same input that a parser gets — a token stream. This means can create much more powerful function-like macros.&lt;/p&gt;
&lt;h3&gt;Attribute-like macros&lt;/h3&gt;
&lt;p&gt;If you’re familiar with decorators in languages like JavaScript, attribute macros are pretty similar. They allow you to annotate bits of code in Rust that should be preprocessed and turned into something else.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;derive&lt;/code&gt; macro does exactly this kind of thing. When you put derive above a struct, the compiler will take that struct in (after it has been parsed as a list of tokens) and fiddle with it. Specifically, it will add a basic implementation of functions from a trait.&lt;/p&gt;
&lt;h3&gt;More ergonomic borrowing in matching&lt;/h3&gt;
&lt;p&gt;This change is pretty straight-forward.&lt;/p&gt;
&lt;p&gt;Before, if you wanted to borrow something and tried to match on it, you had to add some weird looking syntax:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/12/04_06-match.png&quot;&gt;&lt;img class=&quot;alignnone size-large wp-image-32996&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/12/04_06-match-500x162.png&quot; alt=&quot;Old version of the code with &amp;amp;Some(ref s) next to new version with Some(s)&quot; width=&quot;500&quot; height=&quot;162&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/12/04_06-match-500x162.png 500w, https://hacks.mozilla.org/files/2018/12/04_06-match-250x81.png 250w, https://hacks.mozilla.org/files/2018/12/04_06-match-768x249.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But now, you don’t need the &lt;code&gt;&amp;amp;Some(ref s)&lt;/code&gt; anymore. You can just write &lt;code&gt;Some(s)&lt;/code&gt;, and Rust will figure it out from there.&lt;/p&gt;
&lt;h2&gt;New features specific to Rust 2018&lt;/h2&gt;
&lt;p&gt;The smallest part of Rust 2018 are the features specific to it. Here are the small handful of changes that using the Rust 2018 edition unlocks.&lt;/p&gt;
&lt;h3&gt;Keywords&lt;/h3&gt;
&lt;p&gt;There are a few keywords that have been added to Rust 2018.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;try&lt;/code&gt; keyword&lt;/li&gt;
&lt;li&gt;&lt;code&gt;async/await&lt;/code&gt; keyword&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;These features haven’t been fully implemented yet, but the keywords are being added in Rust 1.31. This means we don’t have to introduce new keywords (which would be a breaking change) in the future, once the features behind these keywords are implemented.&lt;/p&gt;
&lt;h3&gt;The module system&lt;/h3&gt;
&lt;p&gt;One big pain point for developers learning Rust is the module system. And we could see why. It was hard to reason about how Rust would choose which module to use.&lt;/p&gt;
&lt;p&gt;To fix this, we made a few changes to the way paths work in Rust.&lt;/p&gt;
&lt;p&gt;For example, if you imported a crate, you could use it in a path at the top level. But if you moved any of the code to a submodule, then it wouldn’t work anymore.&lt;/p&gt;
&lt;pre&gt;
// top level module
extern crate serde;

// this works fine at the top level
impl serde::Serialize for MyType { ... }

mod foo {
  // but it does *not* work in a sub-module
  impl serde::Serialize for OtherType { ... }
}
&lt;/pre&gt;
&lt;p&gt;Another example is the prefix &lt;code&gt;::&lt;/code&gt;, which used to refer to either the crate root or an external crate. It could be hard to tell which.&lt;/p&gt;
&lt;p&gt;We’ve made this more explicit. Now, if you want to refer to the crate root, you use the prefix &lt;code&gt;crate::&lt;/code&gt; instead. And this is just one of the &lt;a href=&quot;https://rust-lang-nursery.github.io/edition-guide/rust-2018/module-system/path-clarity.html&quot;&gt;path clarity&lt;/a&gt; improvements we’ve made.&lt;/p&gt;
&lt;p&gt;If you have existing Rust code and you want it to use Rust 2018, you’ll very likely need to update it for these new module paths. But that doesn’t mean that you’ll need to manually update your code. Run &lt;code&gt;cargo fix&lt;/code&gt; before you add the edition specifier to Cargo.toml and &lt;code&gt;rustfix&lt;/code&gt; will make all the changes for you.&lt;/p&gt;

&lt;p&gt;Learn all about this edition in the &lt;a href=&quot;https://rust-lang-nursery.github.io/edition-guide/rust-2018/index.html&quot;&gt;Rust 2018 edition guide&lt;/a&gt;.&lt;/p&gt;
&lt;section class=&quot;about&quot; readability=&quot;6.3270676691729&quot;&gt;
&lt;p&gt;Lin is an engineer on the Mozilla Developer Relations team. She tinkers with JavaScript, WebAssembly, Rust, and Servo, and also draws code cartoons.&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;url&quot; href=&quot;https://hacks.mozilla.org/author/lclarkmozilla-com/&quot;&gt;More articles by Lin Clark…&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;url&quot; href=&quot;https://hacks.mozilla.org/author/lin-w-clarkgmail-com/&quot;&gt;More articles by The Rust Team…&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;</description>
<pubDate>Thu, 06 Dec 2018 17:00:52 +0000</pubDate>
<dc:creator>jsheard</dc:creator>
<og:url>https://hacks.mozilla.org/2018/12/rust-2018-is-here</og:url>
<og:title>Rust 2018 is here… but what is it? – Mozilla Hacks - the Web developer blog</og:title>
<og:description>Starting today, the Rust 2018 edition is in its first release. With this edition, we’ve focused on making Rust developers as productive as they can be. Most of the language ...</og:description>
<og:image>https://hacks.mozilla.org/files/2018/12/featured_image.png</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://hacks.mozilla.org/2018/12/rust-2018-is-here/</dc:identifier>
</item>
<item>
<title>StateOfTheArt.ai</title>
<link>https://www.stateoftheart.ai/</link>
<guid isPermaLink="true" >https://www.stateoftheart.ai/</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://www.stateoftheart.ai/&quot;&gt;https://www.stateoftheart.ai/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=18618987&quot;&gt;https://news.ycombinator.com/item?id=18618987&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 323&lt;/p&gt;
&lt;p&gt;# Comments: 27&lt;/p&gt;
</description>
<pubDate>Thu, 06 Dec 2018 15:48:18 +0000</pubDate>
<dc:creator>EvgeniyZh</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.stateoftheart.ai/</dc:identifier>
</item>
<item>
<title>Tesla&amp;#039;s giant battery saved $40M during its first year, report says</title>
<link>https://electrek.co/2018/12/06/tesla-battery-report/</link>
<guid isPermaLink="true" >https://electrek.co/2018/12/06/tesla-battery-report/</guid>
<description>&lt;p&gt;&lt;span class=&quot;s1&quot;&gt;Neoen, the owner of the giant &lt;/span&gt;Tesla battery system in South Australia, released a new report for the first full year of operation and revealed that the energy storage system saved about $40 million over the last 12 months.&lt;span id=&quot;more-80462&quot;/&gt; &lt;ins class=&quot;adsbygoogle author_ad&quot; data-ad-client=&quot;ca-pub-4655152367470280&quot; data-ad-slot=&quot;5555766060&quot;/&gt; &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://electrek.co/2017/11/23/tesla-worlds-largest-li-ion-battery-system-in-australia/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Tesla’s 100MW/129MWh Powerpack project in South Australia&lt;/a&gt; provide the same grid services as peaker plants, but cheaper, quicker, and with zero-emissions, through its battery system.&lt;/p&gt;
&lt;p&gt;It is so efficient that it reportedly should have &lt;a href=&quot;https://electrek.co/2018/01/23/tesla-giant-battery-australia-1-million/&quot;&gt;made around $1 million in just a few days&lt;/a&gt; in January, but &lt;a href=&quot;https://electrek.co/2018/03/22/tesla-powerpack-battery-too-quick-to-get-paid/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Tesla later complained that they are not being paid correctly&lt;/a&gt; because the system doesn’t account for how fast Tesla’s Powerpacks start discharging their power into the grid.&lt;/p&gt;
&lt;p&gt;The system is basically a victim of its own efficiency, which the&lt;a href=&quot;https://electrek.co/2018/04/09/tesla-giant-battery-system-praised-energy-market-operator/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt; Australian Energy Market Operator confirmed is much more rapid, accurate and valuable than a conventional steam turbine in a report &lt;/a&gt;published earlier this year.&lt;/p&gt;
&lt;p&gt;The energy storage capacity is managed by Neoen, which operates the adjacent wind farm.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;s1&quot;&gt;They contracted Aurecon to evaluate the impact of the project and they estimate that the “battery allows annual savings in the wholesale market approaching $40 million by increased competition and removal of 35 MW local FCAS constraint.”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;It is particularly impressive when you consider that &lt;a href=&quot;https://electrek.co/2018/09/24/tesla-powerpack-battery-australia-cost-revenue/&quot;&gt;the massive Tesla Powerpack system cost only $66 million&lt;/a&gt;, according to another report from Neoen.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;s1&quot;&gt;Aurecon’s energy leader, Paul Gleeson, commented on the results:&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class=&quot;s1&quot;&gt;“reviewing the data from Hornsdale Power Reserve’s first year of operation has given us real insights into the capabilities of this new technology, including how these fast response systems can help improve stability, reduce the likelihood of load-shedding events, and contribute to the reduction in wholesale prices. The data is telling us that these fast response systems can help us optimise the way Australian’s energy system works”.&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;He believes that the results have greater implications on the broader market:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class=&quot;s1&quot;&gt;“this is definitely an exciting project as a world first, but what is really exciting is the impact the technology can have on the whole National Electricty Markey as our generation fleet continues its transition”.&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Here are the key findings from the report are that the Hornsdale Power Reserve:&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;ul2&quot;&gt;&lt;li class=&quot;li5&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Has contributed to the removal of the requirement for a 35 MW local Frequency Control Ancillary Service (FCAS), saving nearly $40 million per year in typical annual costs&lt;/span&gt;&lt;/li&gt;
&lt;li class=&quot;li5&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Has reduced the South Australian regulation FCAS price by 75% while also providing these services for other regions&lt;/span&gt;&lt;/li&gt;
&lt;li class=&quot;li5&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Provides a premium contingency service with response time of less than 100 milliseconds&lt;/span&gt;&lt;/li&gt;
&lt;li class=&quot;li5&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Helps protect South Australia from being separated from the National Electricity Market&lt;/span&gt;&lt;/li&gt;
&lt;li class=&quot;li5&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Is key to the Australian Energy Market Operator’s (AEMO) and ElectraNet’s System Integrity Protection Scheme (SIPS) which protects the SA-VIC Heywood Interconnector from overload&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Here’s the full report:&lt;/p&gt;


</description>
<pubDate>Thu, 06 Dec 2018 14:41:34 +0000</pubDate>
<dc:creator>touristtam</dc:creator>
<og:type>article</og:type>
<og:title>Tesla’s giant battery saved $40 million during its first year, report says</og:title>
<og:url>https://electrek.co/2018/12/06/tesla-battery-report/</og:url>
<og:description>Neoen, the owner of the giant Tesla battery system in South Australia, released a new report for the first full year of operation and revealed that the energy storage system saved about $40 million…</og:description>
<og:image>https://electrek.co/wp-content/uploads/sites/3/2018/09/Tesla-hornsdale-powerpack-1.jpg?quality=82&amp;strip=all&amp;w=1600</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://electrek.co/2018/12/06/tesla-battery-report/</dc:identifier>
</item>
<item>
<title>Facebook removed post by ex-manager who said site &amp;#039;failed&amp;#039; black people</title>
<link>https://www.theguardian.com/technology/2018/dec/04/facebook-mark-s-luckie-african-american-workers-users</link>
<guid isPermaLink="true" >https://www.theguardian.com/technology/2018/dec/04/facebook-mark-s-luckie-african-american-workers-users</guid>
<description>&lt;p&gt;Facebook removed a post from a former employee who &lt;a href=&quot;https://www.theguardian.com/technology/2018/nov/27/facebook-race-black-employees-discrimination-accusation&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline&quot;&gt;accused the company&lt;/a&gt; of “failing its black employees and its black users”, saying the memo about racial discrimination violated its “community standards”.&lt;/p&gt;
&lt;p&gt;Mark S Luckie, who recently stepped down as strategic partner manager, published the &lt;a href=&quot;https://www.facebook.com/notes/mark-s-luckie/facebook-is-failing-its-black-employees-and-its-black-users/1931075116975013/&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline&quot;&gt;piece&lt;/a&gt; on Facebook last week detailing his experiences as a black employee at a tech &lt;a href=&quot;https://www.theguardian.com/technology/2016/jul/14/facebook-diversity-report-silicon-valley-employment&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline&quot;&gt;corporation&lt;/a&gt; that &lt;a href=&quot;https://www.theguardian.com/technology/2017/aug/07/silicon-valley-google-diversity-black-women-workers&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline&quot;&gt;largely&lt;/a&gt; excludes &lt;a href=&quot;https://www.theguardian.com/technology/2015/jul/01/facebook-diversity-black-employees&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline&quot;&gt;African Americans&lt;/a&gt;, saying the company has also unfairly censored black people on the platform.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.theguardian.com/technology/facebook&quot; data-link-name=&quot;auto-linked-tag&quot; data-component=&quot;auto-linked-tag&quot; class=&quot;u-underline&quot;&gt;Facebook&lt;/a&gt; appeared to prove Luckie’s point this week by removing the letter before eventually reinstating it.&lt;/p&gt;
&lt;p&gt;“My first reaction was shock that it happened,” Luckie told the Guardian after he saw that Facebook had &lt;a href=&quot;https://twitter.com/marksluckie/status/1069993173957701632&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline&quot;&gt;flagged his post&lt;/a&gt;, saying it “goes against” the site’s standards. “Then I kind of wanted to laugh. I’ve been on so many phone calls and email threads with people having this issue … In an ironic twist, I am dealing with this.”&lt;/p&gt;
&lt;p&gt;In an interview on Tuesday, Luckie reflected on the intense debate his memo had sparked and the “disappointing” silence from Facebook, which he said was doing little to respond to concerns or address prejudice and exclusion at the company.&lt;/p&gt;
&lt;aside class=&quot;element element-rich-link element--thumbnail element-rich-link--not-upgraded&quot; data-component=&quot;rich-link&quot; data-link-name=&quot;rich-link-1 | 1&quot;&gt;&lt;div class=&quot;rich-link&quot;&gt;
&lt;div class=&quot;rich-link__container&quot;&gt;
&lt;div class=&quot;rich-link__header&quot;&gt;
&lt;h2 class=&quot;rich-link__title&quot;&gt;Ex-Facebook manager: black staffers face discrimination and exclusion&lt;/h2&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/aside&gt;&lt;p&gt;“It feels like Facebook can tackle a lot of issues … but when you talk about black people, all of a sudden there is silence,” he said by phone from Atlanta, where he moved after quitting Facebook last month. “There are a lot of black employees who express that they feel the same way. To put out a three-line response that doesn’t have any heft to it, it feels dismissive of an engaged community on Facebook. It’s just sad.”&lt;/p&gt;
&lt;p&gt;In his original post, Luckie wrote about black employees being “accosted by campus security”, facing discriminatory comments from managers, reaching a “dead end” when they go to HR, and being “dissuaded” from participating in black employee groups. He said there were more Black Lives Matter posters than black employees in some buildings.&lt;/p&gt;
&lt;p&gt;Facebook, which is &lt;a href=&quot;https://www.theguardian.com/technology/2018/nov/21/facebook-admits-definers-pr-george-soros-critics-sandberg-zuckerberg&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline&quot;&gt;battling&lt;/a&gt; a range of &lt;a href=&quot;https://www.theguardian.com/technology/live/2018/nov/27/fake-news-inquiry-facebook-to-face-mps-from-around-the-world-mark-zuckerberg-live-updates&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline&quot;&gt;PR crises&lt;/a&gt;, responded with a generic statement last week about efforts to “increase the range of perspectives among those who build our products”. The company’s brief comment did not address Luckie’s specific concerns, including his arguments that the firm’s lack of diversity had contributed to failures on the platform, such as the frequent &lt;a href=&quot;https://www.theguardian.com/technology/2016/sep/12/facebook-blocks-shaun-king-black-lives-matter&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline&quot;&gt;mislabeling of posts by black users&lt;/a&gt; as “hate speech”.&lt;/p&gt;
&lt;p&gt;Black employees make up 4% of the Facebook &lt;a href=&quot;https://newsroom.fb.com/news/2018/07/diversity-report/&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline&quot;&gt;workforce&lt;/a&gt; and only 1% of technical roles and 2% of leadership positions.&lt;/p&gt;
&lt;p&gt;Luckie said he decided to go public with his letter after he circulated it internally and received no formal response from Facebook. “They work quickly to resolve issues when they are held publicly accountable for them,” he said.&lt;/p&gt;
&lt;p&gt;But it was frustrating, he said, that Facebook responded internally and externally with statements by the few black employees in leadership roles: “The image Facebook is projecting is that it’s up to black people to fix the issues that black people didn’t create.”&lt;/p&gt;
&lt;p&gt;He added: “The historic language to black employees has been ‘pull yourself up by your bootstraps’ and ‘be resilient’.”&lt;/p&gt;
&lt;p&gt;Luckie, 35, said the response to his post had been overwhelming and largely positive, though some within Facebook have been critical of him for going public.&lt;/p&gt;
&lt;p&gt;“I was disappointed in my colleagues who sort of dismissed that any of this was happening at Facebook, because it didn’t happen to them,” he said. “If you’re black at Facebook, you’ve had to deal with at least one of the issues that I’ve outlined.”&lt;/p&gt;
&lt;p&gt;Luckie said he recognized that his post could cost him future jobs or lead to retaliation, but he added: “I’m willing to make the sacrifice.”&lt;/p&gt;
&lt;p&gt;He said it was also validating to hear others share similar stories: “I don’t want to be alone out there in the world discussing this.”&lt;/p&gt;
&lt;p&gt;After Facebook notified him that it deleted his post, hours later it said it “took another look” and “restored” it, adding: “We’re sorry for the trouble.”&lt;/p&gt;
&lt;p&gt;He said it was yet another reminder of the harmful moderation systems at Facebook, which have repeatedly been exposed as &lt;a href=&quot;https://www.propublica.org/article/facebook-hate-speech-censorship-internal-documents-algorithms&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline&quot;&gt;biased&lt;/a&gt; against a range of &lt;a href=&quot;https://www.theguardian.com/technology/2017/jan/18/facebook-moderation-racial-bias-black-lives-matter&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline&quot;&gt;marginalized groups&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;“The process that Facebook has is stifling conversation, especially amongst under-represented communities,” Luckie said, adding of his post’s censorship: “It encapsulates all the things that are wrong with this process.”&lt;/p&gt;
&lt;p&gt;A Facebook spokesperson, Anthony Harrison, said Luckie’s post did not violate standards, adding: “We are looking into what happened.”&lt;/p&gt;
&lt;p&gt;For now, Luckie said he was happy to be removed from Silicon Valley and to relocate to Atlanta.&lt;/p&gt;
&lt;p&gt;“My culture is here, my friends are here,” he said. “I’ve seen more black people in the airport that I’ve seen in a whole month at Facebook.”&lt;/p&gt;


</description>
<pubDate>Thu, 06 Dec 2018 14:40:44 +0000</pubDate>
<dc:creator>hampelm</dc:creator>
<og:url>http://www.theguardian.com/technology/2018/dec/04/facebook-mark-s-luckie-african-american-workers-users</og:url>
<og:description>In interview, Mark S Luckie describes irony of letter’s removal for violating ‘community standards’ before it was reinstated</og:description>
<og:image>https://i.guim.co.uk/img/media/87dcb06fd831e66f66ae26762ca03a138766613b/0_287_3215_1930/master/3215.jpg?width=1200&amp;height=630&amp;quality=85&amp;auto=format&amp;fit=crop&amp;overlay-align=bottom%2Cleft&amp;overlay-width=100p&amp;overlay-base64=L2ltZy9zdGF0aWMvb3ZlcmxheXMvdGctZGVmYXVsdC5wbmc&amp;s=7fbf90a725bcf13c7c2fe6ff32da1250</og:image>
<og:type>article</og:type>
<og:title>Facebook removed post by ex-manager who said site 'failed' black people</og:title>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.theguardian.com/technology/2018/dec/04/facebook-mark-s-luckie-african-american-workers-users</dc:identifier>
</item>
<item>
<title>A well-known URL for changing passwords</title>
<link>https://github.com/WICG/change-password-url</link>
<guid isPermaLink="true" >https://github.com/WICG/change-password-url</guid>
<description></description>
<pubDate>Thu, 06 Dec 2018 14:19:05 +0000</pubDate>
<dc:creator>fanf2</dc:creator>
<og:image>https://avatars3.githubusercontent.com/u/13145324?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>WICG/change-password-url</og:title>
<og:url>https://github.com/WICG/change-password-url</og:url>
<og:description>Contribute to WICG/change-password-url development by creating an account on GitHub.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/WICG/change-password-url</dc:identifier>
</item>
</channel>
</rss>