<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Visa Buys Plaid</title>
<link>https://www.wsj.com/articles/visa-nears-deal-to-buy-fintech-startup-plaid-11578948426</link>
<guid isPermaLink="true" >https://www.wsj.com/articles/visa-nears-deal-to-buy-fintech-startup-plaid-11578948426</guid>
<description>&lt;div class=&quot;is-lead-inset&quot;&gt;
      &lt;div data-layout=&quot;header&amp;#10;              &quot; data-layout-mobile=&quot;&quot; class=&quot;&amp;#10;        media-object&amp;#10;        type-InsetMediaIllustration&amp;#10;          header&amp;#10;    scope-web|mobileapps&amp;#10;  article__inset&amp;#10;        article__inset--type-InsetMediaIllustration&amp;#10;          article__inset--header&amp;#10;    article__inset--lead&amp;#10;  &quot;&gt;
      
      
          
    &lt;figure class=&quot;media-object-image enlarge-image renoImageFormat- img-header article__inset__image&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;div data-mobile-ratio=&quot;66.66666666666666%&quot; data-layout-ratio=&quot;66.66666666666666%&quot; data-subtype=&quot;photo&quot; class=&quot;image-container  responsive-media article__inset__image__image&quot;&gt;
    
        &lt;img srcset=&quot;https://images.wsj.net/im-143772?width=140&amp;amp;size=1.5 140w,&amp;#10;https://images.wsj.net/im-143772?width=540&amp;amp;size=1.5 540w,&amp;#10;https://images.wsj.net/im-143772?width=620&amp;amp;size=1.5 620w,&amp;#10;https://images.wsj.net/im-143772?width=700&amp;amp;size=1.5 700w,&amp;#10;https://images.wsj.net/im-143772?width=860&amp;amp;size=1.5 860w,&amp;#10;https://images.wsj.net/im-143772?width=1260&amp;amp;size=1.5 1260w&quot; sizes=&quot;(max-width: 140px) 100px,&amp;#10;(max-width: 540px) 500px,&amp;#10;(max-width: 620px) 580px,&amp;#10;(max-width: 700px) 660px,&amp;#10;(max-width: 860px) 820px,&amp;#10;1260px&quot; src=&quot;https://images.wsj.net/im-143772?width=620&amp;amp;size=1.5&quot; data-enlarge=&quot;https://images.wsj.net/im-143772?width=1260&amp;amp;size=1.5&quot; alt=&quot;&quot; title=&quot;A deal would give Visa Plaid’s software, which can access customers’ bank-account data.&quot;/&gt;&lt;/div&gt;

    
      &lt;figcaption class=&quot;wsj-article-caption article__inset__image__caption&quot; itemprop=&quot;caption&quot;&gt;&lt;span class=&quot;wsj-article-caption-content&quot;&gt;A deal would give Visa Plaid’s software, which can access customers’ bank-account data.&lt;/span&gt;
      &lt;span class=&quot;wsj-article-credit article__inset__image__caption__credit&quot; itemprop=&quot;creator&quot;&gt;
            &lt;span class=&quot;wsj-article-credit-tag&quot;&gt;
              Photo: 
            &lt;/span&gt;
        Keith Srakocic/Associated Press
          &lt;/span&gt;
  &lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt; 
    &lt;/div&gt;

  &lt;div class=&quot;clearfix byline-wrap&quot;&gt;


      
      &lt;div class=&quot;byline article__byline&quot;&gt;
      
      
          &lt;span&gt;By&lt;/span&gt;
              &lt;div class=&quot;author mobile-scrim hasMenu&quot; data-scrim=&quot;{&amp;quot;type&amp;quot;:&amp;quot;author&amp;quot;,&amp;quot;header&amp;quot;:&amp;quot;Cara Lombardo&amp;quot;,&amp;quot;subhead&amp;quot;:&amp;quot;The Wall Street Journal&amp;quot;,&amp;quot;list&amp;quot;:[{&amp;quot;type&amp;quot;:&amp;quot;link&amp;quot;,&amp;quot;icon&amp;quot;:&amp;quot;bio&amp;quot;,&amp;quot;url&amp;quot;:&amp;quot;https://www.wsj.com/news/author/8621&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;Biography&amp;quot;},{&amp;quot;type&amp;quot;:&amp;quot;link&amp;quot;,&amp;quot;icon&amp;quot;:&amp;quot;twitter&amp;quot;,&amp;quot;url&amp;quot;:&amp;quot;https://twitter.com/CaraRLombardo&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;@CaraRLombardo&amp;quot;},{&amp;quot;type&amp;quot;:&amp;quot;link&amp;quot;,&amp;quot;icon&amp;quot;:&amp;quot;facebook&amp;quot;,&amp;quot;url&amp;quot;:&amp;quot;https://facebook.com/&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;&amp;quot;},{&amp;quot;type&amp;quot;:&amp;quot;link&amp;quot;,&amp;quot;icon&amp;quot;:&amp;quot;email&amp;quot;,&amp;quot;url&amp;quot;:&amp;quot;mailto:cara.lombardo@wsj.com&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;cara.lombardo@wsj.com&amp;quot;}]}&quot;&gt;
                  &lt;span class=&quot;name&quot; itemprop=&quot;name&quot;&gt;Cara Lombardo&lt;/span&gt; and 
                  &lt;/div&gt;
        &lt;div class=&quot;author mobile-scrim hasMenu&quot; data-scrim=&quot;{&amp;quot;type&amp;quot;:&amp;quot;author&amp;quot;,&amp;quot;header&amp;quot;:&amp;quot;AnnaMaria Andriotis&amp;quot;,&amp;quot;subhead&amp;quot;:&amp;quot;The Wall Street Journal&amp;quot;,&amp;quot;list&amp;quot;:[{&amp;quot;type&amp;quot;:&amp;quot;link&amp;quot;,&amp;quot;icon&amp;quot;:&amp;quot;bio&amp;quot;,&amp;quot;url&amp;quot;:&amp;quot;https://www.wsj.com/news/author/8073&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;Biography&amp;quot;},{&amp;quot;type&amp;quot;:&amp;quot;link&amp;quot;,&amp;quot;icon&amp;quot;:&amp;quot;twitter&amp;quot;,&amp;quot;url&amp;quot;:&amp;quot;https://twitter.com/AAndriotis&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;@AAndriotis&amp;quot;},{&amp;quot;type&amp;quot;:&amp;quot;link&amp;quot;,&amp;quot;icon&amp;quot;:&amp;quot;email&amp;quot;,&amp;quot;url&amp;quot;:&amp;quot;mailto:annamaria.andriotis@wsj.com&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;annamaria.andriotis@wsj.com&amp;quot;}]}&quot;&gt;
                  &lt;span class=&quot;name&quot; itemprop=&quot;name&quot;&gt;AnnaMaria Andriotis&lt;/span&gt;
                  &lt;/div&gt;

      &lt;/div&gt;
      
        &lt;time class=&quot;timestamp article__timestamp flexbox__flex--1&quot;&gt;
          Updated Jan. 13, 2020 7:20 pm ET
        &lt;/time&gt;&lt;/div&gt;

  

  &lt;div class=&quot;article-content &quot;&gt;

       &lt;p&gt; 






            &lt;a href=&quot;https://quotes.wsj.com/V&quot;&gt;Visa&lt;/a&gt;&lt;span class=&quot;company-name-type&quot;&gt; Inc.&lt;/span&gt;


       said Monday it would buy Plaid Inc. for $5.3 billion, as part of an effort by the card giant to tap into consumers’ growing use of financial-technology apps and noncard payments.&lt;/p&gt; &lt;p&gt;More consumers over the past decade have been using financial-services apps to manage their savings and spending, and Plaid sits in the middle of those relationships, providing software that gives the apps access to financial accounts. Venmo, 






            &lt;a href=&quot;https://quotes.wsj.com/PYPL&quot;&gt;PayPal Holdings&lt;/a&gt;&lt;span class=&quot;company-name-type&quot;&gt; Inc.’s&lt;/span&gt;


       money-transfer service, is one of privately held Plaid’s biggest customers.&lt;/p&gt; &lt;p&gt;Visa is the largest U.S. card network, handling $3.4 trillion of credit, debit and prepaid-card transactions in the first nine months of 2019, according to the Nilson Report. Its clients are largely comprised of banks that issue credit and debit cards, but the company is looking to expand its presence in the burgeoning field of electronic payments, where trillions of dollars are sent by wire transfer or between bank accounts globally each year.&lt;/p&gt;




      &lt;div class=&quot;paywall&quot;&gt;




       &lt;p&gt;On an investor conference call following the Monday announcement, Visa Chief Executive 




      Al Kelly




       said the acquisition would help expand the company’s access to financial-technology firms while accelerating its movement outside of cards. The deal was reported earlier Monday by The Wall Street Journal.&lt;/p&gt; &lt;p&gt;Visa last year acquired control of Earthport, which provides cross-border payment services to banks and businesses, after rival 






            &lt;a href=&quot;https://quotes.wsj.com/MA&quot;&gt;Mastercard&lt;/a&gt;&lt;span class=&quot;company-name-type&quot;&gt; Inc.&lt;/span&gt;


       also made an offer for the company. Before that, Mastercard bought payment-technology firm Vocalink, which enables the movement of payments between bank accounts.&lt;/p&gt; &lt;p&gt;These moves are essentially a way for the giant networks to diversify, preparing for the possibility that noncard-payment forms could one day replace their cards.&lt;/p&gt; &lt;p&gt;Card networks are concerned that consumer payments could move away from debit and credit cards to bank accounts, essentially allowing consumers to pay for products directly out of their bank accounts while bypassing so-called card rails altogether.&lt;/p&gt; &lt;p&gt;Bank-account payments also offer a way into business-to-business payments, a sector in which card companies have been trying to play a bigger role because it is viewed as untapped compared with consumer payments.&lt;/p&gt; &lt;p&gt;The deal could also help Visa address banks’ concerns about security as more new players like Plaid gain access to their customers’ information. It could boost Plaid’s standing with banks that have been wary of the services it offers and clashed with fintech firms over their use of Plaid to access bank-customer account data.&lt;/p&gt; &lt;p&gt;Visa is paying a significant premium over Plaid’s valuation of roughly $2.65 billion in a 2018 funding round, though the purchase price still represents a rounding error for a company with a market value of some $420 billion.&lt;/p&gt; &lt;p&gt;Plaid was founded in 2012 by 




      Zach Perret, 




       who is its current chief executive, and 




      William Hockey.




       Its other investors include venture-capital firms Andreessen Horowitz LLC and Kleiner Perkins.&lt;/p&gt; &lt;p&gt; &lt;strong&gt;Write to &lt;/strong&gt;Cara Lombardo at &lt;a href=&quot;mailto:cara.lombardo@wsj.com&quot; target=&quot;_blank&quot; class=&quot;icon &quot;&gt;cara.lombardo@wsj.com&lt;/a&gt; and AnnaMaria Andriotis at &lt;a href=&quot;mailto:annamaria.andriotis@wsj.com&quot; target=&quot;_blank&quot; class=&quot;icon &quot;&gt;annamaria.andriotis@wsj.com&lt;/a&gt;&lt;/p&gt;






      &lt;/div&gt;




  &lt;p&gt;Copyright ©2019 Dow Jones &amp;amp; Company, Inc. All Rights Reserved. 87990cbe856818d5eddac44c7b1cdeb8&lt;/p&gt;

  &lt;/div&gt;


</description>
<pubDate>Mon, 13 Jan 2020 20:58:04 +0000</pubDate>
<dc:creator>coloneltcb</dc:creator>
<og:title>Visa to Pay $5.3 Billion for Fintech Startup </og:title>
<og:description>Visa Inc. said it would buy Plaid Inc. for $5.3 billion, as part of an effort by the card giant to tap into consumers’ growing use of financial-technology apps and noncard payments.</og:description>
<og:url>https://www.wsj.com/articles/visa-nears-deal-to-buy-fintech-startup-plaid-11578948426</og:url>
<og:image>https://images.wsj.net/im-143772/social</og:image>
<og:type>article</og:type>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.wsj.com/articles/visa-nears-deal-to-buy-fintech-startup-plaid-11578948426</dc:identifier>
</item>
<item>
<title>iOS 13 app tracking alert has dramatically cut location data flow to ad industry</title>
<link>https://appleinsider.com/articles/20/01/13/app-tracking-alert-in-ios-13-has-dramatically-cut-location-data-flow-to-ad-industry</link>
<guid isPermaLink="true" >https://appleinsider.com/articles/20/01/13/app-tracking-alert-in-ios-13-has-dramatically-cut-location-data-flow-to-ad-industry</guid>
<description>&lt;span class=&quot;cfix&quot;&gt; &lt;/span&gt;&lt;p class=&quot;gray small byline&quot;&gt;By &lt;a href=&quot;https://appleinsider.com/cdn-cgi/l/email-protection#ff929e939c909392bf9e8f8f939a96918c969b9a8dd19c9092&quot;&gt;Malcolm Owen&lt;/a&gt;&lt;br /&gt;&lt;span class=&quot;gray&quot;&gt;Monday, January 13, 2020, 11:45 am PT (02:45 pm ET)&lt;/span&gt;&lt;/p&gt;
&lt;span&gt;&lt;span class=&quot;article-leader&quot;&gt;Apple's initiatives to minimize tracking by marketers is continuing to make life harder for the advertising industry, forcing advertisers to use inefficient data sources to pinpoint users.&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;
&lt;div align=&quot;center&quot;&gt;
&lt;div class=&quot;article-img&quot;&gt;&lt;img src=&quot;https://photos5.appleinsider.com/v9/images/1x1-white.jpg&quot; alt=&quot;&quot; height=&quot;368&quot; class=&quot;lazy&quot; data-original=&quot;https://photos5.appleinsider.com/gallery/34126-61187-location-data-app-prompt-head-l.jpg&quot; /&gt;&lt;noscript&gt;
&lt;p&gt;&lt;img src=&quot;https://photos5.appleinsider.com/gallery/34126-61187-location-data-app-prompt-head-l.jpg&quot; /&gt;&lt;/p&gt;
&lt;/noscript&gt;&lt;/div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;p&gt;Over the years, Apple has enhanced how it &lt;a href=&quot;https://appleinsider.com/articles/19/11/06/apples-annual-privacy-page-update-hammers-home-long-time-focus&quot;&gt;protects the privacy&lt;/a&gt; of its users online, typically by limiting what data can be seen by advertisers tracking different data points. Initiatives such as &lt;a href=&quot;https://appleinsider.com/articles/18/01/12/video-how-apples-intelligent-tracking-protection-in-safari-works&quot;&gt;Intelligent Tracking Protection&lt;/a&gt; in Safari has helped secure more privacy by making it harder to track individual users, which advertising executives in December admitted has been &quot;&lt;a href=&quot;https://appleinsider.com/articles/19/12/09/apples-safari-ad-tracking-prevention-tech-stunningly-effective-says-industry-executives&quot;&gt;stunningly effective&lt;/a&gt;.&quot;&lt;/p&gt;&lt;p&gt;While ITP and other improvements have helped to minimize the tracking of users, marketers are also being affected by another element of iOS 13, one where users are regularly notified of apps that are capturing their location in the background. The warning gives options for users to allow an app to continue to track all the time or to do so when it is open, with users often selecting the latter.&lt;/p&gt;&lt;p&gt;According to data from verification firm Location Sciences &lt;a href=&quot;https://digiday.com/marketing/apples-new-privacy-features-rattle-location-based-ad-market/&quot;&gt;seen&lt;/a&gt; by &lt;em&gt;DigiDay&lt;/em&gt;, approximately seven in ten iPhone users tracked by the company downloaded iOS 13 in its first six weeks of availability. Of those tracked users who installed the update, around 80% of them stopped all background tracking by apps.&lt;/p&gt;&lt;p&gt;Ad tracking company Teemo suggests the opt-in rates to share data with apps when not in use are often below 50%, whereas three years ago, the same rates were close to 100%. The higher rates were due to it being a time when users were largely unaware there were options to disable tracking in the first place.&lt;/p&gt;&lt;p&gt;&quot;People have decided to stop their phones' sharing location data at a universal level,&quot; Location Sciences chief business officer Jason Smith admitted.&lt;/p&gt;&lt;p&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/YaFIXn2yS2s&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;The trend of disabling tracking makes it harder for firms to rate the effectiveness of campaigns, Starcom managing partner Paul Kasamias suggests. The change impacts &quot;the ability to tie users that research online and purchase in store,&quot; as well as making measuring footfall in stores a &quot;far more opaque&quot; process for clients.&lt;/p&gt;&lt;p&gt;A drop in advertiser spending is likely to occur from small or medium-sized advertisers, Kasamias believes, as they are clients &quot;where cost efficiency is paramount and there is a physical footprint, as targeting the right user at the right time will become more difficult.&quot;&lt;/p&gt;&lt;p&gt;The change has already led to a reduction in &quot;sales pitches from providers of location-data solutions,&quot; Havas Media EVP Sargi Mann claimed, with there being more of a need to address the location issue &quot;transparently up front as part of bigger deals&quot; with marketers.&lt;/p&gt;&lt;p&gt;Despite the reduced amount of location data available, the amount that is still available to use is more valuable, while the market for location data continues to thrive.&lt;/p&gt;&lt;p&gt;&quot;We're still being approached by location data businesses that are telling us they're growing, said Rippll CEO Doug Chisholm. &quot;More importantly, they have more data than they did a year ago.&quot;&lt;/p&gt;&lt;p&gt;The quality of that data is still a problem, as ad buyers notice it is of a lower quality than data that was previously available. According to Smith, Location Sciences is seeing less location data derived from a smartphone's GPS, &quot;which is the most precise source of mobile location data.&quot;&lt;/p&gt;&lt;p&gt;Instead, Smith highlights the presence of &quot;lower quality data&quot; sourced from carriers or other Internet protocols. &quot;Often the least accurate sources of mobile location data available&quot; to a marketer in his opinion.&lt;/p&gt;&lt;p&gt;The reduction of available data may get worse for marketers, as Apple has urged developers to use &quot;&lt;a href=&quot;https://appleinsider.com/articles/19/06/03/sign-in-with-apple-aims-to-replace-facebook-authentication-to-keep-user-data-private&quot;&gt;Sign in with Apple&lt;/a&gt;&quot; in apps, as an alternative to authentication systems offered by Google and Facebook. While Apple's system will make it harder to track individual users with less data offered to firms, data collection will &lt;a href=&quot;https://appleinsider.com/articles/19/07/11/sign-in-with-apple-may-only-limit-tracking-not-eliminate-it&quot;&gt;still be possible&lt;/a&gt; for the firms involved.&lt;/p&gt;</description>
<pubDate>Mon, 13 Jan 2020 20:16:20 +0000</pubDate>
<dc:creator>clairity</dc:creator>
<og:url>https://appleinsider.com/articles/20/01/13/app-tracking-alert-in-ios-13-has-dramatically-cut-location-data-flow-to-ad-industry</og:url>
<og:image>https://photos5.appleinsider.com/gallery/34126-61187-location-data-app-prompt-head-xl.jpg</og:image>
<og:title>App tracking alert in iOS 13 has dramatically cut location data flow to ad industry</og:title>
<og:description>Apple's initiatives to minimize tracking by marketers is continuing to make life harder for the advertising industry, forcing advertisers to use inefficient data sources to pinpoint users.</og:description>
<og:type>website</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://appleinsider.com/articles/20/01/13/app-tracking-alert-in-ios-13-has-dramatically-cut-location-data-flow-to-ad-industry</dc:identifier>
</item>
<item>
<title>Please make your products work with URLs</title>
<link>https://anderspitman.net/16/please-work-with-urls/</link>
<guid isPermaLink="true" >https://anderspitman.net/16/please-work-with-urls/</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://anderspitman.net/16/please-work-with-urls/&quot;&gt;https://anderspitman.net/16/please-work-with-urls/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=22038065&quot;&gt;https://news.ycombinator.com/item?id=22038065&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 280&lt;/p&gt;
&lt;p&gt;# Comments: 285&lt;/p&gt;
</description>
<pubDate>Mon, 13 Jan 2020 20:07:26 +0000</pubDate>
<dc:creator>anderspitman</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://anderspitman.net/16/please-work-with-urls/</dc:identifier>
</item>
<item>
<title>Mercurial’s journey to and reflections on Python 3</title>
<link>https://gregoryszorc.com/blog/2020/01/13/mercurial%27s-journey-to-and-reflections-on-python-3/</link>
<guid isPermaLink="true" >https://gregoryszorc.com/blog/2020/01/13/mercurial%27s-journey-to-and-reflections-on-python-3/</guid>
<description>&lt;p&gt;Mercurial 5.2 was released on November 5, 2019. It is the first version of Mercurial that supports Python 3. This milestone comes nearly 11 years after Python 3.0 was first released on December 3, 2008.&lt;/p&gt;
&lt;p&gt;Speaking as a maintainer of Mercurial and an avid user of Python, I feel like the experience of making Mercurial work with Python 3 is worth sharing because there are a number of lessons to be learned.&lt;/p&gt;
&lt;p&gt;This post is logically divided into two sections: a mostly factual recount of Mercurial's Python 3 porting effort and a more opinionated commentary of the transition to Python 3 and the Python language ecosystem as a whole. Those who don't care about the mechanics of porting a large Python project to Python 3 may want to skip the next section or two.&lt;/p&gt;
&lt;h2&gt;Porting Mercurial to Python 3&lt;/h2&gt;
&lt;p&gt;Let's start with a brief history lesson of Mercurial's support for Python 3 as told by its own commit history.&lt;/p&gt;
&lt;p&gt;The Mercurial version control tool was first released in April 2005 (the same month that Git was initially released). Version 1.0 came out in March 2008. The first reference to Python 3 I found in the code base was in &lt;a href=&quot;https://www.mercurial-scm.org/repo/hg/rev/8fee8ff13d37&quot;&gt;September 2008&lt;/a&gt;. Then not much happens for a while until &lt;a href=&quot;https://www.mercurial-scm.org/repo/hg/rev/4494fb02d549&quot;&gt;June 2010&lt;/a&gt;, when someone authors a bunch of changes to make the Python C extensions start to recognize Python 3. Then things were again quiet for a while until &lt;a href=&quot;https://www.mercurial-scm.org/repo/hg/rev/56ef99fbd6f2&quot;&gt;January 2013&lt;/a&gt;, when a handful of changes landed to remove 2 argument &lt;code&gt;raise&lt;/code&gt;. There were a handful of commits in 2014 but nothing worth calling out.&lt;/p&gt;
&lt;p&gt;Mercurial's meaningful journey to Python 3 started in 2015. In code, the work started in &lt;a href=&quot;https://www.mercurial-scm.org/repo/hg/rev/af6e6a0781d7&quot;&gt;April 2015&lt;/a&gt;, with effort to make Mercurial's test harness run with Python 3. Part of this was a &lt;a href=&quot;https://www.mercurial-scm.org/repo/hg/rev/fefc72523491&quot;&gt;decision&lt;/a&gt; that Python 3.5 (to be released several months later in September 2015) would be the minimum Python 3 version that Mercurial would support.&lt;/p&gt;
&lt;p&gt;Once the Mercurial Project decided it wanted to port to Python 3 (as opposed to another language), one of the earliest decisions was how to perform that port. &lt;strong&gt;Mercurial's code base was too large to attempt a flag day conversion&lt;/strong&gt; where there would be a Python 2 version and a Python 3 version and one day everyone would switch from Python 2 to 3. &lt;strong&gt;Mercurial needed a way to run the same code (or as much of the same code) on both Python 2 and 3.&lt;/strong&gt; We would maintain a single code base and users would gradually switch from running with Python 2 to Python 3.&lt;/p&gt;
&lt;p&gt;The main goal with Mercurial's early porting work was just getting the code base to a point where &lt;code&gt;import mercurial&lt;/code&gt; would work. There were a myriad of places where Mercurial used syntax that was invalid on Python 3 and Python 3 couldn't even parse the source code, let alone compile it to bytecode and execute it.&lt;/p&gt;
&lt;p&gt;This effort began in earnest in &lt;a href=&quot;https://www.mercurial-scm.org/repo/hg/rev/e93036747902&quot;&gt;June 2015&lt;/a&gt; with global source code rewrites like using modern octal syntax, modern exception catching syntax (&lt;code&gt;except Exception as e&lt;/code&gt; instead of &lt;code&gt;except Exception, e&lt;/code&gt;), &lt;code&gt;print()&lt;/code&gt; instead of &lt;code&gt;print&lt;/code&gt;, and a &lt;a href=&quot;https://www.mercurial-scm.org/repo/hg/rev/1a6a117d0b95&quot;&gt;modern import convention&lt;/a&gt; along with the use of &lt;code&gt;from __future__ import absolute_import&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the early days of the port, our first goal was to get all source code parsing as valid Python 3. The next step was to get all the modules &lt;code&gt;import&lt;/code&gt;ing cleanly. This entailed fixing code that ran at &lt;code&gt;import&lt;/code&gt; time to work on Python 3. Our thinking was that we would need the code base to be &lt;code&gt;import&lt;/code&gt; clean on Python 3 before seriously thinking about run-time behavior. In reality, we quickly ported a lot of modules to &lt;code&gt;import&lt;/code&gt; cleanly and then moved on to higher-level porting, leaving a long-tail of modules with &lt;code&gt;import&lt;/code&gt; failures.&lt;/p&gt;
&lt;p&gt;This initial porting effort played out over months. There weren't many people working on it in the early days: a few people would basically hack on Python 3 as a form of itch scratching and most of the project's energy was focused on improving the existing Python 2 based product. You can get a rough idea of the timeline and participation in the early porting effort through the &lt;a href=&quot;https://www.mercurial-scm.org/repo/hg/log/081a77df7bc6/tests/test-check-py3-compat.t?revcount=960&quot;&gt;history of test-check-py3-compat.t&lt;/a&gt;. We see the test being added in &lt;a href=&quot;https://www.mercurial-scm.org/repo/hg/rev/40eb385f798f&quot;&gt;December 2015&lt;/a&gt;, By June 2016, most of the code base was ported to our modern import convention and we were ready to move on to more meaningful porting.&lt;/p&gt;
&lt;p&gt;One of the biggest early hurdles in our porting effort was how to overcome the string literals type mismatch between Python 2 and 3. In Python 2, a &lt;code&gt;''&lt;/code&gt; string literal is a sequence of bytes. In Python 3, a &lt;code&gt;''&lt;/code&gt; string literal is a sequence of Unicode code points. These are fundamentally different types. And in Mercurial's code base, &lt;strong&gt;most of our &lt;em&gt;string&lt;/em&gt; types are binary by design: use of a Unicode based &lt;code&gt;str&lt;/code&gt; for representing data is flat out wrong for our use case&lt;/strong&gt;. We knew that Mercurial would need to eventually switch many string literals from &lt;code&gt;''&lt;/code&gt; to &lt;code&gt;b''&lt;/code&gt; to preserve type compatibility. But doing so would be problematic.&lt;/p&gt;
&lt;p&gt;In the early days of Mercurial's Python 3 port in 2015, Mercurial's project maintainer (Matt Mackall) set a ground rule that the Python 3 port shouldn't overly disrupt others: he wanted the Python 3 port to more or less happen in the background and not require every developer to be aware of Python 3's low-level behavior in order to get work done on the existing Python 2 code base. This may seem like a questionable decision (and I probably disagreed with him to some extent at the time because I was doing Python 3 porting work and the decision constrained this work). But it was the correct decision. Matt knew that it would be years before the Python 3 port was either necessary or resulted in a meaningful return on investment (the value proposition of Python 3 has always been weak to Mercurial because Python 3 doesn't demonstrate a compelling advantage over Python 2 for our use case). What Matt was trying to do was minimize the externalized costs that a Python 3 port would inflict on the project. He correctly recognized that maintaining the existing product and supporting existing users was more important than a long-term bet in its infancy.&lt;/p&gt;
&lt;p&gt;This ground rule meant that a mass insertion of &lt;code&gt;b''&lt;/code&gt; prefixes everywhere was not desirable, as that would require developers to think about whether a type was a &lt;code&gt;bytes&lt;/code&gt; or &lt;code&gt;str&lt;/code&gt;, a distinction they didn't have to worry about on Python 2 because we practically never used the Unicode-based string type in Mercurial.&lt;/p&gt;
&lt;p&gt;In addition, there were some other practical issues with doing a bulk &lt;code&gt;b''&lt;/code&gt; prefix insertion. One was that the added &lt;code&gt;b&lt;/code&gt; characters would cause a lot of lines to grow beyond our length limits and we'd have to reformat code. That would require manual intervention and would significantly slow down porting. And a sub-issue of adding all the &lt;code&gt;b&lt;/code&gt; prefixes and reformatting code is that it would &lt;em&gt;break&lt;/em&gt; annotate/blame more than was tolerable. The latter issue was addressed by teaching Mercurial's annotate/blame feature to &lt;em&gt;skip&lt;/em&gt; revisions. The project now has a convention of annotating commit messages with &lt;code&gt;# skim-blame &amp;lt;reason&amp;gt;&lt;/code&gt; so structural only changes can easily be ignored when performing an annotate/blame.&lt;/p&gt;
&lt;p&gt;A stop-gap solution to the &lt;code&gt;b''&lt;/code&gt; everywhere issue came in &lt;a href=&quot;https://www.mercurial-scm.org/repo/hg/rev/1c22400db72d&quot;&gt;July 2016&lt;/a&gt;, when I introduced a custom Python module importer that rewrote source code as part of &lt;code&gt;import&lt;/code&gt; when running on Python 3. (I have &lt;a href=&quot;https://gregoryszorc.com/blog/2017/03/13/from-__past__-import-bytes_literals/&quot;&gt;previously blogged&lt;/a&gt; about this hack.) What this did was transparently add &lt;code&gt;b''&lt;/code&gt; prefixes to all un-prefixed string literals as well as modify how a few common functions were called so that we wouldn't need to modify source code so things would run natively on Python 3. The source transformer allowed us to have the benefits of progressing in our Python 3 port without having to rewrite tens of thousands of lines of source code. The solution was hacky. But it enabled us to make significant progress on the Python 3 port without externalizing a lot of cost onto others.&lt;/p&gt;
&lt;p&gt;I thought the source transformer would be relatively short-lived and would be removed shortly after the project inevitably decided to go all in on Python 3. To my surprise, others built additional transforms over the years and the source transformer persisted all the way until &lt;a href=&quot;https://www.mercurial-scm.org/repo/hg/rev/d783f945a701&quot;&gt;October 2019&lt;/a&gt;, when I removed it just before the first non-alpha Python 3 compatible version of Mercurial was released.&lt;/p&gt;
&lt;p&gt;A common problem Mercurial faced with making the code base dual Python 2/3 native was dealing with standard library differences. Most of the problems stemmed from changes between Python 2.7 and 3.5+. But there are changes within the versions of Python 3 that we had to wallpaper over as well. In &lt;a href=&quot;https://www.mercurial-scm.org/repo/hg/rev/6041fb8f2da8&quot;&gt;April 2016&lt;/a&gt;, the &lt;code&gt;mercurial.pycompat&lt;/code&gt; module was introduced to export aliases or wrappers around standard library functionality to abstract the differences between Python versions. This file &lt;a href=&quot;https://www.mercurial-scm.org/repo/hg/log/66af68d4c751/mercurial/pycompat.py?revcount=240&quot;&gt;grew over time&lt;/a&gt; and &lt;a href=&quot;https://www.mercurial-scm.org/repo/hg/file/66af68d4c751/mercurial/pycompat.py&quot;&gt;eventually became&lt;/a&gt; Mercurial's version of &lt;a href=&quot;https://six.readthedocs.io/&quot;&gt;six&lt;/a&gt;. To be honest, I'm not sure if we should have used &lt;code&gt;six&lt;/code&gt; from the beginning. &lt;code&gt;six&lt;/code&gt; probably would have saved some work. But we had to eventually write a lot of shims for converting between &lt;code&gt;str&lt;/code&gt; and &lt;code&gt;bytes&lt;/code&gt; and would have needed to invent a &lt;code&gt;pycompat&lt;/code&gt; layer in some form anyway. So I'm not sure &lt;code&gt;six&lt;/code&gt; would have saved enough effort to justify the baggage of integrating a 3rd party package into Mercurial. (When Mercurial accepts a 3rd party package, downstream packagers like Debian get all hot and bothered and end up making questionable patches to our source code. So we prefer to minimize the surface area for problems by minimizing dependencies on 3rd party packages.)&lt;/p&gt;
&lt;p&gt;Once we had a source transforming module importer and the &lt;code&gt;pycompat&lt;/code&gt; compatibility shim, we started to focus in earnest on making core functionality actually work on Python 3. We established a convention of annotating changesets needed for Python 3 with &lt;code&gt;py3&lt;/code&gt;, so a &lt;a href=&quot;https://www.mercurial-scm.org/repo/hg/log?rev=desc(py3)&amp;amp;revcount=4000&quot;&gt;commit message search&lt;/a&gt; yields a lot of the history. (But it isn't a full history since not every Python 3 oriented change used this convention). We see from that history that after the source importer landed, a lot of porting effort was spent on things very early in the &lt;code&gt;hg&lt;/code&gt; process lifetime. This included handling environment variables, loading config files, and argument parsing. We introduced a &lt;a href=&quot;https://www.mercurial-scm.org/repo/hg/log/@/tests/test-check-py3-commands.t&quot;&gt;test-check-py3-commands.t&lt;/a&gt; test to track the progress of &lt;code&gt;hg&lt;/code&gt; commands working in Python 3. The very early history of that file shows the various error messages changing, as underlying early process functionality was slowly ported to work on Python 3. By &lt;a href=&quot;https://www.mercurial-scm.org/repo/hg/rev/2d555d753f0e&quot;&gt;December 2016&lt;/a&gt;, we had &lt;code&gt;hg version&lt;/code&gt; working on Python 3!&lt;/p&gt;
&lt;p&gt;With basic &lt;code&gt;hg&lt;/code&gt; command dispatch ported to Python 3 at the end of 2016, 2017 represented an inflection point in the Python 3 porting effort. With the early process functionality working, different people could pick up different commands and code paths and start making code work with Python 3. By &lt;a href=&quot;https://www.mercurial-scm.org/repo/hg/rev/52ee1b5ac277&quot;&gt;March 2017&lt;/a&gt;, basic repository opening and &lt;code&gt;hg files&lt;/code&gt; worked. Shortly thereafter, &lt;a href=&quot;https://www.mercurial-scm.org/repo/hg/rev/ed23f929af38&quot;&gt;hg init started working as well&lt;/a&gt;. And &lt;a href=&quot;https://www.mercurial-scm.org/repo/hg/rev/935a1b1117c7&quot;&gt;hg status&lt;/a&gt; and &lt;a href=&quot;https://www.mercurial-scm.org/repo/hg/rev/aea8ec3f7dd1&quot;&gt;hg commit&lt;/a&gt; did as well.&lt;/p&gt;
&lt;p&gt;Within a few months, enough of Mercurial's functionality was working with Python 3 that we started to &lt;a href=&quot;https://www.mercurial-scm.org/repo/hg/rev/7a877e569ed6&quot;&gt;track which tests passed on Python 3&lt;/a&gt;. The &lt;a href=&quot;https://www.mercurial-scm.org/repo/hg/log/@/contrib/python3-whitelist?revcount=480&quot;&gt;evolution of this file&lt;/a&gt; shows a reasonable history of the porting velocity.&lt;/p&gt;
&lt;p&gt;In &lt;a href=&quot;https://www.mercurial-scm.org/repo/hg/rev/bd8875b6473c&quot;&gt;November 2017&lt;/a&gt;, I landed a test harness feature to report exceptions seen during test runs. I later &lt;a href=&quot;https://www.mercurial-scm.org/repo/hg/rev/8de90e006c78&quot;&gt;refined the output&lt;/a&gt; so the most frequent failures were reported more prominently. This feature greatly enabled our ability to target the most common exceptions, allowing us to write patches to fix the most prevalent issues on Python 3 and uncover previously unknown failures.&lt;/p&gt;
&lt;p&gt;By the end of 2017, we had most of the structural pieces in place to complete the port. Essentially all that was required at that point was time and labor. We didn't have a formal mechanism in place to target porting efforts. Instead, people would pick up a component or test that they wanted to hack on and then make incremental changes towards making that work. All the while, we didn't have a strict policy on not regressing Python 3 and regressions in Python 3 porting progress were semi-frequent. Although we did tend to correct regressions quickly. And over time, developers saw a flurry of Python 3 patches and slowly grew awareness of how to accommodate Python 3, and the number of Python 3 regressions became less frequent.&lt;/p&gt;
&lt;p&gt;As useful as the source-transforming module importer was, it incurred some additional burden for the porting effort. The source transformer effectively converted all un-prefixed string literals (&lt;code&gt;''&lt;/code&gt;) to bytes literals (&lt;code&gt;b''&lt;/code&gt;) to preserve string type behavior with Python 2. But various aspects of Python 3 didn't like the existence of &lt;code&gt;bytes&lt;/code&gt;. Various standard library functionality now wanted unicode &lt;code&gt;str&lt;/code&gt; and didn't accept &lt;code&gt;bytes&lt;/code&gt;, even though the Python 2 implementation used the equivalent of &lt;code&gt;bytes&lt;/code&gt;. So our &lt;code&gt;pycompat&lt;/code&gt; layer grew pretty large to accommodate calling into various standard library functionality. Another side-effect which we didn't initially anticipate was the &lt;code&gt;**kwargs&lt;/code&gt; calling convention. Python allows you to use &lt;code&gt;**&lt;/code&gt; with a dict with string keys to turn those keys into named arguments in a function call. But Python 3 requires these &lt;code&gt;dict&lt;/code&gt; keys to be &lt;code&gt;str&lt;/code&gt; and outright rejects &lt;code&gt;bytes&lt;/code&gt; keys, even if the &lt;code&gt;bytes&lt;/code&gt; instance is ASCII safe and has the same underlying byte representation of the string data as the &lt;code&gt;str&lt;/code&gt; instance would. So we had to invent support functions that would convert &lt;code&gt;dict&lt;/code&gt; keys from &lt;code&gt;bytes&lt;/code&gt; to &lt;code&gt;str&lt;/code&gt; for use with &lt;code&gt;**kwargs&lt;/code&gt; and another to convert a &lt;code&gt;**kwargs&lt;/code&gt; dict from &lt;code&gt;str&lt;/code&gt; keys to &lt;code&gt;bytes&lt;/code&gt; keys so we could use &lt;code&gt;''&lt;/code&gt; syntax to access keys in our source code! Also on the string type front, we had to sprinkle the codebase with raw string literals (&lt;code&gt;r''&lt;/code&gt;) to force the use of &lt;code&gt;str&lt;/code&gt; irregardless of which Python version you were running on (our source transformer only changed unprefixed string literals, so existing &lt;code&gt;r''&lt;/code&gt; strings would be preserved as &lt;code&gt;str&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;By mid 2019, the number of test failures in Python 3 had been whittled down to a reasonable, less daunting number. It felt like victory was in grasp and inevitable. But a few significant issues lingered.&lt;/p&gt;
&lt;p&gt;One remaining question was around addressing differences between Python 3 versions. At the time, Python 3.5, 3.6, and 3.7 were released and 3.8 was scheduled for release by the end of the year. We had a surprising number of issues with differences in Python 3 versions. Many of us were running Python 3.7, so it had the fewest failures. We had to spend extra effort to get Python 3.5 and 3.6 working as well as 3.7. Same for 3.8.&lt;/p&gt;
&lt;p&gt;Another task we deferred until the second half of 2019 was standing up robust CI for Python 3. We had some coverage, but it was minimal. Wanting a distraction from PyOxidizer for a bit and wanting to overhaul Mercurial's CI system (which is officially built on Buildbot), I cobbled together a &lt;em&gt;serverless&lt;/em&gt; CI system built on top of AWS DynamoDB and S3 for storage, Lambda functions and CloudWatch events for all business logic, and EC2 spot instances for job execution. This CI system executed Python 3.5, 3.6, 3.7, and 3.8 variants of our test harness on Linux and Python 3.7 on Windows. This gave developers insight into version-specific failures. More importantly, it also gave insight into Windows failures, which was previously not well tested. It was discovered that Python 3 on Windows was lagging significantly behind POSIX.&lt;/p&gt;
&lt;p&gt;By the time of the Mercurial developer meetup in October 2019, nearly all tests were passing on POSIX platforms and we were confident that we could declare Python 3 support as at least beta quality for the Mercurial 5.2 release, planned for early November.&lt;/p&gt;
&lt;p&gt;One of our blockers for ripping off the alpha label on Python 3 support was removing our source-transforming module importer. It had performance implications and it wasn't something we wanted to ship because it felt too hacky. A blocker for this was we wanted to automatically format our source tree with &lt;a href=&quot;https://black.readthedocs.io/en/stable/&quot;&gt;black&lt;/a&gt; because if we removed the source transformer, we'd have to rewrite a lot of source code to apply changes the transformer was performing, which would necessitate wrapping a lot of lines, which would involve a lot of manual effort. We wanted to &lt;em&gt;blacken&lt;/em&gt; our code base first so that mass rewriting source code wouldn't involve a lot of tedious reformatting since &lt;code&gt;black&lt;/code&gt; would handle that for us automatically. And rewriting the source tree with &lt;code&gt;black&lt;/code&gt; was blocked on a specific feature landing in &lt;code&gt;black&lt;/code&gt;! (We did not agree with &lt;code&gt;black&lt;/code&gt;'s behavior of unwrapping comma-delimited lists of items if they could fit on a single line. So one of our core contributors wrote a patch to &lt;code&gt;black&lt;/code&gt; that changed its behavior so a trailing &lt;code&gt;,&lt;/code&gt; in a list of items will force items to be formatted on multiple lines. I personally find the multiple line formatting much easier to read. And the behavior is arguably better for code review and &lt;em&gt;annotation&lt;/em&gt;, which is line based.) Once this feature landed in &lt;code&gt;black&lt;/code&gt;, we reformatted our source tree and started ripping out the source transformations, starting by inserting &lt;code&gt;b''&lt;/code&gt; literals everywhere. By late October, the source transformer was no more and we were ready to release beta quality support for Python 3 (at least on UNIX-like platforms).&lt;/p&gt;
&lt;p&gt;Having described a mostly factual overview of Mercurial's port to Python 3, it is now time to shift gears to the speculative and opinionated parts of this post. &lt;strong&gt;I want to underscore that the opinions reflected here are my own and do not reflect the overall Mercurial Project or even a consensus within it.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;The Future of Python 3 and Mercurial&lt;/h2&gt;
&lt;p&gt;Mercurial's port to Python 3 is still ongoing. While we've shipped Python 3 support and the test harness is clean on Python 3, I view shipping as only a milestone - arguably &lt;em&gt;the&lt;/em&gt; most important one - in a longer journey. There's still a lot of work to do.&lt;/p&gt;
&lt;p&gt;It is now 2020 and Python 2 support is now officially dead from the perspective of the Python language maintainers. Linux distributions are starting to rip out Python 2. Packages are dropping Python 2 support in new versions. The world is moving to Python 3 only. But &lt;strong&gt;Mercurial still officially supports Python 2&lt;/strong&gt;. And it is still yet to be determined how long we will retain support for Python 2 in the code base. We've only had one release supporting Python 3. Our users still need to port their extensions (implemented in Python). Our users still need to start widely using Mercurial with Python 3. Even our own developers need to switch to Python 3 (old habits are hard to break).&lt;/p&gt;
&lt;p&gt;I anticipate a long tail of random bugs in Mercurial on Python 3. While the tests may pass, our code coverage is not 100%. And even if it were, Python is a dynamic language and there are tons of invariants that aren't caught at compile time and can only be discovered at run time. &lt;strong&gt;These invariants cannot all be detected by tests, no matter how good your test coverage is.&lt;/strong&gt; This is a &lt;em&gt;feature&lt;/em&gt;/&lt;em&gt;limitation&lt;/em&gt; of dynamic languages. Our users will likely be finding a long tail of miscellaneous bugs on Python 3 for &lt;em&gt;years&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;At present, our code base is littered with tons of random hacks to bridge the gap between Python 2 and 3. Once Python 2 support is dropped, we'll need to remove these hacks and make the source tree Python 3 native, with minimal shims to wallpaper over differences in Python 3 versions. &lt;strong&gt;Removing this Python version bridge code will likely require hundreds of commits and will be a non-trivial effort.&lt;/strong&gt; It's likely to be deemed a low priority (it is glorified busy work after all), and code for the express purpose of supporting Python 2 will likely linger for years.&lt;/p&gt;
&lt;p&gt;We are also still shoring up our packaging and distribution story on Python 3. This is easier on some platforms than others. I created &lt;a href=&quot;https://github.com/indygreg/PyOxidizer&quot;&gt;PyOxidizer&lt;/a&gt; partially because of the poor experience I had with Python application packaging and distribution through the Mercurial Project. The Mercurial Project has already signed off on using PyOxidizer for distributing Mercurial in the future. So look for an &lt;em&gt;oxidized&lt;/em&gt; Mercurial distribution in the near future! (You could argue PyOxidizer is an epic yak shave to better support Mercurial. But that's for another post.)&lt;/p&gt;
&lt;p&gt;Then there's Windows support. A Python 3 powered Mercurial on Windows still has a handful of known issues. It may require a few more releases before we consider Python 3 on Windows to be stable.&lt;/p&gt;
&lt;p&gt;Because we're still on a code base that must support Python 2, our adoption of Python 3 features is very limited. The only Python 3 feature that Mercurial developers seem to almost universally get excited about is type annotations. We already have some people playing around with &lt;code&gt;pytype&lt;/code&gt; using comment-based annotations and &lt;code&gt;pytype&lt;/code&gt; has already caught a few bugs. We're eager to go all in on type annotations and uncover lots of dynamic typing bugs and poorly implemented APIs. Beyond type annotations, I can't name any feature that people are screaming to adopt and which makes a lot of sense for Mercurial. There's a long tail of minor features I'm sure will get utilized. But none of the marquee features that define major language releases seem that interesting to us. Time will tell.&lt;/p&gt;
&lt;h2&gt;Commentary on Python 3&lt;/h2&gt;
&lt;p&gt;Having described Mercurial's ongoing journey to Python 3, I now want to focus more on Python itself. Again, the opinions here are my own and don't reflect those of the Mercurial Project.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Succinctly, my experience porting Mercurial and other projects to Python 3 has significantly soured my perceptions of Python. As much as I have historically loved Python - from the language to the welcoming community - I am still struggling to understand how Python could manage to inflict so much hardship on the community by choosing the transition plan that they did.&lt;/strong&gt; I believe Python's choices represent a terrific example of what not to do when managing a large project or ecosystem. Maintainers of other largely-deployed systems would benefit from taking the time to understand and reflect on Python's missteps.&lt;/p&gt;
&lt;p&gt;Python 3.0 was released on December 3, 2008. And it took the better part of a decade for the community to embrace it. &lt;strong&gt;This should be universally recognized as a failure.&lt;/strong&gt; While hindsight is 20/20, many of the issues with Python 3 were obvious at the time and could have been mitigated had the language maintainers been more accommodating - and dare I say empathetic - to its users.&lt;/p&gt;
&lt;p&gt;Initially, Python 3 had a rather cavalier attitude towards backwards and forwards compatibility. In the early years of Python 3, the attitude of Python's maintainers was &lt;em&gt;Python 3 is a new, better language: you should target it explicitly&lt;/em&gt;. There were some tools and methods to ease the transition. But nothing super polished, especially in the early years. Adoption of Python 3 in the overall community was slow. Python developers in the wild justifiably complained that the value proposition of Python 3 was too weak to justify porting effort. Not helping was that the early advice for targeting Python 3 was to rewrite the source code to become Python 3 native. This is in contrast with using the same source to run on both Python 2 and 3. For library and application maintainers, this potentially meant maintaining separate versions of your code or forcing end-users to make a giant leap, which would realistically orphan users on an old version, fragmenting your user base. Neither of those were great alternatives, so you can understand why many projects didn't bite.&lt;/p&gt;
&lt;p&gt;For many projects of non-trivial size, flag day transitions from Python 2 to 3 were simply not viable: the pathway to Python 3 was to make code dual Python 2/3 compatible and gradually switch over the runtime to Python 3. But initial versions of Python 3 made this effectively impossible! Let me give a few specific examples.&lt;/p&gt;
&lt;p&gt;In Python 2, a string literal &lt;code&gt;''&lt;/code&gt; is effectively an array of bytes. In Python 3, it is a series of Unicode code points - a fundamentally different type! In Python 2, you could write &lt;code&gt;b''&lt;/code&gt; to be explicit that a string literal was bytes or you could write &lt;code&gt;u''&lt;/code&gt; to indicate a Unicode literal, mimicking Python 3's behavior. In Python 3, you could write &lt;code&gt;b''&lt;/code&gt; to create a &lt;code&gt;bytes&lt;/code&gt; instance. But for whatever reason, Python 3 initially removed the &lt;code&gt;u''&lt;/code&gt; syntax, meaning there wasn't as easy way to explicitly denote the type of each string literal so that it was consistent between Python 2 and 3! Python 3.3 (released September 2012) restored &lt;code&gt;u''&lt;/code&gt; support, making it more viable to write Python source code that worked on both Python 2 and 3. &lt;strong&gt;For nearly 4 years, Python 3 took away the consistent syntax for denoting bytes/Unicode string literals.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Another feature was &lt;code&gt;%&lt;/code&gt; formatting of strings. Python 2 allowed use of the &lt;code&gt;%&lt;/code&gt; formatting operator on both its string types. But Python 3 initially removed the implementation of &lt;code&gt;%&lt;/code&gt; from &lt;code&gt;bytes&lt;/code&gt;. Why, I have no clue. It is perfectly reasonable to splice byte sequences into a buffer via use of a formatting string. But the Python language maintainers insisted otherwise. And it wasn't until the community complained about its absence loudly enough that this feature was &lt;a href=&quot;https://docs.python.org/3/whatsnew/3.5.html#whatsnew-pep-461&quot;&gt;restored in Python 3.5&lt;/a&gt;, which was released in September 2015. Fun fact: the lack of this feature was once considered a blocker for Mercurial moving to Python 3 because Mercurial uses &lt;code&gt;bytes&lt;/code&gt; almost universally, which meant that nearly every use of &lt;code&gt;%&lt;/code&gt; would have to be changed to something else. And to this day, Python 3's &lt;code&gt;bytes&lt;/code&gt; still doesn't have a &lt;code&gt;format()&lt;/code&gt; method, so the alternative was effectively string concatenation, which is a massive step backwards from the expressiveness of &lt;code&gt;%&lt;/code&gt; formatting.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The initial approach of Python 3 mirrors a folly that many developers and projects make: attempting a rewrite instead of performing incremental evolution.&lt;/strong&gt; For established projects, large scale rewrites often go poorly. And Python 3 is no exception. Yes, from a code level, CPython (and likely other Python implementations) were incremental changes over Python 2 using the same code base. But from a language and standard library level, the differences in Python 3 were significant enough that I - and even Python's core maintainers - considered it a new language, and therefore a rewrite. When your random project attempts a rewrite and fails, the blast radius of that is often contained to that project. Maybe you don't publish a new release as soon as you otherwise would. &lt;strong&gt;But when you are powering an ecosystem, the ripple effects from a failed rewrite percolate throughout that ecosystem and last for years and have many second order effects. We see this with Python 3, where poor choices made in the late 2000s are inflicting significant hardship still in 2020.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;From the initial restrained adoption of Python 3, it is obvious that the Python ecosystem overwhelmingly rejected the initial boil the oceans approach of Python 3. Python's maintainers eventually got the message and started restoring features like &lt;code&gt;u''&lt;/code&gt; and &lt;code&gt;bytes&lt;/code&gt; &lt;code&gt;%&lt;/code&gt; formatting back into the language to placate the community. All the while Python 3 had been accumulating new features and the cumulative sum of those features was compelling enough to win over users.&lt;/p&gt;
&lt;p&gt;For many projects (including Mercurial), Python 3.4/3.5 was the first viable porting target for Python 3. Python 3.5 was released in September 2015, almost 7 years after Python 3.0 was released in December 2008. &lt;strong&gt;Seven. Years.&lt;/strong&gt; An ecosystem that falters for that long is generally not healthy. What may have saved Python from total collapse here is that Python 2 was still going strong and people were generally happy with it. I really do think Python dodged a bullet here, because there was a massive window where the language could have hemorrhaged a critical amount of its user base and been relegated to an afterthought. One could draw an analogy to Perl, which lost out to PHP, Python, and Ruby, and whose fall from grace aligned with a lengthy transition from Perl 5 to 6.&lt;/p&gt;
&lt;p&gt;If you look back at the early history of Python 3, &lt;strong&gt;I think you are forced to conclude that Python effectively kneecapped itself for 5-7 years through questionable implementation choices that prevented users from incurring incremental transitions between the major language versions. 2008 to 2013-2015 should be known as the &lt;em&gt;lost years of Python&lt;/em&gt; because so much opportunity and energy was squandered.&lt;/strong&gt; Yes, Python is still healthy today and Python 3 is (finally) being adopted at scale. But had earlier versions of Python 3 been more &lt;em&gt;empathetic&lt;/em&gt; towards Python 2 users porting to it, Python and Python 3 in 2020 would be even stronger than it is. The community was artificially hindered for years. And we won't know until 2023-2025 what things could have looked like in 2020 had the Python core language team spent more time paving a smoother road between the major language versions.&lt;/p&gt;
&lt;p&gt;To be clear, I do think Python 3 is generally a better language than Python 2. It has fewer warts, more compelling features, and better performance (except for startup time, which is still slower than Python 2). I am ecstatic the community is finally rallying around Python 3! For my Python coding, it has reached the point where I curse under my breath when I need to support Python 2 or even older versions of Python 3, like 3.5 or 3.6: I just wish the world would move on and adopt the future already!&lt;/p&gt;
&lt;p&gt;But I would be remiss if I failed to mention some of my gripes with Python 3 beyond the transition shenanigans.&lt;/p&gt;
&lt;p&gt;Perhaps my least favorite &lt;em&gt;feature&lt;/em&gt; of Python 3 is its insistence that the world is Unicode. In Python 2, the default string type was backed by bytes. In Python 3, the default string type is backed by Unicode code points. As part of that transition, large parts of the standard library now operate in the Unicode space instead of the domain of bytes. I understand why Python does this: they want &lt;em&gt;strings&lt;/em&gt; to be Unicode and don't want users to have to spend that much energy thinking about when to use &lt;code&gt;str&lt;/code&gt; versus &lt;code&gt;bytes&lt;/code&gt;. This approach is admirable and somewhat defensible because it takes a stand on a solution that is arguably &lt;em&gt;good enough&lt;/em&gt; for most users. However, &lt;strong&gt;the approach of assuming the world is Unicode is flat out wrong and has significant implications for systems level applications&lt;/strong&gt; (like version control tools).&lt;/p&gt;
&lt;p&gt;There are a myriad of places in Python's standard library where Python insists on using the Unicode-backed &lt;code&gt;str&lt;/code&gt; type and rejects &lt;code&gt;bytes&lt;/code&gt;. For example, various networking modules refuse to accept &lt;code&gt;bytes&lt;/code&gt; for hostnames or URLs. HTTP libraries won't accept &lt;code&gt;bytes&lt;/code&gt; for HTTP header names or values. Functions that are proxies to POSIX-defined functions won't accept &lt;code&gt;bytes&lt;/code&gt; even though the POSIX function it calls into is using &lt;code&gt;char *&lt;/code&gt; and isn't Unicode aware. Then there's filename handling, where Python assumes the existence of a global encoding for filenames and uses this encoding to convert between &lt;code&gt;str&lt;/code&gt; and &lt;code&gt;bytes&lt;/code&gt;. And it does this despite POSIX filesystem paths being a bag of bytes where the only rules are that &lt;code&gt;\0&lt;/code&gt; terminates the filename and &lt;code&gt;/&lt;/code&gt; is special.&lt;/p&gt;
&lt;p&gt;In cases like Python refusing to accept &lt;code&gt;bytes&lt;/code&gt; for things like HTTP header names (which will just be spit out over the wire as bytes), Python's pendulum has swung too far towards Unicode only. In my opinion, Python needs to be more accommodating and allow &lt;code&gt;bytes&lt;/code&gt; when it makes sense. I hope the pendulum knocks some sense into people when it swings back towards a more reasonable solution that better acknowledges the realities of the world we live in.&lt;/p&gt;
&lt;p&gt;For areas like filename handling, the world is more complicated. Python is effectively an abstraction layer over the operating system APIs exposing this functionality. And there is often an impedance mismatch between operating systems. For example, POSIX (Linux) tends to use &lt;code&gt;char *&lt;/code&gt; for everything and doesn't care about encoding and Windows tends to use 16 bit character types where the encoding is... a can of worms.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The reality here is that it is impossible to abstract over differences between operating system behavior without compromises that can result in data loss, outright wrong behavior, or loss of functionality. But Python 3 attempts to do it anyway, making Python 3 unsuitable (or at least highly undesirable) for certain systems level applications that rely on it&lt;/strong&gt; (like a version control tool).&lt;/p&gt;
&lt;p&gt;In fairness to Python, it isn't the only programming language that gets this wrong. The only language I've seen &lt;em&gt;properly&lt;/em&gt; implement higher-order abstractions on top of operating system facilities is Rust, whose approach can be generalized as &lt;em&gt;use Python 3's solution of normalizing to Unicode/UTF-8 by default&lt;/em&gt;, but expose &lt;em&gt;escape hatches&lt;/em&gt; which allow access to the raw underlying types and APIs used by the operating system for the advanced consumers who require it. For example, Rust's &lt;code&gt;Path&lt;/code&gt; type which represents a filesystem path &lt;a href=&quot;https://doc.rust-lang.org/std/path/struct.Path.html#method.as_os_str&quot;&gt;allows access&lt;/a&gt; to the raw &lt;a href=&quot;https://doc.rust-lang.org/std/ffi/struct.OsStr.html&quot;&gt;OsStr&lt;/a&gt; value used by the operating system, not a normalization of it to bytes or Unicode, which may be lossy. This allows consumers to e.g. create and retrieve OS-native filesystem paths without data loss. This functionality is critical in some domains. Python 3's awareness/insistence that the world is Unicode (which it isn't universally) reduces Python's applicability in these domains.&lt;/p&gt;
&lt;p&gt;Speaking of Rust, at the Mercurial developer meetup in October 2019, we were discussing the use of Rust in Mercurial and one of the core maintainers blurted out something along the lines of &lt;em&gt;if Rust were at its current state 5 years ago, Mercurial would have likely ported from Python 2 to Rust instead of Python 3&lt;/em&gt;. As crazy as it initially sounded, I think I agree with that assessment. With the benefit of hindsight, having been a key player in the Python 3 porting effort, seeing all the complications and headaches Python 3 is introducing, and having learned Rust and witnessed its benefits for performance, control, and correctness firsthand, porting to Rust would likely have been the correct move for the project at that point in time. 2020 is not 2014, however, and I'm not sure if I would opt for a rewrite in Rust today. (Most rewrites are follies after all.) But I know one thing: I certainly wouldn't implement a new version control tool in Python 3 and I would probably choose Rust as an implementation language for most new projects in the systems level space or with an expected shelf life of 10+ years. (I really should blog about how awesome Rust is.)&lt;/p&gt;
&lt;p&gt;Back to the topic of Python itself, &lt;strong&gt;I'm really soured on Python at this point in time. The effort required to port to Python 3 was staggering. For Mercurial, Python 3 introduces a ton of problems and doesn't really solve many. We effectively sludged through mud for several years only to wind up in a state that feels strictly worse than where we started. I'm sure it will be strictly better in a few years. But at that point, we're talking about a 5+ year transition. To call the Python 3 transition disruptive and distracting for the project would be an understatement. As a project maintainer, it's natural to ask what we could have accomplished if we weren't forced to carry out this sideshow.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I can't shake the feeling that a lot of the pain afflicted by the Python 3 transition could have been avoided had Python's language leadership made a different set of decisions and more highly prioritized the transition experience. (Like not initially removing features like &lt;code&gt;u''&lt;/code&gt; and &lt;code&gt;bytes %&lt;/code&gt; and not introducing gratuitous backwards compatibility breaks, like with &lt;code&gt;items()/iteritems()&lt;/code&gt;. I would have also liked to see a feature like &lt;code&gt;from __future__&lt;/code&gt; - maybe &lt;code&gt;from __past__&lt;/code&gt; - that would make it easier for Python 3 code to target semantics in earlier versions in order to provide a more turnkey on-ramp onto new versions.) I simultaneously see Python 3 losing its position as a justifiable tool in some domains (like systems level tooling) due to ongoing design decisions and poor implementation (like startup overhead problems). (In contrast, I see Rust excelling where Python is faltering and find Rust code surprisingly expressive to write and maintain given how low-level it is and therefore feel that Rust is a compelling alternative to Python in a surprisingly large number of domains.)&lt;/p&gt;
&lt;p&gt;Look, I know it is easy for me to armchair quarterback and critique with the benefit of hindsight/ignorance. I'm sure there is a lot of nuance here. I'm sure there was disagreement within the Python community over a lot of these issues. Maintaining a large and successful programming language and community like Python's is hard and you aren't going to please all the people all the time. And speaking as a maintainer, I have mad respect for the people leading such a large community. But niceties aside, everyone knows the Python 3 transition was rough and could have gone better. It should not have taken 11 years to get to where we are today.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I'd like to encourage the Python Project to conduct a thorough postmortem on the transition to Python 3.&lt;/strong&gt; Identify what went well, what could have gone better, and what should be done next time such a large language change is wanted. Speaking as a Python user, a maintainer of a Python project, and as someone in industry who is now skeptical about use of Python at work due to risks of potentially company crippling high-effort migrations in the future, a postmortem would help restore my confidence that Python's maintainers learned from the various missteps on the road to Python 3 and these potentially ecosystem crippling mistakes won't be made again.&lt;/p&gt;
&lt;p&gt;Python had a wildly successful past few decades. And it can continue to thrive for several more. But the Python 3 migration was painful for all involved. And as much as we need to move on and leave Python 2 behind us, there are some important lessons to be learned. I hope the Python community takes the opportunity to reflect and am confident it will grow stronger by taking the time to do so.&lt;/p&gt;
</description>
<pubDate>Mon, 13 Jan 2020 17:52:28 +0000</pubDate>
<dc:creator>ngoldbaum</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://gregoryszorc.com/blog/2020/01/13/mercurial%27s-journey-to-and-reflections-on-python-3/</dc:identifier>
</item>
<item>
<title>1195725856 and other mysterious numbers</title>
<link>https://chrisdown.name/2020/01/13/1195725856-and-friends-the-origins-of-mysterious-numbers.html</link>
<guid isPermaLink="true" >https://chrisdown.name/2020/01/13/1195725856-and-friends-the-origins-of-mysterious-numbers.html</guid>
<description>&lt;p&gt;Last week was the final week for this half’s performance review at Facebook, where we write summaries of work and impact we and our peers had over the last half year. Naturally, that can only mean one thing: the entire company trends towards peak levels of procrastination, doing literally anything and everything to avoid the unspeakable horror of having to write a few paragraphs of text. ;-)&lt;/p&gt;
&lt;p&gt;My personal distraction of choice a few days before the deadline was looking at lines like this, spamming from some hosts serving NFS traffic:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;RPC: fragment too large: 1195725856
RPC: fragment too large: 1212498244
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Let’s take a look at the kernel code responsible for generating this warning – grepping for “fragment too large” show it comes from &lt;a href=&quot;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/net/sunrpc/svcsock.c?h=v5.4#n943&quot;&gt;&lt;code&gt;svc_tcp_recv_record&lt;/code&gt; in net/sunrpc/svcsock.c&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;svc_sock_reclen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;svsk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;svsk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sk_datalen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;serv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sv_max_mesg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;net_notice_ratelimited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;RPC: fragment too large: %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;svc_sock_reclen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;svsk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err_delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;So we’re erroring out because we got passed some message which is beyond &lt;code&gt;sv_max_mesg&lt;/code&gt;, cool. But where does this come from? Looking at &lt;code&gt;svc_sock_reclen&lt;/code&gt; shows the following:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u32&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;svc_sock_reclen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;svc_sock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;svsk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ntohl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;svsk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sk_reclen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RPC_FRAGMENT_SIZE_MASK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;ntohl&lt;/code&gt; converts a uint from network byte ordering to the host’s byte ordering. The bitwise &lt;code&gt;AND&lt;/code&gt; with &lt;code&gt;RPC_FRAGMENT_SIZE_MASK&lt;/code&gt; results in only some of the data being retained, and looking at the definition show us how many bits that is:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#define RPC_LAST_STREAM_FRAGMENT (1U &amp;lt;&amp;lt; 31)&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define RPC_FRAGMENT_SIZE_MASK   (~RPC_LAST_STREAM_FRAGMENT)&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Ok, so we will only keep the first 4 bytes and zero out the rest, since &lt;code&gt;~&lt;/code&gt; is bitwise &lt;code&gt;NOT&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;That means these numbers come from the first four bytes of the fragment. This particularly got me thinking that the fragment may not be protocol-confirming in the first place, since it’s not like we got very far in processing at all, not even past the first four bytes. So what &lt;em&gt;are&lt;/em&gt; these first four bytes, then? Looking at the numbers in hex shows something interesting:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;python&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1195725856&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;'0x47455420'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1212498244&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;'0x48454144'&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;These are all really tightly clustered, generally from 0x40 to 0x50, which implies there might actually be some semantic meaning per-byte. And since these are &lt;code&gt;char&lt;/code&gt;-sized, here’s a guess about what might be encoded in them…&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x47\x45\x54\x20&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;'GET '&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x48\x45\x41\x44&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;'HEAD'&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Oh dear. Somebody is sending HTTP requests to NFS RPC, but at least we are outright rejecting the fragments instead of actually allocating/dirtying a gigabyte of memory.&lt;/p&gt;
&lt;p&gt;Next up was finding out who’s actually sending these requests. &lt;code&gt;rpcinfo -p&lt;/code&gt; shows NFS is listening on the default port, 2049, so we can set up a trap with tcpdump like so:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;tcpdump -i any -w trap.pcap dst port 2049
# ...wait for logs to appear again, then ^C...
tcpdump -qX -r trap.pcap | less +/HEAD
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;From here, it was pretty easy to catch the origin of these requests by tracing back to the origin host and service using the captured pcap data. After that one can coordinate with the team responsible to work out what’s actually going on here, and avoid these errant packets being sent out in the first place. As a bonus, you also get to learn more about parts of infrastructure you might otherwise not interact with, which is always cool. :-)&lt;/p&gt;
&lt;p&gt;Funnily enough, if you Google for these numbers you can find tons of threads with people encountering them in the wild. Maybe we should start printing ASCII in future in some of the error paths hit when all character values are between 0x0 and 0x7F, I’m sure it would help a lot of people realise what’s going on much more quickly. Maybe I’ll send a patch upstream to do that in &lt;code&gt;svc_tcp_recv_record&lt;/code&gt; and a few other places in the kernel that directly parse the first few data bytes from packets as an integer, let’s see.&lt;/p&gt;
&lt;p&gt;Here’s a trivial script that can generate a bunch of other integers for HTTP that might be of interest:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;ch&quot;&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;struct&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;interpret_as&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;nr_bytes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;calcsize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;verb_fmt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;{:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%(b)d&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%(b)d&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;}&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nr_bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;padded_verb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verb_fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;verb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ascii&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;{},{},{},{}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;verb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nr_bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unpack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;padded_verb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unpack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;padded_verb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;verb,bytes,little-endian,big-endian&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verb&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;GET&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;HEAD&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;POST&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;PUT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;DELETE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;OPTIONS&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
             &lt;span class=&quot;s2&quot;&gt;&quot;TRACE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;PATCH&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Since none of these use the high bit, signed/unsigned&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# results are the same, so only need to check one&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;verb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;verb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Known: verb + &quot; &quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;interpret_as&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Q&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# u64&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;interpret_as&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;I&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# u32&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;interpret_as&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;H&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# u16&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And the results:&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;verb&lt;/th&gt;
&lt;th&gt;bytes&lt;/th&gt;
&lt;th&gt;little-endian&lt;/th&gt;
&lt;th&gt;big-endian&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;542393671&lt;/td&gt;
&lt;td&gt;1195725856&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;17735&lt;/td&gt;
&lt;td&gt;18245&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;HEAD&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;1145128264&lt;/td&gt;
&lt;td&gt;1212498244&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;HEAD&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;17736&lt;/td&gt;
&lt;td&gt;18501&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;POST&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;1414745936&lt;/td&gt;
&lt;td&gt;1347375956&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;POST&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;20304&lt;/td&gt;
&lt;td&gt;20559&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;PUT&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;542397776&lt;/td&gt;
&lt;td&gt;1347769376&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;PUT&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;21840&lt;/td&gt;
&lt;td&gt;20565&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;DELETE&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;1162626372&lt;/td&gt;
&lt;td&gt;1145392197&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;DELETE&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;17732&lt;/td&gt;
&lt;td&gt;17477&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;OPTIONS&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;2329291534720323663&lt;/td&gt;
&lt;td&gt;5715160600973038368&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;OPTIONS&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;1230262351&lt;/td&gt;
&lt;td&gt;1330664521&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;OPTIONS&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;20559&lt;/td&gt;
&lt;td&gt;20304&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;TRACE&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;1128354388&lt;/td&gt;
&lt;td&gt;1414676803&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;TRACE&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;21076&lt;/td&gt;
&lt;td&gt;21586&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;PATCH&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;1129595216&lt;/td&gt;
&lt;td&gt;1346458691&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;PATCH&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;16720&lt;/td&gt;
&lt;td&gt;20545&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;As expected, if you Google for most of these numbers, you can find an endless supply of questions mentioning them in error messages. Hopefully this post will help some people find their &lt;em&gt;real&lt;/em&gt; problem – using the wrong protocol – more quickly in future. :-)&lt;/p&gt;
</description>
<pubDate>Mon, 13 Jan 2020 16:49:27 +0000</pubDate>
<dc:creator>hprotagonist</dc:creator>
<og:type>article</og:type>
<og:image>/images/headshot.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://chrisdown.name/2020/01/13/1195725856-and-friends-the-origins-of-mysterious-numbers.html</dc:identifier>
</item>
<item>
<title>How to Invest in Startups</title>
<link>https://blog.samaltman.com/how-to-invest-in-startups</link>
<guid isPermaLink="true" >https://blog.samaltman.com/how-to-invest-in-startups</guid>
<description>&lt;p&gt;There is a lot of advice about how to be a good startup founder.  But there isn’t very much about how to be a good startup investor.&lt;/p&gt;
&lt;p&gt;Before going any further, I should point out that this is a particularly hard time to invest in startups—it’s easier right now to be a capital-taker than a capital-giver.  It seems that more people want to be investors than founders, and that there’s an apparent never-ending flow of capital looking for access to startups.&lt;/p&gt;
&lt;p&gt;The law of supply and demand has done its thing.   Valuations have risen, and the best investment opportunities are flooded with interest.  As a friend of mine recently observed, “it’s much easier to get LPs to give you money for your seed fund than it is to get a meaningful allocation in a ‘hot deal’”.&lt;/p&gt;
&lt;p&gt;That said, to do well as an investor, you need to do three things: get access to good investment opportunities, make good decisions about what to invest in, and get the companies you want to invest in to choose you as an investor.  That’s it! You can often help the companies you invest in become bigger than they otherwise would have been, but the sad reality is that your best investments will do quite well without you.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Access&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Getting access to investment opportunities is the easiest of the three categories: you can just work hard.  It’s surprising that most investors don’t work hard, but it’s true, and a bug that you can exploit.&lt;/p&gt;
&lt;p&gt;Putting a lot of energy into networking actually works, as long as you aren’t just trying to touch base when people can find some time away from their crazy calendars to grab coffee.  If you actually figure out how to help other investors you respect, and to really help good founders, then good investment opportunities will come your way.&lt;/p&gt;
&lt;p&gt;If you’re starting out as a full-time investor, make it your full-time job to figure out how to help people that will become your future investment-sourcing network.  Instead of just asking your contacts to tell you about investment opportunities, ask them if you can spend a day per week helping their best company. In general, early-stage investors can help a lot with closing candidates, future fundraising, customer introductions, and generic advice.&lt;/p&gt;
&lt;p&gt;A brand is the other way to get access.  There are a lot of ways to build one, but by the same principle of working hard, a good example is to write long-form content (hard, few people do a good job at it) instead of tweeting (easy, everyone does a pretty good job at it). &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Decisions&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Great founders are the key to great startups.  One way to do really well as a startup investor is to get good at predicting who is going to be great before they are—the market rewards finding great but inexperienced people.  You can also do well by investing in people who are already proven, but the price of the shares you buy will reflect that.&lt;/p&gt;
&lt;p&gt;So how do you identify future greatness?&lt;/p&gt;
&lt;p&gt;It’s easiest if you get to meet people in person, several times.  If you meet someone three times in three months, and notice detectable improvement each time, pay attention to that.  The rate of improvement is often more important than the current absolute ability (in particular, younger founders can sometimes improve extremely quickly).&lt;/p&gt;
&lt;p&gt;The main question I ask myself when I meet a founder is if I’d work for that person.  The second question I ask myself is if I can imagine them taking over their industry.&lt;/p&gt;
&lt;p&gt;I look for founders who are scrappy and formidable at the same time (a rarer combination than it sounds); mission-oriented, obsessed with their companies, relentless, and determined; extremely smart (necessary but certainly not sufficient); decisive, fast-moving, and willful; courageous, high-conviction, and willing to be misunderstood; strong communicators and infectious evangelists; and capable of becoming tough and ambitious. &lt;/p&gt;
&lt;p&gt;Some of these characteristics seem to be easier to change than others; for example, I have noticed that people can become much tougher and more ambitious rapidly, but people tend to be either slow movers or fast movers and that seems harder to change.  Being a fast mover is a big thing; a somewhat trivial example is that I have almost never made money investing in founders who do not respond quickly to important emails.&lt;/p&gt;
&lt;p&gt;Also, it sounds obvious, but the successful founders I’ve funded believe they are eventually certain to be successful.&lt;/p&gt;
&lt;p&gt;In addition to learning to predict who will become great founders, you have to be at least okay at predicting what markets will be good.&lt;/p&gt;
&lt;p&gt;Startups are likely to happen in many more industries—startups can win wherever costs can be low and cycle time can be fast.  Startups do particularly well in industries with rapid technological change, because their fundamental advantages over large competitors are speed and focus.  A higher rate of change gives startups more opportunities to be right and the large competitor more opportunities to stumble.&lt;/p&gt;
&lt;p&gt;Like the founder, and like a company, what you should care about is the growth rate and eventual size of a market (I don’t know why most investors are so obsessed with the current size of a market instead of how big they think it will be in ten years, but it’s an opportunity for you).&lt;/p&gt;
&lt;p&gt;The best companies tend to have the courage to lead the market by a couple of years, but they know the secret for telling the difference between a real trend and a fake trend.  For a real trend, even if there aren’t many users, they use the new platform a lot and love it. For example, although the iPhone was derided for not having many users in its first year or two, most people who had an iPhone raved about it in a way that they never did about previous smartphones.&lt;/p&gt;
&lt;p&gt;The very best companies tend to ride the wave of a new, important, and rapidly growing platform.&lt;/p&gt;
&lt;p&gt;The spectral signatures of the best companies I’ve invested in are remarkably similar.  They usually have most of the following characteristics: compelling founders, a mission that attracts talented people into the startup’s orbit, a product so good that people spontaneously tell their friends about it, a rapidly growing market, a network effect and low marginal costs, the ability to grow fast, and a product that is either fundamentally new or 10x better than existing options.&lt;/p&gt;
&lt;p&gt;You should try to limit yourself to opportunities that could be $10 billion companies if they work (which means they have, at least, a fast-growing market and some sort of pricing power).  The power law is that powerful. This is easy to say and hard to do, and I’ve been guilty of violating the principle many times. But the data are clear—the failures don’t matter much, the small successes don’t matter much, and the giant returns are where everything happens.&lt;/p&gt;
&lt;p&gt;The central learning of my career so far has been that you can and should scale up things that are working.  The power of scale, and the emergent behavior that sometimes comes from it, is tremendous. I think about the potential energy of future scale for every investment I make.  Most people seem terrible at this, so it’s another bug you can exploit.  &lt;/p&gt;
&lt;p&gt;Although good ideas are understandably seductive, for early-stage investing they are mostly valuable as a way to identify good founders.  However, sometimes bad founders have good ideas too, and investing in them is the chronic investing mistake that has been hardest for me to correct.  (My second biggest chronic mistake has been chasing investments primarily because other investors like them.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Close rate&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The better the investment opportunity is (i.e., expected value relative to valuation), the harder it usually is to get the company to choose you as an investor.&lt;/p&gt;
&lt;p&gt;Traditional sales tactics works pretty well here.  Spend a lot of time with the founder, explain what you’re willing to do to help them, ask founders you’ve worked with in the past to call them, etc. &lt;/p&gt;
&lt;p&gt;A reputation for being above-and-beyond helpful and accessible is worth a lot here, and rare among all but the best investors.  A reputation for being founder-friendly helps too. What helps most of all is other founders you’ve previously invested in saying “that person was my best investor by far”.&lt;/p&gt;
&lt;p&gt;In addition to helping get access to investment opportunities, a strong brand also helps close them.  It’s a nice tailwind if you can get yourself to the place where simply taking your money helps a company get taken more seriously.&lt;/p&gt;
&lt;p&gt;Decisiveness also helps—everyone wants to be wanted, and most investors wait for someone else to act first.  If you decide quickly, and especially if you decide before others do, founders tend to appreciate that. The two most recent significant investments I made were 1) telling people I’d previously backed and had huge conviction in that I would do their Series A before they finished telling me what their idea was, and 2) offering to do the seed round of founders I’d never met before at the end of a one hour meeting.  I don’t recommend doing that very often, but when your conviction is strong, let it show.   &lt;/p&gt;
&lt;p&gt;The best way to have a poor close rate is to not treat founders like peers.  If you’re picking well, you should be investing in founders that you think of as your peers at least.  Founders have a sixth sense for who is going to treat them like a peer and who is going to treat them like a boss.  And if they’re good, they know you’re failing an intelligence test if you act like their boss.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Help them&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The most important way to help founders is to get them to be more ambitious—to think bigger and to have more self-belief.  Help them set ambitious but achievable goals. Momentum is important and self-reinforcing—most people set goals that they expect to be just out of reach, which is usually demotivating.  It’s better to continuously set goals that you can just barely hit.&lt;/p&gt;
&lt;p&gt;The second most important thing to do is to give them specific, tactical advice (instead of general strategy) about how to achieve their goals.  Good tactical advice is something like “it seems like you’ve figured out yourself how to do sales for this company, so here is where to look and what to look for in your first sales hire, and here is the sales tool you should use”.&lt;/p&gt;
&lt;p&gt;There are a lot of specific things you can do to help—make introductions, help them hire, help them find other investors, help them find an office, etc.—but generally you should wait to do these until asked. &lt;/p&gt;
&lt;p&gt;A big exception is that you should proactively let them know when you have very high conviction that they’re about to make a big mistake, especially once things are working and they aren’t setting themselves up to scale.&lt;/p&gt;
&lt;p&gt;In theory, another big exception is actually helping founders come up with good new ideas.  The first investor I ever watched in action was PG and so I assumed this was something all investors were fantastic at.  But it turns out he is a sui generis idea generator, and even most great investors are usually still bad at telling founders what to work on.  It’s worth trying to be self-aware.&lt;/p&gt;
&lt;p&gt;Finally, I’ve found that most of the time when founders call asking for vague help, what they are really asking for is emotional support from a friend.  Invite them over to your house, make them tea or pour them a drink, and start listening to their struggles.&lt;/p&gt;
&lt;p&gt;Thanks to Jack Altman, Max Altman, and Luke Miles for reviewing drafts of this.&lt;/p&gt;
</description>
<pubDate>Mon, 13 Jan 2020 16:43:34 +0000</pubDate>
<dc:creator>eusebio</dc:creator>
<og:title>How To Invest In Startups</og:title>
<og:type>article</og:type>
<og:url>https://blog.samaltman.com/how-to-invest-in-startups</og:url>
<og:description>There is a lot of advice about how to be a good startup founder.  But there isn’t very much about how to be a good startup investor. Before going any further, I should point out that this is a...</og:description>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.samaltman.com/how-to-invest-in-startups</dc:identifier>
</item>
<item>
<title>Maybe You Don&amp;#039;t Need Kubernetes (2019)</title>
<link>https://endler.dev/2019/maybe-you-dont-need-kubernetes/</link>
<guid isPermaLink="true" >https://endler.dev/2019/maybe-you-dont-need-kubernetes/</guid>
<description>&lt;p class=&quot;post-meta&quot;&gt;Published on 21st of March, 2019&lt;/p&gt;&lt;img src=&quot;https://endler.dev/2019/maybe-you-dont-need-kubernetes/scooter.svg&quot;/&gt; A woman riding a scooter&lt;br/&gt;Illustration created by &lt;a href=&quot;https://www.freepik.com/free-photos-vectors/car&quot;&gt;freepik&lt;/a&gt;, Nomad logo by &lt;a href=&quot;https://www.nomadproject.io/&quot;&gt;HashiCorp&lt;/a&gt;.
&lt;p&gt;Kubernetes is the 800-pound gorilla of container orchestration.&lt;br/&gt;It powers some of the biggest deployments worldwide, but it comes with a price tag.&lt;/p&gt;
&lt;p&gt;Especially for smaller teams, it can be time-consuming to maintain and has a steep learning curve. For what our team of four wanted to achieve at trivago, it added too much overhead. So we looked into alternatives — and fell in love with &lt;a href=&quot;https://www.nomadproject.io/&quot;&gt;Nomad&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;the-wishlist&quot;&gt;The wishlist&lt;/h2&gt;
&lt;p&gt;Our team runs a number of typical services for monitoring and performance analysis: API endpoints for metrics written in Go, Prometheus exporters, log parsers like Logstash or &lt;a href=&quot;https://github.com/trivago/gollum&quot;&gt;Gollum&lt;/a&gt;, and databases like InfluxDB or Elasticsearch. Each of these services run in their own container. We needed a simple system to keep those jobs running.&lt;/p&gt;
&lt;p&gt;We started with a list of requirements for container orchestration:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Run a fleet of services across many machines.&lt;/li&gt;
&lt;li&gt;Provide an overview of running services.&lt;/li&gt;
&lt;li&gt;Allow for communication between services.&lt;/li&gt;
&lt;li&gt;Restart them automatically when they die.&lt;/li&gt;
&lt;li&gt;Be manageable by a small team.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;On top of that, the following things were nice to have but not strictly required:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Tag machines by their capabilities (e.g., label machines with fast disks for I/O heavy services.)&lt;/li&gt;
&lt;li&gt;Be able to run these services independently of any orchestrator (e.g. in development).&lt;/li&gt;
&lt;li&gt;Have a common place to share configurations and secrets.&lt;/li&gt;
&lt;li&gt;Provide an endpoint for metrics and logging.&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;why-kubernetes-was-not-a-good-fit-for-us&quot;&gt;Why Kubernetes was not a good fit for us&lt;/h2&gt;
&lt;p&gt;When creating a prototype with Kubernetes, we noticed that we started adding ever-more complex layers of logic to operate our services. Logic on which we implicitly relied on.&lt;/p&gt;
&lt;p&gt;As an example, Kubernetes allows embedding service configurations using &lt;a href=&quot;https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/&quot;&gt;ConfigMaps&lt;/a&gt;. Especially when merging multiple config files or adding more services to a pod, this can get quite confusing quickly. Kubernetes - or &lt;a href=&quot;https://helm.sh/&quot;&gt;helm&lt;/a&gt;, for that matter - allows injecting external configs dynamically to ensure separation of concerns. But this can lead to tight, implicit coupling between your project and Kubernetes. Helm and ConfigMaps are optional features so you don’t have to use them. You might as well just copy the config into the Docker image. However, it’s tempting to go down that path and build unnecessary abstractions that can later bite you.&lt;/p&gt;
&lt;p&gt;On top of that, the Kubernetes ecosystem is still rapidly evolving. It takes a fair amount of time and energy to stay up-to-date with the best practices and latest tooling. Kubectl, minikube, kubeadm, helm, tiller, kops, oc - the list goes on and on. Not all tools are necessary to get started with Kubernetes, but it’s hard to know which ones are, so you have to be at least aware of them. Because of that, the learning curve is quite steep.&lt;/p&gt;
&lt;h2 id=&quot;when-to-use-kubernetes&quot;&gt;When to use Kubernetes&lt;/h2&gt;
&lt;p&gt;At trivago specifically, many teams use Kubernetes and are quite happy with it. These instances are managed by Google or Amazon however, which have the capacity to do so.&lt;/p&gt;
&lt;p&gt;Kubernetes comes with &lt;a href=&quot;https://jvns.ca/blog/2017/08/05/how-kubernetes-certificates-work/&quot;&gt;amazing features&lt;/a&gt;, that make container orchestration at scale more manageable:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Fine-grained &lt;a href=&quot;https://kubernetes.io/docs/reference/access-authn-authz/authorization/&quot;&gt;rights management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/#custom-controllers&quot;&gt;Custom controllers&lt;/a&gt; allow getting logic into the cluster. These are just programs that talk to the Kubernetes API.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/&quot;&gt;Autoscaling&lt;/a&gt;! Kubernetes can scale your services up and down on demand. It uses service metrics to do this without manual intervention.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The question is if you really need all those features. You can't rely on these abstractions to just work; &lt;a href=&quot;https://jvns.ca/blog/2017/08/05/how-kubernetes-certificates-work/&quot;&gt;you'll have to learn what's going on under the hood&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Especially in our team, which runs most services on-premise (because of its close connection to trivago's core infrastructure), we didn't want to afford running our own Kubernetes cluster. We wanted to ship services instead.&lt;/p&gt;
&lt;a href=&quot;https://twitter.com/QuinnyPig/status/1093261169614356490&quot;&gt;&lt;img src=&quot;https://endler.dev/2019/maybe-you-dont-need-kubernetes/nuclear-kubernetes.jpg&quot; alt=&quot;Nuclear hot take: nobody will care about Kubernetes in five years. -A tweet by Corey Quinn&quot;/&gt;&lt;/a&gt;
&lt;h2 id=&quot;batteries-not-included&quot;&gt;Batteries not included&lt;/h2&gt;
&lt;p&gt;Nomad is the 20% of service orchestration that gets you 80% of the way. All it does is manage deployments. It takes care of your rollouts and restarts your containers in case of errors, and that's about it.&lt;/p&gt;
&lt;p&gt;The entire point of Nomad is that it does &lt;em&gt;less&lt;/em&gt;: it doesn’t include fine-grained rights management or &lt;a href=&quot;https://kubernetes.io/docs/concepts/services-networking/network-policies/&quot;&gt;advanced network policies&lt;/a&gt;, and that’s by design. Those components are provided as enterprise services, by a third-party, or not at all.&lt;/p&gt;
&lt;p&gt;I think Nomad hit a sweet-spot between ease of use and expressiveness. It's good for small, mostly independent services. If you need more control, you'll have to build it yourself or use a different approach. Nomad is &lt;em&gt;just&lt;/em&gt; an orchestrator.&lt;/p&gt;
&lt;p&gt;The best part about Nomad is that it's easy to &lt;em&gt;replace&lt;/em&gt;. There is little to no vendor lock-in because the functionality it provides can easily be integrated into any other system that manages services. It just runs as a plain old single binary on every machine in your cluster; that's it!&lt;/p&gt;
&lt;h2 id=&quot;the-nomad-ecosystem-of-loosely-coupled-components&quot;&gt;The Nomad ecosystem of loosely coupled components&lt;/h2&gt;
&lt;p&gt;The real power of Nomad lies within its ecosystem. It integrates very well with other - completely optional - products like &lt;a href=&quot;https://www.consul.io/&quot;&gt;Consul&lt;/a&gt; (a key-value store) or &lt;a href=&quot;https://www.vaultproject.io/&quot;&gt;Vault&lt;/a&gt; (for secrets handling). Inside your Nomad file, you can have sections for fetching data from those services:&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;template &lt;/span&gt;&lt;span&gt;{
  data = &amp;lt;&amp;lt;EOH
LOG_LEVEL=&lt;/span&gt;&lt;span&gt;&quot;{{key &quot;&lt;/span&gt;&lt;span&gt;service/geo-api/log-verbosity&lt;/span&gt;&lt;span&gt;&quot;}}&quot;&lt;/span&gt;&lt;span&gt;
API_KEY=&lt;/span&gt;&lt;span&gt;&quot;{{with secret &quot;&lt;/span&gt;&lt;span&gt;secret/geo-api-key&lt;/span&gt;&lt;span&gt;&quot;}}{{.Data.value}}{{end}}&quot;&lt;/span&gt;&lt;span&gt;
EOH

  destination = &lt;/span&gt;&lt;span&gt;&quot;secrets/file.env&quot;&lt;/span&gt;&lt;span&gt;
  env         = true
}
&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This will read the &lt;code&gt;service/geo-api/log-verbosity&lt;/code&gt; key from Consul and expose it as a &lt;code&gt;LOG_LEVEL&lt;/code&gt; environment variable inside your job. It's also exposing &lt;code&gt;secret/geo-api-key&lt;/code&gt; from Vault as &lt;code&gt;API_KEY&lt;/code&gt;. Simple, but powerful!&lt;/p&gt;
&lt;p&gt;Because it's so simple, Nomad can also be easily extended with other services through its API. For example, jobs can be tagged for service discovery. At trivago, we tag all services, which expose metrics, with &lt;code&gt;trv-metrics&lt;/code&gt;. This way, Prometheus finds the services via Consul and periodically scrapes the &lt;code&gt;/metrics&lt;/code&gt; endpoint for new data. The same can be done for logs by integrating &lt;a href=&quot;https://grafana.com/loki&quot;&gt;Loki&lt;/a&gt; for example.&lt;/p&gt;
&lt;p&gt;There are many other examples for extensibility:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Trigger a Jenkins job using a webhook and Consul watches to redeploy your Nomad job on service config changes.&lt;/li&gt;
&lt;li&gt;Use Ceph to add a distributed file system to Nomad.&lt;/li&gt;
&lt;li&gt;Use &lt;a href=&quot;https://github.com/fabiolb/fabio&quot;&gt;fabio&lt;/a&gt; for load balancing.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;All of this allowed us to &lt;a href=&quot;https://tech.trivago.com/2019/01/25/nomad-our-experiences-and-best-practices/&quot;&gt;grow our infrastructure organically&lt;/a&gt; without too much up-front commitment.&lt;/p&gt;
&lt;h2 id=&quot;fair-warning&quot;&gt;Fair warning&lt;/h2&gt;
&lt;p&gt;No system is perfect. I advise you not to use any fancy new features in production right now. There are &lt;a href=&quot;https://github.com/hashicorp/nomad/issues?q=is%3Aopen+is%3Aissue+label%3Abug&quot;&gt;bugs&lt;/a&gt; and &lt;a href=&quot;https://github.com/hashicorp/nomad/issues/698&quot;&gt;missing features&lt;/a&gt; of course - but &lt;a href=&quot;https://github.com/kubernetes/kubernetes/issues?q=is%3Aopen+is%3Aissue+label%3Akind%2Fbug&quot;&gt;that's also the case for Kubernetes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Compared to Kubernetes, there is far less momentum behind Nomad. Kubernetes has seen around 75.000 commits and 2000 contributors so far, while Nomad sports about 14.000 commits and 300 contributors. It will be hard for Nomad to keep up with the velocity of Kubernetes, but maybe it doesn’t have to! The scope is much more narrow and the smaller community could also mean that it'll be easier to get your pull request accepted, in comparison to Kubernetes.&lt;/p&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;The takeaway is: don't use Kubernetes just because everybody else does. Carefully evaluate your requirements and check which tool fits the bill.&lt;/p&gt;
&lt;p&gt;If you're planning to deploy a fleet of homogenous services on large-scale infrastructure, Kubernetes might be the way to go. Just be aware of the additional complexity and operational costs. Some of these costs can be avoided by using a managed Kubernetes environment like &lt;a href=&quot;https://cloud.google.com/kubernetes-engine/&quot;&gt;Google Kubernetes Engine&lt;/a&gt; or &lt;a href=&quot;https://aws.amazon.com/eks/&quot;&gt;Amazon EKS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you're just looking for a reliable orchestrator that is easy to maintain and extendable, why not give Nomad a try? You might be surprised by how far it'll get you.&lt;/p&gt;
&lt;p&gt;If Kubernetes were a car, Nomad would be a scooter. Sometimes you prefer one and sometimes the other. Both have their right to exist.&lt;/p&gt;
&lt;h2 id=&quot;credits&quot;&gt;Credits&lt;/h2&gt;
&lt;p&gt;Thanks to my awesome colleagues &lt;a href=&quot;https://www.linkedin.com/in/esteban-barrios-a60a4717&quot;&gt;Esteban Barrios&lt;/a&gt;, &lt;a href=&quot;https://jorgelbg.github.io/&quot;&gt;Jorge-Luis Betancourt&lt;/a&gt;, &lt;a href=&quot;https://github.com/m3t0r&quot;&gt;Simon Brüggen&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/arnecls&quot;&gt;Arne Claus&lt;/a&gt;, &lt;a href=&quot;https://github.com/IngaFeick&quot;&gt;Inga Feick&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/schafele&quot;&gt;Wolfgang Gassler&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/kassybas&quot;&gt;Barnabas Kutassy&lt;/a&gt;, &lt;a href=&quot;https://github.com/perrymanuk&quot;&gt;Perry Manuk&lt;/a&gt;, &lt;a href=&quot;https://github.com/SHyx0rmZ&quot;&gt;Patrick Pokatilo&lt;/a&gt;, and &lt;a href=&quot;http://jakubsacha.pl/&quot;&gt;Jakub Sacha&lt;/a&gt; for reviewing drafts of this article.&lt;/p&gt;
&lt;ul class=&quot;post-links&quot;&gt;&lt;li&gt;💡Found an error in this article? Please &lt;a href=&quot;https://github.com/mre/mre.github.io/edit/source/content/2019/maybe-you-dont-need-kubernetes/index.md&quot;&gt;propose a change&lt;/a&gt; on Github.&lt;/li&gt;
&lt;li&gt;💬 Comments on &lt;a href=&quot;https://news.ycombinator.com/item?id=19467067&quot;&gt;Hacker News&lt;/a&gt;, &lt;a href=&quot;https://www.reddit.com/r/kubernetes/comments/b476va/maybe_you_dont_need_kubernetes/&quot;&gt;Reddit&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;📖 Translated into &lt;a href=&quot;https://yakst.com/ja/posts/5455&quot;&gt;Japanese&lt;/a&gt;, &lt;a href=&quot;https://habr.com/ru/post/445030/&quot;&gt;Russian&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Mon, 13 Jan 2020 13:34:26 +0000</pubDate>
<dc:creator>WolfOliver</dc:creator>
<og:title>Maybe You Don't Need Kubernetes | Matthias Endler</og:title>
<og:type>website</og:type>
<og:description>Kubernetes is the 800-pound gorilla of container orchestration. It powers some of the biggest deployments worldwide, but it comes with a price tag...</og:description>
<og:url>https://endler.dev/2019/maybe-you-dont-need-kubernetes/</og:url>
<og:image>https://endler.dev/2019/maybe-you-dont-need-kubernetes/scooter.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://endler.dev/2019/maybe-you-dont-need-kubernetes/</dc:identifier>
</item>
<item>
<title>Why the foundations of physics have not progressed for 40 years</title>
<link>https://iai.tv/articles/why-physics-has-made-no-progress-in-50-years-auid-1292</link>
<guid isPermaLink="true" >https://iai.tv/articles/why-physics-has-made-no-progress-in-50-years-auid-1292</guid>
<description>&lt;p&gt;In the foundations of physics, we have not seen progress since the mid 1970s when the standard model of particle physics was completed. Ever since then, the theories we use to describe observations have remained unchanged. Sure, some aspects of these theories have only been experimentally confirmed later. The last to-be-confirmed particle was the Higgs-boson, predicted in the 1960s, measured in 2012. But all shortcomings of these theories – the lacking quantization of gravity, dark matter, the quantum measurement problem, and more – have been known for more than 80 years. And they are as unsolved today as they were then.&lt;/p&gt;&lt;p&gt;The major cause of this stagnation is that physics has changed, but physicists have not changed their methods. As physics has progressed, the foundations have become increasingly harder to probe by experiment. Technological advances have not kept size and expenses manageable. This is why, in physics today, we have collaborations of thousands of people operating machines that cost billions of dollars.&lt;/p&gt;&lt;p&gt;With fewer experiments, serendipitous discoveries become increasingly unlikely. And lacking those discoveries, the technological progress that would be needed to keep experiments economically viable never materializes. It’s a vicious cycle: Costly experiments result in lack of progress. Lack of progress increases the costs of further experiment. This cycle must eventually lead into a dead end when experiments become simply too expensive to remain affordable. A $40 billion particle collider is such a dead end.&lt;/p&gt;&lt;p&gt;The only way to avoid being sucked into this vicious cycle is to choose carefully which hypothesis to put to the test. But physicists still operate by the “just look” idea like this was the 19th century. They do not think about which hypotheses are promising because their education has not taught them to do so. Such self-reflection would require knowledge of the philosophy and sociology of science, and those are subjects physicists merely make dismissive jokes about. They believe they are too intelligent to have to think about what they are doing.&lt;/p&gt;&lt;p&gt;The consequence has been that experiments in the foundations of physics past the 1970s have only confirmed the already existing theories. None found evidence of anything beyond what we already know.&lt;/p&gt;&lt;p&gt;But theoretical physicists did not learn the lesson and still ignore the philosophy and sociology of science. I encounter this dismissive behavior personally pretty much every time I try to explain to a cosmologist or particle physicists that we need smarter ways to share information and make decisions in large, like-minded communities. If they react at all, they are insulted if I point out that social reinforcement – aka group-think – befalls us all, unless we actively take measures to prevent it.&lt;/p&gt;&lt;p&gt;Instead of examining the way that they propose hypotheses and revising their methods, theoretical physicists have developed a habit of putting forward entirely baseless speculations. Over and over again I have heard them justifying their mindless production of mathematical fiction as “healthy speculation” – entirely ignoring that this type of speculation has demonstrably not worked for decades and continues to not work. There is nothing healthy about this. It’s sick science. And, embarrassingly enough, that’s plain to see for everyone who does not work in the field.&lt;/p&gt;&lt;p&gt;This behavior is based on the hopelessly naïve, not to mention ill-informed, belief that science always progresses somehow, and that sooner or later certainly someone will stumble over something interesting. But even if that happened – even if someone found a piece of the puzzle – at this point we wouldn’t notice, because today any drop of genuine theoretical progress would drown in an ocean of “healthy speculation”.&lt;/p&gt;&lt;p&gt;And so, what we have here in the foundation of physics is a plain failure of the scientific method. All these wrong predictions should have taught physicists that just because they can write down equations for something does not mean this math is a scientifically promising hypothesis. String theory, supersymmetry, multiverses. There’s math for it, alright. Pretty math, even. But that doesn’t mean this math describes reality.&lt;/p&gt;&lt;p&gt;Physicists need new methods. Better methods. Methods that are appropriate to the present century.&lt;/p&gt;&lt;p&gt;And please spare me the complaints that I supposedly do not have anything better to suggest, because that is a false accusation. I have said many times that looking at the history of physics teaches us that resolving inconsistencies has been a reliable path to breakthroughs, so that’s what we should focus on. I may be on the wrong track with this, of course. But for all I can tell at this moment in history I am the only physicist who has at least come up with an idea for what to do.&lt;/p&gt;&lt;p&gt;Why don’t physicists have a hard look at their history and learn from their failure? Because the existing scientific system does not encourage learning. Physicists today can happily make career by writing papers about things no one has ever observed, and never will observe. This continues to go on because there is nothing and no one that can stop it.&lt;/p&gt;&lt;p&gt;You may want to put this down as a minor worry because – $40 billion dollar collider aside – who really cares about the foundations of physics? Maybe all these string theorists have been wasting tax-money for decades, alright, but in the large scheme of things it’s not all that much money. I grant you that much. Theorists are not expensive.&lt;/p&gt;&lt;p&gt;But even if you don’t care what’s up with strings and multiverses, you should worry about what is happening here. The foundations of physics are the canary in the coal mine. It’s an old discipline and the first to run into this problem. But the same problem will sooner or later surface in other disciplines if experiments become increasingly expensive and recruit large fractions of the scientific community.&lt;/p&gt;&lt;p&gt;Indeed, we see this beginning to happen in medicine and in ecology, too.&lt;/p&gt;&lt;p&gt;Small-scale drug trials have pretty much run their course. These are good only to find in-your-face correlations that are universal across most people. Medicine, therefore, will increasingly have to rely on data collected from large groups over long periods of time to find increasingly personalized diagnoses and prescriptions. The studies which are necessary for this are extremely costly. They must be chosen carefully for not many of them can be made. The study of ecosystems faces a similar challenge, where small, isolated investigations are about to reach their limits.&lt;/p&gt;&lt;p&gt;How physicists handle their crisis will give an example to other disciplines. So watch this space.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you want to hear from leading thinkers like this debating renowned philosophers, cutting edge scientists, headline-making politicians, and beloved artists, come to &lt;a href=&quot;https://howthelightgetsin.org/hay&quot; target=&quot;_blank&quot;&gt;HowTheLightGetsIn Hay 2020&lt;/a&gt; for four days of debates and talks alongside music, comedy and parties.&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 13 Jan 2020 12:34:13 +0000</pubDate>
<dc:creator>ash</dc:creator>
<og:type>article</og:type>
<og:title>Why the foundations of physics have not progressed for 40 years</og:title>
<og:description>Theoretical physicist Sabine Hossenfelder on why Physics is experiencing 40 years of stagnation because physicists are unwilling to adopt new methods.</og:description>
<og:url>https://iai.tv/articles/why-physics-has-made-no-progress-in-50-years-auid-1292</og:url>
<og:image>https://iai.tv/assets/Uploads/_resampled/FillWyI4MDAiLCI1MDAiXQ/Why-Phsyics-has-made-no-progress-in-50-years.jpg</og:image>
<dc:language>en-GB</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://iai.tv/articles/why-physics-has-made-no-progress-in-50-years-auid-1292</dc:identifier>
</item>
<item>
<title>Academic Torrents</title>
<link>http://academictorrents.com/</link>
<guid isPermaLink="true" >http://academictorrents.com/</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;http://academictorrents.com/&quot;&gt;http://academictorrents.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=22033833&quot;&gt;https://news.ycombinator.com/item?id=22033833&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 249&lt;/p&gt;
&lt;p&gt;# Comments: 23&lt;/p&gt;
</description>
<pubDate>Mon, 13 Jan 2020 12:29:08 +0000</pubDate>
<dc:creator>julianj</dc:creator>
<og:type>article</og:type>
<og:title>Why the foundations of physics have not progressed for 40 years</og:title>
<og:description>Theoretical physicist Sabine Hossenfelder on why Physics is experiencing 40 years of stagnation because physicists are unwilling to adopt new methods.</og:description>
<og:url>https://iai.tv/articles/why-physics-has-made-no-progress-in-50-years-auid-1292</og:url>
<og:image>https://iai.tv/assets/Uploads/_resampled/FillWyI4MDAiLCI1MDAiXQ/Why-Phsyics-has-made-no-progress-in-50-years.jpg</og:image>
<dc:language>en-GB</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://iai.tv/articles/why-physics-has-made-no-progress-in-50-years-auid-1292</dc:identifier>
</item>
<item>
<title>The “No Code” Delusion</title>
<link>https://www.alexhudson.com/2020/01/13/the-no-code-delusion/</link>
<guid isPermaLink="true" >https://www.alexhudson.com/2020/01/13/the-no-code-delusion/</guid>
<description>&lt;p&gt;Increasingly popular in the last couple of years, I think 2020 is going to be the year of “no code”: the movement that say you can write business logic and even entire applications without having the training of a software developer. I empathise with people doing this, and I think some of the “no code” tools are great. But I also thing it’s wrong at heart.&lt;/p&gt;

&lt;p&gt;On the face of it, the reason for wanting to remove code is obvious: software developers are expensive, in short supply, and fundamentally don’t produce things quickly. The end result can be highly variable and expensive to run and maintain.&lt;/p&gt;
&lt;p&gt;But the need for software is clear. A modern “digital organization” needs a lot of software, much of it highly customised or even bespoke (I’m not going to defend this perspective in this post - it would take too long - but my definition of a “digital transformation” is one in which the key processes within an enterprise are updated/transformed to be defined by software primarily).&lt;/p&gt;
&lt;p&gt;Wouldn’t it be great if we could create digital businesses, or even digital products, without having to create software in the traditional sense? This is the general way of things: new technologies start out difficult to use, but are made easier over time, and more accessible.&lt;/p&gt;
&lt;p&gt;There are mainly two distinct benefits to transitioning business processes into the software domain:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;“change control” becomes a software problem rather than a people problem. Instead of large amounts of retraining to alter existing processes or introduce new ones, you can “just” do a software release. Change becomes faster to implement and roll-back.&lt;/li&gt;
&lt;li&gt;it’s easier to innovate on what makes a business distinct. When businesses are doing the same as their competitors, it’s a sure sign things are becoming commodity. This is fine for some businesses, but most people don’t want to be in commodity services/products.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Many businesses fail attempting to do digital transformation to access these benefits. The downside of trying to make this jump is that suddenly you’re becoming, at least in part, a software development company. Surprise: most companies are not good at this! A software environment is one of &lt;em&gt;infinite possibility&lt;/em&gt; because most everything is achievable, with enough resource (time, money, people). Most people are great at dreaming about the possibilities, but less good at putting in place the constraints needed to achieve realistic results.&lt;/p&gt;

&lt;p&gt;At the heart of the issue is the concept that “computer programming” - which is to say, writing code - is a constraint on the development of software. That there is some “higher level” on which people can operate, where development is much simpler but the end results in some way the same.&lt;/p&gt;
&lt;p&gt;Specifically, the idea of writing business logic in text form according to the syntax of a technical programming language is anathema. To make an analogy: it’s a little bit like saying all software developers are like car mechanics, who get into the guts of an engine. But most people just need to be able to drive the car, and a simpler interface can be put on top of the machine (a steering wheel and some pedals). Over time, we can abstract away mechanical details (e.g. a mechanic might like to drive stick, but most people prefer an auto gearbox), until the point that anyone can do it. Yay, we democratized it!&lt;/p&gt;
&lt;p&gt;Unfortunately, this just bumps into a large set of problems which have already been thoroughly studied in computer science.&lt;/p&gt;
&lt;h2 id=&quot;the-simpler-abstraction&quot;&gt;The “simpler abstraction”&lt;/h2&gt;
&lt;p&gt;Attempting to simplify programming has been going on since quite early in the industry: BASIC was an attempt to allow people to write software in what looked like English, and indeed it was extremely successful (cf. Visual Basic).&lt;/p&gt;
&lt;p&gt;However, abstraction is already a key concept with coding systems, and it tends not to simplify: in fact, many developers actively attempt to ensure code is sufficiently concrete so that it remains readily understandable.&lt;/p&gt;
&lt;h2 id=&quot;the-simpler-syntax&quot;&gt;The “simpler syntax”&lt;/h2&gt;
&lt;p&gt;Thinking that the main problem was writing the text, there have been attempts to simplify the syntax or even remove it altogether - there are numerous graphic development systems. Some are only marginally removed from the code (e.g. Scratch), others bear no relation.&lt;/p&gt;
&lt;p&gt;The development of these syntaxes has generally run into the problem of expression: once they are simple enough to pick up quickly, they are no longer expressive enough to use in many scenarios. And vice-versa: some languages have the ability to define a custom language within them, called domain-specific languages (DSLs). Few of these languages have ever been truly successful amongst the development community at large, primarily because they again make thing extremely complex.&lt;/p&gt;
&lt;h2 id=&quot;configuration-over-code&quot;&gt;Configuration over code&lt;/h2&gt;
&lt;p&gt;Many No Code advocates are building significant systems by pulling together off-the-shelf applications and integrating them. This is made much more straightforward with tools like Zapier, which are able to broadly integrate into different systems.&lt;/p&gt;
&lt;p&gt;This begins to fall down in two ways. First, you’ve spread the logic across a variety of different systems, so it becomes more difficult to reason about the application as a whole.&lt;/p&gt;
&lt;p&gt;Second, more importantly, the logic has been implemented as configuration as opposed to code. The logic is constrained by the ability of the applications which have been wired together, but it’s still there. Programmers face this dilemma constantly: do we trust an external system and put a lot of configuration effort into it, or attempt to handle more of the logic ourselves?&lt;/p&gt;
&lt;p&gt;The logic doesn’t go away. Just because a decision is embedded into the wiring of a Zapier rule doesn’t remove any of the burden of maintenance / correctness.&lt;/p&gt;
&lt;h2 id=&quot;the-equivalence-of-code&quot;&gt;The equivalence of code&lt;/h2&gt;
&lt;p&gt;There are reasons why developers still use plain text - mainly to do with productivity, tooling and the ability to be concise. However, I have little doubt that if something came along that was better, many (not all!) developers would drop text like a hot rock.&lt;/p&gt;
&lt;p&gt;But the representation of the logic doesn’t reduce the fundamental complexity of the thing that it describes. In the same I way I can write “two” and “2” and mean the same thing, there are many ways of writing out business logic.&lt;/p&gt;
&lt;p&gt;Which is to say, this supposed process in a visual development environment:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.alexhudson.com/blog/2020/logic-software.png&quot; alt=&quot;Visual logic decision on e-mail entry&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Could be exactly equivalent to:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def process_email(self, address):
    if not self.validate_email(address):
        raise InvalidDataException(_(&quot;Address is not valid&quot;))
    self.store(address)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;In the first example, I need to know how the visual environment works. In the second, I need to know a language and a development environment. But both of those are skills that are easily acquired. The commonality across both of them is that I need to understand what the logic is supposed to do, and how it will work.&lt;/p&gt;
&lt;p&gt;To understand software - of any type - you need to be able to mentally model the system that is being represented, and make predictions about how it will work in different scenarios based on that.&lt;/p&gt;
&lt;p&gt;This is exactly the same reason many people have trouble with modern digital devices. The aopcryphal “VCR timer” problem is because the hardware has few buttons to give it input, but highly complex internal working: so the user needs to retain in their head an advanced model of the internal state of the device.&lt;/p&gt;
&lt;p&gt;Some people suggest that this is a skill that is not acquirable; that either you can reason about the internal state of something, or you can’t. Those that can’t would be fundamentally unable to program. I’m not sure I buy this - it skates a little too close to “theory of mind” to me - but certainly you can’t do it without a lot of practice. And it doesn’t matter if the logic is in text or is visual, frankly.&lt;/p&gt;

&lt;p&gt;Absolutely not.&lt;/p&gt;
&lt;p&gt;I think it is unfortunate that over the 70-odd years of programmable computers, we are still roughly stuck using tools similar to those developed in the first 20 years (actually, if anything, we have reduced the power of tools over that time - Lisp didn’t take over the world).&lt;/p&gt;
&lt;p&gt;So of course we should still be attempting to improve our languages and environments. Consider these two pieces of code:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;#include &amp;lt;string.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;

char *add_domain_name(char *source) {
        const size_t size = 1024;
        char *dest = malloc(size+1);
        strncpy(dest, source, size);
        strncat(dest, &quot;@example.com&quot;, size);
        return dest;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And then this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;function add_domain_name(username: string): string {
        return username + &quot;@example.com&quot;;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The first example is C (invented around 1972), the second is TypeScript (release 2012, almost exactly 40 years later). They have approximately the same syntax in many places, but TypeScript is much more advanced than C. In particular, the developer doesn’t need to worry about allocating memory, or the character set encoding of the string, or a host of other things.&lt;/p&gt;
&lt;p&gt;Indeed, for a large enough application, most of the business logic will have been implemented at quite a high level, and the differences between the languages will be even less obvious. It certainly doesn’t look much like the state of the art has progressed very far in 40 years.&lt;/p&gt;
&lt;h2 id=&quot;where-does-no-code-fail-in-practice&quot;&gt;Where does “No code” fail in practice?&lt;/h2&gt;
&lt;p&gt;There are a large number of systems available, some of which are extremely advanced - as an example, you can define extremely complex software in Salesforce Cloud, without having to write a single line of code. It’s a mix of visual programming, basic rule setting and configuration.&lt;/p&gt;
&lt;p&gt;Projects often begin with a “prototype”, to show the platform can do it. These are very quick to put together, and fulfil 80% of the brief. Success? Sadly, no - as coders know, the devil is in the details.&lt;/p&gt;
&lt;p&gt;With someone else’s platform, you often end up needing to construct elaborate work-arounds for missing functionality, or indeed cannot implement a required feature at all. As an example, I once used a platform which had an e-mail auto-responder, but one which could not be put behind a spam checker, or which was able to examine the SMTP envelop. To use it meant producing spam back-scatter, which is a receipe to get quickly banned from many e-mail systems. There was no way to use the feature in practice.&lt;/p&gt;
&lt;p&gt;As a project progresses, assuming it can navigate the maze of requirements and implement features fully, you then have trouble with the productionizing. Change control is an obvious example.&lt;/p&gt;
&lt;p&gt;With code, we’re used to being able to create a change, deploy that into a separate environment to test a change, and then be able to deploy into production. Or, failing that, we can deploy into production but switch the feature on progressively, so that if there are errors we can pick them up quickly and resolve them without impacting all our users.&lt;/p&gt;
&lt;p&gt;With “no code”, it tends to be difficult or impossible to have a non-production environment. Even if you do have one, accurately copying changes over from one to the other is non-trivial. Salesforce has some excellent tooling available to make this work, and even in that environment it’s extremely difficult to do.&lt;/p&gt;
&lt;h2 id=&quot;where-does-no-code-succeed&quot;&gt;Where does “No code” succeed?&lt;/h2&gt;
&lt;p&gt;Questionning the need for software in the first instance is always a good idea, but “No Code” systems are extremely good for putting together proofs-of-concept which can demonstrate the value of moving forward with development.&lt;/p&gt;
&lt;p&gt;As non-IT systems, they’re also incredibly useful for getting actual business user design input and feedback. While we talk a lot about agile development, it’s very rare that I see end-users on the development teams themselves: giving people access to tools where they can contribute and participate must be an unalloyed good.&lt;/p&gt;
&lt;p&gt;There are many tools which, while not “no code” per se, also allow users to produce more technical output. My favourite example is Looker, the business intelligence tool, but there are many such in different niches. As an aside on Looker: I find it extremely interesting that a lot of the model development in that environment happens in plain text, using regular software development tooling. I think this is one of the reasons it has ended up being successful.&lt;/p&gt;

&lt;p&gt;I think “no code” as an alternative to most mainstream development is a pipe dream. None of the progress over the last 70 years makes me think we’re anywhere close to replacing text-based development (arguably, since the introduction of the web, we’ve gone backwards).&lt;/p&gt;
&lt;p&gt;The various “no code” tools are extremely valuable, but I think must be deployed somewhat sparingly. They are not a software development silver bullet, and as likely to make situations worse rather than better.&lt;/p&gt;
&lt;p&gt;In particular, I think business executives without technical backgrounds need to be extremely wary of the siren’s call. But then, I’m a software development CTO, so I would say that, wouldn’t I?&lt;/p&gt;
&lt;p&gt;The sweet spot for me is the “power user”: the user of IT who is extremely adept already, and is probably bending tools beyond their design. Giving them an environment in which to deliver is extremely important, but this should be a joint effort with more technical staff - the two sides should not be in opposition.&lt;/p&gt;
&lt;p&gt;Share this:   &lt;/p&gt;
</description>
<pubDate>Mon, 13 Jan 2020 12:27:32 +0000</pubDate>
<dc:creator>ealexhudson</dc:creator>
<og:type>blog</og:type>
<og:title>The 'No Code' Delusion</og:title>
<og:description>Increasingly popular in the last couple of years, I think 2020 is going to be the year of “no code”: the movement that say you can write business logic and even entire applications without having the training of a software developer. I empathise with people doing this, and I think some of the “no code” tools are great. But I also thing it’s wrong at heart.</og:description>
<og:url>https://www.alexhudson.com/2020/01/13/the-no-code-delusion/</og:url>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.alexhudson.com/2020/01/13/the-no-code-delusion/</dc:identifier>
</item>
</channel>
</rss>