<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>How to Hack an Expensive Camera</title>
<link>https://alexhude.github.io/2019/01/24/hacking-leica-m240.html</link>
<guid isPermaLink="true" >https://alexhude.github.io/2019/01/24/hacking-leica-m240.html</guid>
<description>&lt;h2 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;/h2&gt;
&lt;hr/&gt;&lt;p&gt;This research started in 2013, so if you find some of my methods silly and dangerous - you are right, they were. However, I still learnt a lot from the process.&lt;/p&gt;

&lt;h2 id=&quot;prologue&quot;&gt;Prologue&lt;/h2&gt;
&lt;hr/&gt;&lt;p&gt;It all started several months before my first child was born. My wife and I always wanted a Leica camera and suddenly we realized that if we didn’t buy it now, we will not be able to for a while. So we put in an order for M240 and … bam, backlog for almost half a year. Pretty soon I got bored waiting and started to explore the Leica website. The downloads section caught my attention immediately. Well, you can guess why - firmware images!&lt;/p&gt;

&lt;h2 id=&quot;leica-firmware-files&quot;&gt;Leica firmware files&lt;/h2&gt;
&lt;hr/&gt;&lt;h3 id=&quot;leica-m8-firmware&quot;&gt;Leica M8 firmware&lt;/h3&gt;
&lt;p&gt;It was unencrypted, uncompressed file (&lt;code class=&quot;highlighter-rouge&quot;&gt;m8-2_005.upd&lt;/code&gt;) starting with &lt;code class=&quot;highlighter-rouge&quot;&gt;PWAD&lt;/code&gt; magic&lt;a href=&quot;https://alexhude.github.io/2019/01/24/hacking-leica-m240.html#references&quot;&gt;[1]&lt;/a&gt;. Does anyone recognise it? Yes you got it right - Doom Patch WAD format. These guys seem to love the classics. The format is very well documented and writing the splitting tool was a pretty simple task to do&lt;a href=&quot;https://alexhude.github.io/2019/01/24/hacking-leica-m240.html#references&quot;&gt;[2]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It is actually very funny, because later when I was looking into the compressed Leica T firmware, the first thing I did was to check the compression methods used by id Software in the past. Wikipedia says they used LHA&lt;a href=&quot;https://alexhude.github.io/2019/01/24/hacking-leica-m240.html#references&quot;&gt;[3]&lt;/a&gt; which is essentially LZW. But when I tried some generic LZW decompressors it didn’t work, so I started to look for an id Software specific implementation and voila, the one from Catacomb Armageddon source&lt;a href=&quot;https://alexhude.github.io/2019/01/24/hacking-leica-m240.html#references&quot;&gt;[4]&lt;/a&gt; was spot on. I have to admit it was a lucky coincidence.&lt;/p&gt;
&lt;p&gt;Anyway, back to M8, this is the firmware structure&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;RULES:      0x0000008C (    3036:0x00000BDC) - XML description
LUTS:       0x00000C68 (  183274:0x0002CBEA)
 GAMMA:     0x0000007C (   31760:0x00007C10)
 GAIN:      0x00007C8C (   50344:0x0000C4A8)
 LEICA:     0x00014134 (    7000:0x00001B58)
 BLEMISH:   0x00015C8C (     250:0x000000FA)
 WREF:      0x00015D88 (   82480:0x00014230)
 OBJ:       0x00029FB8 (   11268:0x00002C04)
 VERSION:   0x0002CBBC (      46:0x0000002E)
PXA:        0x0002D854 (  858384:0x000D1910)
BF:         0x000FF164 (  134522:0x00020D7A) - Analog Devices Blackfin Processor family
GUI:        0x0011FEE0 ( 3574180:0x003689A4)
 TRANS:     0x0000005C (   59988:0x0000EA54) - localization
 IMAGES:    0x0000EAB0 (  267433:0x000414A9)
  21_1PRT:  0x000000CC (   18411:0x000047EB) - JFIF image
  21_2GRP:  0x000048B8 (   23172:0x00005A84) - JFIF image
  21_3PAN:  0x0000A33C (   23034:0x000059FA) - JFIF image
  24_1PRT:  0x0000FD38 (   18489:0x00004839) - JFIF image
  24_2GRP:  0x00014574 (   23230:0x00005ABE) - JFIF image
  24_3PAN:  0x0001A034 (   22998:0x000059D6) - JFIF image
  28_1PRT:  0x0001FA0C (   22605:0x0000584D) - JFIF image
  28_2GRP:  0x0002525C (   23081:0x00005A29) - JFIF image
  28_3PAN:  0x0002AC88 (   23282:0x00005AF2) - JFIF image
  35_1PRT:  0x0003077C (   22496:0x000057E0) - JFIF image
  35_2GRP:  0x00035F5C (   23532:0x00005BEC) - JFIF image
  35_3PAN:  0x0003BB48 (   22881:0x00005961) - JFIF image
 FONT1:     0x0004FF5C ( 1522988:0x00173D2C)
 FONT2:     0x001C3C88 ( 1723676:0x001A4D1C)
 VERSION:   0x003689A4 (       0:0x00000000)
M16C:       0x00488884 (  130406:0x0001FD66) - Renesas M16C Family (Motorola S-record)
FPGA:       0x004A85EC (  131604:0x00020214) - Xilinx Spartan 3
FSL:        0x004C8800 (     814:0x0000032E) - First Stage Loader
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;IDA doesn’t support Blackfin processors out of the box, but one third-party plugin does&lt;a href=&quot;https://alexhude.github.io/2019/01/24/hacking-leica-m240.html#references&quot;&gt;[5]&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;leica-m9-firmware&quot;&gt;Leica M9 firmware&lt;/h3&gt;
&lt;p&gt;This one (m9-1_196.upd) looked encrypted (histogram shows distribution around 0.45%).&lt;br/&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/hist_m9.png&quot; alt=&quot;hist_m9.png&quot;/&gt;&lt;br/&gt;End of story? Maybe not, because Leica used to put pretty weak CPUs in their cameras and XOR encryption was very popular at that time in consumer electronics, so I decided to write a simple XOR manipulation tool to compare the firmware with itself and calculate some statistics along the way.&lt;/p&gt;
&lt;p&gt;Key length was determined by looking for the longest repeating pattern. This makes sense since any firmware usually includes big blocks of repeating data like 0x00/0xFF paddings or graphics with LUT pixels. The key itself is calculated based on per byte statistics within key length where most frequently occurring byte goes to key buffer. The output clearly pointed to XOR encryption. Then it was a matter of modifying my tool a bit to get a potential key and decrypt&lt;a href=&quot;https://alexhude.github.io/2019/01/24/hacking-leica-m240.html#references&quot;&gt;[6]&lt;/a&gt;. Yet again, it was PWAD file after decryption.&lt;/p&gt;
&lt;p&gt;The PWAD contents revealed the following structure:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;RULES:      0x0000007C (    2788:0x00000AE4) - XML description
LUTS:       0x00000B60 ( 4060616:0x003DF5C8)
 PROCESS:   0x0000004C ( 3900572:0x003B849C)
  CREATE:   0x0000004C (      20:0x00000014) - timestamp
  LUTS:     0x00000060 (  427744:0x000686E0)
  GAINMAP:  0x00068740 (   20008:0x00004E28)
  LENS:     0x0006D568 ( 3452724:0x0034AF34)
 CCD:       0x003B84E8 (  148662:0x000244B6)
  CREATE:   0x0000004C (      20:0x00000014) - timestamp
  BLEMISH:  0x00000060 (    1092:0x00000444)
  WREF:     0x000004A4 (  147452:0x00023FFC)
  LIN:      0x000244A0 (      22:0x00000016)
 ICCPROF:   0x003DC9A0 (    4304:0x000010D0)
  ECI-RGB:  0x0000003C (     540:0x0000021C)
  sRGB:     0x00000258 (    3144:0x00000C48)
  A-RGB:    0x00000EA0 (     560:0x00000230)
 WBPARAM:   0x003DDA70 (    7000:0x00001B58)
BF561:      0x003E0128 (  289128:0x00046968) - Analog Devices Blackfin Processor family
 bf0:       0x0000004C (  117846:0x0001CC56) - main processor firmware
 bf1:       0x0001CCA4 (  117826:0x0001CC42) - sub-processor firmware
 bf0.map:   0x000398E8 (   27072:0x000069C0) - main processor firmware map with symbols :D
 bf1.map:   0x000402A8 (   26304:0x000066C0) - sub-processor firmware map with symbols :D
BODY:       0x00426A90 (  143280:0x00022FB0) - Renesas M16C Family (Motorola S-record)
GUI:        0x00449A40 ( 3647624:0x0037A888)
 TRANS:     0x0000005C (  131656:0x00020248) - localization
 IMAGES:    0x000202A4 (  267433:0x000414A9)
  21_1PRT:  0x000000CC (   18411:0x000047EB) - JFIF image
  21_2GRP:  0x000048B8 (   23172:0x00005A84) - JFIF image
  21_3PAN:  0x0000A33C (   23034:0x000059FA) - JFIF image
  24_1PRT:  0x0000FD38 (   18489:0x00004839) - JFIF image
  24_2GRP:  0x00014574 (   23230:0x00005ABE) - JFIF image
  24_3PAN:  0x0001A034 (   22998:0x000059D6) - JFIF image
  28_1PRT:  0x0001FA0C (   22605:0x0000584D) - JFIF image
  28_2GRP:  0x0002525C (   23081:0x00005A29) - JFIF image
  28_3PAN:  0x0002AC88 (   23282:0x00005AF2) - JFIF image
  35_1PRT:  0x0003077C (   22496:0x000057E0) - JFIF image
  35_2GRP:  0x00035F5C (   23532:0x00005BEC) - JFIF image
  35_3PAN:  0x0003BB48 (   22881:0x00005961) - JFIF image
 FONT1:     0x00061750 ( 1522988:0x00173D2C)
 USBLOGO:   0x001D547C (    1775:0x000006EF) - JFIF image
 FONT2:     0x001D5B6C ( 1723676:0x001A4D1C)
FPGA:       0x007C42C8 (  150176:0x00024AA0) - Xilinx Spartan 3A
BF547:      0x007E8D68 (  937576:0x000E4E68) - Analog Devices Blackfin Processor family (FSL?)
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&quot;leica-m240-firmware&quot;&gt;Leica M240 firmware&lt;/h3&gt;
&lt;p&gt;It became a habit to check Leica firmware download page every morning. Eventually a new file became available - &lt;strong&gt;FW_M240_1_1_0_2.FW&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;It didn’t look encrypted, but it did look compressed…&lt;/p&gt;
&lt;h4 id=&quot;compression&quot;&gt;Compression&lt;/h4&gt;
&lt;p&gt;The histogram had a huge spike on 0x9D.&lt;br/&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/hist_m240.png&quot; alt=&quot;hist_m240.png&quot;/&gt;&lt;br/&gt;Probably this is some kind of compression magic. Googling for “9D” and “compression” didn’t help apart from the fact that 0x1F9D is used as LZW compression signature&lt;a href=&quot;https://alexhude.github.io/2019/01/24/hacking-leica-m240.html#references&quot;&gt;[7]&lt;/a&gt;. Just in case, I got myself familiar with LZ compression types and decided to look around for all bytes following 0x9D. I found four different patterns:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;9D 70 C4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;9D 00&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;9D XX YY&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;9D XX 8Y YY&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;My observations regarding these pattern types were:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;(1) appears once at address 0x30, probably used as compressed data indicator&lt;/li&gt;
&lt;li&gt;XX is never bigger than 0x7F&lt;/li&gt;
&lt;li&gt;last byte YY in (3) and (4) is never bigger than 0x7F&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;From what I learnt about LZ, it looks a lot like LZ77 or LZSS if YY is the step back distance and XX is the count of bytes to copy. And (2) is a special case to output 0x9D. Writing a simple C function implementing this logic confirmed that it was heading in the right direction, but still not quite there yet because of (4).&lt;/p&gt;
&lt;p&gt;I spent some time trying different ways to interpret it, but nothing worked. So I just asked some other folks what they thought and one guy noticed that according to my own observations fourth byte YY appears only when highest bit of 0x8Y is set adding extra length to step back distance. Shame on me, it was so obvious. Finally the decompressor started to output a valid stream… until it stuck somewhere in the middle of the firmware file. This was due to an unknown length of a sliding window. Extra debugging and experiments fixed it.&lt;/p&gt;
&lt;p&gt;Then it was time for a new tool to work with M240 firmware files&lt;a href=&quot;https://alexhude.github.io/2019/01/24/hacking-leica-m240.html#references&quot;&gt;[8]&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&quot;firmware-structure&quot;&gt;Firmware structure&lt;/h4&gt;
&lt;p&gt;To deal an unknown file format, I couldn’t think of anything better than to measure some offsets and sizes in the file and try to find the closest values in the file header. Like this block for example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;0x00: 1E 1C AF 2E 01 01 00 02 07 E1 EA 5E 00 5C 1A B1
0x10: 01 29 1A 7E AE 38 73 65 9C 3D 75 B4 34 2F 44 6E
0x20: 13 17 8E 6B 00 00 00 01 00 00 00 30 E1 E3 50 D1
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;eventually turned into:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;1E1CAF2E - looks like &quot;LEICA FILE&quot;
01010002 - 1.1.0.2
005C1AB1 - compressed file size (big endian)
01291A7E - uncompressed file size (big endian)
AE3873659C3D75B4342F446E13178E6B - MD5 hash
00000001 - number of payloads
00000030 - first payload offset
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The tool was growing along with better understanding of firmware structures and eventually the output looked like this:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;Running with options:
  + firmware folder: M240_FIRMWARE
  + verbose enabled

Open firmware file: FW_M240_1_1_0_2.FW
  File size:  6036193 | 0x005C1AE1

Parse container header:
  version:       1.1.0.2
  packed size:    6036145 | 0x005C1AB1
  unpacked size: 19470974 | 0x01291A7E
  body blocks:          1 | 0x00000001
  body offset:         48 | 0x00000030
  MD5:           AE387365 9C3D75B4 342F446E 13178E6B
  MD5 check:     PASSED

Uncompress container body: ◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼
  6036145 -&amp;gt; 19470974
  Uncompression: DONE

Split container:
  Number of sections:          9 | 0x00000009
  Section table size:        612 | 0x00000264
  Section table offset:       36 | 0x00000024
  Section 1
    Section Name:   &quot;[A]IMG_LOKI-212&quot;
    Section offset:        0 | 0x00000000
    Section size:    7340032 | 0x00700000
    Section base:    1048576 | 0x00100000
    MD5:            A8D55AA2 B0ACDB14 0673AD79 707674F3
    MD5 check:      PASSED
    Create file:    M240_FIRMWARE/IMG_LOKI-212.bin

  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  Section 9
    Section Name:   &quot;[A]IMG-LENSDATA-213&quot;
    Section offset: 19214844 | 0x012531FC
    Section size:     255478 | 0x0003E5F6
    Section base:   16252928 | 0x00F80000
    MD5:            39C2BEC0 27ED23F6 2C1C8513 EEE697B9
    MD5 check:      PASSED
    Create file:    M240_FIRMWARE/IMG-LENSDATA-213.bin
  Splitting container: DONE
Extraction COMPLETE!
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;M240 firmware includes one container with 9 items:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;IMG_LOKI-212.bin     - Application Processor Firmware
IMG_LOKI-213.bin     - Application Processor Firmware
CTRL_SYS-11.bin      - IO Processor Firmware
IMG-FPGA-212.bin     - Image Processing (Sensor) Firmware 
IMG-FPGA-213.bin     - Image Processing (Sensor) Firmware 
IMG-DSP-212.bin      - DSP Firmware
IMG-DSP-213.bin      - DSP Firmware
IMG-LENSDATA-212.bin - Lens Data
IMG-LENSDATA-213.bin - Lens Data
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;As you have noticed there are two sets of files in one firmware. Later I found out that 212 is an Image Board version meant that there were two different Leica M240 types in the wild. The current research is based on 212 one.&lt;/p&gt;

&lt;h2 id=&quot;system-control---ctrl_sys-11bin&quot;&gt;System Control - CTRL_SYS-11.bin&lt;/h2&gt;
&lt;hr/&gt;&lt;p&gt;The only common part was the firmware for some system control chip. This binary actually has lots of strings and looking through them it is not hard to get an idea what this part is for.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;$ strings CTRL_SYS-11.bin | rg SH
-&amp;gt; Test SH7216 data flash driver
-&amp;gt; Test SH7216 SCI driver
-&amp;gt; Test SH7216 I2C driver
-&amp;gt; Test SH7216 MTU2 driver
-&amp;gt; Test SH7216 ADC functions
-&amp;gt; Test SH7216 CMT driver
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;So this is a Renesas SH7216 (SH-2A) and it is responsible for early boot stage, IO tests and firmware update. IDA supports this processor type out of the box, so it was a matter of finding the correct image base which was known from the firmware section description - &lt;code class=&quot;highlighter-rouge&quot;&gt;0x0&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;Section Name:   &quot;[A]CTRL_SYS-11&quot;
Section offset: 14680064 | 0x00E00000
Section size:     917277 | 0x000DFF1D
Section base:          0 | 0x00000000
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I have obviously put it into IDA and recognised all functions, but didn’t really dig into it much since I was lot more curious about the main processor firmware.&lt;/p&gt;
&lt;p&gt;Another thing to note here is that UART from this chip is exposed on service port where it prints boot log. We will get back to that later.&lt;/p&gt;

&lt;h2 id=&quot;main-chip---img_loki-212bin&quot;&gt;Main Chip - IMG_LOKI-212.bin&lt;/h2&gt;
&lt;hr/&gt;&lt;p&gt;In order to start reverse engineering this firmware it was necessary to answer several questions first:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;what is the processor type&lt;/li&gt;
&lt;li&gt;what is the image base&lt;/li&gt;
&lt;li&gt;what OS it is based on if any&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;We already know image base from the &lt;strong&gt;M240FwTool&lt;/strong&gt;, it is &lt;code class=&quot;highlighter-rouge&quot;&gt;0x100000&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;Section Name:   &quot;[A]IMG_LOKI-212&quot;
Section offset:        0 | 0x00000000
Section size:    7340032 | 0x00700000
Section base:    1048576 | 0x00100000
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Answers to the remaining questions were stored inside the firmware in human readable form. This string for example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;$ strings ./IMG_LOKI-212.bin | rg Softune
6Softune REALOS/FR is Realtime OS for FR Family, based on micro-ITRON COPYRIGHT(C) FUJITSU LIMITED 1994-1999
...
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;So we are dealing with custom &lt;strong&gt;Fujitsu FR&lt;/strong&gt; (Leica calls it &lt;strong&gt;Maestro&lt;/strong&gt;) and &lt;strong&gt;Softune REALOS&lt;/strong&gt;. Actually, it was a lot more promising than Blackfin because IDA provides FR support out of the box.&lt;/p&gt;
&lt;h3 id=&quot;ida-fr-processor-module&quot;&gt;IDA FR processor module&lt;/h3&gt;
&lt;p&gt;Reality was not that bright though, because when I put the firmware file into IDA and chose FR processor I discovered that this module is barely usable due to missing instructions, absence of xrefs etc.&lt;/p&gt;
&lt;p&gt;I decided to fix it but ended up rewriting some parts completely&lt;a href=&quot;https://alexhude.github.io/2019/01/24/hacking-leica-m240.html#references&quot;&gt;[9]&lt;/a&gt;. This is the result:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/fr_asm.png&quot; alt=&quot;fr_asm.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/fr_switch.png&quot; alt=&quot;fr_switch.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Apart from fixes in &lt;code class=&quot;highlighter-rouge&quot;&gt;ana&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ins&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;out&lt;/code&gt; stages, brand new &lt;code class=&quot;highlighter-rouge&quot;&gt;emu&lt;/code&gt; code was able to&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;recognize various types of code and data xrefs&lt;/li&gt;
&lt;li&gt;recognize switch statements&lt;/li&gt;
&lt;li&gt;perform stack trace&lt;/li&gt;
&lt;li&gt;split stack arguments and local variables (thanks to clean FR ABI)&lt;/li&gt;
&lt;li&gt;recognise functions properly&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;But the biggest change as you have noticed was capital letters for instructions :)&lt;/p&gt;
&lt;p&gt;Would you like to see the full instruction set?&lt;/p&gt;
&lt;p&gt;Here it is:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;    ADD      OR       BTSTH    LSR     MOV     BN       LDRES     EXTSH   
    ADD2     ORH      MUL      LSR2    JMP     BP       STRES     EXTUH   
    ADDC     ORB      MULU     ASR     CALL    BV       COPOP     SRCH0   
    ADDN     EOR      MULH     ASR2    RET     BNV      COPLD     SRCH1   
    ADDN2    EORH     MULUH    LDI     INT     BLT      COPST     SRCHC   
    SUB      EORB     DIV0S    LDI     INTE    BGE      COPSV     LDM0    
    SUBC     BANDL    DIV0U    LDI     RETI    BLE      NOP       LDM1    
    SUBN     BANDH    DIV1     LD      BRA     BGT      ANDCCR    STM0    
    CMP      BORL     DIV2     LDUH    BNO     BLS      ORCCR     STM1    
    CMP2     BORH     DIV3     LDUB    BEQ     BHI      STILM     ENTER   
    AND      BEORL    DIV4S    ST      BNE     DMOV     ADDSP     LEAVE   
    ANDH     BEORH    LSL      STH     BC      DMOVH    EXTSB     XCHB    
    ANDB     BTSTL    LSL2     STB     BNC     DMOVB    EXTUB      
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;That’s it, nice and simple.&lt;/p&gt;
&lt;p&gt;By the way, you may have noticed that some instructions are not aligned:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;   BRA:D    loc_xxx
    LDI:8   #0x64, R5
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;It is not a bug in a processor module, but actually a feature of Fujitsu FR family. It is called “Delay Slot”&lt;a href=&quot;https://alexhude.github.io/2019/01/24/hacking-leica-m240.html#references&quot;&gt;[10]&lt;/a&gt; and quite typical for RISC processors.&lt;/p&gt;
&lt;p&gt;From the FR80 hardware manual&lt;a href=&quot;https://alexhude.github.io/2019/01/24/hacking-leica-m240.html#references&quot;&gt;[11]&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;The instruction that is located immediately following a branch instruction (the location is called a 
&quot;delay slot&quot;) is executed before branching, and an instruction at the branch destination is executed 
after that. Because the instruction in the delay slot is executed before the branch operation, the 
apparent execution speed is 1 cycle. 
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;So this is essentially a pipeline optimisation and it is better to keep that in mind since it is used everywhere in Leica firmware.&lt;/p&gt;
&lt;h3 id=&quot;softune-realos&quot;&gt;Softune REALOS&lt;/h3&gt;
&lt;p&gt;From wiki&lt;a href=&quot;https://alexhude.github.io/2019/01/24/hacking-leica-m240.html#references&quot;&gt;[12]&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;Softune is an Integrated development environment from Fujitsu for the Fujitsu FR, FR-V and F²MC 
processor families. It provides an REALOS µITRON realtime kernel.
It is for example used for Nikon DSLRs (see Nikon EXPEED) and some Pentax K mount cameras.
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;So it is quite a popular decent RTOS with tasks, semaphores and other goodies and I was wondering if it is possible to recognize some standard library functions in the Leica firmware.&lt;/p&gt;
&lt;h4 id=&quot;flirt&quot;&gt;FLIRT&lt;/h4&gt;
&lt;p&gt;I should have called this part “an ode to time wasting” and here is why.&lt;/p&gt;
&lt;p&gt;It was pretty hard to find Softune IDE in the wild but eventually I managed to get something to play with. As expected the IDE included libraries. There were four binaries:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;lib911.lib&lt;/li&gt;
&lt;li&gt;lib911e.lib&lt;/li&gt;
&lt;li&gt;lib911if.lib&lt;/li&gt;
&lt;li&gt;lib911p.lib&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;I don’t know why, but maybe by inertia, since I was so into hacking everything related to Leica but I have actually started to reverse engineer object format. Yes very well documented Object Module Format&lt;a href=&quot;https://alexhude.github.io/2019/01/24/hacking-leica-m240.html#references&quot;&gt;[13]&lt;/a&gt;. And yes of course I wrote a tool to deal with it&lt;a href=&quot;https://alexhude.github.io/2019/01/24/hacking-leica-m240.html#references&quot;&gt;[14]&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;Fujitsu RISC Library Tool v1.0
Usage: FRLibTool [-s start] [-i imagebase] [-o output] [-f index] [-dv] FIRMWARE.BIN LIBRARY.LIB

This tool will help you to find Softune REALOS library functions in FR (Fujitsu RISC) firmware.
Use following arguments:
    -f       Specify firmware image file
    -s       Specify firmware image scan offset
    -b       Specify firmware imagebase
    -o       Specify output type (exclusively)
       list  - list of functions
       idc   - IDC script
       py    - IDA python script
       pat   - FLAIR pattern file
    -i xxx   Specify index of particular function
    -d       Dump library
    -v       Be verbose
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Using this tool it was possible to create &lt;code class=&quot;highlighter-rouge&quot;&gt;*.pat&lt;/code&gt; files and use them as input for the &lt;strong&gt;IDA FLAIR&lt;/strong&gt; tool to generate signature files&lt;a href=&quot;https://alexhude.github.io/2019/01/24/hacking-leica-m240.html#references&quot;&gt;[15]&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;$ FRLibTool -o pat lib911.lib
$ FRLibTool -o pat lib911e.lib
$ FRLibTool -o pat lib911if.lib
$ FRLibTool -o pat lib911p.lib
...
$ sigmake -n &quot;SOFTUNE C/C++ Library&quot; lib911.pat lib911e.pat lib911if.pat lib911p.pat softune.sig
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Finally, after applying this signature, I was very pleased to see matches in &lt;strong&gt;IMG_LOKI-212.idb&lt;/strong&gt; .&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/fw_lib.png&quot; alt=&quot;fw_lib.png&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;layout&quot;&gt;Layout&lt;/h4&gt;
&lt;p&gt;The first thing I noticed was the amount of strings in the firmware. Many functions had their names in the body or at least some indication of their behaviour. This was extremely helpful during reverse engineering in order to understand the layout.&lt;/p&gt;
&lt;p&gt;It is also important to note here that some parts of the firmware file are copied to different address in reset handler. For example, there is a bootloader embedded in code which is relocated to the higher RAM in runtime.&lt;/p&gt;
&lt;p&gt;I had to create additional sections manually and eventually got to the following layout.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/fw_layout_sm.png&quot; alt=&quot;fw_layout_sm.png&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;interrupts&quot;&gt;Interrupts&lt;/h4&gt;
&lt;p&gt;An interrupt vector table can be found by TBR access (Table Base Register):&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;   LDI:32  #int_table, R0
   MOV     R0, TBR
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This usually happens in the reset vector handler right in the beginning of the firmware.&lt;/p&gt;
&lt;p&gt;Handler addresses in the table are stored in reverse order according to formula &lt;code class=&quot;highlighter-rouge&quot;&gt;TBR + (0x3FC - 4 × inum)&lt;/code&gt;, so that reset vector is located at the end of the table at offset &lt;code class=&quot;highlighter-rouge&quot;&gt;0x3FC&lt;/code&gt;.&lt;br/&gt;I found most of these interrupts defined in FR Hardware Manual&lt;a href=&quot;https://alexhude.github.io/2019/01/24/hacking-leica-m240.html#references&quot;&gt;[11]&lt;/a&gt; and just assumed Leica’s Maestro processor had a similar layout.&lt;br/&gt;Then looking into every handler and I tried to find a string or any other hint revealing interrupt purpose.&lt;/p&gt;
&lt;p&gt;This is what I ended up with:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/int_list.png&quot; alt=&quot;int_list.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Many of these like AUDIO/SDIO/VIDEO/JPEG/RAW were expected, but can you spot the most intriguing one?&lt;br/&gt;I am talking about &lt;code class=&quot;highlighter-rouge&quot;&gt;int_uart_in&lt;/code&gt;, which means the camera probably has some sort of UART CLI.&lt;/p&gt;
&lt;h4 id=&quot;syscalls&quot;&gt;Syscalls&lt;/h4&gt;
&lt;p&gt;Like pretty much any other OS, SOFTUNE REALOS is designed to use system calls for IPC and other operations.&lt;/p&gt;
&lt;p&gt;In assembly system call looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/syscall_before.png&quot; alt=&quot;syscall_before.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The actual address of system call hander is calculated in the following manner.&lt;br/&gt;Let’s start with finding &lt;code class=&quot;highlighter-rouge&quot;&gt;INT #0x40&lt;/code&gt; interrupt handler. According to the previous section this is&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;(0x3FC - 4 × inum) = (0x3FC - 4 × 0x40) = 0x2FC = int_realos_syscall
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Looking through the handler it is easy to find reference to the bottom of the syscall table. It contains 16bit words.&lt;br/&gt;Particular entry in this table is calculated using following formula &lt;code class=&quot;highlighter-rouge&quot;&gt;syscall_table_bottom + (num * 2)&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;[syscall_table_bottom + (-23 * 2)] = [syscall_table_bottom - 0x2E] = [0x1012EA] = 0xE68
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;As you can see this doesn’t looks like address, because the actual system call handler address is calculated as &lt;code class=&quot;highlighter-rouge&quot;&gt;syscall_table_bottom + offset&lt;/code&gt;.&lt;br/&gt;Following diagram shows the whole process.&lt;br/&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/syscall.png&quot; alt=&quot;syscall.png&quot;/&gt;&lt;br/&gt;All system calls and their magics are listed in SOFTUNE REALOS/FR KERNEL MANUAL&lt;a href=&quot;https://alexhude.github.io/2019/01/24/hacking-leica-m240.html#references&quot;&gt;[16]&lt;/a&gt;, therefore it was possible to recover all implemented handlers in the table and improve IDB a bit further.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/syscall_list.png&quot; alt=&quot;syscall_list.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;And of course, it was possible to make code even prettier defining syscall types in IDA.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/syscall_after.png&quot; alt=&quot;syscall_after.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;I actually wrote an IDA python script to find that and some other stuff automatically&lt;a href=&quot;https://alexhude.github.io/2019/01/24/hacking-leica-m240.html#references&quot;&gt;[17]&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;tasks&quot;&gt;Tasks&lt;/h4&gt;
&lt;p&gt;Looking at &lt;code class=&quot;highlighter-rouge&quot;&gt;sta_tsk&lt;/code&gt; syscall I noticed that there is no main task function passed as parameter, instead code is passing pid. This means it was a time to look for big array of task descriptors. And it makes sense to start from &lt;code class=&quot;highlighter-rouge&quot;&gt;sta_tsk&lt;/code&gt; itself.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;ROM:102180 sys_sta_tsk:
ROM:102180                 ST      RP, @-R15
ROM:102182                 LDUB    @(R14, 0x4F), R3
ROM:102184                 LDI:32  #word_100B80, R14
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Right at the beginning we see some reference. I had to play a bit with data types, but eventually pieces came together into this:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;ROM:100B80 word_100B80:    .word 0xF           ; number of tasks
ROM:100B82                 .word 0x1C          ; task descriptor size

ROM:100B84                 .long 0x82A09F5C    ; task 1 descriptor
ROM:100B88                 .long 0x1000D
ROM:100B8C                 .long 0
ROM:100B90                 .long 0x40000000
ROM:100B94                 .long sub_1A7DB2    ; task main
ROM:100B98                 .long 0x8286EEC0
ROM:100B9C                 .long 0

ROM:100BA0                 .long 0x82A09F88    ; task 2 descriptor
ROM:100BA4                 .long 0x20010
ROM:100BA8                 .long 0
ROM:100BAC                 .long 0x40000000
ROM:100BB0                 .long sub_1A6BD2    ; task main
ROM:100BB4                 .long 0x8287EEC0
ROM:100BB8                 .long 0
...
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;and so on. 15 tasks in total. It was just a matter of time to look into every single main function and find the name and purpose of the task (apart from the last one). Here is the full list:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;strong&gt;SubCPU&lt;/strong&gt;&lt;br/&gt;This task seems to be responsible for capture operations like exposure, live view control etc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;KeyManager&lt;/strong&gt;&lt;br/&gt;Most likely this task is handling hardware buttons.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GuiManager&lt;/strong&gt;&lt;br/&gt;Pretty big task implementing UI state machine and interface drawing.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DebugManager&lt;/strong&gt;&lt;br/&gt;Yeah, there is something for debug. Yum Yum.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FileManager&lt;/strong&gt;&lt;br/&gt;This task is all about file operations.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FamManager&lt;/strong&gt;&lt;br/&gt;I would say this one is responsible for file memory because it depends of File Manager and Memory Manager tasks&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MemoryManager&lt;/strong&gt;&lt;br/&gt;No surprises here, memory operations, pool control etc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ImageManager&lt;/strong&gt;&lt;br/&gt;This task is controlling encode/decode and other image workflows&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UsbManager&lt;/strong&gt;&lt;br/&gt;Current task is handling communication over USB which includes MassStorage, PTP and some Leica Custom protocol.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IOManager&lt;/strong&gt;&lt;br/&gt;Looks like this task is managing storage devices like SD and CF cards (what? CF? maybe that is what 213 board is all about).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SystemManager&lt;/strong&gt;&lt;br/&gt;Various things like general system operations, power control etc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SettingsManager&lt;/strong&gt;&lt;br/&gt;This task is handling changes in camera state and settings.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MonitorManager&lt;/strong&gt;&lt;br/&gt;The purpose of this task is to track changes in camera state and inform other tasks.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PeripheralManager&lt;/strong&gt;&lt;br/&gt;GPS, luminance and some other sensors are controlled by this task.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unknown&lt;/strong&gt;&lt;br/&gt;Unfortunately, I didn’t find anything relevant about this one&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Interesting to note here that there is one more outstanding task descriptor after main array.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;ROM:100D28 dword_100D28:   .long 0x82A0A1F0
ROM:100D2C                 .long 0x21
ROM:100D30                 .long 0
ROM:100D34                 .long 0x80000000
ROM:100D38                 .long tid16_task
ROM:100D3C                 .long 0x8285EEC0
ROM:100D40                 .long 0
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And the task function is just a branch to itself.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;ROM:101494 sub_101494:
ROM:101494                 BRA     sub_101494      ; CODE XREF: sub_101494
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This descriptor is referenced at the end of &lt;code class=&quot;highlighter-rouge&quot;&gt;start&lt;/code&gt; function which is responsible for spawning other tasks and firmware setup. So it is most likely an idle task.&lt;/p&gt;
&lt;h4 id=&quot;modules-and-messages&quot;&gt;Modules and Messages&lt;/h4&gt;
&lt;p&gt;Apart from tasks it was also possible to define some logical objects like IO and Peripheral modules. Modules are represented as group of message handlers within one of the tasks.&lt;/p&gt;
&lt;p&gt;IO group seems to include:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;IO Manager&lt;/li&gt;
&lt;li&gt;Sub CPU&lt;/li&gt;
&lt;li&gt;USB Manager&lt;/li&gt;
&lt;li&gt;USB PTP&lt;/li&gt;
&lt;li&gt;USB Leica Custom&lt;/li&gt;
&lt;li&gt;USB Mass Storage&lt;/li&gt;
&lt;li&gt;Key Manager&lt;/li&gt;
&lt;li&gt;Debug Manager&lt;/li&gt;
&lt;li&gt;Lens Manager&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;while Peripheral group has:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Peripheral Manager&lt;/li&gt;
&lt;li&gt;Luminance Sensor&lt;/li&gt;
&lt;li&gt;LEDs&lt;/li&gt;
&lt;li&gt;Beeper&lt;/li&gt;
&lt;li&gt;Tilt sensor&lt;/li&gt;
&lt;li&gt;Cover Detection&lt;/li&gt;
&lt;li&gt;GPS module&lt;/li&gt;
&lt;li&gt;3DAxis module&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Messaging system itself appears to utilise standard SOFTUNE structures:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RealOS_MsgPayload&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msgID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// +0x0
&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// +0x4
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RealOS_Message&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;os_reserved1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// +0x0
&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;os_reserved2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// +0x4
&lt;/span&gt;  
  &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;// +0x8
&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;// +0xC
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;RealOS_MsgPayload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// +0x10
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;As expected IPC is also designed to have several message groups. Taking into consideration that there are plenty of messages handled in tasks and modules, I was able to recover just some of these groups browsing through the firmware:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;0x1101xxxx - global system messages like  
             0x11010002 = SYS_UPDATE_BOOTLOADER or  
             0x11010005 = SYS_ERASE_SETTINGS
0x1102xxxx - messages related to image capture for example  
             0x11020001 = CMD_CAP_CAPTURE or  
             0x11020008 = IMAGE_STATUS_CHANGED  
0x1104xxxx - playback related messages cover events like  
             0x11040002 = PLY_DISABLE_PLAY_MODE or  
             0x11040004 = PLY_IMAGE_READY  
0x1108xxxx - various messages for PTP debugging e.g.  
             0x11080002 = DBG_CHANGE_LEVEL or  
             0x11080012 = DBG_WRITE_ROM_DUMP_SD  
0x2201xxxx - USB PTP messages like  
             0x22010108 = Camera Settings Change or  
             0x22010118 = Request DebugObject  
0x2202xxxx - pretty big group of SUBCPU messages including for example  
             0x22020002 = E_SUBCPU_REQUEST_M_EXPOSURE_REQUEST  
             0x22020015 = E_IO_SUBCPU_COMMAND_CLEANING_SENSOR  
0x2203xxxx - some other debugging message  
             0x22030001 = Debug String Command  
0x2204xxxx - various IO messages like  
             0x2204000C = Enable/Disable Mass Storage or  
             0x22040012 = Reset device  
0x330000xx - another big group related to UI, for instance  
             0x33000001 = Key pressed  
             0x33000007 = Lens connected  
0x440000xx - not many info about this one, but looks like image processing group  
             0x44000013 = E_IMG_CMD_CHANGE_PINFO  
0x55xxxxxx - group of FAM message groups:  
             0x558800xx = FAM file manager group or  
             0x558888xx = FAM menu settings 1 group  
0x6602xxxx - seems to be some LED control messages e.g.  
             0x66020001 - Toggle LED with X Hz  
             0x66020002 = Enable Continuous LED  
0x6604xxxx - beeper control messages including  
             0x66040001 = Beeper set or  
             0x66040007 = Card full noise  
0x6611xxxx - memory related debug messages  
0x6622xxxx - memory related image processing messages  
0x6660xxxx - some other memory related messages like   
             0x66600006 = memory HISTOGRAM  
             0x66600011 = memory RAWCOMP  
0x771100xx and 0x77AA00xx - camera mode switch related messages  
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Unfortunately, many others are still unknown.&lt;/p&gt;
&lt;h3 id=&quot;gui&quot;&gt;GUI&lt;/h3&gt;
&lt;p&gt;Let’s take a look again at the parts of the firmware file: &lt;strong&gt;CTRL_SYS-11&lt;/strong&gt;, &lt;strong&gt;IMG-LOKI-212&lt;/strong&gt;, &lt;strong&gt;IMG-DSP-212&lt;/strong&gt;, &lt;strong&gt;IMG-FPGA-212&lt;/strong&gt; and &lt;strong&gt;IMG-LENSDATA-212&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;What surprised me a bit was the absence of any GUI assets. But it must be somewhere and most likely it is embedded into &lt;strong&gt;IMG-LOKI-212&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;One of my usual approaches to firmware reverse engineering is to recover all possible cross references. Not only from code, but in data section as well. Then I browse through them trying to find some patterns or links to known parts of code.&lt;/p&gt;
&lt;p&gt;Leica firmware was not an exception. There were plenty of similar looking data sequences with addresses to data sequences with addresses to data sequences etc. Climbing up through this reference hierarchy I eventually appeared at a function I recognised.&lt;/p&gt;
&lt;p&gt;For example, I found data structure without any references&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;g_data = { ... }
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;It was referenced from other structure&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;g_data_struct1 = { ... , &amp;amp;g_data }
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Which was in turn referenced from one more structure&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;g_data_struct2 = { &amp;amp;g_data, ... }
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This data structure was referenced from code and passed as parameter to another function&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;func1()
╰ func2(..., &amp;amp;g_data_struct2, ...)
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;However, &lt;code class=&quot;highlighter-rouge&quot;&gt;func1()&lt;/code&gt; was not called directly from another function, instead if was stored in some array&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;g_func_list1[] = { ..., func1(), ... }
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Looking above I found a reference to &lt;code class=&quot;highlighter-rouge&quot;&gt;g_func_list1&lt;/code&gt; from code&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;func3() {
    g_func_list1[x]
}
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And again, this function was stored in array&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;g_func_list2[] = { ..., func3(), ... }
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Array itself was referenced from some other code&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;func4() {
    g_func_list2[x]
}
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Luckily this time function was called from another function and so on up until &lt;code class=&quot;highlighter-rouge&quot;&gt;gui_MADE_ApplicationRun&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;gui_Statemachine_DoStateChange()
╰ gui_MADE_ApplicationRun()
  ╰ func5()
    ╰ func4()
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;According to some strings, GUI subsystem is called “MADE” and page transitions are handled using &lt;code class=&quot;highlighter-rouge&quot;&gt;MADE_GetSysTri&lt;/code&gt; whatever it means. GUI state machine is mostly implemented in &lt;code class=&quot;highlighter-rouge&quot;&gt;gui_Statemachine_DoStateChange&lt;/code&gt; function. Later getting more and more information about GUI overall picture started to look like that&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/gui_calls.png&quot; alt=&quot;gui_calls.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;As you can see the core function dealing with GUI assets is &lt;code class=&quot;highlighter-rouge&quot;&gt;gui_CopyImageDesc&lt;/code&gt; (it is not a real name though). It has following arguments:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;n&quot;&gt;gui_CopyImageDesc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;                    &lt;span class=&quot;n&quot;&gt;dstAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;// R4 - destination address
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;UIDescType&lt;/span&gt;                    &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                     &lt;span class=&quot;c1&quot;&gt;// R5 - description type
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;UITarget&lt;/span&gt;                      &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                   &lt;span class=&quot;c1&quot;&gt;// R6 - rendering target
&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;                     &lt;span class=&quot;n&quot;&gt;descAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;// R7 - description address
&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt;                      &lt;span class=&quot;n&quot;&gt;always0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;// (SP + 0x0) - always 0
&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt;                      &lt;span class=&quot;n&quot;&gt;index1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                   &lt;span class=&quot;c1&quot;&gt;// (SP + 0x4) - index 1
&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt;                      &lt;span class=&quot;n&quot;&gt;index2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                   &lt;span class=&quot;c1&quot;&gt;// (SP + 0x8) - index 2
&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;                     &lt;span class=&quot;n&quot;&gt;x_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;// (SP + 0xC) - x offset
&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;                     &lt;span class=&quot;n&quot;&gt;y_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;// (SP + 0x10) - y offset
&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;                     &lt;span class=&quot;n&quot;&gt;unknown2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;// (SP + 0x14) -
&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;                     &lt;span class=&quot;n&quot;&gt;language1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;// (SP + 0x18) - language id 1
&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;                     &lt;span class=&quot;n&quot;&gt;language2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;// (SP + 0x1C) - language id 2
&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;                     &lt;span class=&quot;n&quot;&gt;funcAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;// (SP + 0x20) - function address
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;There are four types of asset descriptions:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIDescType0Header&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIDescType1Header&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIDescType2&lt;/span&gt;                &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIDescType3&lt;/span&gt;       
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                                 &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                        
    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;             &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;             &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;reg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                  &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;x_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;             &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;             &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;              &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;y_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;unknown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;             &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;unknown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;             &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;unknown1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;             &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                                    &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;unknown2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                        
                                                                      &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;unknown3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                        
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIDescType0Entry&lt;/span&gt;          &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIDescType1Entry&lt;/span&gt;              &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;tableoff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                        
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                                                                
    &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;x_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;            &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;x_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                   
    &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;y_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;            &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;y_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                   
    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;             &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                    
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                                    &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                    
                                     &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;total_w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
                                     &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;total_h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                    
                                     &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;unknown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                    
                                 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;    
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;First type has header with the reference to array of entries. Every entry has coordinates and pixel data address. Current type seems to be describing state-dependent elements, like icons which can be greyed out or disappear from the UI.&lt;/p&gt;
&lt;p&gt;Second type also starts with header and is used for localization, describing strings or blocks of text.&lt;/p&gt;
&lt;p&gt;Third type describes character maps for different languages.&lt;/p&gt;
&lt;p&gt;The last type is responsible for all other static assets, like images, backgrounds etc.&lt;/p&gt;
&lt;p&gt;Now let’s take a look at the image data itself.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;+0x00: 00 08 00 14 00 01 A2 FF 0A 04 05 FF 0C 04 03 FF
+0x10: 0D 04 03 FF 0E 04 02 FF 0E 04 02 FF 04 04 06 FF
+0x20: 04 04 02 FF 04 04 06 FF 04 04 02 FF 04 04 06 FF
+0x30: 04 04 02 FF 04 04 06 FF 04 04 02 FF 04 04 06 FF
+0x40: 04 04 02 FF 04 04 06 FF 04 04 02 FF 04 04 06 FF
+0x50: 04 04 02 FF 04 04 06 FF 04 04 02 FF 0E 04 02 FF
+0x60: 0E 04 02 FF 0D 04 03 FF 0D 04 03 FF 0C 04 04 FF
+0x70: 04 04 0C FF 04 04 0C FF 04 04 0C FF 04 04 0C FF
+0x80: 04 04 0C FF 04 04 0C FF 04 04 0C FF 04 04 0C FF
+0x90: 04 04 0D FF 02 04 2D FF 00 06 00 14 00 01 79 FF
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;First 6 bytes look like a little header followed by some repeating pattern where every second byte is either &lt;code class=&quot;highlighter-rouge&quot;&gt;0xFF&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;0x04&lt;/code&gt;. Obvious guess for the &lt;code class=&quot;highlighter-rouge&quot;&gt;0x0008&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;0x0014&lt;/code&gt; would be width and height in big endian. At the end of this dump we see a beginning of another sequence &lt;code class=&quot;highlighter-rouge&quot;&gt;00 06 00 14 00 01&lt;/code&gt; which is most likely next image asset (this was also confirmed by reference to it). So the size of actual image data is 146 bytes. But the size of an image should be &lt;code class=&quot;highlighter-rouge&quot;&gt;0x8 * 0x14 = 0xA0 = 160&lt;/code&gt;. Clearly image data is not pure pixels and not even 8-bit LUT because it is 14 bytes smaller. Then what? There must be some kind of compression involved.&lt;/p&gt;
&lt;p&gt;Looking at this hex dump it is hard to believe that they used something sophisticated. Also, Leica GUI is not very colourful or full of gradients and from my experience LUT is the best approach here. In this case UI assets will be full of repeating LUT indices like &lt;code class=&quot;highlighter-rouge&quot;&gt;03 03 03&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;A1 A1 A1&lt;/code&gt;. Usually compressor it trying to get rid of repeating information replacing it with reference. These arrays of indices are perfect data to compress even with simple method like RLE &lt;code class=&quot;highlighter-rouge&quot;&gt;[data][number]&lt;/code&gt;. In other words, write &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; to the output &lt;code class=&quot;highlighter-rouge&quot;&gt;number&lt;/code&gt; of times.&lt;/p&gt;
&lt;p&gt;Keeping all that in mind I assumed that this is most likely a simple image with two LUT colours (&lt;code class=&quot;highlighter-rouge&quot;&gt;0xFF&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;0x04&lt;/code&gt;) and the byte before colour is number of pixels to draw.&lt;/p&gt;
&lt;p&gt;“&lt;em&gt;And then you wrote another tool&lt;/em&gt;” you may think. Nope, I grabbed pen and paper and started to fill squares. Funny enough I still have this original drawing.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/ui_draft.png&quot; alt=&quot;ui_draft.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Somewhere along the way I realized that 160 pixels is not enough to fit this image, instead 0x8 and 0x14 should be multiplied by two. The third word 0x0001 is indicating if image is ASCII character so that final ImageAsset structure looks like this:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ImageAsset&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// width/2 (big endian)
&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// height/2 (big endian)
&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;ascii&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// 1 if ASCII character
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;image_data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// number of pixels to render
&lt;/span&gt;        &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// index of pixel color in LUT
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;However, one part is still missing - the LUT.&lt;/p&gt;
&lt;p&gt;It was not that hard to find one because a lot of references and structures were already recovered manually, so I was slowly scrolling through data sections looking for 256 item array of 16bit or 32bit values until I ran into this:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt; .long  0x7008080, 0x72D8080, 0x73C8080, 0x75A8080, 0x79B8080, 0x71DFF6B, 0x7BE8080, 0x7FF8080
 .long  0x77BBD27, 0x75B60E7, 0x7835F4A, 0x7D3089F, 0x7018080, 0x7028080, 0x7038080, 0x7048080
 .long  0x7058080, 0x7068080, 0x7078080, 0x7088080, 0x7098080, 0x70A8080, 0x70B8080, 0x70C8080
 .long  0x70D8080, 0x70E8080, 0x70F8080, 0x7108080, 0x7118080, 0x7128080, 0x7952B15, 0x7138080
 .long  0x7148080, 0x7158080, 0x7168080, 0x7178080, 0x7188080, 0x7198080, 0x71A8080, 0x71C8080
 .long  0x71D8080, 0x71E8080, 0x71F8080, 0x7338080, 0x7208080, 0x7218080, 0x7228080, 0x7238080
 .long  0x7248080, 0x7248080, 0x7268080, 0x7278080, 0x7288080, 0x7298080, 0x72A8080, 0x72B8080
 .long  0x72C8080, 0x75E8080, 0x7608080, 0x7628080, 0x7648080, 0x7678080, 0x7688080, 0x7698080
 .long  0x76B8080, 0x76E8080, 0x7708080, 0x7728080, 0x7758080, 0x7778080, 0x7798080, 0x77C8080
 .long  0x77E8080, 0x7818080, 0x7838080, 0x7868080, 0x7888080, 0x78B8080, 0x78D8080, 0x7908080
 .long  0x7928080, 0x7958080, 0x7978080, 0x7998080, 0x79C8080, 0x79D8080, 0x7668080, 0x79E8080
 .long  0x7A18080, 0x7A28080, 0x7A38080, 0x7A68080, 0x7A78080, 0x7A88080, 0x7AB8080, 0x7AC8080
 .long  0x7AD8080, 0x7B08080, 0x7B28080, 0x7B58080, 0x7B88080, 0x7B98080, 0x7BC8080, 0x7CC8080
 .long  0x7AB3BBB, 0x7E10094, 0x7E4556E, 0x4008080, 0x2922D17, 0x7B2AB00, 0x7C2A262, 0x71DFF6B
 .long  0x768D4A2, 0x769D4EA, 0x7BD88AE, 0x705997B, 0x70BB377, 0x711CC73, 0x717E66F, 0x7238866
 .long  0x729A262, 0x72FBB5E, 0x735D55A, 0x7417751, 0x747914D, 0x74DAA48, 0x753C444, 0x75F663B
 .long  0x76B9933, 0x7998080, 0x771B32F, 0x77D5526, 0x7836F22, 0x789881E, 0x78FA21A, 0x7159095
 .long  0x71AAA91, 0x720C38D, 0x726DD88, 0x7506F6A, 0x7568866, 0x75CA262, 0x762BB5E, 0x76E5E55
 .long  0x7747751, 0x77A914D, 0x780AA48, 0x78C4D3F, 0x792663B, 0x7988037, 0x79E9933, 0x7AA3C2A
 .long  0x7B05526, 0x7B66F22, 0x7BC881E, 0x72488AE, 0x72AA1AA, 0x72FBBA6, 0x735D4A2, 0x7427799
 .long  0x7489095, 0x74DAA91, 0x753C38D, 0x77E556E, 0x7836F6A, 0x7898866, 0x78FA262, 0x79C4459
 .long  0x7A15E55, 0x7A77751, 0x7AD914D, 0x7BF4D3F, 0x7CC8080, 0x7C5663B, 0x7CB8037, 0x7337FC8
 .long  0x73999C4, 0x73FB2C0, 0x745CCBB, 0x7757799, 0x74C54FF, 0x77B9095, 0x780AA91, 0x7AB3C72
 .long  0x7B1556E, 0x7B66F6A, 0x7BC8866, 0x74277E1, 0x74890DD, 0x74EAAD9, 0x754C3D5, 0x76066CC
 .long  0x7667FC8, 0x76C99C4, 0x772B2C0, 0x77E55B7, 0x7846EB3, 0x78A88AE, 0x790A1AA, 0x7526EFB
 .long  0x75787F7, 0x75DA1F3, 0x763BAEE, 0x76F5DE6, 0x77577E1, 0x77B90DD, 0x781AAD9, 0x78D4CD0
 .long  0x79366CC, 0x79F99C4, 0x7E10094, 0x7CF44A1, 0x7DB7799, 0x7E71A90, 0x7ED338C, 0x7FF8080
 .long  0x7328080, 0x7DC8080, 0x7C88080, 0x7508080, 0x775CD2C, 0x76944EA, 0x7808080, 0x71A61FF
 .long  0x7244D40, 0x7242C15, 0xFFF8080, 0xF338080, 0xF668080, 0xF998080, 0xFCC8080, 0xF008080
 .long  0xF4C54FF, 0xFAB3BBB, 0xFE10094, 0xFE4556E, 0xF952B15, 0xFDA7751, 0xFB2AB00, 0xFC2A262
 .long  0xF1DFF6B, 0xF68D4A2, 0xF69D4EA, 0xFBD88AE, 0xA922D17, 0xC6E4130, 0xE286963, 0x74C55FF
 .long  0x768D536, 0x7FF8080, 0x7FF8080, 0x7FF8080, 0x2922D17, 0x46E4130, 0x6286963,    0x8080
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Again, thanks to my work with Blackmagic Design I was able to spot YUV pixels straight away (like all these 8080 values for example).&lt;/p&gt;
&lt;p&gt;Obviously it was insane to dump the entire UI by hand with the pen again, so yeah, I created another tool - M240UITool&lt;a href=&quot;https://alexhude.github.io/2019/01/24/hacking-leica-m240.html#references&quot;&gt;[18]&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;Leica M (typ 240) UI Tool v1.0
Usage: ./M240UITool [-a address] [-i imagebase] [-s script] [-d dump] [-f folder] [-l LUT] [-rbv] FIRMWARE.BIN

This tool will help you to find UI resources in firmware.
Use following arguments:
    -a      Specify address of the gui_CopyImageDesc function (ex. 0x2F95E0)
    -i      Specify firmware imagebase
    -s      Specify IDC file name
    -c      Specify container file name
    -d      Specify dump image format
       png  - PNG format
       bmp  - BMP (ARGB) format
    -f      Specify folder for dumped images
    -l      Specify LUT for images (filename of address)
    -b      Specify number of bytes to display in verbose mode
    -r      Try to recover string characters
    -v      Be verbose
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Apart from dumping all image assets from firmware file to BMP/PNG, this tool can also produce IDC script for IDA to define all UI resources.&lt;/p&gt;
&lt;p&gt;So far we already know that &lt;code class=&quot;highlighter-rouge&quot;&gt;gui_CopyImageDesc&lt;/code&gt; is called multiple times from the function creating one UI page. I thought it would be awesome to have a UI resource browser and define all page-rendering functions. This is what the &lt;code class=&quot;highlighter-rouge&quot;&gt;-c&lt;/code&gt; option is for - it produces a special container to be used in the viewer.&lt;/p&gt;
&lt;p&gt;And who said that a UI resource browser cannot look fancy?&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/ui_emu.png&quot; alt=&quot;ui_emu.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Being interactive (semi-transparent buttons on a screenshot above) this tool allows you to not only scroll through EVF/LCD menu pages, but also to step through rendering stages within one page.&lt;/p&gt;
&lt;p&gt;Unfortunately, the source for this masterpiece was lost somewhere but the header files are still there as a part of M240UITool, so it is technically possible to recreate it from scratch.&lt;/p&gt;
&lt;h3 id=&quot;debug-menu&quot;&gt;Debug Menu&lt;/h3&gt;
&lt;p&gt;What is the first string the reverse engineer usually searches for in the target? I bet on “debug” and derivatives.&lt;/p&gt;
&lt;p&gt;There were plenty of interesting strings in firmware, but these ones are special:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;$ strings ./IMG_LOKI-212_1.1.0.2.bin | grep &quot;Debug Mode&quot;
GUI: State: %d! Scanning for Debug Mode successful
GUI: Scanning for Debug Mode: State: %d, Ignore long DEL
GUI: Scanning for Debug Mode: State: %d
GUI: Scanning for Debug Mode: State: %d, Ignore long DEL
GUI: Scanning for Debug Mode: State: %d
GUI: Scanning for Debug Mode: State: %d, Ignore long DEL
GUI: Scanning for Debug Mode: State: %d
GUI: Scanning for Debug Mode: State: %d, Ignore long DEL
GUI: Scanning for Debug Mode: State: %d
GUI: Scanning for Debug Mode: State: %d, Ignore long DEL
GUI: Scanning for Debug Mode: State: %d
...
GUI: ScanningForDebugWithKeyAndJoyStick(): g_GUI_CheckForDebugWithKeyAndJoyStick = %d
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Looks like it is possible to enter camera debug mode using some key combo. All these strings are referenced from one giant function &lt;code class=&quot;highlighter-rouge&quot;&gt;ScanningForDebugWithKeyAndJoyStick&lt;/code&gt; which implements key scanning state machine. This is what it looks like in IDA&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/debug_mode.png&quot; alt=&quot;debug_mode.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;I am not going to lie, it took some time to understand how hardware buttons are handled in firmware and then to recover enums for keys and joystick. But even after I got the combo it was pretty disappointing to find out that it does nothing. Probably it works only from some particular GUI page. A couple more evenings of manual GUI state machine tracing and this problem was solved as well pointing to the Reset menu page.&lt;/p&gt;
&lt;p&gt;Finally - Welcome to Debug Mode&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/debug_menu.png&quot; alt=&quot;debug_menu.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;I have been thinking a lot if I should make this combo public but decided not to do that. I respect the hard work Leica is doing bringing their unique cameras to market and don’t want to be responsible if their Service Centres are flooded with broken bodies as a result of some thoughtless curiosity.&lt;/p&gt;
&lt;p&gt;Having said that, I would like to provide some enums to make reverse engineering a lot easier for someone who is willing to walk the same path.&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ControlActionType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;kControlAction_Idle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// 0
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;kControlAction_Push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// 1
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;kControlAction_Release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// 2
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;kControlAction_LongPush&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// 3
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ControlBtnType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;kControlBtn_LV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;// 0
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;kControlBtn_PLAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;// 1
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;kControlBtn_DEL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;// 2
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;kControlBtn_ISO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;// 3
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;kControlBtn_MENU&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;// 4
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;kControlBtn_SET&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;// 5
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ControlJoystickType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;kControlJoy_INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;// 0
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;kControlJoy_Up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;// 1
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;kControlJoy_Down&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;// 2
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;kControlJoy_Left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;// 3
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;kControlJoy_Right&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;// 4
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&quot;ptp&quot;&gt;PTP&lt;/h3&gt;
&lt;p&gt;Looking around USB task code I was able to identify three different USB modes (it was also confirmed by debug menu):&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;PTP&lt;/li&gt;
&lt;li&gt;MSC (Mass Storage Class)&lt;/li&gt;
&lt;li&gt;Leica Custom&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;PTP is the most interesting one because it is well documented and allows you to control the camera.&lt;/p&gt;
&lt;p&gt;It is pretty easy to locate PTP handlers in the firmware because there are a lot of strings referenced from that code.&lt;br/&gt;All PTP requests are divided into three groups: &lt;strong&gt;Legacy&lt;/strong&gt;, &lt;strong&gt;Leica Extended (LE)&lt;/strong&gt; and &lt;strong&gt;Production&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Debug messages helped to name pretty much every code.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;Legacy:                            Leica Extented:                          Production:                           
0x1001 - GetDeviceInfo             0x9001 - Set Camera Settings             0x9100 - Open Production Session      
0x1002 - OpenSession               0x9002 - Get Camera Settings             0x9101 - Close Production Session     
0x1003 - CloseSession              0x9003 - Get Lens Parameter              0x9102 - UpdateFirmware               
0x1004 - Get Storage ID            0x9004 - Release Stage                   0x9103 - Open OSD Session             
0x1005 - Get Storage Info          0x9005 - Open LE Session                 0x9104 - Close OSD Session            
0x1006 - GetNumObjects             0x9006 - Close LE Session                0x9105 - Get OSD Data                 
0x1007 - GetObjectHandles          0x9007 - RequestObjectTransferReady      0x9106 - GetFirmwareStruct            
0x1008 - GetObjectInfo             0x9008 - GetGeoTackingData               0x910B - GetDebugMenu                 
0x1009 - GetObject                 0x900A - Open Debug Session              0x910C - SetDebugMenu                 
0x100A - Get Thumb                 0x900B - Close Debug Session             0x910D - ODIN Message                 
0x100B - Delete Object             0x900C - Get Debug Buffer                0x910E - GetDebugObjectHandles        
0x100E - Initiate Capture          0x900D - Debug Command String            0x910F - GetDebugObject               
0x1014 - GetDevicePropDesc         0x900E - Get Debug Route                 0x9110 - DeleteDebugObject            
0x1015 - GetDevicePropV            0x900F - SetIPTCData                     0x9111 - GetDebugObjectInfo           
0x101C - Initiate Open Capture     0x9010 - GetIPTCData                     0x9112 - WriteDebugObject             
                                   0x9020 - Get3DAxisData                   0x9113 - CreateDebugObject            
                                   0x9030 - OpenLiveViewSession             0x9114 - Calibrate 3Daxis             
                                   0x9031 - CloseLiveViewSession            0x9115 - Magnetic calibration         
                                   0x9033 - Unknown                         0x9116 - Get Viewfinder Data          
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The PTP interface implementation itself seems standard, however some commands have constrains that I intentionally omit here.&lt;/p&gt;
&lt;p&gt;Anyway, all the above is pretty exciting, so you may think “&lt;em&gt;Lets just connect camera over USB and start probing with libptp&lt;/em&gt;”.&lt;/p&gt;
&lt;p&gt;Oh, shi…&lt;/p&gt;
&lt;p&gt;Leica M240 does NOT have a USB port by design.&lt;/p&gt;

&lt;h2 id=&quot;handgrip-port&quot;&gt;Handgrip Port&lt;/h2&gt;
&lt;hr/&gt;&lt;p&gt;Leica doesn’t offer a lot of accessories for this camera, however there is one particularly interesting. I am talking about &lt;strong&gt;Leica Multifunctional Handgrip M (14495)&lt;/strong&gt;. It replaces the bottom metallic place and provides built-in GPS and several outputs like USB, SCA flash terminal, DIN/ISO-X and power sockets.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/hand_grip.jpg&quot; alt=&quot;hand_grip.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;And you may think again “&lt;em&gt;Awesome, let’s just buy that, attach it to the camera, connect the camera over USB and start probing with libptp&lt;/em&gt;”.&lt;/p&gt;
&lt;p&gt;Oh, shi…&lt;/p&gt;
&lt;p&gt;It costs almost $900 USD.&lt;/p&gt;
&lt;p&gt;It is like nine hundred reasons to craft my own adapter instead. However, just in case I set up eBay notifications for used grip.&lt;/p&gt;
&lt;h3 id=&quot;the-socket&quot;&gt;The Socket&lt;/h3&gt;
&lt;p&gt;Socket on a camera looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/socket_big.png&quot; alt=&quot;socket_big.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;I tried searching for it on the internet, but seriously, how would you describe it to google?&lt;/p&gt;
&lt;p&gt;Being a bit desperate I have started to think about some crazy things like gluing foil or needles to the eraser until one day at work in Blackmagic Design looking at camera PCB I have noticed that one socket has a very familiar shape. The next day I brought my Leica M240 to work and yes, it looked similar, just a lot longer with more contact pads.&lt;/p&gt;
&lt;p&gt;So it was a matter of asking our component manager for a part number and then browsing Samtec for the one I need - &lt;strong&gt;ERM8-013-05.0-L-DV-TR&lt;/strong&gt; &lt;a href=&quot;https://alexhude.github.io/2019/01/24/hacking-leica-m240.html#references&quot;&gt;[19]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/socket_samtec.png&quot; alt=&quot;socket_samtec.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;We also asked Samtec if it is possible to get a sample and yes, they kindly agreed to send us some.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/samtec_sample.png&quot; alt=&quot;samtec_sample.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;A bit of soldering, cardboard and tape to get my own breakout v2013.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/breakout_v2013.png&quot; alt=&quot;breakout_v2013.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Later in 2018 I decided to ask Samtec personally for another sample. However, this time I wanted something better.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ERCD-013-05.00-TTR-TTR-1-D&lt;/strong&gt; &lt;a href=&quot;https://alexhude.github.io/2019/01/24/hacking-leica-m240.html#references&quot;&gt;[20]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/samtec_breakout.png&quot; alt=&quot;samtec_breakout.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Then it was lots of soldering, swearing, wire cutting, swearing and soldering again just to get breakout v2018:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/breakout_v2018.png&quot; alt=&quot;breakout_v2018.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;pinout&quot;&gt;Pinout&lt;/h3&gt;
&lt;p&gt;The socket has 26 contacts - 13 on each side. Even before I managed to build my breakout I have done some research probing camera socket using multimeter and logic analyser. By the way, it is necessary to put a magnet on a bottom lid sensor in order for camera to think a cover is attached.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ground (camera is off, no battery)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I always start with the ground because it is safe and very easy to find.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/probe1_gnd.png&quot; alt=&quot;probe1_gnd.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;So there are 8 ground lines altogether (dark grey).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Potential (camera is on)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When the camera is ON it is possible to measure the potential on each pad in order to get an idea about logic and power levels.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/probe2_potential.png&quot; alt=&quot;probe2_potential.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The levels on 8-9 and 11-13 are too high to be logic, therefore I defined these pads as power (red).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Resistance (camera is off, no battery)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Another useful thing to measure is resistance. In some cases it helps to identify inputs and group some lines.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/probe3_resistance.png&quot; alt=&quot;probe3_resistance.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Linked outputs (camera is off, no battery)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Then I have decided to probe all external contact pads on the camera body to check if they are linked to the service port.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/probe4_links.png&quot; alt=&quot;probe4_links.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Flash Sync pad on hotshoe was directly connected to line 10.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Logic Analyser (camera is on)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Data for every line was captured using the following sequence:&lt;br/&gt;Turn ON, camera should be in LV mode, take a picture, start video recording&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/signals.png&quot; alt=&quot;signals.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;There were two lines showing some kind of data transfers: 01 and 21.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;01&lt;/strong&gt; - 115200, 8 Bits per Transfer, 1 Stop Bit, Even Parity Bit, LSB first&lt;br/&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/signal01_orig.png&quot; alt=&quot;signal01_orig.png&quot;/&gt; Every 500ms it sends some counter &lt;code class=&quot;highlighter-rouge&quot;&gt;C3 3C 02 81 00 01 00 82&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;C3 3C 02 81 01 01 00 83&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;C3 3C 02 81 02 01 00 80&lt;/code&gt; …&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;21&lt;/strong&gt; - 115200, 8 Bits per Transfer, 1 Stop Bit, No Parity Bit, LSB first&lt;br/&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/signal21_orig.png&quot; alt=&quot;signal21_orig.png&quot;/&gt; It sends SH7216 bootloader log (“Leica Camera AG” on screenshot above)&lt;/p&gt;
&lt;p&gt;Let’s mark them with dark blue. It is pretty sad not having Maestro log exposed somewhere even with maximum debug level enabled in Debug menu.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/probe5_signals.png&quot; alt=&quot;probe5_signals.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The ones with signals have resistance around 310kOhm.&lt;br/&gt;Don’t know why, but I assumed that other data lines might have similar resistance or close. Therefore, I have defined ~300kOhm, ~200kOhm and ~100kOhm lines as data as well (shades of blue on a picture).&lt;/p&gt;
&lt;p&gt;Combined, I have the following picture.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/probe6_combined.png&quot; alt=&quot;probe6_combined.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;12 candidates for data lines. But how to test that? After a brief chat with hardware people about electrical safety working with ICs, I ended up poking via 4kOhm resistor which supposed to reduce the current to a level where I am unlikely to burn inputs.&lt;/p&gt;
&lt;h3 id=&quot;uarts&quot;&gt;UARTs&lt;/h3&gt;
&lt;p&gt;Another assumption I made is that RX line should be next to TX line. Lines 02, 03 and 20 look like good candidates because they are both 3.3V like TX.&lt;br/&gt;Initially, I used Bus Pirate to talk to these lines, but unfortunately it couldn’t keep up giving a pretty messy result. Then I switched to SiLabs based cables since they are a lot more reliable and do not conflict with anything on macOS.&lt;/p&gt;
&lt;p&gt;At first, I attached cable TX to pin 20 and started to type &lt;code class=&quot;highlighter-rouge&quot;&gt;help&lt;/code&gt; after bootloader banner. As expected the camera echoed characters back after a short delay.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/bl_uart.png&quot; alt=&quot;bl_uart.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The next UART looking pins are 02 and 03. Unfortunately, there was no indication that someone is listening on those.&lt;/p&gt;
&lt;p&gt;On a diagram known UARTs are defined with darker shade of green.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/probe7_uart.png&quot; alt=&quot;probe7_uart.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;usb&quot;&gt;USB&lt;/h3&gt;
&lt;p&gt;It all started with a cut in half USB cable with header in a middle and 4kOhm resistors to probe. Signal integrity for differential pair? Nah, it didn’t bother me much back then :)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/usb_probe.png&quot; alt=&quot;usb_probe.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Then I sniffed some consumer devices with USB at home to get an idea what USB comm looks like.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Canon Camera&lt;/strong&gt;&lt;br/&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/USB_1DX_Connect.png&quot; alt=&quot;USB_1DX_Connect.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Blackmagic Pocket Cinema Camera&lt;/strong&gt;&lt;br/&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/USB_BMPCC_Connect.png&quot; alt=&quot;USB_BMPCC_Connect.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Canon Camcoder&lt;/strong&gt;&lt;br/&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/USB_CanonHV40_Connect.png&quot; alt=&quot;USB_CanonHV40_Connect.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JVC Camcoder&lt;/strong&gt;&lt;br/&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/USB_JVC_Cam_Connect.png&quot; alt=&quot;USB_JVC_Cam_Connect.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Keyring&lt;/strong&gt;&lt;br/&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/USB_Keyring_Connection.png&quot; alt=&quot;USB_Keyring_Connection.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;KidiZoom Camera&lt;/strong&gt;&lt;br/&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/USB_KidiZoom_Connect.png&quot; alt=&quot;USB_KidiZoom_Connect.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;They are all a bit different, but initial D- D+ state is low. Well, good to know, let’s check what is left on grip port similar to that:&lt;br/&gt;&lt;strong&gt;22&lt;/strong&gt; - unlikely because D- D+ are differential pair and should be pretty close&lt;br/&gt;&lt;strong&gt;04/05&lt;/strong&gt; - unlikely because they have different resistance&lt;br/&gt;&lt;strong&gt;14/15&lt;/strong&gt; - unlikely because they have different resistance&lt;br/&gt;&lt;strong&gt;15/16&lt;/strong&gt; - possible because they are close and have similar resistance&lt;/p&gt;
&lt;p&gt;Therefore, I attached USB D- D+ to the 15/16 and plugged it to iMac…&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/usb_ptp.jpg&quot; alt=&quot;usb_ptp.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;There was USB PTP on a screen, but camera still didn’t appear on the host. I tried setting up various USB termination schemes on breadboard but nothing worked. Beagle showed many corrupted packets and other errors. Eventually I gave up and got back to reverse engineering firmware.&lt;/p&gt;
&lt;p&gt;This is the final pinout with USB painted as dark green.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/probe8_final.png&quot; alt=&quot;probe8_final.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Who would have thought, several years later I received desired eBay notification and managed to get this grip pretty cheap.&lt;/p&gt;
&lt;p&gt;Finally, I could check my PTP findings. But first I was obviously curious what does USB PHY look like inside the grip.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/grip_pcb.png&quot; alt=&quot;grip_pcb.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Inside I found SMSC 2512b hub&lt;a href=&quot;https://alexhude.github.io/2019/01/24/hacking-leica-m240.html#references&quot;&gt;[21]&lt;/a&gt; right on the way from grip socket to Mini USB connector. Chip is operating in default mode because there is no EEPROM and SCL/SDA pins are pulled down. First downstream port is routed to the camera body socket, but second one is not connected to anything.&lt;/p&gt;
&lt;p&gt;I am probably missing something but to me this solution doesn’t make a lot of sense. Looking through datasheet I found out that chip has “Fully integrated USB termination and Pull-up/Pull-down resistors”. Maybe Leica engineers decided not to implement their own USB PHY and used the one in a hub which is very well tested and works out of the box. Actually, I can’t blame them because I tried to do same myself earlier and it seems to be a tricky task. It can also be a feature protecting grip from counterfeit, who knows.&lt;/p&gt;
&lt;p&gt;Anyway, if you are good at USB PHY and willing to help, feel free to ping me, it should be possible to make USB port work without grip :)&lt;/p&gt;
&lt;h3 id=&quot;ptp-again&quot;&gt;PTP again&lt;/h3&gt;
&lt;p&gt;As I have said it was time to play with Leica PTP extensions.&lt;/p&gt;
&lt;p&gt;Luckily I found pretty cool C++ library to use instead of libptp - libEasyPTP&lt;a href=&quot;https://alexhude.github.io/2019/01/24/hacking-leica-m240.html#references&quot;&gt;[22]&lt;/a&gt;. It also didn’t take long to write tool based on this library since I already knew some constrains in Leica PTP interface.&lt;br/&gt;An even if &lt;strong&gt;M240PTPTool&lt;/strong&gt; is quite buggy it was good enough as PoC&lt;a href=&quot;https://alexhude.github.io/2019/01/24/hacking-leica-m240.html#references&quot;&gt;[23]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are just two PTP requests used: &lt;strong&gt;GetDebugBuffer (0x900C)&lt;/strong&gt; and &lt;strong&gt;DebugCommandString (0x900D)&lt;/strong&gt;.&lt;br/&gt;By the way, in order to make modules to fill debug log it is necessary to set Debug Level to “Debug” or “Debug RAW” in Debug Menu.&lt;/p&gt;
&lt;p&gt;Tool CLI provided several options:&lt;br/&gt;&lt;strong&gt;exit&lt;/strong&gt; quits the tool;&lt;br/&gt;&lt;strong&gt;flush&lt;/strong&gt; command dumps debug buffer from the camera:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;M240&amp;gt; flush
I:[00:11:468]|01| DATE/TIME CORRECTED by 5921 sec
D:[00:12:079]|00| Send message from TID 0 to TID 1 over MBX 3 - length: 4 - MesgID: 0x22020103
D:[00:12:179]|00| Send message from TID 0 to TID 1 over MBX 3 - length: 4 - MesgID: 0x22020103
D:[00:12:282]|11| Message received from TID 0 for TID 1 over MBX 3
D:[00:12:283]|11| Message received from TID 0 for TID 1 over MBX 3
D:[00:12:301]|00| Send message from TID 0 to TID 1 over MBX 3 - length: 4 - MesgID: 0x22020103
D:[00:12:402]|00| Send message from TID 0 to TID 1 over MBX 3 - length: 4 - MesgID: 0x22020103
D:[00:12:502]|00| Send message from TID 0 to TID 1 over MBX 3 - length: 4 - MesgID: 0x22020103
...
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;any other text will be sent as Debug Command String to the camera. &lt;code class=&quot;highlighter-rouge&quot;&gt;help&lt;/code&gt; for example outputs all possible commands with arguments:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;M240&amp;gt; help
 ********* debug command description ********

 exposure request
 Description: requests a release from Sub CPU
 Parameter 1: Exposure Time TV

 still request
 Description: simulates the -still request- command flow of Sub CPU
 Parameter: no
 
 ...

 send Message;[Parameter1];[Parameter2];[Parameter2];...;...
 Description: Sending Message to Task
 Parameter 1: Receiver Task ID
 Parameter 2: Command ID
 Parameter 3: Command Data[0] (32 Bit)
 Parameter 4: Command Data[1] (32 Bit)
 Parameter 5:   .
 Parameter 6:   .
 use maximum 10 Parameter
 
 ...
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The complete list is quite big, but wow, we can send raw Softune messages to any task! What is so interesting we could have sent there…&lt;/p&gt;
&lt;p&gt;The other popular string to search in firmware - “dump”. Let’s take a look what we have got in our case.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;$ strings IMG_LOKI-212_1.1.0.2.bin | rg -i dump
GUI: HEX DUMP: Address: %x, Length: %d
HSK: DBG_WRITE_ROM_DUMP_SD: File was properly opened, but it seems to be empty.
ROM_DUMP
HSK: DBG_WRITE_ROM_DUMP_SD: Flushing Dump to ROM. Size %d
SD:\ROM_DUMP.bin
HSK: DBG_WRITE_ROM_DUMP_SD Command received!
ROM_DUMP.bin
HSK: DUMP failed, no cards inserted!
HSK: DUMP FlashROM to SD card.
HSK: DUMP FlashROM to CF card.
Dumping files to card
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Apparently, it is possible to dump firmware to SD card. It is easy to find code responsible for that by reference to string “Dumping files to card”. It is located in giant message hander of System Task (pid 11 as we already know) and can be triggered by message &lt;code class=&quot;highlighter-rouge&quot;&gt;0x11080006&lt;/code&gt; without arguments.&lt;/p&gt;
&lt;p&gt;Type &lt;code class=&quot;highlighter-rouge&quot;&gt;send Message;11;0x11080006&lt;/code&gt; in &lt;strong&gt;M240PTPTool&lt;/strong&gt;, hit enter and observe the screen.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/ptp_dump.jpg&quot; alt=&quot;ptp_dump.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Then remove SD card and check what is on it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/ptp_dump_files.png&quot; alt=&quot;ptp_dump_files.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Here it is, full dump including firmware.&lt;/p&gt;
&lt;p&gt;As you can see this opens up endless possibilities. For example, it should be possible to build tiny device with MCU supporting USB host and some buttons to perform complex message sequences…&lt;/p&gt;
&lt;p&gt;And then we had our second child :)&lt;/p&gt;

&lt;h2 id=&quot;epilogue&quot;&gt;Epilogue&lt;/h2&gt;
&lt;hr/&gt;&lt;p&gt;There is usually a way to study devices you don’t want to break without opening body or soldering wires to its PCB. Below are my tips if you don’t mind:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;get all the public information you can about the device: datasheets, tear downs, internal photos, videos from factory &lt;a href=&quot;https://alexhude.github.io/2019/01/24/hacking-leica-m240.html#references&quot;&gt;[24]&lt;/a&gt; ;)&lt;/li&gt;
&lt;li&gt;dig into firmware if you have it in order to find hints about external outputs&lt;/li&gt;
&lt;li&gt;always google for various magics and odd byte sequences you find in firmware files&lt;/li&gt;
&lt;li&gt;measure GND/Potential/Resistance for all unknown exposed external pads&lt;/li&gt;
&lt;li&gt;probe these pads with logic analyser&lt;/li&gt;
&lt;li&gt;always remember about safety measures dealing with electronics&lt;/li&gt;
&lt;li&gt;try to exclude pads not in your scope of interest (ground, power)&lt;/li&gt;
&lt;li&gt;if you can’t recognize signal by its analogue view, try googling for the most popular ones (USB/UART/SPI/I2C/1Wire)&lt;/li&gt;
&lt;li&gt;if you have some ideas about signal nature, try verifying yourself with similar consumer electronics&lt;/li&gt;
&lt;li&gt;think &lt;del&gt;three&lt;/del&gt; five times before trying to SEND data to device, like driving line low/high&lt;/li&gt;
&lt;li&gt;and of course, do not hesitate to ask other people&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/pwned_end.png&quot; alt=&quot;pwned_end.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/getorix&quot;&gt;@getorix&lt;/a&gt; | &lt;a href=&quot;http://github.com/alexhude&quot;&gt;github.com/alexhude&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;happy-hacking&quot;&gt;Happy Hacking!&lt;/h3&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;hr/&gt;&lt;p&gt;[1] &lt;a href=&quot;https://github.com/alexhude/LeicaHacks/tree/master/Tools/pwadsplit&quot;&gt;https://github.com/alexhude/LeicaHacks/tree/master/Tools/pwadsplit&lt;/a&gt;&lt;br/&gt;[2] &lt;a href=&quot;http://doom.wikia.com/wiki/WAD&quot;&gt;http://doom.wikia.com/wiki/WAD&lt;/a&gt;&lt;br/&gt;[3] &lt;a href=&quot;https://en.wikipedia.org/wiki/LHA_(file_format)&quot;&gt;https://en.wikipedia.org/wiki/LHA_(file_format)&lt;/a&gt;&lt;br/&gt;[4] &lt;a href=&quot;https://github.com/CatacombGames/CatacombArmageddon/blob/master/LZW.C&quot;&gt;https://github.com/CatacombGames/CatacombArmageddon/blob/master/LZW.C&lt;/a&gt;&lt;br/&gt;[5] &lt;a href=&quot;https://github.com/krater/Blackfin-IDA-Pro-Plugin&quot;&gt;https://github.com/krater/Blackfin-IDA-Pro-Plugin&lt;/a&gt;&lt;br/&gt;[6] &lt;a href=&quot;https://github.com/alexhude/LeicaHacks/tree/master/Tools/xortool&quot;&gt;https://github.com/alexhude/LeicaHacks/tree/master/Tools/xortool&lt;/a&gt;&lt;br/&gt;[7] &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_file_signatures&quot;&gt;https://en.wikipedia.org/wiki/List_of_file_signatures&lt;/a&gt;&lt;br/&gt;[8] &lt;a href=&quot;https://github.com/alexhude/LeicaHacks/tree/master/Tools/M240FwTool&quot;&gt;https://github.com/alexhude/LeicaHacks/tree/master/Tools/M240FwTool&lt;/a&gt;&lt;br/&gt;[9] &lt;a href=&quot;https://github.com/alexhude/LeicaHacks/tree/master/Tools/fr&quot;&gt;https://github.com/alexhude/LeicaHacks/tree/master/Tools/fr&lt;/a&gt; (requires IDA 6.4 SDK)&lt;br/&gt;[10] &lt;a href=&quot;https://en.wikipedia.org/wiki/Delay_slot&quot;&gt;https://en.wikipedia.org/wiki/Delay_slot&lt;/a&gt;&lt;br/&gt;[11] &lt;a href=&quot;https://edevice.fujitsu.com/fj/MANUAL/MANUALp/en-pdf/CM71-10158-1E.pdf&quot;&gt;https://edevice.fujitsu.com/fj/MANUAL/MANUALp/en-pdf/CM71-10158-1E.pdf&lt;/a&gt; (link is dead)&lt;br/&gt;[12] &lt;a href=&quot;https://en.wikipedia.org/wiki/Softune&quot;&gt;https://en.wikipedia.org/wiki/Softune&lt;/a&gt;&lt;br/&gt;[13] &lt;a href=&quot;https://en.wikipedia.org/wiki/Relocatable_Object_Module_Format&quot;&gt;https://en.wikipedia.org/wiki/Relocatable_Object_Module_Format&lt;/a&gt;&lt;br/&gt;[14] &lt;a href=&quot;https://github.com/alexhude/LeicaHacks/tree/master/Tools/FRLibTool&quot;&gt;https://github.com/alexhude/LeicaHacks/tree/master/Tools/FRLibTool&lt;/a&gt;&lt;br/&gt;[15] &lt;a href=&quot;https://github.com/alexhude/LeicaHacks/tree/master/IDA/signatures/&quot;&gt;https://github.com/alexhude/LeicaHacks/tree/master/IDA/signatures/&lt;/a&gt;&lt;br/&gt;[16] &lt;a href=&quot;https://www.fujitsu.com/downloads/MICRO/fma/pdfmcu/resofrke-cm71-00321-3e.pdf&quot;&gt;https://www.fujitsu.com/downloads/MICRO/fma/pdfmcu/resofrke-cm71-00321-3e.pdf&lt;/a&gt;&lt;br/&gt;[17] &lt;a href=&quot;https://github.com/alexhude/LeicaHacks/tree/master/IDA/scripts/softune.py&quot;&gt;https://github.com/alexhude/LeicaHacks/tree/master/IDA/scripts/softune.py&lt;/a&gt;&lt;br/&gt;[18] &lt;a href=&quot;https://github.com/alexhude/LeicaHacks/tree/master/Tools/M240UITool&quot;&gt;https://github.com/alexhude/LeicaHacks/tree/master/Tools/M240UITool&lt;/a&gt;&lt;br/&gt;[19] &lt;a href=&quot;https://www.samtec.com/products/erm8-013-05.0-l-dv-tr&quot;&gt;https://www.samtec.com/products/erm8-013-05.0-l-dv-tr&lt;/a&gt;&lt;br/&gt;[20] &lt;a href=&quot;https://www.samtec.com/products/ercd-013-05.00-ttr-ttr-1-d&quot;&gt;https://www.samtec.com/products/ercd-013-05.00-ttr-ttr-1-d&lt;/a&gt;&lt;br/&gt;[21] &lt;a href=&quot;https://www.microchip.com/wwwproducts/en/USB2512B&quot;&gt;https://www.microchip.com/wwwproducts/en/USB2512B&lt;/a&gt;&lt;br/&gt;[22] &lt;a href=&quot;https://github.com/TrueJournals/libEasyPTP&quot;&gt;https://github.com/TrueJournals/libEasyPTP&lt;/a&gt;&lt;br/&gt;[23] &lt;a href=&quot;https://github.com/alexhude/LeicaHacks/tree/master/Tools/M240PTPTool&quot;&gt;https://github.com/alexhude/LeicaHacks/tree/master/Tools/M240PTPTool&lt;/a&gt;&lt;br/&gt;[24] &lt;a href=&quot;https://youtu.be/p4t-OVIvuy8?t=196&quot;&gt;https://youtu.be/p4t-OVIvuy8?t=196&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 26 Jan 2019 02:05:14 +0000</pubDate>
<dc:creator>pi-rat</dc:creator>
<og:title>How to Hack an Expensive Camera and Not Get Killed by Your Wife</og:title>
<og:description>Disclaimer</og:description>
<og:url>/2019/01/24/hacking-leica-m240.html</og:url>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://alexhude.github.io/2019/01/24/hacking-leica-m240.html</dc:identifier>
</item>
<item>
<title>H-1B: Oracle favored hiring foreign graduates of US colleges over American grads</title>
<link>https://www.mercurynews.com/2019/01/25/h-1b-oracle-favored-hiring-foreign-graduates-of-u-s-colleges-over-american-grads-feds-allege</link>
<guid isPermaLink="true" >https://www.mercurynews.com/2019/01/25/h-1b-oracle-favored-hiring-foreign-graduates-of-u-s-colleges-over-american-grads-feds-allege</guid>
<description>&lt;p&gt;Not only did Redwood City software titan Oracle favor hiring Asians for key departments, it favored non-citizen Asian graduates of U.S. colleges over American graduates, the federal government claimed in a lawsuit.&lt;/p&gt;
&lt;p&gt;The Department of Labor alleges in its suit against Oracle that a “vast majority” of the firm’s hires through its college recruiting program were non-citizen visa holders from Asia.&lt;/p&gt;
&lt;p&gt;“These students required work authorization to remain in the United States after graduation,” the Labor Department said in a court filing. “In other words, Oracle overwhelmingly hires workers dependent upon Oracle for sponsorship to remain in the United States. This preference for a workforce that is dependent on Oracle for authorization to work in the United States lends itself to suppression of that workforce’s wages.”&lt;/p&gt;
&lt;p&gt;Of about 500 recent college and university graduates hired into three job categories at Oracle from 2013 to 2016, some 90 percent were Asian, the filing said.&lt;/p&gt;
&lt;p&gt;At the same time, Asians, blacks and women were “systematically underpaid,” according to allegations in the lawsuit, which also claimed that unequal pay cost workers &lt;a href=&quot;https://www.mercurynews.com/2019/01/22/oracles-bias-against-women-blacks-and-asians-cost-more-than-400-million-in-lost-wages-feds/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;$400 million&lt;/a&gt; in lost wages.&lt;/p&gt;
&lt;p&gt;The company this week &lt;a href=&quot;https://www.oracle.com/corporate/pressrelease/oracle-statement-012319.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;attacked&lt;/a&gt; the lawsuit, calling it “meritless” and claiming it was based on false allegations and “cherry-picked statistics.”&lt;/p&gt;
&lt;p&gt;Oracle, led by executive chairman Larry Ellison, said it is in compliance with its regulatory obligations — as a federal contractor it falls under the oversight of the government — and committed to equality.&lt;/p&gt;
&lt;p&gt;The government also alleged in the lawsuit that Oracle, amid the legal action, destroyed documents related to its hiring process.&lt;/p&gt;
&lt;p&gt;Oracle’s pay gap for Asians and women began at hiring, when those workers were either started at lower salaries than other employees, or hired into lower-paid jobs, the suit alleged. And the gap broadened over time, according to the suit. “The longer that female and Asian employees stay with Oracle, the less they are paid in relation to other employees,” the suit claimed.&lt;/p&gt;

&lt;p&gt;The lawsuit caught the attention of Ron Hira, a Howard University professor and critic of the use of foreign workers on visas. Foreign citizens recently graduated from U.S. colleges and universities usually work under an Optional Practical Training work permit or H-1B visa, both of which have been the focus of reported abuse. Oracle is not alone in favoring foreign workers who can be paid less because they’re tied to a company by their visa or work permit, Hira alleged.&lt;/p&gt;
&lt;p&gt;“Industry’s key argument for more cheap H-1B and OPT guest workers is that there’s a shortage of U.S. talent,” Hira said. “That argument completely falls apart in the face of these findings. In fact, the industry is using the visa programs for cheaper guest workers, undercutting U.S. workers, damaging the U.S. talent pipeline, and exacerbating its woeful record on workforce diversity.”&lt;/p&gt;

&lt;p&gt;Compete America, a lobby group representing Oracle, other tech giants and a variety of businesses and organizations, in 2017 called high-skills immigration programs “necessary components for maintaining our country’s leadership and competitiveness.” The group &lt;a href=&quot;https://competeamerica.org/2017/04/19/compete-america-statement-h-1b-visas-president-trumps-buy-american-hire-american-executive-order/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;said&lt;/a&gt; it supported “balanced reforms to the H-1B program, ensuring that all employers are using these visas in the spirit Congress intended – to fill jobs requiring highly skilled professionals in fields where qualified U.S. workers are harder to find.”&lt;/p&gt;

</description>
<pubDate>Sat, 26 Jan 2019 00:49:48 +0000</pubDate>
<dc:creator>hanging</dc:creator>
<og:type>article</og:type>
<og:title>H-1B: Oracle favored hiring foreign graduates of U.S. colleges over American grads, feds allege</og:title>
<og:url>https://www.mercurynews.com/2019/01/25/h-1b-oracle-favored-hiring-foreign-graduates-of-u-s-colleges-over-american-grads-feds-allege/</og:url>
<og:description>Redwood City software firm fires back that it’s committed to equality, and in compliance with regulations.</og:description>
<og:image>https://www.mercurynews.com/wp-content/uploads/2016/08/20140918__0919oracle21.jpg?w=645&amp;h=430</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.mercurynews.com/2019/01/25/h-1b-oracle-favored-hiring-foreign-graduates-of-u-s-colleges-over-american-grads-feds-allege/</dc:identifier>
</item>
<item>
<title>Mark Zuckerberg Speaks Down to Users and Misses the Point</title>
<link>https://www.eff.org/deeplinks/2019/01/wsj-op-ed-mark-zuckerberg-speaks-down-users-and-misses-point</link>
<guid isPermaLink="true" >https://www.eff.org/deeplinks/2019/01/wsj-op-ed-mark-zuckerberg-speaks-down-users-and-misses-point</guid>
<description>&lt;p&gt;&lt;span&gt;Mark Zuckerberg’s&lt;/span&gt; &lt;a href=&quot;https://www.wsj.com/articles/the-facts-about-facebook-11548374613&quot; rel=&quot;noreferrer&quot;&gt;&lt;span&gt;op-ed in the Wall Street Journal today&lt;/span&gt;&lt;/a&gt; &lt;span&gt;(paywalled, but summarized&lt;/span&gt; &lt;a href=&quot;https://www.cnet.com/news/mark-zuckerberg-defends-facebook-advertising-model-we-dont-sell-peoples-data/&quot; rel=&quot;noreferrer&quot;&gt;&lt;span&gt;here&lt;/span&gt;&lt;/a&gt;&lt;span&gt;) relies on all-too-familiar refrains to explain the dubious principles and so-called “facts” behind Facebook’s business model. It’s the same old song we’ve heard before. And, as usual, it wildly misses users’ actual privacy concerns and preferences.&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;&quot;Users Prefer Relevant Ads&quot;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;He starts with one of his greatest hits: “People consistently tell us that if they’re going to see ads, they want them to be relevant.” This perpetuates the ad industry’s favorite false dichotomy: either consumers can have “relevant” ads—targeted using huge collections of sensitive behavioral data—or they can be bombarded by spam for knock-off Viagra and weight-loss supplements. The truth is that ads&lt;/span&gt; &lt;a href=&quot;https://digiday.com/media/new-york-times-gdpr-cut-off-ad-exchanges-europe-ad-revenue/&quot; rel=&quot;noreferrer&quot;&gt;&lt;span&gt;can be made “relevant”&lt;/span&gt; &lt;em&gt;&lt;span&gt;and&lt;/span&gt;&lt;/em&gt; &lt;span&gt;profitable based on the context in which they’re shown&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, like putting ads for outdoor gear in a nature magazine. To receive relevant ads, you do not need to submit to data brokers harvesting the entire history of everything you’ve done on and off the web and using it to build a sophisticated dossier about who you are.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Zuckerberg soothingly reassures users that “You can find out why you’re seeing an ad and change your preferences to get ads you’re interested in. And you can use our transparency tools to see every different ad an advertiser is showing to anyone else.” But a&lt;/span&gt; &lt;a href=&quot;http://www.pewinternet.org/2019/01/16/facebook-algorithms-and-personal-data/&quot; rel=&quot;noreferrer&quot;&gt;&lt;span&gt;recent Pew survey&lt;/span&gt;&lt;/a&gt; &lt;span&gt;on how users understand Facebook’s data collection and advertising practices, and&lt;/span&gt; &lt;a href=&quot;https://www.eff.org/deeplinks/2019/01/guided-tour-data-facebook-uses-target-ads&quot;&gt;&lt;span&gt;our own efforts&lt;/span&gt;&lt;/a&gt; &lt;span&gt;to disentangle Facebook’s ad preferences, tell a far different story.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Pew found that 74% of U.S. adult Facebook users didn’t even know that Facebook maintained information on their advertising interests and preferences in the first place. When Pew directed users to the ad preferences page where some of this information resides, 88% found there that Facebook had generated inferences about them, including household income level and political and ethnic “affinities.” Over a quarter of respondents said the categories “do not very or at all accurately represent them.”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;It gets worse. Even when the advertising preferences Facebook had assigned to them&lt;/span&gt; &lt;em&gt;&lt;span&gt;were&lt;/span&gt;&lt;/em&gt; &lt;span&gt;relevant to their real interests, users were not comfortable with the company compiling that information. As Pew reports, “&lt;/span&gt;&lt;span&gt;about half of users (51%) say they are not very or not at all comfortable with Facebook creating this list about their interests and traits.”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;So we’d like to know: on what basis does Zuckerberg claim that users—who Pew has demonstrated are overwhelming unaware of and uncomfortable with the data collection and targeting that powers Facebook’s business model—are clamoring for the kinds of “relevant” ads Facebook is providing?&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;center-image&quot;&gt;&lt;img src=&quot;https://www.eff.org/files/styles/large/public/2019/01/25/consentflow.png?itok=0miWSIRL&quot; alt=&quot;&quot; class=&quot;image-large&quot; width=&quot;480&quot; height=&quot;475&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;center-image&quot;&gt;&lt;em&gt;&lt;span&gt;Source: https://fil.forbrukerradet.no/wp-content/uploads/2018/06/2018-06-27-deceived-by-design-final.pdf&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;His op-ed goes on to claim that “when we asked people for permission to use this information to improve their ads as part of our compliance with the European Union’s General Data Protection Regulation, the vast majority agreed because they prefer more relevant ads.” If Zuckerberg is referring here to the consent requests that users were prompted to click through last spring (documented in detail in&lt;/span&gt; &lt;a href=&quot;https://fil.forbrukerradet.no/wp-content/uploads/2018/06/2018-06-27-deceived-by-design-final.pdf&quot; rel=&quot;noreferrer&quot;&gt;&lt;span&gt;this report&lt;/span&gt;&lt;/a&gt; &lt;span&gt;and pictured above), then this statement is a stretch at best. Those requests were part of a convoluted process engineered to maximize the ways a user could say “yes.” In particular, it took one tap of a button to “opt in” to Facebook’s terms, but three levels of dialog to decline.&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&quot;We Don’t Sell Your Data*&quot;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;Next, Zuckerberg deploys Facebook’s favorite PR red herring: he says that Facebook does not sell your data. It may be the case that Facebook does not transfer user data to third parties in exchange for money. But there are many other ways to invade users’ privacy. For example,&lt;/span&gt; &lt;span&gt;the company indisputably&lt;/span&gt; &lt;em&gt;&lt;span&gt;does&lt;/span&gt;&lt;/em&gt; &lt;span&gt;sell access to users’ personal information in the form of targeted advertising spots. No matter&lt;/span&gt; &lt;a href=&quot;https://www.eff.org/deeplinks/2018/04/what-we-want-learn-zuckerbergs-congressional-testimonies-week&quot;&gt;&lt;span&gt;how Zuckerberg slices it&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, Facebook’s business model&lt;/span&gt; &lt;a href=&quot;https://www.eff.org/deeplinks/2018/12/new-documents-show-facebook&quot;&gt;&lt;span&gt;revolves around monetizing your data&lt;/span&gt;&lt;/a&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Transparency is a necessary, but not sufficient, principle for Facebook to rely on here.&lt;/span&gt; &lt;span&gt;Just knowing how you're being tracked&lt;/span&gt; &lt;a href=&quot;https://www.eff.org/deeplinks/2018/04/were-uncanny-valley-targeted-advertising&quot;&gt;&lt;span&gt;doesn't make it less invasive&lt;/span&gt;&lt;/a&gt;&lt;span&gt;. And any transparency efforts have to confront the fact that&lt;/span&gt; &lt;a href=&quot;http://www.pewresearch.org/fact-tank/2018/03/27/americans-complicated-feelings-about-social-media-in-an-era-of-privacy-concerns/&quot; rel=&quot;noreferrer&quot;&gt;&lt;span&gt;roughly half of Americans&lt;/span&gt;&lt;/a&gt; &lt;span&gt;simply don't trust social media companies like Facebook to protect their data in the first place.&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;Saying One Thing and Lobbying Another&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;Zuckerberg ends his op-ed with a call for government regulation codifying the principles of “transparency, choice, and control.” But in reality, Facebook is tirelessly fighting against laws that might do just that: it is actively&lt;/span&gt; &lt;a href=&quot;https://www.eff.org/deeplinks/2018/12/eff-appellate-court-protect-biometric-privacy&quot;&gt;&lt;span&gt;battling to undermine Illinois’ Biometric Information Privacy Act&lt;/span&gt;&lt;/a&gt; &lt;span&gt;in court, and the Internet Association, of which Facebook is a member, has asked California legislators to&lt;/span&gt; &lt;a href=&quot;https://www.eff.org/deeplinks/2018/12/facebooks-latest-scandal-shows-we-need-stronger-privacy-laws&quot;&gt;&lt;span&gt;weaken the California Consumer Privacy Act&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, and is pushing for a national law&lt;/span&gt; &lt;a href=&quot;https://www.eff.org/deeplinks/2018/09/game-rigged-congress-invites-no-consumer-privacy-advocates-its-consumer-privacy&quot;&gt;&lt;span&gt;only if it “preempts” and rolls back those vital state protections&lt;/span&gt;&lt;/a&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Nearly all of Zuckerberg’s claims will be familiar to anyone who’s followed Facebook’s&lt;/span&gt; &lt;a href=&quot;https://www.eff.org/deeplinks/2018/12/data-privacy-scandals-and-public-policy-picking-speed-2018-year-review&quot;&gt;&lt;span&gt;recent privacy issues&lt;/span&gt;&lt;/a&gt;&lt;span&gt;. But Facebook users are ready for something new: policies that promote real privacy and user choice, and not just the tired excuses and non-sequiturs that Zuckerberg published today.&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 26 Jan 2019 00:33:18 +0000</pubDate>
<dc:creator>panarky</dc:creator>
<og:type>article</og:type>
<og:title>In WSJ Op-Ed, Mark Zuckerberg Speaks Down to Users and Misses the Point</og:title>
<og:url>https://www.eff.org/deeplinks/2019/01/wsj-op-ed-mark-zuckerberg-speaks-down-users-and-misses-point</og:url>
<og:description>Mark Zuckerberg’s op-ed in the Wall Street Journal today (paywalled, but summarized here) relies on all-too-familiar refrains to explain the dubious principles and so-called “facts” behind Facebook’s business model. It’s the same old song we’ve heard before. And, as usual, it wildly misses users’...</og:description>
<og:image>https://www.eff.org/files/banner_library/facebook-thumbs_0.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.eff.org/deeplinks/2019/01/wsj-op-ed-mark-zuckerberg-speaks-down-users-and-misses-point</dc:identifier>
</item>
<item>
<title>Party is over for dirt-cheap solar panels, says China executive</title>
<link>https://www.reuters.com/article/us-davos-meeting-solar-gcl-idUSKCN1PI2OQ</link>
<guid isPermaLink="true" >https://www.reuters.com/article/us-davos-meeting-solar-gcl-idUSKCN1PI2OQ</guid>
<description>&lt;p&gt;DAVOS, Switzerland (Reuters) - The global solar power industry is about to lose a major competitive windfall as prices of Chinese-made solar panels begin to recover after a collapse last year, the leader of one of the world’s top manufacturers said on Thursday.&lt;/p&gt;
&lt;div class=&quot;PrimaryAsset_container&quot; readability=&quot;8&quot;&gt;
&lt;div class=&quot;Image_container&quot; tabindex=&quot;-1&quot; readability=&quot;11&quot;&gt;
&lt;div class=&quot;LazyImage_container LazyImage_dark&quot;&gt;&lt;img src=&quot;https://s3.reutersmedia.net/resources/r/?m=02&amp;amp;d=20190125&amp;amp;t=2&amp;amp;i=1349698245&amp;amp;r=LYNXNPEF0O0XM&amp;amp;w=20&quot; aria-label=&quot;A man walks past solar panels on the roof of a building in Bangkok, Thailand, August 9, 2017. REUTERS/Athit Perawongmetha&quot;/&gt;
&lt;/div&gt;

&lt;p&gt;&lt;span&gt;A man walks past solar panels on the roof of a building in Bangkok, Thailand, August 9, 2017. REUTERS/Athit Perawongmetha&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;“The party if definitely over,” said Eric Luo, president of China’s GCL System Integration Technology Co, a top-10 maker of solar panels, feeding the fastest-growing renewable power sector.&lt;/p&gt;
&lt;p&gt;Solar panel prices tumbled around 30 percent last year after China, the world’s largest producer, cut subsidies to shrink its bloated solar industry, pushing smaller manufacturers to the brink of collapse.&lt;/p&gt;
&lt;p&gt;To raise cash and stay afloat, manufacturers cleared inventory and diverted sales offshore, sending prices into a downward spiral - offering up a windfall for solar power generators and investors in solar farms.&lt;/p&gt;
&lt;p&gt;Luo, speaking to Reuters at the World Economic Forum in the Swiss ski resort of Davos this week, said GCL’s vertically integrated business model cushioned it from the downturn in prices as its solar farms benefited from cheaper panels.&lt;/p&gt;
&lt;p&gt;The pain will mostly be felt by smaller Chinese producers, which lack international supply chains, triggering industry consolidation or forcing them to close, he added.&lt;/p&gt;
&lt;p&gt;Luo said solar panel prices were already stabilizing and he expected them to rebound by 10 to 15 percent as the Chinese industry consolidates over the next year or two.&lt;/p&gt;
&lt;p&gt;Given panels represent close to half of a solar farm’s installation costs, that threatens to eat into the returns of investors.&lt;/p&gt;
&lt;p&gt;China is home to almost a third of the world’s cumulative installed solar capacity and its manufacturers dominate the industry, despite being slapped with anti-dumping tariffs and getting caught up more recently in the U.S.-China trade war.&lt;/p&gt;
&lt;p&gt;In September, the European Union ended restrictions on the sale of Chinese solar panels but Washington continues to impose an anti-dumping duty. They are also subject to President Donald Trump’s more recent hike to general tariffs on Chinese imports.&lt;/p&gt;
&lt;p&gt;GCL still counts the United States as a major market but is expanding rapidly in other markets, following in the wake of Beijing’s huge Belt and Road international development program, Luo said, adding that overseas business would account for 75 percent of GCL’s solar panel shipments this year.&lt;/p&gt;
&lt;p&gt;At home, Luo said China was rapidly nearing the point where the solar industry could operate without any form of subsidy. He said northwest China, where sun was more plentiful and land less expensive, had already reached that milestone.&lt;/p&gt;
&lt;p&gt;Most of the rest of the country would follow this year, before the age of subsidies ends completely in 2020, he said.&lt;/p&gt;
&lt;p&gt;“If you need subsidies (at that point), you just stop.”&lt;/p&gt;
&lt;div class=&quot;Attribution_container&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;Attribution_attribution&quot; readability=&quot;7&quot;&gt;
&lt;p class=&quot;Attribution_content&quot;&gt;Editing by Elaine Hardcastle&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;StandardArticleBody_trustBadgeContainer&quot;&gt;&lt;span class=&quot;StandardArticleBody_trustBadgeTitle&quot;&gt;Our Standards:&lt;/span&gt;&lt;span class=&quot;trustBadgeUrl&quot;&gt;&lt;a href=&quot;http://thomsonreuters.com/en/about-us/trust-principles.html&quot;&gt;The Thomson Reuters Trust Principles.&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
</description>
<pubDate>Fri, 25 Jan 2019 21:31:53 +0000</pubDate>
<dc:creator>howard941</dc:creator>
<og:title>Party is over for dirt-cheap solar panels, says China executive</og:title>
<og:url>https://www.reuters.com/article/us-davos-meeting-solar-gcl-idUSKCN1PI2OQ</og:url>
<og:type>article</og:type>
<og:description>The global solar power industry is about to lose a major competitive windfall as...</og:description>
<og:image>https://s3.reutersmedia.net/resources/r/?m=02&amp;d=20190125&amp;t=2&amp;i=1349698245&amp;w=1200&amp;r=LYNXNPEF0O0XM</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.reuters.com/article/us-davos-meeting-solar-gcl-idUSKCN1PI2OQ</dc:identifier>
</item>
<item>
<title>Cancelling Dropbox Pro is hard</title>
<link>https://www.useloom.com/share/8d148b2be54444909e8408398ab07f83</link>
<guid isPermaLink="true" >https://www.useloom.com/share/8d148b2be54444909e8408398ab07f83</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://www.useloom.com/share/8d148b2be54444909e8408398ab07f83&quot;&gt;https://www.useloom.com/share/8d148b2be54444909e8408398ab07f83&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=19002282&quot;&gt;https://news.ycombinator.com/item?id=19002282&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 531&lt;/p&gt;
&lt;p&gt;# Comments: 330&lt;/p&gt;
</description>
<pubDate>Fri, 25 Jan 2019 20:39:47 +0000</pubDate>
<dc:creator>riboflavin</dc:creator>
<og:type>website</og:type>
<og:url>https://www.useloom.com</og:url>
<og:title>Loom | Send a video. Not a thousand words.</og:title>
<og:description>Get your message across with instantly shareable videos for work. Capture your screen, record your front-facing camera, and narrate it all at once, then instantly share with a simple link.</og:description>
<og:image>https://www.useloom.com/assets/img/og/loom-banner.png</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.useloom.com/share/8d148b2be54444909e8408398ab07f83</dc:identifier>
</item>
<item>
<title>Websocketd</title>
<link>http://websocketd.com/</link>
<guid isPermaLink="true" >http://websocketd.com/</guid>
<description>&lt;pre class=&quot;code content-bash&quot;&gt;
&lt;code class=&quot;language-bash&quot;&gt;#!/bin/bash

# Count from 1 to 10 with a sleep
for ((COUNT = 1; COUNT &amp;lt;= 10; COUNT++)); do
  echo $COUNT
  sleep 0.5
done&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;code content-java&quot;&gt;
&lt;code class=&quot;language-java&quot;&gt;class Counter {
  public static void main(String [] args) throws Exception {
    for (int i=0; i&amp;lt;10; i++) {
      System.out.println(i);
      Thread.sleep(500);
    }
  }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;code content-python&quot;&gt;
&lt;code class=&quot;language-python&quot;&gt;#!/usr/bin/python
from sys import stdout
from time import sleep

# Count from 1 to 10 with a sleep
for count in range(0, 10):
  print(count + 1)
  stdout.flush()
  sleep(0.5)&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;code content-ruby&quot;&gt;
&lt;code class=&quot;language-ruby&quot;&gt;#!/usr/bin/ruby

# Count from 1 to 10 with a sleep
STDOUT.sync = true
(1..10).each do |count|
        puts count
        sleep(0.5)
end&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;code content-php&quot;&gt;
&lt;code class=&quot;language-php&quot;&gt;#!/usr/bin/php
&amp;lt;?php

# Count from 1 to 10 with a sleep
for ($count = 1; $count &amp;lt;= 10; $count++) {
        echo $count . &quot;\n&quot;;
        usleep(500000);
}
?&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;code content-perl&quot;&gt;
&lt;code class=&quot;language-clike&quot;&gt;#!/usr/bin/perl
use Time::HiRes qw(sleep);
# Autoflush
$|++;
# Count from 1 to 10 with a sleep
for my $count (1 .. 10) {
        print &quot;$count\n&quot;;
        sleep 0.5;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;code content-c&quot;&gt;
&lt;code class=&quot;language-c&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;

int main() {
    int i;

    // Disable output buffering.
    setbuf(stdout, NULL);

    for (i = 1; i &amp;lt;= 10; i++) {
        printf(&quot;%d\n&quot;, i);
        usleep(500000);
    }

    return 0;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;code content-csharp&quot;&gt;
&lt;code class=&quot;language-csharp&quot;&gt;using System;
using System.Threading;

class Counter
{
  static void Main()
  {
    for (int i = 1; i &amp;lt;= 10; i++)
    {
      Console.WriteLine(i);
      Thread.Sleep(500);
    }
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;code content-swift&quot;&gt;
&lt;code class=&quot;language-swift&quot;&gt;#!/usr/bin/env xcrun swift
import AppKit

for index in 1...10 {
  print(index)
  fflush(__stdoutp)
  NSThread.sleepForTimeInterval(0.5)
}&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;code content-dart&quot;&gt;
&lt;code class=&quot;language-c language-dart&quot;&gt;import 'dart:io';

main() {
  for (int i = 0; i &amp;lt; 10; i++) {
    print(i);
    sleep(const Duration(milliseconds: 500));
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;code content-anything&quot;&gt;
&lt;code class=&quot;language-bash&quot;&gt;You get the idea!

If you can write a program that can be launched from
the command line, you can build a WebSocket server.

Read inbound messages from STDIN.
Write outbound messages to STDOUT.

Read HTTP and connection details from environment vars.
Use line breaks as message delimiters.
&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Fri, 25 Jan 2019 17:22:34 +0000</pubDate>
<dc:creator>mmcclure</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>http://websocketd.com/</dc:identifier>
</item>
<item>
<title>Oslo made its city center basically car-free</title>
<link>https://www.fastcompany.com/90294948/what-happened-when-oslo-decided-to-make-its-downtown-basically-car-free</link>
<guid isPermaLink="true" >https://www.fastcompany.com/90294948/what-happened-when-oslo-decided-to-make-its-downtown-basically-car-free</guid>
<description>&lt;div readability=&quot;15&quot;&gt;
&lt;p&gt;If you decide to drive in downtown Oslo, be forewarned: You won’t be able to park on the street. By the beginning of this year, the city finished removing more than 700 parking spots–replacing them with bike lanes, plants, tiny parks, and benches–as a major step toward a vision of a car-free city center.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;ad-wrapper ad-wrapper--mobileparallax_1&quot;&gt;
&lt;div class=&quot;ad-wrapper--ad-unit-wrap&quot;&gt;
&lt;p&gt;advertisement&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ad-wrapper ad-wrapper--native_mid_article_inject&quot;&gt;
&lt;div class=&quot;ad-wrapper--ad-unit-wrap&quot;&gt;
&lt;p&gt;advertisement&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div readability=&quot;85.34701912261&quot;&gt;
&lt;p&gt;Without those parking spots, and with cars banned completely on some streets, few people are driving in the area. “There are basically no cars,” says Axel Bentsen, CEO of &lt;a href=&quot;https://urbansharing.com/&quot;&gt;Urban Sharing&lt;/a&gt;, the company that runs &lt;a href=&quot;https://oslobysykkel.no/&quot;&gt;Oslo City Bike&lt;/a&gt;, the local bike-share system. The city’s changes are designed, in part, to help improve air quality and fight climate change, but the difference in the quality of life is more immediate. “The city feels different faster than you can feel the difference in [cleaner air],” he says. “You can see that you’re actually reclaiming the space and can use it for other purposes than parking cars.”&lt;/p&gt;
&lt;p&gt;Oslo first pedestrianized some streets in the city center in the 1970s, and invested heavily in public transportation in the 1980s. In 2015, when a progressive political coalition came to power in the city council, they started planning a more significant transformation. At first, they called for a full ban on cars because the majority of residents in the city center didn’t drive. But when business owners objected, worried that they’d lose customers and have problems with deliveries, the government changed focus to remove parking spots–a slightly more gradual approach. For now, there are still parking garages on the periphery of the center.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;size-large wp-image-90295216 lazyload&quot; alt=&quot;&quot; width=&quot;525&quot; height=&quot;350&quot; sizes=&quot;(max-width: 525px) 100vw, 525px&quot; data-src=&quot;https://images.fastcompany.net/image/upload/w_596,c_limit,q_auto:best,f_auto/wp-cms/uploads/2019/01/i-1-90294948-in-osloand8217s-nearly-car-free-city-center-parking-spots-are-now-bike-lanes.jpg&quot;/&gt;[Photo: Åsmund Holien Mo/Urban Sharing]A few spots are left, converted into parking for disabled drivers or EV charging, and some streets are open for delivery trucks for a couple of hours in the morning. Emergency vehicles still have access. But other drivers have to park in garages, and traffic restrictions help nudge drivers who don’t need to go through the city center to take a ring road around it instead. In a new zoning plan, the city is taking its intentions further, giving pedestrians, cyclists, and public transportation greater priority than private cars, and planning a network of pedestrian zones that are fully car-free.&lt;/p&gt;
&lt;p&gt;“Cities, like Oslo, have been built for cars for several decades, and it’s about time we change it,” Hanne Marcussen, Oslo’s vice mayor of urban development, said in an email. “I think it is important that we all think about what kind of cities we want to live in. I am certain that when people imagine their ideal city, it would not be a dream of polluted air, cars jammed in endless traffic, or streets filled up with parked cars.”&lt;/p&gt;
&lt;p&gt;To help support the shift, the city made “massive improvements in public transport and making cycling safe and comfortable,” says Rune Gjøs, Oslo’s head of cycling. The city is adding new trams and metro lines and more frequent departures, and lowering the cost of tickets. For the last few years, the city has also been quickly building out a better-connected bike network, converting parking to bright-red bike lanes. It handed out grants to help citizens buy electric bikes. The city bike-share system has quickly grown, tripling to nearly 3 million trips a year between 2015 and 2018. The system usually closes in the winter, but it ran a pilot this winter using bikes with spiked tires. It also tested offering cargo bikes.&lt;/p&gt;
&lt;img class=&quot;size-large wp-image-90295218 lazyload&quot; alt=&quot;&quot; width=&quot;525&quot; height=&quot;350&quot; sizes=&quot;(max-width: 525px) 100vw, 525px&quot; data-src=&quot;https://images.fastcompany.net/image/upload/w_596,c_limit,q_auto:best,f_auto/wp-cms/uploads/2019/01/i-2-90294948-in-osloand8217s-nearly-car-free-city-center-parking-spots-are-now-bike-lanes.jpg&quot;/&gt;[Photo: Åsmund Holien Mo/Urban Sharing]
&lt;p&gt;As more people bike, that opens up room on overcrowded public transit. “Usually when you have these discussions you say, ‘Oh, we need bikes to replace cars,’ but there’s a missing link there, and that’s public transit,” says Bentsen. “What we see is that actually we take people out of the bus and onto the bike and walking, which leaves room for people to leave their car and take the bus.”&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ad-wrapper ad-wrapper--mobilerectangle_1&quot;&gt;
&lt;div class=&quot;ad-wrapper--ad-unit-wrap&quot;&gt;
&lt;p&gt;advertisement&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div readability=&quot;41&quot;&gt;
&lt;p&gt;The changes, unsurprisingly, have been met with some resistance, both from car owners and businesses. But while business owners initially worried about the city creating a ghost town that no one would visit, the opposite seems to be true; as in other cities that have converted some streets to pedestrian-only areas, the areas in Oslo that have been pedestrianized are some of the most popular parts of the city, Marcussen says. Last fall, after hundreds of parking spots had been removed, the city found that it had 10% more pedestrians in the center than the year before. “So that is telling me that we are doing something right,” she says.&lt;/p&gt;
&lt;p&gt;“Changing habits will always be challenging,” she says. “Cities have been built for cars for many decades, and the car has been seen as a status symbol, and I guess it still is for some people. We need to plan our cities better for the future so that the private car is not setting the premise for how we build our cities anymore. So in new developments, we are trying to make sure it’s easy for those who move into their new home to live without their own private car.”&lt;/p&gt;
&lt;p&gt;Several other cities are also working to reduce car use, such as Madrid, which limits access to the city center for anyone other than the people who live there. Other cities will follow. “I am absolutely certain that in the future, the private car will take up much less space in the cities,” says Marcussen. “I hope that other cities will be inspired by us to create their own car-free city center. I think this will become an increasingly important issue as we see more and more clearly that letting private cars take up so much of a very limited space within city centers is just not very efficient. At the same time, we are learning more about how pollution affects those of us who live in the cities, especially children. A couple of decades ago, it was perfectly normal to smoke cigarettes inside. Today, very few would do that. I think it’s the same with cars in the city center: One day we will look back and ask ourselves why we ever thought that was a good idea.”&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div class=&quot;ad-wrapper ad-wrapper--native_recommendationlink&quot;&gt;
&lt;div class=&quot;ad-wrapper--ad-unit-wrap&quot;&gt;
&lt;p&gt;advertisement&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;


&lt;/div&gt;
</description>
<pubDate>Fri, 25 Jan 2019 17:20:16 +0000</pubDate>
<dc:creator>prostoalex</dc:creator>
<og:type>article</og:type>
<og:title>What happened when Oslo decided to make its downtown basically car-free?</og:title>
<og:url>https://www.fastcompany.com/90294948/what-happened-when-oslo-decided-to-make-its-downtown-basically-car-free</og:url>
<og:description>It was a huge success: Parking spots are now bike lanes, transit is fast and easy, and the streets (and local businesses) are full of people.</og:description>
<og:image>https://images.fastcompany.net/image/upload/w_1280,f_auto,q_auto,fl_lossy/wp-cms/uploads/2019/01/p-1-90294948-in-osloand8217s-nearly-car-free-city-center-parking-spots-are-now-bike-lanes.jpg</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.fastcompany.com/90294948/what-happened-when-oslo-decided-to-make-its-downtown-basically-car-free</dc:identifier>
</item>
<item>
<title>Practical Deep Learning for Coders 2019</title>
<link>https://www.fast.ai/2019/01/24/course-v3/</link>
<guid isPermaLink="true" >https://www.fast.ai/2019/01/24/course-v3/</guid>
<description>&lt;span class=&quot;post-date&quot;&gt;Written: 24 Jan 2019 by &lt;em&gt;Jeremy Howard&lt;/em&gt;&lt;/span&gt;
&lt;p&gt;Launching today, the 2019 edition of &lt;a href=&quot;http://course.fast.ai&quot;&gt;Practical Deep Learning for Coders&lt;/a&gt;, the third iteration of the course, is 100% new material, including applications that have never been covered by an introductory deep learning course before (with some techniques that haven’t even been published in academic papers yet). There are seven lessons, each around 2 hours long, and you should plan to spend about 10 hours on assignments for each lesson. &lt;a href=&quot;https://course.fast.ai/start_gcp.html&quot;&gt;Google Cloud&lt;/a&gt; and &lt;a href=&quot;https://course.fast.ai/start_azure.html&quot;&gt;Microsoft Azure&lt;/a&gt; have integrated all you need for the courses into their GPU-based platforms, and there are “one-click” platforms available too, such as &lt;a href=&quot;https://course.fast.ai/start_crestle.html&quot;&gt;Crestle&lt;/a&gt; and &lt;a href=&quot;https://course.fast.ai/start_gradient.html&quot;&gt;Gradient&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The course assumes you have at least a year of coding experience (preferably in Python, although experienced coders will be able to pick Python up as they go; we have a list of &lt;a href=&quot;https://forums.fast.ai/t/recommended-python-learning-resources/26888&quot;&gt;python learning resources&lt;/a&gt; available), and have completed high-school math (some university-level math is introduced as needed during the course). Many people who have completed the course tell us it takes a lot of work, but it’s one of the most rewarding things they’ve done; we strongly suggest you get involved with the course’s &lt;a href=&quot;https://forums.fast.ai/c/part1-v3&quot;&gt;active online community&lt;/a&gt; to help you complete your journey.&lt;/p&gt;
&lt;p&gt;After the first lesson you’ll be able to train a state-of-the-art image classification model on your own data. After completing this lesson, some students from the in-person version of this course (where this material was recorded) published new state-of-the-art results in various domains! The focus for the first half of the course is on &lt;em&gt;practical techniques&lt;/em&gt;, showing only the &lt;em&gt;theory&lt;/em&gt; required to actually use these techniques in practice. Then, in the second half of the course, we dig deeper and deeper into the theory, until by the final lesson we will build and train a “resnet” neural network from scratch which approaches state-of-the-art accuracy.&lt;/p&gt;
&lt;img class=&quot;image&quot; width=&quot;480&quot; src=&quot;https://www.fast.ai/images/part1v3-thumbs/lesson1-overview.png&quot; alt=&quot;Some application examples from the course&quot;/&gt; Some application examples from the course
&lt;p&gt;The key applications covered are:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Computer vision (e.g. classify pet photos by breed)
&lt;ul&gt;&lt;li&gt;Image classification&lt;/li&gt;
&lt;li&gt;Image localization (segmentation and activation maps)&lt;/li&gt;
&lt;li&gt;Image key-points&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;NLP (e.g. movie review sentiment analysis)
&lt;ul&gt;&lt;li&gt;Language modeling&lt;/li&gt;
&lt;li&gt;Document classification&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Tabular data (e.g. sales prediction)
&lt;ul&gt;&lt;li&gt;Categorical data&lt;/li&gt;
&lt;li&gt;Continuous data&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Collaborative filtering (e.g. movie recommendation)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;We also cover all the necessary foundations for these applications.&lt;/p&gt;
&lt;img class=&quot;image&quot; width=&quot;640&quot; src=&quot;https://www.fast.ai/images/part1v3-thumbs/lesson7-topics.png&quot; alt=&quot;Foundations covered in the course&quot;/&gt; Foundations covered in the course
&lt;p&gt;We teach using the &lt;a href=&quot;https://pytorch.org/&quot;&gt;PyTorch&lt;/a&gt; library, which is the most modern and flexible widely-used library available, and we’ll also use the &lt;a href=&quot;https://github.com/fastai/fastai&quot;&gt;fastai&lt;/a&gt; wrapper for PyTorch, which makes it easier to access recommended best practices for training deep learning models (whilst making all the underlying PyTorch functionality directly available too). We think fastai is great, but we’re biased because we made it… but it’s the only general deep learning toolkit featured on pytorch.org, has over 10,000 GitHub stars, and is used in many competition victories, academic papers, and top university courses, so it’s not just us that like it! Note that the concepts you learn will apply equally well to any work you want to do with Tensorflow/keras, CNTK, MXNet, or any other deep learning library; it’s the concepts which matter. Learning a new library just takes a few days if you understand the concepts well.&lt;/p&gt;
&lt;p&gt;One particularly useful addition this year is that we now have a super-charged video player, thanks to the great work of &lt;a href=&quot;http://zachcaceres.com/now/&quot;&gt;Zach Caceres&lt;/a&gt;. It allows you to search the lesson transcripts, and jump straight to the section of the video that you find. It also shows links to other lessons, and the lesson summary and resources, in collapsible panes (it doesn’t work well on mobile yet however, so if you want to watch on mobile you can use &lt;a href=&quot;https://www.youtube.com/playlist?list=PLfYUBJiXbdtSIJb-Qd3pw0cqCbkGeS0xn&quot;&gt;this Youtube playlist&lt;/a&gt;). And an extra big thanks to &lt;a href=&quot;https://sgugger.github.io/&quot;&gt;Sylvain Gugger&lt;/a&gt;, who has been instrumental in the development of both the course and the fastai library—we’re very grateful to Amazon Web Services for sponsoring Sylvain’s work.&lt;/p&gt;
&lt;img class=&quot;image&quot; width=&quot;720&quot; src=&quot;https://www.fast.ai/images/part1v3-thumbs/videos.png&quot; alt=&quot;fast.ai's video player with searchable timeline&quot;/&gt; fast.ai's video player with searchable timeline
&lt;p&gt;If you’re interested in giving it a go, &lt;a href=&quot;http://course.fast.ai&quot;&gt;click here&lt;/a&gt; to go to the course web site. Now let’s look at each lesson in more detail.&lt;/p&gt;
&lt;h2 id=&quot;lesson-1-image-classification&quot;&gt;Lesson 1: Image classification&lt;/h2&gt;
&lt;p&gt;The most important outcome of lesson 1 is that we’ll have trained an image classifier which can recognize pet breeds at state-of-the-art accuracy. The key to this success is the use of &lt;em&gt;transfer learning&lt;/em&gt;, which will be a fundamental platform for much of this course. We’ll also see how to analyze the model to understand its failure modes. In this case, we’ll see that the places where the model is making mistakes are in the same areas that even breeding experts can make mistakes.&lt;/p&gt;
&lt;img class=&quot;image&quot; width=&quot;480&quot; src=&quot;https://www.fast.ai/images/part1v3-thumbs/lesson1.png&quot; alt=&quot;Training and analyzing a pet breed classifier&quot;/&gt; Training and analyzing a pet breed classifier
&lt;p&gt;We’ll discuss the overall approach of the course, which is somewhat unusual in being &lt;em&gt;top-down&lt;/em&gt; rather than &lt;em&gt;bottom-up&lt;/em&gt;. So rather than starting with theory, and only getting to practical applications later, we start instead with practical applications, and then gradually dig deeper and deeper into them, learning the theory as needed. This approach takes more work for teachers to develop, but it’s been shown to help students a lot, for example in &lt;a href=&quot;https://www.gse.harvard.edu/news/uk/09/01/education-bat-seven-principles-educators&quot;&gt;education research at Harvard&lt;/a&gt; by David Perkins.&lt;/p&gt;
&lt;p&gt;We also discuss how to set the most important &lt;em&gt;hyper-parameter&lt;/em&gt; when training neural networks: the &lt;em&gt;learning rate&lt;/em&gt;, using Leslie Smith’s fantastic &lt;em&gt;learning rate finder&lt;/em&gt; method. Finally, we’ll look at the important but rarely discussed topic of &lt;em&gt;labeling&lt;/em&gt;, and learn about some of the features that fastai provides for allowing you to easily add labels to your images.&lt;/p&gt;
&lt;p&gt;Note that to follow along with the lessons, you’ll need to connect to a cloud GPU provider which has the fastai library installed (recommended; it should take only 5 minutes or so, and cost under $0.50/hour), or set up a computer with a suitable GPU yourself (which can take days to get working if you’re not familiar with the process, so we don’t recommend it until later). You’ll also need to be familiar with the basics of the &lt;em&gt;Jupyter Notebook&lt;/em&gt; environment we use for running deep learning experiments. Up to date tutorials and recommendations for these are available from the &lt;a href=&quot;http://course.fast.ai&quot;&gt;course website&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;lesson-2-data-cleaning-and-production-sgd-from-scratch&quot;&gt;Lesson 2: Data cleaning and production; SGD from scratch&lt;/h2&gt;
&lt;p&gt;We start today’s lesson by learning how to build your own image classification model using your own data, including topics such as:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Image collection&lt;/li&gt;
&lt;li&gt;Parallel downloading&lt;/li&gt;
&lt;li&gt;Creating a validation set, and&lt;/li&gt;
&lt;li&gt;Data cleaning, using the model to help us find data problems.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;I’ll demonstrate all these steps as I create a model that can take on the vital task of differentiating teddy bears from grizzly bears. Once we’ve got our data set in order, we’ll then learn how to productionize our teddy-finder, and make it available online.&lt;/p&gt;
&lt;img class=&quot;image&quot; width=&quot;720&quot; src=&quot;https://www.fast.ai/images/part1v3-thumbs/lesson3-b.png&quot; alt=&quot;Putting your model in production&quot;/&gt; Putting your model in production
&lt;p&gt;We’ve had some great additions since this lesson was recorded, so be sure to check out:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The &lt;em&gt;production starter kits&lt;/em&gt; on the course web site, such as &lt;a href=&quot;https://course.fast.ai/deployment_render.html&quot;&gt;this one&lt;/a&gt; for deploying to Render.com&lt;/li&gt;
&lt;li&gt;The new interactive GUI in the lesson notebook for using the model to find and fix mislabeled or incorrectly-collected images.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;In the second half of the lesson we’ll train a simple model from scratch, creating our own &lt;em&gt;gradient descent&lt;/em&gt; loop. In the process, we’ll be learning lots of new jargon, so be sure you’ve got a good place to take notes, since we’ll be referring to this new terminology throughout the course (and there will be lots more introduced in every lesson from here on).&lt;/p&gt;
&lt;img class=&quot;image&quot; width=&quot;640&quot; src=&quot;https://www.fast.ai/images/part1v3-thumbs/lesson2.gif&quot; alt=&quot;Gradient descent in action&quot;/&gt; Gradient descent in action
&lt;h2 id=&quot;lesson-3-data-blocks-multi-label-classification-segmentation&quot;&gt;Lesson 3: Data blocks; Multi-label classification; Segmentation&lt;/h2&gt;
&lt;p&gt;Lots to cover today! We start lesson 3 looking at an interesting dataset: Planet’s &lt;a href=&quot;https://www.kaggle.com/c/planet-understanding-the-amazon-from-space&quot;&gt;Understanding the Amazon from Space&lt;/a&gt;. In order to get this data into the shape we need it for modeling, we’ll use one of fastai’s most powerful (and unique!) tools: the &lt;a href=&quot;https://docs.fast.ai/data_block.html&quot;&gt;data block API&lt;/a&gt;. We’ll be coming back to this API many times over the coming lessons, and mastery of it will make you a real fastai superstar! Once you’ve finished this lesson, if you’re ready to learn more about the data block API, have a look at this great article: &lt;a href=&quot;https://blog.usejournal.com/finding-data-block-nirvana-a-journey-through-the-fastai-data-block-api-c38210537fe4&quot;&gt;Finding Data Block Nirvana&lt;/a&gt;, by Wayde Gilliam.&lt;/p&gt;
&lt;p&gt;One important feature of the Planet dataset is that it is a &lt;em&gt;multi-label&lt;/em&gt; dataset. That is: each satellite image can contain &lt;em&gt;multiple&lt;/em&gt; labels, whereas previous datasets we’ve looked at have had exactly one label per image. We’ll look at what changes we need to make to work with multi-label datasets.&lt;/p&gt;
&lt;img class=&quot;image&quot; width=&quot;720&quot; src=&quot;https://www.fast.ai/images/part1v3-thumbs/lesson3-camvid.png&quot; alt=&quot;The result of our image segmentation model&quot;/&gt; The result of our image segmentation model
&lt;p&gt;Next, we will look at &lt;em&gt;image segmentation&lt;/em&gt;, which is the process of labeling every pixel in an image with a category that shows what kind of object is portrayed by that pixel. We will use similar techniques to the earlier image classification models, with a few tweaks. fastai makes image segmentation modeling and interpretation just as easy as image classification, so there won’t be too many tweaks required.&lt;/p&gt;
&lt;p&gt;We will be using the popular CamVid dataset for this part of the lesson. In future lessons, we will come back to it and show a few extra tricks. Our final CamVid model will have dramatically lower error than any model we’ve been able to find in the academic literature!&lt;/p&gt;
&lt;p&gt;What if your dependent variable is a continuous value, instead of a category? We answer that question next, looking at a &lt;a href=&quot;https://stackoverflow.com/questions/29133085/what-are-keypoints-in-image-processing&quot;&gt;keypoint&lt;/a&gt; dataset, and building a model that predicts face keypoints with precision.&lt;/p&gt;
&lt;h2 id=&quot;lesson-4-nlp-tabular-data-collaborative-filtering-embeddings&quot;&gt;Lesson 4: NLP; Tabular data; Collaborative filtering; Embeddings&lt;/h2&gt;
&lt;p&gt;In lesson 4 we’ll dive into &lt;em&gt;natural language processing&lt;/em&gt; (NLP), using the IMDb movie review dataset. In this task, our goal is to predict whether a movie review is positive or negative; this is called &lt;em&gt;sentiment analysis&lt;/em&gt;. We’ll be using the &lt;a href=&quot;https://arxiv.org/abs/1801.06146&quot;&gt;ULMFiT&lt;/a&gt; algorithm, which was originally developed during the fast.ai 2018 course, and became part of a revolution in NLP during 2018 which led the New York Times to declare that &lt;a href=&quot;https://www.nytimes.com/2018/11/18/technology/artificial-intelligence-language.html&quot;&gt;new systems are starting to crack the code of natural language&lt;/a&gt;. ULMFiT is today the most accurate known sentiment analysis algorithm.&lt;/p&gt;
&lt;img class=&quot;image&quot; width=&quot;720&quot; src=&quot;https://www.fast.ai/images/part1v3-thumbs/lesson4-ulmfit.png&quot; alt=&quot;Overview of ULMFiT&quot;/&gt; Overview of ULMFiT
&lt;p&gt;The basic steps are:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Create (or, preferred, download a pre-trained) &lt;em&gt;language model&lt;/em&gt; trained on a large corpus such as Wikipedia (a “language model” is any model that learns to predict the next word of a sentence)&lt;/li&gt;
&lt;li&gt;Fine-tune this language model using your &lt;em&gt;target corpus&lt;/em&gt; (in this case, IMDb movie reviews)&lt;/li&gt;
&lt;li&gt;Remove the &lt;em&gt;encoder&lt;/em&gt; in this fine tuned language model, and replace it with a &lt;em&gt;classifier&lt;/em&gt;. Then fine-tune this model for the final classification task (in this case, sentiment analysis).&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;After our journey into NLP, we’ll complete our practical applications for Practical Deep Learning for Coders by covering tabular data (such as spreadsheets and database tables), and collaborative filtering (recommendation systems).&lt;/p&gt;
&lt;p&gt;For tabular data, we’ll see how to use &lt;em&gt;categorical&lt;/em&gt; and &lt;em&gt;continuous&lt;/em&gt; variables, and how to work with the &lt;em&gt;fastai.tabular&lt;/em&gt; module to set up and train a model.&lt;/p&gt;
&lt;p&gt;Then we’ll see how collaborative filtering models can be built using similar ideas to those for tabular data, but with some special tricks to get both higher accuracy and more informative model interpretation.&lt;/p&gt;
&lt;p&gt;This brings us to the half-way point of the course, where we have looked at how to build and interpret models in each of these key application areas:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Computer vision&lt;/li&gt;
&lt;li&gt;NLP&lt;/li&gt;
&lt;li&gt;Tabular&lt;/li&gt;
&lt;li&gt;Collaborative filtering&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;For the second half of the course, we’ll learn about &lt;em&gt;how&lt;/em&gt; these models really work, and how to create them ourselves from scratch. For this lesson, we’ll put together some of the key pieces we’ve touched on so far:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Activations&lt;/li&gt;
&lt;li&gt;Parameters&lt;/li&gt;
&lt;li&gt;Layers (affine and non-linear)&lt;/li&gt;
&lt;li&gt;Loss function.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;We’ll be coming back to each of these in lots more detail during the remaining lessons. We’ll also learn about a type of layer that is important for NLP, collaborative filtering, and tabular models: the &lt;em&gt;embedding layer&lt;/em&gt;. As we’ll discover, an “embedding” is simply a computational shortcut for a particular type of matrix multiplication (a multiplication by a &lt;em&gt;one-hot encoded&lt;/em&gt; matrix).&lt;/p&gt;
&lt;h2 id=&quot;lesson-5-back-propagation-accelerated-sgd-neural-net-from-scratch&quot;&gt;Lesson 5: Back propagation; Accelerated SGD; Neural net from scratch&lt;/h2&gt;
&lt;p&gt;In lesson 5 we put all the pieces of training together to understand exactly what is going on when we talk about &lt;em&gt;back propagation&lt;/em&gt;. We’ll use this knowledge to create and train a simple neural network from scratch.&lt;/p&gt;
&lt;img class=&quot;image&quot; width=&quot;720&quot; src=&quot;https://www.fast.ai/images/part1v3-thumbs/lesson5.png&quot; alt=&quot;Neural net from scratch&quot;/&gt; Neural net from scratch
&lt;p&gt;We’ll also see how we can look inside the weights of an embedding layer, to find out what our model has learned about our categorical variables. This will let us get some insights into which movies we should probably avoid at all costs…&lt;/p&gt;
&lt;img class=&quot;image&quot; width=&quot;720&quot; src=&quot;https://www.fast.ai/images/part1v3-thumbs/lesson5-emb.png&quot; alt=&quot;Interpreting movie review embeddings&quot;/&gt; Interpreting movie review embeddings
&lt;p&gt;Although embeddings are most widely known in the context of word embeddings for NLP, they are at least as important for categorical variables in general, such as for tabular data or collaborative filtering. They can even be used with non-neural models with great success.&lt;/p&gt;
&lt;img class=&quot;image&quot; width=&quot;480&quot; src=&quot;https://www.fast.ai/images/part1v3-thumbs/lesson5-b.png&quot; alt=&quot;Comparative performance of common models with vs without embeddings&quot;/&gt; Comparative performance of common models with vs without embeddings
&lt;h2 id=&quot;lesson-6-regularization-convolutions-data-ethics&quot;&gt;Lesson 6: Regularization; Convolutions; Data ethics&lt;/h2&gt;
&lt;p&gt;Today we discuss some powerful techniques for improving training and avoiding over-fitting:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Dropout&lt;/strong&gt;: remove activations at random during training in order to regularize the model&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Data augmentation&lt;/strong&gt;: modify model inputs during training in order to effectively increase data size&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Batch normalization&lt;/strong&gt;: adjust the parameterization of a model in order to make the loss surface smoother.&lt;/li&gt;
&lt;/ul&gt;&lt;img class=&quot;image&quot; width=&quot;720&quot; src=&quot;https://www.fast.ai/images/part1v3-thumbs/lesson6.png&quot; alt=&quot;Data augmentation examples for a single image&quot;/&gt; Data augmentation examples for a single image
&lt;p&gt;Next up, we’ll learn all about &lt;em&gt;convolutions&lt;/em&gt;, which can be thought of as a variant of matrix multiplication with tied weights, and are the operation at the heart of modern computer vision models (and, increasingly, other types of models too).&lt;/p&gt;
&lt;p&gt;We’ll use this knowledge to create a &lt;em&gt;class activated map&lt;/em&gt;, which is a heat-map that shows which parts of an image were most important in making a prediction.&lt;/p&gt;
&lt;img class=&quot;image&quot; width=&quot;720&quot; src=&quot;https://www.fast.ai/images/part1v3-thumbs/lesson6-cnn.png&quot; alt=&quot;How a convolution works&quot;/&gt; How a convolution works
&lt;p&gt;Finally, we’ll cover a topic that many students have told us is the most interesting and surprising part of the course: data ethics. We’ll learn about some of the ways in which models can go wrong, with a particular focus on &lt;em&gt;feedback loops&lt;/em&gt;, why they cause problems, and how to avoid them. We’ll also look at ways in which bias in data can lead to biased algorithms, and discuss questions that data scientists can and should be asking to help ensure that their work doesn’t lead to unexpected negative outcomes.&lt;/p&gt;
&lt;img class=&quot;image&quot; width=&quot;640&quot; src=&quot;https://www.fast.ai/images/part1v3-thumbs/lesson6-ethics.png&quot; alt=&quot;Example of algorithmic bias in the US justice system&quot;/&gt; Example of algorithmic bias in the US justice system
&lt;h2 id=&quot;lesson-7-resnets-from-scratch-u-net-generative-adversarial-networks&quot;&gt;Lesson 7: Resnets from scratch; U-net; Generative (adversarial) networks&lt;/h2&gt;
&lt;p&gt;In the final lesson of Practical Deep Learning for Coders we’ll study one of the most important techniques in modern architectures: the &lt;em&gt;skip connection&lt;/em&gt;. This is most famously used in the &lt;em&gt;resnet&lt;/em&gt;, which is the architecture we’ve used throughout this course for image classification, and appears in many cutting-edge results. We’ll also look at the &lt;em&gt;U-net&lt;/em&gt; architecture, which uses a different type of skip connection to greatly improve segmentation results (and also for similar tasks where the output structure is similar to the input).&lt;/p&gt;
&lt;img class=&quot;image&quot; width=&quot;720&quot; src=&quot;https://www.fast.ai/images/part1v3-thumbs/lesson7-resnet.png&quot; alt=&quot;Impact on loss surface of resnet skip connections&quot;/&gt; Impact on loss surface of resnet skip connections
&lt;p&gt;We’ll then use the U-net architecture to train a &lt;em&gt;super-resolution&lt;/em&gt; model. This is a model which can increase the resolution of a low-quality image. Our model won’t only increase resolution—it will also remove jpeg artifacts and unwanted text watermarks.&lt;/p&gt;
&lt;p&gt;In order to make our model produce high quality results, we will need to create a custom loss function which incorporates &lt;em&gt;feature loss&lt;/em&gt; (also known as &lt;em&gt;perceptual loss&lt;/em&gt;), along with &lt;em&gt;gram loss&lt;/em&gt;. These techniques can be used for many other types of image generation task, such as image colorization.&lt;/p&gt;
&lt;img class=&quot;image&quot; width=&quot;720&quot; src=&quot;https://www.fast.ai/images/part1v3-thumbs/lesson7.png&quot; alt=&quot;Super-resolution results using feature loss and gram loss&quot;/&gt; Super-resolution results using feature loss and gram loss
&lt;p&gt;We’ll learn about a recent loss function known as &lt;em&gt;generative adversarial&lt;/em&gt; loss (used in generative adversarial networks, or &lt;em&gt;GANs&lt;/em&gt;), which can improve the quality of generative models in some contexts, at the cost of speed.&lt;/p&gt;
&lt;p&gt;The techniques we show in this lesson include some unpublished research that:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Let us train GANs more quickly and reliably than standard approaches, by leveraging transfer learning&lt;/li&gt;
&lt;li&gt;Combines architectural innovations and loss function approaches that haven’t been used in this way before.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The results are stunning, and train in just a couple of hours (compared to previous approaches that take a couple of days).&lt;/p&gt;
&lt;img class=&quot;image&quot; width=&quot;640&quot; src=&quot;https://www.fast.ai/images/part1v3-thumbs/lesson7-rnn.png&quot; alt=&quot;A recurrent neural net&quot;/&gt; A recurrent neural net
&lt;p&gt;Finally, we’ll learn how to create a recurrent neural net (RNN) from scratch. This is the foundation of the models we have been using for NLP throughout the course, and it turns out they are a simple refactoring of a regular multi-layer network.&lt;/p&gt;
&lt;p&gt;Thanks for reading! If you’ve gotten this far, then you should probably head over to &lt;a href=&quot;http://course.fast.ai&quot;&gt;course.fast.ai&lt;/a&gt; and start watching the first video!&lt;/p&gt;
</description>
<pubDate>Fri, 25 Jan 2019 17:16:34 +0000</pubDate>
<dc:creator>jph00</dc:creator>
<dc:language>en-us</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.fast.ai/2019/01/24/course-v3/</dc:identifier>
</item>
<item>
<title>It’s Time to Move on from Two Phase Commit</title>
<link>http://dbmsmusings.blogspot.com/2019/01/its-time-to-move-on-from-two-phase.html</link>
<guid isPermaLink="true" >http://dbmsmusings.blogspot.com/2019/01/its-time-to-move-on-from-two-phase.html</guid>
<description>&lt;div dir=&quot;ltr&quot; id=&quot;docs-internal-guid-79900447-7fff-54aa-d826-6c77a1428553&quot;&gt;&lt;span&gt;The two-phase commit protocol (2PC) has been&lt;/span&gt; &lt;a href=&quot;https://dl.acm.org/citation.cfm?id=7266&quot;&gt;&lt;span&gt;used in enterprise software systems for over three decades&lt;/span&gt;&lt;/a&gt;&lt;span&gt;. It has been an an incredibly impactful protocol for ensuring atomicity and durability of transactions that access data in multiple partitions or shards. It is used everywhere --- both in older “venerable” distributed systems, database systems, and file systems such as Oracle, IBM DB2, PostgreSQL, and Microsoft TxF (transactional NTFS), and in younger “millennial” systems such as MariaDB, TokuDB, VoltDB, Cloud Spanner, Apache Flink, Apache Kafka, and Azure SQL Database. If your system supports ACID transactions across shards/partitions/databases, there’s a high probability that it is running 2PC (or some variant thereof) under the covers. [Sometimes it’s even “over the covers” --- older versions of MongoDB&lt;/span&gt; &lt;a href=&quot;https://docs.mongodb.com/v3.4/tutorial/perform-two-phase-commits/&quot;&gt;&lt;span&gt;required users to implement 2PC for multi-document transactions in application code&lt;/span&gt;&lt;/a&gt;&lt;span&gt;.]&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;In this post, we will first describe 2PC: how it works and what problems it solves. Then, we will show some major issues with 2PC and how modern systems attempt to get around these issues. Unfortunately, these attempted solutions cause other problems to emerge. In the end, I will make the case that the next generation of distributed systems should avoid 2PC, and how this is possible.&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;h3 dir=&quot;ltr&quot;&gt;&lt;span&gt;Overview of the 2PC protocol&lt;/span&gt;&lt;/h3&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;There are many variants of 2PC, but the basic protocol works as follows:&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;Background assumption:The work entailed by a transaction has already been divided across all of the shards/partitions that store data accessed by that transaction. We will refer to the effort performed at each shard as being performed by the “worker” for that shard. Each worker is able to start working on its responsibilities for a given transaction independently of each other. The 2PC protocol begins at the end of transaction processing, when the transaction is ready to “commit”. It is initiated by a single, coordinator machine (which may be one of the workers involved in that transaction).&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;The basic flow of the 2PC protocol is shown in the figure below. [The protocol begins at the top of the figure and then proceeds in a downward direction.]&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;img height=&quot;218&quot; src=&quot;https://lh6.googleusercontent.com/F7giuNAtrYsZz1ZYZPOuqXnnYYfUTiXq-IU-wKkiRbnKqhnEehTA1cIwdDTIQ5MylDjbsKhbjYLyZJkt-HFQQ50BaMtS2Vel_vr0II5vbjl2K6UX3tjQTnOb75ICgeo7IQDmIyeG&quot; width=&quot;400&quot;/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;Phase 1: A coordinator asks each worker whether they have successfully completed their responsibilities for that transaction and are ready to commit. Each worker responds ‘yes’ or ‘no’.&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;Phase 2: The coordinator counts all the responses. If every worker responded ‘yes’, then the transaction will commit. Otherwise, it will abort. The coordinator sends a message to each worker with the final commit decision and receives an acknowledgement back.&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;This mechanism ensures the atomicity property of transactions: either the entire transaction will be reflected in the final state of the system, or none of it. If even just a single worker cannot commit, then the entire transaction will be aborted. In other words: each worker has “veto-power” for a transaction.&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;It also ensures transaction durability. Each worker ensures that all of the writes of a transaction have been durably written to storage prior to responding ‘yes’ in phase 1. This gives the coordinator freedom to make a final decision about a transaction without concern for the fact that a worker may fail after voting ‘yes’. [In this post, we are being purposefully vague when using the term “durable writes” --- this term can either refer to writing to local non-volatile storage or, alternatively, replicating the writes to enough locations for it to be considered “durable”.]&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;In addition to durably writing the writes that are directly required by the transaction, the protocol itself requires additional writes that must be made durable before it can proceed. For example, a worker has veto power until the point it votes ‘yes’ in phase 1. After that point, it cannot change its vote. But what if it crashes right after voting ‘yes’? When it recovers it might not know that it voted ‘yes’, and still think it has veto power and go ahead and abort the transaction. To prevent this, it must write its vote durably before sending the ‘yes’ vote back to the coordinator. [In addition to this example, in standard 2PC, there are two other writes that are made durable prior to sending messages that are part of the protocol.]&lt;/span&gt;&lt;/div&gt;
&lt;h3 dir=&quot;ltr&quot;&gt;&lt;span&gt;The problems with 2PC&lt;/span&gt;&lt;/h3&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;There are two major problems with 2PC. The first is well known, and discussed in every reputable textbook that presents 2PC. The second is much less well known, but a major problem nonetheless.&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;The well-known problem is referred to as the “blocking problem”. This happens when every worker has voted ‘yes’, but the coordinator fails before sending a message with the final decision to at least one worker. The reason why this is a problem is that by voting ‘yes’, each worker has removed its power to veto the transaction. However, the coordinator still has absolute power to decide the final state of a transaction. If the coordinator fails before sending a message with the final decision to at least one worker, the workers cannot get together to make a decision amongst themselves --- they can’t abort because maybe the coordinator decided to commit before it failed, and they can’t commit because maybe the coordinator decided to abort before it failed. Thus, they have to block --- wait until the coordinator recovers --- in order to find out the final decision. In the meantime, they cannot process transactions that conflict with the stalled transaction since the final outcome of the writes of that transaction are yet to be determined.&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;There are two categories of work-arounds to the blocking problem. The first category of work-around modifies the core protocol in order to eliminate the blocking problem. Unfortunately, these modifications reduce the performance --- typically by adding an extra round of communication --- and thus are rarely used in practice. The second category keeps the protocol in tact but reduces the probability of the types of coordinator failure than can lead to the blocking program --- for example, by running 2PC over replica consensus protocols and ensuring that important state for the protocol is replicated at all times. Unfortunately, once again, these work-arounds reduce performance, since the protocol requires that these replica consensus rounds occur sequentially, and thus they may add significant latency to the protocol.&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;The lesser-known problem is what I call the “cloggage problem”. 2PC occurs after transaction is processed, and thus necessarily increases the latency of the transaction by an amount equal to the time it takes to run the protocol. This latency increase alone can already be an issue for many applications, but a potentially larger issue is that worker nodes do not know the final outcome of a transaction until mid-way through the second phase. Until they know the final outcome, they have to be prepared for the possibility that it might abort, and thus they typically prevent conflicting transactions from making progress until they are certain that the transaction will commit. These blocked transactions in turn block other transactions from running, and so on, until 2PC completes and all of the blocked transactions can resume.  This cloggage further increases the average transaction latency and also decreases transactional throughput.&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;To summarize the problems we discussed above: 2PC poisons a system along four dimensions: &lt;strong&gt;latency&lt;/strong&gt; (the time of the protocol plus the stall time of conflicting transactions), &lt;strong&gt;throughput&lt;/strong&gt; (because it prevents conflicting transactions from running during the protocol), &lt;strong&gt;scalability&lt;/strong&gt; (the larger the system, the more likely transactions become multi-partition and have to pay the throughput and latency costs of 2PC), and &lt;strong&gt;availability&lt;/strong&gt; (the blocking problem we discussed above).  &lt;em&gt;Nobody likes 2PC, but for decades, people have assumed that it is a necessary evil.&lt;/em&gt;&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;h3 dir=&quot;ltr&quot;&gt;&lt;span&gt;It’s time to move on&lt;/span&gt;&lt;/h3&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;For over three decades, we’ve been stuck with two-phase commit in sharded systems. People are aware of the performance, scalability, and availability problems it introduces, but nonetheless continue on, with no obvious better alternative.&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;The truth is, if we would just architect our systems differently, the need for 2PC would vanish. There have been some attempts to accomplish this --- both in academia (such as &lt;a href=&quot;https://cs.uwaterloo.ca/~kdaudjee/courses/cs848/papers/non2PC.pdf&quot; target=&quot;_blank&quot;&gt;this SIGMOD 2016 paper&lt;/a&gt;) and industry. However, these attempts typically work by avoiding multi-sharded transactions in the first place, such as by repartitioning data in advance of a transaction so that it is no longer multi-sharded. Unfortunately, this repartitioning reduces performance of the system in other ways.&lt;/span&gt;&lt;/div&gt;

&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;What I am calling for is a deeper type of change in the way we architect distributed systems. I insist that systems should still be able to process multi-sharded transactions --- with all the ACID guarantees and what that entails --- such as atomicity and durability --- but with much simpler and faster commit protocols.&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;It all comes down to a fundamental assumption that has been present in our systems for decades: a transaction may abort at any time and for any reason.&lt;/span&gt; &lt;span&gt;Even if I run the same transaction on the same initial system state … if I run it at 2:00PM it may commit, but at 3:00 it may abort.&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;The are several reasons why most architects believe we need this assumption. First, a machine may fail at anytime --- including in the middle of a transaction. Upon recovery, it is generally impossible to recreate all of the state of that transaction that was in volatile memory prior to the failure. As a result, it is seemingly impossible to pick up where the transaction left off prior to the failure. Therefore, the system aborts all transactions that were in progress at the time of the failure. Since a failure can occur at any time, this means that a transaction may abort at any time.&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;Second, most concurrency control protocols require the ability to abort a transaction at any time. Optimistic protocols perform a “validation” phase after processing a transaction. If validation fails, the transaction aborts.  Pessimistic protocols typically use locks to prevent concurrency anomalies. This use of locks may lead to deadlock, which is resolved by aborting (at least) one of the deadlocked transactions. Since deadlock may be discovered at any time, the transaction needs to retain the ability to abort at any time.&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;If you look carefully at the two-phase commit protocol, you will see that this arbitrary potential to abort a transaction is the primary source of complexity and latency in the protocol. Workers cannot easily tell each other whether they will commit or not, because they might still fail after this point (before the transaction is committed) and want to abort this transaction during recovery. Therefore, they have to wait until the end of transaction processing (when all important state is made durable) and proceed in the necessary two phases: in the first phase, each worker publically relinquishes its control to abort a transaction, and only then can the second phase occur in which a final decision is made and disseminated.&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;In my opinion we need to&lt;/span&gt; &lt;span&gt;remove veto power from workers&lt;/span&gt; &lt;span&gt;and&lt;/span&gt; &lt;span&gt;architect systems in which the system does not have freedom to abort a transaction whenever it wants&lt;/span&gt; &lt;span&gt;during its execution. Only logic within a transaction should be allowed to cause a transaction to abort. If it is theoretically possible to commit a transaction given an current state of the database, that transaction must commit, no matter what types of failures occur. Furthermore, there must not be race conditions relative to other concurrently running transactions that can affect the final commit/abort state of a transaction.&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;Removing abort flexibility sounds hard. We’ll discuss soon how to accomplish this. But first let’s observe how the commit protocol changes if transactions don’t have abort flexibility.&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;h3 dir=&quot;ltr&quot;&gt;&lt;span&gt;What a commit protocol looks like when transactions can’t abort arbitrarily&lt;/span&gt;&lt;/h3&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;Let’s look at two examples:&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;In the first example, assume that the worker for the shard that stores the value for variable X is assigned a single task for a transaction: change the value of X to 42. Assume (for now) that there are no integrity constraints or triggers defined on X (which may prevent the system from setting X to 42). In such a case, that worker is never given the power to be able to abort the transaction. No matter what happens, that worker must change X to 42. If that worker fails, it must change X to 42 after it recovers. Since it never has any power to abort, there is no need to check with that worker during the commit protocol to see if it will commit.&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;In the second example, assume that the worker for the shard that stores the value for variables Y and Z is assigned two tasks for a transaction: subtract 1 from the previous value of Y and set Z to the new value of Y. Furthermore, assume that there is an integrity constraint on Y that states that Y can never go below 0 (e.g., if it represents the inventory of an item in a retail application). Therefore, this worker has to run the equivalent of the following code:&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;          IF (Y &amp;gt; 0)&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;             Subtract 1 from Y&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;          ELSE&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;              ABORT the transaction&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;          Z = Y&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;This worker must be given the power to abort the transaction since this required by the logic of the application. However, this power is limited. Only if the initial value of Y was 0 can this worker abort the transaction. Otherwise, it has no choice but to commit. Therefore, it doesn’t have to wait until it has completed the transaction code before knowing whether it will commit or not. On the contrary: as soon as it has finished executing the first line of code in the transaction, it already knows its final commit/abort decision. This implies that the commit protocol will be able to start much earlier relative to 2PC.&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;Let’s now combine these two examples into a single example in which a transaction is being performed by two workers --- one of them is doing the work described in the first example, and the other one doing the work described in the second example. Since we are guaranteeing atomicity, the first worker cannot simply blindly set X to 42. Rather, it’s own work must also be dependent on the value of Y. In effect, it’s transaction code becomes:&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;     temp = Do_Remote_Read(Y)&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;     if (temp &amp;gt; 0)&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;        X = 42&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;Note that if the first worker’s code is written in this way, the code for the other worker can be simplified to just:&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;     IF (Y &amp;gt; 0)&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;        Subtract 1 from Y&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;        Z = Y&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;By writing the transaction code in this way, we have removed explicit abort logic from both workers. Instead, both workers have if statements that check for the constraint that would have caused the original transaction to abort. If the original transaction would have aborted, both workers end up doing nothing. Otherwise, both workers change the values of their local state as required by the transaction logic.&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;The important thing to note at this point is that&lt;/span&gt; &lt;span&gt;the need for a commit protocol has been totally eliminated in the above code&lt;/span&gt;&lt;span&gt;. The system is not allowed to abort a transaction for any reason other than conditional logic defined by application code on a given state of the data. And all workers condition their writes on this same conditional logic so that they can all independently decide to “do nothing” in those situations where a transaction cannot complete as a result of current system state. Thus, all possibility of a transaction abort has been removed, and there is no need for any kind of distributed protocol at the end of transaction processing to make a combined final decision about the transaction. All of the problems of 2PC have been eliminated. There is no blocking problem because there is no coordinator. And there is no cloggage problem, because all necessary checks are overlapped with transaction processing instead of after it completes.&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;Moreover, as long as the system is not allowed to abort a transaction for any reason other than the conditional application logic based on input data state, it is always possible to rewrite any transaction as we did above in order to replace abort logic in the code with if statements that conditionally check the abort conditions. Furthermore, it is possible to accomplish this without actually rewriting application code. [The details of how to do this are out of scope for this post, but to summarize at a high level: shards can set special system-owned boolean flags when they have completed any conditional logic that could cause an abort, and it is these boolean flags that are remotely read from other shards.]&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;In essence: there are two types of aborts that are possible in transaction processing systems: (1) Those that are caused by the state of the data and (2) Those that are caused by the system itself (e.g. failures or deadlocks). Category (1) can always be written in terms of conditional logic on the data as we did above. So if you can eliminate category (2) aborts, the commit protocol can be eliminated.&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;So now, all we have to do is explain how to eliminate category (2) aborts.&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;h3 dir=&quot;ltr&quot;&gt;&lt;span&gt;Removing system-induced aborts&lt;/span&gt;&lt;/h3&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;I have spent almost an entire decade designing systems that do not allow system-induced aborts. Examples of such systems are&lt;/span&gt; &lt;a href=&quot;http://www.cs.umd.edu/~abadi/papers/calvin-sigmod12.pdf&quot;&gt;&lt;span&gt;Calvin&lt;/span&gt;&lt;/a&gt;&lt;span&gt;,&lt;/span&gt; &lt;a href=&quot;http://www.cs.umd.edu/~abadi/papers/calvinfs.pdf&quot;&gt;&lt;span&gt;CalvinFS&lt;/span&gt;&lt;/a&gt;&lt;span&gt;,&lt;/span&gt; &lt;a href=&quot;http://www.cs.umd.edu/~abadi/papers/orthrus-sigmod16.pdf&quot;&gt;&lt;span&gt;Orthrus&lt;/span&gt;&lt;/a&gt;&lt;span&gt;,&lt;/span&gt; &lt;a href=&quot;http://www.cs.umd.edu/~abadi/papers/early-write-visibility.pdf&quot;&gt;&lt;span&gt;PVW&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, and a&lt;/span&gt; &lt;a href=&quot;http://www.cs.umd.edu/~abadi/papers/lazy-xacts.pdf&quot;&gt;&lt;span&gt;system that processes transactions lazily&lt;/span&gt;&lt;/a&gt;&lt;span&gt;. The impetus for this feature came from the first of these projects --- Calvin --- because of its status of being a deterministic database system. A deterministic database guarantees that there is only one possible final state of the data in the database given a defined set of input requests. It is therefore possible to send the same input to two distinct replicas of the system and be certain that the replicas will process this input independently and end up in the same final state, without any possibility of divergence.&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;System-induced aborts such as system failure or concurrency control race conditions are fundamentally nondeterministic events. It is very possible that one replica will fail or enter a race condition while the other replica will not. If these nondeterministic events were allowed to result in an a transaction to abort, then one replica may abort a transaction while the other one would commit --- a fundamental violation of the deterministic guarantee. Therefore, we had to design Calvin in a way that failures and race conditions cannot result in a transaction to abort. For concurrency control, Calvin used pessimistic locking with a deadlock avoidance technique that ensured that the system would never get into a situation where it had to abort a transaction due to deadlock. In the face of a system failure, Calvin did not pick up a transaction exactly where it left off (because of the loss of volatile memory during the failure). Nonetheless, it was able to&lt;/span&gt; &lt;span&gt;bring the processing of that transaction to completion without having to abort it. It accomplished this&lt;/span&gt; &lt;span&gt;via restarting the transaction from the same original input.&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;Neither of these solutions --- neither deadlock avoidance nor transaction restart upon a failure --- are limited to being used in deterministic database systems. [Transaction restart gets a little tricky in nondeterministic systems if some of the volatile state associated with a transaction that was lost during a failure was observed by other machines that did not fail. But there are simple ways to solve this problem that are out of scope for this post.] Indeed, some of the other systems I linked to above are nondeterministic systems. Once we realized the power that comes with removing system-level aborts, we built this feature into every system we built after the Calvin project --- even the nondeterministic systems.&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;h3 dir=&quot;ltr&quot;&gt;&lt;span&gt;Conclusion&lt;/span&gt;&lt;/h3&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;I see very little benefit in system architects making continued use of 2PC in sharded systems moving forward. I believe that removing system-induced aborts and rewriting state-induced aborts is the better way forward. Deterministic database systems such as Calvin or&lt;/span&gt; &lt;a href=&quot;https://fauna.com/&quot;&gt;&lt;span&gt;FaunaDB&lt;/span&gt;&lt;/a&gt; &lt;span&gt; always remove system-induced aborts anyway, and thus usually can avoid 2PC as we described above. But it is a huge waste to limit this benefit to only deterministic databases. It is not hard to remove system-induced aborts from nondeterministic systems. Recent projects have shown that it is even possible to remove system-induced aborts in systems that use concurrency control techniques other than pessimistic concurrency control. For example, both the PVW and the lazy transaction processing systems we linked to above use a variant of multi-versioned concurrency control. And FaunaDB uses a variant of optimistic concurrency control.&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;In my opinion there is very little excuse to continue with antiquated assumptions regarding the need for system-induced aborts in the system. In the old days when systems ran on single machines, such assumptions were justifiable. However, in modern times, where many systems need to scale to multiple machines that can fail independently of each other, these assumptions require expensive coordination and commit protocols such as 2PC. The performance problems of 2PC has been a major force behind the rise of non-ACID compliant systems that give up important guarantees in order to achieve better scalability, availability, and performance. 2PC is just too slow --- it increases the latency of all transactions --- not just by the length of the protocol itself, but also by preventing transactions that access the same set of data from running concurrently. 2PC also limits scalability (by reducing concurrency) and availability (the blocking problem we discussed above). The way forward is clear: we need to reconsider antiquated assumptions when designing our systems and say “good-bye” to two phase commit!&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;
</description>
<pubDate>Fri, 25 Jan 2019 16:31:09 +0000</pubDate>
<dc:creator>evanweaver</dc:creator>
<og:url>http://dbmsmusings.blogspot.com/2019/01/its-time-to-move-on-from-two-phase.html</og:url>
<og:title>It’s Time to Move on from Two Phase Commit</og:title>
<og:description>The two-phase commit protocol (2PC) has been used in enterprise software systems for over three decades . It has been an an incredibly impa...</og:description>
<og:image>https://lh6.googleusercontent.com/F7giuNAtrYsZz1ZYZPOuqXnnYYfUTiXq-IU-wKkiRbnKqhnEehTA1cIwdDTIQ5MylDjbsKhbjYLyZJkt-HFQQ50BaMtS2Vel_vr0II5vbjl2K6UX3tjQTnOb75ICgeo7IQDmIyeG=w1200-h630-p-k-no-nu</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>http://dbmsmusings.blogspot.com/2019/01/its-time-to-move-on-from-two-phase.html</dc:identifier>
</item>
<item>
<title>US shutdown: Flight delays caused by staff shortages</title>
<link>https://www.bbc.com/news/world-us-canada-47006907</link>
<guid isPermaLink="true" >https://www.bbc.com/news/world-us-canada-47006907</guid>
<description>&lt;figure class=&quot;media-landscape has-caption full-width lead&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                &lt;img class=&quot;js-image-replace&quot; alt=&quot;People attend a rally of air traffic control and other airline industry unions&quot; src=&quot;https://ichef.bbci.co.uk/news/320/cpsprodpb/10EE/production/_105343340_3fd0b268-334b-4f47-bdb6-7842e7e242ae.jpg&quot; width=&quot;976&quot; height=&quot;549&quot;/&gt;&lt;span class=&quot;off-screen&quot;&gt;Image copyright&lt;/span&gt;
                 &lt;span class=&quot;story-image-copyright&quot;&gt;AFP&lt;/span&gt;
                
            &lt;/span&gt;
            
            &lt;figcaption class=&quot;media-caption&quot;&gt;&lt;span class=&quot;off-screen&quot;&gt;Image caption&lt;/span&gt;
                &lt;span class=&quot;media-caption__text&quot;&gt;
                    Air staff unions have issued warnings about the shutdown's impact
                &lt;/span&gt;
            &lt;/figcaption&gt;&lt;/figure&gt;&lt;p class=&quot;story-body__introduction&quot;&gt;Staff shortages linked to the federal government shutdown caused significant flight delays at north-eastern US airports on Friday.&lt;/p&gt;&lt;p&gt;The shutdown has meant some federal staff, like air traffic controllers, have been working without pay.&lt;/p&gt;&lt;p&gt;Nancy Pelosi, Speaker of the House of Representatives, took to Twitter to blame the president for the disruption. &lt;/p&gt;&lt;p&gt;Hours later, &lt;a href=&quot;https://www.bbc.co.uk/news/world-us-canada-47007081&quot; class=&quot;story-body__link&quot;&gt;Mr Trump announced a deal to fund the government&lt;/a&gt; and lift the shutdown temporarily.&lt;/p&gt;&lt;p&gt;Friday's delays came one day after air industry unions issued a stark warning about the risk the shutdown was posing to public safety. &lt;/p&gt;&lt;p&gt;In total about 800,000 federal employees have been working without pay, or have been temporarily laid off, since funding to areas of the government halted 35 days ago. &lt;/p&gt;&lt;p&gt;These numbers include air traffic controllers, as well as US airport security screening staff. &lt;/p&gt;&lt;p&gt;The shutdown started in December, when President Trump refused to approve any new funding agreement that failed to include $5.7bn (£4.4bn) for his southern border wall.&lt;/p&gt;&lt;figure class=&quot;media-landscape has-caption full-width&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                
                
                
                
                 &lt;span class=&quot;off-screen&quot;&gt;Image copyright&lt;/span&gt;
                 &lt;span class=&quot;story-image-copyright&quot;&gt;AFP&lt;/span&gt;
                
            &lt;/span&gt;
            
            &lt;figcaption class=&quot;media-caption&quot;&gt;&lt;span class=&quot;off-screen&quot;&gt;Image caption&lt;/span&gt;
                &lt;span class=&quot;media-caption__text&quot;&gt;
                    The Transportation Security Administration (TSA) have reported high absences
                &lt;/span&gt;
            &lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;Democrats in Congress refused to agree to those terms - so the two sides had been stuck at an impasse before Mr Trump's most recent announcement. &lt;/p&gt;&lt;h2 class=&quot;story-body__crosshead&quot;&gt;How did the disruption come about? &lt;/h2&gt;&lt;p&gt;The Federal Aviation Administration (FAA) halted arrivals for nearly an hour at New York's LaGuardia Airport shortly before 10:00 (15:00 GMT). &lt;/p&gt;&lt;p&gt;It blamed air traffic staff shortages for the strategic closures - which also delayed flights at Newark Liberty International Airport and Philadelphia International Airport.&lt;/p&gt;&lt;p&gt;One passenger, named John Hitt, told the Reuters news agency he had to cancel a trip to visit his terminally ill aunt because of the delays.&lt;/p&gt;&lt;p&gt;LaGuardia airport said in a tweet on Friday afternoon that lengthy delays at the airport were ongoing.&lt;/p&gt;&lt;figure class=&quot;media-landscape no-caption full-width&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                
                
                
                
            &lt;/span&gt;
            
        &lt;/figure&gt;&lt;p&gt;There have been widespread reports about high absences among US airport security staff for a number of weeks. &lt;/p&gt;&lt;p&gt;On Thursday, the CEO of JetBlue Airways said the shutdown's impact on carriers had so far been limited, but warned it was nearing a tipping point.&lt;/p&gt;&lt;p&gt;Southwest Airlines head Gary Kelly has described the shutdown as &quot;maddening&quot; - estimating they have lost out on $10-15m (£7.5-11m) in January sales.&lt;/p&gt;&lt;p&gt;On Friday, the Association of Flight Attendants issued a blistering statement in response to the delays.&lt;/p&gt;&lt;figure class=&quot;media-landscape has-caption full-width&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                
                
                
                
                 &lt;span class=&quot;off-screen&quot;&gt;Image copyright&lt;/span&gt;
                 &lt;span class=&quot;story-image-copyright&quot;&gt;AFP&lt;/span&gt;
                
            &lt;/span&gt;
            
            &lt;figcaption class=&quot;media-caption&quot;&gt;&lt;span class=&quot;off-screen&quot;&gt;Image caption&lt;/span&gt;
                &lt;span class=&quot;media-caption__text&quot;&gt;
                    Passengers are reporting significant delays still at LaGuardia
                &lt;/span&gt;
            &lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&quot;The aviation system depends on the safety professionals who make it run. They have been doing unbelievably heroic work even as they are betrayed by the government that employs them,&quot; President Sara Nelson said in a statement.&lt;/p&gt;&lt;p&gt;&quot;They are fatigued, worried, and distracted - but they won't risk our safety.&quot;&lt;/p&gt;&lt;h2 class=&quot;story-body__crosshead&quot;&gt;What is the latest with shutdown?&lt;/h2&gt;&lt;p&gt;Mr Trump's backing to re-open the government serves as a temporary solution but if no longer agreement is implemented, funding will  lapse again on 15 February.&lt;/p&gt;&lt;p&gt;Speaking at the White House on Friday, he described federal workers affected by the shutdown as &quot;incredible patriots&quot;.&lt;/p&gt;&lt;p&gt;He also said they would receive the full back-pay they have missed. &lt;/p&gt;&lt;ul class=&quot;story-body__unordered-list&quot;&gt;&lt;li class=&quot;story-body__list-item&quot;&gt;&lt;a href=&quot;https://www.bbc.co.uk/news/world-us-canada-46739180&quot; class=&quot;story-body__link&quot;&gt;Read more: The impact of the government shutdown&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure class=&quot;media-landscape no-caption full-width&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                
                
                
                
            &lt;/span&gt;
            
        &lt;/figure&gt;&lt;hr class=&quot;story-body__line&quot;/&gt;&lt;p&gt;&lt;strong&gt;Are you trying to fly in or out of LaGuardia airport?  Or are you at one of the other affected airports? Share you experience by emailing &lt;/strong&gt;&lt;a href=&quot;mailto:haveyoursay@bbc.co.uk?subject=USAirports47006907&quot; class=&quot;story-body__link-email&quot;&gt;&lt;span class=&quot;icon email&quot;/&gt;&lt;span class=&quot;story-body__link-email-text&quot;&gt;haveyoursay@bbc.co.uk&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Please include a contact number if you are willing to speak to a BBC journalist. You can also contact us in the following ways: &lt;/p&gt;</description>
<pubDate>Fri, 25 Jan 2019 15:36:58 +0000</pubDate>
<dc:creator>pbhowmic</dc:creator>
<og:title>US flight delays blamed on shutdown</og:title>
<og:type>article</og:type>
<og:description>Departures from a number of US airports were affected by air control shortages on Friday.</og:description>
<og:url>https://www.bbc.com/news/world-us-canada-47006907</og:url>
<og:image>https://ichef.bbci.co.uk/news/1024/branded_news/10EE/production/_105343340_3fd0b268-334b-4f47-bdb6-7842e7e242ae.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.bbc.com/news/world-us-canada-47006907</dc:identifier>
</item>
</channel>
</rss>