<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Teachers Quit Jobs at Highest Rate on Record</title>
<link>https://www.wsj.com/articles/teachers-quit-jobs-at-highest-rate-on-record-11545993052</link>
<guid isPermaLink="true" >https://www.wsj.com/articles/teachers-quit-jobs-at-highest-rate-on-record-11545993052</guid>
<description>&lt;p&gt;Teachers and other public education employees, such as community-college faculty, school psychologists and janitors, are quitting their jobs at the fastest rate on record, government data shows.&lt;/p&gt; &lt;p&gt;A tight labor market with historically low unemployment has encouraged Americans in a variety of occupations to quit their jobs at elevated rates, with the expectation they can find something better. But quitting among public educators stands out because the field is one where stability is viewed as a key perk and longevity often rewarded....
  &lt;/p&gt;</description>
<pubDate>Fri, 28 Dec 2018 23:20:23 +0000</pubDate>
<dc:creator>dpflan</dc:creator>
<og:title>Teachers Quit Jobs at Highest Rate on Record </og:title>
<og:description>Teachers and other public education employees—such as community-college faculty, school psychologists and janitors—are quitting their jobs at the fastest rate on record, government data show.</og:description>
<og:url>https://www.wsj.com/articles/teachers-quit-jobs-at-highest-rate-on-record-11545993052</og:url>
<og:image>https://si.wsj.net/public/resources/images/B3-CT536_teache_SOC_20181227171926.jpg</og:image>
<og:type>article</og:type>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.wsj.com/articles/teachers-quit-jobs-at-highest-rate-on-record-11545993052</dc:identifier>
</item>
<item>
<title>What Happens to Kid Culture When Streets Are Closed to Cars</title>
<link>https://www.citylab.com/design/2018/11/car-free-pedestrianization-made-pontevedra-spain-kid-friendly/576268/</link>
<guid isPermaLink="true" >https://www.citylab.com/design/2018/11/car-free-pedestrianization-made-pontevedra-spain-kid-friendly/576268/</guid>
<description>&lt;img class=&quot;c-lead-image__img&quot; srcset=&quot;https://cdn.citylab.com/media/img/citylab/2018/11/credit_pontevedra_city_council_DSC_5451/300.jpg?mod=1543247666&quot; alt=&quot;Kids play soccer in a main square without cars.&quot; itemprop=&quot;contentUrl&quot; onload=&quot;performance.mark(&amp;quot;citylab_lead_image_loaded&amp;quot;)&quot;/&gt;&lt;noscript&gt;
&lt;p&gt;&lt;img class=&quot;c-lead-image__img&quot; src=&quot;https://cdn.citylab.com/media/img/citylab/2018/11/credit_pontevedra_city_council_DSC_5451/300.jpg?mod=1543247666&quot; alt=&quot;Kids play soccer in a main square without cars.&quot;/&gt;&lt;/p&gt;
&lt;/noscript&gt; &lt;span class=&quot;c-lead-image__caption&quot; itemprop=&quot;caption&quot;&gt;Kids play soccer on a carless street in Pontevedra.&lt;/span&gt; &lt;span class=&quot;c-lead-image__attribution&quot; itemprop=&quot;creator&quot;&gt;Pontevedra City Council&lt;/span&gt;

&lt;h2 class=&quot;l-article__dek o-small-container&quot; itemprop=&quot;description&quot;&gt;In the Spanish city Pontevedra, a family-friendly “pedestrianization” policy has helped increase the population of kids, despite the country’s low birth rates.&lt;/h2&gt;
&lt;section class=&quot;s-article__section o-small-container&quot; id=&quot;article-section-1&quot; readability=&quot;74&quot;&gt;&lt;p dir=&quot;ltr&quot;&gt;PONTEVEDRA—Once a city with narrow streets invaded by traffic and city squares more like parking lots, the roads of Pontevedra, Spain, are now often filled with baby strollers and children playing. Kids carry their toys in small backpacks and spread them on the pavement to share with other kids. Playgrounds with swing sets and slides are deliberately unencumbered by fences. “We want children to play all over our city, and to play whatever game comes to mind,” said Cesar Mosquera, the Urban Councilor of Pontevedra.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;By restricting traffic and eliminating physical barriers, the city council has redesigned Pontevedra from the sight line of a child. Doing so, Mosquera believes, helps the city address everybody’s needs, especially the disadvantaged. “Where there are children, there are healthy adults,” Mosquera said. The policy, which has been expanding for almost two decades now, has had many impacts on the community. One of the most tangible: The once-languishing historic city center has become a friendlier space for kids and their caretakers.&lt;/p&gt;
&lt;/section&gt;
&lt;section class=&quot;s-article__section o-small-container&quot; id=&quot;article-section-2&quot; readability=&quot;89.339207048458&quot;&gt;&lt;p dir=&quot;ltr&quot;&gt;This trend is reflected in the demographics of Pontevedra. The city has attracted young families from throughout Spain’s northwest region to settle in the city, even as Spain overall &lt;a href=&quot;https://www.reuters.com/article/us-spain-economy-population/spanish-deaths-outpace-births-at-fastest-rate-since-records-began-in-1941-idUSKBN1JF1C3&quot;&gt;grapples with low birth rates&lt;/a&gt;. In the last decade, Pontevedra has experienced the most growth compared to other major cities in the region of Galicia. The newly revitalized, now pedestrian-focused town grew from 73,871 neighbors in 1998 to 82,671 in 2017&lt;strong&gt;,&lt;/strong&gt; according to the Statistics Institute of Galicia.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Since pedestrianization started in 2000, the population of kids age 0 to 14 also increased by 8 percent in Pontevedra, compared to 3.2 percent in Galicia’s capital Santiago de Compostela and 2.4 percent in Vigo, the region’s economic hub.&lt;/p&gt;
&lt;a href=&quot;https://www.citylab.com/special-report/room-to-grow/&quot;&gt;&lt;img alt=&quot;&quot; data-srcset=&quot;https://cdn.theatlantic.com/assets/media/img/posts/2018/08/8_Room_to_Grow_Bug_01/21bfcd440.png&quot; class=&quot;lazyload&quot;/&gt;&lt;/a&gt;
&lt;p dir=&quot;ltr&quot;&gt;“Here you don’t have to hold your child’s hand all the time. In any other city that would only happen inside a mall,” said Willy García, father of three-year-old Mauro, standing at the pedestrian “Children’s Fountain” square, once an intersection with 25,000 cars passing daily.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Rather than go for suburban life in the big metropolitan areas, the García family opted for a mid-sized town. It’s a common refrain among those who relocated to the area. Marolia Otero, mother of Gabriel and Lola, ages five and three, said she moved to Pontevedra because in places like Vigo, the region’s economic hub, the costs of housing were much greater. In larger cities, those costs would mean living in the far-out suburbs, with longer commutes that leave parents less time with their kids. In Pontevedra, many services are within walking distance.&lt;/p&gt;
&lt;/section&gt;
&lt;section class=&quot;s-article__section o-small-container&quot; id=&quot;article-section-3&quot; readability=&quot;73.131115459883&quot;&gt;&lt;p dir=&quot;ltr&quot;&gt;Carlos Ferrás, an expert in demography and a lecturer of Human Geography at Santiago de Compostela University (USC), says the urban planning-centered approach has been more effective at fostering a parent-friendly environment than other policies some governments have adopted to try to directly increase birth rates.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;“Birth-incentive policies—like one-off compensations per newborn—have proved to be &lt;a href=&quot;https://www.citylab.com/life/2018/08/south-korea-needs-more-babies/565169/&quot;&gt;unsuccessful&lt;/a&gt;. If we want to end Spain’s aging drama, we must look for parenting policies, measures that help parents raise their kids, starting with urban planning,” said Ferrás.&lt;/p&gt;
&lt;section class=&quot;c-newsletter c-newsletter--promo c-newsletter--cta&quot;&gt;&lt;h2 class=&quot;c-newsletter__title&quot;&gt;Cities are changing fast. Keep up with the &lt;strong&gt;CityLab Daily&lt;/strong&gt; newsletter.&lt;/h2&gt;
&lt;label for=&quot;promo-email-input-email&quot; class=&quot;c-newsletter__cta c-newsletter__cta--promo&quot;&gt;The best way to follow issues you care about.&lt;/label&gt;

&lt;/section&gt;&lt;p dir=&quot;ltr&quot;&gt;“The city council has run a very successful strategy, promoting attractive and affordable residential developments in the urban area rather than in the suburbs, and an urban model that is sustainable, greener, convenient, and designed to support citizens throughout their parenting process.”&lt;/p&gt;
&lt;/section&gt;&lt;img alt=&quot;&quot; data-srcset=&quot;https://cdn.theatlantic.com/assets/media/img/posts/2018/11/IMG_20180806_201702_2/d3f82e1ad.jpg&quot; class=&quot;lazyload&quot;/&gt;A pedestrianized street in Pontevedra. (Jaime Velazquez)
&lt;section class=&quot;s-article__section o-small-container&quot; id=&quot;article-section-4&quot; readability=&quot;81&quot;&gt;&lt;p dir=&quot;ltr&quot;&gt;Pontevedra has continued to expand the pedestrian area from the center to the outskirts, liberating a total 669,000 square meters previously dominated by cars, and the transformation is still ongoing. Car use in the inner city has dropped by 77 percent, and CO2 emissions have dropped by 66 percent, according to the city council. The crime rate has gone down, too, adding to the feeling that the city is safe for unattended kids. In 2010, Pontevedra reached its lowest crime rate in a decade with 34 offenses per 1,000 citizens, and last year it reached a new low of 27.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Surprisingly, cars are not strictly banned inside the city. Residents with a private garage can bring their cars in, and traffic is open to delivery services, emergencies, and even to private drivers who need to stop by the center for a pick-up or drop-off.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;One of the most impactful policies on human behavior has actually been removing most of the street parking space inside the pedestrian-priority area. “We found that almost 60 percent of vehicles circulating inside town were actually going around in circles trying to find a parking spot. Now, since they know they won’t be able to park, they have stopped bringing their cars in and they use the outer parking areas,” Mosquera explained.&lt;/p&gt;
&lt;/section&gt;
&lt;section class=&quot;s-article__section o-small-container&quot; id=&quot;article-section-5&quot; readability=&quot;57&quot;&gt;&lt;p dir=&quot;ltr&quot;&gt;“It is a very safe environment. With no cars, you don’t have to worry about them being run over,” Otero said. “And since there are a lot of parents with kids, and we all end up knowing each other. Sometimes you can even ask a friend to look after your kids while you quickly run errands.”&lt;/p&gt;
&lt;/section&gt;&lt;img alt=&quot;&quot; data-srcset=&quot;https://cdn.theatlantic.com/assets/media/img/posts/2018/11/roller_skating/bd527da62.jpg&quot; class=&quot;lazyload&quot;/&gt;(Pontevedra City Council)
&lt;section class=&quot;s-article__section o-small-container&quot; id=&quot;article-section-6&quot; readability=&quot;76&quot;&gt;&lt;p dir=&quot;ltr&quot;&gt;For Ferrás, the demographer, this might be Pontevedra’s key to success: a social and urban environment that makes parents feel supported by the community. In Pontevedra, 80 percent of kids age 6 to 12 walk alone to school every morning, and in case they need help, they can report to volunteering local businesses, where they will be looked after.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;“Cities must be designed so citizens can afford being a parent—an urban model that favors work-family reconciliation. They need to feel accompanied through the process and [that they are in] an ecosystem that values childhood and teenhood.”&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;It has happened that these policies ended up paying off at the ballot box, too. In a town that votes conservative in the general elections, Mosquera’s leftist-nationalist political coalition, BNG, has been ruling ever since the pedestrianization program began in 1999. Its urban model has been awarded a number of prizes, including the UN-Habitat Dubai International prize in 2014 and the 2015 Center for Active Design award, among others.&lt;/p&gt;
&lt;/section&gt;&lt;aside class=&quot;c-related-content u-full-width u-lazy lazyload&quot; data-include=&quot;css:https://cdn.citylab.com/static/a/frontend/dist/citylab/css/components/related-content.188fbf9984d0.css&quot;&gt;&lt;h4 class=&quot;c-related-content__title&quot;&gt;Recommended&lt;/h4&gt;

&lt;/aside&gt;&lt;section class=&quot;s-article__section o-small-container&quot; id=&quot;article-section-7&quot; readability=&quot;74&quot;&gt;&lt;p dir=&quot;ltr&quot;&gt;The early resistance of neighbors and local businessmen who feared the absence of cars would mean an absence of customers are well over. Even for the opposition parties challenging BNG’s 20-year dominance, reversing pedestrianization is now likely out of the question. Still, some of those living outside the flourishing pedestrian area are the ones who have the most criticism of the policy, saying they’ve been excluded from Pontevedra’s urban improvements, and that the lack of a working public transit network has forced them to either take their car and deal with the limited parking space available or simply stay away from town.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;As part of the city’s strategy for work-family balance, schools are kept in the city center and the maternity and pediatric services have been moved from the big hospital complex outside town to a smaller facility right in the pedestrian area. Families with children in Pontevedra also benefit from a wide range of cultural activities tailored for kids. The local theater offers a play every Sunday for children under 12, the central food market hosts workshops for kids on Saturday afternoons, and the city libraries have a year-round activity program for them. During the summer, public urban boot camps take care of the kids while their parents work.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;“It is like building a nest,” said Carmen Fouces, Pontevedra’s culture councilor. “If you put some fluff and straws on a branch, a bird will soon make it its home.”&lt;/p&gt;
&lt;/section&gt;&lt;section class=&quot;s-article__section o-small-container c-foundation-line&quot; readability=&quot;29.371727748691&quot;&gt;&lt;p&gt;Funding was provided by the Bernard van Leer Foundation to support our project, “Room to Grow,” about raising tiny humans in the city. Sign up &lt;a href=&quot;https://docs.google.com/forms/d/e/1FAIpQLSerzV3tqrlwRSmYAmFowFvv1tmyFKB11rLKAXkVc4rMkMAzlA/viewform&quot;&gt;here&lt;/a&gt; to receive email updates on the series.&lt;/p&gt;
&lt;/section&gt;&lt;section class=&quot;c-authors-article u-lazy lazyload&quot; data-include=&quot;css:https://cdn.citylab.com/static/a/frontend/dist/citylab/css/components/author-article.e6996e6bb587.css&quot;&gt;&lt;h4 class=&quot;c-authors-article__about-title&quot;&gt;About the Author&lt;/h4&gt;
&lt;section class=&quot;c-author-article&quot; itemprop=&quot;author&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/Person&quot; readability=&quot;13.188405797101&quot;&gt;&lt;div class=&quot;c-author-article__content&quot; readability=&quot;16.231884057971&quot;&gt;
&lt;h5 class=&quot;c-author-article__title&quot; itemprop=&quot;name&quot;&gt;&lt;a class=&quot;c-author-article__link&quot; href=&quot;https://www.citylab.com/authors/jaime-velazquez/&quot;&gt;Jaime Velazquez&lt;/a&gt;&lt;/h5&gt;
&lt;p class=&quot;c-author-article__bio&quot; itemprop=&quot;description&quot;&gt;&lt;a href=&quot;https://www.citylab.com/authors/jaime-velazquez/&quot; class=&quot;author-link&quot; data-omni-click=&quot;inherit&quot;&gt;Jaime Velazquez&lt;/a&gt; is a journalist based in Madrid&lt;strong&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/section&gt;&lt;/section&gt;</description>
<pubDate>Fri, 28 Dec 2018 20:07:35 +0000</pubDate>
<dc:creator>anonymfus</dc:creator>
<og:description>For one thing, the population of young kids is increasing, even as the country struggles with low birth rates.</og:description>
<og:image>https://cdn.citylab.com/media/img/citylab/2018/11/credit_pontevedra_city_council_DSC_5451/facebook.jpg?1543247666</og:image>
<og:title>What Happened When This Spanish City Went Car-Free</og:title>
<og:type>article</og:type>
<og:url>https://www.citylab.com/design/2018/11/car-free-pedestrianization-made-pontevedra-spain-kid-friendly/576268/</og:url>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.citylab.com/design/2018/11/car-free-pedestrianization-made-pontevedra-spain-kid-friendly/576268/</dc:identifier>
</item>
<item>
<title>911 emergency services go down across the US after CenturyLink outage</title>
<link>https://techcrunch.com/2018/12/28/911-service-outage-centurylink/</link>
<guid isPermaLink="true" >https://techcrunch.com/2018/12/28/911-service-outage-centurylink/</guid>
<description>&lt;p id=&quot;speakable-summary&quot;&gt;911 emergency services in several states across the U.S. went down after a massive outage at a CenturyLink data center.&lt;/p&gt;
&lt;p&gt;The outage began after 12pm ET on Thursday, &lt;a href=&quot;https://status.ctl.io/history/68d99a34-94e8-4fdf-af20-8612e335f97d&quot;&gt;according to CenturyLink’s status page&lt;/a&gt;, and caused disruption across 911 call centers through Friday. Some states saw their services restored throughout the day. CenturyLink did not sy what caused the outage beyond an issue with a “network element,” but said around 11am ET on Friday that the company said that it was “&lt;span&gt;seeing good progress, but our service restoration work is not complete.”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;After 8pm on Friday, more than a day later, CenturyLink confirmed that “all consumer services impacted by this event, including voice and 911, have been restored.”&lt;/p&gt;
&lt;p&gt;CenturyLink, one of the largest telecommunications providers in the U.S., provides internet and phone backbone services to major cell carriers, including AT&amp;amp;T and Verizon. Data center or fiber issues can have a knock-on effect to other companies, cutting out service and causing cell site blackouts.&lt;/p&gt;
&lt;p&gt;In this case, the outage affected only cellular calls to 911, and not landline calls.&lt;/p&gt;
&lt;p&gt;Several states sent emergency alerts to residents’ cell phones warning of the outage.&lt;/p&gt;

&lt;p&gt;Among the areas affected included Seattle, Washington and Salt Lake City, Utah. Several other states, including Idaho, Oregon, Arizona and Missouri, were also affected, local news has reported.&lt;/p&gt;
&lt;p&gt;Many other police departments tweeted out alternative numbers for 911 in the event of an emergency.&lt;/p&gt;
&lt;p&gt;Police in Boston, Massachusetts tweeted that their service &lt;a href=&quot;https://twitter.com/MassStatePolice/status/1078639190118670336&quot;&gt;was restored&lt;/a&gt; this morning.&lt;/p&gt;
&lt;div class=&quot;embed breakout&quot; readability=&quot;8.1986301369863&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-width=&quot;550&quot; data-dnt=&quot;true&quot; readability=&quot;10.356164383562&quot;&gt;
&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;UPDATE: Technical issues with the 911 system, and the resulting wireless capability outages, have been resolved. Massachusetts callers may resume using 911 from their cell phones for public safety emergencies. &lt;a href=&quot;https://t.co/6AAeRdVxeN&quot;&gt;https://t.co/6AAeRdVxeN&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— Mass State Police (@MassStatePolice) &lt;a href=&quot;https://twitter.com/MassStatePolice/status/1078639190118670336?ref_src=twsrc%5Etfw&quot;&gt;December 28, 2018&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;Ajit Pai, chairman of the Federal Communications Commission, which regulates and monitors 911 services, said the commission is investigating the outage.&lt;/p&gt;
&lt;p&gt;“When an emergency strikes, it’s critical that Americans are able to use 911 to reach those who can help,” said Pai in a statement. “The CenturyLink service outage is therefore completely unacceptable, and its breadth and duration are particularly troubling.”&lt;/p&gt;
&lt;p&gt;“I’ve directed the Public Safety and Homeland Security Bureau to immediately launch an investigation into the cause and impact of this outage. This inquiry will include an examination of the effect that CenturyLink’s outage appears to have had on other providers’ 911 services,” he said.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Updated at 9pm ET on Friday: &lt;/strong&gt;&lt;em&gt;with an update from CenturyLink, confirming the outage was resolved.&lt;/em&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 28 Dec 2018 16:44:28 +0000</pubDate>
<dc:creator>LopRabbit</dc:creator>
<og:title>911 emergency services go down across the US after CenturyLink outage</og:title>
<og:description>911 emergency services in several states across the U.S. went down after a massive outage at a CenturyLink data center. The outage began after 12pm ET on Thursday, according to CenturyLink’s status page, and caused disruption across 911 call centers through Friday. Some states saw their servi…</og:description>
<og:image>https://techcrunch.com/wp-content/uploads/2018/12/GettyImages-112822745.jpg?w=601</og:image>
<og:url>http://social.techcrunch.com/2018/12/28/911-service-outage-centurylink/</og:url>
<og:type>article</og:type>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://techcrunch.com/2018/12/28/911-service-outage-centurylink/</dc:identifier>
</item>
<item>
<title>“Modern” C++ Lamentations</title>
<link>http://aras-p.info/blog/2018/12/28/Modern-C-Lamentations/</link>
<guid isPermaLink="true" >http://aras-p.info/blog/2018/12/28/Modern-C-Lamentations/</guid>
<description>&lt;p&gt;This will be a long wall of text, and kinda random! My main points are:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;C++ compile times are important,&lt;/li&gt;
&lt;li&gt;Non-optimized build performance is important,&lt;/li&gt;
&lt;li&gt;Cognitive load is important. I don’t expand much on this here, but if a programming language or a library makes me feel stupid, then I’m less likely to use it or like it. C++ does that &lt;em&gt;a lot&lt;/em&gt; :)&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;“&lt;a href=&quot;http://ericniebler.com/2018/12/05/standard-ranges/&quot;&gt;Standard Ranges&lt;/a&gt;” blog post by Eric Niebler – about C++20 ranges feature – was doing rounds in the game development twitterverse lately, with many expressing something like a “dislike” (mildly said) about the state of modern C++.&lt;/p&gt;
&lt;p&gt;I have expressed a similar thought too (&lt;a href=&quot;https://twitter.com/aras_p/status/1076947443823136768&quot;&gt;link&lt;/a&gt;):&lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;That example for Pythagorian Triples using C++20 ranges and other features sounds terrible to me. And yes I get that ranges can be useful, projections can be useful etc. Still, a terrible example! Why would anyone want to code like that?!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Which got slightly out of hand (now 5 days later, that tree of threads is still receiving a lot of replies!).&lt;/p&gt;
&lt;p&gt;Now, apologies to Eric for pointing out his post; my lamentation is mostly about “general state of C++” lately. The “bunch of angry gamedevs” on twitter has been picking on &lt;a href=&quot;https://www.boost.org/doc/libs/1_62_0/libs/geometry/doc/html/geometry/design.html&quot;&gt;Boost.Geometry rationale&lt;/a&gt; a year or two ago in a very similar way, and a dozen other times for other aspects of C++ ecosystem.&lt;/p&gt;
&lt;p&gt;But you know, twitter not being exactly a nuanced place, etc. etc. So let me expand here!&lt;/p&gt;
&lt;h3 id=&quot;pythagorean-triples-c-20-ranges-style&quot;&gt;Pythagorean Triples, C++20 Ranges Style&lt;/h3&gt;
&lt;p&gt;Here’s the full example from Eric’s &lt;a href=&quot;http://ericniebler.com/2018/12/05/standard-ranges/&quot;&gt;post&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c++&quot;&gt;// A sample standard C++20 program that prints
// the first N Pythagorean triples.
#include &amp;lt;iostream&amp;gt;
#include &amp;lt;optional&amp;gt;
#include &amp;lt;ranges&amp;gt;   // New header!
 
using namespace std;
 
// maybe_view defines a view over zero or one
// objects.
template&amp;lt;Semiregular T&amp;gt;
struct maybe_view : view_interface&amp;lt;maybe_view&amp;lt;T&amp;gt;&amp;gt; {
  maybe_view() = default;
  maybe_view(T t) : data_(std::move(t)) {
  }
  T const *begin() const noexcept {
    return data_ ? &amp;amp;*data_ : nullptr;
  }
  T const *end() const noexcept {
    return data_ ? &amp;amp;*data_ + 1 : nullptr;
  }
private:
  optional&amp;lt;T&amp;gt; data_{};
};
 
// &quot;for_each&quot; creates a new view by applying a
// transformation to each element in an input
// range, and flattening the resulting range of
// ranges.
// (This uses one syntax for constrained lambdas
// in C++20.)
inline constexpr auto for_each =
  []&amp;lt;Range R,
     Iterator I = iterator_t&amp;lt;R&amp;gt;,
     IndirectUnaryInvocable&amp;lt;I&amp;gt; Fun&amp;gt;(R&amp;amp;&amp;amp; r, Fun fun)
        requires Range&amp;lt;indirect_result_t&amp;lt;Fun, I&amp;gt;&amp;gt; {
      return std::forward&amp;lt;R&amp;gt;(r)
        | view::transform(std::move(fun))
        | view::join;
  };
 
// &quot;yield_if&quot; takes a bool and a value and
// returns a view of zero or one elements.
inline constexpr auto yield_if =
  []&amp;lt;Semiregular T&amp;gt;(bool b, T x) {
    return b ? maybe_view{std::move(x)}
             : maybe_view&amp;lt;T&amp;gt;{};
  };
 
int main() {
  // Define an infinite range of all the
  // Pythagorean triples:
  using view::iota;
  auto triples =
    for_each(iota(1), [](int z) {
      return for_each(iota(1, z+1), [=](int x) {
        return for_each(iota(x, z+1), [=](int y) {
          return yield_if(x*x + y*y == z*z,
            make_tuple(x, y, z));
        });
      });
    });
 
    // Display the first 10 triples
    for(auto triple : triples | view::take(10)) {
      cout &amp;lt;&amp;lt; '('
           &amp;lt;&amp;lt; get&amp;lt;0&amp;gt;(triple) &amp;lt;&amp;lt; ','
           &amp;lt;&amp;lt; get&amp;lt;1&amp;gt;(triple) &amp;lt;&amp;lt; ','
           &amp;lt;&amp;lt; get&amp;lt;2&amp;gt;(triple) &amp;lt;&amp;lt; ')' &amp;lt;&amp;lt; '\n';
  }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Eric’s post comes from his &lt;a href=&quot;http://ericniebler.com/2014/04/27/range-comprehensions/&quot;&gt;earlier post&lt;/a&gt; from a few years back, which was a response to Bartosz Milewski’s post “&lt;a href=&quot;https://bartoszmilewski.com/2014/04/21/getting-lazy-with-c/&quot;&gt;Getting Lazy with C++&lt;/a&gt;”, where a simple C function to print first N Pythagorean Triples was presented:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c&quot;&gt;void printNTriples(int n)
{
    int i = 0;
    for (int z = 1; ; ++z)
        for (int x = 1; x &amp;lt;= z; ++x)
            for (int y = x; y &amp;lt;= z; ++y)
                if (x*x + y*y == z*z) {
                    printf(&quot;%d, %d, %d\n&quot;, x, y, z);
                    if (++i == n)
                        return;
                }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;As well as some issues with it were pointed out:&lt;/p&gt;
&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p&gt;This is fine, as long as you don’t have to modify or reuse this code. But what if, for instance, instead of printing, you wanted to draw the triples as triangles? Or if you wanted to stop as soon as one of the numbers reached 100?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And then lazy evaluation with list comprehensions is presented as &lt;em&gt;the way&lt;/em&gt; to solve these issues. It is &lt;em&gt;a&lt;/em&gt; way to solve these issues indeed, just that C++ the language does not quite have built-in functionality to do that, like Haskell or other languages have. C++20 will have &lt;em&gt;more&lt;/em&gt; built-in things in that regard, similar to how Eric’s post shows. But I’ll get to that later.&lt;/p&gt;
&lt;h3 id=&quot;pythagorean-triples-simple-c-style&quot;&gt;Pythagorean Triples, Simple C++ Style&lt;/h3&gt;
&lt;p&gt;So, let’s get back to the simple (“fine as long you don’t have to modify or reuse”, as Bartosz says) C/C++ style of solving the problem. Here’s a complete program that prints first 100 triples:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c++&quot;&gt;// simplest.cpp
#include &amp;lt;time.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;

int main()
{
    clock_t t0 = clock();

    int i = 0;
    for (int z = 1; ; ++z)
        for (int x = 1; x &amp;lt;= z; ++x)
            for (int y = x; y &amp;lt;= z; ++y)
                if (x*x + y*y == z*z) {
                    printf(&quot;(%i,%i,%i)\n&quot;, x, y, z);
                    if (++i == 100)
                        goto done;
                }
    done:

    clock_t t1 = clock();
    printf(&quot;%ims\n&quot;, (int)(t1-t0)*1000/CLOCKS_PER_SEC);
    return 0;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;We can compile it: &lt;code&gt;clang simplest.cpp -o outsimplest&lt;/code&gt;. Compilation takes 0.064 seconds, produces 8480 byte executable, which runs in 2 milliseconds and prints the numbers &lt;em&gt;(machine is 2018 MacBookPro; Core i9 2.9GHz; Xcode 10 clang)&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;(3,4,5)
(6,8,10)
(5,12,13)
(9,12,15)
(8,15,17)
(12,16,20)
(7,24,25)
(15,20,25)
(10,24,26)
...
(65,156,169)
(119,120,169)
(26,168,170)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;But wait! That was a default, non-optimized (“Debug”) build; let’s build an optimized (“Release”) build: &lt;code&gt;clang simplest.cpp -o outsimplest -O2&lt;/code&gt;. That takes 0.071s to compile, produces same size (8480b) executable, and runs in 0ms (under the timer precision of &lt;code&gt;clock()&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;As Bartosz correctly points out, the algorithm is not “reusable” here, since it’s intermixed with “what to do with the results”. Whether that is a problem or not is outside the scope of this post &lt;em&gt;(personally I think “reusability” or “avoid duplication at all costs” are overrated)&lt;/em&gt;. Let’s assume it is a problem, and indeed we want “something” that would just return first N triples, without doing anything with them.&lt;/p&gt;
&lt;p&gt;What I would probably do, is do the simplest possible thing – make something that can be called, that returns the next triple. It might look something like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// simple-reusable.cpp
#include &amp;lt;time.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;

struct pytriples
{
    pytriples() : x(1), y(1), z(1) {}
    void next()
    {
        do
        {
            if (y &amp;lt;= z)
                ++y;
            else
            {
                if (x &amp;lt;= z)
                    ++x;
                else
                {
                    x = 1;
                    ++z;
                }
                y = x;
            }
        } while (x*x + y*y != z*z);
    }
    int x, y, z;
};

int main()
{
    clock_t t0 = clock();

    pytriples py;
    for (int c = 0; c &amp;lt; 100; ++c)
    {
        py.next();
        printf(&quot;(%i,%i,%i)\n&quot;, py.x, py.y, py.z);
    }

    clock_t t1 = clock();
    printf(&quot;%ims\n&quot;, (int)(t1-t0)*1000/CLOCKS_PER_SEC);
    return 0;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This compiles and runs in pretty much the same times; Debug executable becomes 168 bytes larger; Release executable same size.&lt;/p&gt;
&lt;p&gt;I did make a &lt;code&gt;pytriples&lt;/code&gt; struct, where each call to &lt;code&gt;next()&lt;/code&gt; advances to the next valid triple; the caller can do whatever it pleases with the result. Here, I just call it a hundred times, printing the triple each time.&lt;/p&gt;
&lt;p&gt;However, while the implementation is functionally equivalent to what the triple-nested &lt;code&gt;for&lt;/code&gt; loop was doing in the original example, indeed &lt;strong&gt;it becomes a lot less clear&lt;/strong&gt;, at least to me. It’s very clear &lt;em&gt;how&lt;/em&gt; it does it (some branches and simple operations on integers), but not immediately clear &lt;em&gt;what&lt;/em&gt; it does on a high level.&lt;/p&gt;
&lt;p&gt;If C++ had something like a “&lt;a href=&quot;https://en.wikipedia.org/wiki/Coroutine&quot;&gt;coroutine&lt;/a&gt;” concept, it would be possible to implement the triples generator that would be as clear as the original nested for loops, yet not have any of the “problems” (Jason Meisel points out exactly that in “&lt;a href=&quot;https://medium.com/@jasonmeisel/ranges-code-quality-and-the-future-of-c-99adc6199608&quot;&gt;Ranges, Code Quality, and the Future of C++&lt;/a&gt;” post); something like (tentative syntax, as coroutines aren’t part of any C++ standard yet):&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c++&quot;&gt;generator&amp;lt;std::tuple&amp;lt;int,int,int&amp;gt;&amp;gt; pytriples()
{
    for (int z = 1; ; ++z)
        for (int x = 1; x &amp;lt;= z; ++x)
            for (int y = x; y &amp;lt;= z; ++y)
                if (x*x + y*y == z*z)
                    co_yield std::make_tuple(x, y, z);
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;back-to-c-ranges&quot;&gt;Back to C++ Ranges&lt;/h3&gt;
&lt;p&gt;Is the C++20 Ranges style more clear at what it does? From Eric’s post, this is the main part:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c++&quot;&gt;auto triples =
    for_each(iota(1), [](int z) {
        return for_each(iota(1, z+1), [=](int x) {
            return for_each(iota(x, z+1), [=](int y) {
                return yield_if(x*x + y*y == z*z,
                    make_tuple(x, y, z));
                });
            });
        });
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;You could argue either way. I think the “coroutines” approach above is &lt;em&gt;way&lt;/em&gt; more clear. C++ way of creating lambdas, and the choice of C++ standard to make things look clever (“what’s an &lt;em&gt;iota&lt;/em&gt;? it’s a Greek letter, look how smart I am!“) are both a bit cumbersome. Multiple returns feel unusual if reader is used to imperative programming style, but possibly one could get used to it.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Maybe&lt;/em&gt; you could squint your eyes and say that this is an acceptable and nice syntax.&lt;/p&gt;
&lt;p&gt;However, I refuse to believe that “us mere mortals” without a PhD in C++ would be able to write the utilities that are needed for the code above to work:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c++&quot;&gt;template&amp;lt;Semiregular T&amp;gt;
struct maybe_view : view_interface&amp;lt;maybe_view&amp;lt;T&amp;gt;&amp;gt; {
  maybe_view() = default;
  maybe_view(T t) : data_(std::move(t)) {
  }
  T const *begin() const noexcept {
    return data_ ? &amp;amp;*data_ : nullptr;
  }
  T const *end() const noexcept {
    return data_ ? &amp;amp;*data_ + 1 : nullptr;
  }
private:
  optional&amp;lt;T&amp;gt; data_{};
};
inline constexpr auto for_each =
  []&amp;lt;Range R,
     Iterator I = iterator_t&amp;lt;R&amp;gt;,
     IndirectUnaryInvocable&amp;lt;I&amp;gt; Fun&amp;gt;(R&amp;amp;&amp;amp; r, Fun fun)
        requires Range&amp;lt;indirect_result_t&amp;lt;Fun, I&amp;gt;&amp;gt; {
      return std::forward&amp;lt;R&amp;gt;(r)
        | view::transform(std::move(fun))
        | view::join;
  };
inline constexpr auto yield_if =
  []&amp;lt;Semiregular T&amp;gt;(bool b, T x) {
    return b ? maybe_view{std::move(x)}
             : maybe_view&amp;lt;T&amp;gt;{};
  };
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Maybe&lt;/em&gt; that is mother tongue to someone, but to me this feels like someone decided that “&lt;a href=&quot;https://en.wikipedia.org/wiki/Perl&quot;&gt;Perl&lt;/a&gt; is clearly too readable, but &lt;a href=&quot;https://en.wikipedia.org/wiki/Brainfuck&quot;&gt;Brainfuck&lt;/a&gt; is too unreadable, let’s aim for somewhere in the middle”. And I’ve been programming mostly in C++ for the past 20 years. Maybe I’m too stupid to get this, okay.&lt;/p&gt;
&lt;p&gt;And yes, sure, the &lt;code&gt;maybe_view&lt;/code&gt;, &lt;code&gt;for_each&lt;/code&gt;, &lt;code&gt;yield_if&lt;/code&gt; are all “reusable components” that could be moved into a library; a point I’ll get to… right now.&lt;/p&gt;
&lt;h3 id=&quot;issues-with-everything-is-a-library-c&quot;&gt;Issues with “Everything is a library” C++&lt;/h3&gt;
&lt;p&gt;There are at least two: &lt;strong&gt;1) compilation time&lt;/strong&gt;, and &lt;strong&gt;2) non-optimized runtime performance&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Let me allow to show them using this same Pythagorean Triples example, though the issue is true for many other features of C++ that are implemented as part of “libraries”, and not language itself.&lt;/p&gt;
&lt;p&gt;Actual C++20 isn’t out yet, so for a quick test I took the current best “ranges” approximation, which is &lt;a href=&quot;https://github.com/ericniebler/range-v3&quot;&gt;range-v3&lt;/a&gt; (made by Eric Niebler himself), and compiled the canonical “Pythagorean Triples with C++ Ranges” example with it.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c++&quot;&gt;// ranges.cpp
#include &amp;lt;time.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;range/v3/all.hpp&amp;gt;

using namespace ranges;

int main()
{
    clock_t t0 = clock();

    auto triples = view::for_each(view::ints(1), [](int z) {
        return view::for_each(view::ints(1, z + 1), [=](int x) {
            return view::for_each(view::ints(x, z + 1), [=](int y) {
                return yield_if(x * x + y * y == z * z,
                    std::make_tuple(x, y, z));
            });
        });
    });

    RANGES_FOR(auto triple, triples | view::take(100))
    {
        printf(&quot;(%i,%i,%i)\n&quot;, std::get&amp;lt;0&amp;gt;(triple), std::get&amp;lt;1&amp;gt;(triple), std::get&amp;lt;2&amp;gt;(triple));
    }

    clock_t t1 = clock();
    printf(&quot;%ims\n&quot;, (int)(t1-t0)*1000/CLOCKS_PER_SEC);
    return 0;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I used a post-0.4.0 version (&lt;code&gt;9232b449e44&lt;/code&gt; on 2018 Dec 22), and compiled the example with &lt;code&gt;clang ranges.cpp -I. -std=c++17 -lc++ -o outranges&lt;/code&gt;. It &lt;strong&gt;compiled in 2.92 seconds&lt;/strong&gt;, executable was 219 kilobytes, and it &lt;strong&gt;runs in 300 milliseceonds&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;And yes, that’s a non-optimized build. An optimized build (&lt;code&gt;clang ranges.cpp -I. -std=c++17 -lc++ -o outranges -O2&lt;/code&gt;) compiles in 3.02 seconds, executable is 13976 bytes, and runs in 1ms. So the runtime performance is fine, executable is slightly larger, and compile time issue of course remains.&lt;/p&gt;
&lt;p&gt;More on the points above:&lt;/p&gt;
&lt;h3 id=&quot;compilation-times-are-a-big-issue-in-c&quot;&gt;Compilation Times Are a Big Issue in C++&lt;/h3&gt;
&lt;p&gt;Compile time of this really simple example takes &lt;strong&gt;2.85 seconds longer&lt;/strong&gt; than the “simple C++” version.&lt;/p&gt;
&lt;p&gt;Lest you think that “under 3 seconds” is a short time – it’s absolutely not. In 3 seconds, a modern CPU can do a gajillion operations. For example, the time it takes for clang to compile a full actual database engine (&lt;a href=&quot;https://sqlite.org/index.html&quot;&gt;SQLite&lt;/a&gt;) in Debug build, with all 220 &lt;em&gt;thousand&lt;/em&gt; lines of code, is 0.9 seconds on my machine. In which world is it okay to compile a trivial 5-line example three times slower than a full database engine?!&lt;/p&gt;
&lt;p&gt;C++ compilation times have been a source of pain in every non-trivial-size codebase I’ve worked on. Don’t believe me? Try building one of the widely available big codebases (any of: Chromium, Clang/LLVM, UE4 etc will do). Among the things I &lt;em&gt;really&lt;/em&gt; want out of C++, “solve compile times” is probably #1 on the list, and has been since forever. Yet it feels like the C++ community at large pretends that is not an issue, with each revision of the language putting &lt;em&gt;even more&lt;/em&gt; stuff into header files, and &lt;em&gt;even more&lt;/em&gt; stuff into templated code that has to live in header files.&lt;/p&gt;
&lt;p&gt;To a large extent that is caused by the ancient “just literally paste the file contents” &lt;code&gt;#include&lt;/code&gt; model that C++ inherited from C. But whereas C tends to only have struct declarations and function prototypes in headers, in C++ you often need to put whole templated classes/functions in there too.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ericniebler/range-v3&quot;&gt;range-v3&lt;/a&gt; is 1.8 megabytes of source code, all in header files! So while the example of “use ranges to output 100 triples” is 30 lines long, after processing header includes the compiler ends up with &lt;em&gt;102 thousand&lt;/em&gt; lines of code to compile. The “simple C++” example, after all preprocessing, is 720 lines of code.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;But precompiled headers and/or modules solve this!&lt;/em&gt;, I hear you say. Fair enough. Let’s put the ranges header into a precompiled header (pch.h: &lt;code&gt;#include &amp;lt;range/v3/all.hpp&amp;gt;&lt;/code&gt;, include pch.h instead, create the PCH: &lt;code&gt;clang -x c++-header pch.h -I. -std=c++17 -o pch.h.pch&lt;/code&gt;, compile using pch: &lt;code&gt;clang ranges.cpp -I. -std=c++17 -lc++ -o outranges -include-pch pch.h.pch&lt;/code&gt;). Compilation time becomes 2.24s, so PCHs do indeed save about 0.7 seconds of compile time here. They do not save the &lt;em&gt;other 2.1s&lt;/em&gt; that is longer than simple C++ approach though :(&lt;/p&gt;
&lt;h3 id=&quot;non-optimized-build-performance-is-important&quot;&gt;Non-Optimized Build Performance is Important&lt;/h3&gt;
&lt;p&gt;Runtime performance of the “ranges” example is &lt;strong&gt;150 times slower&lt;/strong&gt;. Two or three times &lt;em&gt;maybe&lt;/em&gt; would be acceptable. Anything “over ten times slower”, and it likely means “unusable”. Over hundred times slower? Forget it.&lt;/p&gt;
&lt;p&gt;In a real codebase that solves real problems, two orders of magnitude slower likely means that it just would not work on any real data set. I’m working in video games industry; in practical reasons this would mean that Debug builds of the engine or tooling would not work on any real game levels (performance would be nowhere near the needed interactivity level). Maybe there are industries where you run a program on a set of data, and wait for the result, and if it takes 10 or 100 times longer in Debug then it is merely “annoying”. But where something &lt;em&gt;has to be interactive&lt;/em&gt;, it turns “annoying” into “unusable” – you literally can not “play” through a game level if it renders at two frames per second.&lt;/p&gt;
&lt;p&gt;Yes, an optimized build (&lt;code&gt;-O2&lt;/code&gt; in clang) runs at the same performance as simple C++ version… so “zero cost abstractions” indeed, as long you don’t care about compilation times, and have an optimizing compiler.&lt;/p&gt;
&lt;p&gt;But debugging optimized code is &lt;em&gt;hard&lt;/em&gt;! Sure it’s possible, and actually a very useful skill to learn… Similar to how riding a unicycle is both possible, and teaches you an important skill of balance. Some people enjoy it and are really good at it even! But most people would not pick unicycle as their primary means of transportation, similar to how most people don’t debug optimized code if they can avoid it.&lt;/p&gt;
&lt;p&gt;Arseny Kapoulkine has a great livestream “&lt;a href=&quot;https://www.youtube.com/watch?v=m1jAgV4ZOhQ&quot;&gt;Optimizing OBJ loader&lt;/a&gt;” where he also ran into “Debug build is too slow” issue, and made it 10x faster by avoiding some of STL bits (&lt;a href=&quot;https://github.com/zeux/meshoptimizer/commit/1996f143b8b3&quot;&gt;commit&lt;/a&gt;). As a side effect, it also made compile times faster (&lt;a href=&quot;https://twitter.com/zeuxcg/status/1043155003681124352&quot;&gt;source&lt;/a&gt;) and debugging easier, since Microsoft’s STL implementation in particular is &lt;a href=&quot;https://twitter.com/zeuxcg/status/1073620743177400320&quot;&gt;extremely fond of&lt;/a&gt; deeply nested function calls.&lt;/p&gt;
&lt;p&gt;That is not to say that “STL is necessarily bad”; it is possible to write an STL implementation that does not become 10x slower in a non-optimized build (as EASTL or libc++ do), but for whatever reason Microsoft’s STL is &lt;em&gt;extremely&lt;/em&gt; slow due to over-reliance of “inlining will fix it up”.&lt;/p&gt;
&lt;p&gt;As as &lt;em&gt;user of the language&lt;/em&gt;, I don’t care whose fault it is though! All I know is that “STL is too slow in Debug”, and I’d rather have that fixed, or I will look into alternatives (e.g. not using STL, re-implementing the bits I need myself, or stop using C++ altogether).&lt;/p&gt;
&lt;h3 id=&quot;how-do-other-languages-compare&quot;&gt;How do other languages compare?&lt;/h3&gt;
&lt;p&gt;Here’s a brief look at a very similar implementation of “lazily evaluated Pythagorean Triples” in C#. Full C# source code:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c#&quot;&gt;using System;
using System.Diagnostics;
using System.Linq;

class Program
{
    public static void Main()
    {
        var timer = Stopwatch.StartNew();
        var triples =
            from z in Enumerable.Range(1, int.MaxValue)
            from x in Enumerable.Range(1, z)
            from y in Enumerable.Range(x, z)
            where x*x+y*y==z*z
            select (x:x, y:y, z:z);
        foreach (var t in triples.Take(100))
        {
            Console.WriteLine($&quot;({t.x},{t.y},{t.z})&quot;);
        }
        timer.Stop();
        Console.WriteLine($&quot;{timer.ElapsedMilliseconds}ms&quot;);
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Personally I find the actual bit pretty readable. Compare C#:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c#&quot;&gt;var triples =
    from z in Enumerable.Range(1, int.MaxValue)
    from x in Enumerable.Range(1, z)
    from y in Enumerable.Range(x, z)
    where x*x+y*y==z*z
    select (x:x, y:y, z:z);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;with C++:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c++&quot;&gt;auto triples = view::for_each(view::ints(1), [](int z) {
    return view::for_each(view::ints(1, z + 1), [=](int x) {
        return view::for_each(view::ints(x, z + 1), [=](int y) {
            return yield_if(x * x + y * y == z * z,
                std::make_tuple(x, y, z));
        });
    });
});
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I know which one I find cleaner. Do you? Though to be fair, an alternative, “less databasey” form of C# LINQ is pretty busy as well:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c#&quot;&gt;var triples = Enumerable.Range(1, int.MaxValue)
    .SelectMany(z =&amp;gt; Enumerable.Range(1, z), (z, x) =&amp;gt; new {z, x})
    .SelectMany(t =&amp;gt; Enumerable.Range(t.x, t.z), (t, y) =&amp;gt; new {t, y})
    .Where(t =&amp;gt; t.t.x * t.t.x + t.y * t.y == t.t.z * t.t.z)
    .Select(t =&amp;gt; (x: t.t.x, y: t.y, z: t.t.z));
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;How much time it takes to compile this C# code? I’m on a Mac, so I’ll use Mono compiler (which itself is written in C#), version 5.16. &lt;code&gt;mcs Linq.cs&lt;/code&gt; takes 0.20 seconds. In comparison, compiling an equivalent “simple C#” version takes 0.17 seconds.&lt;/p&gt;
&lt;p&gt;So this lazy evaluation LINQ style creates &lt;strong&gt;additional 0.03 seconds work for the compiler&lt;/strong&gt; to do. In comparison, the C++ case was creating an additional 3 seconds of work, or &lt;strong&gt;100x more&lt;/strong&gt;!&lt;/p&gt;
&lt;p&gt;This is what you get when “features” are part of the language, as opposed to “it comes as hundred thousand lines of code for the compiler to plow through”.&lt;/p&gt;
&lt;h3 id=&quot;but-can-t-you-just-ignore-the-parts-you-don-t-like&quot;&gt;But can’t you just ignore the parts you don’t like?&lt;/h3&gt;
&lt;p&gt;Yes, to some extent.&lt;/p&gt;
&lt;p&gt;For example here (&lt;a href=&quot;https://unity3d.com/&quot;&gt;Unity&lt;/a&gt;), we had a joke that “adding Boost into the codebase is a fireable offense”. I guess that is not true, since sometime last year &lt;a href=&quot;https://www.boost.org/doc/libs/1_66_0/doc/html/boost_asio.html&quot;&gt;Boost.Asio&lt;/a&gt; got added, and then I grumbled quite a bit about how it’s super slow to compile, and that merely including &lt;code&gt;&amp;lt;asio.h&amp;gt;&lt;/code&gt; includes whole of &lt;code&gt;&amp;lt;windows.h&amp;gt;&lt;/code&gt; with all the &lt;a href=&quot;http://aras-p.info/blog/2018/01/12/Minimizing-windows.h/&quot;&gt;macro name hijack horrors&lt;/a&gt; that it has.&lt;/p&gt;
&lt;p&gt;In general we’re trying to avoid most of STL too. For the containers, we have our own ones, somewhat along the same reasons as &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2271.html&quot;&gt;EASTL motivation&lt;/a&gt; – more uniform behavior across platforms/compilers, better performance in non-optimized builds, better integration with our own memory allocators &amp;amp; allocation tracking. Some other containers, purely for performance reasons (STL &lt;code&gt;unordered_map&lt;/code&gt; can’t be fast &lt;em&gt;by design&lt;/em&gt; since the standard requires it to be separately chained; our own hash table uses open addressing instead). Large parts of the standard library functionality we don’t actually even need.&lt;/p&gt;
&lt;p&gt;However.&lt;/p&gt;
&lt;p&gt;It takes time to convince each and every new hire (particularly the more junior ones straight from universities) that no, just because it’s called “modern” C++, does not automatically mean it’s better &lt;em&gt;(it might be! or it might be not)&lt;/em&gt;. Or that no, “C code” does not automatically mean it’s hard to understand, follow or is riddled with bugs &lt;em&gt;(it might be! or it might be not)&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Just a couple weeks ago at work I was rambling how I’m trying to understand some piece of (our own) code, and I can’t, since the code is “too complex” for me to get it. Another (junior) programmer drops by, asks me why I look like I’m about to ‎(ﾉಥ益ಥ）ﾉ﻿ ┻━┻, I say &lt;em&gt;“so I’m trying to understand this code, but it’s way too complex for me”&lt;/em&gt;. His immediate response was &lt;em&gt;“ah, old C style code?”&lt;/em&gt;, and I was &lt;em&gt;“no, in fact the complete opposite!”&lt;/em&gt; (the code I was looking at was some sort of &lt;a href=&quot;https://twitter.com/aras_p/status/1069882742429638657&quot;&gt;template metaprogramming&lt;/a&gt; thingamabob). He hasn’t worked with large codebases, neither C nor C++ yet, but &lt;em&gt;something&lt;/em&gt; has already convinced him that “hard to understand” &lt;em&gt;must be C code&lt;/em&gt;. I suspect the university; often classes flat out immediately say that “C is bad”, without ever explaining how exactly; but it does leave that impression on the young minds of future programmers.&lt;/p&gt;
&lt;p&gt;So yes, I can certainly ignore parts I don’t like about C++. But it’s tiring to educate many others I’m working with, since many are under impression that “modern, must be better” or that “standard library, must be better than anything we could write ourselves”.&lt;/p&gt;
&lt;h3 id=&quot;why-is-c-this-way&quot;&gt;Why is C++ this way?&lt;/h3&gt;
&lt;p&gt;I don’t quite know. Admittedly they do have a very complex problem to solve, which is “how to evolve a language while keeping it close to 100% backwards compatible with many decades of past decisions”. Couple that with that C++ tries to serve many masters, use cases and experience levels, and you do get a complex problem.&lt;/p&gt;
&lt;p&gt;But to some extent, it &lt;em&gt;feels&lt;/em&gt; like a big part of C++ committee and the ecosystem is focused on “complexity” in terms of showing off or proving their worth.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://aras-p.info/img/blog/2018/cpp_phases.jpg&quot;&gt;&lt;img class=&quot;right&quot; src=&quot;http://aras-p.info/img/blog/2018/cpp_phases.jpg&quot; title=&quot;&quot; alt=&quot;&quot; width=&quot;200&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There was this joke on the internet a while ago about typical progression of a C/C++ programmer. I remember myself being in the middle stage, some 16 years ago. Very impressed with Boost, in a sense of “wow you &lt;em&gt;can do that&lt;/em&gt;, that’s so cool!“. Without questioning at &lt;em&gt;why&lt;/em&gt; you’d want to do that.&lt;/p&gt;
&lt;p&gt;Similar to, I don’t know, Formula 1 cars or triple-neck guitars. Impressive? Sure. Marvel of engineering? Of course. Requires massive amount of skill to handle them properly? Yes! &lt;em&gt;Not the right tool&lt;/em&gt; for 99% of situations you’d even find yourself in? Yup.&lt;/p&gt;
&lt;p&gt;Christer Ericson has put it nicely &lt;a href=&quot;https://twitter.com/ChristerEricson/status/1078095388244996096&quot;&gt;here&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote readability=&quot;13&quot;&gt;
&lt;p&gt;Goal of programmers is to ship, on time, on budget. It’s not “to produce code.” IMO most modern C++ proponents 1) overassign importance to source code over 2) compile times, debugability, cognitive load for new concepts and extra complexity, project needs, etc. 2 is what matters.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And yes, people who are concerned with state of C++ and the standard libraries can of course join the effort in trying to improve it. Some do. Some are (or think they are) too busy to spend time in committees. Some ignore parts of the standards and make their own parallel libraries (e.g. &lt;a href=&quot;https://github.com/electronicarts/EASTL&quot;&gt;EASTL&lt;/a&gt;). Some think C++ is beyond salvation and try to make their own languages (&lt;a href=&quot;https://inductive.no/jai/&quot;&gt;Jai&lt;/a&gt;) or jump ship elsewhere (&lt;a href=&quot;https://www.rust-lang.org/&quot;&gt;Rust&lt;/a&gt;, &lt;a href=&quot;https://unity.com/unity/features/job-system-ECS#burst-compiler&quot;&gt;subsets of C#&lt;/a&gt;).&lt;/p&gt;
&lt;h3 id=&quot;taking-feedback-and-giving-feedback&quot;&gt;Taking feedback, and giving feedback&lt;/h3&gt;
&lt;p&gt;I know how hard it can be, when “a bunch of angry people on the internet” are saying that your work is proverbial dung. I’m working on probably the &lt;a href=&quot;https://unity3d.com/&quot;&gt;most popular game engine&lt;/a&gt;, with millions of users, and some part of them love to point out, directly or indirectly, how “it sucks”. It’s hard; me and others have put so much thought and work into it, and someone else comes along and says we’re all idiots and our work is crap. Sad!&lt;/p&gt;
&lt;p&gt;It probably feels the same for anyone working on C++, STL, or any other widely used technology really. They have worked for years on something, and then a bunch of Angry Internet People come and trash your lovely work.&lt;/p&gt;
&lt;p&gt;It’s extremely easy to get defensive about this, and is the most natural reaction. Oftentimes also not the most constructive one though.&lt;/p&gt;
&lt;p&gt;Ignoring literal trolls who complain on the internet “just for the lulz”, majority of complaints &lt;em&gt;do&lt;/em&gt; have actual issue or problem behind it. It might be worded poorly, or exaggerated, or whoever is complaining did not think about other possible viewpoints, but there is a &lt;em&gt;valid issue&lt;/em&gt; behind the complaint anyway.&lt;/p&gt;
&lt;p&gt;What I do whenever someone complains about thing I’ve worked on, is try to forget about “me” and “work I did”, and get their point of view. What are they trying to solve, and what problems do they run into? The purpose of any software/library/language is to help their users solve the problems they have. It might be a perfect tool at solving their problem, an “ok I guess that will work” one, or a terribly bad one at that.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;“I’ve worked very hard on this, but yeah sounds like my work is not a good at solving your problem” is a perfectly valid outcome!&lt;/li&gt;
&lt;li&gt;“I’ve worked very hard on this, but did not know/consider your needs, let me see how they can be addressed” is a great outcome too!&lt;/li&gt;
&lt;li&gt;“Sorry I don’t understand your problem” is fine as well!&lt;/li&gt;
&lt;li&gt;“I’ve worked very hard on this, but turns out no one has the problem that my solution is supposed to solve” is a sad outcome, but it also &lt;em&gt;can&lt;/em&gt; and &lt;em&gt;does&lt;/em&gt; happen.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Some of the “all feedback will be ignored unless it comes in form of a paper presented at a C++ committee meeting” replies that I’ve seen in the past few days sound to me like a not very productive approach. Likewise, defending design of a library with an argument that “it was a popular library in Boost!” misses out on the part of the C++ world that does not think Boost libraries are a good design/solution.&lt;/p&gt;
&lt;p&gt;The “games industry” at large, however, is also at fault to some extent. Game technologies are traditionally built with C or C++, just because up until very recently, other viable systems programming languages simply did not exist (now you at least have Rust as a possible contender). For the amount of reliance on C/C++, the industry certainly did not do a good enough job at making themselves visible and working on improving the language, the libraries and the ecosystem.&lt;/p&gt;
&lt;p&gt;Yes it’s hard work, and yes complaining on the internet is way easier. And whoever ends up working on future of C++ is not solving “immediate problems” (like shipping a game or whatever); they are working on something much more longer-term. But there are companies who could afford to do this; any of big engine companies or large publishers with central technology groups could totally do it. If that would be worth doing, I don’t know, but indeed it’s a bit hypocritical to say “C++ is nuts and is not what we want”, while never telling the folks who make the language, what it is that “we want”.&lt;/p&gt;
&lt;p&gt;My impression is that many in the games technology are “mostly fine” with recent (C++11/14/17) additions to the language itself - lambdas are useful, &lt;code&gt;constexpr if&lt;/code&gt; is great, etc. etc. They tend to largely ignore whatever is getting added into the standard libraries, both because the design/implementations of STL have issues pointed out above (long compile times, bad Debug build performance), or are simply not that useful, or the companies have already wrote their own containers/strings/algorithms/… years ago, so why change something that already works.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Here I say that is enough for a post, I need to get dinner.&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 28 Dec 2018 16:35:29 +0000</pubDate>
<dc:creator>tpush</dc:creator>
<og:title>&quot;Modern&quot; C++ Lamentations · Aras' website</og:title>
<og:url>https://aras-p.info/blog/2018/12/28/Modern-C-Lamentations/</og:url>
<og:type>article</og:type>
<dc:language>en-us</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://aras-p.info/blog/2018/12/28/Modern-C-Lamentations/</dc:identifier>
</item>
<item>
<title>A free clone of the Age of Empires II engine</title>
<link>https://openage.sft.mx/</link>
<guid isPermaLink="true" >https://openage.sft.mx/</guid>
<description>&lt;p&gt;You know Age of Empires. You know its bugs. You know the fun playing it.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://openage.sft.mx/pics/openage_2.png&quot;&gt;&lt;img src=&quot;https://openage.sft.mx/pics/openage_2.png&quot; alt=&quot;epic picture here&quot; class=&quot;contentpic&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;span class=&quot;link-container&quot;&gt;&lt;span class=&quot;link-distribute&quot;&gt;&lt;a href=&quot;https://blog.openage.sft.mx&quot;&gt;Blog&lt;/a&gt; &lt;a href=&quot;https://github.com/SFTtech/openage&quot;&gt;Code&lt;/a&gt; &lt;a href=&quot;https://github.com/SFTtech/openage/blob/master/doc/status.md&quot;&gt;Feature list&lt;/a&gt; &lt;a href=&quot;https://github.com/SFTtech/openage/blob/master/doc/building.md&quot;&gt;Build and install&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;We are creating a free (as in freedom) clone of the Age of Empires II engine in C++17 from scratch (GPLv3+). We use &quot;modern&quot; technologies like OpenGL/GLSL, Python, Qt5, CMake, ...&lt;/p&gt;
&lt;p&gt;We aim to create an exact clone (for now), using the original media files.&lt;/p&gt;
&lt;p&gt;This allows people using &lt;strong&gt;GNU/Linux&lt;/strong&gt;, &lt;strong&gt;BSD&lt;/strong&gt;, &lt;strong&gt;macOS&lt;/strong&gt; or &lt;strong&gt;Windows&lt;/strong&gt; to play the game natively, minus features, plus additional epic bugs (or was it vice versa?).&lt;/p&gt;
&lt;p&gt;The project is run by volunteers:&lt;br/&gt;Students and professionals from all over the world.&lt;br/&gt;Join us and help to create an awesome game!&lt;/p&gt;
&lt;p class=&quot;contact-intro&quot;&gt;Get in touch:&lt;/p&gt;
</description>
<pubDate>Fri, 28 Dec 2018 14:56:08 +0000</pubDate>
<dc:creator>doener</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://openage.sft.mx/</dc:identifier>
</item>
<item>
<title>Fish shell 3.0</title>
<link>https://github.com/fish-shell/fish-shell/releases/tag/3.0.0</link>
<guid isPermaLink="true" >https://github.com/fish-shell/fish-shell/releases/tag/3.0.0</guid>
<description>&lt;p&gt;fish 3 is a major release, which introduces some breaking changes alongside improved functionality. Although most existing scripts will continue to work, they should be reviewed against the list contained below.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Download links: To download the source code for fish, we suggest the file named &quot;fish-3.0.0.tar.gz&quot;. The file downloaded from &quot;Source code (tar.gz)&quot; may not build correctly. The SHA-256 sum of this file is ea9dd3614bb0346829ce7319437c6a93e3e1dfde3b7f6a469b543b0d2c68f2cf. A GPG signature from David Adam (0x7A67D962D88A709A) is available as &quot;fish-3.0.0.tar.gz.asc&quot;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Compared to the beta release of fish 3.0b1, fish version 3.0.0:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;builds correctly against musl libc (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;390226041&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/5407&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/5407/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/5407&quot;&gt;#5407&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;handles huge numeric arguments to &lt;code&gt;test&lt;/code&gt; correctly (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;391186716&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/5414&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/5414/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/5414&quot;&gt;#5414&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;removes the history colouring introduced in 3.0b1, which did not always work correctly&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;There is one significant known issue which was not able to be corrected before the release:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;fish 3.0.0 builds on Cygwin (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;391895732&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/5423&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/5423/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/5423&quot;&gt;#5423&lt;/a&gt;), but does not run correctly (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;393303373&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/5426&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/5426/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/5426&quot;&gt;#5426&lt;/a&gt;) and will result in a hanging terminal when started. Cygwin users are encouraged to continue using 2.7.1 until a release which corrects this is available.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;If you are upgrading from version 2.7.1 or before, please also review the release notes for 3.0b1, which follow.&lt;/p&gt;
&lt;h2&gt;Notable non-backward compatible changes&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;Process and job expansion has largely been removed. &lt;code&gt;%&lt;/code&gt; will no longer perform these expansions, except for &lt;code&gt;%self&lt;/code&gt; for the PID of the current shell. Additionally, job management commands (&lt;code&gt;disown&lt;/code&gt;, &lt;code&gt;wait&lt;/code&gt;, &lt;code&gt;bg&lt;/code&gt;, &lt;code&gt;fg&lt;/code&gt; and &lt;code&gt;kill&lt;/code&gt;) will expand job specifiers starting with &lt;code&gt;%&lt;/code&gt; (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;244458879&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4230&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/4230/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/4230&quot;&gt;#4230&lt;/a&gt;, &lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;24732506&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/1202&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/1202/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/1202&quot;&gt;#1202&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set x[1] x[2] a b&lt;/code&gt;, to set multiple elements of an array at once, is no longer valid syntax (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;244945067&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4236&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/4236/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/4236&quot;&gt;#4236&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;A literal &lt;code&gt;{}&lt;/code&gt; now expands to itself, rather than nothing. This makes working with &lt;code&gt;find -exec&lt;/code&gt; easier (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;22463441&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/1109&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/1109/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/1109&quot;&gt;#1109&lt;/a&gt;, &lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;285444510&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4632&quot; data-hovercard-type=&quot;pull_request&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/pull/4632/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/pull/4632&quot;&gt;#4632&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Literally accessing a zero-index is now illegal syntax and is caught by the parser (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;309733837&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4862&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/4862/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/4862&quot;&gt;#4862&lt;/a&gt;). (fish indices start at 1)&lt;/li&gt;
&lt;li&gt;Successive commas in brace expansions are handled in less surprising manner. For example, &lt;code&gt;{,,,}&lt;/code&gt; expands to four empty strings rather than an empty string, a comma and an empty string again (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;153602569&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/3002&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/3002/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/3002&quot;&gt;#3002&lt;/a&gt;, &lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;285444510&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4632&quot; data-hovercard-type=&quot;pull_request&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/pull/4632/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/pull/4632&quot;&gt;#4632&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for&lt;/code&gt; loop control variables are no longer local to the &lt;code&gt;for&lt;/code&gt; block (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;56335903&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/1935&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/1935/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/1935&quot;&gt;#1935&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Variables set in &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;while&lt;/code&gt; conditions are available outside the block (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;305374825&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4820&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/4820/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/4820&quot;&gt;#4820&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Local exported (&lt;code&gt;set -lx&lt;/code&gt;) vars are now visible to functions (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;22012340&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/1091&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/1091/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/1091&quot;&gt;#1091&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;The new &lt;code&gt;math&lt;/code&gt; builtin (see below) does not support logical expressions; &lt;code&gt;test&lt;/code&gt; should be used instead (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;302122219&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4777&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/4777/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/4777&quot;&gt;#4777&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Range expansion will now behave sensibly when given a single positive and negative index (&lt;code&gt;$foo[5..-1]&lt;/code&gt; or &lt;code&gt;$foo[-1..5]&lt;/code&gt;), clamping to the last valid index without changing direction if the list has fewer elements than expected.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;read&lt;/code&gt; now uses &lt;code&gt;-s&lt;/code&gt; as short for &lt;code&gt;--silent&lt;/code&gt; (à la &lt;code&gt;bash&lt;/code&gt;); &lt;code&gt;--shell&lt;/code&gt;'s abbreviation (formerly &lt;code&gt;-s&lt;/code&gt;) is now &lt;code&gt;-S&lt;/code&gt; instead (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;266558812&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4490&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/4490/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/4490&quot;&gt;#4490&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd&lt;/code&gt; no longer resolves symlinks. fish now maintains a virtual path, matching other shells (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;174805538&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/3350&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/3350/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/3350&quot;&gt;#3350&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;source&lt;/code&gt; now requires an explicit &lt;code&gt;-&lt;/code&gt; as the filename to read from the terminal (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;123783797&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/2633&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/2633/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/2633&quot;&gt;#2633&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Arguments to &lt;code&gt;end&lt;/code&gt; are now errors, instead of being silently ignored.&lt;/li&gt;
&lt;li&gt;The names &lt;code&gt;argparse&lt;/code&gt;, &lt;code&gt;read&lt;/code&gt;, &lt;code&gt;set&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt;, &lt;code&gt;test&lt;/code&gt; and &lt;code&gt;[&lt;/code&gt; are now reserved and not allowed as function names. This prevents users unintentionally breaking stuff (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;153550963&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/3000&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/3000/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/3000&quot;&gt;#3000&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;fish_user_abbreviations&lt;/code&gt; variable is no longer used; abbreviations will be migrated to the new storage format automatically.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;FISH_READ_BYTE_LIMIT&lt;/code&gt; variable is now called &lt;code&gt;fish_byte_limit&lt;/code&gt; (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;258533775&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4414&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/4414/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/4414&quot;&gt;#4414&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Environment variables are no longer split into arrays based on the record separator character on startup. Instead, variables are not split, unless their name ends in PATH, in which case they are split on colons (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;9167084&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/436&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/436/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/436&quot;&gt;#436&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;history&lt;/code&gt; builtin's &lt;code&gt;--with-time&lt;/code&gt; option has been removed; this has been deprecated in favor of &lt;code&gt;--show-time&lt;/code&gt; since 2.7.0 (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;258165295&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4403&quot; data-hovercard-type=&quot;pull_request&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/pull/4403/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/pull/4403&quot;&gt;#4403&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;The internal variables &lt;code&gt;__fish_datadir&lt;/code&gt; and &lt;code&gt;__fish_sysconfdir&lt;/code&gt; are now known as &lt;code&gt;__fish_data_dir&lt;/code&gt; and &lt;code&gt;__fish_sysconf_dir&lt;/code&gt; respectively.&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Deprecations&lt;/h2&gt;
&lt;p&gt;With the release of fish 3, a number of features have been marked for removal in the future. All users are encouraged to explore alternatives. A small number of these features are currently behind feature flags, which are turned on at present but may be turned off by default in the future.&lt;/p&gt;
&lt;p&gt;A new feature flags mechanism is added for staging deprecations and breaking changes. Feature flags may be specified at launch with &lt;code&gt;fish --features ...&lt;/code&gt; or by setting the universal &lt;code&gt;fish_features&lt;/code&gt; variable. (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;317439793&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4940&quot; data-hovercard-type=&quot;pull_request&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/pull/4940/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/pull/4940&quot;&gt;#4940&lt;/a&gt;)&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The use of the &lt;code&gt;IFS&lt;/code&gt; variable for &lt;code&gt;read&lt;/code&gt; is deprecated; &lt;code&gt;IFS&lt;/code&gt; will be ignored in the future (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;237745920&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4156&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/4156/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/4156&quot;&gt;#4156&lt;/a&gt;). Use the &lt;code&gt;read --delimiter&lt;/code&gt; option instead.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;function --on-process-exit&lt;/code&gt; switch will be removed in future (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;294118761&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4700&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/4700/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/4700&quot;&gt;#4700&lt;/a&gt;). Use the &lt;code&gt;fish_exit&lt;/code&gt; event instead: &lt;code&gt;function --on-event fish_exit&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$_&lt;/code&gt; is deprecated and will removed in the future (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;14666945&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/813&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/813/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/813&quot;&gt;#813&lt;/a&gt;). Use &lt;code&gt;status current-command&lt;/code&gt; in a command substitution instead.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;^&lt;/code&gt; as a redirection deprecated and will be removed in the future. (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;256497982&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4394&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/4394/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/4394&quot;&gt;#4394&lt;/a&gt;). Use &lt;code&gt;2&amp;gt;&lt;/code&gt; to redirect stderr. This is controlled by the &lt;code&gt;stderr-nocaret&lt;/code&gt; feature flag.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;?&lt;/code&gt; as a glob (wildcard) is deprecated and will be removed in the future (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;270968946&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4520&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/4520/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/4520&quot;&gt;#4520&lt;/a&gt;). This is controlled by the &lt;code&gt;qmark-noglob&lt;/code&gt; feature flag.&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Notable fixes and improvements&lt;/h2&gt;
&lt;h3&gt;Syntax changes and new commands&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;fish now supports &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; (like &lt;code&gt;and&lt;/code&gt;), &lt;code&gt;||&lt;/code&gt; (like &lt;code&gt;or&lt;/code&gt;), and &lt;code&gt;!&lt;/code&gt; (like &lt;code&gt;not&lt;/code&gt;), for better migration from POSIX-compliant shells (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;284339020&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4620&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/4620/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/4620&quot;&gt;#4620&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Variables may be used as commands (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;5153747&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/154&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/154/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/154&quot;&gt;#154&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;fish may be started in private mode via &lt;code&gt;fish --private&lt;/code&gt;. Private mode fish sessions do not have access to the history file and any commands evaluated in private mode are not persisted for future sessions. A session variable &lt;code&gt;$fish_private_mode&lt;/code&gt; can be queried to detect private mode and adjust the behavior of scripts accordingly to respect the user's wish for privacy.&lt;/li&gt;
&lt;li&gt;A new &lt;code&gt;wait&lt;/code&gt; command for waiting on backgrounded processes (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;267446569&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4498&quot; data-hovercard-type=&quot;pull_request&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/pull/4498/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/pull/4498&quot;&gt;#4498&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;math&lt;/code&gt; is now a builtin rather than a wrapper around &lt;code&gt;bc&lt;/code&gt; (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;161094412&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/3157&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/3157/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/3157&quot;&gt;#3157&lt;/a&gt;). Floating point computations is now used by default, and can be controlled with the new &lt;code&gt;--scale&lt;/code&gt; option (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;265425548&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4478&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/4478/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/4478&quot;&gt;#4478&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Setting &lt;code&gt;$PATH&lt;/code&gt; no longer warns on non-existent directories, allowing for a single $PATH to be shared across machines (eg via dotfiles) (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;150631953&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/2969&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/2969/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/2969&quot;&gt;#2969&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;while&lt;/code&gt; sets &lt;code&gt;$status&lt;/code&gt; to a non-zero value if the loop is not executed (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;322646095&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4982&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/4982/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/4982&quot;&gt;#4982&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Command substitution output is now limited to 10 MB by default, controlled by the &lt;code&gt;fish_read_limit&lt;/code&gt; variable (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;205750421&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/3822&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/3822/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/3822&quot;&gt;#3822&lt;/a&gt;). Notably, this is larger than most operating systems' argument size limit, so trying to pass argument lists this size to external commands has never worked.&lt;/li&gt;
&lt;li&gt;The machine hostname, where available, is now exposed as the &lt;code&gt;$hostname&lt;/code&gt; reserved variable. This removes the dependency on the &lt;code&gt;hostname&lt;/code&gt; executable (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;259592952&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4422&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/4422/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/4422&quot;&gt;#4422&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Bare &lt;code&gt;bind&lt;/code&gt; invocations in config.fish now work. The &lt;code&gt;fish_user_key_bindings&lt;/code&gt; function is no longer necessary, but will still be executed if it exists (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;360934677&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/5191&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/5191/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/5191&quot;&gt;#5191&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$fish_pid&lt;/code&gt; and &lt;code&gt;$last_pid&lt;/code&gt; are available as replacements for &lt;code&gt;%self&lt;/code&gt; and &lt;code&gt;%last&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;New features in commands&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;alias&lt;/code&gt; has a new &lt;code&gt;--save&lt;/code&gt; option to save the generated function immediately (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;312056948&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4878&quot; data-hovercard-type=&quot;pull_request&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/pull/4878/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/pull/4878&quot;&gt;#4878&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bind&lt;/code&gt; has a new &lt;code&gt;--silent&lt;/code&gt; option to ignore bind requests for named keys not available under the current terminal (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;240743257&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4188&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/4188/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/4188&quot;&gt;#4188&lt;/a&gt;, &lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;260844924&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4431&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/4431/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/4431&quot;&gt;#4431&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;complete&lt;/code&gt; has a new &lt;code&gt;--keep-order&lt;/code&gt; option to show the provided or dynamically-generated argument list in the same order as specified, rather than alphabetically (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;7774173&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/361&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/361/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/361&quot;&gt;#361&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exec&lt;/code&gt; prompts for confirmation if background jobs are running.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;funced&lt;/code&gt; has a new &lt;code&gt;--save&lt;/code&gt; option to automatically save the edited function after successfully editing (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;289451066&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4668&quot; data-hovercard-type=&quot;pull_request&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/pull/4668/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/pull/4668&quot;&gt;#4668&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;functions&lt;/code&gt; has a new &lt;code&gt;--handlers&lt;/code&gt; option to show functions registered as event handlers (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;293254464&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4694&quot; data-hovercard-type=&quot;pull_request&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/pull/4694/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/pull/4694&quot;&gt;#4694&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;history search&lt;/code&gt; supports globs for wildcard searching (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;159719690&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/3136&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/3136/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/3136&quot;&gt;#3136&lt;/a&gt;) and has a new &lt;code&gt;--reverse&lt;/code&gt; option to show entries from oldest to newest (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;255150651&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4375&quot; data-hovercard-type=&quot;pull_request&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/pull/4375/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/pull/4375&quot;&gt;#4375&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jobs&lt;/code&gt; has a new &lt;code&gt;--quiet&lt;/code&gt; option to silence the output.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;read&lt;/code&gt; has a new &lt;code&gt;--delimiter&lt;/code&gt; option for splitting input into arrays (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;246038377&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4256&quot; data-hovercard-type=&quot;pull_request&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/pull/4256/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/pull/4256&quot;&gt;#4256&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;read&lt;/code&gt; writes directly to stdout if called without arguments (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;258251435&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4407&quot; data-hovercard-type=&quot;pull_request&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/pull/4407/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/pull/4407&quot;&gt;#4407&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;read&lt;/code&gt; can now read individual lines into separate variables without consuming the input in its entirety via the new &lt;code&gt;/--line&lt;/code&gt; option.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set&lt;/code&gt; has new &lt;code&gt;--append&lt;/code&gt; and &lt;code&gt;--prepend&lt;/code&gt; options (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;28708167&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/1326&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/1326/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/1326&quot;&gt;#1326&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set&lt;/code&gt; has a new &lt;code&gt;--show&lt;/code&gt; option to show lots of information about variables (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;246481598&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4265&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/4265/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/4265&quot;&gt;#4265&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;string match&lt;/code&gt; with an empty pattern and &lt;code&gt;--entire&lt;/code&gt; in glob mode now matches everything instead of nothing (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;322033509&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4971&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/4971/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/4971&quot;&gt;#4971&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;string split&lt;/code&gt; supports a new &lt;code&gt;--no-empty&lt;/code&gt; option to exclude empty strings from the result (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;302302775&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4779&quot; data-hovercard-type=&quot;pull_request&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/pull/4779/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/pull/4779&quot;&gt;#4779&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;string&lt;/code&gt; has new subcommands &lt;code&gt;split0&lt;/code&gt; and &lt;code&gt;join0&lt;/code&gt; for working with NUL-delimited output.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;string&lt;/code&gt; no longer stops processing text after NUL characters (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;282732597&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4605&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/4605/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/4605&quot;&gt;#4605&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;string escape&lt;/code&gt; has a new &lt;code&gt;--style regex&lt;/code&gt; option for escaping strings to be matched literally in &lt;code&gt;string&lt;/code&gt; regex operations.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;test&lt;/code&gt; now supports floating point values in numeric comparisons.&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Interactive improvements&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;A pipe at the end of a line now allows the job to continue on the next line (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;26939134&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/1285&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/1285/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/1285&quot;&gt;#1285&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Italics and dim support out of the box on macOS for Terminal.app and iTerm (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;261770107&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4436&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/4436/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/4436&quot;&gt;#4436&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd&lt;/code&gt; tab completions no longer descend into the deepest unambiguous path (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;286897326&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4649&quot; data-hovercard-type=&quot;pull_request&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/pull/4649/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/pull/4649&quot;&gt;#4649&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Pager navigation has been improved. Most notably, moving down now wraps around, moving up from the commandline now jumps to the last element and moving right and left now reverse each other even when wrapping around (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;290777139&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4680&quot; data-hovercard-type=&quot;pull_request&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/pull/4680/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/pull/4680&quot;&gt;#4680&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Typing normal characters while the completion pager is active no longer shows the search field. Instead it enters them into the command line, and ends paging (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;97661236&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/2249&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/2249/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/2249&quot;&gt;#2249&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;A new input binding &lt;code&gt;pager-toggle-search&lt;/code&gt; toggles the search field in the completions pager on and off. By default, this is bound to Ctrl-S.&lt;/li&gt;
&lt;li&gt;Searching in the pager now does a full fuzzy search (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;364313714&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/5213&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/5213/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/5213&quot;&gt;#5213&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;The pager will now show the full command instead of just its last line if the number of completions is large (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;294176685&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4702&quot; data-hovercard-type=&quot;pull_request&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/pull/4702/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/pull/4702&quot;&gt;#4702&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Abbreviations can be tab-completed (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;165593888&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/3233&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/3233/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/3233&quot;&gt;#3233&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Tildes in file names are now properly escaped in completions (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;99214823&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/2274&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/2274/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/2274&quot;&gt;#2274&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Wrapping completions (from &lt;code&gt;complete --wraps&lt;/code&gt; or &lt;code&gt;function --wraps&lt;/code&gt;) can now inject arguments. For example, &lt;code&gt;complete gco --wraps 'git checkout'&lt;/code&gt; now works properly (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;60374495&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/1976&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/1976/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/1976&quot;&gt;#1976&lt;/a&gt;). The &lt;code&gt;alias&lt;/code&gt; function has been updated to respect this behavior.&lt;/li&gt;
&lt;li&gt;Path completions now support expansions, meaning expressions like &lt;code&gt;python ~/&amp;lt;TAB&amp;gt;&lt;/code&gt; now provides file suggestions just like any other relative or absolute path. (This includes support for other expansions, too.)&lt;/li&gt;
&lt;li&gt;Autosuggestions try to avoid arguments that are already present in the command line.&lt;/li&gt;
&lt;li&gt;Notifications about crashed processes are now always shown, even in command substitutions (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;320665141&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4962&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/4962/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/4962&quot;&gt;#4962&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;The screen is no longer reset after a BEL, fixing graphical glitches (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;198378128&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/3693&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/3693/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/3693&quot;&gt;#3693&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;vi-mode now supports ';' and ',' motions. This introduces new {forward,backward}-jump-till and repeat-jump{,-reverse} bind functions (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;349716366&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/5140&quot; data-hovercard-type=&quot;pull_request&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/pull/5140/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/pull/5140&quot;&gt;#5140&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;*y&lt;/code&gt; vi-mode binding now works (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;342651124&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/5100&quot; data-hovercard-type=&quot;pull_request&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/pull/5100/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/pull/5100&quot;&gt;#5100&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;True color is now enabled in neovim by default (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;138276570&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/2792&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/2792/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/2792&quot;&gt;#2792&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Terminal size variables (&lt;code&gt;$COLUMNS&lt;/code&gt;/&lt;code&gt;$LINES&lt;/code&gt;) are now updated before &lt;code&gt;fish_prompt&lt;/code&gt; is called, allowing the prompt to react (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;16318823&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/904&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/904/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/904&quot;&gt;#904&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Multi-line prompts no longer repeat when the terminal is resized (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;101884829&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/2320&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/2320/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/2320&quot;&gt;#2320&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xclip&lt;/code&gt; support has been added to the clipboard integration (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;328776697&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/5020&quot; data-hovercard-type=&quot;pull_request&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/pull/5020/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/pull/5020&quot;&gt;#5020&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;The Alt-P keybinding paginates the last command if the command line is empty.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$cmd_duration&lt;/code&gt; is no longer reset when no command is executed (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;326798975&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/5011&quot; data-hovercard-type=&quot;pull_request&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/pull/5011/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/pull/5011&quot;&gt;#5011&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Deleting a one-character word no longer erases the next word as well (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;299606420&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4747&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/4747/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/4747&quot;&gt;#4747&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Token history search (Alt-Up) omits duplicate entries (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;303937941&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4795&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/4795/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/4795&quot;&gt;#4795&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;fish_escape_delay_ms&lt;/code&gt; timeout, allowing the use of the escape key both on its own and as part of a control sequence, was applied to all control characters; this has been reduced to just the escape key.&lt;/li&gt;
&lt;li&gt;Completing a function shows the description properly (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;362843267&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/5206&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/5206/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/5206&quot;&gt;#5206&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Added completions for
&lt;ul&gt;&lt;li&gt;&lt;code&gt;ansible&lt;/code&gt;, including &lt;code&gt;ansible-galaxy&lt;/code&gt;, &lt;code&gt;ansible-playbook&lt;/code&gt; and &lt;code&gt;ansible-vault&lt;/code&gt; (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;293615396&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4697&quot; data-hovercard-type=&quot;pull_request&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/pull/4697/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/pull/4697&quot;&gt;#4697&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bb-power&lt;/code&gt; (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;304070468&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4800&quot; data-hovercard-type=&quot;pull_request&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/pull/4800/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/pull/4800&quot;&gt;#4800&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bd&lt;/code&gt; (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;264854406&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4472&quot; data-hovercard-type=&quot;pull_request&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/pull/4472/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/pull/4472&quot;&gt;#4472&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bower&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clang&lt;/code&gt; and &lt;code&gt;clang++&lt;/code&gt; (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;239964691&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4174&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/4174/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/4174&quot;&gt;#4174&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;conda&lt;/code&gt; (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;306476509&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4837&quot; data-hovercard-type=&quot;pull_request&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/pull/4837/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/pull/4837&quot;&gt;#4837&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;configure&lt;/code&gt; (for autoconf-generated files only)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;curl&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;doas&lt;/code&gt; (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;361845030&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/5196&quot; data-hovercard-type=&quot;pull_request&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/pull/5196/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/pull/5196&quot;&gt;#5196&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ebuild&lt;/code&gt; (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;314560844&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4911&quot; data-hovercard-type=&quot;pull_request&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/pull/4911/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/pull/4911&quot;&gt;#4911&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;emaint&lt;/code&gt; (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;301009306&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4758&quot; data-hovercard-type=&quot;pull_request&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/pull/4758/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/pull/4758&quot;&gt;#4758&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eopkg&lt;/code&gt; (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;282314777&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4600&quot; data-hovercard-type=&quot;pull_request&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/pull/4600/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/pull/4600&quot;&gt;#4600&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exercism&lt;/code&gt; (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;267358116&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4495&quot; data-hovercard-type=&quot;pull_request&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/pull/4495/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/pull/4495&quot;&gt;#4495&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hjson&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hugo&lt;/code&gt; (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;272008644&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4529&quot; data-hovercard-type=&quot;pull_request&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/pull/4529/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/pull/4529&quot;&gt;#4529&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;j&lt;/code&gt; (from autojump &lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;251432203&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4344&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/4344/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/4344&quot;&gt;#4344&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jbake&lt;/code&gt; (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;304729443&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4814&quot; data-hovercard-type=&quot;pull_request&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/pull/4814/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/pull/4814&quot;&gt;#4814&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jhipster&lt;/code&gt; (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;264854406&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4472&quot; data-hovercard-type=&quot;pull_request&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/pull/4472/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/pull/4472&quot;&gt;#4472&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kitty&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kldload&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kldunload&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;makensis&lt;/code&gt; (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;368326404&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/5242&quot; data-hovercard-type=&quot;pull_request&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/pull/5242/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/pull/5242&quot;&gt;#5242&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;meson&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mkdocs&lt;/code&gt; (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;314307064&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4906&quot; data-hovercard-type=&quot;pull_request&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/pull/4906/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/pull/4906&quot;&gt;#4906&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ngrok&lt;/code&gt; (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;286164265&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4642&quot; data-hovercard-type=&quot;pull_request&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/pull/4642/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/pull/4642&quot;&gt;#4642&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;OpenBSD's &lt;code&gt;pkg_add&lt;/code&gt;, &lt;code&gt;pkg_delete&lt;/code&gt;, &lt;code&gt;pkg_info&lt;/code&gt;, &lt;code&gt;pfctl&lt;/code&gt;, &lt;code&gt;rcctl&lt;/code&gt;, &lt;code&gt;signify&lt;/code&gt;, and &lt;code&gt;vmctl&lt;/code&gt; (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;280823107&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4584&quot; data-hovercard-type=&quot;pull_request&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/pull/4584/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/pull/4584&quot;&gt;#4584&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;openocd&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;optipng&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;opkg&lt;/code&gt; (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;356635568&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/5168&quot; data-hovercard-type=&quot;pull_request&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/pull/5168/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/pull/5168&quot;&gt;#5168&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pandoc&lt;/code&gt; (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;148257676&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/2937&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/2937/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/2937&quot;&gt;#2937&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;port&lt;/code&gt; (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;298399651&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4737&quot; data-hovercard-type=&quot;pull_request&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/pull/4737/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/pull/4737&quot;&gt;#4737&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;powerpill&lt;/code&gt; (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;304070468&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4800&quot; data-hovercard-type=&quot;pull_request&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/pull/4800/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/pull/4800&quot;&gt;#4800&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pstack&lt;/code&gt; (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;347760261&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/5135&quot; data-hovercard-type=&quot;pull_request&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/pull/5135/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/pull/5135&quot;&gt;#5135&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;serve&lt;/code&gt; (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;329311193&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/5026&quot; data-hovercard-type=&quot;pull_request&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/pull/5026/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/pull/5026&quot;&gt;#5026&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ttx&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unzip&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;virsh&lt;/code&gt; (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;344791659&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/5113&quot; data-hovercard-type=&quot;pull_request&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/pull/5113/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/pull/5113&quot;&gt;#5113&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xclip&lt;/code&gt; (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;346280522&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/5126&quot; data-hovercard-type=&quot;pull_request&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/pull/5126/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/pull/5126&quot;&gt;#5126&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xsv&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;zfs&lt;/code&gt; and &lt;code&gt;zpool&lt;/code&gt; (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;282925264&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4608&quot; data-hovercard-type=&quot;pull_request&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/pull/4608/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/pull/4608&quot;&gt;#4608&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Lots of improvements to completions (especially &lt;code&gt;darcs&lt;/code&gt; (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;344515399&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/5112&quot; data-hovercard-type=&quot;pull_request&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/pull/5112/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/pull/5112&quot;&gt;#5112&lt;/a&gt;), &lt;code&gt;git&lt;/code&gt;, &lt;code&gt;hg&lt;/code&gt; and &lt;code&gt;sudo&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Completions for &lt;code&gt;yarn&lt;/code&gt; and &lt;code&gt;npm&lt;/code&gt; now require the &lt;code&gt;all-the-package-names&lt;/code&gt; NPM package for full functionality.&lt;/li&gt;
&lt;li&gt;Completions for &lt;code&gt;bower&lt;/code&gt; and &lt;code&gt;yarn&lt;/code&gt; now require the &lt;code&gt;jq&lt;/code&gt; utility for full functionality.&lt;/li&gt;
&lt;li&gt;Improved French translations.&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Other fixes and improvements&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Significant performance improvements to &lt;code&gt;abbr&lt;/code&gt; (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;230282093&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4048&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/4048/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/4048&quot;&gt;#4048&lt;/a&gt;), setting variables (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;241424388&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4200&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/4200/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/4200&quot;&gt;#4200&lt;/a&gt;, &lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;251346319&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4341&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/4341/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/4341&quot;&gt;#4341&lt;/a&gt;), executing functions, globs (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;279648250&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4579&quot; data-hovercard-type=&quot;pull_request&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/pull/4579/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/pull/4579&quot;&gt;#4579&lt;/a&gt;), &lt;code&gt;string&lt;/code&gt; reading from standard input (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;282961999&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4610&quot; data-hovercard-type=&quot;pull_request&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/pull/4610/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/pull/4610&quot;&gt;#4610&lt;/a&gt;), and slicing history (in particular, &lt;code&gt;$history[1]&lt;/code&gt; for the last executed command).&lt;/li&gt;
&lt;li&gt;Fish's internal wcwidth function has been updated to deal with newer Unicode, and the width of some characters can be configured via the &lt;code&gt;fish_ambiguous_width&lt;/code&gt; (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;350713098&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/5149&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/5149/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/5149&quot;&gt;#5149&lt;/a&gt;) and &lt;code&gt;fish_emoji_width&lt;/code&gt; (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;124755131&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/2652&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/2652/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/2652&quot;&gt;#2652&lt;/a&gt;) variables. Alternatively, a new build-time option INTERNAL_WCWIDTH can be used to use the system's wcwidth instead (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;304829581&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4816&quot; data-hovercard-type=&quot;pull_request&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/pull/4816/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/pull/4816&quot;&gt;#4816&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;functions&lt;/code&gt; correctly supports &lt;code&gt;-d&lt;/code&gt; as the short form of &lt;code&gt;--description&lt;/code&gt;. (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;343384831&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/5105&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/5105/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/5105&quot;&gt;#5105&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/etc/paths&lt;/code&gt; is now parsed like macOS' bash &lt;code&gt;path_helper&lt;/code&gt;, fixing $PATH order (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;251082124&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4336&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/4336/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/4336&quot;&gt;#4336&lt;/a&gt;, &lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;308297504&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4852&quot; data-hovercard-type=&quot;pull_request&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/pull/4852/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/pull/4852&quot;&gt;#4852&lt;/a&gt;) on macOS.&lt;/li&gt;
&lt;li&gt;Using a read-only variable in a &lt;code&gt;for&lt;/code&gt; loop produces an error, rather than silently producing incorrect results (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;251375349&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4342&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/4342/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/4342&quot;&gt;#4342&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;The universal variables filename no longer contains the hostname or MAC address. It is now at the fixed location &lt;code&gt;.config/fish/fish_variables&lt;/code&gt; (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;55054185&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/1912&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/1912/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/1912&quot;&gt;#1912&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Exported variables in the global or universal scope no longer have their exported status affected by local variables (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;122009235&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/2611&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/2611/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/2611&quot;&gt;#2611&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Major rework of terminal and job handling to eliminate bugs (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;205050219&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/3805&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/3805/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/3805&quot;&gt;#3805&lt;/a&gt;, &lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;221220290&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/3952&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/3952/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/3952&quot;&gt;#3952&lt;/a&gt;, &lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;240008191&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4178&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/4178/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/4178&quot;&gt;#4178&lt;/a&gt;, &lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;244877707&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4235&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/4235/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/4235&quot;&gt;#4235&lt;/a&gt;, &lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;245077374&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4238&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/4238/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/4238&quot;&gt;#4238&lt;/a&gt;, &lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;275014361&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4540&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/4540/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/4540&quot;&gt;#4540&lt;/a&gt;, &lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;315940979&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4929&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/4929/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/4929&quot;&gt;#4929&lt;/a&gt;, &lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;363583284&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/5210&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/5210/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/5210&quot;&gt;#5210&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Improvements to the manual page completion generator (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;148257676&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/2937&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/2937/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/2937&quot;&gt;#2937&lt;/a&gt;, &lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;249702097&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4313&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/4313/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/4313&quot;&gt;#4313&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;suspend --force&lt;/code&gt; now works correctly (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;289807229&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/4672&quot; data-hovercard-type=&quot;pull_request&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/pull/4672/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/pull/4672&quot;&gt;#4672&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Pressing Ctrl-C while running a script now reliably terminates fish (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load issue title&quot; data-id=&quot;369765249&quot; data-permission-text=&quot;Issue title is private&quot; data-url=&quot;https://github.com/fish-shell/fish-shell/issues/5253&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/fish-shell/fish-shell/issues/5253/hovercard&quot; href=&quot;https://github.com/fish-shell/fish-shell/issues/5253&quot;&gt;#5253&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;For distributors and developers&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;fish ships with a new build system based on CMake. CMake 3.2 is the minimum required version. Although the autotools-based Makefile and the Xcode project are still shipped with this release, they will be removed in the near future. All distributors and developers are encouraged to migrate to the CMake build.&lt;/li&gt;
&lt;li&gt;Build scripts for most platforms no longer require bash, using the standard sh instead.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;hostname&lt;/code&gt; command is no longer required for fish to operate.&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Fri, 28 Dec 2018 14:09:34 +0000</pubDate>
<dc:creator>faho</dc:creator>
<og:image>https://avatars0.githubusercontent.com/u/1828073?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>fish-shell/fish-shell</og:title>
<og:url>https://github.com/fish-shell/fish-shell</og:url>
<og:description>The user-friendly command line shell. Contribute to fish-shell/fish-shell development by creating an account on GitHub.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/fish-shell/fish-shell/releases/tag/3.0.0</dc:identifier>
</item>
<item>
<title>Show HN: Pg-extend-rs – Easy Postgres extensions in Rust</title>
<link>https://bluejekyll.github.io/blog/rust/2018/12/27/announcing-pg-extend.html</link>
<guid isPermaLink="true" >https://bluejekyll.github.io/blog/rust/2018/12/27/announcing-pg-extend.html</guid>
<description>&lt;p&gt;&lt;em&gt;A project to make Postgres extensions in Rust easy, you might learn how to use macro_rules, attribute macros, allocators and some FFI in this post&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;There were a few things that happened this year that got me excited for the possibilities of &lt;em&gt;stable&lt;/em&gt; Rust entering new spaces. They all come in the form of APIs that have become stabilized with a lot of effort from all of the developers contributing to the language. I wish I could say I helped with that effort, I do get to exploit all of that effort in this new project. I want to express my thanks and greatest esteem towards the people who continue to push the language forward, making it more useful and more pleasurable to use. For me to be able to write this, the stabilization of procedural macros, custom allocators, and panic handlers were all necessary. Each of these was stabilized over the last year, thank you!&lt;/p&gt;

&lt;p&gt;Initially I started playing around with wanting to build Postgres extensions in Rust a while ago, but realized that there was a lot of unstable API work still being done in Rust that I dropped my initial efforts and focused on other things. That’s all changed now! I started working in my spare time on this extension library a few weeks ago (which I may have use for in my day job). Building these tools today in stable Rust is possible because a lot of features have stabilized recently. I’m no Postgres internals expert, and have never written an extension for it before, but I decided to do this in the vein of fearlessly taking on problems with Rust.&lt;/p&gt;
&lt;h2 id=&quot;goal&quot;&gt;Goal&lt;/h2&gt;
&lt;p&gt;To build a library that makes it effortless to create Postgres extensions in Rust. This library needs to do a few things, which are currently implemented as C macros in Postgres header files, hey, my ancient knowledge of C continues to be helpful! As an aside, I still think people should learn C, and this is mostly because it remains the lingua franca for all foreign function interfaces (FFI) between different programming languages (and there’s lots of software written in it out there, like Postgres).&lt;/p&gt;
&lt;p&gt;First things first, we will need a macro to define the “module magic” that informs Postgres that a dynamic library is able to be loaded by it’s loader. Next we need to create a way to call into Rust from Postgres such that we can write standard Rust code, without needing to know the inner workings of Postgres and it’s conventions in C. This wrapper should also make sure that the FFI boundary is respected between the C and Rust. Finally, we will want to use Postgres’ allocator &lt;code class=&quot;highlighter-rouge&quot;&gt;palloc&lt;/code&gt; for allocating all memory in the extensions.&lt;/p&gt;
&lt;p&gt;This might jump the gun a bit, but let’s jump straight to the final code example (derived from &lt;a href=&quot;https://www.postgresql.org/docs/11/xfunc-c.html#id-1.8.3.13.8&quot;&gt;Postgres C-Language Functions examples&lt;/a&gt;):&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pg_extern_attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pg_extern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pg_extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pg_sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pg_magic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;/// This tells Postgres this library is a Postgres extension&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;pg_magic!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pg_sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PG_VERSION_NUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;/// The pg_extern attribute wraps the function in the proper functions syntax for C extensions&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;#[pg_extern]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add_one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;/// Validate that the add_one function works in Rust as expected&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;#[test]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_add_one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;assert_eq!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add_one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Follow the comments above which describe each important section to pay attention to, the full example is &lt;a href=&quot;https://github.com/bluejekyll/pg-extend-rs/blob/f3e5620a43d325b413a9d0c069bcc99b12505e1d/examples/add_one/src/lib.rs&quot;&gt;available in the repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is the way in which the function will be executed in Postgres:&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;postgres=#&lt;/span&gt; SELECT add_one&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; add_one
---------
       4
(1 row)
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&quot;prerequisites-we-need-the-c-bindings&quot;&gt;Prerequisites, we need the C bindings&lt;/h2&gt;
&lt;p&gt;Bindgen to the rescue! One of the greatest tools in the Rust ecosystem when building FFI code, is bindgen. We’re going to use this to define bindings to the Postgres C types we need in Rust. To do this, in the &lt;code class=&quot;highlighter-rouge&quot;&gt;pg_extend&lt;/code&gt; &lt;a href=&quot;https://crates.io/crates/pg-extend&quot;&gt;crate&lt;/a&gt;, we’re going to define a &lt;code class=&quot;highlighter-rouge&quot;&gt;pg_sys&lt;/code&gt; &lt;a href=&quot;https://github.com/bluejekyll/pg-extend-rs/tree/f3e5620a43d325b413a9d0c069bcc99b12505e1d&quot;&gt;module&lt;/a&gt; and run bindgen in a &lt;code class=&quot;highlighter-rouge&quot;&gt;build.rs&lt;/code&gt; &lt;a href=&quot;https://github.com/bluejekyll/pg-extend-rs/blob/f3e5620a43d325b413a9d0c069bcc99b12505e1d/pg-extend/build.rs&quot;&gt;script&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I won’t go over this in detail, bindgen has a great set of &lt;a href=&quot;https://rust-lang.github.io/rust-bindgen/&quot;&gt;documentation&lt;/a&gt; around it for generating FFI bindings to C. The headers we’re using are from the &lt;code class=&quot;highlighter-rouge&quot;&gt;postgres/include/server&lt;/code&gt;, and are defined in the &lt;code class=&quot;highlighter-rouge&quot;&gt;wrapper.h&lt;/code&gt; &lt;a href=&quot;https://github.com/bluejekyll/pg-extend-rs/blob/f3e5620a43d325b413a9d0c069bcc99b12505e1d/pg-extend/wrapper.h&quot;&gt;file&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;defining-pg_magic&quot;&gt;Defining pg_magic&lt;/h2&gt;
&lt;p&gt;The postgres magic macro, &lt;code class=&quot;highlighter-rouge&quot;&gt;pg_magic!(version)&lt;/code&gt;, does a few different things. The primary goal is to tell Postgres that this is a module it can load. Secondarily, it also sets up some default global variables and functions. Before I display this, I should mention that I did look at the &lt;code class=&quot;highlighter-rouge&quot;&gt;pg_module&lt;/code&gt; macro in &lt;a href=&quot;https://github.com/thehydroimpulse/postgres-extension.rs&quot;&gt;thehydroimpulse/postgres-extension.rs&lt;/a&gt;, so I would be remiss if I didn’t mention that it did help point me in the right direction. Let’s look at what &lt;code class=&quot;highlighter-rouge&quot;&gt;pg_magic&lt;/code&gt; generates, you can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;cargo +nightly expand&lt;/code&gt; command to get all macro expansions (I also like &lt;code class=&quot;highlighter-rouge&quot;&gt;cargo doc&lt;/code&gt; for viewing all the APIs), see code comments for explanations:&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// We set the allocator to a custom allocator for Postgres, we'll cover this later...&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;#[global_allocator]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GLOBAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pg_extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;pg_alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PgAllocator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pg_extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;pg_alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PgAllocator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// The magic function Postgres looks for on load of the module, without this Postgres will reject&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;//    the library. `no_mangle` makes sure that the symbol name is not munged, `link_name` forces&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;//    the binding name, It's probably not necessary.&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;#[no_mangle]&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;#[allow(non_snake_case)]&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;#[allow(unused)]&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;#[link_name&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Pg_magic_func&quot;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;C&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Pg_magic_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;'static&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pg_extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;pg_sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pg_magic_struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pg_extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pg_sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;register_panic_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size_of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;raw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;c_int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;// This defines what configuration the extension was built with, the interface for the `Pg_magic_func`&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;//    returns a reference to this const, to match that which postgres requires.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_magic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pg_extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;pg_sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pg_magic_struct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pg_sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pg_magic_struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;size_of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;pg_sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pg_magic_struct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;c_int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pg_sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PG_VERSION_NUM&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;raw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;c_int&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// The rest of this options all come from compile time parameters in the Postgres build.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;funcmaxargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pg_sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FUNC_MAX_ARGS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;c_int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;indexmaxkeys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pg_sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INDEX_MAX_KEYS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;c_int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;namedatalen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pg_sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NAMEDATALEN&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;c_int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;float4byval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pg_sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;USE_FLOAT4_BYVAL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;c_int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;float8byval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pg_sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;USE_FLOAT8_BYVAL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;c_int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;// As this is the entry point for the library loading, we use this as an opportunity&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;//    to register a panic handler, so that we can control errors being reported back&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;//    from Rust to C (Postgres). More on this later.&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;register_panic_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my_magic&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;pg_magic&lt;/code&gt; macro can only be used once in a library. This will become clear with the &lt;code class=&quot;highlighter-rouge&quot;&gt;register_panic_handler&lt;/code&gt; which should only be called once (though I don’t think it should matter if it happens more than that), and &lt;code class=&quot;highlighter-rouge&quot;&gt;#[global_allocator]&lt;/code&gt; can only exist once in a library. I believe this implementation is correct, but if people have opinions on a better way to do this, please reach out.&lt;/p&gt;
&lt;p&gt;Now that we have that, the library is marked as a Postgres extension that can be loaded dynamically.&lt;/p&gt;
&lt;h2 id=&quot;unwrapping-pg_extern&quot;&gt;Unwrapping pg_extern&lt;/h2&gt;
&lt;p&gt;The pg_extern attribute macro is where all the fun is. There are a number of things it does, and feel free to look at it’s &lt;a href=&quot;https://github.com/bluejekyll/pg-extend-rs/blob/f3e5620a43d325b413a9d0c069bcc99b12505e1d/pg-extern-attr/src/lib.rs#L211&quot;&gt;implementation&lt;/a&gt;. I built this after looking at a lot of documentation, some examples I found online, and the experience I had building this other procedural macro, &lt;a href=&quot;https://crates.io/crates/enum-as-inner&quot;&gt;enum-as-inner&lt;/a&gt;. It’s not the most straight forward process, but given Rust’s type safety, it’s generally clear &lt;em&gt;why&lt;/em&gt; it’s wrong, if not &lt;em&gt;how&lt;/em&gt; to fix it (also &lt;code class=&quot;highlighter-rouge&quot;&gt;cargo +nightly expand&lt;/code&gt; is a godsend here). I’m not going to walk through the macro implementation here, but rather what it produces (again, see the code comments inline):&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// Again, an unmangled name&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;#[no_mangle]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;C&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pg_add_one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// This is the parameter as defined in Postgres,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;//    it actually is a type alias to `*mut FunctionCallInfoData`.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;//    it's mutable, because we can use it for returning data from&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;//    the function (though this isn't supported by the library yet)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;func_call_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pg_extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;pg_sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FunctionCallInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// The return is a `Datum` type which is actually a type alias to `usize`,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;//    though we keep this hidden in the library.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pg_extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;pg_sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Datum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;panic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;// Here we unsafely get a mutable reference to the `FunctionCallInfoData`,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;//    again the type is actually `*mut FunctionCallInfoData`. After this point&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;//    the borrow checker will start guaranteeing that we're not doing anything&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;//    untoward with the data.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pg_extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;pg_sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FunctionCallInfoData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unsafe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;func_call_info&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.as_mut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;func_call_info was unexpectedly NULL&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;// We're going to put as much as we can into the catch_unwind block, this&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;//    will allow us to handle the panic, and perform any cleanup with the&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;//    Postgres data that we need to&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;panic_result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;panic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;catch_unwind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// This extracts references to the arguments that were passed into the function.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args_null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pg_extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c&quot;&gt;// In this specific example, there is one parameter. It is converted from the&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;//    Datum representation via a conversion defined in the `pg_extend::pg_datum`&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;//    module.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pg_extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;pg_datum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;TryFromPgDatum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;try_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;nn&quot;&gt;pg_extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;pg_datum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;PgDatum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_raw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0u&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args_null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0u&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// it's safe for us to panic, as there is a panic handler registered.&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;//    (this message can be far better, and will be).&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;.expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;unsupported function argument type for arg_0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c&quot;&gt;// Here is the actual function call! We capture it's result.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add_one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c&quot;&gt;// Now we convert the result into a PgDatum, which is our bridge type between this&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;//    library, Rust types, and the `pg_extend::pg_sys` types.&lt;/span&gt;
        &lt;span class=&quot;nn&quot;&gt;pg_extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;pg_datum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;PgDatum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;// Here we inspect the panic result&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;panic_result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// if it's ok, and is_null, then we express that through the `&amp;amp;mut` reference to&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;//    FunctionCallInfoData.&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;func_info&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.isnull&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.is_null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

            &lt;span class=&quot;c&quot;&gt;// The PgDatum type has a conversion into the Postgres Datum type. We're outside the&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;//    the catch_unwind block, so it's important this next call never panics, it's&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;//    a direct conversion to Datum in `PgDatum::into_datum` so this should be true.&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into_datum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// In an error case, we're just expressing that there is no data to return.&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;//    In the future there may be more things we identify that should be cleaned up.&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;func_info&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.isnull&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;c&quot;&gt;// Now continue the panic handling.&lt;/span&gt;
            &lt;span class=&quot;nn&quot;&gt;panic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;resume_unwind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The above code tries to do as little as possible inside the macro generated code. This is by design, as it’s harder to write meta-code than it is to write &lt;em&gt;actual&lt;/em&gt; code. Also, more shared library code should help with optimization and code size. I like that so little &lt;code class=&quot;highlighter-rouge&quot;&gt;unsafe&lt;/code&gt; code was necessary, but I’m guessing there will be a lot more as we try to implement all the Datum type conversions. All the supported Datum conversions will be available in the &lt;code class=&quot;highlighter-rouge&quot;&gt;pg_extend::pg_datum&lt;/code&gt; &lt;a href=&quot;https://github.com/bluejekyll/pg-extend-rs/blob/f3e5620a43d325b413a9d0c069bcc99b12505e1d/pg-extend/src/pg_datum.rs#L53&quot;&gt;module&lt;/a&gt; (I should note, at the time of this writing there is only a conversion for &lt;code class=&quot;highlighter-rouge&quot;&gt;i32&lt;/code&gt; to and from &lt;code class=&quot;highlighter-rouge&quot;&gt;Datum&lt;/code&gt;, not very useful yet).&lt;/p&gt;
&lt;p&gt;There is also a function which declares the calling convention ABI this function supports:&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;no_mangle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;C&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pg_finfo_pg_add_one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;'static&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pg_extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;pg_sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pg_finfo_record&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_finfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pg_extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;pg_sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pg_finfo_record&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;nn&quot;&gt;pg_extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;pg_sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pg_finfo_record&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;api_version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my_finfo&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Which is fairly straight forward.&lt;/p&gt;
&lt;p&gt;By-the-way, this is the first time I’ve worked with panic handling in Rust, so please reach out if you see anything that looks wrong with the way I’ve written this. Tonight, I was even informed of a new library for trying to enforce no panics, named &lt;a href=&quot;https://crates.io/crates/no-panic&quot;&gt;no_panic&lt;/a&gt;. As I mentioned above that we’d get to the panic handler, so let’s look at that.&lt;/p&gt;
&lt;h3 id=&quot;errors-and-panic-handling&quot;&gt;Errors and Panic handling&lt;/h3&gt;
&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;register_panic_handler&lt;/code&gt; function is responsible for taking all panics from Rust, and properly (I think) converting them into errors reported to Postgres.&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;c&quot;&gt;/// This will replace the current panic_handler&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;register_panic_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;panic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;crate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pg_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;// set (and replace the existing) panic handler, this will tell Postgres that the call failed&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;//   a level of Fatal will force the DB connection to be killed.&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;panic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set_hook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pg_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fatal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;nn&quot;&gt;pg_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;file!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;line!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;module_path!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;format!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;panic in Rust extension: {}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Fatal&lt;/code&gt; error type has a side-effect of failing any running transaction, and closing the connection to the DB. In my testing, if we panicked without a handler, it would cause Postgres to kill the entire DB process, restart and recover. This would be undesirable to say the least, thus the panic handler. Let’s look at &lt;code class=&quot;highlighter-rouge&quot;&gt;pg_error::log&lt;/code&gt; function, because it was really annoying:&lt;/p&gt;
&lt;h3 id=&quot;how-to-easily-lose-3-days-of-development-time&quot;&gt;How to easily lose 3 days of development time&lt;/h3&gt;
&lt;p&gt;Everything in building this library was fairly straightforward up to this point, and just worked. Which was a great feeling. Then while trying to call the log routines in Postgres, I nearly gave up. It was the first case where I was attempting to call Postgres APIs from the Rust, rather than the other direction, and I couldn’t get it to link, here’s the code:&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// The log method implicitly needs to allocate a C style string. I'm not super happy with this&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;//    interface as it doesn't allow a caller to just pass in a `Cstr` directly, so this will&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;//    change in the future. Also, `file` and `func_name` will be `&amp;amp;'static str` in almost all&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;//    cases, so we'll probably change this back to that.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;T1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Into&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;u8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;T2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Into&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;u8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;T3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Into&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;u8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;ffi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;// convert to C ffi, we need to allocate on conversion from Rust strings to C strings, due to&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;//    the fact that they are stored differently. i.e. Rust stores the length of the string,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;//    whereas C is null terminated.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;CString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;this should not fail: file&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;c_int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;CString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func_name&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;this should not fail: func_name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;CString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;this should not fail: msg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;// now we perform the conversions as required by the FFI interfaces.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;c_char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.as_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;c_char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func_name&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.as_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;c_char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.as_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errlevel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;c_int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;c_int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;// log the data:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;unsafe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// I don't know the reasoning behind these interfaces in Postgres, but I was able to unwrap&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;//    these from the standard `ereport` macro in the Postgres headers. `errstart`, `errmsg`,&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;//    and `errfinish` are calls into Postgres from this library.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pg_sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;errstart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errlevel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ERR_DOMAIN&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.as_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;c_char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg_result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pg_sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;errmsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nn&quot;&gt;pg_sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;errfinish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This all works &lt;em&gt;now&lt;/em&gt;, but it took me a while to get it to build. The reason was &lt;code class=&quot;highlighter-rouge&quot;&gt;Undefined symbols for architecture x86_64&lt;/code&gt;! I tried everything to get this to link. I tried linking against every &lt;code class=&quot;highlighter-rouge&quot;&gt;dylib&lt;/code&gt; (I’m on macOS) and &lt;code class=&quot;highlighter-rouge&quot;&gt;.a&lt;/code&gt; in the &lt;code class=&quot;highlighter-rouge&quot;&gt;brew&lt;/code&gt; installed version of Postgres, searched them all with &lt;code class=&quot;highlighter-rouge&quot;&gt;nm&lt;/code&gt;. Then I built Postgres from scratch and scoured every built artifact again with &lt;code class=&quot;highlighter-rouge&quot;&gt;nm&lt;/code&gt; to find the what I should link against, statically or dynamically, for those symbols. I almost gave up, but then came across this &lt;a href=&quot;https://stackoverflow.com/questions/41456777/how-to-build-a-postgres-extension-using-cgo&quot;&gt;answer&lt;/a&gt; on stackoverflow for building postgres extensions with &lt;code class=&quot;highlighter-rouge&quot;&gt;cgo&lt;/code&gt;. And then I spent a bunch of time trying to figure out how pass similar flags to the Rust compiler, and here’s the answer:&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;RUSTFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-C link-arg=-undefineddynamic_lookup&quot;&lt;/span&gt; cargo build
&lt;span class=&quot;gp&quot;&gt;   Compiling pg-extend v0.2.0 ($&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;PATH_TO_LIBRARY&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;/pg-extend-rs/pg-extend&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;   Compiling add-one v0.1.0 ($&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;PATH_TO_LIBRARY&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;/pg-extend-rs/examples/add_one&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;   Finished release [optimized + debuginfo] target(s) in 8.89s
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The relief of something finally building after beating your head against that virtual wall behind the computer screen is the greatest of gifts. It let’s you finally sleep and stop considering all the possible things you haven’t tried yet to fix the problem.&lt;/p&gt;
&lt;p&gt;From the docs, here’s what that argument does to &lt;code class=&quot;highlighter-rouge&quot;&gt;ld&lt;/code&gt; in the &lt;code class=&quot;highlighter-rouge&quot;&gt;llvm&lt;/code&gt; tools: &lt;code class=&quot;highlighter-rouge&quot;&gt;Specifies how undefined symbols are to be treated. Options are: error, warning, suppress, or dynamic_lookup. The default is error.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now, one last thing, the allocators.&lt;/p&gt;
&lt;h2 id=&quot;properly-allocating-memory-in-postgres&quot;&gt;Properly allocating memory in Postgres&lt;/h2&gt;
&lt;p&gt;Postgres has it’s own allocator, &lt;code class=&quot;highlighter-rouge&quot;&gt;palloc&lt;/code&gt;, as well as an associated &lt;code class=&quot;highlighter-rouge&quot;&gt;pfree&lt;/code&gt;. All memory allocated with &lt;code class=&quot;highlighter-rouge&quot;&gt;palloc&lt;/code&gt; is guaranteed to be deallocated when a transaction and/or connection are closed. This is a nice feature for not leaking memory. Somewhat recently, Rust stabilized overriding the global allocator. This was the line in the &lt;code class=&quot;highlighter-rouge&quot;&gt;pg_magic&lt;/code&gt; macro that was annotated with &lt;code class=&quot;highlighter-rouge&quot;&gt;#[global_allocator]&lt;/code&gt;. The allocator implementation is straight forward, but I have some open questions about whether or not it’s correct, here it is:&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PgAllocator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;unsafe&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GlobalAlloc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PgAllocator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;unsafe&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Layout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u8&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// TODO: is there anything we need ot do in terms of layout, etc?&lt;/span&gt;
        &lt;span class=&quot;nn&quot;&gt;pg_sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;palloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u8&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;unsafe&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dealloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_layout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Layout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nn&quot;&gt;pg_sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pfree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;c_void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;It’s pretty simple (also requires the &lt;code class=&quot;highlighter-rouge&quot;&gt;RUSTFLAG&lt;/code&gt; linker setting), it just calls into the Postgres allocator. You’ll notice the &lt;code class=&quot;highlighter-rouge&quot;&gt;TODO&lt;/code&gt; there as I’m unclear what to do about alignment or other layout issues.&lt;/p&gt;
&lt;h2 id=&quot;load-the-extension-in-posrgres&quot;&gt;Load the extension in Posrgres&lt;/h2&gt;
&lt;p&gt;Connect to the DB and load the function (your DB connection probably differs):&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; psql postgres
&lt;span class=&quot;go&quot;&gt;psql (11.1)
Type &quot;help&quot; for help.

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;postgres=#&lt;/span&gt; CREATE FUNCTION add_one&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;integer&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; RETURNS integer AS &lt;span class=&quot;s1&quot;&gt;'${PATH_TO_LIBRARY}/pg-extend-rs/target/release/libadd_one.dylib'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'pg_add_one'&lt;/span&gt; LANGUAGE C STRICT&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;CREATE FUNCTION
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;postgres=#&lt;/span&gt; SELECT add_one&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; add_one
---------
       4
(1 row)

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;postgres=#&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\q&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Notice that the symbol to load is &lt;code class=&quot;highlighter-rouge&quot;&gt;pg_add_one&lt;/code&gt; and not &lt;code class=&quot;highlighter-rouge&quot;&gt;add_one&lt;/code&gt;, as the latter would have conflicted with the original function in Rust. As a future task, I want to build generators for the psql scripts to load the function&lt;/p&gt;
&lt;h2 id=&quot;just-the-beginning&quot;&gt;Just the beginning&lt;/h2&gt;
&lt;p&gt;This is really just the beginning of this library. There is going to be a long road to complete it, as there are a lot of type conversions to implement for the &lt;code class=&quot;highlighter-rouge&quot;&gt;PgDatum&lt;/code&gt; type. As I have time, I will get to it, but if you find this useful and want to contribute, please feel welcome. I’ve picked as open a set of licenses as possible to allow people from all walks to get in on the fun, &lt;a href=&quot;https://github.com/bluejekyll/pg-extend-rs&quot;&gt;bluejekyll/pg-extend-rs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As always, thank you to all the Rust contributors who continue to make the language an absolute pleasure.&lt;/p&gt;
</description>
<pubDate>Fri, 28 Dec 2018 13:33:18 +0000</pubDate>
<dc:creator>bluejekyll</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://bluejekyll.github.io/blog/rust/2018/12/27/announcing-pg-extend.html</dc:identifier>
</item>
<item>
<title>Show HN: Open source JavaScript library to record and replay the web</title>
<link>https://www.rrweb.io/</link>
<guid isPermaLink="true" >https://www.rrweb.io/</guid>
<description>&lt;div readability=&quot;32&quot;&gt;
&lt;div class=&quot;feature-inner&quot; readability=&quot;9&quot;&gt;

&lt;h4 class=&quot;feature-title h3-mobile mb-8&quot;&gt;User analysis&lt;/h4&gt;
&lt;p class=&quot;text-sm&quot;&gt;With the pixel-perfect replay of what users do on your site, you will find it easy to understand your users and optimize their experience.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div readability=&quot;31.5&quot;&gt;
&lt;div class=&quot;feature-inner&quot; readability=&quot;8&quot;&gt;

&lt;h4 class=&quot;feature-title h3-mobile mb-8&quot;&gt;Reproduce bugs&lt;/h4&gt;
&lt;p class=&quot;text-sm&quot;&gt;You can replay problem and debug it in your browser remotely with consistent behavior. This lets you understand the cause of every bug.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div readability=&quot;32&quot;&gt;
&lt;div class=&quot;feature-inner&quot; readability=&quot;9&quot;&gt;

&lt;h4 class=&quot;feature-title h3-mobile mb-8&quot;&gt;Demonstrate web&lt;/h4&gt;
&lt;p class=&quot;text-sm&quot;&gt;Instead of recording videos to show your web, rrweb provides a more lightweight and pixel-perfect way of doing that.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div readability=&quot;32&quot;&gt;
&lt;div class=&quot;feature-inner&quot; readability=&quot;9&quot;&gt;

&lt;h4 class=&quot;feature-title h3-mobile mb-8&quot;&gt;Real-time collaboration&lt;/h4&gt;
&lt;p class=&quot;text-sm&quot;&gt;With the power of rrweb, it should not be hard to share your interactions on the site with others in real-time.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
<pubDate>Fri, 28 Dec 2018 13:07:04 +0000</pubDate>
<dc:creator>yz-yu</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.rrweb.io/</dc:identifier>
</item>
<item>
<title>Crypto 101 – Introductory course on cryptography</title>
<link>https://www.crypto101.io</link>
<guid isPermaLink="true" >https://www.crypto101.io</guid>
<description>&lt;div readability=&quot;15&quot;&gt;
&lt;h2&gt;Start to finish.&lt;/h2&gt;
&lt;p&gt;Comes with everything you need to understand complete systems such as SSL/TLS: block ciphers, stream ciphers, hash functions, message authentication codes, public key encryption, key agreement protocols, and signature algorithms.&lt;/p&gt;
&lt;/div&gt;&lt;div readability=&quot;13&quot;&gt;
&lt;h2&gt;Learn by doing.&lt;/h2&gt;
&lt;p&gt;Learn how to exploit common cryptographic flaws, armed with nothing but a little time and your favorite programming language.&lt;/p&gt;
&lt;p&gt;Forge administrator cookies, recover passwords, and even backdoor your own random number generator.&lt;/p&gt;
&lt;/div&gt;</description>
<pubDate>Fri, 28 Dec 2018 12:26:48 +0000</pubDate>
<dc:creator>febin</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.crypto101.io/</dc:identifier>
</item>
<item>
<title>Brain.js</title>
<link>https://github.com/BrainJS/brain.js</link>
<guid isPermaLink="true" >https://github.com/BrainJS/brain.js</guid>
<description>&lt;div class=&quot;Box-body p-6&quot;&gt;
&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/c242bbfb4a8cf40ba46394750a3a03ac2dced65d/68747470733a2f2f63646e2e7261776769742e636f6d2f686172746875722d6f72672f627261696e2e6a732f66663539353234322f6c6f676f2e737667&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/c242bbfb4a8cf40ba46394750a3a03ac2dced65d/68747470733a2f2f63646e2e7261776769742e636f6d2f686172746875722d6f72672f627261696e2e6a732f66663539353234322f6c6f676f2e737667&quot; alt=&quot;Logo&quot; width=&quot;200px/&quot; data-canonical-src=&quot;https://cdn.rawgit.com/harthur-org/brain.js/ff595242/logo.svg&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://npmjs.com/package/brain.js&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/450986c7fa63fcac674fa4328317c10b634e0ec7/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f64742f627261696e2e6a732e7376673f7374796c653d666c61742d737175617265&quot; alt=&quot;npm&quot; data-canonical-src=&quot;https://img.shields.io/npm/dt/brain.js.svg?style=flat-square&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/BrainJS/brain.js#backers&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/4fbab4afe2a988edb554d1944273983b23ea3a90/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f627261696e6a732f6261636b6572732f62616467652e737667&quot; alt=&quot;Backers on Open Collective&quot; data-canonical-src=&quot;https://opencollective.com/brainjs/backers/badge.svg&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/BrainJS/brain.js#sponsors&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/d4e69d8d5070f13182a82fcbbdac3f4519ddec11/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f627261696e6a732f73706f6e736f72732f62616467652e737667&quot; alt=&quot;Sponsors on Open Collective&quot; data-canonical-src=&quot;https://opencollective.com/brainjs/sponsors/badge.svg&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://gitter.im/brain-js/Lobby?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/da2edb525cde1455a622c58c0effc3a90b9a181c/68747470733a2f2f6261646765732e6769747465722e696d2f4a6f696e253230436861742e737667&quot; alt=&quot;Gitter&quot; data-canonical-src=&quot;https://badges.gitter.im/Join%20Chat.svg&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://slack.bri.im&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/adb42c63d25960263208bfa956116ff19c960491/68747470733a2f2f736c61636b2e6272692e696d2f62616467652e737667&quot; alt=&quot;Slack&quot; data-canonical-src=&quot;https://slack.bri.im/badge.svg&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;About&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;brain.js&lt;/code&gt; is a library of &lt;a href=&quot;http://en.wikipedia.org/wiki/Artificial_neural_network&quot; rel=&quot;nofollow&quot;&gt;Neural Networks&lt;/a&gt; written in JavaScript.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NEW!&lt;/strong&gt; &lt;a href=&quot;https://scrimba.com/g/gneuralnetworks&quot; rel=&quot;nofollow&quot;&gt;A fun and practical introduction to Brain.js&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;💡 &lt;strong&gt;Note&lt;/strong&gt;: This is a continuation of the &lt;a href=&quot;https://github.com/harthur/brain&quot;&gt;&lt;strong&gt;harthur/brain&lt;/strong&gt;&lt;/a&gt; repository (which is not maintained anymore). For more details, check out &lt;a href=&quot;https://github.com/harthur/brain/issues/72&quot;&gt;this issue&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;

&lt;p&gt;Here's an example showcasing how to approximate the XOR function using &lt;code&gt;brain.js&lt;/code&gt;: more info on config &lt;a href=&quot;https://github.com/BrainJS/brain.js/blob/develop/src/neural-network.js#L31&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; provide optional config object (or undefined). Defaults shown.&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; {
    binaryThresh&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0.5&lt;/span&gt;,
    hiddenLayers&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;],     &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; array of ints for the sizes of the hidden layers in the network&lt;/span&gt;
    activation&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;sigmoid&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;  &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; supported activation types: ['sigmoid', 'relu', 'leaky-relu', 'tanh'],&lt;/span&gt;
    leakyReluAlpha&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0.01&lt;/span&gt;   &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; supported for activation type 'leaky-relu'&lt;/span&gt;
};

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; create a simple feed forward neural network with backpropagation&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;net&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;brain.NeuralNetwork&lt;/span&gt;(config);

&lt;span class=&quot;pl-smi&quot;&gt;net&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;train&lt;/span&gt;([{input&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;], output&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;]},
           {input&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;], output&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;]},
           {input&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;], output&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;]},
           {input&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;], output&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;]}]);

&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;net&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;run&lt;/span&gt;([&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;]);  &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; [0.987]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or more info on config &lt;a href=&quot;https://github.com/BrainJS/brain.js/blob/develop/src/recurrent/rnn.js#L726&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; provide optional config object, defaults shown.&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; {
    inputSize&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;20&lt;/span&gt;,
    inputRange&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;20&lt;/span&gt;,
    hiddenLayers&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;pl-c1&quot;&gt;20&lt;/span&gt;,&lt;span class=&quot;pl-c1&quot;&gt;20&lt;/span&gt;],
    outputSize&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;20&lt;/span&gt;,
    learningRate&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0.01&lt;/span&gt;,
    decayRate&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0.999&lt;/span&gt;,
};

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; create a simple recurrent neural network&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;net&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;brain.recurrent.RNN&lt;/span&gt;(config);

&lt;span class=&quot;pl-smi&quot;&gt;net&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;train&lt;/span&gt;([{input&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;], output&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;]},
           {input&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;], output&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;]},
           {input&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;], output&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;]},
           {input&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;], output&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;]}]);

&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;net&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;run&lt;/span&gt;([&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;]);  &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; [0]&lt;/span&gt;
output &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;net&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;run&lt;/span&gt;([&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;]);      &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; [1]&lt;/span&gt;
output &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;net&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;run&lt;/span&gt;([&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;]);      &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; [1]&lt;/span&gt;
output &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;net&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;run&lt;/span&gt;([&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;]);      &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; [0]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, there is no reason to use a neural network to figure out XOR. (-: So, here is a more involved, realistic example: &lt;a href=&quot;https://brain.js.org/&quot; rel=&quot;nofollow&quot;&gt;Demo: training a neural network to recognize color contrast&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;More Examples&lt;/h2&gt;
&lt;p&gt;You can check out this fantastic screencast, which explains how to train a simple neural network using a real world dataset: &lt;a href=&quot;https://scrimba.com/c/c36zkcb&quot; rel=&quot;nofollow&quot;&gt;How to create a neural network in the browser using Brain.js&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Node&lt;/h3&gt;
&lt;p&gt;If you have &lt;a href=&quot;http://nodejs.org/&quot; rel=&quot;nofollow&quot;&gt;node&lt;/a&gt;, you can install &lt;code&gt;brain.js&lt;/code&gt; with &lt;a href=&quot;http://npmjs.org&quot; rel=&quot;nofollow&quot;&gt;npm&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;npm install brain.js
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Or if you prefer yarn:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;yarn add brain.js
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;At present, the published version of brain.js is approximately 1.0.0, featuring only Feed-forward NN. All other models are beta and are being jazzed up and battle hardened. You can still download the latest, though. They are cool!&lt;/p&gt;
&lt;h3&gt;Browser&lt;/h3&gt;
&lt;p&gt;Download the latest &lt;a href=&quot;https://cdn.rawgit.com/BrainJS/brain.js/master/browser.js&quot; rel=&quot;nofollow&quot;&gt;brain.js for browser&lt;/a&gt;. Training is computationally expensive, so you should try to train the network offline (or on a Worker) and use the &lt;code&gt;toFunction()&lt;/code&gt; or &lt;code&gt;toJSON()&lt;/code&gt; options to plug the pre-trained network into your website.&lt;/p&gt;

&lt;p&gt;Use &lt;code&gt;train()&lt;/code&gt; to train the network with an array of training data. The network has to be trained with all the data in bulk in one call to &lt;code&gt;train()&lt;/code&gt;. More training patterns will probably take longer to train, but will usually result in a network better at classifying new patterns.&lt;/p&gt;
&lt;h3&gt;Data format&lt;/h3&gt;
&lt;h4&gt;For training with &lt;code&gt;NeuralNetwork&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Each training pattern should have an &lt;code&gt;input&lt;/code&gt; and an &lt;code&gt;output&lt;/code&gt;, both of which can be either an array of numbers from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;1&lt;/code&gt; or a hash of numbers from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;1&lt;/code&gt;. For the &lt;a href=&quot;https://brain.js.org/&quot; rel=&quot;nofollow&quot;&gt;color contrast demo&lt;/a&gt; it looks something like this:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;net&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;brain.NeuralNetwork&lt;/span&gt;();

&lt;span class=&quot;pl-smi&quot;&gt;net&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;train&lt;/span&gt;([{input&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; { r&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0.03&lt;/span&gt;, g&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0.7&lt;/span&gt;, b&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0.5&lt;/span&gt; }, output&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; { black&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt; }},
           {input&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; { r&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0.16&lt;/span&gt;, g&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0.09&lt;/span&gt;, b&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0.2&lt;/span&gt; }, output&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; { white&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt; }},
           {input&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; { r&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0.5&lt;/span&gt;, g&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0.5&lt;/span&gt;, b&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;1.0&lt;/span&gt; }, output&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; { white&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt; }}]);

&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;net&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;run&lt;/span&gt;({ r&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, g&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0.4&lt;/span&gt;, b&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt; });  &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; { white: 0.99, black: 0.002 }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here's another variation of the above example. (&lt;em&gt;Note&lt;/em&gt; that input objects do not need to be similar.)&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-smi&quot;&gt;net&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;train&lt;/span&gt;([{input&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; { r&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0.03&lt;/span&gt;, g&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0.7&lt;/span&gt; }, output&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; { black&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt; }},
           {input&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; { r&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0.16&lt;/span&gt;, b&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0.2&lt;/span&gt; }, output&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; { white&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt; }},
           {input&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; { r&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0.5&lt;/span&gt;, g&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0.5&lt;/span&gt;, b&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;1.0&lt;/span&gt; }, output&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; { white&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt; }}]);

&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;net&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;run&lt;/span&gt;({ r&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, g&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0.4&lt;/span&gt;, b&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt; });  &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; { white: 0.81, black: 0.18 }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;For training with &lt;code&gt;RNNTimeStep&lt;/code&gt;, &lt;code&gt;LSTMTimeStep&lt;/code&gt; and &lt;code&gt;GRUTimeStep&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Each training pattern can either:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Be an array of numbers&lt;/li&gt;
&lt;li&gt;Be an array of arrays of numbers&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Example using an array of numbers:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;net&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;brain.recurrent.LSTMTimeStep&lt;/span&gt;();

&lt;span class=&quot;pl-smi&quot;&gt;net&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;train&lt;/span&gt;([
  [&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;]
]);

&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;net&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;run&lt;/span&gt;([&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;]);  &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; 3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Example using an array of arrays of numbers:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;net&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;brain.recurrent.LSTMTimeStep&lt;/span&gt;({
  inputSize&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;,
  hiddenLayers&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;pl-c1&quot;&gt;10&lt;/span&gt;],
  outputSize&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;
});

&lt;span class=&quot;pl-smi&quot;&gt;net&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;train&lt;/span&gt;([
  [&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;],
  [&lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;],
  [&lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;],
]);

&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;net&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;run&lt;/span&gt;([[&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;]]);  &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; [3, 1]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;For training with &lt;code&gt;RNN&lt;/code&gt;, &lt;code&gt;LSTM&lt;/code&gt; and &lt;code&gt;GRU&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Each training pattern can either:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Be an array of values&lt;/li&gt;
&lt;li&gt;Be a string&lt;/li&gt;
&lt;li&gt;Have an &lt;code&gt;input&lt;/code&gt; and an &lt;code&gt;output&lt;/code&gt;
&lt;ul&gt;&lt;li&gt;Either of which can an array of values or a string&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;CAUTION: When using an array of values, you can use ANY value, however, the values are represented in the neural network by a single input. So the more &lt;em&gt;distinct values&lt;/em&gt; has &lt;em&gt;the larger your input layer&lt;/em&gt;. If you have a hundreds, thousands, or millions of floating point values &lt;em&gt;THIS IS NOT THE RIGHT CLASS FOR THE JOB&lt;/em&gt;. Also, when deviating from strings, this gets into beta&lt;/p&gt;
&lt;p&gt;Example using direct strings:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;net&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;brain.recurrent.LSTM&lt;/span&gt;();

&lt;span class=&quot;pl-smi&quot;&gt;net&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;train&lt;/span&gt;([
  &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;doe, a deer, a female deer&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
  &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;ray, a drop of golden sun&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
  &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;me, a name I call myself&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
]);

&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;net&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;run&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;doe&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);  &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; ', a deer, a female deer'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Example using strings with inputs and outputs:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;net&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;brain.recurrent.LSTM&lt;/span&gt;();

&lt;span class=&quot;pl-smi&quot;&gt;net&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;train&lt;/span&gt;([
  { input&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;I feel great about the world!&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, output&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;happy&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; },
  { input&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;The world is a terrible place!&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, output&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;sad&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; },
]);

&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;net&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;run&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;I feel great about the world!&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);  &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; 'happy'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Training Options&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;train()&lt;/code&gt; takes a hash of options as its second argument:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-smi&quot;&gt;net&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;train&lt;/span&gt;(data, {
                            &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; Defaults values --&amp;gt; expected validation&lt;/span&gt;
      iterations&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;20000&lt;/span&gt;,    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; the maximum times to iterate the training data --&amp;gt; number greater than 0&lt;/span&gt;
      errorThresh&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0.005&lt;/span&gt;,   &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; the acceptable error percentage from training data --&amp;gt; number between 0 and 1&lt;/span&gt;
      log&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;false&lt;/span&gt;,           &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; true to use console.log, when a function is supplied it is used --&amp;gt; Either true or a function&lt;/span&gt;
      logPeriod&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;10&lt;/span&gt;,        &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; iterations between logging out --&amp;gt; number greater than 0&lt;/span&gt;
      learningRate&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0.3&lt;/span&gt;,    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; scales with delta to effect training rate --&amp;gt; number between 0 and 1&lt;/span&gt;
      momentum&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0.1&lt;/span&gt;,        &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; scales with next layer's change value --&amp;gt; number between 0 and 1&lt;/span&gt;
      callback&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;null&lt;/span&gt;,       &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; a periodic call back that can be triggered while training --&amp;gt; null or function&lt;/span&gt;
      callbackPeriod&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;10&lt;/span&gt;,   &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; the number of iterations through the training data between callback calls --&amp;gt; number greater than 0&lt;/span&gt;
      timeout&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;Infinity&lt;/span&gt;     &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; the max number of milliseconds to train for --&amp;gt; number greater than 0&lt;/span&gt;
});
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The network will stop training whenever one of the two criteria is met: the training error has gone below the threshold (default &lt;code&gt;0.005&lt;/code&gt;), or the max number of iterations (default &lt;code&gt;20000&lt;/code&gt;) has been reached.&lt;/p&gt;
&lt;p&gt;By default training will not let you know how it's doing until the end, but set &lt;code&gt;log&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; to get periodic updates on the current training error of the network. The training error should decrease every time. The updates will be printed to console. If you set &lt;code&gt;log&lt;/code&gt; to a function, this function will be called with the updates instead of printing to the console.&lt;/p&gt;
&lt;p&gt;The learning rate is a parameter that influences how quickly the network trains. It's a number from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;1&lt;/code&gt;. If the learning rate is close to &lt;code&gt;0&lt;/code&gt;, it will take longer to train. If the learning rate is closer to &lt;code&gt;1&lt;/code&gt;, it will train faster, but training results may be constrained to a local minimum and perform badly on new data.(&lt;em&gt;Overfitting&lt;/em&gt;) The default learning rate is &lt;code&gt;0.3&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The momentum is similar to learning rate, expecting a value from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;1&lt;/code&gt; as well, but it is multiplied against the next level's change value. The default value is &lt;code&gt;0.1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Any of these training options can be passed into the constructor or passed into the &lt;code&gt;updateTrainingOptions(opts)&lt;/code&gt; method and they will be saved on the network and used during the training time. If you save your network to json, these training options are saved and restored as well (except for callback and log, callback will be forgotten and log will be restored using console.log).&lt;/p&gt;
&lt;p&gt;A boolean property called &lt;code&gt;invalidTrainOptsShouldThrow&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt; by default. While the option is &lt;code&gt;true&lt;/code&gt;, if you enter a training option that is outside the normal range, an error will be thrown with a message about the abnormal option. When the option is set to &lt;code&gt;false&lt;/code&gt;, no error will be sent, but a message will still be sent to &lt;code&gt;console.warn&lt;/code&gt; with the related information.&lt;/p&gt;
&lt;h3&gt;Async Training&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;trainAsync()&lt;/code&gt; takes the same arguments as train (data and options). Instead of returning the results object from training, it returns a promise that when resolved will return the training results object.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
  &lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;net&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;brain.NeuralNetwork&lt;/span&gt;();
  net
    .&lt;span class=&quot;pl-en&quot;&gt;trainAsync&lt;/span&gt;(data, options)
    .&lt;span class=&quot;pl-c1&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; {
      &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; do something with my trained network&lt;/span&gt;
    })
    .&lt;span class=&quot;pl-c1&quot;&gt;catch&lt;/span&gt;(handleError);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With multiple networks you can train in parallel like this:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
  &lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;net&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;brain.NeuralNetwork&lt;/span&gt;();
  &lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;net2&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;brain.NeuralNetwork&lt;/span&gt;();

  &lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;p1&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;net&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;trainAsync&lt;/span&gt;(data, options);
  &lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;p2&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;net2&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;trainAsync&lt;/span&gt;(data, options);

  &lt;span class=&quot;pl-c1&quot;&gt;Promise&lt;/span&gt;
    .&lt;span class=&quot;pl-c1&quot;&gt;all&lt;/span&gt;([p1, p2])
    .&lt;span class=&quot;pl-c1&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; {
      &lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; values[&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;];
      &lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;res2&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; values[&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;];
      &lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;net trained in &lt;span class=&quot;pl-s1&quot;&gt;&lt;span class=&quot;pl-pse&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;res&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;iterations&lt;/span&gt;&lt;span class=&quot;pl-pse&quot;&gt;}&lt;/span&gt;&lt;/span&gt; and net2 trained in &lt;span class=&quot;pl-s1&quot;&gt;&lt;span class=&quot;pl-pse&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;res2&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;iterations&lt;/span&gt;&lt;span class=&quot;pl-pse&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt;);
      &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; do something super cool with my 2 trained networks&lt;/span&gt;
    })
    .&lt;span class=&quot;pl-c1&quot;&gt;catch&lt;/span&gt;(handleError);
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Cross Validation&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-validation_(statistics)&quot; rel=&quot;nofollow&quot;&gt;Cross Validation&lt;/a&gt; can provide a less fragile way of training on larger data sets. The brain.js api provides Cross Validation in this example:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;crossValidate&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;brain.CrossValidate&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;brain&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;NeuralNetwork&lt;/span&gt;, networkOptions);
&lt;span class=&quot;pl-smi&quot;&gt;crossValidate&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;train&lt;/span&gt;(data, trainingOptions, k); &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt;note k (or KFolds) is optional&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;crossValidate&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;toJSON&lt;/span&gt;(); &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; all stats in json as well as neural networks&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;net&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;crossValidate&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;toNeuralNetwork&lt;/span&gt;(); &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; get top performing net out of `crossValidate`&lt;/span&gt;


&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; optionally later&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;crossValidate&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;toJSON&lt;/span&gt;();
&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;net&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;crossValidate&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;fromJSON&lt;/span&gt;(json);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Use &lt;code&gt;CrossValidate&lt;/code&gt; with these classes:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;brain.NeuralNetwork&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;brain.RNNTimeStep&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;brain.LSTMTimeStep&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;brain.GRUTimeStep&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;An example of using cross validate can be found in &lt;a href=&quot;https://github.com/BrainJS/brain.js/blob/master/examples/cross-validate.js&quot;&gt;examples/cross-validate.js&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Train Stream&lt;/h3&gt;
&lt;p&gt;Streams are a very powerful tool in node for massive data spread across processes and are provided via the brain.js api in the following way:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;net&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;brain.NeuralNetwork&lt;/span&gt;();
&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;trainStream&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;brain.TrainStream&lt;/span&gt;({
  neuralNetwork&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; net,
  &lt;span class=&quot;pl-en&quot;&gt;floodCallback&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt;() {
    &lt;span class=&quot;pl-en&quot;&gt;flood&lt;/span&gt;(trainStream, data);
  },
  &lt;span class=&quot;pl-en&quot;&gt;doneTrainingCallback&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;stats&lt;/span&gt;) {
    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; network is done training!  What next?&lt;/span&gt;
  }
});

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; kick it off&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;readInputs&lt;/span&gt;(trainStream, data);

&lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;readInputs&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;stream&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;data&lt;/span&gt;) {
  &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;; i &lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;data&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;length&lt;/span&gt;; i&lt;span class=&quot;pl-k&quot;&gt;++&lt;/span&gt;) {
    &lt;span class=&quot;pl-smi&quot;&gt;stream&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;write&lt;/span&gt;(data[i]);
  }
  &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; let it know we've reached the end of the inputs&lt;/span&gt;
  &lt;span class=&quot;pl-smi&quot;&gt;stream&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;endInputs&lt;/span&gt;();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;An example of using train stream can be found in &lt;a href=&quot;https://github.com/BrainJS/brain.js/blob/master/examples/stream-example.js&quot;&gt;examples/stream-example.js&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;&lt;code&gt;train(trainingData)&lt;/code&gt; -&amp;gt; trainingStatus&lt;/h2&gt;
&lt;p&gt;The output of &lt;code&gt;train()&lt;/code&gt; is a hash of information about how the training went:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
{
  error&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0.0039139985510105032&lt;/span&gt;,  &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; training error&lt;/span&gt;
  iterations&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;406&lt;/span&gt;                &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; training iterations&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;code&gt;run(input)&lt;/code&gt; -&amp;gt; prediction&lt;/h2&gt;
&lt;p&gt;Supported on classes:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;brain.NeuralNetwork&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;brain.NeuralNetworkGPU&lt;/code&gt; -&amp;gt; All the functionality of &lt;code&gt;brain.NeuralNetwork&lt;/code&gt; but, ran on GPU (via gpu.js in WebGL2, WebGL1, or fallback to CPU)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;brain.recurrent.RNN&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;brain.recurrent.LSTM&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;brain.recurrent.GRU&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;brain.recurrent.RNNTimeStep&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;brain.recurrent.LSTMTimeStep&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;brain.recurrent.GRUTimeStep&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; feed forward&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;net&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;brain.NeuralNetwork&lt;/span&gt;();
&lt;span class=&quot;pl-smi&quot;&gt;net&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;fromJSON&lt;/span&gt;(json);
&lt;span class=&quot;pl-smi&quot;&gt;net&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;run&lt;/span&gt;(input);

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; time step&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;net&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;brain.LSTMTimeStep&lt;/span&gt;();
&lt;span class=&quot;pl-smi&quot;&gt;net&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;fromJSON&lt;/span&gt;(json);
&lt;span class=&quot;pl-smi&quot;&gt;net&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;run&lt;/span&gt;(input);

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; recurrent&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;net&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;brain.LSTMTimeStep&lt;/span&gt;();
&lt;span class=&quot;pl-smi&quot;&gt;net&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;fromJSON&lt;/span&gt;(json);
&lt;span class=&quot;pl-smi&quot;&gt;net&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;run&lt;/span&gt;(input);
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;code&gt;forecast(input, count)&lt;/code&gt; -&amp;gt; predictions&lt;/h2&gt;
&lt;p&gt;Available with the following classes. Outputs a array of predictions. Predictions being a continuation of the inputs.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;brain.recurrent.RNNTimeStep&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;brain.recurrent.LSTMTimeStep&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;brain.recurrent.GRUTimeStep&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;net&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;brain.LSTMTimeStep&lt;/span&gt;();
&lt;span class=&quot;pl-smi&quot;&gt;net&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;fromJSON&lt;/span&gt;(json);
&lt;span class=&quot;pl-smi&quot;&gt;net&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;forecast&lt;/span&gt;(input, &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;code&gt;toJSON() -&amp;gt; json&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Serialize neural network to json&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;fromJSON(json)&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Deserialize neural network from json&lt;/p&gt;

&lt;p&gt;If the network failed to train, the error will be above the error threshold. This could happen if the training data is too noisy (most likely), the network does not have enough hidden layers or nodes to handle the complexity of the data, or it has not been trained for enough iterations.&lt;/p&gt;
&lt;p&gt;If the training error is still something huge like &lt;code&gt;0.4&lt;/code&gt; after 20000 iterations, it's a good sign that the network can't make sense of the given data.&lt;/p&gt;
&lt;h2&gt;RNN, LSTM, or GRU Output too short or too long&lt;/h2&gt;
&lt;p&gt;The instance of the net's property &lt;code&gt;maxPredictionLength&lt;/code&gt; (default 100) can be set to adjust the output of the net;&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;net&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;brain.recurrent.LSTM&lt;/span&gt;();

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; later in code, after training on a few novels, write me a new one!&lt;/span&gt;
&lt;span class=&quot;pl-smi&quot;&gt;net&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;maxPredictionLength&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;1000000000&lt;/span&gt;; &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; Be careful!&lt;/span&gt;
&lt;span class=&quot;pl-smi&quot;&gt;net&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;run&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;Once upon a time&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Serialize or load in the state of a trained network with JSON:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;net&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;toJSON&lt;/span&gt;();
&lt;span class=&quot;pl-smi&quot;&gt;net&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;fromJSON&lt;/span&gt;(json);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can also get a custom standalone function from a trained network that acts just like &lt;code&gt;run()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;net&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;toFunction&lt;/span&gt;();
&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;run&lt;/span&gt;({ r&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, g&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0.4&lt;/span&gt;, b&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt; });
&lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;run&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;toString&lt;/span&gt;()); &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; copy and paste! no need to import brain.js&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;NeuralNetwork()&lt;/code&gt; takes a hash of options:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;net&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;brain.NeuralNetwork&lt;/span&gt;({
  activation&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;sigmoid&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; activation function&lt;/span&gt;
  hiddenLayers&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;],
  learningRate&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0.6&lt;/span&gt; &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; global learning rate, useful when training using streams&lt;/span&gt;
});
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;activation&lt;/h3&gt;
&lt;p&gt;This parameter lets you specify which activation function your neural network should use. There are currently four supported activation functions, &lt;strong&gt;sigmoid&lt;/strong&gt; being the default:&lt;/p&gt;
&lt;p&gt;Here's a table (thanks, Wikipedia!) summarizing a plethora of activation functions — &lt;a href=&quot;https://www.wikiwand.com/en/Activation_function&quot; rel=&quot;nofollow&quot;&gt;Activation Function&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;hiddenLayers&lt;/h3&gt;
&lt;p&gt;You can use this to specify the number of hidden layers in the network and the size of each layer. For example, if you want two hidden layers - the first with 3 nodes and the second with 4 nodes, you'd give:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;hiddenLayers: [3, 4]
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;By default &lt;code&gt;brain.js&lt;/code&gt; uses one hidden layer with size proportionate to the size of the input array.&lt;/p&gt;

&lt;p&gt;The network now has a &lt;a href=&quot;http://nodejs.org/api/stream.html#stream_class_stream_writable&quot; rel=&quot;nofollow&quot;&gt;WriteStream&lt;/a&gt;. You can train the network by using &lt;code&gt;pipe()&lt;/code&gt; to send the training data to the network.&lt;/p&gt;
&lt;h3&gt;Example&lt;/h3&gt;
&lt;p&gt;Refer to &lt;a href=&quot;https://github.com/BrainJS/brain.js/blob/master/examples/stream-example.js&quot;&gt;&lt;code&gt;stream-example.js&lt;/code&gt;&lt;/a&gt; for an example on how to train the network with a stream.&lt;/p&gt;
&lt;h3&gt;Initialization&lt;/h3&gt;
&lt;p&gt;To train the network using a stream you must first create the stream by calling &lt;code&gt;net.createTrainStream()&lt;/code&gt; which takes the following options:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;floodCallback()&lt;/code&gt; - the callback function to re-populate the stream. This gets called on every training iteration.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;doneTrainingCallback(info)&lt;/code&gt; - the callback function to execute when the network is done training. The &lt;code&gt;info&lt;/code&gt; param will contain a hash of information about how the training went:&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
{
  error&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0.0039139985510105032&lt;/span&gt;,  &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; training error&lt;/span&gt;
  iterations&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;406&lt;/span&gt;                &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; training iterations&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Transform&lt;/h3&gt;
&lt;p&gt;Use a &lt;a href=&quot;http://nodejs.org/api/stream.html#stream_class_stream_transform&quot; rel=&quot;nofollow&quot;&gt;Transform&lt;/a&gt; to coerce the data into the correct format. You might also use a Transform stream to normalize your data on the fly.&lt;/p&gt;

&lt;h3&gt;&lt;code&gt;likely&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;likely&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;brain/likely&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;likely&lt;/span&gt;(input, net);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Likely example see: &lt;a href=&quot;https://github.com/BrainJS/brain.js/blob/master/examples/which-letter-simple.js&quot;&gt;simple letter detection&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;toSVG&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;script src&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;../../src/utilities/svg.min.js&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;/&lt;/span&gt;script&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Renders the network topology of a feedforward network&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c1&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;result&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;).&lt;span class=&quot;pl-smi&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;brain&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;utilities&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;toSVG&lt;/span&gt;{network,options)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;toSVG example see: &lt;a href=&quot;https://github.com/BrainJS/brain.js/blob/master/examples/rendering-svg.html&quot;&gt;network rendering&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The user interface used: &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://user-images.githubusercontent.com/43925925/48969024-e526ed80-f000-11e8-85bd-e10967cfaee2.png&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/43925925/48969024-e526ed80-f000-11e8-85bd-e10967cfaee2.png&quot; alt=&quot;screenshot1&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Why different Neural Network Types?&lt;/h3&gt;
&lt;p&gt;Different neural nets do different things well. For example:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;A Feedforward Neural Network can classify simple things very well, but it has no memory of previous actions and has infinite variation of results.&lt;/li&gt;
&lt;li&gt;A Time Step Recurrent Neural Network &lt;em&gt;remembers&lt;/em&gt;, and can predict future values.&lt;/li&gt;
&lt;li&gt;A Recurrent Neural Network &lt;em&gt;remembers&lt;/em&gt;, and has a finite set of results.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Issues&lt;/h3&gt;
&lt;p&gt;If you have an issue, either a bug or a feature you think would benefit your project let us know and we will do our best.&lt;/p&gt;
&lt;p&gt;Create issues &lt;a href=&quot;https://github.com/BrainJS/brain.js/issues&quot;&gt;here&lt;/a&gt; and follow the template.&lt;/p&gt;
&lt;h3&gt;Contributors&lt;/h3&gt;
&lt;p&gt;This project exists thanks to all the people who contribute. [&lt;a href=&quot;https://github.com/BrainJS/brain.js/blob/master/CONTRIBUTING.md&quot;&gt;Contribute&lt;/a&gt;]. &lt;a href=&quot;https://github.com/BrainJS/brain.js/graphs/contributors&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/f819df246023d5d4b5826009d6b7c102d4d7a599/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f627261696e6a732f636f6e7472696275746f72732e7376673f77696474683d38393026627574746f6e3d66616c7365&quot; data-canonical-src=&quot;https://opencollective.com/brainjs/contributors.svg?width=890&amp;amp;button=false&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Backers&lt;/h3&gt;
&lt;p&gt;Thank you to all our backers! 🙏 [&lt;a href=&quot;https://opencollective.com/brainjs#backer&quot; rel=&quot;nofollow&quot;&gt;Become a backer&lt;/a&gt;]&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://opencollective.com/brainjs#backers&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/5577eede0bce74291677afafba54ac3cee67fbdd/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f627261696e6a732f6261636b6572732e7376673f77696474683d383930&quot; data-canonical-src=&quot;https://opencollective.com/brainjs/backers.svg?width=890&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Sponsors&lt;/h3&gt;
&lt;p&gt;Support this project by becoming a sponsor. Your logo will show up here with a link to your website. [&lt;a href=&quot;https://opencollective.com/brainjs#sponsor&quot; rel=&quot;nofollow&quot;&gt;Become a sponsor&lt;/a&gt;]&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://opencollective.com/brainjs/sponsor/0/website&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/63f894fbc5aa4228212007f317928bc849d59f76/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f627261696e6a732f73706f6e736f722f302f6176617461722e737667&quot; data-canonical-src=&quot;https://opencollective.com/brainjs/sponsor/0/avatar.svg&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/brainjs/sponsor/1/website&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/0d9c791359fb6574f1ffc063aa703270a02cd123/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f627261696e6a732f73706f6e736f722f312f6176617461722e737667&quot; data-canonical-src=&quot;https://opencollective.com/brainjs/sponsor/1/avatar.svg&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/brainjs/sponsor/2/website&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/faa484b356f1e8b22230f9a12468bbb4226a4c8a/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f627261696e6a732f73706f6e736f722f322f6176617461722e737667&quot; data-canonical-src=&quot;https://opencollective.com/brainjs/sponsor/2/avatar.svg&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/brainjs/sponsor/3/website&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/39920b8ef0f3762b301d5f2ce26c4c07ba6bdc13/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f627261696e6a732f73706f6e736f722f332f6176617461722e737667&quot; data-canonical-src=&quot;https://opencollective.com/brainjs/sponsor/3/avatar.svg&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/brainjs/sponsor/4/website&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/11c0af09f746726ada75a79adc717068a2faf69f/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f627261696e6a732f73706f6e736f722f342f6176617461722e737667&quot; data-canonical-src=&quot;https://opencollective.com/brainjs/sponsor/4/avatar.svg&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/brainjs/sponsor/5/website&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/bf772357581b50fddfb7be83f96fc074407a87c2/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f627261696e6a732f73706f6e736f722f352f6176617461722e737667&quot; data-canonical-src=&quot;https://opencollective.com/brainjs/sponsor/5/avatar.svg&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/brainjs/sponsor/6/website&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/3817c94551c8333eff8ca7c386cf3d336c99dc22/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f627261696e6a732f73706f6e736f722f362f6176617461722e737667&quot; data-canonical-src=&quot;https://opencollective.com/brainjs/sponsor/6/avatar.svg&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/brainjs/sponsor/7/website&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/5626bea311fc3709dc8acf1b3da4188cc3181c2a/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f627261696e6a732f73706f6e736f722f372f6176617461722e737667&quot; data-canonical-src=&quot;https://opencollective.com/brainjs/sponsor/7/avatar.svg&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/brainjs/sponsor/8/website&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/8087c386d0750a24267339971e9e39bd1b32f6df/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f627261696e6a732f73706f6e736f722f382f6176617461722e737667&quot; data-canonical-src=&quot;https://opencollective.com/brainjs/sponsor/8/avatar.svg&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/brainjs/sponsor/9/website&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/6f9b584c9cebad7db7f14160793efda3bca58f53/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f627261696e6a732f73706f6e736f722f392f6176617461722e737667&quot; data-canonical-src=&quot;https://opencollective.com/brainjs/sponsor/9/avatar.svg&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;
</description>
<pubDate>Fri, 28 Dec 2018 12:10:17 +0000</pubDate>
<dc:creator>hliyan</dc:creator>
<og:image>https://avatars0.githubusercontent.com/u/23732838?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>BrainJS/brain.js</og:title>
<og:url>https://github.com/BrainJS/brain.js</og:url>
<og:description>🤖 Neural networks in JavaScript. Contribute to BrainJS/brain.js development by creating an account on GitHub.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/BrainJS/brain.js</dc:identifier>
</item>
</channel>
</rss>