<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>RStudio becomes a public benefit corporation</title>
<link>https://blog.rstudio.com/2020/01/29/rstudio-pbc/</link>
<guid isPermaLink="true" >https://blog.rstudio.com/2020/01/29/rstudio-pbc/</guid>
<description>&lt;div class=&quot;article-meta&quot;&gt;

&lt;h3 class=&quot;author&quot;&gt;J.J. Allaire&lt;/h3&gt;
&lt;h3 class=&quot;date&quot;&gt;2020-01-29&lt;/h3&gt;

&lt;/div&gt;
&lt;p&gt;We started the RStudio project because we were excited and inspired by R. The &lt;a href=&quot;http://www.r-project.org/contributors.html&quot;&gt;creators of R&lt;/a&gt; provided a flexible and powerful foundation for statistical computing; then made it free and open so that it could be improved collaboratively and its benefits could be shared by the widest possible audience.&lt;/p&gt;
&lt;p&gt;It’s better for everyone if the tools used for research and science are free and open. Reproducibility, widespread sharing of knowledge and techniques, and the leveling of the playing field by eliminating cost barriers are but a few of the shared benefits of free software in science.&lt;/p&gt;
&lt;p&gt;RStudio’s mission is to create free and open-source software for data science, scientific research, and technical communication. To that end, we currently lead contributions to over 250 open-source projects. To support this work, RStudio also sells a variety of commercial software products that enable teams to adopt open-source data science software at scale; along with online services to make it easier to learn and use data science tools over the web.&lt;/p&gt;
&lt;p&gt;Melding the mission of creating open-source software with the imperatives of sustaining a commercial enterprise is a tricky business. It’s especially so today, as corporations are frequently forced into doing whatever it takes to sustain growth and provide returns to shareholders, even against the interests of their own customers! Users should be wary of the underlying motivations and goals of software companies, especially ones that provide the essential tools required to carry out their work.&lt;/p&gt;
&lt;p&gt;In order to truly fulfill our open-source mission, RStudio needs to be uncompromisingly run for the benefit of all stakeholders, including employees, customers, and the community at large. Additionally, RStudio needs to earn the trust of its users, not just through its actions, but also its formal corporate charter. Until recently, there was no means under US corporate law for companies to put their mission and other stakeholders on equal footing with shareholders. Fortunately, thanks to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Benefit_corporation&quot;&gt;B-Corp&lt;/a&gt; movement, we now have a tool to do so: the Public Benefit Corporation. &lt;strong&gt;Today, we are thrilled to announce that RStudio has become a Public Benefit Corporation.&lt;/strong&gt; RStudio, Inc. is now RStudio, PBC.&lt;/p&gt;
&lt;p&gt;By becoming a PBC, we have codified our open-source mission into our charter, which means that our corporate decisions must both align with this mission, as well as balance the interests of community, customers, employees, and shareholders. As a PBC, RStudio will publish an annual report that describes the public benefit we have created, along with how we seek to provide public benefits in the future. The first of these annual reports is &lt;a href=&quot;https://www.rstudio.com/about/pbc-report-2019&quot;&gt;available on our website&lt;/a&gt; today.&lt;/p&gt;
&lt;p&gt;As part of this transition, we have also been recognized as a &lt;a href=&quot;https://bcorporation.net/&quot;&gt;Certified B Corporation (B Corp)&lt;/a&gt;, joining a group of for-profit companies assessed to meet the highest standards of social and environmental performance, transparency, and accountability. These standards are measured by the non-profit B Lab’s “Impact Assessment”, a rigorous assessment of a company’s impact on its workers, customers, community, and environment. Details of this assessment can be found at: &lt;a href=&quot;https://bcorporation.net/directory/rstudio&quot;&gt;https://bcorporation.net/directory/rstudio&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;More details on our transition to Benefit Corporation are available in my &lt;a href=&quot;https://rstudio.com/slides/rstudio-pbc&quot;&gt;keynote slides&lt;/a&gt; from rstudio::conf 2020 as well as our first annual &lt;a href=&quot;https://www.rstudio.com/about/pbc-report-2019&quot;&gt;Public Benefit Report&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With this sustainable foundation and the support of our customers, employees, and the community, we look forward to making many more contributions in the years ahead.&lt;/p&gt;
&lt;img srcset=&quot;https://d33wubrfki0l68.cloudfront.net/812397d77263a46f2993d5f2a1d8b214a3f605ef/d3240/2020/01/29/rstudio-pbc/thumbnail2_hu2cb2f955d273edcb3c6da7663058911b_41359_600x0_resize_q75_box.jpg, https://d33wubrfki0l68.cloudfront.net/bd8a640df9af8a99dce3ecfa9d5e5d5b87a1b6e0/a66fb/2020/01/29/rstudio-pbc/thumbnail2.jpg 2x&quot; src=&quot;https://d33wubrfki0l68.cloudfront.net/bd8a640df9af8a99dce3ecfa9d5e5d5b87a1b6e0/a66fb/2020/01/29/rstudio-pbc/thumbnail2.jpg&quot; width=&quot;600&quot; alt=&quot;RStudio has become a Public Benefit Corporation&quot;/&gt;&lt;nav class=&quot;post-nav&quot;&gt;&amp;amp;hercon; &lt;span class=&quot;nav-next&quot;&gt;&lt;a href=&quot;https://blog.rstudio.com/2020/01/29/sparklyr-1-1/&quot; title=&quot;Next post (older)&quot;&gt;sparklyr 1.1: Foundations, Books, Lakes and Barriers →&lt;/a&gt;&lt;/span&gt;&lt;/nav&gt;&lt;aside readability=&quot;2.390977443609&quot;&gt;
&lt;div class=&quot;block&quot; readability=&quot;5.6976744186047&quot;&gt;
&lt;p&gt;You may subscribe by Email or the &lt;a href=&quot;https://blog.rstudio.com/index.xml&quot;&gt;RSS feed&lt;/a&gt;.&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;block&quot; readability=&quot;10.584905660377&quot;&gt;
&lt;h3&gt;News &amp;amp; Events&lt;/h3&gt;
&lt;p&gt;Workshop: Machine Learning with Max Kuhn - November 18th - 19th - London, UK &lt;a href=&quot;https://cvent.me/bKoXk&quot;&gt;↪&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;rstudio::conf 2020 - January 27th - 30th - San Francisco, CA &lt;a href=&quot;https://web.cvent.com/event/36ebe042-0113-44f1-8e36-b9bc5d0733bf/summary?RefId=conference&amp;amp;utm_campaign=Site%20Promo&amp;amp;utm_medium=Ste&amp;amp;utm_source=ConfPage&quot;&gt;↪&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;block hide-small&quot;&gt;
&lt;h3&gt;Categories&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&quot;block hide-small&quot;&gt;
&lt;h3&gt;About RStudio&lt;/h3&gt;
&lt;/div&gt;
&lt;/aside&gt;</description>
<pubDate>Wed, 29 Jan 2020 17:47:42 +0000</pubDate>
<dc:creator>hadley</dc:creator>
<og:image>https://blog.rstudio.com/images/dev-blog-logo.png</og:image>
<dc:language>en-us</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.rstudio.com/2020/01/29/rstudio-pbc/</dc:identifier>
</item>
<item>
<title>Building a Simple VPN with WireGuard with a Raspberry Pi as Server</title>
<link>https://snikt.net/blog/2020/01/29/building-a-simple-vpn-with-wireguard-with-a-raspberry-pi-as-server/</link>
<guid isPermaLink="true" >https://snikt.net/blog/2020/01/29/building-a-simple-vpn-with-wireguard-with-a-raspberry-pi-as-server/</guid>
<description>&lt;p&gt;Now that wireguard will be part of the upcoming Linux 5.6 Kernel it’s time to see how to best integrate it with my &lt;a href=&quot;https://snikt.net/blog/2019/06/22/building-an-lte-access-point-with-a-raspberry-pi/&quot;&gt;Raspberry Pi based LTE-Router/Access Point Setup&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Raspberry Pi 3 with a LTE hat, using a public IP address. This will be the VPN server (called &lt;em&gt;edgewalker&lt;/em&gt; in this post)&lt;/li&gt;
&lt;li&gt;An Android Phone that should use the VPN for all communication when connected&lt;/li&gt;
&lt;li&gt;An Linux Laptop that should use the VPN only accessing network services that are exposed to the VPN&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Each device connected to the VPN should be able to connect to all other devices, e.g., my phone should be able to connect to a webserver running on the laptop as long as both are part of the VPN network. If setup is easy enough I’m actually thinking about adding my (Ethernet-connected) Desktop to the VPN too.&lt;/p&gt;
&lt;p&gt;Given that wired and wireless connections seem to become more insecure over time (&lt;a href=&quot;https://en.wikipedia.org/wiki/Tailored_Access_Operations&quot;&gt;Tailored Access Operations&lt;/a&gt;, &lt;a href=&quot;https://www.krackattacks.com/&quot;&gt;KRACK attacks against WPA2&lt;/a&gt; or &lt;a href=&quot;https://arstechnica.com/information-technology/2019/04/serious-flaws-leave-wpa3-vulnerable-to-hacks-that-steal-wi-fi-passwords/&quot;&gt;Dragonblood attacks against WPA3&lt;/a&gt;) I am seriously considering using wireguard for all my devices, regardless in which environment they are running.&lt;/p&gt;

&lt;p&gt;WireGuard provides &lt;a href=&quot;https://www.wireguard.com/install/&quot;&gt;pre-compiled software packages&lt;/a&gt; for most Linux Distributions, Windows and MacOS. Android and iOS applications are provided through the different app stores.&lt;/p&gt;
&lt;p&gt;I am using the current Fedora Linux 31 and failed reading the fine manual. I searched for &lt;code&gt;wireguard-tools&lt;/code&gt; packages, found and installed them. And then was wondering why nothing was working. Further investigation showed that I did not have the &lt;code&gt;wireguard-dkms&lt;/code&gt; package installed (containing the network driver) and this package was not contained within my distribution repository.&lt;/p&gt;
&lt;p&gt;Would I have read the manual I would have done the right steps:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;div class=&quot;chroma&quot;&gt;
&lt;table class=&quot;lntable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lntd&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;lnt&quot;&gt;1
&lt;/span&gt;&lt;span class=&quot;lnt&quot;&gt;2
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;lntd&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ sudo dnf copr &lt;span class=&quot;nb&quot;&gt;enable&lt;/span&gt; jdoss/wireguard
$ sudo dnf install wireguard-dkms wireguard-tools&lt;/code&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;On the Raspberry Pi I am using Raspbian Buster, this distribution already included the &lt;code&gt;wireguard&lt;/code&gt; package, I installed it with:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;div class=&quot;chroma&quot;&gt;
&lt;table class=&quot;lntable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lntd&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;lnt&quot;&gt;1
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;lntd&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ sudo apt install wireguard&lt;/code&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;On the Android Phone, I used the Google App Store to install the &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.wireguard.android&quot;&gt;WireGuard VPN Application&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Wireguard utilizes a simple private/public key scheme to authenticate VPN peers. You can easily create VPN keys with the following command:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;div class=&quot;chroma&quot;&gt;
&lt;table class=&quot;lntable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lntd&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;lnt&quot;&gt;1
&lt;/span&gt;&lt;span class=&quot;lnt&quot;&gt;2
&lt;/span&gt;&lt;span class=&quot;lnt&quot;&gt;3
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;lntd&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ wg genkey &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; tee wg-laptop-private.key &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  wg pubkey &amp;gt; wg-laptop-public.key
$ wg genkey &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; tee wg-server-private.key &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  wg pubkey &amp;gt; wg-server-public.key
$ wg genkey &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; tee wg-mobile-private.key &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  wg pubkey &amp;gt; wg-mobile-public.key&lt;/code&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This gives us three keypairs (and thus six files at all). We will not refer to those files within the configuration files but copy their content (which is just a single line which is the base64-encoded key) in the configuration files.&lt;/p&gt;

&lt;p&gt;Configuration was quite easy, I just created the following file at &lt;code&gt;/etc/wireguard/wg0.conf&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;div class=&quot;chroma&quot;&gt;
&lt;table class=&quot;lntable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lntd&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-ini&quot; data-lang=&quot;ini&quot;&gt;&lt;span class=&quot;lnt&quot;&gt; 1
&lt;/span&gt;&lt;span class=&quot;lnt&quot;&gt; 2
&lt;/span&gt;&lt;span class=&quot;lnt&quot;&gt; 3
&lt;/span&gt;&lt;span class=&quot;lnt&quot;&gt; 4
&lt;/span&gt;&lt;span class=&quot;lnt&quot;&gt; 5
&lt;/span&gt;&lt;span class=&quot;lnt&quot;&gt; 6
&lt;/span&gt;&lt;span class=&quot;lnt&quot;&gt; 7
&lt;/span&gt;&lt;span class=&quot;lnt&quot;&gt; 8
&lt;/span&gt;&lt;span class=&quot;lnt&quot;&gt; 9
&lt;/span&gt;&lt;span class=&quot;lnt&quot;&gt;10
&lt;/span&gt;&lt;span class=&quot;lnt&quot;&gt;11
&lt;/span&gt;&lt;span class=&quot;lnt&quot;&gt;12
&lt;/span&gt;&lt;span class=&quot;lnt&quot;&gt;13
&lt;/span&gt;&lt;span class=&quot;lnt&quot;&gt;14
&lt;/span&gt;&lt;span class=&quot;lnt&quot;&gt;15
&lt;/span&gt;&lt;span class=&quot;lnt&quot;&gt;16
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;lntd&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-ini&quot; data-lang=&quot;ini&quot;&gt;&lt;span class=&quot;k&quot;&gt;[Interface]&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;10.200.200.1/24&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;ListenPort&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;51820&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;PrivateKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;copy private key from wg-server-private.key&amp;gt;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;PostUp&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;iptables -A FORWARD -i %i -j ACCEPT; iptables -t nat -A POSTROUTING -o wwan0 -j MASQUERADE&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;PostDown&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;iptables -D FORWARD -i %i -j ACCEPT; iptables -t nat -D POSTROUTING -o wwan0 -j MASQUERADE&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;[Peer]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# laptop&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;PublicKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;copy public key from wg-laptop-public.key&amp;gt;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;AllowedIPs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;10.200.200.2/32&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;[Peer]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# mobile phone&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;PublicKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;copy public key from wg-mobile-public.key&amp;gt;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;AllowedIPs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;10.200.200.3/32&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Some notes:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Please fill in the values from the created key files&lt;/li&gt;
&lt;li&gt;I am creating a VPN network that uses &lt;code&gt;10.200.200.0/24&lt;/code&gt; for its internal IP range&lt;/li&gt;
&lt;li&gt;my server uses &lt;code&gt;wwan0&lt;/code&gt; as external network interface in the &lt;code&gt;PostUp&lt;/code&gt;/&lt;code&gt;PostDown&lt;/code&gt;-Commands, please adapt that to use your network-facing interface (might be eth0)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;It’s easy to bring the VPN network up with the following command:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;div class=&quot;chroma&quot;&gt;
&lt;table class=&quot;lntable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lntd&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;lnt&quot;&gt;1
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;lntd&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ sudo wg-quick up wg0&lt;/code&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;One small thing: I am using &lt;code&gt;dnsmasq&lt;/code&gt; as DNS server and have bound it to the network interface &lt;code&gt;br0&lt;/code&gt;. This will be too restrictive for serving DNS requests from connected VPN devices so I added the &lt;code&gt;wg0&lt;/code&gt; wireguard Ethernet devices to the allowed device list. In dnsmasq you do this by adding a new config line to &lt;code&gt;/etc/dnsmasq.conf&lt;/code&gt; with the network interface, e.g.:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;div class=&quot;chroma&quot;&gt;
&lt;table class=&quot;lntable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lntd&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-conf&quot; data-lang=&quot;conf&quot;&gt;&lt;span class=&quot;lnt&quot;&gt;1
&lt;/span&gt;&lt;span class=&quot;lnt&quot;&gt;2
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;lntd&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-conf&quot; data-lang=&quot;conf&quot;&gt;interface=br0
interface=wg0&lt;/code&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In addition I’ve added some iptable rules to allow traffic to the listening UDP port (51280):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;div class=&quot;chroma&quot;&gt;
&lt;table class=&quot;lntable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lntd&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;lnt&quot;&gt;1
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;lntd&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ sudo iptables -I INPUT -p udp --dport &lt;span class=&quot;m&quot;&gt;51820&lt;/span&gt; -j ACCEPT&lt;/code&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now that everything works, we can utilize systemd to automatically start the VPN tunnel:&lt;/p&gt;


&lt;p&gt;Mostly the Laptop setup consists of creating a matching configuration file in &lt;code&gt;/etc/wireguard/wg0.conf&lt;/code&gt; on the Laptop:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;div class=&quot;chroma&quot;&gt;
&lt;table class=&quot;lntable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lntd&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-ini&quot; data-lang=&quot;ini&quot;&gt;&lt;span class=&quot;lnt&quot;&gt;1
&lt;/span&gt;&lt;span class=&quot;lnt&quot;&gt;2
&lt;/span&gt;&lt;span class=&quot;lnt&quot;&gt;3
&lt;/span&gt;&lt;span class=&quot;lnt&quot;&gt;4
&lt;/span&gt;&lt;span class=&quot;lnt&quot;&gt;5
&lt;/span&gt;&lt;span class=&quot;lnt&quot;&gt;6
&lt;/span&gt;&lt;span class=&quot;lnt&quot;&gt;7
&lt;/span&gt;&lt;span class=&quot;lnt&quot;&gt;8
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;lntd&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-ini&quot; data-lang=&quot;ini&quot;&gt;&lt;span class=&quot;k&quot;&gt;[Interface]&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;10.200.200.2/24&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;PrivateKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;copy private key from wg-laptop-private.key&amp;gt;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;[Peer]&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;PublicKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;copy public key from wg-server-public.key&amp;gt;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;AllowedIPs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;10.200.200.0/24&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Endpoint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;edgewalker:51820&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Some notes:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;edgewalker should be the public IP-address or public hostname of the VPN server&lt;/li&gt;
&lt;li&gt;By setting &lt;code&gt;AllowedIPs&lt;/code&gt; to &lt;code&gt;10.200.200.0/24&lt;/code&gt; we are only using the VPN for accessing the internal VPN network. Traffic to all other IPs/servers will still use the “normal” public internet. Also the pre-configured DNS-Server on the Laptop will be used.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;We can use the same &lt;code&gt;wg-quick&lt;/code&gt; and &lt;code&gt;systemd&lt;/code&gt; commands for testing as well as for automatic connection setup:&lt;/p&gt;


&lt;p&gt;We use a very similar configuration file for our Android phone. We prepare the following file (let’s call it &lt;code&gt;mobile.conf&lt;/code&gt;) on the server through ssh:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;div class=&quot;chroma&quot;&gt;
&lt;table class=&quot;lntable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lntd&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-ini&quot; data-lang=&quot;ini&quot;&gt;&lt;span class=&quot;lnt&quot;&gt;1
&lt;/span&gt;&lt;span class=&quot;lnt&quot;&gt;2
&lt;/span&gt;&lt;span class=&quot;lnt&quot;&gt;3
&lt;/span&gt;&lt;span class=&quot;lnt&quot;&gt;4
&lt;/span&gt;&lt;span class=&quot;lnt&quot;&gt;5
&lt;/span&gt;&lt;span class=&quot;lnt&quot;&gt;6
&lt;/span&gt;&lt;span class=&quot;lnt&quot;&gt;7
&lt;/span&gt;&lt;span class=&quot;lnt&quot;&gt;8
&lt;/span&gt;&lt;span class=&quot;lnt&quot;&gt;9
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;lntd&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-ini&quot; data-lang=&quot;ini&quot;&gt;&lt;span class=&quot;k&quot;&gt;[Interface]&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;10.200.200.3/24&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;PrivateKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;copy private key from wg-mobile-private.key&amp;gt;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;DNS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;10.200.200.1
&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;        &lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;[Peer]&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;PublicKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;copy public key from wg-server-public.key&amp;gt;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;AllowedIPs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0.0.0.0/0&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Endpoint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;edgewalker:51820&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In contrast to the laptop setup we are forcing the mobile device to use our VPN server as DNS server (that’s the &lt;code&gt;DNS&lt;/code&gt; setting) as well as using the newly VPN tunnel for all traffic (by using &lt;code&gt;0.0.0.0/0&lt;/code&gt; as wildcard for &lt;code&gt;AllowedIPs&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;It would be tedious to copy this configuration file onto a mobile device, so we convert it into a QR code:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;div class=&quot;chroma&quot;&gt;
&lt;table class=&quot;lntable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lntd&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;lnt&quot;&gt;1
&lt;/span&gt;&lt;span class=&quot;lnt&quot;&gt;2
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;lntd&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ sudo apt install qrencode
$ qrencode -t ansiutf8 &amp;lt; mobile.conf&lt;/code&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This outputs an ASCII QR-Code on the console. This code can be scanned from within the Android VPN application and automatically setups the VPN tunnel.&lt;/p&gt;

&lt;p&gt;WireGuard’s configuration is just magic when compared to similar OpenVPN setups..&lt;/p&gt;
</description>
<pubDate>Wed, 29 Jan 2020 17:47:30 +0000</pubDate>
<dc:creator>kingsomething</dc:creator>
<og:title>Building a simple VPN with WireGuard with a Raspberry Pi as Server</og:title>
<og:description>Andreas Happe sometimes blogs about developmen, life or security.</og:description>
<og:type>website</og:type>
<og:url>https://snikt.net/blog/2020/01/29/building-a-simple-vpn-with-wireguard-with-a-raspberry-pi-as-server/</og:url>
<dc:format>text/html</dc:format>
<dc:identifier>https://snikt.net/blog/2020/01/29/building-a-simple-vpn-with-wireguard-with-a-raspberry-pi-as-server/</dc:identifier>
</item>
<item>
<title>Building all of our new mobile apps using React Native</title>
<link>https://engineering.shopify.com/blogs/engineering/react-native-future-mobile-shopify</link>
<guid isPermaLink="true" >https://engineering.shopify.com/blogs/engineering/react-native-future-mobile-shopify</guid>
<description>&lt;p&gt;After years of native mobile development, we’ve decided to go full steam ahead building all of our new mobile apps using React Native. As I’ll explain, that decision doesn’t come lightly.&lt;/p&gt;
&lt;p&gt;Each quarter, the majority of buyers purchase on mobile (with 71% of our buyers purchasing on mobile in Q3 of last year). Black Friday and Cyber Monday (together, BFCM) are the busiest time of year for our merchants, and buying activity during those days is a bellwether. During this year’s BFCM, Shopify merchants saw another 3% increase in purchases on &lt;a href=&quot;https://news.shopify.com/shopify-merchants-break-records-with-29-billion-in-worldwide-sales-over-black-fridaycyber-monday-weekend&quot; target=&quot;_blank&quot; title=&quot;Shopify merchants break records with $2.9+ billion in worldwide sales over Black Friday/Cyber Monday weekend&quot; rel=&quot;noopener noreferrer&quot;&gt;mobile, an average of 69% of sales&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So why the switch to React Native? And why now? How does this fit in with our native mobile development? It’s a complicated answer that’s best served with a little background.&lt;/p&gt;

&lt;p&gt;We have an engineering culture at Shopify of making specific early technology bets that help us move fast.&lt;/p&gt;
&lt;p&gt;On the whole, we prefer to have few technologies as a foundation for engineering. This provides us multiple points of leverage:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;we build &lt;em&gt;extremely&lt;/em&gt; specific expertise in a small set of deep technologies (we often become core contributors)&lt;/li&gt;
&lt;li&gt;every technology choice has quirks, but we learn them intimately&lt;/li&gt;
&lt;li&gt;those outside of the initial team contribute, transfer and maintain code written by others&lt;/li&gt;
&lt;li&gt;new people are onboarded more quickly.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;At the same time, there are always new technologies emerging that provide us with an opportunity for a step change in productivity or capability. We experiment a lot for the opportunity to unlock improvements that are an order of magnitude improvement—but ultimately, we adopt few of these for our core engineering.&lt;/p&gt;
&lt;p&gt;When we do adopt these early languages or frameworks, we make a calculated bet. And instead of shying away from the risk, we meticulously research, explore and evaluate such risks based on our unique set of conditions. As is often within risky areas, the unexplored opportunities are hidden. We instead think about how we can mitigate that risk:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;what if a technology stops being supported by the core team?&lt;/li&gt;
&lt;li&gt;what if we run into a bug we can’t fix?&lt;/li&gt;
&lt;li&gt;what if the product goes in a direction against our interests?&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Ruby on Rails was a nascent and obscure framework when Tobi (our CEO) first got involved as a &lt;a href=&quot;https://github.com/tobi&quot; target=&quot;_blank&quot; title=&quot;Tobi on GitHub&quot; rel=&quot;noopener noreferrer&quot;&gt;core contributor&lt;/a&gt; in 2004. For years, Ruby on Rails has been seen as a non-serious, &lt;a href=&quot;https://m.signalvnoise.com/ruby-has-been-fast-enough-for-13-years/&quot; target=&quot;_blank&quot; title=&quot;Ruby has been fast enough for 13 years - Signal vs. Noise&quot; rel=&quot;noopener noreferrer&quot;&gt;non-performant&lt;/a&gt; language choice. But that early bet gave Shopify the momentum to outperform the competition even though it was not a popular technology choice. By using Ruby on Rails, the team was able to build faster and attract a different set of talent by using something more modern and with a higher level of abstraction than traditional programming languages and frameworks. &lt;a href=&quot;http://www.paulgraham.com/avg.html&quot; target=&quot;_blank&quot; title=&quot;Beating the Averages - PaulGraham.com&quot; rel=&quot;noopener noreferrer&quot;&gt;Paul Graham talks about his decision to use Lisp in building Viaweb to similar effect&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/mhartl/status/1179561691857616896&quot; target=&quot;_blank&quot; title=&quot;Michael Hartl on Twitter&quot; rel=&quot;noopener noreferrer&quot;&gt;6 of the 10 most valuable Y Combinator companies today all use Ruby on Rails (even though again, it still remains largely unpopular)&lt;/a&gt;. As a contrast, none of the Top 10 most valuable Y Combinator companies use Java; largely considered the battle tested enterprise language.&lt;/p&gt;
&lt;p&gt;Similarly two years ago, Shopify decided to make the jump to &lt;a href=&quot;https://engineering.shopify.com/blogs/engineering/shopify-infrastructure-collaboration-with-google&quot; target=&quot;_blank&quot; title=&quot;Shopify’s Infrastructure Collaboration with Google&quot; rel=&quot;noopener noreferrer&quot;&gt;Google Cloud&lt;/a&gt;. Again, a scary proposition for the 2nd largest US Retail eCommerce site in 2019—to do a cloud migration away from our own data centers, but to also pick an early cloud contender. We saw the technology arc of value creation moving us to focusing on what we’re good at—enabling entrepreneurship and letting others (in this case Google Cloud) focus on the undifferentiated heavy lifting of maintaining physical hardware, power, security, the operating system updates, etc.&lt;/p&gt;
&lt;h2&gt;What is React Native?&lt;/h2&gt;
&lt;p&gt;In 2015, &lt;a href=&quot;https://www.youtube.com/watch?v=KVZ-P-ZI6W4&quot; target=&quot;_blank&quot; title=&quot;React.js Conf 2015 Keynote - Introducing React Native&quot; rel=&quot;noopener noreferrer&quot;&gt;Facebook announced&lt;/a&gt; and open sourced &lt;a href=&quot;https://facebook.github.io/react-native/&quot; target=&quot;_blank&quot; title=&quot;React Native&quot; rel=&quot;noopener noreferrer&quot;&gt;React Native&lt;/a&gt;; it was already being used internally for their mobile engineering. React Native is a framework for building native mobile apps using &lt;a href=&quot;https://reactjs.org/&quot; target=&quot;_blank&quot; title=&quot;ReactJS&quot; rel=&quot;noopener noreferrer&quot;&gt;React&lt;/a&gt;. This means you can use a best-in-class JavaScript library (React) to build your native mobile user interfaces.&lt;/p&gt;
&lt;p&gt;At Shopify, the idea had its skeptics at the time (and still does), but many saw its promise. At the company’s next &lt;a href=&quot;https://twitter.com/ShannonKarleen/status/1204881060213002240?s=20&quot; target=&quot;_blank&quot; title=&quot;Shannon Gallagher on Twitter&quot; rel=&quot;noopener noreferrer&quot;&gt;Hackdays&lt;/a&gt; the entire company spent time on React Native. While the early team saw many benefits, they decided that we couldn’t ship an app we’d be proud of using React Native in 2015. For the most part, this had to do with performance and the absence of first-class Android support. What we did learn was that we liked the &lt;a href=&quot;https://en.wikipedia.org/wiki/Reactive_programming&quot; target=&quot;_blank&quot; title=&quot;Reactive Programming - Wikipedia&quot; rel=&quot;noopener noreferrer&quot;&gt;Reactive programming&lt;/a&gt; model and &lt;a href=&quot;https://help.shopify.com/en/api/getting-started/shopify-and-graphql/graphql-benefits&quot; title=&quot;GraphQL Benefits&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;GraphQL&lt;/a&gt;. Also, we built and open-sourced a reactive &lt;a href=&quot;https://github.com/Shopify/FunctionalTableData&quot; target=&quot;_blank&quot; title=&quot;FunctionalTableData on GitHub&quot; rel=&quot;noopener noreferrer&quot;&gt;functional rendere&lt;/a&gt;r for iOS after working with React Native. We adopted these technologies in 2015 for our native mobile stack, but not React Native for mobile development en masse. &lt;a href=&quot;https://www.theglobeandmail.com/report-on-business/how-shopify-finally-got-smart-about-mobile/article33184093/&quot; target=&quot;_blank&quot; title=&quot;Shopify Grows Up&quot; rel=&quot;noopener noreferrer&quot;&gt;The Globe and Mail documented our aspirations&lt;/a&gt; in a comprehensive story about the first version of our mobile apps.&lt;/p&gt;
&lt;p&gt;Until now, the standard for all mobile development at Shopify was native mobile development. We built &lt;a href=&quot;https://engineering.shopify.com/blogs/engineering/tagged/mobile-tooling&quot; target=&quot;_blank&quot; title=&quot;Mobile Tooling on Shopify Engineering&quot; rel=&quot;noopener noreferrer&quot;&gt;mobile tooling and foundations&lt;/a&gt; teams focused on iOS and Android helping accelerate our development efforts. While these teams and the resulting applications were all successful, there was a suspicion that we could be more effective as a team if we could:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;bring the power of JavaScript and the web to mobile&lt;/li&gt;
&lt;li&gt;adopt a reactive programming model across all client-side applications&lt;/li&gt;
&lt;li&gt;consolidate our iOS and Android development onto a single stack.&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;How React Native Works&lt;/h3&gt;
&lt;p&gt;React Native provides a way to build native cross platform mobile apps using JavaScript. React Native is similar to React in that it allows developers to create declarative user interfaces in JavaScript, for which it internally creates a hierarchy tree of UI elements or in ReactJS terminology a virtual DOM. Whereas the output of ReactJS targets a browser, React Native translates the virtual DOM into mobile native views using platform native bindings that interface with application logic in JavaScript. For our purposes, the target platforms are Android and iOS, but community driven effort have brought React Native to other platforms such as Windows, macOS and Apple tvOS.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;ReactJS targets a browser, whereas React Native can can target mobile APIs.&quot; src=&quot;https://cdn.shopify.com/s/files/1/0779/4361/files/React_Native_Blog_Post_2.jpg?v=1580316281&quot;/&gt;&lt;/p&gt;

&lt;div&gt;&lt;em&gt;ReactJS targets a browser, whereas React Native can target mobile APIs.&lt;/em&gt;&lt;/div&gt;
&lt;h3&gt;When Will We Not Default to Using React Native?&lt;/h3&gt;
&lt;p&gt;There are situations where React Native would not be the default option for building a mobile app at Shopify. For example, if we have a requirement of:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;deploying on older hardware (CPU &amp;lt;1.5GHz)&lt;/li&gt;
&lt;li&gt;extensive processing&lt;/li&gt;
&lt;li&gt;ultra-high performance&lt;/li&gt;
&lt;li&gt;many background threads.&lt;/li&gt;
&lt;/ul&gt;
Reminder: Low-level libraries including many open sourced SDKs will remain purely native. And we can always create our own native modules when we need to be close to the metal.

&lt;h3&gt;Why Move to React Native Now?&lt;/h3&gt;
&lt;p&gt;There were 3 main reasons now is a great time to take this stance:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;we learned from our acquisition of Tictail (a mobile first company that focused 100% on React Native) in 2018 how far React Native has come and made 3 deep product investments in 2019&lt;/li&gt;
&lt;li&gt;Shopify uses React extensively on the web and that know-how is now transferable to mobile&lt;/li&gt;
&lt;li&gt;we see the performance curve bending upwards (think what’s now possible in Google Docs vs. desktop Microsoft Office) and we can long-term invest in React Native like we do in Ruby, Rails, Kubernetes and Rich Media.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We have many mobile surfaces at Shopify for buyers and merchants to interact, both over the web and with our mobile apps. We spent time over the last year experimenting with React Native with three separate teams over three apps: Arrive, Point of Sale, and Compass.&lt;/p&gt;
&lt;p&gt;From our experiments we learned that:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;in rewriting the Arrive app in React Native, the team felt that they were twice as productive than using native development—even just on one mobile platform&lt;/li&gt;
&lt;li&gt;testing our Point of Sale app on low-power configurations of Android hardware let us set a lower CPU threshold than previously imagined (1.5GHz vs. 2GHz)&lt;/li&gt;
&lt;li&gt;we estimated ~80% code sharing between iOS and Android, and were surprised by the extremely high-levels in practice—95% (Arrive) and 99% (Compass)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;As an aside, even though we’re making the decision to build all new apps using React Native, that doesn’t mean we’ll automatically start rewriting our old apps in React Native.&lt;/p&gt;
&lt;h2&gt;Arrive&lt;/h2&gt;
&lt;p&gt;At the end of 2018, we decided to rewrite one of our most popular consumer apps, &lt;a href=&quot;https://tryarrive.com/&quot; target=&quot;_blank&quot; title=&quot;Arrive by Shopify&quot; rel=&quot;noopener noreferrer&quot;&gt;Arrive&lt;/a&gt; in React Native. Arrive is no slouch, it’s a highly rated, high performing app that has millions of downloads on iOS. It was a good candidate because we didn’t have an Android version. Our efforts would help us reach all of the Android users who were clamoring for Arrive. It’s now React Native on both iOS and Android and shares 95% of the same code. We’ll do a deep dive into Arrive in a future blog post.&lt;/p&gt;
&lt;p&gt;So far this rewrite resulted in:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;less crashes on iOS than our native iOS app&lt;/li&gt;
&lt;li&gt;an Android version launched&lt;/li&gt;
&lt;li&gt;team composed of mobile + non-mobile developers.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The team also came up with this cool way to instantly test work-in-progress pull requests. You simply scan a QR code from an automated Github comment on your phone and the JavaScript bundle is updated in your app and you’re now running the latest code from that pull request. JML, &lt;a href=&quot;https://twitter.com/jmwind/status/1185268708383645698?s=20&quot; target=&quot;_blank&quot; title=&quot;JML on Twitter&quot; rel=&quot;noopener noreferrer&quot;&gt;our CTO, shared the process on Twitter recently&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Point of Sale&lt;/h2&gt;
&lt;p&gt;At the beginning of 2019, we did a 6-week experiment on our flagship &lt;a href=&quot;https://www.shopify.ca/pos&quot; target=&quot;_blank&quot; title=&quot;Shopify POS&quot; rel=&quot;noopener noreferrer&quot;&gt;Point of Sale (POS) app&lt;/a&gt; to see if it would be a good candidate for a rewrite in React Native. We learned a lot, including that our retail merchants expect almost 2x the responsiveness in our POS due to the muscle memory of using our app while also talking to customers.&lt;/p&gt;
&lt;p&gt;In order to best serve our retail merchants and learn about React Native in a physical retail setting, we decided to build out the new POS natively for iOS and use React Native for Android.&lt;/p&gt;
&lt;p&gt;We went ahead with 2 teams for the following reasons:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;we already had a team ramped up with iOS expertise, including many of the folks that built the original POS apps&lt;/li&gt;
&lt;li&gt;we wanted to be able to benchmark our React Native engineering velocity as well as app performance against the gold standard which is native iOS&lt;/li&gt;
&lt;li&gt;to meet the high performance requirements of our merchants, we felt that we’d need all of the &lt;a href=&quot;https://github.com/react-native-community/discussions-and-proposals/issues/4&quot; target=&quot;_blank&quot; title=&quot;React Native Fabric (UI-Layer Re-architecture) on GitHub&quot; rel=&quot;noopener noreferrer&quot;&gt;Facebook re-architecture updates to React Native&lt;/a&gt; before launch (as it turns out, they weren’t critical to our performance use cases). Having two teams on two platforms, de-risked our ability to launch.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;We announced a complete rewrite of POS at &lt;a href=&quot;https://www.youtube.com/watch?v=hA_LObIJeiQ&quot; target=&quot;_blank&quot; title=&quot;Shopify Unite 2019&quot; rel=&quot;noopener noreferrer&quot;&gt;Unite 2019&lt;/a&gt;. Look for both the native iOS and React Native Android apps to launch in 2020!&lt;/p&gt;
&lt;h2&gt;Compass&lt;/h2&gt;
&lt;p&gt;The Start team at Shopify is tasked with helping folks new to entrepreneurship. Before the company wide decision to write all mobile apps in React Native came about, the team did a deep dive into Native, &lt;a href=&quot;https://flutter.dev/&quot; target=&quot;_blank&quot; title=&quot;Flutter&quot; rel=&quot;noopener noreferrer&quot;&gt;Flutter&lt;/a&gt; and React Native as possible technology choices. They chose React Native and now have &lt;a href=&quot;https://apps.apple.com/us/app/compass-your-store-guide/id1487824045?ls=1&quot; target=&quot;_blank&quot; title=&quot;Compass on iOS&quot; rel=&quot;noopener noreferrer&quot;&gt;iOS&lt;/a&gt; and &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.shopify.startcompass&amp;amp;amp;hl=en&quot; target=&quot;_blank&quot; title=&quot;Compass on Android&quot; rel=&quot;noopener noreferrer&quot;&gt;Android&lt;/a&gt; apps (in beta) live in the app stores.&lt;/p&gt;
&lt;p&gt;The first versions of Compass (both iOS and Android) were launched within 3 months with ~99% of the code shared between iOS and Android.&lt;/p&gt;

&lt;p&gt;We have lots in store for 2020.&lt;/p&gt;&lt;p&gt;Will we rewrite our native apps? &lt;em&gt;No&lt;/em&gt;. That’s a decision each app team makes independently&lt;/p&gt;
&lt;p&gt;Will we continue to hire native engineers? Yes, &lt;em&gt;LOTS&lt;/em&gt;!&lt;/p&gt;
&lt;p&gt;We want to contribute to core React Native, build platform specific components, and continue to understand the subtleness of each of the platforms. This requires deep native expertise. Does this sound like you?&lt;/p&gt;

&lt;p&gt;We believe that building software is a team sport. We have a commitment to the open web, open source and open standards.&lt;/p&gt;
&lt;p&gt;We’re sponsoring &lt;a href=&quot;https://swmansion.com/&quot; target=&quot;_blank&quot; title=&quot;Software Mansion&quot; rel=&quot;noopener noreferrer&quot;&gt;Software Mansion&lt;/a&gt; and &lt;a href=&quot;https://github.com/kmagiera&quot; target=&quot;_blank&quot; title=&quot;Krzysztof Magiera on GitHub&quot; rel=&quot;noopener noreferrer&quot;&gt;Krzysztof Magiera&lt;/a&gt; (co-founder of React Native for Android) in their open source efforts around React Native.&lt;/p&gt;
&lt;p&gt;We’re working with &lt;a href=&quot;https://github.com/wcandillon&quot; target=&quot;_blank&quot; title=&quot;William Candillon on GitHub&quot; rel=&quot;noopener noreferrer&quot;&gt;William Candillon&lt;/a&gt; (host of &lt;a href=&quot;https://www.youtube.com/user/wcandill&quot; target=&quot;_blank&quot; title=&quot;Can it be done in React Native&quot; rel=&quot;noopener noreferrer&quot;&gt;Can It Be Done in React Native&lt;/a&gt;) for architecture reviews and performance work.&lt;/p&gt;
&lt;p&gt;We’ll be partnering closely with the React Native team at Facebook on automation, 3rd party libraries and stewardship of some modules via &lt;a href=&quot;https://github.com/facebook/react-native/issues/23313&quot; target=&quot;_blank&quot; title=&quot;Lean Core&quot; rel=&quot;noopener noreferrer&quot;&gt;Lean Core&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We are working with &lt;a href=&quot;https://discordapp.com/&quot; target=&quot;_blank&quot; title=&quot;Discord&quot; rel=&quot;noopener noreferrer&quot;&gt;Discord&lt;/a&gt; to accelerate the open sourcing of &lt;a href=&quot;https://blog.discordapp.com/how-discord-achieves-native-ios-performance-with-react-native-390c84dcd502&quot; target=&quot;_blank&quot; title=&quot;How Discord achieves native iOS performance with React Native&quot; rel=&quot;noopener noreferrer&quot;&gt;FastList for React Native&lt;/a&gt; (a library which only renders list items that are in the viewport) and optimizing for Android.&lt;/p&gt;

&lt;p&gt;When you make a bet and go deep into a technology, you want to gain maximum leverage from that choice. In order for us to build fast and get the most leverage, we have two types of teams that help the rest of Shopify build quickly. The first is a &lt;strong&gt;tooling&lt;/strong&gt; team that helps with engineering setup, integration and deployment. The second is a &lt;strong&gt;foundations&lt;/strong&gt; team that focuses on SDKs, code reuse and open source. We’ve already begun spinning up both of these teams in 2020 to focus on React Native.&lt;/p&gt;
&lt;p&gt;Our popular &lt;a href=&quot;https://www.shopify.ca/ping&quot; target=&quot;_blank&quot; title=&quot;Shopify Ping&quot; rel=&quot;noopener noreferrer&quot;&gt;Shopify Ping app&lt;/a&gt; which has enabled hundreds of thousands of customer conversations is currently only iOS. In 2020, we’ll be building the Android version using React Native out of our San Francisco office and &lt;a href=&quot;https://www.shopify.com/careers/react-native-engineer-c30764?itcat=EngBlog&amp;amp;itterm=Post&quot; target=&quot;_blank&quot; title=&quot;React Native Engineering - Shopify Careers&quot; rel=&quot;noopener noreferrer&quot;&gt;we’re hiring&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;In 2019, Twitter released their desktop and mobile web apps using something called &lt;a href=&quot;https://github.com/necolas/react-native-web&quot; target=&quot;_blank&quot; title=&quot;React Native Web on GitHub&quot; rel=&quot;noopener noreferrer&quot;&gt;React Native Web&lt;/a&gt;. While this might seem confusing, it allows you to use the same React Native stack for your web app as well. Facebook promptly hired &lt;a href=&quot;https://github.com/necolas&quot; target=&quot;_blank&quot; title=&quot;Nicolas Gallager on GitHub&quot; rel=&quot;noopener noreferrer&quot;&gt;Nicolas Gallager&lt;/a&gt; as a result, the lead engineer on the project. At Shopify we’ll be doing some React Native Web experiments in 2020.&lt;/p&gt;

&lt;p&gt;Shopify is &lt;a href=&quot;http://www.shopify.com/careers/specialties/engineering?itcat=EngBlog&amp;amp;itterm=Post&quot; target=&quot;_blank&quot; title=&quot;Shopify Careers&quot; rel=&quot;noopener noreferrer&quot;&gt;always hiring&lt;/a&gt; sharp folks in all disciplines. Given our particular stack (Ruby on Rails/React/React Native) we’ve always invested in people even if they don’t have this particular set of experiences coming in to Shopify. In mobile engineering (btw, &lt;a href=&quot;https://fast.wistia.net/embed/iframe/eeip2aovqn?popover=true&quot; target=&quot;_blank&quot; title=&quot;Shopify Engineering&quot; rel=&quot;noopener noreferrer&quot;&gt;I love this video about engineering opinions&lt;/a&gt;) we’ll continue to write mobile native code and hire native engineers (iOS and Android).&lt;/p&gt;
&lt;p&gt;In addition we are looking for a Principal Mobile Developer to work with me directly across the mobile portfolio at Shopify. This person has a track record of excellence, can solve extremely complex technical challenges and can help Shopify to become an industry and technology leader in React Native. If this sounds like you, message me directly farhanATshopify.com!&lt;/p&gt;&lt;p&gt;&lt;em&gt;Farhan Thawar is VP Engineering for Channels and Mobile at Shopify&lt;/em&gt;&lt;br/&gt;Twitter: &lt;a href=&quot;https://twitter.com/fnthawar&quot; target=&quot;_blank&quot; title=&quot;Farhan Thawar on Twitter&quot; rel=&quot;noopener noreferrer&quot;&gt;@fnthawar&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 29 Jan 2020 15:56:21 +0000</pubDate>
<dc:creator>arbhassan</dc:creator>
<og:url>https://engineering.shopify.com/blogs/engineering/react-native-future-mobile-shopify</og:url>
<og:title>React Native is the Future of Mobile at Shopify</og:title>
<og:type>article</og:type>
<og:description>After years of native mobile development, we’ve decided to go full steam ahead building all of our new mobile apps using React Native. As I’ll explain, that decision doesn’t come lightly. Each quarter, the majority of buyers purchase on mobile (with 71% of our buyers purchasing on mobile in Q3 of last year). Black Friday and Cyber Monday (together, BFCM) are the busiest time of year for our merchants, and buying activity during those days is a bellwether. During this year’s BFCM, Shopify merchants saw another 3% increase in purchases on mobile, an average of 69% of sales. So why the switch to React Native? And why now? How does this fit in with our native mobile development? It’s a complicated answer that’s best served with a little background. Mobile at Shopify Pre-2019 We have an engineering culture at Shopify of making specific early technology bets that help us move fast. On the whole, we prefer to have few technologies as a foundation for engineering. This provides us multiple points of leverage: we build extremely specific expertise in a small set of deep technologies (we often become core contributors) every technology choice has quirks, but we learn them intimately those outside of the initial team contribute, transfer and maintain code written by others new people are onboarded more quickly. At the same time, there are always new technologies emerging that provide us with an opportunity for a step change in productivity or capability. We experiment a lot for the opportunity to unlock improvements that are an order of magnitude improvement—but ultimately, we adopt few of these for our core engineering. When we do adopt these early languages or frameworks, we make a calculated bet. And instead of shying away from the risk, we meticulously research, explore and evaluate such risks based on our unique set of conditions. As is often within risky areas, the unexplored opportunities are hidden. We instead think about how we can mitigate that risk: what if a technology stops being supported by the core team? what if we run into a bug we can’t fix? what if the product goes in a direction against our interests? Ruby on Rails was a nascent and obscure framework when Tobi (our CEO) first got involved as a core contributor in 2004. For years, Ruby on Rails has been seen as a non-serious, non-performant language choice. But that early bet gave Shopify the momentum to outperform the competition even though it was not a popular technology choice. By using Ruby on Rails, the team was able to build faster and attract a different set of talent by using something more modern and with a higher level of abstraction than traditional programming languages and frameworks. Paul Graham talks about his decision to use Lisp in building Viaweb to similar effect and 6 of the 10 most valuable Y Combinator companies today all use Ruby on Rails (even though again, it still remains largely unpopular). As a contrast, none of the Top 10 most valuable Y Combinator companies use Java; largely considered the battle tested enterprise language. Similarly two years ago, Shopify decided to make the jump to Google Cloud. Again, a scary proposition for the 2nd largest US Retail eCommerce site in 2019—to do a cloud migration away from our own data centers, but to also pick an early cloud contender. We saw the technology arc of value creation moving us to focusing on what we’re good at—enabling entrepreneurship and letting others (in this case Google Cloud) focus on the undifferentiated heavy lifting of maintaining physical hardware, power, security, the operating system updates, etc. What is React Native? In 2015, Facebook announced and open sourced React Native; it was already being used internally for their mobile engineering. React Native is a framework for building native mobile apps using React. This means you can use a best-in-class JavaScript library (React) to build your native mobile user interfaces. At Shopify, the idea had its skeptics at the time (and still does), but many saw its promise. At the company’s next Hackdays the entire company spent time on React Native. While the early team saw many benefits, they decided that we couldn’t ship an app we’d be proud of using React Native in 2015. For the most part, this had to do with performance and the absence of first-class Android support. What we did learn was that we liked the Reactive programming model and GraphQL. Also, we built and open-sourced a reactive functional renderer for iOS after working with React Native. We adopted these technologies in 2015 for our native mobile stack, but not React Native for mobile development en masse. The Globe and Mail documented our aspirations in a comprehensive story about the first version of our mobile apps. Until now, the standard for all mobile development at Shopify was native mobile development. We built mobile tooling and foundations teams focused on iOS and Android helping accelerate our development efforts. While these teams and the resulting applications were all successful, there was a suspicion that we could be more effective as a team if we could: bring the power of JavaScript and the web to mobile adopt a reactive programming model across all client-side applications consolidate our iOS and Android development onto a single stack. How React Native Works React Native provides a way to build native cross platform mobile apps using JavaScript. React Native is similar to React in that it allows developers to create declarative user interfaces in JavaScript, for which it internally creates a hierarchy tree of UI elements or in ReactJS terminology a virtual DOM. Whereas the output of ReactJS targets a browser, React Native translates the virtual DOM into mobile native views using platform native bindings that interface with application logic in JavaScript. For our purposes, the target platforms are Android and iOS, but community driven effort have brought React Native to other platforms such as Windows, macOS and Apple tvOS.   ReactJS targets a browser, whereas React Native can target mobile APIs. When Will We Not Default to Using React Native? There are situations where React Native would not be the default option for building a mobile app at Shopify. For example, if we have a requirement of: deploying on older hardware (CPU &lt;1.5GHz) extensive processing ultra-high performance many background threads. Reminder: Low-level libraries including many open sourced SDKs will remain purely native. And we can always create our own native modules when we need to be close to the metal.   Why Move to React Native Now? There were 3 main reasons now is a great time to take this stance: we learned from our acquisition of Tictail (a mobile first company that focused 100% on React Native) in 2018 how far React Native has come and made 3 deep product investments in 2019 Shopify uses React extensively on the web and that know-how is now transferable to mobile we see the performance curve bending upwards (think what’s now possible in Google Docs vs. desktop Microsoft Office) and we can long-term invest in React Native like we do in Ruby, Rails, Kubernetes and Rich Media. Mobile at Shopify in 2019 We have many mobile surfaces at Shopify for buyers and merchants to interact, both over the web and with our mobile apps. We spent time over the last year experimenting with React Native with three separate teams over three apps: Arrive, Point of Sale, and Compass. From our experiments we learned that: in rewriting the Arrive app in React Native, the team felt that they were twice as productive than using native development—even just on one mobile platform testing our Point of Sale app on low-power configurations of Android hardware let us set a lower CPU threshold than previously imagined (1.5GHz vs. 2GHz) we estimated ~80% code sharing between iOS and Android, and were surprised by the extremely high-levels in practice—95% (Arrive) and 99% (Compass) As an aside, even though we’re making the decision to build all new apps using React Native, that doesn’t mean we’ll automatically start rewriting our old apps in React Native. Arrive At the end of 2018, we decided to rewrite one of our most popular consumer apps, Arrive in React Native. Arrive is no slouch, it’s a highly rated, high performing app that has millions of downloads on iOS. It was a good candidate because we didn’t have an Android version. Our efforts would help us reach all of the Android users who were clamoring for Arrive. It’s now React Native on both iOS and Android and shares 95% of the same code. We’ll do a deep dive into Arrive in a future blog post. So far this rewrite resulted in: less crashes on iOS than our native iOS app an Android version launched team composed of mobile + non-mobile developers. The team also came up with this cool way to instantly test work-in-progress pull requests. You simply scan a QR code from an automated Github comment on your phone and the JavaScript bundle is updated in your app and you’re now running the latest code from that pull request. JML, our CTO, shared the process on Twitter recently. Point of Sale At the beginning of 2019, we did a 6-week experiment on our flagship Point of Sale (POS) app to see if it would be a good candidate for a rewrite in React Native. We learned a lot, including that our retail merchants expect almost 2x the responsiveness in our POS due to the muscle memory of using our app while also talking to customers. In order to best serve our retail merchants and learn about React Native in a physical retail setting, we decided to build out the new POS natively for iOS and use React Native for Android. We went ahead with 2 teams for the following reasons: we already had a team ramped up with iOS expertise, including many of the folks that built the original POS apps we wanted to be able to benchmark our React Native engineering velocity as well as app performance against the gold standard which is native iOS to meet the high performance requirements of our merchants, we felt that we’d need all of the Facebook re-architecture updates to React Native before launch (as it turns out, they weren’t critical to our performance use cases). Having two teams on two platforms, de-risked our ability to launch. We announced a complete rewrite of POS at Unite 2019. Look for both the native iOS and React Native Android apps to launch in 2020! Compass The Start team at Shopify is tasked with helping folks new to entrepreneurship. Before the company wide decision to write all mobile apps in React Native came about, the team did a deep dive into Native, Flutter and React Native as possible technology choices. They chose React Native and now have iOS and Android apps (in beta) live in the app stores. The first versions of Compass (both iOS and Android) were launched within 3 months with ~99% of the code shared between iOS and Android. Mobile at Shopify 2020+ We have lots in store for 2020.Will we rewrite our native apps? No. That’s a decision each app team makes independently Will we continue to hire native engineers? Yes, LOTS! We want to contribute to core React Native, build platform specific components, and continue to understand the subtleness of each of the platforms. This requires deep native expertise. Does this sound like you? Partnering and Open Source We believe that building software is a team sport. We have a commitment to the open web, open source and open standards. We’re sponsoring Software Mansion and Krzysztof Magiera (co-founder of React Native for Android) in their open source efforts around React Native. We’re working with William Candillon (host of Can It Be Done in React Native) for architecture reviews and performance work. We’ll be partnering closely with the React Native team at Facebook on automation, 3rd party libraries and stewardship of some modules via Lean Core. We are working with Discord to accelerate the open sourcing of FastList for React Native (a library which only renders list items that are in the viewport) and optimizing for Android. Developer Tooling and Foundations for React Native When you make a bet and go deep into a technology, you want to gain maximum leverage from that choice. In order for us to build fast and get the most leverage, we have two types of teams that help the rest of Shopify build quickly. The first is a tooling team that helps with engineering setup, integration and deployment. The second is a foundations team that focuses on SDKs, code reuse and open source. We’ve already begun spinning up both of these teams in 2020 to focus on React Native. Our popular Shopify Ping app which has enabled hundreds of thousands of customer conversations is currently only iOS. In 2020, we’ll be building the Android version using React Native out of our San Francisco office and we’re hiring.In 2019, Twitter released their desktop and mobile web apps using something called React Native Web. While this might seem confusing, it allows you to use the same React Native stack for your web app as well. Facebook promptly hired Nicolas Gallager as a result, the lead engineer on the project. At Shopify we’ll be doing some React Native Web experiments in 2020. Join Us Shopify is always hiring sharp folks in all disciplines. Given our particular stack (Ruby on Rails/React/React Native) we’ve always invested in people even if they don’t have this particular set of experiences coming in to Shopify. In mobile engineering (btw, I love this video about engineering opinions) we’ll continue to write mobile native code and hire native engineers (iOS and Android). In addition we are looking for a Principal Mobile Developer to work with me directly across the mobile portfolio at Shopify. This person has a track record of excellence, can solve extremely complex technical challenges and can help Shopify to become an industry and technology leader in React Native. If this sounds like you, message me directly farhanATshopify.com!Farhan Thawar is VP Engineering for Channels and Mobile at ShopifyTwitter: @fnthawar</og:description>
<og:image>http://cdn.shopify.com/s/files/1/0779/4361/articles/2_monitors_pink_room_pair_programming-wide_a0550edd-84c3-42af-a883-87be2b2cc5de_1024x1024.jpg?v=1580310895</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://engineering.shopify.com/blogs/engineering/react-native-future-mobile-shopify</dc:identifier>
</item>
<item>
<title>iOS 13&amp;#039;s Music App Sucks</title>
<link>https://samuelstevens.me/writing/ios-13s-music-app-sucks</link>
<guid isPermaLink="true" >https://samuelstevens.me/writing/ios-13s-music-app-sucks</guid>
<description>&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;This essay is more of a rant. I knew it coming in, and now you do too.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;iOS 13’s official Music app is a stinking hot pile of garbage that gets worse every year. Why, oh why, does it feel like nobody uses this app before they ship it?&lt;/p&gt;
&lt;p&gt;First things first, why do I get a tab bar with 5 icons, and I only ever use 2 of them? I don’t care about “For You”, “Browse” and I &lt;em&gt;certainly&lt;/em&gt; don’t give a rat’s ass about &lt;em&gt;”Radio”&lt;/em&gt;. Back in iOS 8, maybe 9, you could pick and choose the options you had on your tab bar. You could have your playlists accessible from anywhere instead of only at the top of the Library screen.&lt;/p&gt;
&lt;p&gt;You might argue that Apple needs to push its services (such as Apple Music) since hardware sales are declining, and making For You, Browse, and Radio tabs are a good way to advertise them. Fine, that’s fair, that’s just business. Except that I already pay for Apple Music, I don’t use these tabs, and I’m considering leaving Apple Music for Spotify because these tabs (and other “features” that we’ll discuss later) annoy me so much. Not a good business decision after all.&lt;/p&gt;
&lt;p&gt;Next, Apple Music has a lyric search feature, where you can type the line of a song into the search bar and it will do its best to find it. It’s an excellent way to find songs, rather than using a browser and then searching again for the song in the Music app. Except it doesn’t work on songs in your library. Compared to the 15GB of songs I have (about 3,000), it seems that storing the lyrics in a text format would add a trivial amount of local data. Why then, can’t I search for lyrics in songs I already have downloaded?&lt;/p&gt;
&lt;p&gt;In general, the local search is quite bad. When searching the Apple Music catalog, I can type in “drake how about now” and find Drake’s song “How Bout Now” as the first result. When I switch over to “Your Library”, no results. Even “how about now” shows nothing. I need to type in “how bout now” before it will show up. This local search is just a series of regexes, not real search. It’s 2020. We have better search than this.&lt;/p&gt;
&lt;p&gt;Finally, the Now Playing screen. Arguably the screen I spend the most time on, and the screen that has progressively gotten worse as time passes. Upon first glance, it’s simple enough. Go back, play/pause, next song buttons. A volume slider, the album art, the song name and artist name. Very standard, very understandable. Swipe down to dismiss the page.&lt;/p&gt;
&lt;p&gt;But let’s talk about four little icons that turn this page into a living nightmare. The ellipsis, the speech bubble, the Airplay (maybe?), and a queue-looking thing.&lt;/p&gt;
&lt;p&gt;First off, icons as buttons without labels. It’s a big no-no. To be fair, each of these icons is pretty self explanatory, &lt;em&gt;if they only did what they were labeled as.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The ellipsis is the generic “there’s more stuff here” button. Clicking on it does bring up a modal with generic actions: Copy, Share, Remove. Fine. But then it includes stuff like “Add to a Playlist”, “View Full Lyrics”, “Create Station”, “Love”, “Suggest Less Like This”. These are semi-critical functions; in this age, I would argue that Remove and Add to a Playlist are seriously important: we have a lot of music, so getting rid of some and adding some to playlists for future reference is critical. It’s foolish of Apple to hide this functionality behind a button that has generally signaled unimportance: additional features that aren’t critical. But for Apple to mix important things like “View Album” and “Remove” with “Suggest Less Like This” (I don’t even know what that does”) is poor UI design. There needs to be a clear separator.&lt;/p&gt;
&lt;p&gt;To Apple’s credit, you can move them around with “Edit Actions”, and pick your “favorite” actions to move them to the top. But it’s an iPhone. I shouldn’t have to configure this kind of stuff, especially if I’m going to be paying $120 a year to use this app.&lt;/p&gt;
&lt;p&gt;And the ellipsis isn’t even the worst offender. The Airplay icon is fine. Serious iOS/iPhone users know what it is, and casual users probably don’t care. The speech bubble isn’t hard to figure out: you click on it, lyrics show up. I did only recently just find out that clicking on a lyric jumps the song to that portion of the song. Very cool, especially &lt;em&gt;if I could search for a lyric&lt;/em&gt;.&lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;To be honest, the lyric feature is really cool from a technical point of view. It just feels like it was designed for fun by a couple of engineers who then just dropped it into the app with a lot of priority because it was difficult to implement. This feature would’ve made a lot of sense in the ellipsis menu.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And finally, the queue button. The single worst reason that I’m considering Spotify. This button is the worst piece of UI design I’ve seen recently, and is one of the reasons that Apple Music feels so awful. The &lt;strong&gt;shuffle&lt;/strong&gt; button is &lt;strong&gt;hidden&lt;/strong&gt; in this menu. For years, shuffle and loop have been on the middle of the now playing screen.&lt;/p&gt;
&lt;p&gt;Here are pictures from iOS 7, 8 and 9 (note, these aren’t my images, rather random ones I found online. Sorry for the quality).&lt;/p&gt;
&lt;img src=&quot;https://samuelstevens.me/images/ios-music/7.png&quot; alt=&quot;&quot;/&gt;iOS 7 &lt;img src=&quot;https://samuelstevens.me/images/ios-music/8.png&quot; alt=&quot;&quot;/&gt;iOS 8 &lt;img src=&quot;https://samuelstevens.me/images/ios-music/9.png&quot; alt=&quot;&quot;/&gt;iOS 9
&lt;p&gt;All of them show the shuffle and repeat button. They also manage to squeeze in the queue and ellipsis buttons.&lt;/p&gt;
&lt;p&gt;Here’s iOS 13:&lt;/p&gt;
&lt;img src=&quot;https://samuelstevens.me/images/ios-music/13.png&quot; alt=&quot;&quot;/&gt;iOS 13
&lt;p&gt;Yes, dark mode is nice. Yes, visually, I prefer iOS 13. It’s very pretty (I’m not being sarcastic, it really is). Except in terms of actually using the app, all of these previous options were better.&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;To be fair, the updated Now Playing screen came about in iOS 10. I’m just picking on it here because iOS 13 introduced additional problems.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And then the queue on the Now Playing screen is trash (once you get there). Rearranging the options is difficult because the Previous/Pause/Next buttons keep fading in and out based on which way you’re scrolling, randomly hiding a third of the songs you’re looking at.&lt;/p&gt;
&lt;p&gt;So Now Playing is a hot piece of garbage, 3 of the 5 tabs on my tab abr are &lt;em&gt;completely irrelevant&lt;/em&gt; to me.&lt;/p&gt;
&lt;p&gt;What’s good about this app?&lt;/p&gt;
&lt;p&gt;Not the Playlists screen.&lt;/p&gt;
&lt;img src=&quot;https://samuelstevens.me/images/ios-music/13-playlists.png&quot; alt=&quot;&quot;/&gt;iOS 13’s Playlist screen
&lt;p&gt;Sure, 4 playlists on a page. Gotta love that whitespace. Maybe the images are what I’m supposed to focus on, except that instead of album art (like every other playlist), I have boring gradients from Apple. These rows could be half the height and be incredibly more useful.&lt;/p&gt;
&lt;p&gt;The Songs, Genres, Artists, and Albums pages are fine. They’re just lists, which aren’t as offending as the Playlists list.&lt;/p&gt;
&lt;h2 id=&quot;spotify&quot;&gt;Spotify&lt;/h2&gt;
&lt;p&gt;So I actually wrote most of this essay back in 2019. In 2020, I took advantage of Spotify’s free trial. Spotify also makes me mad.&lt;/p&gt;
&lt;p&gt;The Now Playing screen on Spotify is different based on whether you’re listening to a Daily Mix or a playlist. The one screen that should be consistent? Different, based on a context I wasn’t aware of.&lt;/p&gt;
&lt;p&gt;In Spotify, you also don’t really have the concept of a library. You have a playlist with all the songs you “liked”, but not a Songs tab. If you like an album, the songs aren’t added to your Liked Songs (a fact I discovered after liking &lt;em&gt;KIDS SEE GHOSTS&lt;/em&gt; and then not hearing any of the songs, ever).&lt;/p&gt;
&lt;p&gt;The queue also has rearranging issues, which means that perhaps dragging in iOS is broken, which can’t really be blamed on the Spotify or the Apple Music teams.&lt;/p&gt;
&lt;p&gt;Spotify overall has a better interface, except for the lack of a Library, which makes me irrationally unhappy. Perhaps it comes from my carefully curating my music collection with iTunes and Apple Music. If you don’t mind not having a “Library”, then Spotify is a great app. I mind.&lt;/p&gt;
&lt;h2 id=&quot;closing&quot;&gt;Closing&lt;/h2&gt;
&lt;p&gt;I’ve ranted enough. I wish I could do something about fixing them. Building an Apple Music app using their API is possible (but not feasible for many, many users).&lt;/p&gt;
&lt;p&gt;Maybe I should just be impressed and satisfied that we have the infrastructure to stream any song I want, on demand, from any device I own. Maybe.&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;Please &lt;a href=&quot;mailto:samuel.robert.stevens@gmail.com&quot;&gt;email me&lt;/a&gt; if you have any comments or want to discuss further.&lt;/p&gt;
&lt;p&gt;HackerNews discussion &lt;a href=&quot;https://news.ycombinator.com/item?id=22181852&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The most useful tidbit (for me) was barrowclift’s link to his &lt;a href=&quot;https://barrowclift.me/post/second-annual-ios-music-player-competition&quot;&gt;review of alternate music players&lt;/a&gt;.&lt;/p&gt;
&lt;hr/&gt;
[&lt;a href=&quot;https://www.youtube.com/watch?v=SHbS9tYFpcQ&quot;&gt;Relevant link&lt;/a&gt;]
&lt;p&gt;Sam Stevens, 2019&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/samuelstevens/personal-website&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 29 Jan 2020 15:54:20 +0000</pubDate>
<dc:creator>samstevens</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://samuelstevens.me/writing/ios-13s-music-app-sucks</dc:identifier>
</item>
<item>
<title>Typesense: Open-Source Alternative to Algolia</title>
<link>https://github.com/typesense/typesense</link>
<guid isPermaLink="true" >https://github.com/typesense/typesense</guid>
<description>&lt;p&gt;&lt;a href=&quot;https://typesense.org&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://github.com/typesense/typesense/raw/master/assets/typesense_medium.png?raw=true&quot; alt=&quot;Typesense&quot; width=&quot;298&quot;/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://circleci.com/gh/typesense/typesense&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/bab6a74bb2e81f2583d97feea7a8c9be55ed0768/68747470733a2f2f636972636c6563692e636f6d2f67682f7479706573656e73652f7479706573656e73652e7376673f7374796c653d736869656c6426636972636c652d746f6b656e3d31616464643737353333393733386133643930383639646464383230313131306435363166656161&quot; alt=&quot;CircleCI&quot; data-canonical-src=&quot;https://circleci.com/gh/typesense/typesense.svg?style=shield&amp;amp;circle-token=1addd775339738a3d90869ddd8201110d561feaa&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Typesense is a fast, typo-tolerant search engine for building delightful search experiences.&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://github.com/typesense/typesense/blob/master/assets/typesense_books_demo.gif?raw=true&quot;&gt;&lt;img src=&quot;https://github.com/typesense/typesense/raw/master/assets/typesense_books_demo.gif?raw=true&quot; alt=&quot;Typesense Demo&quot; width=&quot;459&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Menu&lt;/h2&gt;
&lt;h2&gt;Features&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Typo tolerant:&lt;/strong&gt; Handles typographical errors elegantly.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Simple and delightful:&lt;/strong&gt; Simple to set-up and manage.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tunable ranking:&lt;/strong&gt; Easy to tailor your search results to perfection.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fast:&lt;/strong&gt; Meticulously designed and optimized for speed.&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Install&lt;/h2&gt;
&lt;p&gt;You can download the &lt;a href=&quot;https://typesense.org/downloads&quot; rel=&quot;nofollow&quot;&gt;binary packages&lt;/a&gt; that we publish for Linux (x86-64) and Mac.&lt;/p&gt;
&lt;p&gt;You can also run Typesense from our &lt;a href=&quot;https://hub.docker.com/r/typesense/typesense&quot; rel=&quot;nofollow&quot;&gt;official Docker image&lt;/a&gt;:&lt;/p&gt;
&lt;h2&gt;Quick Start&lt;/h2&gt;
&lt;p&gt;Here's a quick example showcasing how you can create a collection, index a document and search it on Typesense.&lt;/p&gt;
&lt;p&gt;Let's begin by starting the Typesense server via Docker:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;docker run -p 8108:8108 -v/tmp/data:/data typesense/typesense:0.11.1 --data-dir /data --api-key=Hu52dwsas2AdxdE
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Install the Python client for Typesense (we have &lt;a href=&quot;https://typesense.org/api/#api-clients&quot; rel=&quot;nofollow&quot;&gt;clients&lt;/a&gt; for other languages too):&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;pip install typesense
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;We can now initialize the client and create a &lt;code&gt;companies&lt;/code&gt; collection:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;22&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; typesense

client &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; typesense.Client({
  &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;master_node&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;: {
    &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;host&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;localhost&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;port&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;8108&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;protocol&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;http&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;api_key&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;Hu52dwsas2AdxdE&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
  },
  &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;timeout_seconds&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;
})

create_response &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; client.collections.create({
  &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;name&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;companies&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
  &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;fields&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: [
    {&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;name&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;company_name&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;type&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;string&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; },
    {&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;name&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;num_employees&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;type&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;int32&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; },
    {&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;name&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;country&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;type&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;string&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;facet&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt; }
  ],
  &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;default_sorting_field&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;num_employees&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
})
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, let's add a document to the collection we just created:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;11&quot;&gt;
&lt;pre&gt;
document &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; {
 &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;id&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;124&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
 &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;company_name&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Stark Industries&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
 &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;num_employees&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-c1&quot;&gt;5215&lt;/span&gt;,
 &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;country&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;USA&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
}

client.collections[&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;companies&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;].documents.create(document)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, let's search for the document we just indexed:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;12&quot;&gt;
&lt;pre&gt;
search_parameters &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; {
  &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;q&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;         : &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;stork&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
  &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;query_by&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;  : &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;company_name&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
  &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;filter_by&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;num_employees:&amp;gt;100&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
  &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;sort_by&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;   : &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;num_employees:desc&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
}

client.collections[&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;companies&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;].documents.search(search_parameters)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Did you notice the typo in the query text?&lt;/strong&gt; No big deal. Typesense handles typographic errors out-of-the-box!&lt;/p&gt;
&lt;h2&gt;Detailed Guide&lt;/h2&gt;
&lt;p&gt;A detailed guide is available on &lt;a href=&quot;https://typesense.org/guide&quot; rel=&quot;nofollow&quot;&gt;Typesense website&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Build from source&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Building with Docker&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The docker build script takes care of all required dependencies, so it's the easiest way to build Typesense:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;TYPESENSE_VERSION=nightly ./docker-build.sh --build-deploy-image --create-binary [--clean] [--depclean]
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Building on your machine&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Typesense requires the following dependencies:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;C++11 compatible compiler (GCC &amp;gt;= 4.9.0, Apple Clang &amp;gt;= 8.0, Clang &amp;gt;= 3.9.0)&lt;/li&gt;
&lt;li&gt;Snappy&lt;/li&gt;
&lt;li&gt;zlib&lt;/li&gt;
&lt;li&gt;OpenSSL (&amp;gt;=1.0.2)&lt;/li&gt;
&lt;li&gt;curl&lt;/li&gt;
&lt;li&gt;ICU&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;./build.sh --create-binary [--clean] [--depclean]
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The first build will take some time since other third-party libraries are pulled and built as part of the build process.&lt;/p&gt;
&lt;h2&gt;FAQ&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;How does this differ from using Elasticsearch?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Elasticsearch is better suited for larger teams who have the bandwidth to administer, scale and fine-tune it and especially when have a need to store billions of documents and scale horizontally.&lt;/p&gt;
&lt;p&gt;Typesense is built specifically for decreasing the &quot;time to market&quot; for a delightful search experience. This means focussing on developer productivity and experience with a clean API, clear semantics and smart defaults so that it just works without turning many knobs.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Speed is great, but what about the memory footprint?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A fresh Typesense server will take less than 5 MB of memory. As you start indexing documents, the memory use will increase correspondingly. How much it increases depends on the number and type of fields you index.&lt;/p&gt;
&lt;p&gt;We've strived to keep the in-memory data structures lean. To give you a rough idea: when 1 million Hacker News titles are indexed along with their points, Typesense consumes 165 MB of memory. The same size of that data on disk in JSON format is 88 MB. We hope to add better benchmarks on a variety of different data sets soon. In the mean time, if you have any numbers from your own datasets, please send us a PR!&lt;/p&gt;
&lt;h2&gt;Help&lt;/h2&gt;
&lt;p&gt;If you've any questions or run into any problems, please create a Github issue and we'll try our best to help.&lt;/p&gt;
&lt;p&gt;© 2016-2019 Typesense Inc.&lt;/p&gt;
</description>
<pubDate>Wed, 29 Jan 2020 15:20:39 +0000</pubDate>
<dc:creator>karterk</dc:creator>
<og:image>https://avatars1.githubusercontent.com/u/19822348?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>typesense/typesense</og:title>
<og:url>https://github.com/typesense/typesense</og:url>
<og:description>Fast, typo tolerant search engine for building delightful search experiences. - typesense/typesense</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/typesense/typesense</dc:identifier>
</item>
<item>
<title>Illinois governor signs law capping insulin costs at $100 per month</title>
<link>https://www.nbc15.com/content/news/Illinois-governor-signs-law-capping-insulin-costs-at-100-per-month-567282431.html</link>
<guid isPermaLink="true" >https://www.nbc15.com/content/news/Illinois-governor-signs-law-capping-insulin-costs-at-100-per-month-567282431.html</guid>
<description>&lt;p&gt;&lt;span id=&quot;dateline&quot; itemprop=&quot;dateline&quot;&gt;&lt;strong&gt;ILLINOIS (WMTV) --&lt;/strong&gt;&lt;/span&gt; The Illinois governor has signed a new law that will cap out of pocket insulin costs at $100 for a 30-day supply.&lt;/p&gt;
&lt;p&gt;Diabetes affects approximately 1,300,000 adults in Illinois. People with Type 1 diabetes and some with Type 2 diabetes need insulin, but price hikes make insulin difficult to afford for the uninsured, and those whose coverage requires significant cost sharing, according to a release from Illinois Gov. JB Pritzker’s Office on Jan. 24.&lt;/p&gt;
&lt;p&gt;“Health care is a right for all, not a privilege and that is why I am so proud that we created an insulin price cap that successfully puts patients above profit,” according to Gov. JB Pritzker.&lt;/p&gt;
&lt;p&gt;“As we work to address the high cost of prescription drug prices that are burdening millions all across our state, this new law is an essential step in fulfilling our promise to put state government back on the side of working families,” according to the governor.&lt;/p&gt;
&lt;p&gt;One in four Type-1 diabetics have reported insulin underdose due to the high cost of insulin, &lt;a href=&quot;https://www.kfvs12.com/2020/01/24/gov-pritzker-signs-law-capping-insulin-costs-per-month/&quot; target=&quot;_blank&quot;&gt;reports KFVS&lt;/a&gt; in Illinois.&lt;/p&gt;
&lt;p&gt;The majority of the law’s provisions go into effect in January of 2021. Provisions requiring an insulin pricing report take effect immediately.&lt;br/&gt;&lt;/p&gt;
&lt;div id=&quot;gdm-ad-728x90-A&quot; class=&quot;gdm-ad&quot;/&gt;
</description>
<pubDate>Wed, 29 Jan 2020 14:57:01 +0000</pubDate>
<dc:creator>ga-vu</dc:creator>
<og:title>Illinois governor signs law capping insulin costs at $100 per month</og:title>
<og:description>The Illinois governor has signed a new law that will cap out of pocket insulin costs at $100 for a 30-day supply.</og:description>
<og:type>article</og:type>
<og:image>https://media.graytvinc.com/images/illinois+governor+signs+insulin+bil.jpg</og:image>
<og:url>https://www.nbc15.com/content/news/Illinois-governor-signs-law-capping-insulin-costs-at-100-per-month-567282431.html</og:url>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.nbc15.com/content/news/Illinois-governor-signs-law-capping-insulin-costs-at-100-per-month-567282431.html</dc:identifier>
</item>
<item>
<title>A Tour of Standard ML</title>
<link>https://saityi.github.io/sml-tour/tour/00-00-welcome.html</link>
<guid isPermaLink="true" >https://saityi.github.io/sml-tour/tour/00-00-welcome.html</guid>
<description>&lt;h2&gt;Welcome&lt;/h2&gt;
&lt;p&gt;Welcome to a tour of the Standard ML programming language!&lt;/p&gt;
&lt;h4 id=&quot;what-is-standard-ml&quot;&gt;What is Standard ML?&lt;/h4&gt;
&lt;p&gt;Standard ML is a general purpose functional programming language. It is statically typed, which prevents a wide array of common programming errors, but also features powerful type inference, requiring few type declarations, if any. This makes it easy to build software that is easy to understand, extensible, and reliable.&lt;/p&gt;
&lt;p&gt;There are free, full-program optimising compilers for it, producing efficient native code, such as &lt;a href=&quot;http://www.mlton.org/&quot;&gt;MLton&lt;/a&gt;. The concurrency extension &lt;a href=&quot;http://cml.cs.uchicago.edu/&quot;&gt;‘Concurrent ML’&lt;/a&gt; provides support for &lt;a href=&quot;https://en.wikipedia.org/wiki/Communicating_sequential_processes&quot;&gt;communicating sequential processes&lt;/a&gt;, and is supported by SML/NJ and MLton.&lt;/p&gt;
&lt;h4 id=&quot;the-tour&quot;&gt;The Tour&lt;/h4&gt;
&lt;p&gt;The tour consists of a set of chapters, each intended to showcase different features of Standard ML. There are examples included in the &lt;a href=&quot;https://github.com/Saityi/a-tour-of-standard-ml/tree/master/examples&quot;&gt;Tour of Standard ML repository&lt;/a&gt;. You may view the table of contents by via the ‘Table of Contents’ menu at the top of the screen, and go to the next page by clicking the right arrow.&lt;/p&gt;
</description>
<pubDate>Wed, 29 Jan 2020 14:30:20 +0000</pubDate>
<dc:creator>saityi</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://saityi.github.io/sml-tour/tour/00-00-welcome.html</dc:identifier>
</item>
<item>
<title>Congrats! Web scraping is legal! (US precedent)</title>
<link>https://parsers.me/us-court-fully-legalized-website-scraping-and-technically-prohibited-it/</link>
<guid isPermaLink="true" >https://parsers.me/us-court-fully-legalized-website-scraping-and-technically-prohibited-it/</guid>
<description>&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-12&quot;&gt;

&lt;p class=&quot;author meta-in-content&quot;&gt;Published by &lt;a href=&quot;https://parsers.me/author/parserssiteuser/&quot; class=&quot;vcard author&quot;&gt;&lt;strong class=&quot;fn&quot;&gt;admin&lt;/strong&gt;&lt;/a&gt; on &lt;time class=&quot;entry-date published&quot; datetime=&quot;2020-01-28T12:24:29+03:00&quot; content=&quot;2020-01-28&quot;&gt;28.01.2020&lt;/time&gt;&lt;time class=&quot;updated hestia-hidden&quot; datetime=&quot;2020-01-28T14:32:06+03:00&quot;&gt;28.01.2020&lt;/time&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;On September 9, the U.S. 9th circuit court of Appeals ruled &lt;a href=&quot;https://parsers.me/appeal-from-the-united-states-district-court-for-the-northern-district-of-california/&quot;&gt;&lt;strong&gt;(Appeal from the United States District Court for the Northern District of California)&lt;/strong&gt;&lt;/a&gt; that web scraping public sites does not violate the CFAA (Computer Fraud and Abuse Act).&lt;/p&gt;
&lt;p&gt;This is a really important decision. The court not only legalized this practice, but also prohibited competitors from removing information from your site automatically if the site is public. The court confirmed the clear logic that the entry of the web scraper bot is not legally different from the entry of the browser. In both cases, the “user” requests open data — and does something with it on their side.&lt;/p&gt;
&lt;p&gt;Now many site owners are trying to put technical obstacles to competitors who completely copy their information that is not protected by copyright. For example, ticket prices, product lots, open user profiles, and so on. Some sites consider this information “their own”, and consider web scraping as “theft”. Legally, this is not the case, which is now officially enshrined in the US.&lt;/p&gt;
&lt;p&gt;The decision was made during &lt;a href=&quot;https://parsers.me/web-scraping-or-parsing-internet-resources-what-is-it-and-is-it-legal/&quot;&gt;&lt;strong&gt;the trial&lt;/strong&gt;&lt;/a&gt; of LinkedIn (owned by Microsoft) against a small data analysis company called hiQ Labs.&lt;/p&gt;
&lt;p&gt;HiQ linked data from publicly available LinkedIn user profiles and then used it to consult employers whose employees posted their resumes on the site.&lt;/p&gt;
&lt;p&gt;LinkedIn has tolerated hiQ activity for several years, but in 2017 sent the company a request (a cease-and-desist letter) to stop automated data collection from profiles. Among other things, LinkedIn claimed that hiQ violated the computer fraud and abuse act (CFAA), the main American law against hackers. Adopted more than 30 years ago, this law prohibits “access to a computer without authorization or with exceeding access rights.”&lt;/p&gt;
&lt;p&gt;The requirement has become an existential threat to hiQ, since the LinkedIn website is the main data source for hiQ. The Analytics firm had no choice but to sue LinkedIn. It sought not only to legalize web scraping, but also to ban technical obstacles.&lt;/p&gt;
&lt;p&gt;In 2017, the court of first instance sided with hiQ. The defendant filed an appeal, and yesterday the 9th circuit court of Appeals agreed with the lower court — it stated that the computer fraud and abuse act does not apply to information available to the General public.&lt;/p&gt;
&lt;p&gt;“The CFAA is adopted to prevent deliberate intrusion on someone else’s computer — in particular, computer hacking,” the court said. The court notes that participants in the process have repeatedly drawn analogies with physical crimes, such as breaking and entering. According to the judges, this means that the CFAA applies only to information or computer systems that are initially closed to the public — usually indicated by the requirement of authorization at the entrance.&lt;/p&gt;
&lt;p&gt;The court noted that the CFAA law was originally passed in the 1980s specifically to protect certain categories of computers containing military, financial, or other sensitive data. But when the law was extended to more computers in 1996, a Senate report said its goal was to ” increase privacy.” In other words, its purpose is to protect private, private information.&lt;/p&gt;
&lt;p&gt;HiQ only takes information from public LinkedIn profiles. By definition, any member of the public has the right to access this information.&lt;/p&gt;
&lt;p&gt;Most importantly, the appeals court also upheld a lower court ruling that prohibits LinkedIn from interfering with hiQ’s web scraping of its site. This fundamentally changes the balance of power in dealing with such cases in the future.&lt;/p&gt;
&lt;p&gt;Perhaps this is a specific feature of American legislation. In this case, hiQ argued that LinkedIn’s technical measures to block web scraping interfere with hiQ’s contracts with its own customers who rely on this data. In legal jargon, this is called” malicious interference with a contract”, which is prohibited by American law.&lt;/p&gt;
&lt;p&gt;In Russia, protecting your site from bots, including web scrapers, is considered normal practice, even if the site owner does not own intellectual property rights to published information (for example, user profiles).&lt;/p&gt;
</description>
<pubDate>Wed, 29 Jan 2020 14:06:37 +0000</pubDate>
<dc:creator>ehurynovich</dc:creator>
<og:type>article</og:type>
<og:title>US court fully legalized website scraping and technically prohibited it - Parsers</og:title>
<og:description>- US court fully legalized website scraping and technically prohibited it Parsers</og:description>
<og:url>https://parsers.me/us-court-fully-legalized-website-scraping-and-technically-prohibited-it/</og:url>
<og:image>https://i1.wp.com/parsers.me/wp-content/uploads/2020/01/OJyjtDr306JFk9DOpjvAhCkkvoA9_Qqy.jpg?fit=1698%2C1131&amp;ssl=1</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://parsers.me/us-court-fully-legalized-website-scraping-and-technically-prohibited-it/</dc:identifier>
</item>
<item>
<title>Being a Noob</title>
<link>http://paulgraham.com/noob.html</link>
<guid isPermaLink="true" >http://paulgraham.com/noob.html</guid>
<description>&lt;img src=&quot;https://s.yimg.com/aah/paulgraham/being-a-noob-1.gif&quot; width=&quot;107&quot; height=&quot;18&quot; border=&quot;0&quot; hspace=&quot;0&quot; vspace=&quot;0&quot; alt=&quot;Being a Noob&quot; /&gt;&lt;p&gt;&lt;span&gt;January 2020&lt;/span&gt;&lt;/p&gt;&lt;p&gt;When I was young, I thought old people had everything figured out. Now that I'm old, I know this isn't true.&lt;/p&gt;&lt;p&gt;I constantly feel like a noob. It seems like I'm always talking to some startup working in a new field I know nothing about, or reading a book about a topic I don't understand well enough, or visiting some new country where I don't know how things work.&lt;/p&gt;&lt;p&gt;It's not pleasant to feel like a noob. And the word &quot;noob&quot; is certainly not a compliment. And yet today I realized something encouraging about being a noob: the more of a noob you are locally, the less of a noob you are globally.&lt;/p&gt;&lt;p&gt;For example, if you stay in your home country, you'll feel less of a noob than if you move to Farawavia, where everything works differently. And yet you'll know more if you move. So the feeling of being a noob is inversely correlated with actual ignorance.&lt;/p&gt;&lt;p&gt;But if the feeling of being a noob is good for us, why do we dislike it? What evolutionary purpose could such an aversion serve?&lt;/p&gt;&lt;p&gt;I think the answer is that there are two sources of feeling like a noob: being stupid, and doing something novel. Our dislike of feeling like a noob is our brain telling us &quot;Come on, come on, figure this out.&quot; Which was the right thing to be thinking for most of human history. The life of hunter-gatherers was complex, but it didn't change as much as life does now. They didn't suddenly have to figure out what to do about cryptocurrency. So it made sense to be biased toward competence at existing problems over the discovery of new ones. It made sense for humans to dislike the feeling of being a noob, just as, in a world where food was scarce, it made sense for them to dislike the feeling of being hungry.&lt;/p&gt;&lt;p&gt;Now that too much food is more of a problem than too little, our dislike of feeling hungry leads us astray. And I think our dislike of feeling like a noob does too.&lt;/p&gt;&lt;p&gt;Though it feels unpleasant, and people will sometimes ridicule you for it, the more you feel like a noob, the better.&lt;/p&gt;</description>
<pubDate>Wed, 29 Jan 2020 13:48:36 +0000</pubDate>
<dc:creator>rcardo11</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>http://paulgraham.com/noob.html</dc:identifier>
</item>
<item>
<title>Russia blocks ProtonMail</title>
<link>https://www.reuters.com/article/us-russia-protonmail/russia-blocks-encrypted-email-service-protonmail-idUSKBN1ZS1K8</link>
<guid isPermaLink="true" >https://www.reuters.com/article/us-russia-protonmail/russia-blocks-encrypted-email-service-protonmail-idUSKBN1ZS1K8</guid>
<description>&lt;p&gt;MOSCOW (Reuters) - Russia said on Wednesday it had blocked the Swiss email service ProtonMail, popular among journalists and activists for its focus on user privacy and high level of encryption.&lt;/p&gt;
&lt;p&gt;Russian communications watchdog Roskomnadzor said ProtonMail, which uses end-to-end encryption to protect user data, had been used to send fake, anonymous bomb threats.&lt;/p&gt;
&lt;p&gt;Such threats have frequently led to mass evacuations of public buildings across Russia.&lt;/p&gt;
&lt;p&gt;Roskomnadzor said that ProtonMail had refused to provide Russian authorities with information on the owners of email accounts allegedly associated with fake bomb threats.&lt;/p&gt;
&lt;p&gt;It said these had been sent via ProtonMail since last year and that incidence had increased this month after a similar service, Smartmail.com, was blocked.&lt;/p&gt;
&lt;p&gt;Protonmail denied having received any requests for assistance from Russian authorities and said the block would do nothing to stop bomb hoaxes but rather only limit ordinary Russians’ access to privacy in communications.&lt;/p&gt;
&lt;p&gt;“We have received reports that ProtonMail and ProtonVPN are currently partially blocked in Russia. We are reaching out to the appropriate authorities to get the block lifted as soon as possible,” it said in a statement.&lt;/p&gt;
&lt;p&gt;It said any perpetrators seeking to continue sending false bomb threats could resort to another email service or continue to access ProtonMail via a virtual private network (VPN).&lt;/p&gt;
&lt;p&gt;“We condemn this block as a misguided measure which only serves to harm ordinary people,” ProtonMail said.&lt;/p&gt;
&lt;p&gt;Russia has increasingly introduced restrictions on internet use, including requiring messaging services to share encryption keys with security services and asking social networks to store users’ personal data on servers within the country.&lt;/p&gt;
&lt;div class=&quot;Attribution_container&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;Attribution_attribution&quot; readability=&quot;7&quot;&gt;
&lt;p class=&quot;Attribution_content&quot;&gt;Reporting by Nadezhda Tsydenova; Writing by Polina Ivanova; Editing by Mark Heinrich&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;StandardArticleBody_trustBadgeContainer&quot;&gt;&lt;span class=&quot;StandardArticleBody_trustBadgeTitle&quot;&gt;Our Standards:&lt;/span&gt;&lt;span class=&quot;trustBadgeUrl&quot;&gt;&lt;a href=&quot;http://thomsonreuters.com/en/about-us/trust-principles.html&quot;&gt;The Thomson Reuters Trust Principles.&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
</description>
<pubDate>Wed, 29 Jan 2020 13:22:54 +0000</pubDate>
<dc:creator>novaRom</dc:creator>
<og:title>Russia blocks encrypted email service ProtonMail</og:title>
<og:url>https://www.reuters.com/article/us-russia-protonmail-idUSKBN1ZS1K8</og:url>
<og:type>article</og:type>
<og:description>Russia said on Wednesday it had blocked the Swiss email service ProtonMail, popu...</og:description>
<og:image>https://s4.reutersmedia.net/resources_v2/images/rcom-default.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.reuters.com/article/us-russia-protonmail/russia-blocks-encrypted-email-service-protonmail-idUSKBN1ZS1K8</dc:identifier>
</item>
</channel>
</rss>