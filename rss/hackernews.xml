<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>How are Unix pipes implemented?</title>
<link>https://toroid.org/unix-pipe-implementation</link>
<guid isPermaLink="true" >https://toroid.org/unix-pipe-implementation</guid>
<description>&lt;header readability=&quot;2.49&quot;&gt;
&lt;address class=&quot;h-card p-author&quot;&gt;By &lt;a rel=&quot;author&quot; class=&quot;p-name u-url&quot; href=&quot;//toroid.org&quot;&gt;Abhijit Menon-Sen&lt;/a&gt; &amp;lt;&lt;span class=&quot;u-email&quot;&gt;ams@toroid.org&lt;/span&gt;&amp;gt;&lt;/address&gt;
&lt;p&gt;&lt;time class=&quot;dt-published&quot; datetime=&quot;2020-03-23T19:47:55+0000&quot;&gt;2020-03-23&lt;/time&gt;, updated &lt;time class=&quot;dt-updated&quot; datetime=&quot;2020-03-27T12:46:27+0000&quot;&gt;2020-03-27&lt;/time&gt;&lt;/p&gt;
&lt;/header&gt;&lt;p&gt;This article is about how pipes are implemented the Unix kernel. I was a little disappointed that a recent article titled “&lt;a href=&quot;https://www.vegardstikbakke.com/how-do-pipes-work-sigpipe/&quot;&gt;How do Unix pipes work?&lt;/a&gt;” was &lt;em&gt;not&lt;/em&gt; about the internals, and curious enough to go digging in some old sources to try to answer the question.&lt;/p&gt;&lt;h2&gt;What are we talking about?&lt;/h2&gt;
&lt;p&gt;Pipes are not only a familiar sight in the Unix shell, but a defining characteristic of the Unix philosophy of composing small programs together:&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;
$ echo hello | wc -c
6
&lt;/pre&gt;
&lt;p&gt;This functionality depends on the kernel providing a system call named pipe, which is described by the &lt;a href=&quot;http://man7.org/linux/man-pages/man7/pipe.7.html&quot;&gt;pipe(7)&lt;/a&gt; and &lt;a href=&quot;http://man7.org/linux/man-pages/man2/pipe.2.html&quot;&gt;pipe(2)&lt;/a&gt; manual pages:&lt;/p&gt;
&lt;blockquote readability=&quot;12&quot;&gt;
&lt;p&gt;Pipes provide a unidirectional interprocess communication channel. A pipe has a read end and a write end. Data written to the write end of a pipe can be read from the read end of the pipe.&lt;/p&gt;
&lt;p&gt;A pipe is created using pipe(2), which returns two file descriptors, one referring to the read end of the pipe, the other referring to the write end.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Tracing the execution of the command above shows the creation of the pipe and the flow of data through it from one process to another:&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;
$ strace -qf -e execve,pipe,dup2,read,write \
    sh -c 'echo hello | wc -c'
&lt;/pre&gt;
&lt;p&gt;execve(&quot;/bin/sh&quot;, [&quot;sh&quot;, &quot;-c&quot;, &quot;echo hello | wc -c&quot;], …) &lt;strong&gt;pipe&lt;/strong&gt;([3, 4]) = 0&lt;/p&gt;
&lt;p&gt;[pid &lt;strong&gt;2604795&lt;/strong&gt;] dup2(4, 1) = 1 [pid 2604795] &lt;strong&gt;write&lt;/strong&gt;(1, &quot;hello\n&quot;, 6) = 6&lt;/p&gt;
&lt;p&gt;[pid &lt;strong&gt;2604796&lt;/strong&gt;] dup2(3, 0) = 0 [pid 2604796] execve(&quot;/usr/bin/wc&quot;, [&quot;wc&quot;, &quot;-c&quot;], …) [pid 2604796] &lt;strong&gt;read&lt;/strong&gt;(0, &quot;hello\n&quot;, 16384) = 6 [pid 2604796] write(1, &quot;6\n&quot;, 2) = 2&lt;/p&gt;
&lt;pre&gt;

&lt;/pre&gt;
&lt;p&gt;The parent process calls pipe() to obtain connected fds, one child writes to one fd and another reads the same data from the other fd. (The shell uses dup2 to &quot;rename&quot; fds 3 and 4 to match stdin and stdout.)&lt;/p&gt;
&lt;p&gt;Without pipes, the shell would have to write the output from one process to a file and arrange for the next process to read from it, at the expense of some overhead and some disk space — but pipes provide more than just the convenience of avoiding temporary files:&lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;If a process attempts to read from an empty pipe, then read(2) will block until data is available. If a process attempts to write to a full pipe (see below), then write(2) blocks until sufficient data has been read from the pipe to allow the write to complete.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This important property, along with the POSIX requirement that writing up to PIPE_BUF (at least 512) bytes into a pipe must be atomic, allows processes to communicate with each other over a pipe in a way that regular files (which have no such guarantees) could not support.&lt;/p&gt;
&lt;p&gt;With a regular file, a process could write all its output and hand it over to the next process, or they could operate in lock-step by using an external signalling mechanism (like a semaphore) to let each other know when they were done reading or writing. Pipes eliminate all this complexity.&lt;/p&gt;
&lt;h2&gt;What are we looking for?&lt;/h2&gt;
&lt;p&gt;A little hand-waving helps to imagine how pipes might work. You would need to allocate a memory buffer and some state, have functions to add and remove data from the buffer and some glue to invoke them through read and write operations on file descriptors, and sprinkle some locking on top to implement the special behaviour described above.&lt;/p&gt;
&lt;p&gt;We are now equipped to interrogate the kernel source under bright lights to confirm or deny this vague mental model, but always prepared to run into any surprises along the way.&lt;/p&gt;
&lt;p&gt;Incidentally, pipe is system call number 42 in the sysent[] table in Unix. Coincidence?&lt;/p&gt;
&lt;h2&gt;Where do we look?&lt;/h2&gt;
&lt;p&gt;I'm not sure where my (reprinted) copy of the famous “&lt;a href=&quot;https://en.wikipedia.org/wiki/Lions%27_Commentary_on_UNIX_6th_Edition,_with_Source_Code&quot;&gt;Lions book&lt;/a&gt;” with the source code of Unix 6ed is, but thanks to &lt;a href=&quot;https://www.tuhs.org&quot;&gt;The Unix Heritage Society&lt;/a&gt;, we can start by looking at even older &lt;a href=&quot;https://minnie.tuhs.org/UnixTree&quot;&gt;Unix sources&lt;/a&gt; online.&lt;/p&gt;
&lt;p&gt;(Browsing the TUHS archives is like being in a museum — not only does it provide a rare glimpse at our shared history, it also makes me appreciate the years of effort that went into recovering all of these materials bit by bit from old tapes and printed documentation, and acutely conscious of the parts that are still lost.)&lt;/p&gt;
&lt;p&gt;Once we've satisfied our curiosity about the ancient history of pipes, we can take a look at some modern kernels just for the contrast.&lt;/p&gt;
&lt;h2&gt;Traditional Unix kernels (1970–1974)&lt;/h2&gt;
&lt;p&gt;I can't find any trace of pipe(2) in &lt;a href=&quot;https://minnie.tuhs.org/cgi-bin/utree.pl?file=PDP7-Unix&quot;&gt;PDP-7 Unix&lt;/a&gt; from January 1970, nor in &lt;a href=&quot;https://minnie.tuhs.org/cgi-bin/utree.pl?file=V1&quot;&gt;First edition Unix&lt;/a&gt; from November 1971, nor in the incomplete sources of &lt;a href=&quot;https://minnie.tuhs.org/cgi-bin/utree.pl?file=V2&quot;&gt;Second edition Unix&lt;/a&gt; from June 1972.&lt;/p&gt;
&lt;p&gt;TUHS confirms that &lt;a href=&quot;https://minnie.tuhs.org/cgi-bin/utree.pl?file=V3&quot;&gt;Third edition Unix&lt;/a&gt; from February 1973 was the first version to include pipes:&lt;/p&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;The third edition of Unix was the last version with a kernel still written in assembly code, but is the first version to include pipes. For much of 1973, the existing Third Edition was maintained and improved, while the kernel was rewritten in C to become the Fourth Edition of Unix.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Unfortunately, the source code for the 3E kernel is no longer available, and although we do have the C source code for a version of the &lt;a href=&quot;https://minnie.tuhs.org/cgi-bin/utree.pl?file=V4&quot;&gt;Fourth edition Unix&lt;/a&gt; kernel from November 1973, it predates the official release by a few months, and is missing the pipe implementation. It is sad that the origin of such an iconic Unix feature is lost to us, perhaps forever.&lt;/p&gt;
&lt;p&gt;We do have the pipe(2) manpages from both releases, so we can start by looking at the documentation from &lt;a href=&quot;https://minnie.tuhs.org/cgi-bin/utree.pl?file=V3/man/man2/pipe.2&quot;&gt;3E&lt;/a&gt; (whose troff dialect still underlined words with a string of literal ^H backspaces followed by underscores!). This proto-pipe(2) written in assembly returned only one file descriptor, but provided the basic functionality that we expect:&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;The &lt;u&gt;pipe&lt;/u&gt; system call creates an I/O mechanism called a pipe. The file descriptor returned can be used in both read and write operations. When the pipe is written, the data is buffered up to 504 bytes at which time the writing process is suspended. A read on the pipe will pick up the buffered data.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;By next year, along with a rewrite of the kernel into C, the &lt;a href=&quot;https://minnie.tuhs.org/cgi-bin/utree.pl?file=V4/man/man2/pipe.2&quot;&gt;4E pipe(2)&lt;/a&gt; had assumed its modern form, with a prototype of &quot;pipe(fildes)&quot;:&lt;/p&gt;
&lt;blockquote readability=&quot;18&quot;&gt;
&lt;p&gt;The &lt;em&gt;pipe&lt;/em&gt; system call creates an I/O mechanism called a pipe. The file descriptors returned can be used in read and write operations. When the pipe is written using the descriptor returned in r1 (resp. fildes[1]), up to 4096 bytes of data are buffered before the writing process is suspended. A read using the descriptor returned in r0 (resp. fildes[0]) will pick up the data.&lt;/p&gt;
&lt;p&gt;It is assumed that after the pipe has been set up, two (or more) cooperating processes (created by subsequent &lt;em&gt;fork&lt;/em&gt; calls) will pass data through the pipe with &lt;em&gt;read&lt;/em&gt; and &lt;em&gt;write&lt;/em&gt; calls.&lt;/p&gt;
&lt;p&gt;The shell has a syntax to set up a linear array of processes connected by pipes.&lt;/p&gt;
&lt;p&gt;Read calls on an empty pipe (no buffered data) with only one end (all write file descriptors closed) return an end-of-file. Write calls under similar conditions are ignored.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So the earliest &lt;a href=&quot;https://minnie.tuhs.org/cgi-bin/utree.pl?file=V5/usr/sys/ken/pipe.c&quot;&gt;surviving pipe implementation&lt;/a&gt; is from &lt;a href=&quot;https://minnie.tuhs.org/cgi-bin/utree.pl?file=V5&quot;&gt;Fifth Edition Unix&lt;/a&gt; in June 1974, but it's nearly identical to what was in the next release, which also added some comments, so we might as well skip 5E too.&lt;/p&gt;
&lt;h2&gt;Sixth Edition Unix (1975)&lt;/h2&gt;
&lt;p&gt;As so many others have done in the past, &lt;a href=&quot;https://minnie.tuhs.org/cgi-bin/utree.pl?file=V6&quot;&gt;Sixth Edition Unix&lt;/a&gt; from May 1975 is where we start reading the Unix code. Sixth Edition sources are much more widely available than earlier versions, thanks largely to the Lions book:&lt;/p&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;For many years, the Lions book was the only Unix kernel documentation available outside Bell Labs. Although the license of 6th Edition allowed classroom use of the source code, the license of 7th Edition specifically excluded such use, so the book spread through illegal copy machine reproductions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can still buy a reprint of the book, featuring cover art with shifty-looking students at a photocopier, but thanks to Warren Toomey (who went on to start TUHS), you can also download &lt;a href=&quot;http://v6.cuzuco.com/&quot;&gt;a PDF of the 6E source&lt;/a&gt;. I can't resist a quick glimpse at the effort that went into making this PDF available:&lt;/p&gt;
&lt;blockquote readability=&quot;18&quot;&gt;
&lt;p&gt;Over 15 years ago I had produced a replica of the Lions' source code listing since I was unhappy with the quality of my n-th generation copy. There was no TUHS and I had no access to any old source code. But in 1988 I discovered an old 9-track tape being discarded of a PDP11 backup. It was hard to determine what it was running, but it did have an intact /usr/src/ tree of which most of the files were timesamped 1979, even at that time it seemed ancient. So it was either 7th edition or a derivative like PWB, which I believe it was.&lt;/p&gt;
&lt;p&gt;I used this as a basis and hand edited the source back into 6th edition form. Some code was completely the same, some required the easy edit of changing the modern += token into the archaic =+. Others needed to just remove casts, while some had to be completely retyped, but not that much.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now, decades later, we can just read the Sixth Edition source code online at TUHS, from an archive &lt;a href=&quot;http://minnie.tuhs.org/Archive/Distributions/Research/Dennis_v6/&quot;&gt;contributed by Dennis Ritchie&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Aside: at first glance, what is most striking about this pre-K&amp;amp;R C code is how &lt;em&gt;narrow&lt;/em&gt; it is. It's not often that I can include code listings without extensive editing to fit the relatively narrow body of my web site.&lt;/p&gt;
&lt;p&gt;There's an instructive comment near the top of &lt;a href=&quot;https://minnie.tuhs.org/cgi-bin/utree.pl?file=V6/usr/sys/ken/pipe.c&quot;&gt;/usr/sys/ken/pipe.c&lt;/a&gt; (and yes, there's also a &lt;a href=&quot;https://minnie.tuhs.org/cgi-bin/utree.pl?file=V6/usr/sys/dmr&quot;&gt;/usr/sys/dmr&lt;/a&gt;):&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;
/*
 * Max allowable buffering per pipe.
 * This is also the max size of the
 * file created to implement the pipe.
 * If this size is bigger than 4096,
 * pipes will be implemented in LARG
 * files, which is probably not good.
 */
#define PIPSIZ  4096
&lt;/pre&gt;
&lt;p&gt;The buffer size has not changed from 4E days, but here we can already see beyond the documented public interface — ancient pipes used a file to provide the backing storage!&lt;/p&gt;
&lt;p&gt;As for LARG files, they correspond to &lt;a href=&quot;https://minnie.tuhs.org/cgi-bin/utree.pl?file=V6/usr/sys/inode.h&quot;&gt;the ILARG inode flag&lt;/a&gt; used by the &quot;large addressing algorithm&quot; to handle &lt;a href=&quot;https://minnie.tuhs.org/cgi-bin/utree.pl?file=V6/usr/sys/ken/subr.c&quot;&gt;indirect blocks&lt;/a&gt; to support larger filesystems. If Ken says it would probably not be good to use them, I'm happy to take his word for it.&lt;/p&gt;
&lt;p&gt;Here's the actual pipe system call:&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;
/*
 * The sys-pipe entry.
 * Allocate an inode on the root device.
 * Allocate 2 file structures.
 * Put it all together with flags.
 */
pipe()
{
    register *ip, *rf, *wf;
    int r;

    ip = &lt;strong&gt;ialloc&lt;/strong&gt;(rootdev);
    if(ip == NULL)
        return;
    rf = &lt;strong&gt;falloc&lt;/strong&gt;();
    if(rf == NULL) {
        iput(ip);
        return;
    }
    r = u.u_ar0[R0];
    wf = &lt;strong&gt;falloc&lt;/strong&gt;();
    if(wf == NULL) {
        rf-&amp;gt;f_count = 0;
        u.u_ofile[r] = NULL;
        iput(ip);
        return;
    }
    &lt;strong&gt;u.u_ar0[R1]&lt;/strong&gt; = u.u_ar0[R0]; /* wf's fd */
    &lt;strong&gt;u.u_ar0[R0]&lt;/strong&gt; = r;           /* rf's fd */
    wf-&amp;gt;f_flag = FWRITE|FPIPE;
    wf-&amp;gt;f_inode = ip;
    rf-&amp;gt;f_flag = FREAD|FPIPE;
    rf-&amp;gt;f_inode = ip;
    ip-&amp;gt;i_count = 2;
    ip-&amp;gt;i_flag = IACC|IUPD;
    ip-&amp;gt;i_mode = IALLOC;
}
&lt;/pre&gt;
&lt;p&gt;The comment is quite clear about what's going on, but the code takes a bit of effort to follow, partly because of how the system call parameters and return values are passed in and out through the per-process “&lt;a href=&quot;https://minnie.tuhs.org/cgi-bin/utree.pl?file=V6/usr/sys/user.h&quot;&gt;struct user u&lt;/a&gt;” and the registers R0 and R1.&lt;/p&gt;
&lt;p&gt;We try to allocate &lt;a href=&quot;https://minnie.tuhs.org/cgi-bin/utree.pl?file=V6/usr/sys/inode.h&quot;&gt;an inode&lt;/a&gt; on disk &lt;a href=&quot;https://minnie.tuhs.org/cgi-bin/utree.pl?file=V6/usr/sys/ken/alloc.c&quot;&gt;using ialloc()&lt;/a&gt; and two &lt;a href=&quot;https://minnie.tuhs.org/cgi-bin/utree.pl?file=V6/usr/sys/file.h&quot;&gt;files&lt;/a&gt; in memory &lt;a href=&quot;https://minnie.tuhs.org/cgi-bin/utree.pl?file=V6/usr/sys/ken/fio.c&quot;&gt;using falloc()&lt;/a&gt;. If all goes well, we set flags to identify the files as two ends of a pipe, point them at the same inode (whose reference count becomes 2), and mark the inode as modified and in-use. (Note the &lt;a href=&quot;https://minnie.tuhs.org/cgi-bin/utree.pl?file=V6/usr/sys/ken/iget.c&quot;&gt;calls to iput()&lt;/a&gt; in the error paths, to decrement the reference count of the new inode.)&lt;/p&gt;
&lt;p&gt;pipe() must return the read and write file descriptor numbers via R0/R1. falloc() returns a pointer to a file structure, but also &quot;returns&quot; the fd via u.u_ar0[R0]. So the code saves the read fd in r and assigns the write fd directly from u.u_ar0[R0] after the second call to falloc().&lt;/p&gt;
&lt;p&gt;The FPIPE flag that we set during pipe creation controls the behaviour of the &lt;a href=&quot;https://minnie.tuhs.org/cgi-bin/utree.pl?file=V6/usr/sys/ken/sys2.c&quot;&gt;rdwr() function in sys2.c&lt;/a&gt;, which invokes the custom pipe I/O routines for pipes:&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;
/*
 * common code for read and write calls:
 * check permissions, set base, count, and offset,
 * and switch out to readi, writei, or pipe code.
 */
rdwr(mode)
{
        register *fp, m;

        m = mode;
        fp = getf(u.u_ar0[R0]);
        /* … */

        if(fp-&amp;gt;f_flag&amp;amp;FPIPE) {
                if(m==FREAD)
                        &lt;strong&gt;readp&lt;/strong&gt;(fp); else
                        &lt;strong&gt;writep&lt;/strong&gt;(fp);
        }
        /* … */
}
&lt;/pre&gt;
&lt;p&gt;Next in pipe.c is the readp() function to read from a pipe, but it's easier to follow the implementation by looking at writep() first. Once again, the oddities of the argument passing convention add some complexity, but we can gloss over some of the details.&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;
writep(fp)
{
    register *rp, *ip, c;

    rp = fp;
    ip = rp-&amp;gt;f_inode;
    c = u.u_count;

loop:
    /* If all done, return. */

    plock(ip);
    if(c == 0) {
        prele(ip);
        u.u_count = 0;
        return;
    }

    /*
     * If there are not both read and write sides of the
     * pipe active, return error and signal too.
     */

    if(ip-&amp;gt;i_count &amp;lt; 2) {
        prele(ip);
        u.u_error = EPIPE;
        psignal(u.u_procp, SIGPIPE);
        return;
    }

    /*
     * If the pipe is full, wait for reads to deplete
     * and truncate it.
     */

    if(ip-&amp;gt;i_size1 == PIPSIZ) {
        ip-&amp;gt;i_mode =| IWRITE;
        prele(ip);
        &lt;strong&gt;sleep(ip+1, PPIPE);&lt;/strong&gt;
        goto loop;
    }

    /* Write what is possible and loop back. */

    u.u_offset[0] = 0;
    u.u_offset[1] = ip-&amp;gt;i_size1;
    u.u_count = min(c, PIPSIZ-u.u_offset[1]);
    c =- u.u_count;
    &lt;strong&gt;writei&lt;/strong&gt;(ip);
    prele(ip);
    if(ip-&amp;gt;i_mode&amp;amp;IREAD) {
        ip-&amp;gt;i_mode =&amp;amp; ~IREAD;
        &lt;strong&gt;wakeup(ip+2);&lt;/strong&gt;
    }
    goto loop;
}
&lt;/pre&gt;
&lt;p&gt;On entry, we want to write u.u_count bytes into the pipe. First we acquire a lock on the inode (see below for more about plock/prele).&lt;/p&gt;
&lt;p&gt;Next, we check the inode's reference count. So long as the two ends of the pipe remain open, the reference count must remain 2. We hold one reference (from rp-&amp;gt;f_inode), so if the count is less than 2, it must mean that the reader closed their end. In other words, we're trying to write into a closed pipe, which is an error. 6E Unix is when the EPIPE error code and SIGPIPE signal were first introduced.&lt;/p&gt;
&lt;p&gt;Even if the pipe is still open, it may be full. In that case, we release the lock and go to sleep hoping that another process will create space in the pipe by reading from it. When we are woken up, we loop back to the start and try to acquire the lock and start another write cycle.&lt;/p&gt;
&lt;p&gt;If the pipe does have free space, we use &lt;a href=&quot;https://minnie.tuhs.org/cgi-bin/utree.pl?file=V6/usr/sys/ken/rdwri.c&quot;&gt;writei()&lt;/a&gt; to write out some data. The inode's i_size1 (which may be 0 for an empty pipe) points to the end of whatever data it already contains. If we have enough data to write, we can fill the pipe from i_size1 up to PIPESIZ. Then we release the lock and try to wake up any process that is waiting to read from the pipe. Finally, we loop back to the start to see if we managed to write out as many bytes as we wanted. If not, we start another write cycle.&lt;/p&gt;
&lt;p&gt;The inode's i_mode is normally used to hold r/w/x permissions, but for pipes the IREAD and IWRITE bits are used to indicate that some process is waiting to read from or write to the pipe, respectively. The process sets the flag and calls sleep(), expecting a matching wakeup() to be called by some other process in future.&lt;/p&gt;
&lt;p&gt;The real magic happens in sleep() and wakeup(), which are implemented in &lt;a href=&quot;https://minnie.tuhs.org/cgi-bin/utree.pl?file=V6/usr/sys/ken/slp.c&quot;&gt;slp.c&lt;/a&gt;, the source of the infamous “You are not expected to understand this” comment. Fortunately, we don't have to understand the code, just take a quick look at some other comments:&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;
/*
 * Give up the processor till a wakeup occurs
 * on chan, at which time the process
 * enters the scheduling queue at priority pri.
 * The most important effect of pri is that when
 * pri&amp;lt;0 a signal cannot disturb the sleep;
 * if pri&amp;gt;=0 signals will be processed.
 * Callers of this routine must be prepared for
 * premature return, and check that the reason for
 * sleeping has gone away.
 */
sleep(chan, pri) /* … */

/*
 * Wake up all processes sleeping on chan.
 */
wakeup(chan) /* … */
&lt;/pre&gt;
&lt;p&gt;A process that calls sleep() for a particular channel can be woken up later by another process calling wakeup() for the same channel. writep() and readp() coordinate their operations through matching pairs of these calls. (Note that pipe.c always uses PPIPE as the priority when calling sleep, so the sleeps are interruptible by signals.)&lt;/p&gt;
&lt;p&gt;Now we have everything we need to understand the readp() function:&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;
readp(fp)
int *fp;
{
    register *rp, *ip;

    rp = fp;
    ip = rp-&amp;gt;f_inode;

loop:
    /* Very conservative locking. */

    plock(ip);

    /*
     * If the head (read) has caught up with
     * the tail (write), reset both to 0.
     */

    if(rp-&amp;gt;f_offset[1] == ip-&amp;gt;i_size1) {
        if(rp-&amp;gt;f_offset[1] != 0) {
            rp-&amp;gt;f_offset[1] = 0;
            ip-&amp;gt;i_size1 = 0;
            if(ip-&amp;gt;i_mode&amp;amp;IWRITE) {
                ip-&amp;gt;i_mode =&amp;amp; ~IWRITE;
                &lt;strong&gt;wakeup(ip+1);&lt;/strong&gt;
            }
        }

        /*
         * If there are not both reader and
         * writer active, return without
         * satisfying read.
         */

        prele(ip);
        if(ip-&amp;gt;i_count &amp;lt; 2)
            return;
        ip-&amp;gt;i_mode =| IREAD;
        &lt;strong&gt;sleep(ip+2, PPIPE);&lt;/strong&gt;
        goto loop;
    }

    /* Read and return */

    u.u_offset[0] = 0;
    u.u_offset[1] = rp-&amp;gt;f_offset[1];
    &lt;strong&gt;readi&lt;/strong&gt;(ip);
    rp-&amp;gt;f_offset[1] = u.u_offset[1];
    prele(ip);
}
&lt;/pre&gt;
&lt;p&gt;It may help to read this function from the bottom upwards. The &quot;read and return&quot; branch is the common case, when there is some data in the pipe. If so, we use &lt;a href=&quot;https://minnie.tuhs.org/cgi-bin/utree.pl?file=V6/usr/sys/ken/rdwri.c&quot;&gt;readi()&lt;/a&gt; to read as much data as available from the current read f_offset onwards, and update the offset accordingly.&lt;/p&gt;
&lt;p&gt;On a subsequent read, the pipe is empty if the read offset has reached the inode's i_size1. We reset the positions to 0 and try to wake up any process that wants to write into the pipe. We know that writep() goes to sleep on on ip+1 when the pipe is full. Now that the pipe is empty, we can wake it up and allow it to resume its write loop.&lt;/p&gt;
&lt;p&gt;If there's nothing to read, readp() can set the IREAD flag and go to sleep on ip+2. We know that writep() will wake it up when it manages to write some data into the pipe.&lt;/p&gt;
&lt;p&gt;It's worth a quick look at the comments for &lt;a href=&quot;https://minnie.tuhs.org/cgi-bin/utree.pl?file=V6/usr/sys/ken/rdwri.c&quot;&gt;readi() and writei()&lt;/a&gt; to realise that, other than having to pass in the parameters through “u”, we can treat them as ordinary IO functions that take a file, a position, a memory buffer, and a count of bytes to read or write.&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;
/*
 * Read the file corresponding to
 * the inode pointed at by the argument.
 * The actual read arguments are found
 * in the variables:
 *      u_base          core address for destination
 *      u_offset        byte offset in file
 *      u_count         number of bytes to read
 *      u_segflg        read to kernel/user
 */
readi(aip)
struct inode *aip;
/* … */

/*
 * Write the file corresponding to
 * the inode pointed at by the argument.
 * The actual write arguments are found
 * in the variables:
 *      u_base          core address for source
 *      u_offset        byte offset in file
 *      u_count         number of bytes to write
 *      u_segflg        write to kernel/user
 */
writei(aip)
struct inode *aip;
/* … */
&lt;/pre&gt;
&lt;p&gt;As for the &quot;conservative&quot; locking, readp() and writep() hold a lock on the inode until they finish or yield (i.e., call wakeup). plock() and prele() are straightforward, with another matched set of sleep and wakeup calls to enable us to wakeup any process that wants a lock that we have just released:&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;
/*
 * Lock a pipe.
 * If its already locked, set the WANT bit and sleep.
 */
plock(ip)
int *ip;
{
    register *rp;

    rp = ip;
    while(rp-&amp;gt;i_flag&amp;amp;ILOCK) {
        rp-&amp;gt;i_flag =| IWANT;
        &lt;strong&gt;sleep(rp, PPIPE);&lt;/strong&gt;
    }
    rp-&amp;gt;i_flag =| ILOCK;
}

/*
 * Unlock a pipe.
 * If WANT bit is on, wakeup.
 * This routine is also used to unlock inodes in general.
 */
prele(ip)
int *ip;
{
    register *rp;

    rp = ip;
    rp-&amp;gt;i_flag =&amp;amp; ~ILOCK;
    if(rp-&amp;gt;i_flag&amp;amp;IWANT) {
        rp-&amp;gt;i_flag =&amp;amp; ~IWANT;
        &lt;strong&gt;wakeup(rp);&lt;/strong&gt;
    }
}
&lt;/pre&gt;
&lt;p&gt;I could not understand at first why readp() did not call prele(ip) before calling wakeup(ip+1). The first thing writep() does in its loop is plock(ip), which would deadlock if readp() still held its lock, so the code must have the right effect somehow. A quick glance at wakeup() showed that it only marks sleeping processes as runnable, and leaves it to a future sched() to actually start the process. So readp() calls wakeup(), releases its lock, sets IREAD, and calls sleep(ip+2) all before writep() resumes its loop.&lt;/p&gt;
&lt;p&gt;That's all there is to pipes in 6E. Simple code, far-reaching consequences.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://minnie.tuhs.org/cgi-bin/utree.pl?file=V7&quot;&gt;Seventh Edition Unix&lt;/a&gt; from January 1979 was a major new release (after a gap of four years) with many new applications and kernel features. It also featured widespread changes due to the use of K&amp;amp;R C with typecasts and unions and typed pointers to structs, but the &lt;a href=&quot;https://minnie.tuhs.org/cgi-bin/utree.pl?file=V7/usr/sys/sys/pipe.c&quot;&gt;pipe code&lt;/a&gt; hardly changed at all. We can skip it without missing anything exciting.&lt;/p&gt;
&lt;h2&gt;Xv6, a simple Unix-like kernel&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://pdos.csail.mit.edu/6.828/2019/xv6.html&quot;&gt;Xv6&lt;/a&gt; is a kernel inspired by Sixth Edition Unix, but written in modern C to run on x86 processors. It's simple to read and understand but, unlike the Unix sources from TUHS, you can also compile and modify and run it on something other than a PDP 11/70. For this reason, it is widely used by universities in Operation Systems courses. The &lt;a href=&quot;https://github.com/mit-pdos/xv6-public&quot;&gt;source code&lt;/a&gt; is available on Github.&lt;/p&gt;
&lt;p&gt;It has a clear and concise &lt;a href=&quot;https://github.com/mit-pdos/xv6-public/blob/master/pipe.c&quot;&gt;pipe.c implementation&lt;/a&gt; backed by a buffer in memory instead of an inode on disk. I reproduce only the definition of “struct pipe” and the pipealloc() function here:&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;
#define PIPESIZE 512

struct pipe {
  struct spinlock lock;
  char data[PIPESIZE];
  uint nread;     // number of bytes read
  uint nwrite;    // number of bytes written
  int readopen;   // read fd is still open
  int writeopen;  // write fd is still open
};

int
pipealloc(struct file **f0, struct file **f1)
{
  struct pipe *p;

  p = 0;
  *f0 = *f1 = 0;
  if((*f0 = filealloc()) == 0 || (*f1 = filealloc()) == 0)
    goto bad;
  if((p = (struct pipe*)kalloc()) == 0)
    goto bad;
  p-&amp;gt;readopen = 1;
  p-&amp;gt;writeopen = 1;
  p-&amp;gt;nwrite = 0;
  p-&amp;gt;nread = 0;
  initlock(&amp;amp;p-&amp;gt;lock, &quot;pipe&quot;);
  (*f0)-&amp;gt;type = FD_PIPE;
  (*f0)-&amp;gt;readable = 1;
  (*f0)-&amp;gt;writable = 0;
  (*f0)-&amp;gt;pipe = p;
  (*f1)-&amp;gt;type = FD_PIPE;
  (*f1)-&amp;gt;readable = 0;
  (*f1)-&amp;gt;writable = 1;
  (*f1)-&amp;gt;pipe = p;
  return 0;

 bad:
  if(p)
    kfree((char*)p);
  if(*f0)
    fileclose(*f0);
  if(*f1)
    fileclose(*f1);
  return -1;
}
&lt;/pre&gt;
&lt;p&gt;pipealloc() sets the stage for the rest of the implementation, comprising piperead(), pipewrite(), and pipeclose() functions. The actual system call, sys_pipe, is a wrapper implemented in &lt;a href=&quot;https://github.com/mit-pdos/xv6-public/blob/master/sysfile.c&quot;&gt;sysfile.c&lt;/a&gt;. I recommend reading the code in its entirety. It's about the same level of complexity as the 6E Unix source code, but much easier to go through, therefore more satisfying.&lt;/p&gt;
&lt;h2&gt;Linux 0.01&lt;/h2&gt;
&lt;p&gt;It's possible to find the Linux 0.01 source code, and it's instructive to look at its pipe implementation in fs/pipe.c too. It uses an inode to represent the pipe, but it's written in modern C. Having worked our way through the 6E code, it's not difficult to follow. Here's the write_pipe() function:&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;
int write_pipe(struct m_inode * inode, char * buf, int count)
{
    char * b=buf;

    wake_up(&amp;amp;inode-&amp;gt;i_wait);
    if (inode-&amp;gt;i_count != 2) { /* no readers */
        current-&amp;gt;signal |= (1&amp;lt;&amp;lt;(SIGPIPE-1));
        return -1;
    }
    while (count--&amp;gt;0) {
        while (PIPE_FULL(*inode)) {
            wake_up(&amp;amp;inode-&amp;gt;i_wait);
            if (inode-&amp;gt;i_count != 2) {
                current-&amp;gt;signal |= (1&amp;lt;&amp;lt;(SIGPIPE-1));
                return b-buf;
            }
            sleep_on(&amp;amp;inode-&amp;gt;i_wait);
        }
        ((char *)inode-&amp;gt;i_size)[PIPE_HEAD(*inode)] =
            get_fs_byte(b++);
        INC_PIPE( PIPE_HEAD(*inode) );
        wake_up(&amp;amp;inode-&amp;gt;i_wait);
    }
    wake_up(&amp;amp;inode-&amp;gt;i_wait);
    return b-buf;
}
&lt;/pre&gt;
&lt;p&gt;Even without looking up the structure definitions, we can understand the use of the inode reference count to check if a write should raise SIGPIPE. Other than operating byte-by-byte, it's easy to map this function to the ideas we saw earlier. Even the sleep_on/wake_up logic doesn't seem entirely foreign.&lt;/p&gt;
&lt;h2&gt;Modern kernels: Linux, FreeBSD, NetBSD, OpenBSD&lt;/h2&gt;
&lt;p&gt;I had a quick look at some modern kernels, and none of them uses an inode-based implementation any more (not surprisingly). Linux has its own implementation, of course, but although the three modern BSD kernels all have implementations derived from code written by John S. Dyson, they too have diverged from each other over the years.&lt;/p&gt;
&lt;p&gt;Reading through fs/pipe.c (on Linux) or sys/kern/sys_pipe.c (on *BSD) now takes real commitment. The code now needs to be concerned with performance and support for features like vectored and asynchronous IO, and the details of memory allocation, locking, and kernel configuration all vary considerably. Not at all the sort of thing a university would want for an introductory course.&lt;/p&gt;
&lt;p&gt;Nevertheless, I took some satisfaction in being able to recognise a few ancestral patterns (raising SIGPIPE and returning EPIPE when writing to a closed pipe, for example) in each of these very different modern kernels. I may never see a PDP-11 computer, but there are still useful lessons to learn from code that predates my own existence by a few years.&lt;/p&gt;
&lt;p&gt;Here's a presentation by Divye Kapoor on “&lt;a href=&quot;https://www.slideshare.net/divyekapoor/linux-kernel-implementation-of-pipes-and-fifos&quot;&gt;The Linux Kernel Implementation of Pipes and FIFOs&lt;/a&gt;” that explains how pipefs works. The slides are from 2011, but still applicable to the implementation today.&lt;/p&gt;
&lt;footer&gt;Tags: &lt;a class=&quot;p-category&quot; href=&quot;/etc/unix&quot;&gt;unix&lt;/a&gt; • Link: &lt;a href=&quot;https://toroid.org/unix-pipe-implementation&quot;&gt;toroid.org/unix-pipe-implementation&lt;/a&gt;&lt;/footer&gt;</description>
<pubDate>Fri, 27 Mar 2020 17:19:19 +0000</pubDate>
<dc:creator>Arnt</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://toroid.org/unix-pipe-implementation</dc:identifier>
</item>
<item>
<title>Apple releases new Covid-19 app and website based on CDC guidance</title>
<link>https://www.apple.com/newsroom/2020/03/apple-releases-new-covid-19-app-and-website-based-on-CDC-guidance/</link>
<guid isPermaLink="true" >https://www.apple.com/newsroom/2020/03/apple-releases-new-covid-19-app-and-website-based-on-CDC-guidance/</guid>
<description>&lt;div class=&quot;pagebody-copy&quot; readability=&quot;16.081081081081&quot;&gt;Apple today released a new screening tool and set of resources to help people stay informed and take the proper steps to protect their health during the spread of COVID-19, based on the latest CDC guidance. The new &lt;a href=&quot;https://www.apple.com/covid19/&quot; target=&quot;_blank&quot;&gt;COVID-19 website&lt;/a&gt;, and &lt;a href=&quot;https://itunes.apple.com/us/app/id1504132184/&quot; target=&quot;_blank&quot; data-analytics-exit-link=&quot;&quot;&gt;COVID-19 app&lt;/a&gt; available on the App Store, were created in partnership with the CDC,&lt;sup&gt;1&lt;/sup&gt; the White House Coronavirus Task Force and FEMA to make it easy for people across the country to get trusted information and guidance at a time when the US is feeling the heavy burden of COVID-19.&lt;/div&gt;
&lt;p&gt;The COVID-19 app and website allow users to answer a series of questions around risk factors, recent exposure and symptoms for themselves or a loved one. In turn, they will receive CDC recommendations on next steps, including guidance on social distancing and self-isolating, how to closely monitor symptoms, whether or not a test is recommended at this time, and when to contact a medical provider. This new screening tool is designed to be a resource for individuals and does not replace instructions from healthcare providers or guidance from state and local health authorities.&lt;/p&gt;
&lt;p&gt;The app and website also offer access to resources to help people stay informed and get the support they need. Users will receive answers to frequently asked questions about COVID-19, including who is most at risk and how to recognize symptoms. In addition, they will learn the most up-to-date information from the CDC like best practices for washing hands, disinfecting surfaces and monitoring symptoms. &lt;/p&gt;
</description>
<pubDate>Fri, 27 Mar 2020 16:03:16 +0000</pubDate>
<dc:creator>deepaksurti</dc:creator>
<og:type>article</og:type>
<og:title>Apple releases new COVID-19 app and website based on CDC guidance</og:title>
<og:description>Apple today released a new screening tool and resources to help people stay informed and protect their health during the spread of COVID-19.</og:description>
<og:url>https://www.apple.com/newsroom/2020/03/apple-releases-new-covid-19-app-and-website-based-on-CDC-guidance/</og:url>
<og:image>https://www.apple.com/newsroom/images/values/community-outreach/Apple_new-covid-19-app-macbook-pro-iphone-11-pro_03272020__LP_hero.jpg.og.jpg?202003271621</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.apple.com/newsroom/2020/03/apple-releases-new-covid-19-app-and-website-based-on-CDC-guidance/</dc:identifier>
</item>
<item>
<title>Show HN: Introvert – Generative artwork to keep you off your phone</title>
<link>https://iamintrovert.co</link>
<guid isPermaLink="true" >https://iamintrovert.co</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://iamintrovert.co&quot;&gt;https://iamintrovert.co&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=22703112&quot;&gt;https://news.ycombinator.com/item?id=22703112&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 239&lt;/p&gt;
&lt;p&gt;# Comments: 70&lt;/p&gt;
</description>
<pubDate>Fri, 27 Mar 2020 14:32:35 +0000</pubDate>
<dc:creator>ilyayudanov</dc:creator>
<og:type>website</og:type>
<og:url>https://iamintrovert.co/</og:url>
<og:image>https://d3n32ilufxuvd1.cloudfront.net/55f6a4cdec70d6e23e0de720/1417887/screenshot-a9bebcfa-932b-44cc-b75c-f3a41c2aa819_readyscr_1024.jpg</og:image>
<og:title>Introvert</og:title>
<og:description>Story of your uninterrupted time.</og:description>
<dc:format>text/html</dc:format>
<dc:identifier>https://iamintrovert.co/?_escaped_fragment_=</dc:identifier>
</item>
<item>
<title>Zoom needs to clean up its privacy act</title>
<link>https://blogs.harvard.edu/doc/2020/03/27/zoom/</link>
<guid isPermaLink="true" >https://blogs.harvard.edu/doc/2020/03/27/zoom/</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://blogs.harvard.edu/doc/2020/03/27/zoom/&quot;&gt;https://blogs.harvard.edu/doc/2020/03/27/zoom/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=22703000&quot;&gt;https://news.ycombinator.com/item?id=22703000&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 1262&lt;/p&gt;
&lt;p&gt;# Comments: 432&lt;/p&gt;
</description>
<pubDate>Fri, 27 Mar 2020 14:18:52 +0000</pubDate>
<dc:creator>seapunk</dc:creator>
<dc:identifier>https://blogs.harvard.edu/doc/2020/03/27/zoom/</dc:identifier>
</item>
<item>
<title>Singapore to Open Source Bluetooth Contact Tracing</title>
<link>https://bluetrace.io</link>
<guid isPermaLink="true" >https://bluetrace.io</guid>
<description>&lt;p&gt;TraceTogether's model of community-driven contact tracing is the first nationwide deployment of a Bluetooth contact tracing solution in the world. We are hopeful that TraceTogether can bring benefits to communities around the world in our common fight against COVID-19. We are heartened by the interest from governments, non-profits and companies looking to adapt TraceTogether for their communities.&lt;/p&gt;
&lt;p&gt;TraceTogether is built on the BlueTrace protocol, designed by the &lt;a href=&quot;https://hive.gov.sg&quot;&gt;Government Digital Services&lt;/a&gt; team at &lt;a href=&quot;https://tech.gov.sg&quot;&gt;Government Technology Agency of Singapore&lt;/a&gt;. Mobile apps and wearables (in the future) that deploy the BlueTrace protocol are able to blend decentralised and centralised models of contact tracing. The collection and logging of encounter/proximity data between devices that implement BlueTrace is done in a peer-to-peer, decentralised fashion, to preserve privacy. At the same time, the analysis and the provision of epidemic control guidance is done centrally by a trusted public health authority, committed to driving adoption. Sovereignty is respected through a federated model among a network of participating countries and public health authorities.&lt;/p&gt;
&lt;p&gt;COVID-19 and other novel viruses do not respect national boundaries. Neither should humanity's response. In a globalised world, with high volumes of international travel (until very recently 😢), any decentralised contact tracing solution will need mass adoption to maximise network effects. We believe that TraceTogether and its sister implementations should be inter-operable, and that's what we're building towards.&lt;/p&gt;
&lt;p&gt;These are big dreams, and success is not guaranteed. There are both technical and non-technical challenges that stand in the way.&lt;/p&gt;
&lt;p&gt;We are working around the clock to finalise our protocol reference documents and reference implementation, to open source what we have built, so that others may deploy their own flavours of TraceTogether - each implementing the BlueTrace protocol. We appreciate your patience in the meantime.&lt;/p&gt;
&lt;p&gt;Please stay tuned for more updates. You may also reach us for specific queries pertaining to collaborations and partnerships at: &lt;a href=&quot;mailto:partnerships@tracetogether.gov.sg&quot;&gt;partnerships@tracetogether.gov.sg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When we TraceTogether, we are safer together.&lt;/p&gt;
&lt;p&gt;- &lt;a href=&quot;https://hive.gov.sg&quot;&gt;Team TraceTogether&lt;/a&gt;&lt;br/&gt;&lt;em&gt;A team of thinkers and doers working with code, pixels and people&lt;/em&gt;&lt;br/&gt;&lt;em&gt;Helping citizens one line of code, one pixel, one user interview, and one idea at a time&lt;/em&gt;&lt;br/&gt;&lt;em&gt;#techforpublicgood&lt;/em&gt;&lt;/p&gt;
&lt;br/&gt;</description>
<pubDate>Fri, 27 Mar 2020 13:38:04 +0000</pubDate>
<dc:creator>jdkuepper</dc:creator>
<og:type>website</og:type>
<og:title>BlueTrace</og:title>
<og:url>https://www.bluetrace.io/</og:url>
<og:description>BlueTrace, a privacy-preserving technology for community-driven contact tracing.</og:description>
<og:image>https://www.bluetrace.io/img/bluetrace-og.png</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>https://bluetrace.io/</dc:identifier>
</item>
<item>
<title>The New York Times Releases Its Dataset of U.S. Confirmed Coronavirus Cases</title>
<link>https://www.nytco.com/press/the-new-york-times-releases-its-dataset-of-u-s-confirmed-coronavirus-cases/</link>
<guid isPermaLink="true" >https://www.nytco.com/press/the-new-york-times-releases-its-dataset-of-u-s-confirmed-coronavirus-cases/</guid>
<description>&lt;p&gt;Today, The New York Times has made one of the most comprehensive datasets of coronavirus cases in the United States &lt;a href=&quot;https://www.nytimes.com/article/coronavirus-county-data-us.html&quot;&gt;publicly available&lt;/a&gt; in response to requests from researchers, scientists, government officials and businesses who would like access to the data to better understand the virus and model what may come next.&lt;/p&gt;
&lt;p&gt;The Times initially began &lt;a href=&quot;https://www.nytimes.com/interactive/2020/us/coronavirus-us-cases.html&quot;&gt;tracking cases&lt;/a&gt; in late January after it became clear that no federal government agency was providing the public with an accurate, up-to-date record of cases, tracked to the county level, of people in the U.S. who had tested positive for the virus.&lt;/p&gt;
&lt;p&gt;The Times led effort has grown from a handful of correspondents to a team of several dozen journalists, including data scientists and student journalists from Northwestern University, the University of Missouri and the University of Nebraska-Lincoln, working around the clock to record details about every case. The Times is committed to collecting as much data as possible in connection with the outbreak and is collaborating with the University of California, Berkeley, on an effort in California.&lt;/p&gt;
&lt;p&gt;By Friday, March 27, The Times had tracked more than 85,000 cases in all 50 states, the District of Columbia and three U.S. territories, over the past eight weeks. More than 1,200 people in the U.S. have died so far.&lt;/p&gt;
&lt;p&gt;“We hope the dataset can help inform the ongoing public health response to the pandemic and ultimately, save lives,” said Dean Baquet, executive editor, The New York Times. “We believe the data may help reveal how Covid-19 has spread through communities and clusters; which geographic areas may be hit the hardest; and how its spread in hard-hit areas may offer clues for regions that could face wider outbreaks in the future.”&lt;/p&gt;
&lt;p&gt;Over months, our journalists have recorded the details on newly confirmed cases as reported by state and local officials. Early on, the number of cases was relatively low, and the cases mainly involved people who had traveled outside the United States. As testing, which had been delayed by a variety of problems, became more widely available, the number of confirmed cases grew quickly. The virus began to appear among Americans who had not traveled, demonstrating the virus spreading widely within the U.S.&lt;/p&gt;
&lt;p&gt;The Times dataset, which is available &lt;a href=&quot;https://www.nytimes.com/article/coronavirus-county-data-us.html&quot;&gt;here&lt;/a&gt;, can be used for noncommercial purposes with attribution.&lt;/p&gt;

</description>
<pubDate>Fri, 27 Mar 2020 13:19:55 +0000</pubDate>
<dc:creator>infodocket</dc:creator>
<og:image>https://nytco-assets.nytimes.com/2020/03/twitter-4.jpg</og:image>
<og:type>article</og:type>
<og:title>The New York Times Releases Its Dataset of U.S. Confirmed Coronavirus Cases | The New York Times Company</og:title>
<og:url>https://www.nytco.com/press/the-new-york-times-releases-its-dataset-of-u-s-confirmed-coronavirus-cases/</og:url>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.nytco.com/press/the-new-york-times-releases-its-dataset-of-u-s-confirmed-coronavirus-cases/</dc:identifier>
</item>
<item>
<title>Mycroft – An open-source voice assistant</title>
<link>https://mycroft.ai/</link>
<guid isPermaLink="true" >https://mycroft.ai/</guid>
<description>&lt;div class=&quot;wpb_wrapper&quot; readability=&quot;15&quot;&gt;
&lt;p&gt;&lt;span&gt;We believe the future of AI should be open, not a cryptic black box only few understand and have control over.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Building this new technology together, sharing ideas and building on top of each other—that’s how we see it.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;We promise to never sell your data or give you advertisements on our technology.&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Fri, 27 Mar 2020 12:08:37 +0000</pubDate>
<dc:creator>doener</dc:creator>
<og:title>Mycroft – Open Source Voice Assistant - Mycroft</og:title>
<og:url>https://mycroft.ai/</og:url>
<og:type>website</og:type>
<og:description>Mycroft is an open source voice assistant, that can be installed on Linux, Raspberry Pi, or on the Mark 1 hardware device. Our opensource skills are written in Python and we have a very friendly developer community. Come join us!</og:description>
<og:image>https://mycroft.ai/wp-content/uploads/2018/11/MarkII-102818.png</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://mycroft.ai/</dc:identifier>
</item>
<item>
<title>God be with you till we meet again (1918)</title>
<link>http://www.lettersofnote.com/2020/03/god-be-with-you-till-we-meet-again.html</link>
<guid isPermaLink="true" >http://www.lettersofnote.com/2020/03/god-be-with-you-till-we-meet-again.html</guid>
<description>&lt;img src=&quot;https://1.bp.blogspot.com/-HSrukXjOH1c/XmoKrJZSzbI/AAAAAAAAlUA/BXLrAcarDRc0cx1TygOpFNlOhLjeKOZ4ACLcBGAsYHQ/s1600/Screen%2BShot%2B2020-03-12%2Bat%2B10.08.14.png&quot;/&gt;&lt;p&gt;On September 29th, 1918, months before the end of &lt;a href=&quot;https://en.wikipedia.org/wiki/World_War_I&quot;&gt;World War I&lt;/a&gt;, a freshly assigned physician at &lt;a href=&quot;https://en.wikipedia.org/wiki/Fort_Devens&quot;&gt;Camp Devens&lt;/a&gt; military base in Massachusetts wrote the following letter to a friend and fellow doctor, and described a terrifying influenza epidemic that was now killing hundreds of his camp's soldiers each day. The death toll in this single camp would go on to reach 821. By October 1st, 75,000 cases had been recorded in Massachusetts alone, and by the end of 1920 this pandemic—now known as the &lt;a href=&quot;https://en.wikipedia.org/wiki/Spanish_flu&quot;&gt;Spanish flu&lt;/a&gt;—had killed tens of millions of people across the globe. It is thought that at least a quarter of the world's population were infected.&lt;/p&gt;&lt;p&gt;This letter was discovered in a trunk in 1959. Twenty years later, it was reprinted in the &lt;em&gt;British Medical Journal&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;(&lt;em&gt;Source: &lt;a href=&quot;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC1599810/?page=1&quot;&gt;British Medical Journal, 1979 Dec 22&lt;/a&gt;; Photo: Soldiers from Fort Riley, Kansas, ill with Spanish flu at a hospital ward at Camp Funston, via &lt;a href=&quot;https://www.flickr.com/photos/medicalmuseum/3300169510/&quot;&gt;National Museum of Health and Medicine&lt;/a&gt;.&lt;/em&gt;)&lt;/p&gt;&lt;div&gt;&lt;strong&gt;The Letter&lt;/strong&gt;&lt;/div&gt;

&lt;br/&gt;&lt;div&gt;
&lt;div&gt;
&lt;div&gt;Camp Devens, Mass.&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;Surgical Ward No 16&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;29 September 1918&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;(Base Hospital)&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br/&gt;My dear Burt—&lt;p&gt;It is more than likely that you would be interested in the news of this place, for there is a possibility that you will be assigned here for duty, so having a minute between rounds I will try to tell you a little about the situation here as I have seen it in the last week.&lt;/p&gt;&lt;p&gt;As you know, I have not seen much Pneumonia in the last few years in Detroit, so when I came here I was somewhat behind in the niceties of the Army way of intricate diagnosis. Also to make it good, I have had for the last week an exacerbation of my old &quot;Ear Rot&quot; as Artie Ogle calls it, and could not use a stethoscope at all, but had to get by on my ability to &quot;spot&quot; 'em thru my general knowledge of Pneumonias. I did well enough, and finally found an old Phonedoscope that I pieced together, and from then on was all right. You know the Army regulations require very close locations etc.&lt;/p&gt;&lt;p&gt;Camp Devens is near Boston, and has about 50,000 men, or did have before this epidemic broke loose. It also has the Base Hospital for the Div. of the N. East. This epidemic started about four weeks ago, and has developed so rapidly that the camp is demoralized and all ordinary work is held up till it has passed. All assemblages of soldiers taboo.&lt;/p&gt;&lt;p&gt;These men start with what appears to be an attack of LaGrippe or Influenza, and when brought to the Hosp. they very rapidly develop the most viscous type of Pneumonia that has ever been seen. Two hours after admission they have the Mahogany spots over the cheek bones, and a few hours later you can begin to see the Cyanosis extending from their ears and spreading all over the face, until it is hard to distinguish the coloured men from the white. It is only a matter of a few hours then until death comes, and it is simply a struggle for air until they suffocate. It is horrible. One can stand it to see one, two or twenty men die, but to see these poor devils dropping like flies sort of gets on your nerves. We have been averaging about 100 deaths per day, and still keeping it up. There is no doubt in my mind that there is a new mixed infection here, but what I don’t know. My total time is taken up hunting Rales, rales dry or moist, sibilant or crepitant or any other of the hundred things that one may find in the chest, they all mean but one thing here—Pneumonia—and that means in about all cases death.&lt;/p&gt;&lt;p&gt;The normal number of Drs. here is about 25 and that has been increased to over 250, all of whom (of course excepting me) have temporary orders—&quot;Return to your proper Station on completion of work&quot;—Mine says, &quot;Permanent Duty,&quot; but I have been in the Army just long enough to learn that it doesn’t always mean what it says. So I don’t know what will happen to me at the end of this.&lt;/p&gt;&lt;p&gt;We have lost an outrageous number of Nurses and Drs., and the little town of Ayer is a sight. It takes Special trains to carry away the dead. For several days there were no coffins and the bodies piled up something fierce, we used to go down to the morgue (which is just back of my ward) and look at the boys laid out in long rows. It beats any sight they ever had in France after a battle. An extra long barracks has been vacated for the use of the Morgue, and it would make any man sit up and take notice to walk down the long lines of dead soldiers all dressed up and laid out in double rows. We have no relief here; you get up in the morning at 5:30 and work steady till about 9:30 P.M., sleep, then go at it again. Some of the men of course have been here all the time, and they are TIRED.&lt;/p&gt;&lt;p&gt;If this letter seems to be somewhat disconnected overlook it, for I have been called away from it a dozen times, the last time just now by the Officer of the Day, who came in to tell me that they have not as yet found at any of the autopsies any case beyond the Red Hep. stage. It kills them before it gets that far.&lt;/p&gt;&lt;p&gt;I don’t wish you any hard luck Old Man but do wish you were here for a while at least. It’s more comfortable when one has a friend about. The men here are all good fellows, but I get so damned sick of Pneumonia that when I eat I want to find some fellow who will not &quot;Talk Shop&quot; but there aint none nohow. We eat it, live it, sleep it, and dream it, to say nothing of breathing it 16 hours a day. I would be very grateful indeed it you would drop me a line or two once in a while, and I will promise you that if you ever get into a fix like this, I will do the same for you.&lt;/p&gt;&lt;p&gt;Each man here gets a ward with about 150 beds (Mine has 168), and has an Asst. Chief to boss him, and you can imagine what the paper work alone is—fierce—and the Government demands all paper work be kept up in good shape. I have four day nurses and five night nurses (female) a ward-master, and four orderlies. So you can see that we are busy. I write this in piecemeal fashion. It may be a long time before I can get another letter to you, but will try.&lt;/p&gt;&lt;div&gt;Good By old Pal,&lt;/div&gt;
&lt;div&gt;&quot;God be with you till we meet again&quot;&lt;/div&gt;
&lt;div&gt;Keep the Bouells open,&lt;/div&gt;


</description>
<pubDate>Fri, 27 Mar 2020 07:50:35 +0000</pubDate>
<dc:creator>portobello</dc:creator>
<og:url>http://www.lettersofnote.com/2020/03/god-be-with-you-till-we-meet-again.html</og:url>
<og:title>God be with you till we meet again</og:title>
<og:description>On September 29th, 1918, months before the end of World War I , a freshly assigned physician at Camp Devens military base in Massachusett...</og:description>
<og:image>https://1.bp.blogspot.com/-HSrukXjOH1c/XmoKrJZSzbI/AAAAAAAAlUA/BXLrAcarDRc0cx1TygOpFNlOhLjeKOZ4ACLcBGAsYHQ/w1200-h630-p-k-no-nu/Screen%2BShot%2B2020-03-12%2Bat%2B10.08.14.png</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.lettersofnote.com/2020/03/god-be-with-you-till-we-meet-again.html</dc:identifier>
</item>
<item>
<title>Darling – Run macOS software on Linux</title>
<link>http://darlinghq.org/</link>
<guid isPermaLink="true" >http://darlinghq.org/</guid>
<description>&lt;pre class=&quot;terminal-box&quot;&gt;
&lt;span class=&quot;cwd&quot;&gt;~&lt;/span&gt; &lt;span class=&quot;prompt&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;command&quot;&gt;uname&lt;/span&gt;
&lt;span class=&quot;output&quot;&gt;Linux&lt;/span&gt;
&lt;span class=&quot;cwd&quot;&gt;~&lt;/span&gt; &lt;span class=&quot;prompt&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;command&quot;&gt;darling shell&lt;/span&gt;
&lt;span class=&quot;prompt&quot;&gt;Darling [&lt;/span&gt;&lt;span class=&quot;cwd&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;prompt&quot;&gt;]$&lt;/span&gt; &lt;span class=&quot;command&quot;&gt;uname&lt;/span&gt;
&lt;span class=&quot;output&quot;&gt;Darwin&lt;/span&gt;
&lt;/pre&gt;&lt;div class=&quot;intro&quot; readability=&quot;7&quot;&gt;

&lt;p&gt;Darling is a translation layer that lets you run macOS software on Linux&lt;/p&gt;
&lt;/div&gt;
&lt;ul class=&quot;features&quot; readability=&quot;5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p class=&quot;heading&quot;&gt;Fast&lt;/p&gt;
&lt;p&gt;Darling runs macOS software directly without using a hardware emulator.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p class=&quot;heading&quot;&gt;Free&lt;/p&gt;
&lt;p&gt;Like Linux, Darling is free and open-source software.&lt;br/&gt;It is developed openly on GitHub and distributed under the GNU GPL license version 3.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p class=&quot;heading&quot;&gt;Compatible&lt;/p&gt;
&lt;p&gt;Darling implements a complete Darwin environment. Mach, dyld, launchd — everything you'd expect.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p class=&quot;heading&quot;&gt;Easy to use&lt;/p&gt;
&lt;p&gt;Darling does most of the setup for you. Sit back and enjoy using your favorite software.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p class=&quot;heading&quot;&gt;Native&lt;/p&gt;
&lt;p&gt;We aim to fully integrate apps running under Darling into the Linux desktop experience by making them look, feel and behave just like native Linux apps.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2 class=&quot;faq&quot;/&gt;
&lt;ul class=&quot;faq&quot; readability=&quot;22.772029562251&quot;&gt;&lt;li readability=&quot;3.8011049723757&quot;&gt;
&lt;p class=&quot;heading&quot;&gt;That sounds a lot like &lt;a href=&quot;https://www.winehq.org/&quot;&gt;Wine&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And it is! Wine lets you run Windows software on Linux, and Darling does the same for macOS software. Another similar project is &lt;a href=&quot;https://anbox.io/&quot;&gt;Anbox&lt;/a&gt;, for Android apps.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;5&quot;&gt;
&lt;p class=&quot;heading&quot;&gt;Does it support GUI apps?&lt;/p&gt;
&lt;p&gt;Almost! This took us a lot of time and effort, but we finally have basic experimental support for running &lt;em&gt;simple&lt;/em&gt; graphical applications. It requires some special setup for now though, so do not expect it to work out of the box just yet. We're working on this; stay tuned!&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p class=&quot;heading&quot;&gt;Does it violate Apple's EULA?&lt;/p&gt;
&lt;p&gt;No! We only directly use those parts of Darwin that are released as fully free software.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p class=&quot;heading&quot;&gt;Does the name Darling mean anything?&lt;/p&gt;
&lt;p&gt;The name Darling is a combination of “Darwin” and “Linux”. Darwin is the core operating system macOS and iOS are based on.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1.8529411764706&quot;&gt;
&lt;p class=&quot;heading&quot;&gt;Can I run Darling on Windows using WSL?&lt;/p&gt;
&lt;p&gt;Unfortunately, no. Darling requires a real Linux kernel to run. See &lt;a href=&quot;https://github.com/darlinghq/darling/issues/260&quot;&gt;this issue&lt;/a&gt; for more details.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;6.9350649350649&quot;&gt;
&lt;p class=&quot;heading&quot;&gt;Do you know about &lt;a href=&quot;https://opensource.apple.com/&quot;&gt;opensource.apple.com&lt;/a&gt;, GNUstep, The Cocotron and other projects?&lt;/p&gt;
&lt;p&gt;We do, and in fact, Darling is largely based on the original Darwin source code published by Apple. We use The Cocotron as a basis for our Cocoa implementation, along with the &lt;a href=&quot;https://github.com/apportable/Foundation&quot;&gt;Apportable Foundation&lt;/a&gt; and various bits of GNUstep.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;5&quot;&gt;
&lt;p class=&quot;heading&quot;&gt;Do you have plans for supporting iOS apps?&lt;/p&gt;
&lt;p&gt;Yes, in the long run, we'd like to be able to run iOS apps on ARM devices (like most Android phones). A significant challenge here would be to write our own implementation of UIKit. Come talk to us if you're interested in working on this!&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2.6590909090909&quot;&gt;
&lt;p class=&quot;heading&quot;&gt;How do I contribute?&lt;/p&gt;
&lt;p&gt;Start by reading the &lt;a href=&quot;https://wiki.darlinghq.org&quot;&gt;documentation&lt;/a&gt; and &lt;a href=&quot;http://blog.darlinghq.org&quot;&gt;our blog&lt;/a&gt; to get familiar with Darling internals. Then, come and join us &lt;a href=&quot;https://github.com/darlinghq/darling&quot;&gt;on GitHub&lt;/a&gt;. It's great if you have experience in developing for macOS or iOS, but it's absolutely not required to start contributing.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Fri, 27 Mar 2020 04:08:09 +0000</pubDate>
<dc:creator>peter_d_sherman</dc:creator>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://darlinghq.org/</dc:identifier>
</item>
<item>
<title>Upgraded Google Glass helps autistic kids “see” emotions</title>
<link>https://spectrum.ieee.org/biomedical/bionics/upgraded-google-glass-helps-autistic-kids-see-emotions</link>
<guid isPermaLink="true" >https://spectrum.ieee.org/biomedical/bionics/upgraded-google-glass-helps-autistic-kids-see-emotions</guid>
<description>&lt;!-- Google Tag Manager (noscript) --&gt;&amp;#13;
&lt;noscript&gt;&amp;#13;
	&amp;#13;
&lt;/noscript&gt;&amp;#13;
&lt;!-- End Google Tag Manager (noscript) --&gt;&amp;#13;
	&amp;#13;
&amp;#13;
&amp;#13;
&amp;#13;
&amp;#13;
 &amp;#13;
&amp;#13;
&amp;#13;
&amp;#13;
&amp;#13;
&amp;#13;
&amp;#13;
&amp;#13;
&amp;#13;
&amp;#13;
&amp;#13;
&amp;#13;
&amp;#13;
&amp;#13;
&amp;#13;
	&amp;#13;
&amp;#13;
&amp;#13;
&amp;#13;
&amp;#13;
 &amp;#13;
&amp;#13;
&amp;#13;
&amp;#13;
&amp;#13;
	&lt;!-- 	&lt;script type=&quot;text/javascript&quot; src=&quot;/assets/static/js/splash.js&quot;&gt;&lt;/script&gt; --&gt;&lt;header id=&quot;header&quot;&gt;&lt;div id=&quot;ieee-metanav&quot;&gt;
			&lt;div class=&quot;common-wrap&quot;&gt;
				&lt;ul class=&quot;inline-list col-md-9 col-sm-6 col-xs-6 left-nav&quot;&gt;&lt;li&gt;&lt;a href=&quot;https://spectrum.ieee.org/static/enhance-your-spectrum-experience-become-an-ieee-member&quot;&gt;Join IEEE&lt;/a&gt;&lt;/li&gt;&amp;#13;
					&lt;li class=&quot;sep hide-mobile&quot;&gt;|&lt;/li&gt;&amp;#13;
					&lt;li class=&quot;hide-mobile&quot;&gt;&lt;a href=&quot;http://www.ieee.org&quot; target=&quot;_blank&quot;&gt;IEEE.org&lt;/a&gt;&lt;/li&gt;&amp;#13;
					&lt;li class=&quot;sep hide-mobile&quot;&gt;|&lt;/li&gt;&amp;#13;
					&lt;li class=&quot;hide-mobile&quot;&gt;&lt;a href=&quot;http://ieeexplore.ieee.org&quot; target=&quot;_blank&quot;&gt;IEEE &lt;em&gt;Xplore&lt;/em&gt; Digital Library&lt;/a&gt;&lt;/li&gt;&amp;#13;
					&lt;li class=&quot;sep hide-mobile&quot;&gt;|&lt;/li&gt;&amp;#13;
					&lt;li class=&quot;hide-mobile&quot;&gt;&lt;a href=&quot;http://standards.ieee.org&quot; target=&quot;_blank&quot;&gt;IEEE Standards&lt;/a&gt;&lt;/li&gt;&amp;#13;
					&lt;li class=&quot;sep hide-mobile&quot;&gt;|&lt;/li&gt;&amp;#13;
					&lt;li class=&quot;spec-link hide-mobile&quot;&gt;&lt;a href=&quot;https://spectrum.ieee.org/&quot;&gt;&lt;span&gt;IEEE Spectrum&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&amp;#13;
					&lt;li class=&quot;sep hide-mobile&quot;&gt;|&lt;/li&gt;&amp;#13;
					&lt;li class=&quot;hide-mobile&quot;&gt;&lt;a href=&quot;http://www.ieee.org/sitemap&quot; target=&quot;_blank&quot;&gt;More Sites&lt;/a&gt;&lt;/li&gt;&amp;#13;
					&amp;#13;
				&lt;/ul&gt;&lt;div class=&quot;col-md-3 col-sm-4 col-xs-4 right-nav&quot;&gt;
				&lt;ul class=&quot;inline-list right-nav-elem&quot;&gt;&lt;li&gt;&lt;a class=&quot;create-account&quot; href=&quot;https://www.ieee.org/profile/public/createwebaccount/showCreateAccount.html?sourceCode=spectrum&amp;amp;signinurl=&amp;#13;&amp;#10;&amp;#9;&amp;#9;&amp;#9;&amp;#9;&amp;#9;&amp;#9;&amp;#9;&amp;#9;&amp;#9;&amp;#9;https://spectrum.ieee.org/user/login&amp;amp;url=https://spectrum.ieee.org/biomedical/bionics/upgraded-google-glass-helps-autistic-kids-see-emotions&amp;amp;autoSignin=Y&amp;amp;car=IEEE-Spectrum&quot;&gt;Create&amp;#13;
											Account&lt;/a&gt;&lt;/li&gt;&amp;#13;
									&amp;#13;
											&amp;#13;
								&amp;#13;
								&lt;li class=&quot;sep&quot;&gt;|&lt;/li&gt;&amp;#13;
								&amp;#13;
									&amp;#13;
									&lt;li&gt;&lt;a class=&quot;sign-in&quot; href=&quot;https://spectrum.ieee.org/user/login&quot;&gt;Sign In&lt;/a&gt;&lt;/li&gt;&amp;#13;
									&amp;#13;
									&amp;#13;
									&amp;#13;
							&amp;#13;
							&amp;#13;
						&amp;#13;
					&amp;#13;
					&lt;/ul&gt;&lt;/div&gt;
		&lt;/div&gt;
	&lt;/div&gt;&amp;#13;
&amp;#13;
    &lt;/header&gt;&lt;!--/header--&gt;&lt;section class=&quot;col-med-12columns col-xs-12columns&quot;&gt;&lt;app-root&gt;&amp;#13;
			&lt;/app-root&gt;&lt;/section&gt;&lt;!-- END Parsely Include --&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/cookieconsent2/3.0.3/cookieconsent.min.css&quot;/&gt;</description>
<pubDate>Fri, 27 Mar 2020 01:05:08 +0000</pubDate>
<dc:creator>sohkamyung</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://spectrum.ieee.org/biomedical/bionics/upgraded-google-glass-helps-autistic-kids-see-emotions</dc:identifier>
</item>
</channel>
</rss>