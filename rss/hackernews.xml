<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Elon Musk reopening Tesla factory despite Alameda County order</title>
<link>https://twitter.com/elonmusk/status/1259945593805221891</link>
<guid isPermaLink="true" >https://twitter.com/elonmusk/status/1259945593805221891</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://twitter.com/elonmusk/status/1259945593805221891&quot;&gt;https://twitter.com/elonmusk/status/1259945593805221891&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=23146897&quot;&gt;https://news.ycombinator.com/item?id=23146897&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 206&lt;/p&gt;
&lt;p&gt;# Comments: 103&lt;/p&gt;
</description>
<pubDate>Mon, 11 May 2020 20:50:02 +0000</pubDate>
<dc:creator>heshiebee</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://mobile.twitter.com/elonmusk/status/1259945593805221891</dc:identifier>
</item>
<item>
<title>NY launches live dashboard of each regions progress hitting 7 reopening criteria</title>
<link>https://forward.ny.gov/regional-monitoring-dashboard</link>
<guid isPermaLink="true" >https://forward.ny.gov/regional-monitoring-dashboard</guid>
<description>&lt;div readability=&quot;41.453065653825&quot;&gt;&lt;span&gt;&lt;u&gt;Description of Metrics:&lt;/u&gt;&lt;/span&gt;

These metrics have been established based on guidance from the Center for Disease Control and Prevention, the World Health Organization, the U.S. Department of State, and other public health experts. For more information, &lt;a href=&quot;http://governor.ny.gov/nyforwardbook&quot;&gt;read the NY Forward Book&lt;/a&gt;.

&lt;span&gt;Metric #1—Decline in Total Hospitalizations.&lt;/span&gt; Region must show a sustained decline in the three-day rolling average of total net hospitalizations (the total number of people in the hospital each day) over the course of a 14-day period. Alternatively, regions can satisfy this metric if the daily net increase in total hospitalizations (measured on a 3-day rolling average) has never exceeded 15.

&lt;span&gt;Metric #2—Decline in Deaths.&lt;/span&gt; Region must show a sustained decline in the three-day rolling average of daily hospital deaths over the course of a 14-day period. Alternatively, regions can satisfy this metric if the three-day rolling average of daily new hospital deaths has never exceeded 5.

&lt;span&gt;Metric #3—New Hospitalizations.&lt;/span&gt; Region must experience fewer than 2 new hospitalizations per 100,000 residents, measured on a three-day rolling average. New hospitalizations include both new admissions and prior admissions subsequently confirmed as positive COVID cases.

&lt;span&gt;Metric #4—Hospital Bed Capacity.&lt;/span&gt; Regions must have at least 30% of their hospital beds available.

&lt;span&gt;Metric #5—ICU Bed Capacity.&lt;/span&gt; Regions must have at least 30% of their ICU beds available.

&lt;span&gt;Metric #6—Diagnostic Testing Capacity.&lt;/span&gt; Average daily diagnostic testing over the past 7 days must be sufficient to conduct 30 tests per 1,000 residents per month.

&lt;span&gt;Metric #7—Contact Tracing Capacity.&lt;/span&gt; Number of contact tracers in each region must meet thresholds set by the Department of Health, in collaboration with the Johns Hopkins University School of Public Health and Vital Strategies.&lt;/div&gt;
</description>
<pubDate>Mon, 11 May 2020 20:02:11 +0000</pubDate>
<dc:creator>KoftaBob</dc:creator>
<og:title>Regional Monitoring Dashboard</og:title>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://forward.ny.gov/regional-monitoring-dashboard</dc:identifier>
</item>
<item>
<title>Bitcoin Halving Just Occured</title>
<link>https://www.blockchain.com/btc/block/000000000000000000024bead8df69990852c202db0e0097c1a12ea637d7e96d</link>
<guid isPermaLink="true" >https://www.blockchain.com/btc/block/000000000000000000024bead8df69990852c202db0e0097c1a12ea637d7e96d</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://www.blockchain.com/btc/block/000000000000000000024bead8df69990852c202db0e0097c1a12ea637d7e96d&quot;&gt;https://www.blockchain.com/btc/block/000000000000000000024bead8df69990852c202db0e0097c1a12ea637d7e96d&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=23146024&quot;&gt;https://news.ycombinator.com/item?id=23146024&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 426&lt;/p&gt;
&lt;p&gt;# Comments: 486&lt;/p&gt;
</description>
<pubDate>Mon, 11 May 2020 19:32:17 +0000</pubDate>
<dc:creator>3ds</dc:creator>
<og:url>https://www.blockchain.com/explorer</og:url>
<og:type>website</og:type>
<og:title>Blockchain.com Explorer | BTC | ETH | BCH</og:title>
<og:description>The easiest and most trusted transaction search engine and block explorer.</og:description>
<og:image>https://www.blockchain.com/explorer-frontend/static/explorer_og.png</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.blockchain.com/btc/block/000000000000000000024bead8df69990852c202db0e0097c1a12ea637d7e96d</dc:identifier>
</item>
<item>
<title>We at $Famous_company switched to $Hyped_technology</title>
<link>https://saagarjha.com/blog/2020/05/10/why-we-at-famous-company-switched-to-hyped-technology/</link>
<guid isPermaLink="true" >https://saagarjha.com/blog/2020/05/10/why-we-at-famous-company-switched-to-hyped-technology/</guid>
<description>&lt;p&gt;When $FAMOUS_COMPANY launched in 2010, it ran on a single server in $TECHBRO_FOUNDER’s garage. Since then, we’ve experienced explosive VC-funded growth and today we have hundreds of millions of daily active users (DAUs) from all around the globe accessing our products from our mobile apps and on $famouscompany.com. We’ve since made a couple of panic-induced changes to our backend to manage our technical debt (usually right after a high-profile outage) to keep our servers from keeling over. Our existing technology stack has served us well for all these years, but as we seek to grow further it’s clear that a complete rewrite of our application is something which will somehow prevent us from losing two billion dollars a year on customer acquisition.&lt;/p&gt;&lt;h2 id=&quot;why-switch&quot;&gt;Why switch?&lt;/h2&gt;
&lt;p&gt;As we’ve mentioned in previous blog posts, the $FAMOUS_COMPANY backend has historically been developed in $UNREMARKABLE_LANGUAGE and architected on top of $PRACTICAL_OPEN_SOURCE_FRAMEWORK. To suit our unique needs, we designed and open-sourced $AN_ENGINEER_TOOK_A_MYTHOLOGY_CLASS, a highly-available, just-in-time compiler for $UNREMARKABLE_LANGUAGE. Even with our custom runtime, however, we eventually began seeing sporadic spikes in our 99th percentile latency statistics, which grew ever more pronounced as we scaled up to handle our increasing DAU count. Luckily, all of our software is designed from the ground up for introspectability, and using &lt;del&gt;some BPF scripts we copied from Brendan Gregg’s website&lt;/del&gt; our in-house profiling tools $FAMOUS_COMPANY engineers determined that the performance bottlenecks were a result of time spent in the garbage collector.&lt;/p&gt;
&lt;p&gt;Initially, we tried messing with some garbage collector parameters we didn’t really understand, but to our surprise that didn’t magically solve our problems so instead we disabled garbage collection altogether. This increased our memory usage, but our automatic on-demand scaler handled this for us, as the graph below shows:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://saagarjha.com/blog/2020/05/10/why-we-at-famous-company-switched-to-hyped-technology/MoarAWS.png&quot; alt=&quot;The inevitable conclusion of scalable architecture&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Ultimately, however, our decision to switch was driven by our difficulty in hiring new talent for $UNREMARKABLE_LANGUAGE, despite it being taught in dozens of universities across the United States. Our blog posts on $PRACTICAL_OPEN_SOURCE_FRAMEWORK seemed to get fewer upvotes when posted on Reddit as well, cementing our conviction that our technology stack was now legacy code.&lt;/p&gt;
&lt;h2 id=&quot;pivoting-to-a-new-stack&quot;&gt;Pivoting to a new stack&lt;/h2&gt;
&lt;p&gt;We knew we needed to find something that could keep up with us at $FAMOUS_COMPANY scale. We evaluated a number of promising alternatives that we selected and ranked based on the how many bullet points they had on their websites, how often they’d appear on the front page of Hacker News, and a spreadsheet of important language characteristics (performance, efficiency, community, ease-of-use) that we had people in the office fill out.&lt;/p&gt;
&lt;aside class=&quot;aside-fun-fact&quot; readability=&quot;4&quot;&gt;&lt;p class=&quot;aside-type&quot;&gt;Fun fact&lt;/p&gt;
&lt;p class=&quot;aside-content&quot;&gt;As our spreadsheet met strong statistical guarantees of randomness, we were able to reuse it to replace our application’s CSPRNG.&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;After careful consideration, we settled on rearchitecting our platform to use $FLASHY_LANGUAGE and $HYPED_TECHNOLOGY. Not only is $FLASHY_LANGUAGE popular according to the Stack Overflow developer survey, it’s also cross platform; we’re using it to reimplement our mobile apps as well. Rewriting our core infrastructure was fairly straightforward: as we have more engineers than we could possibly ever need or even know what to do with, we simply put a freeze on handling bug reports and shifted our effort to $HYPED_TECHNOLOGY instead. We originally had some trouble with adapting to some of $FLASHY_LANGUAGE’s quirks, and ran into a couple of bugs with $HYPED_TECHNOLOGY, but overall their powerful new features let us remove some of the complexity that our previous solution had to handle.&lt;/p&gt;
&lt;p&gt;Deploying the changes without downtime required some careful planning, but this was also not too difficult: we just hardcoded the status page to not update whenever we pushed new changes, keeping users guessing if our service was up or not. Managing incremental rollout was key: we aggressively A/B tested the new code. Our internal studies showed that gaslighting users by showing them a completely new interface once in a while and then switching back to the old one the next time they loaded a page increases user engagement, so we made sure to implement such a system based on a Medium article we found that had something to do with multi-armed bandits.&lt;/p&gt;
&lt;p&gt;With our rewrite now complete and rolled out to all of our customers, we think the effort has been a massive success for us and our team. We have measured our performance and you can see a summary of the results below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://saagarjha.com/blog/2020/05/10/why-we-at-famous-company-switched-to-hyped-technology/Stonks.png&quot; alt=&quot;Stonks&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Every metric that matters to us has increased substantially from the rewrite, and we even identified some that were no longer relevant to us, such as number of bugs, user frustration, and maintenance cost. Today we are making some of the code that we can afford to open source available on our GitHub page. It is useless by itself and is heavily tied to our infrastructure, but you can star it to make us seem more relevant.&lt;/p&gt;
&lt;h2 id=&quot;final-thoughts&quot;&gt;Final thoughts&lt;/h2&gt;
&lt;p&gt;It’s often said that completely rewriting software is fraught with peril, but we at $FAMOUS_COMPANY like to take big bets, and it’s clear that this one has paid off handsomely. While we focused on our backend changes in this blog post, as we mentioned before we are using $FLASHY_LANGUAGE in our mobile apps as well, since we don’t have the resources to write native applications for each platform. Unfortunately &lt;del&gt;to increase lock-in&lt;/del&gt; these rewrites also mean we will be deprecating third-party API access to our services. We know some of our users relied on these interfaces for accessibility reasons, but we at $FAMOUS_COMPANY are dedicated to improving our services for those with disabilities as long as you aren’t using any sort of assistive technologies, which no longer work at all with our apps.&lt;/p&gt;
&lt;p&gt;We hope that you internalize our company’s anecdote as some sort of ground truth and show it to your company’s CTO so they too can consider redesigning their architecture like we have done. We know you’ll ignore the fact that you’re not us and we have enough engineers and resources to do whatever we like, but the decision will ruin your startup so it’s not like we’ll see &lt;em&gt;your&lt;/em&gt; blog posts about your experience with $HYPED_TECHNOLOGY anytime soon. If you’re not in a position to influence what your company uses, you can still bring it up for point-scoring the next time a language war comes up.&lt;/p&gt;
&lt;p&gt;If you’re reading this and are interested in $HYPED_TECHNOLOGY like we are, we are hiring! Be sure to check out our jobs page, where there will be zero positions related to $FLASHY_LANGUAGE.&lt;/p&gt;
</description>
<pubDate>Mon, 11 May 2020 17:06:41 +0000</pubDate>
<dc:creator>gok</dc:creator>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://saagarjha.com/blog/2020/05/10/why-we-at-famous-company-switched-to-hyped-technology/</dc:identifier>
</item>
<item>
<title>Webrecorder: Make an interactive copy of any web page that you browse</title>
<link>https://webrecorder.io/</link>
<guid isPermaLink="true" >https://webrecorder.io/</guid>
<description>&lt;h3&gt;Capture Complex Webpages&lt;/h3&gt;
&lt;p&gt;Webrecorder takes a new approach to web archiving by capturing (&quot;recording&quot;) network traffic and processes within the browser while you interact with a web page. Unlike conventional crawler-based web archiving methods, this allows even intricate websites, such as those with embedded media, complex Javascript, user-specific content and interactions, and other dynamic elements, to be captured and faithfully restaged.&lt;/p&gt;
</description>
<pubDate>Mon, 11 May 2020 16:56:43 +0000</pubDate>
<dc:creator>pcr910303</dc:creator>
<og:title>Webrecorder</og:title>
<og:description>Create high-fidelity, interactive web archives of any web site you browse.</og:description>
<og:image>https://webrecorder.io/static/webrecorder-social.png</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://webrecorder.io/</dc:identifier>
</item>
<item>
<title>Teensy 4.1 Development Board</title>
<link>https://www.pjrc.com/store/teensy41.html</link>
<guid isPermaLink="true" >https://www.pjrc.com/store/teensy41.html</guid>
<description>&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; readability=&quot;1.5&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;

&lt;/td&gt;
&lt;td&gt;TEENSY41&lt;/td&gt;
&lt;td&gt;Teensy USB Board, Version 4.1&lt;/td&gt;
&lt;td&gt;$26.85&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Recommended Accessories: &lt;a href=&quot;https://www.pjrc.com/store/cable_usb_micro_b.html&quot;&gt;USB Cable&lt;/a&gt;, &lt;a href=&quot;https://www.pjrc.com/store/header_24x1.html&quot;&gt;Pins 24x1&lt;/a&gt; (2), &lt;a href=&quot;https://www.pjrc.com/store/psram.html&quot;&gt;8MB PSRAM&lt;/a&gt;, &lt;a href=&quot;https://www.pjrc.com/store/cable_usb_host_t36.html&quot;&gt;USB Host Cable&lt;/a&gt;&lt;/p&gt;

&lt;table align=&quot;center&quot; border=&quot;1&quot; readability=&quot;1.5&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;table&gt;&lt;tr&gt;&lt;td&gt;Inventory Status:&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;In Stock&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Last physical count:&lt;/td&gt;
&lt;td&gt;May 10, 2020&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Teensy 4.1 features the fastest micocontroller and an expanded set of powerful peripherals in a 2.4 by 0.7 inch form factor.&lt;br /&gt;&lt;img src=&quot;https://forum.pjrc.com/teensy41_4.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Teensy 4.0 can be programmed using the Arduino IDE with &lt;a href=&quot;https://www.pjrc.com/teensy/td_download.html&quot;&gt;Teensyduino add-on&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Technical Specifications Compared to Teensy 4.0&lt;/h2&gt;
Teensy 4.1 &amp;amp; 4.0 use the same IMXRT1062, so most technical specifications are the same.
&lt;p&gt;Please refer to the &lt;a href=&quot;https://www.pjrc.com/store/teensy40.html&quot;&gt;Teensy 4.0 page for common specifications and features&lt;/a&gt;.&lt;/p&gt;
&lt;table cellpadding=&quot;4&quot; readability=&quot;2.9200968523002&quot;&gt;&lt;tr class=&quot;top&quot;&gt;&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Teensy 4.1&lt;/th&gt;
&lt;th&gt;Teensy 4.0&lt;/th&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;1.5510204081633&quot;&gt;&lt;td&gt;Ethernet&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;10 / 100 Mbit&lt;br /&gt;&lt;a href=&quot;http://www.ti.com/product/DP83825I&quot;&gt;DP83825 PHY&lt;/a&gt;&lt;br /&gt;(6 pins)&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-none-&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;USB Host&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;5 Pins with&lt;br /&gt;power management&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;2 SMT Pads&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;SDIO (4 bit data)&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Micro SD Socket&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;8 SMT Pads&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;PWM Pins&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;35&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;31&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;Analog Inputs&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;18&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;14&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;Serial Ports&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;8&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;7&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;Flash Memory&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;8 Mbyte&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;2 Mbyte&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;QSPI Memory&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;2 chips&lt;br /&gt;Plus Program Memory&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Program memory only&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;Breadboard Friendly I/O&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;42&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;24&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;Bottom SMT Pad Signals&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;7&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;16&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;SD Card Signals&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;6&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;0&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;Total I/O Pins&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;55&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;40&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;h2&gt;Pinouts&lt;/h2&gt;
Teensy 4.1 is designed to bring all general purpose I/O pins to breadboard friendly pads on the outside edges.
&lt;p&gt;&lt;img src=&quot;https://forum.pjrc.com/teensy41_card.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;Ethernet&lt;/h2&gt;
To use the Ethernet port, a magjack and capacitor need to be connected.
&lt;p&gt;This is currently available only as a DIY project using this &lt;a href=&quot;https://oshpark.com/shared_projects/5epewE3O&quot;&gt;OSH Park Shared Circuit Board&lt;/a&gt;. PJRC is planning to offer this as a DIY kit in the near future.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://forum.pjrc.com/teensy41_ethernet2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;These parts are recommended to build the Ethenet connection.&lt;/p&gt;
&lt;pre&gt;
1   Ethernet Magjack            RB1-125BAG1A, &lt;a href=&quot;https://www.mouser.com/ProductDetail/WIZnet/RB1-125BAG1A?qs=%2Fha2pyFaduh9RDg8pgU8BdWB7zkJXpctZn6OYAS4fuGzPJf1NpWsDw%3D%3D&quot;&gt;Mouser 950-RB1-125BAG1A&lt;/a&gt;, &lt;a href=&quot;https://www.digikey.com/products/en?keywords=1278-1011-ND&quot;&gt;Digikey 1278-1011-ND&lt;/a&gt;
2   Header, 3x2, 2mm pitch      &lt;a href=&quot;https://www.digikey.com/products/en?keywords=1849-1000-ND&quot;&gt;Digikey 1849-1000-ND&lt;/a&gt;
2   Socket, 3x2, 2mm pitch      Amphenol FCI 89361-706LF, &lt;a href=&quot;https://www.digikey.com/products/en?keywords=609-3139-ND&quot;&gt;Digikey 609-3139-ND&lt;/a&gt;
1   Ribbon Cable, 3 to 6 inch   &lt;a href=&quot;https://www.digikey.com/products/en?keywords=HF06S-5-ND&quot;&gt;Digikey HF06S-5-ND&lt;/a&gt;
1   Capacitor, 0.1uF, 805
1   Capacitor, 1uF, 805         probably not needed
1   Capacitor, 1nF, 805         optional, should be high voltage rated if used
1   Resistor, 1M                optional
1   Circuit Board               &lt;a href=&quot;https://oshpark.com/shared_projects/5epewE3O&quot;&gt;OSH Park Shared PCB&lt;/a&gt;
&lt;/pre&gt;
&lt;h2&gt;Memory Expansion&lt;/h2&gt;
The bottom side of Teensy 4.1 has locations to solder 2 memory chips. &lt;img src=&quot;https://forum.pjrc.com/teensy41_2.jpg&quot; alt=&quot;&quot; /&gt;&lt;p&gt;The smaller location is meant for a &lt;a href=&quot;https://www.pjrc.com/store/psram.html&quot;&gt;PSRAM chip&lt;/a&gt;. The larger location is intended for flash memory.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://forum.pjrc.com/teensy41_memory.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;USB Host&lt;/h2&gt;
Teensy 4.1's USB Host port allow you to connect USB devices, like keyboards and MIDI musical instruments. A 5 pin header and a &lt;a href=&quot;https://www.pjrc.com/store/cable_usb_host_t36.html&quot;&gt;USB Host cable&lt;/a&gt; are needed to be able to plug in a USB device. 
&lt;p&gt;&lt;img src=&quot;https://forum.pjrc.com/teensy41_usbhost2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;USB hubs may be used if more than 1 device is needed. See the USBHost_t36 examples for details.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://forum.pjrc.com/teensy41_3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 11 May 2020 16:29:17 +0000</pubDate>
<dc:creator>milo_im</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.pjrc.com/store/teensy41.html</dc:identifier>
</item>
<item>
<title>Next.js 9.4 – Fast Refresh, Incremental Static Regeneration</title>
<link>https://nextjs.org/blog/next-9-4</link>
<guid isPermaLink="true" >https://nextjs.org/blog/next-9-4</guid>
<description>&lt;p class=&quot;jsx-537101091&quot;&gt;We are excited today to introduce Next.js 9.4, featuring:&lt;/p&gt;
&lt;ul class=&quot;jsx-4174857952&quot;&gt;&lt;li class=&quot;jsx-3649179126&quot;&gt;&lt;strong&gt;&lt;a href=&quot;https://nextjs.org/blog/next-9-4#fast-refresh&quot; class=&quot;jsx-2156832104&quot;&gt;Fast Refresh&lt;/a&gt;&lt;/strong&gt;: fast and reliable live-editing experience, as proven &lt;a href=&quot;https://twitter.com/dan_abramov/status/1152689338553131008&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; class=&quot;jsx-329029718&quot;&gt;at Facebook scale&lt;/a&gt;&lt;/li&gt;
&lt;li class=&quot;jsx-3649179126&quot;&gt;&lt;strong&gt;&lt;a href=&quot;https://nextjs.org/blog/next-9-4#incremental-static-regeneration-beta&quot; class=&quot;jsx-2156832104&quot;&gt;Incremental Static Regeneration (beta)&lt;/a&gt;&lt;/strong&gt;: re-build static pages after you've deployed, in milliseconds&lt;/li&gt;
&lt;li class=&quot;jsx-3649179126&quot;&gt;&lt;strong&gt;&lt;a href=&quot;https://nextjs.org/blog/next-9-4#cms-examples&quot; class=&quot;jsx-2156832104&quot;&gt;CMS Examples&lt;/a&gt;&lt;/strong&gt;: examples for &lt;a href=&quot;https://github.com/zeit/next.js/tree/canary/examples/cms-contentful&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; class=&quot;jsx-329029718&quot;&gt;Contentful&lt;/a&gt;, &lt;a href=&quot;https://github.com/zeit/next.js/tree/canary/examples/cms-datocms&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; class=&quot;jsx-329029718&quot;&gt;DatoCMS&lt;/a&gt;, &lt;a href=&quot;https://github.com/zeit/next.js/tree/canary/examples/cms-prismic&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; class=&quot;jsx-329029718&quot;&gt;Prismic&lt;/a&gt;, &lt;a href=&quot;https://github.com/zeit/next.js/tree/canary/examples/cms-sanity&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; class=&quot;jsx-329029718&quot;&gt;Sanity&lt;/a&gt;, and &lt;a href=&quot;https://github.com/zeit/next.js/tree/canary/examples/cms-takeshape&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; class=&quot;jsx-329029718&quot;&gt;TakeShape&lt;/a&gt; using our new &lt;a class=&quot;jsx-4094826953&quot; href=&quot;https://nextjs.org/blog/next-9-3&quot;&gt;next-gen static site generation&lt;/a&gt;&lt;/li&gt;
&lt;li class=&quot;jsx-3649179126&quot;&gt;&lt;strong&gt;&lt;a href=&quot;https://nextjs.org/blog/next-9-4#new-environment-variables-support&quot; class=&quot;jsx-2156832104&quot;&gt;New Environment Variables Support&lt;/a&gt;&lt;/strong&gt;: built-in support for &lt;code class=&quot;jsx-2411693156&quot;&gt;.env&lt;/code&gt; and a &lt;code class=&quot;jsx-2411693156&quot;&gt;NEXT_PUBLIC_&lt;/code&gt; prefix, as seen in CRA&lt;/li&gt;
&lt;li class=&quot;jsx-3649179126&quot;&gt;&lt;strong&gt;&lt;a href=&quot;https://nextjs.org/blog/next-9-4#improved-built-in-fetch-support&quot; class=&quot;jsx-2156832104&quot;&gt;Improved Built-in Fetch Support&lt;/a&gt;&lt;/strong&gt;: ditch your &lt;code class=&quot;jsx-2411693156&quot;&gt;node-fetch&lt;/code&gt; and &lt;code class=&quot;jsx-2411693156&quot;&gt;isomorphic-fetch&lt;/code&gt; imports in favor of a built-in &lt;code class=&quot;jsx-2411693156&quot;&gt;fetch&lt;/code&gt; polyfill, for Node.js and all browsers (build and runtime)&lt;/li&gt;
&lt;li class=&quot;jsx-3649179126&quot;&gt;&lt;strong&gt;&lt;a href=&quot;https://nextjs.org/blog/next-9-4#integrated-web-vitals-reporting&quot; class=&quot;jsx-2156832104&quot;&gt;Integrated Web Vitals Reporting&lt;/a&gt;&lt;/strong&gt;: capture the &lt;a href=&quot;https://web.dev/vitals/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; class=&quot;jsx-329029718&quot;&gt;metrics&lt;/a&gt; that drive Lighthouse scores, but from your real traffic&lt;/li&gt;
&lt;li class=&quot;jsx-3649179126&quot;&gt;&lt;strong&gt;&lt;a href=&quot;https://nextjs.org/blog/next-9-4#absolute-imports-and-aliases&quot; class=&quot;jsx-2156832104&quot;&gt;Absolute Imports and Aliases&lt;/a&gt;&lt;/strong&gt;: clearer and shorter imports, avoiding &lt;code class=&quot;jsx-2411693156&quot;&gt;../../../&lt;/code&gt; spaghetti&lt;/li&gt;
&lt;li class=&quot;jsx-3649179126&quot;&gt;&lt;strong&gt;&lt;a href=&quot;https://nextjs.org/blog/next-9-4#configurable-sass-support&quot; class=&quot;jsx-2156832104&quot;&gt;Configurable Sass Support&lt;/a&gt;&lt;/strong&gt;: &lt;a href=&quot;https://sass-lang.com/documentation/js-api#includepaths&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; class=&quot;jsx-329029718&quot;&gt;configure &lt;code class=&quot;jsx-2411693156&quot;&gt;includePaths&lt;/code&gt;&lt;/a&gt; and other options of our &lt;a href=&quot;https://nextjs.org/docs/basic-features/built-in-css-support#sass-support&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; class=&quot;jsx-329029718&quot;&gt;built-in Sass support&lt;/a&gt;&lt;/li&gt;
&lt;li class=&quot;jsx-3649179126&quot;&gt;&lt;strong&gt;&lt;a href=&quot;https://nextjs.org/blog/next-9-4#improved-log-output&quot; class=&quot;jsx-2156832104&quot;&gt;Improved Log Output&lt;/a&gt;&lt;/strong&gt;: console output that's easier to read, consistently formatted, and less repetitive&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;jsx-537101091&quot;&gt;Fast Refresh is a new hot reloading experience that gives you instantaneous feedback on edits made to your React components. It is now &lt;strong&gt;enabled by default&lt;/strong&gt; for all projects on Next.js 9.4 or newer.&lt;/p&gt;
&lt;p class=&quot;jsx-537101091&quot;&gt;Hot reloading has &lt;a href=&quot;https://github.com/gaearon/react-hot-loader&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; class=&quot;jsx-329029718&quot;&gt;existed for a long time&lt;/a&gt; but has &lt;a href=&quot;https://github.com/gaearon/react-hot-loader/blob/master/docs/Troubleshooting.md&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; class=&quot;jsx-329029718&quot;&gt;historically been&lt;/a&gt; &lt;a href=&quot;https://github.com/gaearon/react-hot-loader/issues?q=is%3Aissue&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; class=&quot;jsx-329029718&quot;&gt;too fragile&lt;/a&gt; to enable by default in your workflow. Because of this, Next.js previously implemented a coarse form of hot reloading that would reset the entire state of your application.&lt;/p&gt;
&lt;p class=&quot;jsx-537101091&quot;&gt;The old hot reloading implementation was not resilient to compilation or runtime errors and would perform a full reload of your application if you made a typo while editing your CSS or JavaScript. This was suboptimal and interrupted your train of thought.&lt;/p&gt;
&lt;p class=&quot;jsx-537101091&quot;&gt;Fast Refresh deeply integrates into React itself (&lt;a href=&quot;https://github.com/facebook/react/tree/master/packages/react-refresh&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; class=&quot;jsx-329029718&quot;&gt;via React Refresh&lt;/a&gt;), allowing Next.js to perform predictable precision updates to your React component tree.&lt;/p&gt;
&lt;p class=&quot;jsx-537101091&quot;&gt;This means Next.js will only update code in the file you edited, and only re-render that component, &lt;strong&gt;without losing component state&lt;/strong&gt;. This includes styles (inline, CSS-in-JS, or CSS/Sass Modules), markup, event handlers, and effects (via &lt;code class=&quot;jsx-2411693156&quot;&gt;useEffect&lt;/code&gt;).&lt;/p&gt;
&lt;div class=&quot;jsx-3774095329 container&quot; readability=&quot;9&quot;&gt;

An editing session featuring compiler and runtime errors (with quick recovery), and edits that preserve state.&lt;/div&gt;
&lt;p class=&quot;jsx-537101091&quot;&gt;As part of this experience, we completely redesigned the error overlay to be more helpful and to make your application resilient to typos or runtime errors. This includes, but is not limited to:&lt;/p&gt;
&lt;ul class=&quot;jsx-4174857952&quot;&gt;&lt;li class=&quot;jsx-3649179126&quot;&gt;&lt;strong&gt;Accurate error locations&lt;/strong&gt;, resolved to the &lt;strong&gt;original line and column&lt;/strong&gt; of your code, before compilation&lt;/li&gt;
&lt;li class=&quot;jsx-3649179126&quot;&gt;Contextually relevant &lt;strong&gt;source code snippets&lt;/strong&gt;, with the ability &lt;strong&gt;click-to-open in your editor&lt;/strong&gt;&lt;/li&gt;
&lt;li class=&quot;jsx-3649179126&quot;&gt;Development &lt;strong&gt;session resumption&lt;/strong&gt; after a syntax error is fixed, &lt;strong&gt;without losing application state&lt;/strong&gt;&lt;/li&gt;
&lt;li class=&quot;jsx-3649179126&quot;&gt;&lt;strong&gt;Automatic dismissal&lt;/strong&gt; of unhandled runtime errors when you fix the error&lt;/li&gt;
&lt;/ul&gt;&lt;p class=&quot;jsx-537101091&quot;&gt;We would like to thank &lt;a href=&quot;https://twitter.com/dan_abramov&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; class=&quot;jsx-329029718&quot;&gt;Dan Abramov&lt;/a&gt; for his invaluable contributions and assistance implementing this feature.&lt;/p&gt;

&lt;p class=&quot;jsx-537101091&quot;&gt;Next.js introduced Static Site Generation methods in 9.3 with a clear goal in mind: we should get &lt;a href=&quot;https://rauchg.com/2020/2019-in-review#static-is-the-new-dynamic&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; class=&quot;jsx-329029718&quot;&gt;the benefits of static&lt;/a&gt; (always fast, always online, &lt;a href=&quot;https://rauchg.com/2020/static-hoisting#hoist-to-the-edge&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; class=&quot;jsx-329029718&quot;&gt;globally distributed&lt;/a&gt;), but with excellent support for dynamic data, which Next.js is known for.&lt;/p&gt;
&lt;p class=&quot;jsx-537101091&quot;&gt;To get the best of both worlds, Next.js supports &lt;strong&gt;Incremental Static Generation&lt;/strong&gt;, updating static content after you have already built your site. For example, in 9.3 we’ve introduced the &lt;code class=&quot;jsx-2411693156&quot;&gt;fallback: true&lt;/code&gt; option in &lt;code class=&quot;jsx-2411693156&quot;&gt;getStaticPaths&lt;/code&gt;, which allows you to add &lt;strong&gt;new pages&lt;/strong&gt; at runtime.&lt;/p&gt;
&lt;p class=&quot;jsx-537101091&quot;&gt;We recently put together an example showcasing how Next.js can statically pre-render an infinite number of pages this way:&lt;/p&gt;

&lt;p class=&quot;jsx-537101091&quot;&gt;Today, we are also introducing &lt;strong&gt;Incremental Static Regeneration (beta)&lt;/strong&gt;, which is a mechanism to &lt;strong&gt;update existing pages&lt;/strong&gt;, by re-rendering them in the background as traffic comes in. Inspired by &lt;a href=&quot;https://tools.ietf.org/html/rfc5861&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; class=&quot;jsx-329029718&quot;&gt;stale-while-revalidate&lt;/a&gt;, this ensures traffic is served uninterrupted, always statically, and the newly built page is pushed only after it's done generating.&lt;/p&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;/pre&gt;
&lt;pre class=&quot;jsx-2766439395&quot;&gt;
&lt;code class=&quot;jsx-2766439395&quot;&gt;&lt;span class=&quot;token keyword module&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getStaticProps&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    props&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getDataFromCMS&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    
    
    
    unstable_revalidate&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p class=&quot;jsx-537101091&quot;&gt;Unlike SSR, Incremental Static Regeneration ensures you retain the benefits of static:&lt;/p&gt;
&lt;ul class=&quot;jsx-4174857952&quot;&gt;&lt;li class=&quot;jsx-3649179126&quot;&gt;No spikes in latency. Pages are served consistently fast.&lt;/li&gt;
&lt;li class=&quot;jsx-3649179126&quot;&gt;Pages never go offline. If the background page re-generation fails, the old page remains unaltered.&lt;/li&gt;
&lt;li class=&quot;jsx-3649179126&quot;&gt;Low database and backend load. Pages are re-computed at most once concurrently.&lt;/li&gt;
&lt;/ul&gt;&lt;p class=&quot;jsx-537101091&quot;&gt;Both incremental features (adding pages and lazily updating them), as well as &lt;a href=&quot;https://nextjs.org/docs/advanced-features/preview-mode&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; class=&quot;jsx-329029718&quot;&gt;preview mode&lt;/a&gt;, are already fully supported by both &lt;code class=&quot;jsx-2411693156&quot;&gt;next start&lt;/code&gt; and the &lt;a href=&quot;https://vercel.com&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; class=&quot;jsx-329029718&quot;&gt;Vercel edge platform&lt;/a&gt; out of the box.&lt;/p&gt;
&lt;p class=&quot;jsx-537101091&quot;&gt;Up next, we will be working on a supplemental RFC to address two additional incremental static generation capabilities:&lt;/p&gt;
&lt;ul class=&quot;jsx-4174857952&quot;&gt;&lt;li class=&quot;jsx-3649179126&quot;&gt;Re-generating and invalidating multiple pages at once (like your blog index and a certain blog post)&lt;/li&gt;
&lt;li class=&quot;jsx-3649179126&quot;&gt;Re-generating by listening to events (like CMS webhooks), ahead of user traffic&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;jsx-537101091&quot;&gt;On the heels of our announcement of &lt;a class=&quot;jsx-4094826953&quot; href=&quot;https://nextjs.org/blog/next-9-3#next-gen-static-site-generation-ssg-support&quot;&gt;next-gen static site generation&lt;/a&gt;, we wanted to share real-world scenarios of fetching content from Headless CMS APIs and rendering it as Next.js HTML.&lt;/p&gt;
&lt;p class=&quot;jsx-537101091&quot;&gt;We partnered with the creators of some of the best CMS systems in the world: &lt;a href=&quot;https://github.com/zeit/next.js/tree/canary/examples/cms-contentful&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; class=&quot;jsx-329029718&quot;&gt;Contentful&lt;/a&gt;, &lt;a href=&quot;https://github.com/zeit/next.js/tree/canary/examples/cms-datocms&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; class=&quot;jsx-329029718&quot;&gt;DatoCMS&lt;/a&gt;, &lt;a href=&quot;https://github.com/zeit/next.js/tree/canary/examples/cms-prismic&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; class=&quot;jsx-329029718&quot;&gt;Prismic&lt;/a&gt;, &lt;a href=&quot;https://github.com/zeit/next.js/tree/canary/examples/cms-sanity&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; class=&quot;jsx-329029718&quot;&gt;Sanity&lt;/a&gt;, and &lt;a href=&quot;https://github.com/zeit/next.js/tree/canary/examples/cms-takeshape&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; class=&quot;jsx-329029718&quot;&gt;TakeShape&lt;/a&gt;, with more on the way.&lt;/p&gt;

&lt;p class=&quot;jsx-537101091&quot;&gt;These examples are not only ready to be used and 100% open source and MIT licensed, but they incorporate the best practices available:&lt;/p&gt;
&lt;div class=&quot;jsx-2349116001 container&quot; readability=&quot;7&quot;&gt;

DatoCMS achieves impeccable results due to their built-in image optimization support.&lt;/div&gt;
&lt;p class=&quot;jsx-537101091&quot;&gt;DatoCMS achieves impeccable results due to their built-in image optimization support&lt;/p&gt;
&lt;p class=&quot;jsx-537101091&quot;&gt;We also have collaborated with TinaCMS on an exciting new direction for CMS: &lt;strong&gt;in-page editing of content&lt;/strong&gt;. &lt;a href=&quot;https://tinacms.org/guides/nextjs/github-open-authoring/initial-setup&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; class=&quot;jsx-329029718&quot;&gt;Check out their guide&lt;/a&gt; to learn how to implement it for your project.&lt;/p&gt;

&lt;p class=&quot;jsx-537101091&quot;&gt;A common piece of feedback that we got from companies using Next.js is that it was unclear when an environment variable is inlined into the browser bundle and when it is only available in the Node.js environment.&lt;/p&gt;
&lt;p class=&quot;jsx-537101091&quot;&gt;Today we're announcing two fully backward-compatible features that will help streamline this process.&lt;/p&gt;
&lt;p class=&quot;jsx-537101091&quot;&gt;The first is to expose an environment variable to the browser you can prefix the environment variable with &lt;code class=&quot;jsx-2411693156&quot;&gt;NEXT_PUBLIC_&lt;/code&gt;. When that environment variable is used it will then be inlined into the browser JavaScript bundle.&lt;/p&gt;
&lt;p class=&quot;jsx-537101091&quot;&gt;You no longer have to add a &lt;code class=&quot;jsx-2411693156&quot;&gt;next.config.js&lt;/code&gt; and add the &lt;code class=&quot;jsx-2411693156&quot;&gt;env&lt;/code&gt; key to expose these variables.&lt;/p&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;/pre&gt;
&lt;pre class=&quot;jsx-2766439395&quot;&gt;
&lt;code class=&quot;jsx-2766439395&quot;&gt;


&lt;span class=&quot;token console class-name&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token method function property-access&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'My Application Version'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token property-access&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;NEXT_PUBLIC_VERSION&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword module&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword module&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;&lt;span class=&quot;token maybe-class-name&quot;&gt;HomePage&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;Hello World&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p class=&quot;jsx-537101091&quot;&gt;The second change is that Next.js now supports &lt;code class=&quot;jsx-2411693156&quot;&gt;.env&lt;/code&gt; loading by default. Allowing you to easily define development and production environment variables.&lt;/p&gt;
&lt;p class=&quot;jsx-537101091&quot;&gt;You can read more about the &lt;code class=&quot;jsx-2411693156&quot;&gt;.env&lt;/code&gt; loading in the &lt;a href=&quot;https://nextjs.org/docs/basic-features/environment-variables&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; class=&quot;jsx-329029718&quot;&gt;Environment Variables documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;jsx-537101091&quot;&gt;These new features will simplify using environment variables by following these conventions:&lt;/p&gt;
&lt;ul class=&quot;jsx-4174857952&quot;&gt;&lt;li class=&quot;jsx-3649179126&quot;&gt;Environment variables are only available in the Node.js environment by default&lt;/li&gt;
&lt;li class=&quot;jsx-3649179126&quot;&gt;Environment variables prefixed with &lt;code class=&quot;jsx-2411693156&quot;&gt;NEXT_PUBLIC_&lt;/code&gt; are exposed to the browser&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;jsx-537101091&quot;&gt;In &lt;a href=&quot;https://nextjs.org/blog/next-9-1-7#new-built-in-polyfills-fetch-url-and-objectassign&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; class=&quot;jsx-329029718&quot;&gt;Next.js 9.1.7&lt;/a&gt; we announced polyfilling of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; class=&quot;jsx-329029718&quot;&gt;&lt;code class=&quot;jsx-2411693156&quot;&gt;fetch()&lt;/code&gt;&lt;/a&gt; API in the browser. Today this polyfilling has been extended to the Node.js environment too.&lt;/p&gt;
&lt;p class=&quot;jsx-537101091&quot;&gt;In practice, you no longer have to use any type of server-side fetch polyfill (for example &lt;code class=&quot;jsx-2411693156&quot;&gt;isomorphic-unfetch&lt;/code&gt; or &lt;code class=&quot;jsx-2411693156&quot;&gt;node-fetch&lt;/code&gt;) as Next.js will automatically provide &lt;code class=&quot;jsx-2411693156&quot;&gt;fetch()&lt;/code&gt; in all environments.&lt;/p&gt;
&lt;p class=&quot;jsx-537101091&quot;&gt;For example, when using &lt;code class=&quot;jsx-2411693156&quot;&gt;getStaticProps&lt;/code&gt;, which gets executed using Next.js at build time:&lt;/p&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;/pre&gt;
&lt;pre class=&quot;jsx-2766439395&quot;&gt;
&lt;code class=&quot;jsx-2766439395&quot;&gt;&lt;span class=&quot;token keyword module&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getStaticProps&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'https://.../posts'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; posts &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token method function property-access&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    props&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      posts
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;&lt;span class=&quot;token maybe-class-name&quot;&gt;Blog&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; posts &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword module&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword module&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token maybe-class-name&quot;&gt;Blog&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;

&lt;p class=&quot;jsx-537101091&quot;&gt;Last week the Google Chrome team introduced &lt;a href=&quot;https://web.dev/vitals/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; class=&quot;jsx-329029718&quot;&gt;Core Web Vitals&lt;/a&gt;. Core Web Vitals are the quality signals key to delivering great UX on the web, on top of which the &lt;a href=&quot;https://twitter.com/rauchg/status/1259701306387656704&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; class=&quot;jsx-329029718&quot;&gt;famous Lighthouse reports&lt;/a&gt; are built.&lt;/p&gt;
&lt;p class=&quot;jsx-537101091&quot;&gt;Keeping track of these metrics is extremely useful if you want your website or web application to be as fast as possible, which is one of the core goals of Next.js.&lt;/p&gt;

&lt;p class=&quot;jsx-537101091&quot;&gt;The Chrome team has released a &lt;a href=&quot;https://twitter.com/addyosmani/status/1258416376433131520&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; class=&quot;jsx-329029718&quot;&gt;Core Web Vitals Chrome extension&lt;/a&gt; that allows you as a developer to get visual feedback on how your pages are performing.&lt;/p&gt;
&lt;p class=&quot;jsx-537101091&quot;&gt;When building production web applications you also want to know how your site is performing for your visitors and (potential) customers. You might even want to track the improvement or regression of these metrics over time in order to see if your changes have the intended impact on your audience.&lt;/p&gt;
&lt;p class=&quot;jsx-537101091&quot;&gt;In order to aid reporting Core Web Vitals to your analytics service we have introduced, &lt;a href=&quot;https://www.techrepublic.com/article/insiders-look-at-googles-web-framework-contributions-to-next-js-and-more/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; class=&quot;jsx-329029718&quot;&gt;in collaboration with Google&lt;/a&gt;, a new method called &lt;code class=&quot;jsx-2411693156&quot;&gt;reportWebVitals&lt;/code&gt; which can be exported from &lt;code class=&quot;jsx-2411693156&quot;&gt;pages/_app.js&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;/pre&gt;
&lt;pre class=&quot;jsx-2766439395&quot;&gt;
&lt;code class=&quot;jsx-2766439395&quot;&gt;
&lt;span class=&quot;token keyword module&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;reportWebVitals&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;metric&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  
  &lt;span class=&quot;token console class-name&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token method function property-access&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;metric&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;&lt;span class=&quot;token maybe-class-name&quot;&gt;MyApp&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token maybe-class-name&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; pageProps &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token spread&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;pageProps&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword module&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword module&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token maybe-class-name&quot;&gt;MyApp&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p class=&quot;jsx-537101091&quot;&gt;To use this method in combination with your analytics service refer to the &lt;a href=&quot;https://nextjs.org/docs/advanced-features/measuring-performance#sending-results-to-analytics&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; class=&quot;jsx-329029718&quot;&gt;&quot;Sending result to Analytics&quot;&lt;/a&gt; section of the docs. If you want to learn more about Core Web Vitals you can refer to &lt;a href=&quot;https://web.dev/vitals/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; class=&quot;jsx-329029718&quot;&gt;web.dev/vitals&lt;/a&gt;.&lt;/p&gt;

&lt;p class=&quot;jsx-537101091&quot;&gt;If you’re working on a large project, some of your &lt;code class=&quot;jsx-2411693156&quot;&gt;import&lt;/code&gt; statements might suffer from the &lt;code class=&quot;jsx-2411693156&quot;&gt;../../../&lt;/code&gt; spaghetti:&lt;/p&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;/pre&gt;
&lt;pre class=&quot;jsx-2766439395&quot;&gt;
&lt;code class=&quot;jsx-2766439395&quot;&gt;&lt;span class=&quot;token keyword module&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token maybe-class-name&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;token keyword module&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;'../../../../components/button'&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p class=&quot;jsx-537101091&quot;&gt;In such cases, instead of relative imports, we might want to use &lt;strong&gt;absolute imports&lt;/strong&gt;. Assuming that the &lt;code class=&quot;jsx-2411693156&quot;&gt;components&lt;/code&gt; directory exists at the root, we might want &lt;code class=&quot;jsx-2411693156&quot;&gt;import&lt;/code&gt; statements to look like:&lt;/p&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;/pre&gt;
&lt;pre class=&quot;jsx-2766439395&quot;&gt;
&lt;code class=&quot;jsx-2766439395&quot;&gt;&lt;span class=&quot;token keyword module&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token maybe-class-name&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;token keyword module&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;'components/button'&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p class=&quot;jsx-537101091&quot;&gt;We're excited to announce that Next.js 9.4 makes setting up absolute imports super simple for both JavaScript and TypeScript projects. All you need to do is to add the &lt;code class=&quot;jsx-2411693156&quot;&gt;baseUrl&lt;/code&gt; config to &lt;a href=&quot;https://code.visualstudio.com/docs/languages/jsconfig#_jsconfig-options&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; class=&quot;jsx-329029718&quot;&gt;&lt;code class=&quot;jsx-2411693156&quot;&gt;jsconfig.json&lt;/code&gt; (JS projects)&lt;/a&gt; or &lt;a href=&quot;https://www.typescriptlang.org/tsconfig#baseUrl&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; class=&quot;jsx-329029718&quot;&gt;&lt;code class=&quot;jsx-2411693156&quot;&gt;tsconfig.json&lt;/code&gt; (TS projects)&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;/pre&gt;
&lt;pre class=&quot;jsx-2766439395&quot;&gt;
&lt;code class=&quot;jsx-2766439395&quot;&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;compilerOptions&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;baseUrl&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;.&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p class=&quot;jsx-537101091&quot;&gt;This will allow absolute imports from &lt;code class=&quot;jsx-2411693156&quot;&gt;.&lt;/code&gt; (the root directory). It also integrates with VSCode and other editors, supporting code navigation and other editor features.&lt;/p&gt;
&lt;p class=&quot;jsx-537101091&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you’ve previously modified your &lt;a href=&quot;https://webpack.js.org/configuration/resolve/#resolvealias&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; class=&quot;jsx-329029718&quot;&gt;Webpack module alias configuration&lt;/a&gt; to enable absolute imports, that configuration can now be removed.&lt;/p&gt;
&lt;p class=&quot;jsx-537101091&quot;&gt;Furthermore, Next.js 9.4 also supports the &lt;code class=&quot;jsx-2411693156&quot;&gt;paths&lt;/code&gt; option, which allows you to create custom module aliases. For example, the following allows you to use &lt;code class=&quot;jsx-2411693156&quot;&gt;@/design-system&lt;/code&gt; instead of &lt;code class=&quot;jsx-2411693156&quot;&gt;components/design-system&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;/pre&gt;
&lt;pre class=&quot;jsx-2766439395&quot;&gt;
&lt;code class=&quot;jsx-2766439395&quot;&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;compilerOptions&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;baseUrl&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;paths&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&quot;@/design-system/*&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;components/design-system/*&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p class=&quot;jsx-537101091&quot;&gt;You can then use your alias like so:&lt;/p&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;/pre&gt;
&lt;pre class=&quot;jsx-2766439395&quot;&gt;
&lt;code class=&quot;jsx-2766439395&quot;&gt;
&lt;span class=&quot;token keyword module&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token maybe-class-name&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;token keyword module&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;'@/design-system/button'&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p class=&quot;jsx-537101091&quot;&gt;You must specify &lt;code class=&quot;jsx-2411693156&quot;&gt;baseUrl&lt;/code&gt; if you specify &lt;code class=&quot;jsx-2411693156&quot;&gt;paths&lt;/code&gt;. You can learn more about the &lt;code class=&quot;jsx-2411693156&quot;&gt;paths&lt;/code&gt; option &lt;a href=&quot;https://www.typescriptlang.org/tsconfig#paths&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; class=&quot;jsx-329029718&quot;&gt;in the TypeScript documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p class=&quot;jsx-537101091&quot;&gt;When built-in Sass support was launched in &lt;a href=&quot;https://nextjs.org/blog/next-9-3#built-in-sass-support-for-global-stylesheets&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; class=&quot;jsx-329029718&quot;&gt;Next.js 9.3&lt;/a&gt; we got the feedback that a subset of users wanted to configure the sass compiler. For example to configure &lt;code class=&quot;jsx-2411693156&quot;&gt;includePaths&lt;/code&gt;.&lt;/p&gt;
&lt;p class=&quot;jsx-537101091&quot;&gt;This is now possible by using the &lt;code class=&quot;jsx-2411693156&quot;&gt;sassOptions&lt;/code&gt; key in &lt;code class=&quot;jsx-2411693156&quot;&gt;next.config.js&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;/pre&gt;
&lt;pre class=&quot;jsx-2766439395&quot;&gt;
&lt;code class=&quot;jsx-2766439395&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; path &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'path'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token property-access&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  sassOptions&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    includePaths&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token method function property-access&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;__dirname&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;'styles'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;

&lt;p class=&quot;jsx-537101091&quot;&gt;We have redesigned the command line output to be more consistent and output less duplicate data like the deployment URL, waiting on the development server to start and more. We've also changed the spacing of the message type to be consistent across messages, meaning they no longer jump from line to line.&lt;/p&gt;
&lt;p class=&quot;jsx-537101091&quot;&gt;Running &lt;code class=&quot;jsx-2411693156&quot;&gt;next dev&lt;/code&gt; on versions before 9.4&lt;/p&gt;

&lt;p class=&quot;jsx-537101091&quot;&gt;Running &lt;code class=&quot;jsx-2411693156&quot;&gt;next dev&lt;/code&gt; on 9.4&lt;/p&gt;


&lt;p class=&quot;jsx-537101091&quot;&gt;We're excited to see the continued growth in Next.js adoption:&lt;/p&gt;
&lt;ul class=&quot;jsx-4174857952&quot;&gt;&lt;li class=&quot;jsx-3649179126&quot;&gt;We have had over &lt;strong&gt;1066&lt;/strong&gt; independent contributors.&lt;/li&gt;
&lt;li class=&quot;jsx-3649179126&quot;&gt;On GitHub, the project has been starred over &lt;strong&gt;48,000&lt;/strong&gt; times.&lt;/li&gt;
&lt;/ul&gt;&lt;p class=&quot;jsx-537101091&quot;&gt;Join the Next.js community on &lt;a href=&quot;https://github.com/zeit/next.js/discussions&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; class=&quot;jsx-329029718&quot;&gt;GitHub Discussions&lt;/a&gt;. Discussions is a community space that allows you to connect with other Next.js users and ask questions.&lt;/p&gt;
&lt;p class=&quot;jsx-537101091&quot;&gt;If you are using Next.js feel free to &lt;a href=&quot;https://github.com/zeit/next.js/discussions/10640&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; class=&quot;jsx-329029718&quot;&gt;share your project url&lt;/a&gt; with the community.&lt;/p&gt;
&lt;p class=&quot;jsx-537101091&quot;&gt;We are thankful to our community and all the external feedback and contributions that helped shape this release.&lt;/p&gt;
</description>
<pubDate>Mon, 11 May 2020 15:53:14 +0000</pubDate>
<dc:creator>STRiDEX</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://nextjs.org/blog/next-9-4</dc:identifier>
</item>
<item>
<title>New Abbott SARS-CoV-2 antibody test has 99.90% specificity and 100% sensitivity</title>
<link>https://jcm.asm.org/content/early/2020/05/07/JCM.00941-20</link>
<guid isPermaLink="true" >https://jcm.asm.org/content/early/2020/05/07/JCM.00941-20</guid>
<description>&lt;div class=&quot;section abstract&quot; id=&quot;abstract-1&quot; readability=&quot;19&quot;&gt;
&lt;h2&gt;ABSTRACT&lt;/h2&gt;
&lt;p id=&quot;p-2&quot;&gt;Coronavirus disease-19 (COVID19), the novel respiratory illness caused by severe acute respiratory syndrome coronavirus 2 (SARS-CoV-2), is associated with severe morbidity and mortality. The rollout of diagnostic testing in the United States was slow, leading to numerous cases that were not tested for SARS-CoV-2 in February and March 2020, necessitating the use of serological testing to determine past infections. Here, we evaluated the Abbott SARS-CoV-2 IgG test for detection of anti-SARS-CoV-2 IgG antibodies by testing 3 distinct patient populations. We tested 1,020 serum specimens collected prior to SARS-CoV-2 circulation in the United States and found one false positive, indicating a specificity of 99.90%. We tested 125 patients who tested RT-PCR positive for SARS-CoV-2 for which 689 excess serum specimens were available and found sensitivity reached 100% at day 17 after symptom onset and day 13 after PCR positivity. Alternative index value thresholds for positivity resulted in 100% sensitivity and 100% specificity in this cohort. We tested 4,856 individuals from Boise, Idaho collected over one week in April 2020 as part of the Crush the Curve initiative and detected 87 positives for a positivity rate of 1.79%. These data demonstrate excellent analytical performance of the Abbott SARS-CoV-2 IgG test as well as the limited circulation of the virus in the western United States. We expect the availability of high-quality serological testing will be a key tool in the fight against SARS-CoV-2.&lt;/p&gt;
&lt;/div&gt;

&lt;ul class=&quot;copyright-statement&quot;&gt;&lt;li class=&quot;fn&quot; id=&quot;copyright-statement-1&quot;&gt;Copyright © 2020 Bryan et al.&lt;/li&gt;
&lt;/ul&gt;
</description>
<pubDate>Mon, 11 May 2020 15:33:06 +0000</pubDate>
<dc:creator>bookofjoe</dc:creator>
<og:title>Performance Characteristics of the Abbott Architect SARS-CoV-2 IgG Assay and Seroprevalence in Boise, Idaho</og:title>
<og:url>https://jcm.asm.org/content/early/2020/05/07/JCM.00941-20</og:url>
<og:description>Coronavirus disease-19 (COVID19), the novel respiratory illness caused by severe acute respiratory syndrome coronavirus 2 (SARS-CoV-2), is associated with severe morbidity and mortality. The rollout of diagnostic testing in the United States was slow, leading to numerous cases that were not tested for SARS-CoV-2 in February and March 2020, necessitating the use of serological testing to determine past infections. Here, we evaluated the Abbott SARS-CoV-2 IgG test for detection of anti-SARS-CoV-2 IgG antibodies by testing 3 distinct patient populations. We tested 1,020 serum specimens collected prior to SARS-CoV-2 circulation in the United States and found one false positive, indicating a specificity of 99.90%. We tested 125 patients who tested RT-PCR positive for SARS-CoV-2 for which 689 excess serum specimens were available and found sensitivity reached 100% at day 17 after symptom onset and day 13 after PCR positivity. Alternative index value thresholds for positivity resulted in 100% sensitivity and 100% specificity in this cohort. We tested 4,856 individuals from Boise, Idaho collected over one week in April 2020 as part of the Crush the Curve initiative and detected 87 positives for a positivity rate of 1.79%. These data demonstrate excellent analytical performance of the Abbott SARS-CoV-2 IgG test as well as the limited circulation of the virus in the western United States. We expect the availability of high-quality serological testing will be a key tool in the fight against SARS-CoV-2.</og:description>
<og:type>article</og:type>
<og:image>https://jcm.asm.org/sites/default/files/highwire/jcm/58/5.cover-source.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://jcm.asm.org/content/early/2020/05/07/JCM.00941-20</dc:identifier>
</item>
<item>
<title>Age Reduction Breakthrough?</title>
<link>https://joshmitteldorf.scienceblog.com/2020/05/11/age-reduction-breakthrough/</link>
<guid isPermaLink="true" >https://joshmitteldorf.scienceblog.com/2020/05/11/age-reduction-breakthrough/</guid>
<description>&lt;p&gt;&lt;span&gt;If you eschew hyperbole and hang in for the long haul, maintaining a discipline of understatement in the midst of a flashy neon world, you may be offered a modicum of credence when you make an extraordinary announcement. No one is entitled to this courtesy twice. If the news that you trumpet to the moon does not pan out, your readers will be justified in discounting everything you say thereafter.  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Here goes.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;I believe major rejuvenation has been achieved in a mammal, using a relatively benign intervention that shows promise of scaling up to humans. I’m going to stake my reputation on it.&lt;/span&gt;&lt;/p&gt;
&lt;div id=&quot;attachment_979&quot; class=&quot;wp-caption aligncenter&quot;&gt;&lt;img aria-describedby=&quot;caption-attachment-979&quot; class=&quot;size-large wp-image-979&quot; src=&quot;https://joshmitteldorf.scienceblog.com/files/2020/05/De-Aging-Clinic-5-final-1024x364.jpg&quot; alt=&quot;&quot; width=&quot;584&quot; height=&quot;208&quot; srcset=&quot;https://joshmitteldorf.scienceblog.com/files/2020/05/De-Aging-Clinic-5-final-1024x364.jpg 1024w, https://joshmitteldorf.scienceblog.com/files/2020/05/De-Aging-Clinic-5-final-300x107.jpg 300w, https://joshmitteldorf.scienceblog.com/files/2020/05/De-Aging-Clinic-5-final-768x273.jpg 768w, https://joshmitteldorf.scienceblog.com/files/2020/05/De-Aging-Clinic-5-final-1536x546.jpg 1536w, https://joshmitteldorf.scienceblog.com/files/2020/05/De-Aging-Clinic-5-final-2048x728.jpg 2048w, https://joshmitteldorf.scienceblog.com/files/2020/05/De-Aging-Clinic-5-final-500x178.jpg 500w&quot; sizes=&quot;(max-width: 584px) 100vw, 584px&quot;/&gt;&lt;p id=&quot;caption-attachment-979&quot; class=&quot;wp-caption-text&quot;&gt;Cartoon by Maddy Ballard&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In the race to effect substantial, system-wide rejuvenation, Harold Katcher is a dark horse. He has the right academic credentials and a solid history of research. In fact, in earlier life he was part of a team that &lt;a href=&quot;https://courses.washington.edu/gs466/readings/miki.pdf&quot;&gt;discovered the breast cancer gene&lt;/a&gt;, &lt;span&gt;brca1&lt;/span&gt;. I asked Harold for a biographical sketch, and have printed it in a box at the end of this posting.&lt;/p&gt;
&lt;p&gt;But Katcher has no research grants or university lab or venture capital funding, no team of grad students mining databases and screening chemicals in the back room.&lt;/p&gt;
&lt;p&gt;One thing Katcher has going for him is the correct theory. Most of the explosion in aging research (and virtually all the venture capital startups) are looking to treat aging at the cellular level. Their paradigm is that aging is an accumulation of molecular damage, and they see their job as engineering of appropriate repair mechanisms.&lt;/p&gt;
&lt;p&gt;The truth, as Katcher understands it, is that, to a large extent, aging is coordinated system-wide via signal molecules in the blood. It was our common realization of this vision that brought Katcher and me together more than a decade ago. Katcher briefly describes his 2009 epiphany below. It was the source of his &lt;a href=&quot;https://link.springer.com/article/10.1134/S0006297913090137&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;2013 essay&lt;/a&gt; (it took a few years to get it into print) on the significance of parabiosis experiments for the future of aging science.&lt;/p&gt;
&lt;p&gt;Of course, Katcher was not the only one to get the message about the power of signal molecules in the blood to reprogram tissues to a younger state throughout the body. The problem is that there are thousands of constituents represented in tiny concentrations in blood plasma, but conveying messages that cells read. Which of these are responsible for aging? A small number of labs, including the Conboys at Berkeley, Amy Wager at Harvard, and Tony Wyss-Coray at Stanford have been searching for the answer over the last decade and more.&lt;/p&gt;
&lt;p&gt;Katcher has been able to guess or intuit or experimentally determine the answer to this question. With seed funding from Akshay Sanghavi, he set up a lab in Mumbai two years ago, and tried to rejuvenate old lab rats, using a fraction extracted from the blood of younger rats. The first round of experiments were encouraging, published &lt;a href=&quot;https://joshmitteldorf.scienceblog.com/2019/02/05/rumors-of-age-reversal-the-plasma-fraction-cure/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;in this space a year ago&lt;/a&gt;. He obtained the next round of funding from a reader of this blog, and had enough rats to titrate dosages experimentally, and to see if treated rats who aged again over time could be re-treated successfully.&lt;/p&gt;
&lt;p&gt;There is a hole in this story that awaits the resolution of intellectual property rights. Katcher and Sanghvi have not applied for patents and have not yet found a suitable partner to provide financing for human trials. They have not revealed any details of the treatment, besides the fact that it is in four intravenous doses, and that it is derived from a fraction of blood plasma. Katcher thinks that the molecules involved will not be difficult to manufacture, so that when a product is eventually commercialized, it will not require extraction from the blood of live subjects, rodent or human.&lt;/p&gt;
&lt;p&gt;We’re still waiting for longevity curves of these treated rats. In the meantime, the best available surrogate measure of age comes from methylation clocks, as developed by Steve Horvath at UCLA, and other scientists as well. Crucially, Katcher found an ally in Horvath, who didn’t just test his rejuvenated rats, but did the needed statistical analysis to develop a set of six methylation clocks specialized to rats. FIve of the clocks are optimized for different tissues, and one is calibrated across species, so that it can measure age in humans as well as corresponding age in “rat years” (about 1/40 human year). The two-species clock was a significant innovation, a first bridge for translating results from an animal model into their probable equivalent in humans.&lt;/p&gt;

&lt;p&gt;In a &lt;a href=&quot;https://www.biorxiv.org/content/10.1101/2020.05.07.082917v1.full.pdf&quot;&gt;paper posted to BioRxiv&lt;/a&gt; on Friday, Katcher and Horvath report results of the methylation measurements in rejuvenated rats. “Crucially, plasma treatment of the old rats [109 weeks] reduced the epigenetic ages of blood, liver and heart by a very large and significant margin, to levels that are comparable with the young rats [30 weeks]….According to the final version of the epigenetic clocks, the average rejuvenation across four tissues was 54.2%. In other words, the treatment more than halved the epigenetic age.”&lt;/p&gt;
&lt;div id=&quot;attachment_978&quot; class=&quot;wp-caption aligncenter&quot;&gt;&lt;img aria-describedby=&quot;caption-attachment-978&quot; class=&quot;size-full wp-image-978&quot; src=&quot;https://joshmitteldorf.scienceblog.com/files/2020/05/katcher-horvath-fig2m-p.png&quot; alt=&quot;&quot; width=&quot;1020&quot; height=&quot;315&quot; srcset=&quot;https://joshmitteldorf.scienceblog.com/files/2020/05/katcher-horvath-fig2m-p.png 1020w, https://joshmitteldorf.scienceblog.com/files/2020/05/katcher-horvath-fig2m-p-300x93.png 300w, https://joshmitteldorf.scienceblog.com/files/2020/05/katcher-horvath-fig2m-p-768x237.png 768w, https://joshmitteldorf.scienceblog.com/files/2020/05/katcher-horvath-fig2m-p-500x154.png 500w&quot; sizes=&quot;(max-width: 1020px) 100vw, 1020px&quot;/&gt;&lt;p id=&quot;caption-attachment-978&quot; class=&quot;wp-caption-text&quot;&gt;Human-rat clock measure of relative age defined as age/maximum species lifespan.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Besides the methylation clock, the paper presents evidence of rejuvenation by many other measures. For example:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;IL-6, a marker of inflammation, was restored to low youthful levels&lt;/li&gt;
&lt;li&gt;Glutathione (GSH), superoxide dismutase (SOD), and other anti-oxidants were restored to higher youthful levels&lt;/li&gt;
&lt;li&gt;In tests of cognitive function (Barnes maze), treated rats scored better than old rats, but not as well as young rats.&lt;/li&gt;
&lt;li&gt;Blood triglycerides were brought down to youthful levels&lt;/li&gt;
&lt;li&gt;HDL cholesterol rose to youthful levels&lt;/li&gt;
&lt;li&gt;Blood glucose fell toward youthful levels&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;A major question in blood plasma rejuvenation experiments has been how often the cure must be administered. Many of the components of blood plasma are short-lived, secreted into the blood and absorbed continuously throughout the day. The good news from Katcher’s results is that it seems only four injections are needed in order to achieve rejuvenation.&lt;/p&gt;
&lt;p&gt;A second question which these experiments resolve is whether rejuvenation requires both adding and removing molecular species from the blood plasma. For example, pro-inflammatory cytokines are found in old blood at much higher levels. Irina and Mike Conboy, people who I regard as most credible in the field, have said that removing bad actors from the blood is probably more important than restoring youthful levels of beneficial signals. They were grad students at Stanford 15 years ago, when the modern wave of parabiosis science was initiated, and have pursued the subject continuously ever since. Katcher’s experiments have achieved their results only by adding blood components, not by removing or even neutralizing others. &lt;span&gt;This suggests that he has found the necessary formula for re-programming epigenetics, so that lower levels of the bad actors occur as a result. But i&lt;/span&gt;&lt;span&gt;t remains to be seen whether even better results can be obtained if some plasma constituents are removed.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;A question that remains unresolved concerns the location and mechanism of the aging clock. I have been undecided over the years between two models:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;There is a central aging clock, perhaps in the hypothalamus, which keeps its own time and transmits signals throughout the body that coordinate methylation state of dispersed tissues&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Information about epigenetic age is dispersed through the body, and the body’s clock is a feedback loop that is continually updating methylation age locally in response to signals received about the methylation age globally.&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;There is a suggestion in the data that the hypothalamus may be more difficult to rejuvenate than other tissues. Does it play a more important role than other tissues in coordinating the age of the entire body? Horvath (personal communication) counsels caution in drawing this inference until measurements are corroborated and more experiments are done.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;The Bottom Line&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;These results bring together three threads that have been gaining credibility over the last decade. Mutually reinforcing, the three have a strength that none of them could offer separately.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The root cause of aging is epigenetic progression = changes in gene expression over a lifetime.&lt;/li&gt;
&lt;li&gt;Methylation patterns in nuclear DNA are not merely a marker of aging, but its primary source. Thus aging can be reversed by reprogramming DNA methylation.&lt;/li&gt;
&lt;li&gt;Information about the body’s age state is transmitted system-wide via signal molecules in the blood. Locally, tissues respond to these signals and adopt a young or an old cellular phenotype as they are directed.&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td bgcolor=&quot;lightgray&quot;&gt;
&lt;p&gt;&lt;strong&gt;Harold Katcher, Biographical Sketch&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So, you might consider me a late bloomer.  While I have thousands of citations in the literature, with publications ranging from the discovery of the human ‘breast cancer gene’, to protein structure, bacteriology, biotechnology, bioinformatics, and biochemistry, there was no center or direction to my work as I had given up my personal goal of solving/curing aging when I learned that ‘wear and tear’ was the cause of it.  Yet something happened in year 1985 when I was in California working with Michael Waterman and Temple Smith (fathers of bioinformatics) that is inexplicable: I found myself in Intensive Care with a tube inserted into my trachea and the knowledge that I might not live.   And then I had a dream: I dreamed that somehow in the far future (and on another world), I was being feted for ‘bringing immortality to mankind’. Clearly, I survived that incident (started with an infected tooth).    I lived a wonderful life – becoming a computer programmer (which I loved), leaving that for the University of Maryland’s Asian division, becoming a full professor and then the Academic Director for the Sciences, in Tokyo, Japan.  By the time I left Japan in 2004, (my daughter Sasha was a fourth-grader, (yonensei), in the Japanese school system), I was teaching for U of M online – somewhat retired, and looking forwards to writing computer programs for fun and profit. Yet I never ever forgot that dream. It was clearly impossible; I had no lab – and really, there was no way to repair all damaged cells – it’d be like sweeping back the ocean. And then, in 2009, I read an old paper from 2005, a paper written by the Conboys, (Michael and Irina), Tom Rando and others, coming from Irv Weisman’s lab, that completely changed my life; that showed me that everything I believed about aging was wrong – that aging occurred at the organismic level, not at the cellular level and could be reversed. Well, the rest of the story is about persistence and the blessed intervention of Akshay Sanghvi who too saw there was another way and provided the structural, monetary, and emotional support (and some good ideas) that had me start a new career at age 72 in Mumbai, India.  I feel twenty years younger than I did three years ago, I guess that’s another hint about aging. Now the ‘mystical’ dream?  It wouldn’t be the first time in history that that happened – take that as a datum.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
</description>
<pubDate>Mon, 11 May 2020 15:06:53 +0000</pubDate>
<dc:creator>James_Henry</dc:creator>
<og:type>article</og:type>
<og:title>Age Reduction Breakthrough</og:title>
<og:url>https://joshmitteldorf.scienceblog.com/2020/05/11/age-reduction-breakthrough/</og:url>
<og:description>If you eschew hyperbole and hang in for the long haul, maintaining a discipline of understatement in the midst of a flashy neon world, you may be offered a modicum of credence when you make an extr…</og:description>
<og:image>https://joshmitteldorf.scienceblog.com/files/2020/05/De-Aging-Clinic-5-final-scaled.jpg</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://joshmitteldorf.scienceblog.com/2020/05/11/age-reduction-breakthrough/</dc:identifier>
</item>
<item>
<title>Scraping Recipe Websites</title>
<link>https://www.benawad.com/scraping-recipe-websites/</link>
<guid isPermaLink="true" >https://www.benawad.com/scraping-recipe-websites/</guid>
<description>&lt;p&gt;The recipe importer is one of the most important features of &lt;a href=&quot;http://mysaffronapp.com/&quot;&gt;Saffron&lt;/a&gt;. It allows a user to input a URL and it will attempt to extract the recipe content from that website.&lt;/p&gt;&lt;p&gt;Behind the scenes, 2 things occur:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;A request is sent to the website to get the HTML&lt;/li&gt;
&lt;li&gt;The HTML is parsed into fields like ingredients, instructions, title, etc…&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Let’s dig into how each one of these works.&lt;/p&gt;
&lt;h2 id=&quot;fetching-the-html&quot;&gt;Fetching the HTML&lt;/h2&gt;
&lt;p&gt;Nothing fancy going on here, just using &lt;a href=&quot;https://github.com/node-fetch/node-fetch&quot;&gt;node-fetch&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&quot;grvsc-container dark-default-dark&quot; data-language=&quot;js&quot; data-index=&quot;0&quot;&gt;
&lt;code class=&quot;grvsc-code&quot;&gt;&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk15&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;mtk1&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mtk12&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;mtk1&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mtk15&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;mtk1&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mtk8&quot;&gt;&quot;node-fetch&quot;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk4&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;mtk1&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mtk12&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;mtk1&quot;&gt; = &lt;/span&gt;&lt;span class=&quot;mtk15&quot;&gt;await&lt;/span&gt;&lt;span class=&quot;mtk1&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mtk11&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;mtk1&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mtk8&quot;&gt;&quot;https://example.com&quot;&lt;/span&gt;&lt;span class=&quot;mtk1&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;mtk11&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;mtk1&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mtk12&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;mtk1&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mtk4&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;mtk1&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mtk12&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;mtk1&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mtk11&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;mtk1&quot;&gt;())&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Once in a while, a recipe site will use client side rendering or block “bot” requests and this method won’t work. However, this doesn’t come up enough to warrant using something like &lt;a href=&quot;https://github.com/puppeteer/puppeteer&quot;&gt;puppeteer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Roughly 75% of websites users choose to import are easy to parse, but for the remaining 25% a more advanced technique is required.&lt;/p&gt;
&lt;h3 id=&quot;the-easy-way&quot;&gt;The Easy Way&lt;/h3&gt;
&lt;p&gt;Ever wonder how Google creates these cards when you search for a recipe?&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;gatsby-resp-image-wrapper&quot;&gt;&lt;a class=&quot;gatsby-resp-image-link&quot; href=&quot;https://www.benawad.com/static/01f2de10a5765c553908f8beb36bff97/a4f81/marinara-sauce.png&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt; &lt;img class=&quot;gatsby-resp-image-image&quot; alt=&quot;Google Search Marinara Sauce&quot; title=&quot;Google Search Marinara Sauce&quot; src=&quot;https://www.benawad.com/static/01f2de10a5765c553908f8beb36bff97/fcda8/marinara-sauce.png&quot; srcset=&quot;/static/01f2de10a5765c553908f8beb36bff97/12f09/marinara-sauce.png 148w, /static/01f2de10a5765c553908f8beb36bff97/e4a3f/marinara-sauce.png 295w, /static/01f2de10a5765c553908f8beb36bff97/fcda8/marinara-sauce.png 590w, /static/01f2de10a5765c553908f8beb36bff97/efc66/marinara-sauce.png 885w, /static/01f2de10a5765c553908f8beb36bff97/c83ae/marinara-sauce.png 1180w, /static/01f2de10a5765c553908f8beb36bff97/a4f81/marinara-sauce.png 1508w&quot; sizes=&quot;(max-width: 590px) 100vw, 590px&quot; loading=&quot;lazy&quot;/&gt;&lt;/a&gt;&lt;/span&gt; Google Search Marinara Sauce&lt;/p&gt;
&lt;p&gt;It turns out, Google will show these cards when a website includes some &lt;a href=&quot;https://developers.google.com/search/docs/data-types/recipe&quot;&gt;standard recipe metadata&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As a result, nearly every popular recipe website will include metadata on what the title, servings, ingredients, instructions, etc… are for a recipe (this also occurs for recipes in foreign languages).&lt;/p&gt;
&lt;p&gt;For these websites, no guessing is involved. Reading the metadata is all that is needed.&lt;/p&gt;
&lt;p&gt;To do that, the HTML is searched for a &lt;code&gt;script&lt;/code&gt; tag with the type &lt;code&gt;application/ld+json&lt;/code&gt; which contains the metadata in a big JSON blob.&lt;/p&gt;
&lt;pre class=&quot;grvsc-container dark-default-dark&quot; data-language=&quot;js&quot; data-index=&quot;1&quot;&gt;
&lt;code class=&quot;grvsc-code&quot;&gt;&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mtk4&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;mtk1&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mtk12&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;mtk1&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mtk8&quot;&gt;&quot;application/ld+json&quot;&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk1&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;mtk4&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk1&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;mtk8&quot;&gt;&quot;@context&quot;&lt;/span&gt;&lt;span class=&quot;mtk1&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;mtk8&quot;&gt;&quot;http://schema.org&quot;&lt;/span&gt;&lt;span class=&quot;mtk1&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk1&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;mtk8&quot;&gt;&quot;@type&quot;&lt;/span&gt;&lt;span class=&quot;mtk1&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;mtk8&quot;&gt;&quot;Recipe&quot;&lt;/span&gt;&lt;span class=&quot;mtk1&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk1&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;mtk8&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;mtk1&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;mtk8&quot;&gt;&quot;Classic Marinara Sauce&quot;&lt;/span&gt;&lt;span class=&quot;mtk1&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk1&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;mtk8&quot;&gt;&quot;recipeIngredient&quot;&lt;/span&gt;&lt;span class=&quot;mtk1&quot;&gt;: [&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk1&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;mtk8&quot;&gt;&quot;1 28-ounce can whole tomatoes&quot;&lt;/span&gt;&lt;span class=&quot;mtk1&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk1&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;mtk8&quot;&gt;&quot;1/4 cup olive oil&quot;&lt;/span&gt;&lt;span class=&quot;mtk1&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk1&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;mtk8&quot;&gt;&quot;7 garlic peeled and slivered&quot;&lt;/span&gt;&lt;span class=&quot;mtk1&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk1&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;mtk8&quot;&gt;&quot;Small dried whole chile&quot;&lt;/span&gt;&lt;span class=&quot;mtk1&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk1&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;mtk8&quot;&gt;&quot;1 teaspoon kosher salt&quot;&lt;/span&gt;&lt;span class=&quot;mtk1&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk1&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;mtk8&quot;&gt;&quot;1 large fresh basil sprig&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk1&quot;&gt;    ]&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk1&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;mtk3&quot;&gt;// more fields&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk1&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;mtk4&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;mtk4&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This format is known as &lt;a href=&quot;https://json-ld.org/&quot;&gt;JSON-LD&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If that doesn’t exist, the HTML is traversed for tags annotated with &lt;code&gt;itemprop&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;grvsc-container dark-default-dark&quot; data-language=&quot;html&quot; data-index=&quot;2&quot;&gt;
&lt;code class=&quot;grvsc-code&quot;&gt;&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mtk4&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;mtk1&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mtk12&quot;&gt;itemprop&lt;/span&gt;&lt;span class=&quot;mtk1&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mtk8&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mtk1&quot;&gt;Simple Marinara Sauce&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;mtk4&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mtk4&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk1&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mtk4&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;mtk1&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mtk12&quot;&gt;itemprop&lt;/span&gt;&lt;span class=&quot;mtk1&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mtk8&quot;&gt;&quot;recipeIngredient&quot;&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mtk1&quot;&gt;2 cans stewed tomatoes&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;mtk4&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk1&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mtk4&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;mtk1&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mtk12&quot;&gt;itemprop&lt;/span&gt;&lt;span class=&quot;mtk1&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mtk8&quot;&gt;&quot;recipeIngredient&quot;&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mtk1&quot;&gt;1 teaspoon dried oregano&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;mtk4&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk1&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mtk4&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;mtk1&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mtk12&quot;&gt;itemprop&lt;/span&gt;&lt;span class=&quot;mtk1&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mtk8&quot;&gt;&quot;recipeIngredient&quot;&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mtk1&quot;&gt;1 teaspoon salt&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;mtk4&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;mtk4&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This format is known as &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Microdata&quot;&gt;Microdata&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are libraries like &lt;a href=&quot;https://github.com/digitalbazaar/jsonld.js/&quot;&gt;https://github.com/digitalbazaar/jsonld.js/&lt;/a&gt; to parse JSON-LD + Microdata for you.&lt;/p&gt;
&lt;h3 id=&quot;the-hard-way&quot;&gt;The Hard Way&lt;/h3&gt;
&lt;p&gt;Identifying ingredients and instructions in arbitrary HTML is the trickiest step, so I’ll save that for last. We’ll first start off with how the other fields are extracted.&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Name of recipe&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;The &lt;code&gt;og:title&lt;/code&gt; meta tag is used. If that doesn’t exist, the title tag is used instead.&lt;/p&gt;
&lt;pre class=&quot;grvsc-container dark-default-dark&quot; data-language=&quot;html&quot; data-index=&quot;3&quot;&gt;
&lt;code class=&quot;grvsc-code&quot;&gt;&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mtk4&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk1&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mtk4&quot;&gt;meta&lt;/span&gt;&lt;span class=&quot;mtk1&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mtk12&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;mtk1&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mtk8&quot;&gt;&quot;og:title&quot;&lt;/span&gt;&lt;span class=&quot;mtk1&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mtk12&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;mtk1&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mtk8&quot;&gt;&quot;Spaghetti Bolognese&quot;&lt;/span&gt;&lt;span class=&quot;mtk1&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;mtk4&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ol start=&quot;2&quot;&gt;&lt;li&gt;Picture&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;All the images are collected that are within the body tag. Then smaller images are removed, and the user picks the correct image from the remaining options.&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;&lt;li&gt;Times&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Cook and prep time are currently ignored.&lt;/p&gt;
&lt;ol start=&quot;4&quot;&gt;&lt;li&gt;Servings&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Each HTML tag is considered until one is found with text that includes &lt;code&gt;makes:&lt;/code&gt;, &lt;code&gt;serves:&lt;/code&gt;, &lt;code&gt;servings:&lt;/code&gt;, or &lt;code&gt;yield:&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Ok, let’s talk about the technique used to find the ingredients and instructions.&lt;/p&gt;
&lt;p&gt;HTML can be represented in a tree structure where the children of a HTML tag become the children of a node in the tree.&lt;/p&gt;
&lt;p&gt;So the following HTML:&lt;/p&gt;
&lt;pre class=&quot;grvsc-container dark-default-dark&quot; data-language=&quot;html&quot; data-index=&quot;4&quot;&gt;
&lt;code class=&quot;grvsc-code&quot;&gt;&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mtk4&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk1&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mtk4&quot;&gt;nav&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk1&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mtk4&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mtk1&quot;&gt;home&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;mtk4&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk1&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;mtk4&quot;&gt;nav&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk1&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mtk4&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mtk1&quot;&gt;more stuff&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;mtk4&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;mtk4&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Can be represented as the following tree:&lt;/p&gt;
&lt;pre class=&quot;grvsc-container dark-default-dark&quot; data-language=&quot;&quot; data-index=&quot;5&quot;&gt;
&lt;code class=&quot;grvsc-code&quot;&gt;&lt;span class=&quot;grvsc-line&quot;&gt;    body&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;    / \&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;   /   \&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;  p    nav&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;        |&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;        a&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Using this concept, the HTML is traversed in a depth first search fashion, scoring nodes on how likely they are to be a instructions/ingredient based on the text inside of them.&lt;/p&gt;
&lt;p&gt;Criteria for scoring how likely some text is an instruction:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Does it start with a capital letter?&lt;/li&gt;
&lt;li&gt;Does it end in punctuation?&lt;/li&gt;
&lt;li&gt;Is it longer than 100 characters?&lt;/li&gt;
&lt;li&gt;Is there a capital letter anywhere in the text?&lt;/li&gt;
&lt;li&gt;Does it use any instructional words specific to cooking like: “Sprinkle”, “Mix”, “Heat”, etc…&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Criteria for ingredients:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Is the text short?&lt;/li&gt;
&lt;li&gt;Does it contain too many sentences?&lt;/li&gt;
&lt;li&gt;Does it use any words that are food items like “salt”, “olive oil”, “butter”, etc…&lt;/li&gt;
&lt;li&gt;Does it start with a number? (e.g. 3 cups of rice)&lt;/li&gt;
&lt;li&gt;Does it contain a unit like “cup”, “lb”, “oz”, etc…&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;This step is complete once two separate nodes are found. One with a high instruction score, and the other with a high ingredient score.&lt;/p&gt;
&lt;p&gt;Next, the lowest common ancestor (LCA) is computed from the 2 nodes.&lt;/p&gt;
&lt;p&gt;If your unfamiliar with LCA, here’s the definition from &lt;a href=&quot;https://en.wikipedia.org/wiki/Lowest_common_ancestor&quot;&gt;Wikipedia&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;In graph theory and computer science, the lowest common ancestor of two nodes v and w in a tree or directed acyclic graph T is the lowest node that has both v and w as descendants&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I like to think of it as the first shared parent the 2 nodes have. Here’s a good visual of it:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;gatsby-resp-image-wrapper&quot;&gt;&lt;a class=&quot;gatsby-resp-image-link&quot; href=&quot;https://www.benawad.com/static/838a631ad83757e134255f8009bec75c/f1c64/tree-example.png&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt; &lt;img class=&quot;gatsby-resp-image-image&quot; alt=&quot;34 is the LCA of 31 and 52&quot; title=&quot;34 is the LCA of 31 and 52&quot; src=&quot;https://www.benawad.com/static/838a631ad83757e134255f8009bec75c/fcda8/tree-example.png&quot; srcset=&quot;/static/838a631ad83757e134255f8009bec75c/12f09/tree-example.png 148w, /static/838a631ad83757e134255f8009bec75c/e4a3f/tree-example.png 295w, /static/838a631ad83757e134255f8009bec75c/fcda8/tree-example.png 590w, /static/838a631ad83757e134255f8009bec75c/efc66/tree-example.png 885w, /static/838a631ad83757e134255f8009bec75c/c83ae/tree-example.png 1180w, /static/838a631ad83757e134255f8009bec75c/f1c64/tree-example.png 1390w&quot; sizes=&quot;(max-width: 590px) 100vw, 590px&quot; loading=&quot;lazy&quot;/&gt;&lt;/a&gt;&lt;/span&gt; 34 is the LCA of 31 and 52&lt;/p&gt;
&lt;p&gt;So the LCA of 2 HTML nodes looks something like this:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;gatsby-resp-image-wrapper&quot;&gt;&lt;a class=&quot;gatsby-resp-image-link&quot; href=&quot;https://www.benawad.com/static/093decd92ca5529dc84bf3912cc54765/a83dd/html-lca.png&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt; &lt;img class=&quot;gatsby-resp-image-image&quot; alt=&quot;LCA applied to HTML tree&quot; title=&quot;LCA applied to HTML tree&quot; src=&quot;https://www.benawad.com/static/093decd92ca5529dc84bf3912cc54765/fcda8/html-lca.png&quot; srcset=&quot;/static/093decd92ca5529dc84bf3912cc54765/12f09/html-lca.png 148w, /static/093decd92ca5529dc84bf3912cc54765/e4a3f/html-lca.png 295w, /static/093decd92ca5529dc84bf3912cc54765/fcda8/html-lca.png 590w, /static/093decd92ca5529dc84bf3912cc54765/efc66/html-lca.png 885w, /static/093decd92ca5529dc84bf3912cc54765/c83ae/html-lca.png 1180w, /static/093decd92ca5529dc84bf3912cc54765/a83dd/html-lca.png 1482w&quot; sizes=&quot;(max-width: 590px) 100vw, 590px&quot; loading=&quot;lazy&quot;/&gt;&lt;/a&gt;&lt;/span&gt; LCA applied to HTML tree&lt;/p&gt;
&lt;p&gt;(the triangles are subtrees)&lt;/p&gt;
&lt;p&gt;This is useful to compute because in most cases, the LCA node will contain all of the ingredients/instructions and all other HTML can be ignored.&lt;/p&gt;
&lt;p&gt;At this point, the ingredients and instructions are assumed to be inside the LCA node, but there are usually additional nodes that are not useful.&lt;/p&gt;
&lt;p&gt;To help filter them out, 2 other assumptions are made:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Ingredients come before instructions in the HTML.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;This means everything before the first ingredient node will be ignored.&lt;/p&gt;
&lt;pre class=&quot;grvsc-container dark-default-dark&quot; data-language=&quot;html&quot; data-index=&quot;6&quot;&gt;
&lt;code class=&quot;grvsc-code&quot;&gt;&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mtk4&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk1&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;mtk3&quot;&gt;&amp;lt;!-- start ignore --&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk1&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mtk4&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk1&quot;&gt;    Serve it up with your favorite pasta, pizza, lasagna, meatballs, parmigiana,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk1&quot;&gt;    subs, or whatever sounds good.&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk1&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;mtk4&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk1&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mtk4&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk1&quot;&gt;    So many good reasons to make this marinara sauce…so let’s do it!&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk1&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;mtk4&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk1&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;mtk3&quot;&gt;&amp;lt;!-- end ignore --&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk1&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;mtk3&quot;&gt;&amp;lt;!-- first ingredient node --&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk1&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mtk4&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mtk1&quot;&gt;1 cup tomatoes&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;mtk4&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk1&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mtk4&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mtk1&quot;&gt;salt&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;mtk4&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk1&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;mtk3&quot;&gt;&amp;lt;!-- instructions --&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk1&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mtk4&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk1&quot;&gt;    Throw stuff in a pot.&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk1&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;mtk4&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;mtk4&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ol start=&quot;2&quot;&gt;&lt;li&gt;The ingredients and instructions are in 2 contiguous blocks.&lt;/li&gt;
&lt;/ol&gt;&lt;pre class=&quot;grvsc-container dark-default-dark&quot; data-language=&quot;html&quot; data-index=&quot;7&quot;&gt;
&lt;code class=&quot;grvsc-code&quot;&gt;&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mtk4&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk1&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;mtk3&quot;&gt;&amp;lt;!-- start contiguous ingredient block --&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk1&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mtk4&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk1&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mtk4&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mtk1&quot;&gt;1 cup tomatoes&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;mtk4&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk1&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mtk4&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mtk1&quot;&gt;salt&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;mtk4&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk1&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;mtk4&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk1&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;mtk3&quot;&gt;&amp;lt;!-- end contiguous ingredient block --&amp;gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk1&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;mtk3&quot;&gt;&amp;lt;!-- start contiguous instructions block --&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk1&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mtk4&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk1&quot;&gt;    Throw stuff in a pot.&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk1&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;mtk4&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk1&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mtk4&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk1&quot;&gt;    Stir it.&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk1&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;mtk4&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk1&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;mtk3&quot;&gt;&amp;lt;!-- end contiguous instructions block --&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;mtk4&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Therefore, all nodes between 2 ingredient nodes are assumed to be ingredients (helpful for detecting weird ingredients).&lt;/p&gt;
&lt;pre class=&quot;grvsc-container dark-default-dark&quot; data-language=&quot;html&quot; data-index=&quot;8&quot;&gt;
&lt;code class=&quot;grvsc-code&quot;&gt;&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mtk4&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk1&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mtk4&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mtk1&quot;&gt;1 cup rice&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;mtk4&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk1&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;mtk3&quot;&gt;&amp;lt;!-- start assumed ingredients --&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk1&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mtk4&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mtk1&quot;&gt;Cardoon&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;mtk4&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk1&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mtk4&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mtk1&quot;&gt;Gurnard (pick the black belly).&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;mtk4&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk1&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;mtk3&quot;&gt;&amp;lt;!-- end assumed ingredients --&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk1&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mtk4&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mtk1&quot;&gt;1 teaspoon salt&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;mtk4&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;grvsc-line&quot;&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;mtk4&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;mtk17&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The same principle applies to instructions.&lt;/p&gt;
&lt;p&gt;Using these assumptions, the final step involves traversing the children of the LCA node. Each node’s is checked to see if it belongs to the ingredients block, the instructions block, or should be ignored altogether.&lt;/p&gt;
&lt;p&gt;The score from before is considered in combination with the class name, tag (whether it’s a div, span, h1, etc…), and parent tags.&lt;/p&gt;
&lt;p&gt;Not all the conditions need to be met as long as it reaches a certain threshold. It’s better to be more flexible and include a little extra info than to be stricter and sometimes miss an ingredient.&lt;/p&gt;
&lt;p&gt;When the blocks have been determined, the ingredients/instructions can be extracted and the algorithm is done.&lt;/p&gt;
&lt;h3 id=&quot;results&quot;&gt;Results&lt;/h3&gt;
&lt;p&gt;Surprisingly, using heuristics like this performs quite well on the average recipe site/blog.&lt;/p&gt;
&lt;p&gt;To give you an idea of some websites that parse successfully, here are a couple test cases used:&lt;/p&gt;
&lt;p&gt;Situations still come up where it doesn’t extract the ingredients/instructions correctly, like this website: &lt;a href=&quot;http://www.cookingforengineers.com/recipe/195/Chocolate-Truffles&quot;&gt;http://www.cookingforengineers.com/recipe/195/Chocolate-Truffles&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But more often, a recipe import will fail because:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;a user inputs a URL to a website that doesn’t have a recipe on it&lt;/li&gt;
&lt;li&gt;the request times out (7 seconds)&lt;/li&gt;
&lt;li&gt;the website uses client side rendering, so the content is not in HTML.&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Using a combination of heuristics and reading metadata, Saffron is able to import recipes from almost any website.&lt;/p&gt;
&lt;p&gt;If you’d like to give this a try for yourself, you can check it out at &lt;a href=&quot;https://www.mysaffronapp.com&quot;&gt;https://www.mysaffronapp.com&lt;/a&gt;.&lt;/p&gt;
</description>
<pubDate>Mon, 11 May 2020 14:00:36 +0000</pubDate>
<dc:creator>benawad</dc:creator>
<og:title>Scraping Recipe Websites</og:title>
<og:description>How I built an importer to extract recipes from HTML.</og:description>
<og:type>website</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.benawad.com/scraping-recipe-websites/</dc:identifier>
</item>
</channel>
</rss>