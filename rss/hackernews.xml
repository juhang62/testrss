<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Feds Can&amp;#039;t Force You to Unlock Your iPhone with Finger or Face, Judge Rules</title>
<link>https://www.forbes.com/sites/thomasbrewster/2019/01/14/feds-cant-force-you-to-unlock-your-iphone-with-finger-or-face-judge-rules/#12fbd51842b7</link>
<guid isPermaLink="true" >https://www.forbes.com/sites/thomasbrewster/2019/01/14/feds-cant-force-you-to-unlock-your-iphone-with-finger-or-face-judge-rules/#12fbd51842b7</guid>
<description>&lt;div&gt;&lt;img src=&quot;https://specials-images.forbesimg.com/imageserve/874990416/960x0.jpg?fit=scale&quot; alt=&quot;Social Media Data Security&quot; data-height=&quot;2785&quot; data-width=&quot;4193&quot;/&gt;&lt;/div&gt;
&lt;p class=&quot;color-body light-text&quot;&gt;Social Media Data Security&lt;small&gt;NurPhoto via Getty Images&lt;/small&gt;&lt;/p&gt;
&lt;p class=&quot;speakable-paragraph&quot;&gt;A California judge has ruled that American cops can’t force people to unlock a mobile phone with their face or finger. The ruling goes further to protect people’s private lives from government searches than any before and is being hailed as a potentially landmark decision.&lt;/p&gt;
&lt;p&gt;Previously, U.S. judges had ruled that police were allowed to force unlock devices like Apple’s iPhone with biometrics, such as fingerprints, faces or irises. That was despite the fact feds weren’t permitted to force a suspect to divulge a passcode. But according to a &lt;a href=&quot;https://www.documentcloud.org/documents/5684083-Judge-Says-Facial-Recognition-Unlocks-Not.html&quot; target=&quot;_blank&quot; class=&quot;color-accent&quot;&gt;ruling uncovered by &lt;em&gt;Forbes&lt;/em&gt;&lt;/a&gt;, all logins are equal.&lt;/p&gt;
&lt;p&gt;The order came from the U.S. District Court for the Northern District of California in the denial of a search warrant for an unspecified property in Oakland. The warrant was filed as part of an investigation into a Facebook extortion crime, in which a victim was asked to pay up or have an “embarassing” video of them publicly released. The cops had some suspects in mind and wanted to raid their property. In doing so, the feds also wanted to open up any phone on the premises via facial recognition, a fingerprint or an iris.&lt;/p&gt;
&lt;p&gt;While the judge agreed that investigators had shown probable cause to search the property, they didn’t have the right to open all devices inside by forcing unlocks with biometric features.&lt;/p&gt;
&lt;p&gt;On the one hand, magistrate judge Kandis Westmore ruled the request was “overbroad” as it was “neither limited to a particular person nor a particular device.”&lt;/p&gt;
&lt;p&gt;But in a more significant part of the ruling, Judge Westmore declared that the government did not have the right, even with a warrant, to force suspects to incriminate themselves by unlocking their devices with their biological features. Previously, courts had decided biometric features, unlike passcodes, were not “testimonial.” That was because a suspect would have to willingly and verbally give up a passcode, which is not the case with biometrics. A password was therefore deemed testimony, but body parts were not, and so not granted Fifth Amendment protections against self-incrimination.&lt;/p&gt;

&lt;p&gt;That created a paradox: How could a passcode be treated differently to a finger or face, when any of the three could be used to unlock a device and expose a user’s private life?&lt;/p&gt;
&lt;p&gt;And that’s just what Westmore focused on in her ruling. Declaring that “technology is outpacing the law,” the judge wrote that fingerprints and face scans were not the same as “physical evidence” when considered in a context where those body features would be used to unlock a phone.&lt;/p&gt;
&lt;p&gt;“If a person cannot be compelled to provide a passcode because it is a testimonial communication, a person cannot be compelled to provide one’s finger, thumb, iris, face, or other biometric feature to unlock that same device,” the judge wrote.&lt;/p&gt;
&lt;p&gt;“The undersigned finds that a biometric feature is analogous to the 20 nonverbal, physiological responses elicited during a polygraph test, which are used to determine guilt or innocence, and are considered testimonial.”&lt;/p&gt;
&lt;p&gt;There were other ways the government could get access to relevant data in the Facebook extortion case “that do not trample on the Fifth Amendment,” Westmore added. They could, for instance, ask Facebook to provide Messenger communications, she suggested. Facebook has been willing to hand over such messages in a significant number of previous cases &lt;em&gt;Forbes&lt;/em&gt; has reviewed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Law finally catching up with tech?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Over recent years, the government has drawn criticism for its smartphone searches. In 2016, &lt;a href=&quot;https://www.forbes.com/sites/thomasbrewster/2016/10/16/doj-demands-mass-fingerprint-seizure-to-open-iphones/&quot; target=&quot;_blank&quot; class=&quot;color-accent&quot;&gt;&lt;em&gt;Forbes&lt;/em&gt; uncovered a search warrant not dissimilar to the one in California&lt;/a&gt;. Again in the Golden State, the feds wanted to go onto a premises and force unlock devices with fingerprints, regardless of what phones or who was inside.&lt;/p&gt;
&lt;p&gt;Andrew Crocker, senior staff attorney at the digital rights nonprofit Electronic Frontier Foundation, said the latest California ruling went a step further than he’d seen other courts go. In particular, Westmore observed alphanumeric passcodes and biometrics served the same purpose in unlocking phones.&lt;/p&gt;
&lt;p&gt;“While that’s a fairly novel conclusion, it’s important that courts are beginning to look at these issues on their own terms,” Crocker told &lt;em&gt;Forbes&lt;/em&gt;. “In its recent decisions, the Supreme Court has made clear that digital searches raise serious privacy concerns that did not exist in the age of physical searches—a full forensic search of a cellphone reveals far more than a patdown of a suspect’s pockets during an arrest for example.”&lt;/p&gt;
&lt;p&gt;The magistrate judge decision could, of course, be overturned by a district court judge, as happened in Illinois in 2017 with a similar ruling. The best advice for anyone concerned about government overreach into their smartphones: Stick to a strong alphanumeric passcode that you won’t be compelled to disclose.&lt;/p&gt;
</description>
<pubDate>Mon, 14 Jan 2019 20:10:04 +0000</pubDate>
<dc:creator>koolba</dc:creator>
<og:title>Feds Can't Force You To Unlock Your iPhone With Finger Or Face, Judge Rules</og:title>
<og:image>https://thumbor.forbes.com/thumbor/600x315/https%3A%2F%2Fspecials-images.forbesimg.com%2Fimageserve%2F874990416%2F960x0.jpg</og:image>
<og:url>https://www.forbes.com/sites/thomasbrewster/2019/01/14/feds-cant-force-you-to-unlock-your-iphone-with-finger-or-face-judge-rules/</og:url>
<og:description>Cops can't just hold an iPhone up to a suspect's face to search it, judge rules. It could be a landmark decision in modern privacy.</og:description>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.forbes.com/sites/thomasbrewster/2019/01/14/feds-cant-force-you-to-unlock-your-iphone-with-finger-or-face-judge-rules/</dc:identifier>
</item>
<item>
<title>Notion – All-in-one workspace for notes, tasks, wikis, and databases</title>
<link>https://www.notion.so</link>
<guid isPermaLink="true" >https://www.notion.so</guid>
<description>&lt;style&gt;&lt;![CDATA[
			/* Used so electron will render a white background. */
			body {
				background: white;
			}
 			.loading-spinner {
				-webkit-animation: rotate 1000ms linear infinite;
				animation: rotate 1000ms linear infinite;
				-webkit-transform-origin: center center;
				transform-origin: center center;
				width: 1em;
				height: 1em;
				opacity: 0.5;
				display: block;
			}
 			@-webkit-keyframes rotate {
				0% {
					-webkit-transform: rotate(0deg) translateZ(0);
					transform: rotate(0deg) translateZ(0);
				}
				100% {
					-webkit-transform: rotate(360deg) translateZ(0);
					transform: rotate(360deg) translateZ(0);
				}
			}
 			@keyframes rotate {
				0% {
					-webkit-transform: rotate(0deg) translateZ(0);
					transform: rotate(0deg) translateZ(0);
				}
				100% {
					-webkit-transform: rotate(360deg) translateZ(0);
					transform: rotate(360deg) translateZ(0);
				}
			}
		]]&gt;&lt;/style&gt;
		
			</description>
<pubDate>Mon, 14 Jan 2019 17:33:16 +0000</pubDate>
<dc:creator>torvald</dc:creator>
<og:type>website</og:type>
<og:url>https://www.notion.so</og:url>
<og:title>Notion – The all-in-one workspace for your notes, tasks, wikis, and databases.</og:title>
<og:description>A new tool that blends your everyday work apps into one. It's the all-in-one workspace for you and your team</og:description>
<og:image>https://www.notion.so/images/meta.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.notion.so/</dc:identifier>
</item>
<item>
<title>Secure and Ad-Free Internet Anywhere with Streisand and Pi Hole</title>
<link>https://ifelse.io/2019/01/12/secure-ad-free-internet-anywhere-with-streisand-and-pi-hole/</link>
<guid isPermaLink="true" >https://ifelse.io/2019/01/12/secure-ad-free-internet-anywhere-with-streisand-and-pi-hole/</guid>
<description>&lt;p&gt;&lt;strong&gt;tl;dr:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;ads are everywhere and aren’t so fun&lt;/li&gt;
&lt;li&gt;everyone is trying to track you (for better or worse)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pi-hole.net&quot;&gt;Pi Hole&lt;/a&gt; is awesome; it’s a network-level adblocker and runs on a Raspberry Pi&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/StreisandEffect/streisand&quot;&gt;streisand&lt;/a&gt; gives you a quick way to set up a censorship-resistant and secure server running a number of VPNs/proxies (&lt;a href=&quot;https://openvpn.net/&quot;&gt;OpenVPN&lt;/a&gt;, &lt;a href=&quot;https://shadowsocks.org/en/index.html&quot;&gt;Shadowsocks&lt;/a&gt;, &lt;a href=&quot;https://www.wireguard.com/&quot;&gt;Wireguard&lt;/a&gt;, and more!)&lt;/li&gt;
&lt;li&gt;you can combine them to get a secure &amp;amp; resilient connection with network-level ad-blocking everywhere you go (iOS/android, linux, mac OS, windows, etc.)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span class=&quot;marginnote&quot;&gt;Pi Hole is a suite of tools designed to do network-level ad blocking by acting as a localized DNS resolver.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;I recently took some time off of work to spend time with family. During some free-time I had, I worked on a few side projects like &lt;a href=&quot;https://ifelse.io/2018/12/05/better-faster-more-secure-backups-with-restic&quot;&gt;getting our backups in order&lt;/a&gt; and getting a Raspberry Pi 3 running &lt;a href=&quot;https://pi-hole.net&quot;&gt;Pi Hole&lt;/a&gt;. I’m always a fan of better security at every level for people and their data, so these were really fun to get set up. With the Pi Hole running at home and our data being securely backed up, I felt we’d made a couple important leaps forward in terms of data privacy and security. But I wanted that same privacy and ad-blocking capability wherever I was (on my phone, using my laptop remotely, etc.). I’d seen documentation about setting up a VPN on a remote server and using Pi Hole, but the examples were generally unwieldy and assumed too much of the reader (knowing a lot about &lt;em&gt;X&lt;/em&gt; VPN system etc.). So that’s where this post comes in.&lt;/p&gt;
&lt;p&gt;In this post, I’ll walk you through another weekend project that I recently worked on in the same privacy and home-tech vein: setting up a private VPN server on AWS with streisand and adding pi hole to get secure connectivity with network-level ad-blocking &lt;em&gt;anywhere you go&lt;/em&gt; and on &lt;em&gt;all your devices&lt;/em&gt;. Sounds good right? Read on to find out how.&lt;/p&gt;
&lt;h2 id=&quot;pi-hole&quot;&gt;Pi hole?&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;marginnote&quot;&gt;&lt;img src=&quot;https://ifelse.io/static/pi-hole-logo.png&quot; width=&quot;10%&quot;/&gt; If you’re interested in learning more about the story behind the Pi Hole, check out &lt;a href=&quot;https://softwareengineeringdaily.com/2018/05/29/pi-hole-ad-blocker-hardware-with-jacob-salmela/&quot;&gt;this episode&lt;/a&gt; from Software Engineering Daily&lt;/span&gt; Let’s start by discussing Pi Hole. Pi Hole is a suite of tools designed to do network-level ad blocking by acting as a localized DNS resolver. It offers (from their site):&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;em&gt;Network-wide protection&lt;/em&gt;: Instead of browser plugins or other software on each computer, install Pi-hole in one place and your entire network is protected.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Block in-app advertisements&lt;/em&gt;: Network-level blocking allows you to block ads in non-traditional places such as mobile apps and smart TVs, regardless of hardware or OS.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Improve network performance&lt;/em&gt;: Since advertisements are blocked before they are downloaded, network performance is improved and will feel faster.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Monitor statistics&lt;/em&gt;: Our Web interface offers control of your Pi-hole and a central place to view statistics. We also include an API for extending these stats.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Like I said, I got one of these set up during some time off in November. And having the Raspberry Pi has been great. For one, it’s easy for my family to use since there’s essentially nothing to be done to use it. And it’s a &lt;em&gt;network-wide&lt;/em&gt; adblocker, so our our non-browser devices are moderated, too! We’ve seen speed-ups on many devices and gotten some insight into which devices are calling home decently often, too. I even started noticing some network calls our ISP appears to be making, something I’m still looking into.&lt;/p&gt;
&lt;p&gt;I won’t do a full walk-through on getting the pi hole set up on a raspberry pi since I think that deserves it’s own treatment. But I do want to show off some of what the Pi Hole brings. Check out this dashboard with some sample data from the other day.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;marginnote&quot;&gt;&lt;em&gt;Our Pi Hole dashboard&lt;/em&gt;. The 14% was even decently low; most days when I check it’s usually around 20%. Which means &lt;em&gt;at least&lt;/em&gt; roughly 1 in 5 network requests is aimed at either ads or some sort of tracking. It’s telling to see which apps and even other devices around our home are calling home often or out to ad services. Not surprising, really, but it’s another thing to see it happening in your own home.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ifelse.io/static/pi-hole-dashboard-screenshot.jpg&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;setting-up-a-wiregured-etc-server-with-streisand&quot;&gt;Setting up a Wiregured, etc. Server with Streisand&lt;/h2&gt;
&lt;p&gt;I’d looked into projects like OpenVPN in the past, but what always held me up was 1) a not-hard but also not-easy setup process and 2) feeling &lt;em&gt;juuuust&lt;/em&gt; lazy enough and/or motivated by other things to not want to go through the trouble of setting it up. I have a VPN through work, so it wasn’t something I wasn’t used to or understood the benefits of.&lt;/p&gt;
&lt;p&gt;But once I learned you could easily combine the pi hole’s ad-blocking capabilities with a VPN, I wanted to make it happen ASAP. This fact, plus discovering the &lt;a href=&quot;https://github.com/StreisandEffect/streisand&quot;&gt;streisand&lt;/a&gt; project were a perfect recipe for a (next available) weekend project. Streisand is great because it’s designed for speed and ease of use but also aims to be censorship resistant so it implements best practices. It also offers a wide variety of technologies out of the box, so you can choose a setup that works for you (ranging from more compatible to more performant).&lt;/p&gt;
&lt;p&gt;Clone the streisand repo to start and run it’s python venv setup.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sh&quot;&gt;git clone https://github.com/StreisandEffect/streisand.git &amp;amp;&amp;amp; cd streisand
./util/venv-dependencies.sh ./venv
source ./venv/bin/activate
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;You can choose a wide variety of platforms to run a streisand server on. I use AWS heavily professionally and personally, so I went with that. I made a few tweaks to the playbooks since I wasn’t happy with some defaults on a first run. Will probably open a PR to see what the team behind the project thinks of a few small changes.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;playbooks/roles/genesis-amazon/defaults/main.yml&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You can just as easily do this in the EC2 console later, too, if you prefer. I wanted to change to a T3 since that generation of AWS server is generally more cost-effective for the resources it gives you. To keep costs down, I ended up purchasing a reserved instance for the year and that cut my aws costs almost in half (notable, too, when you can run your own VPN instead of paying the likes of Nord VPN or one of the others).&lt;/p&gt;
&lt;p&gt;If you do find yourself here and unfamiliar with or unwilling to use AWS or another system to run your own server, pleast consider &lt;a href=&quot;https://protonvpn.com/&quot;&gt;Proton VPN&lt;/a&gt; as a secure alternative that isn’t as likely as the other providers to skim your data.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-yml&quot;&gt;#...
aws_instance_type: 't3.micro' # or whatever instance type you want
#...
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;playbooks/roles/validation/tasks/main.yml&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;When I first ran through setting up streisand, I set the maximum number of client profiles (20) but later found this likely wouldn’t be enough since I’m trying to get my family and extended family to use the VPN and have better data security and privacy. If I can get them all to use this setup and &lt;a href=&quot;https://1password.com&quot;&gt;1Password&lt;/a&gt; I will be happy. Yes I am a ton of fun at parties and family gatherings ;) If 20 is sufficient for you, no reason to make this change.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: adding more profiles will slow down the setup process, especially if you’ve enabled all the options. I think setting up 150 profiles took around an hour or so for me (another reason to opt for the T3 over the T2.micro).&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-yml&quot;&gt;#...
when: (vpn_clients &amp;gt; 150) or (vpn_clients &amp;lt; 1)
#...
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Finally, run the ansible playbooks.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sh&quot;&gt; ./streisand
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Feel free to choose whatever setup works best for you. The streisand ansible playbook will walk you through all the steps. The only parts worth noting or where I deviated from the defaults are:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;I use &lt;a href=&quot;https://cloudflare.com&quot;&gt;Cloudflare&lt;/a&gt; for DNS, so I used the elastic IP to set a DNS record for the domain/subdomain we use. Streisand will prompt you for this FQDN during the process and try to get a &lt;a href=&quot;https://letsencrypt.org&quot;&gt;Let’s Encrypt&lt;/a&gt; SSL cert for you. If you do use Cloudfare, make sure &lt;em&gt;not&lt;/em&gt; to set the “DNS/HTTP proxy” setting at first. If you do, Cloudflare will see your application as being offline and resolve to a Cloudflare offline server. I discovered this after hitting my domain and then using &lt;code&gt;dig&lt;/code&gt; to see what was actually being resolved. I turned the Cloudflare cache/proxy back online after the server was running.&lt;/li&gt;
&lt;li&gt;I set up all the default options, but didn’t elect to set up a Tor server (for now). Feel free to choose whichever options you prefer&lt;/li&gt;
&lt;li&gt;I had the playbook create a &lt;em&gt;ton&lt;/em&gt; of profiles, so it took a lot longer than 10 min (probably just over an hour).&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Once the setup is complete, streisand will let you open up a local HTML file that has the instructions for connecting to your gateway.&lt;/p&gt;
&lt;h2 id=&quot;adding-pi-hole&quot;&gt;Adding Pi Hole&lt;/h2&gt;
&lt;p&gt;To get the benefits of Pi Hole in your new VPN(s), ssh into your box. If you used the AWS setup, the EC2 console has a easy “connect” button that will show you how to do this. Once you’re in, you should run the pi hole installation script:&lt;/p&gt;
&lt;p&gt;(&lt;em&gt;in your instance&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;marginnote&quot;&gt;If you’re interested in other installation methods, check out &lt;a href=&quot;https://github.com/pi-hole/pi-hole/#one-step-automated-install&quot;&gt;https://github.com/pi-hole/pi-hole/#one-step-automated-install&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sh&quot;&gt;curl -sSL https://install.pi-hole.net | bash
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;For the pi hole options, I followed all the defaults, choosing &lt;code&gt;tun0&lt;/code&gt; as the interface to listen on and I also installed the web interface. Interestingly, since streisand’s gateway is fronted by nginx, I’ll need to find a way to allow access to the &lt;code&gt;pi.hole&lt;/code&gt; UI admin. This is on my to-do list and shouldn’t be all that hard (likely just some nginx config). If you want to see stats sooner, you can run &lt;code&gt;pihole -c&lt;/code&gt; from inside your instances and get some basic stats. If you want to update your blocklists, you can also do that from the CLI inside your server. I added a few from &lt;a href=&quot;https://firebog.net&quot;&gt;https://firebog.net&lt;/a&gt; and have had good success. Blocklists there are marked as more or less likely to cause issues while browsing. This is helpful since you can gauge how often you wan to intervene to resolve issues or false-positives.&lt;/p&gt;
&lt;p&gt;There’s not much else to do to get up and running. For our setup, we use either &lt;a href=&quot;https://tunnelblick.net/downloads.html&quot;&gt;TunnelBlick&lt;/a&gt;, &lt;a href=&quot;https://github.com/shadowsocks/ShadowsocksX-NG&quot;&gt;Shadowsocks NG&lt;/a&gt;, or &lt;a href=&quot;https://www.wireguard.com/&quot;&gt;Wireguard&lt;/a&gt; clients for desktop and primarily Wireguard for our phones since it offers the best overall performance. There are also OpenVPN clients available for seemingly every platform. Once you’ve connected, check out &lt;a href=&quot;https://pi-hole.net/pages-to-test-ad-blocking-performance/&quot;&gt;https://pi-hole.net/pages-to-test-ad-blocking-performance/&lt;/a&gt; to see the ad blocking goodness at work! You can also visit &lt;a href=&quot;https://duckduckgo.com/?q=ip+address&amp;amp;ia=answer&quot;&gt;duckduckgo&lt;/a&gt; to see your IP (should be the elastic IP you set or similar).&lt;/p&gt;
&lt;p&gt;Questions, thoughts? Let me know in the comments or &lt;a href=&quot;https://twitter.com/MarkTheThomas&quot;&gt;@markthethomas&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 14 Jan 2019 15:42:58 +0000</pubDate>
<dc:creator>markthethomas</dc:creator>
<og:title>Secure &amp; Ad-free Internet Anywhere With Streisand and Pi Hole</og:title>
<og:description>tl;dr: ads are everywhere and aren’t so fun everyone is trying to track you (for better or worse) Pi Hole is awesome; it’s a network-level adblocker and runs on a Raspberry Pi streisand gives you a quick way to set up a censorship-resistant and secure server running a number of VPNs/proxies (OpenVPN, Shadowsocks, Wireguard, and more!) you can combine them to get a secure &amp; resilient connection with network-level ad-blocking everywhere you go (iOS/android, linux, mac OS, windows, etc.</og:description>
<og:type>article</og:type>
<og:url>https://ifelse.io/2019/01/12/secure-ad-free-internet-anywhere-with-streisand-and-pi-hole/</og:url>
<dc:language>en-us</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://ifelse.io/2019/01/12/secure-ad-free-internet-anywhere-with-streisand-and-pi-hole/</dc:identifier>
</item>
<item>
<title>Project Alias hacks Amazon Echo and Google Home to protect privacy</title>
<link>https://www.fastcompany.com/90290703/this-is-the-first-truly-great-amazon-alexa-and-google-home-hack</link>
<guid isPermaLink="true" >https://www.fastcompany.com/90290703/this-is-the-first-truly-great-amazon-alexa-and-google-home-hack</guid>
<description>&lt;div readability=&quot;15.230964467005&quot;&gt;
&lt;p&gt;Fungi of the rain forest can be nasty parasites. Eager to reproduce, they’ll &lt;a href=&quot;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4527712/&quot;&gt;infect a far larger, more powerful insect&lt;/a&gt;, taking control of its brain, and using its strength against it–animating the zombie insect to climb to the far reaches of the rain forest canopy. The insect dies, of course, but the spores are released in the perfect spot, giving the fungus its best chance of living on.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;ad-wrapper ad-wrapper--mobileparallax_1&quot;&gt;
&lt;div class=&quot;ad-wrapper--ad-unit-wrap&quot;&gt;
&lt;p&gt;advertisement&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ad-wrapper ad-wrapper--native_mid_article_inject&quot;&gt;
&lt;div class=&quot;ad-wrapper--ad-unit-wrap&quot;&gt;
&lt;p&gt;advertisement&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div readability=&quot;40.381828637148&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://bjoernkarmann.dk/project_alias&quot;&gt;Project Alias&lt;/a&gt; is the technological equivalent to parasitic fungus. But instead of latching onto an insect, it latches onto a Google Home or Amazon Alexa device–taking control of their strengths for its own purposes. Project Alias serves as a gatekeeper between you and big corporations. It effectively deafens the home assistant when you don’t want it listening, and brings it to life when you do.&lt;/p&gt;
&lt;p&gt;[Image: courtesy Alias]It’s a dramatic metaphor, but an apt one to Tellart designer &lt;a href=&quot;http://bjoernkarmann.dk&quot;&gt;Bjørn Karmann&lt;/a&gt; and Topp designer &lt;a href=&quot;http://www.toreknudsen.dk/&quot;&gt;Tore Knudsen&lt;/a&gt;. After all, Google’s and Amazon’s voice assistants are now listening on more than a billion devices worldwide, &lt;a href=&quot;https://www.washingtonpost.com/news/the-switch/wp/2018/05/24/an-amazon-echo-recorded-a-familys-conversation-then-sent-it-to-a-random-person-in-their-contacts-report-says/&quot;&gt;even sharing them by mistake&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;“This [fungus] is a vital part of the rain forest, since whenever a species gets too dominant or powerful it has higher chances of getting infected, thus keeping the diversity in balance,” says Tore Knudsen. “We wanted to take that as an analogy and show how DIY and open source can be used to create ‘viruses’ for big tech companies.”&lt;/p&gt;
&lt;p&gt;Project Alias is designed as a completely open-source hardware/software solution for a world where big corporations have the ability to listen to us all the time. The hardware is a plug-powered microphone/speaker unit that can sit on top of your smart speaker of choice. It’s powered by a pretty typical raspberry pie chipset, the tool of choice for homebrew electronics aficionados.&lt;/p&gt;
&lt;p&gt;&lt;iframe src=&quot;https://player.vimeo.com/video/306044007?app_id=122963&quot; width=&quot;525&quot; height=&quot;295&quot; frameborder=&quot;0&quot; title=&quot;Project Alias&quot; allow=&quot;autoplay; fullscreen&quot; allowfullscreen=&quot;&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;The speaker sounds like a white noise machine to the assistant, covering your speech with an inaudible, omnipresent static. That is, until the software side comes into play. You can train the Alias through local machine learning (no cloud here!) to learn how to wake the assistant to a unique keyword, disabling the static.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ad-wrapper ad-wrapper--mobilerectangle_1&quot;&gt;
&lt;div class=&quot;ad-wrapper--ad-unit-wrap&quot;&gt;
&lt;p&gt;advertisement&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div readability=&quot;50.222682547903&quot;&gt;
&lt;p&gt;The Google Assistant makes you call it “Google.” The Echo makes you call it “Computer,” “Amazon,” or “Alexa.” So instead of talking to something you own, you’re talking to a brand. Alias lets you train it to recognize “Hey Jim” or “Pizza party!” or whatever else you imagine.&lt;/p&gt;
&lt;p&gt;[Image: courtesy Alias]“When a family gets a puppy into their home, there is always this name-giving ritual, where the kids get to wish for the name,” says Knudsen. “We don’t see a reason why this should be different with home AIs.”&lt;/p&gt;
&lt;p&gt;When you utter your chosen word, it prompts the Alias to whisper, “Hey Google,” to activate the assistant. And then Alias goes quiet, allowing you to communicate with Google or Amazon as you normally would.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;size-large wp-image-90291240 lazyload&quot; alt=&quot;&quot; width=&quot;525&quot; height=&quot;350&quot; sizes=&quot;(max-width: 525px) 100vw, 525px&quot; data-src=&quot;https://images.fastcompany.net/image/upload/w_596,c_limit,q_auto:best,f_auto/wp-cms/uploads/2019/01/3-hijack-amazon-echo-and-google-home-for-your-privacy.jpg&quot;/&gt;[Image: courtesy Alias]The most appealing part of Project Alias is its promise of privacy. Amazon has a relatively poor track record here, having been busted for &lt;a href=&quot;https://www.cnbc.com/2018/11/19/how-to-delete-amazon-alexa-conversations.html&quot;&gt;storing past conversations&lt;/a&gt; on the device. Google, too, &lt;a href=&quot;https://www.wired.com/story/amazon-echo-and-google-home-voice-data-delete/&quot;&gt;collects spoken&lt;/a&gt; data. Of course they aren’t meant to listen in to your private conversations, but by nature, the devices must always be listening a &lt;em&gt;little&lt;/em&gt; to be listening at just the right time–and they can always mishear any word as a wake word. But whether these devices are true privacy invasions or not, frankly, it’s hard to trust big companies with relatively poor privacy track records to always hear only what you want them to hear.&lt;/p&gt;
&lt;p&gt;Project Alias offers an independent layer of protection to any privacy-minded person. To be honest, I wish it weren’t just an &lt;a href=&quot;https://github.com/bjoernkarmann/project_alias&quot;&gt;open source maker project&lt;/a&gt;. I wish it were a real product that I could buy right now.&lt;/p&gt;
&lt;p&gt;“If somebody would be ready to invest, we would be ready for a collaboration,” says Knudsen. “But initially, we made this project with a goal to encourage people to take action and show how things could be different . . . [to] ask what kind of ‘smart’ we actually want in the future.”&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div class=&quot;ad-wrapper ad-wrapper--native_recommendationlink&quot;&gt;
&lt;div class=&quot;ad-wrapper--ad-unit-wrap&quot;&gt;
&lt;p&gt;advertisement&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;


&lt;/div&gt;
</description>
<pubDate>Mon, 14 Jan 2019 14:43:52 +0000</pubDate>
<dc:creator>jbredeche</dc:creator>
<og:type>article</og:type>
<og:title>This is the first truly great Amazon Alexa and Google Home hack</og:title>
<og:url>https://www.fastcompany.com/90290703/this-is-the-first-truly-great-amazon-alexa-and-google-home-hack</og:url>
<og:description>The two designers behind Project Alias compare it to a virus–or perhaps a parasitic fungus. In a good way.</og:description>
<og:image>https://images.fastcompany.net/image/upload/w_1280,f_auto,q_auto,fl_lossy/wp-cms/uploads/2019/01/p-1-hijack-amazon-echo-and-google-home-for-your-privacy.jpg</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.fastcompany.com/90290703/this-is-the-first-truly-great-amazon-alexa-and-google-home-hack</dc:identifier>
</item>
<item>
<title>Writing an OS in Rust: Introduction to Paging</title>
<link>https://os.phil-opp.com/paging-introduction/</link>
<guid isPermaLink="true" >https://os.phil-opp.com/paging-introduction/</guid>
<description>&lt;header class=&quot;masthead&quot;&gt;
&lt;p&gt;&lt;small&gt;Philipp Oppermann's blog&lt;/small&gt;&lt;/p&gt;
&lt;/header&gt;
&lt;time datetime=&quot;2019-01-14&quot; class=&quot;post-date&quot;&gt;Jan 14, 2019&lt;/time&gt;&lt;aside id=&quot;toc&quot;&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://os.phil-opp.com/paging-introduction/#memory-protection&quot;&gt;Memory Protection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://os.phil-opp.com/paging-introduction/#segmentation&quot;&gt;Segmentation&lt;/a&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://os.phil-opp.com/paging-introduction/#virtual-memory&quot;&gt;Virtual Memory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://os.phil-opp.com/paging-introduction/#fragmentation&quot;&gt;Fragmentation&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://os.phil-opp.com/paging-introduction/#paging&quot;&gt;Paging&lt;/a&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://os.phil-opp.com/paging-introduction/#hidden-fragmentation&quot;&gt;Hidden Fragmentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://os.phil-opp.com/paging-introduction/#page-tables&quot;&gt;Page Tables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://os.phil-opp.com/paging-introduction/#multilevel-page-tables&quot;&gt;Multilevel Page Tables&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://os.phil-opp.com/paging-introduction/#paging-on-x86&quot;&gt;Paging on x86_64&lt;/a&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://os.phil-opp.com/paging-introduction/#example-translation&quot;&gt;Example Translation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://os.phil-opp.com/paging-introduction/#page-table-format&quot;&gt;Page Table Format&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://os.phil-opp.com/paging-introduction/#the-translation-lookaside-buffer&quot;&gt;The Translation Lookaside Buffer&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://os.phil-opp.com/paging-introduction/#implementation&quot;&gt;Implementation&lt;/a&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://os.phil-opp.com/paging-introduction/#page-faults&quot;&gt;Page Faults&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://os.phil-opp.com/paging-introduction/#accessing-the-page-tables&quot;&gt;Accessing the Page Tables&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://os.phil-opp.com/paging-introduction/#summary&quot;&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://os.phil-opp.com/paging-introduction/#what-s-next&quot;&gt;What's next?&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/aside&gt;&lt;p&gt;This post introduces &lt;em&gt;paging&lt;/em&gt;, a very common memory management scheme that we will also use for our operating system. It explains why memory isolation is needed, how &lt;em&gt;segmentation&lt;/em&gt; works, what &lt;em&gt;virtual memory&lt;/em&gt; is, and how paging solves memory fragmentation issues. It also explores the layout of multilevel page tables on the x86_64 architecture.&lt;/p&gt;

&lt;p&gt;This blog is openly developed on &lt;a href=&quot;https://github.com/phil-opp/blog_os&quot;&gt;GitHub&lt;/a&gt;. If you have any problems or questions, please open an issue there. You can also leave comments &lt;a href=&quot;https://os.phil-opp.com/paging-introduction/#comments&quot;&gt;at the bottom&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;memory-protection&quot;&gt;&lt;a class=&quot;gutenberg-anchor&quot; href=&quot;https://os.phil-opp.com/paging-introduction/#memory-protection&quot; aria-label=&quot;Anchor link for: memory-protection&quot;&gt;🔗&lt;/a&gt; Memory Protection&lt;/h2&gt;
&lt;p&gt;One main task of an operating system is to isolate programs from each other. Your web browser shouldn't be able to interfere with your text editor, for example. To achieve this goal, operating systems utilize hardware functionality to ensure that memory areas of one process are not accessible by other processes. There are different approaches, depending on the hardware and the OS implementation.&lt;/p&gt;
&lt;p&gt;As an example, some ARM Cortex-M processors (used for embedded systems) have a &lt;a href=&quot;https://developer.arm.com/docs/ddi0337/e/memory-protection-unit/about-the-mpu&quot;&gt;&lt;em&gt;Memory Protection Unit&lt;/em&gt;&lt;/a&gt; (MPU), which allows you to define a small number (e.g. 8) of memory regions with different access permissions (e.g. no access, read-only, read-write). On each memory access the MPU ensures that the address is in a region with correct access permissions and throws an exception otherwise. By changing the regions and access permissions on each process switch, the operating system can ensure that each process only accesses its own memory, and thus isolate processes from each other.&lt;/p&gt;
&lt;p&gt;On x86, the hardware supports two different approaches to memory protection: &lt;a href=&quot;https://en.wikipedia.org/wiki/X86_memory_segmentation&quot;&gt;segmentation&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Virtual_memory#Paged_virtual_memory&quot;&gt;paging&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;segmentation&quot;&gt;&lt;a class=&quot;gutenberg-anchor&quot; href=&quot;https://os.phil-opp.com/paging-introduction/#segmentation&quot; aria-label=&quot;Anchor link for: segmentation&quot;&gt;🔗&lt;/a&gt; Segmentation&lt;/h2&gt;
&lt;p&gt;Segmentation was already introduced in 1978, originally to increase the amount of addressable memory. The situation back then was that CPUs only used 16-bit addresses, which limited the amount of addressable memory to 64KiB. To make more than these 64KiB accessible, additional segment registers were introduced, each containing an offset address. The CPU automatically added this offset on each memory access, so that up to 1MiB of memory were accessible.&lt;/p&gt;
&lt;p&gt;The segment register is chosen automatically by the CPU, depending on the kind of memory access: For fetching instructions the code segment &lt;code&gt;CS&lt;/code&gt; is used and for stack operations (push/pop) the stack segment &lt;code&gt;SS&lt;/code&gt; is used. Other instructions use data segment &lt;code&gt;DS&lt;/code&gt; or the extra segment &lt;code&gt;ES&lt;/code&gt;. Later two additional segment registers &lt;code&gt;FS&lt;/code&gt; and &lt;code&gt;GS&lt;/code&gt; were added, which can be used freely.&lt;/p&gt;
&lt;p&gt;In the first version of segmentation, the segment registers directly contained the offset and no access control was performed. This was changed later with the introduction of the &lt;a href=&quot;https://en.wikipedia.org/wiki/X86_memory_segmentation#Protected_mode&quot;&gt;&lt;em&gt;protected mode&lt;/em&gt;&lt;/a&gt;. When the CPU runs in this mode, the segment descriptors contain an index into a local or global &lt;a href=&quot;https://en.wikipedia.org/wiki/Global_Descriptor_Table&quot;&gt;&lt;em&gt;descriptor table&lt;/em&gt;&lt;/a&gt;, which contains – in addition to an offset address – the segment size and access permissions. By loading separate global/local descriptor tables for each process that confine memory accesses to the process's own memory areas, the OS can isolate processes from each other.&lt;/p&gt;
&lt;p&gt;By modifying the memory addresses before the actual access, segmentation already employed a technique that is now used almost everywhere: &lt;em&gt;virtual memory&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&quot;virtual-memory&quot;&gt;&lt;a class=&quot;gutenberg-anchor&quot; href=&quot;https://os.phil-opp.com/paging-introduction/#virtual-memory&quot; aria-label=&quot;Anchor link for: virtual-memory&quot;&gt;🔗&lt;/a&gt; Virtual Memory&lt;/h3&gt;
&lt;p&gt;The idea behind virtual memory is to abstract away the memory addresses from the underlying physical storage device. Instead of directly accessing the storage device, a translation step is performed first. For segmentation, the translation step is to add the offset address of the active segment. Imagine a program accessing memory address &lt;code&gt;0x1234000&lt;/code&gt; in a segment with offset &lt;code&gt;0x1111000&lt;/code&gt;: The address that is really accessed is &lt;code&gt;0x2345000&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To differentiate the two address types, addresses before the translation are called &lt;em&gt;virtual&lt;/em&gt; and addresses after the translation are called &lt;em&gt;physical&lt;/em&gt;. One important difference between these two kinds of addresses is that physical addresses are unique and always refer to the same, distinct memory location. Virtual addresses on the other hand depend on the translation function. It is entirely possible that two different virtual addresses refer to the same physical address. Also, identical virtual addresses can refer to different physical addresses when they use different translation functions.&lt;/p&gt;
&lt;p&gt;An example where this property is useful is running the same program twice in parallel:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://os.phil-opp.com/paging-introduction/segmentation-same-program-twice.svg&quot; alt=&quot;Two virtual address spaces with address 0–150, one translated to 100–250, the other to 300–450&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Here the same program runs twice, but with different translation functions. The first instance has an segment offset of 100, so that its virtual addresses 0–150 are translated to the physical addresses 100–250. The second instance has offset 300, which translates its virtual addresses 0–150 to physical addresses 300–450. This allows both programs to run the same code and use the same virtual addresses without interfering with each other.&lt;/p&gt;
&lt;p&gt;Another advantage is that programs can be placed at arbitrary physical memory locations now, even if they use completely different virtual addresses. Thus, the OS can utilize the full amount of available memory without needing to recompile programs.&lt;/p&gt;
&lt;h3 id=&quot;fragmentation&quot;&gt;&lt;a class=&quot;gutenberg-anchor&quot; href=&quot;https://os.phil-opp.com/paging-introduction/#fragmentation&quot; aria-label=&quot;Anchor link for: fragmentation&quot;&gt;🔗&lt;/a&gt; Fragmentation&lt;/h3&gt;
&lt;p&gt;The differentiation between virtual and physical addresses makes segmentation really powerful. However, it has the problem of fragmentation. As an example, imagine that we want to run a third copy of the program we saw above:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://os.phil-opp.com/paging-introduction/segmentation-fragmentation.svg&quot; alt=&quot;Three virtual address spaces, but there is not enough continuous space for the third&quot;/&gt;&lt;/p&gt;
&lt;p&gt;There is no way to map the third instance of the program to virtual memory without overlapping, even though there is more than enough free memory available. The problem is that we need &lt;em&gt;continuous&lt;/em&gt; memory and can't use the small free chunks.&lt;/p&gt;
&lt;p&gt;One way to combat this fragmentation is to pause execution, move the used parts of the memory closer together, update the translation, and then resume execution:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://os.phil-opp.com/paging-introduction/segmentation-fragmentation-compacted.svg&quot; alt=&quot;Three virtual address spaces after defragmentation&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Now there is enough continuous space to start the third instance of our program.&lt;/p&gt;
&lt;p&gt;The disadvantage of this defragmentation process is that is needs to copy large amounts of memory which decreases performance. It also needs to be done regularly before the memory becomes too fragmented. This makes performance unpredictable, since programs are paused at random times and might become unresponsive.&lt;/p&gt;
&lt;p&gt;The fragmentation problem is one of the reasons that segmentation is no longer used by most systems. In fact, segmentation is not even supported in 64-bit mode on x86 anymore. Instead &lt;em&gt;paging&lt;/em&gt; is used, which completely avoids the fragmentation problem.&lt;/p&gt;

&lt;p&gt;The idea is to divide both the virtual and the physical memory space into small, fixed-size blocks. The blocks of the virtual memory space are called &lt;em&gt;pages&lt;/em&gt; and the blocks of the physical address space are called &lt;em&gt;frames&lt;/em&gt;. Each page can be individually mapped to a frame, which makes it possible split larger memory regions across non-continuous physical frames.&lt;/p&gt;
&lt;p&gt;The advantage of this becomes visible if we recap the example of the fragmented memory space, but use paging instead of segmentation this time:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://os.phil-opp.com/paging-introduction/paging-fragmentation.svg&quot; alt=&quot;With paging the third program instance can be split across many smaller physical areas&quot;/&gt;&lt;/p&gt;
&lt;p&gt;In this example we have a page size of 50 bytes, which means that each of our memory regions is split across three pages. Each page is mapped to a frame individually, so a continuous virtual memory region can be mapped to non-continuous physical frames. This allows us to start the third instance of the program without performing any defragmentation before.&lt;/p&gt;
&lt;h3 id=&quot;hidden-fragmentation&quot;&gt;&lt;a class=&quot;gutenberg-anchor&quot; href=&quot;https://os.phil-opp.com/paging-introduction/#hidden-fragmentation&quot; aria-label=&quot;Anchor link for: hidden-fragmentation&quot;&gt;🔗&lt;/a&gt; Hidden Fragmentation&lt;/h3&gt;
&lt;p&gt;Compared to segmentation, paging uses lots of small, fixed sized memory regions instead of a few large, variable sized regions. Since every frame has the same size, there are no frames that are too small to be used so that no fragmentation occurs.&lt;/p&gt;
&lt;p&gt;Or it &lt;em&gt;seems&lt;/em&gt; like no fragmentation occurs. There is still some hidden kind of fragmentation, the so-called &lt;em&gt;internal fragmentation&lt;/em&gt;. Internal fragmentation occurs because not every memory region is an exact multiple of the page size. Imagine a program of size 101 in the above example: It would still need three pages of size 50, so it would occupy 49 bytes more than needed. To differentiate the two types of fragmentation, the kind of fragmentation that happens when using segmentation is called &lt;em&gt;external fragmentation&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Internal fragmentation is unfortunate, but often better than the external fragmentation that occurs with segmentation. It still wastes memory, but does not require defragmentation and makes the amount of fragmentation predictable (on average half a page per memory region).&lt;/p&gt;
&lt;h3 id=&quot;page-tables&quot;&gt;&lt;a class=&quot;gutenberg-anchor&quot; href=&quot;https://os.phil-opp.com/paging-introduction/#page-tables&quot; aria-label=&quot;Anchor link for: page-tables&quot;&gt;🔗&lt;/a&gt; Page Tables&lt;/h3&gt;
&lt;p&gt;We saw that each of the potentially millions of pages is individually mapped to a frame. This mapping information needs to be stored somewhere. Segmentation uses an individual segment selector register for each active memory region, which is not possible for paging since there are way more pages than registers. Instead paging uses a table structure called &lt;em&gt;page table&lt;/em&gt; to store the mapping information.&lt;/p&gt;
&lt;p&gt;For our above example the page tables would look like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://os.phil-opp.com/paging-introduction/paging-page-tables.svg&quot; alt=&quot;Three page tables, one for each program instance. For instance 1 the mapping is 0-&amp;gt;100, 50-&amp;gt;150, 100-&amp;gt;200. For instance 2 it is 0-&amp;gt;300, 50-&amp;gt;350, 100-&amp;gt;400. For instance 3 it is 0-&amp;gt;250, 50-&amp;gt;450, 100-&amp;gt;500.&quot;/&gt;&lt;/p&gt;
&lt;p&gt;We see that each program instance has its own page table. A pointer to the currently active table is stored in a special CPU register. On &lt;code&gt;x86&lt;/code&gt;, this register is called &lt;code&gt;CR3&lt;/code&gt;. It is the job of the operating system to load this register with the pointer to the correct page table before running each program instance.&lt;/p&gt;
&lt;p&gt;On each memory access, the CPU reads the table pointer from the register and looks up the mapped frame for the accessed page in the table. This is entirely done in hardware and completely transparent to the running program. To speed up the translation process, many CPU architectures have a special cache that remembers the results of the last translations.&lt;/p&gt;
&lt;p&gt;Depending on the architecture, page table entries can also store attributes such as access permissions in a flags field. In the above example, the &quot;r/w&quot; flag makes the page both readable and writable.&lt;/p&gt;
&lt;h3 id=&quot;multilevel-page-tables&quot;&gt;&lt;a class=&quot;gutenberg-anchor&quot; href=&quot;https://os.phil-opp.com/paging-introduction/#multilevel-page-tables&quot; aria-label=&quot;Anchor link for: multilevel-page-tables&quot;&gt;🔗&lt;/a&gt; Multilevel Page Tables&lt;/h3&gt;
&lt;p&gt;The simple page tables we just saw have a problem in larger address spaces: they waste memory. For example, imagine a program that uses the four virtual pages &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;1_000_000&lt;/code&gt;, &lt;code&gt;1_000_050&lt;/code&gt;, and &lt;code&gt;1_000_100&lt;/code&gt; (we use &lt;code&gt;_&lt;/code&gt; as a thousands separator):&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://os.phil-opp.com/paging-introduction/single-level-page-table.svg&quot; alt=&quot;Page 0 mapped to frame 0 and pages 1_000_000–1_000_150 mapped to frames 100–250&quot;/&gt;&lt;/p&gt;
&lt;p&gt;It only needs 4 physical frames, but the page table has over a million entries. We can't omit the empty entries because then the CPU would no longer be able to jump directly to the correct entry in the translation process (e.g. it is no longer guaranteed that the fourth page uses the fourth entry).&lt;/p&gt;
&lt;p&gt;To reduce the wasted memory, we can use a &lt;strong&gt;two-level page table&lt;/strong&gt;. The idea is that we use different page tables for different address regions. An additional table called &lt;em&gt;level 2&lt;/em&gt; page table contains the mapping between address regions and (level 1) page tables.&lt;/p&gt;
&lt;p&gt;This is best explained by an example. Let's define that each level 1 page table is responsible for a region of size &lt;code&gt;10_000&lt;/code&gt;. Then the following tables would exist for the above example mapping:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://os.phil-opp.com/paging-introduction/multilevel-page-table.svg&quot; alt=&quot;Page 0 points to entry 0 of the level 2 page table, which points to the level 1 page table T1. The first entry of T1 points to frame 0, the other entries are empty. Pages 1_000_000–1_000_150 point to the 100th entry of the level 2 page table, which points to a different level 1 page table T2. The first three entries of T2 point to frames 100–250, the other entries are empty.&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Page 0 falls into the first &lt;code&gt;10_000&lt;/code&gt; byte region, so it uses the first entry of the level 2 page table. This entry points to level 1 page table T1, which specifies that page &lt;code&gt;0&lt;/code&gt; points to frame &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The pages &lt;code&gt;1_000_000&lt;/code&gt;, &lt;code&gt;1_000_050&lt;/code&gt;, and &lt;code&gt;1_000_100&lt;/code&gt; all fall into the 100th &lt;code&gt;10_000&lt;/code&gt; byte region, so they use the 100th entry of the level 2 page table. This entry points at a different level 1 page table T2, which maps the three pages to frames &lt;code&gt;100&lt;/code&gt;, &lt;code&gt;150&lt;/code&gt;, and &lt;code&gt;200&lt;/code&gt;. Note that the page address in level 1 tables does not include the region offset, so e.g. the entry for page &lt;code&gt;1_000_050&lt;/code&gt; is just &lt;code&gt;50&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We still have 100 empty entries in the level 2 table, but much fewer than the million empty entries before. The reason for this savings is that we don't need to create level 1 page tables for the unmapped memory regions between &lt;code&gt;10_000&lt;/code&gt; and &lt;code&gt;1_000_000&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The principle of two-level page tables can be extended to three, four, or more levels. Then the page table register points at the highest level table, which points to the next lower level table, which points to the next lower level, and so on. The level 1 page table then points at the mapped frame. The principle in general is called a &lt;em&gt;multilevel&lt;/em&gt; or &lt;em&gt;hierarchical&lt;/em&gt; page table.&lt;/p&gt;
&lt;p&gt;Now that we know how paging and multilevel page tables works, we can look at how paging is implemented in the x86_64 architecture (we assume in the following that the CPU runs in 64-bit mode).&lt;/p&gt;
&lt;h2 id=&quot;paging-on-x86&quot;&gt;&lt;a class=&quot;gutenberg-anchor&quot; href=&quot;https://os.phil-opp.com/paging-introduction/#paging-on-x86&quot; aria-label=&quot;Anchor link for: paging-on-x86&quot;&gt;🔗&lt;/a&gt; Paging on x86_64&lt;/h2&gt;
&lt;p&gt;The x86_64 architecture uses a 4-level page table and a page size of 4KiB. Each page table, independent of the level, has a fixed sized of 512 entries. Each entry has a size of 8 bytes, so each table is 512 * 8B = 4KiB large and thus fits exactly into one page.&lt;/p&gt;
&lt;p&gt;The page table index for level is derived directly from the virtual address:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://os.phil-opp.com/paging-introduction/x86_64-table-indices-from-address.svg&quot; alt=&quot;Bits 0–12 are the page offset, bits 12–21 the level 1 index, bits 21–30 the level 2 index, bits 30–39 the level 3 index, and bits 39–48 the level 4 index&quot;/&gt;&lt;/p&gt;
&lt;p&gt;We see that each table index consists of 9 bits, which makes sense because each table has 2^9 = 512 entries. The lowest 12 bits are the offset in the 4KiB page (2^12 bytes = 4KiB). Bits 48 to 64 are discarded, which means that x86_64 is not really 64-bit since it only supports 48-bit addresses. There are plans to extend the address size to 57 bits through a &lt;a href=&quot;https://en.wikipedia.org/wiki/Intel_5-level_paging&quot;&gt;5-level page table&lt;/a&gt;, but no processor that supports this feature exists yet.&lt;/p&gt;
&lt;p&gt;Even though bits 48 to 64 are discarded, they can't be set to arbitrary values. Instead all bits in this range have to be copies of bit 47 in order to keep addresses unique and allow future extensions like the 5-level page table. This is called &lt;em&gt;sign-extension&lt;/em&gt; because it's very similar to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Two's_complement#Sign_extension&quot;&gt;sign extension in two's complement&lt;/a&gt;. When a address is not correctly sign-extended, the CPU throws an exception.&lt;/p&gt;
&lt;h3 id=&quot;example-translation&quot;&gt;&lt;a class=&quot;gutenberg-anchor&quot; href=&quot;https://os.phil-opp.com/paging-introduction/#example-translation&quot; aria-label=&quot;Anchor link for: example-translation&quot;&gt;🔗&lt;/a&gt; Example Translation&lt;/h3&gt;
&lt;p&gt;Let's go through an example to understand how the translation process works in detail:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://os.phil-opp.com/paging-introduction/x86_64-page-table-translation.svg&quot; alt=&quot;An example 4-level page hierarchy with each page table shown in physical memory&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The physical address of the currently active level 4 page table, which is the root of the 4-level page table, is stored in the &lt;code&gt;CR3&lt;/code&gt; register. Each page table entry then points to the physical frame of the next level table. The entry of the level 1 table then points to the mapped frame. Note that all addresses in the page tables are physical instead of virtual, because otherwise the CPU would need to translate those addresses too (which could cause a never-ending recursion).&lt;/p&gt;
&lt;p&gt;The above page table hierarchy maps two pages (in blue). From the page table indices we can deduce that the virtual addresses of these two pages are &lt;code&gt;0x803FE7F000&lt;/code&gt; and &lt;code&gt;0x803FE00000&lt;/code&gt;. Let's see what happens when the program tries to read from address &lt;code&gt;0x803FE7F5CE&lt;/code&gt;. First, we convert the address to binary and determine the page table indices and the page offset for the address:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://os.phil-opp.com/paging-introduction/x86_64-page-table-translation-addresses.png&quot; alt=&quot;The sign extension bits are all 0, the level 4 index is 1, the level 3 index is 0, the level 2 index is 511, the level 1 index is 127, and the page offset is 0x5ce&quot;/&gt;&lt;/p&gt;
&lt;p&gt;With these indices, we can now walk the page table hierarchy to determine the mapped frame for the address:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;We start by reading the address of the level 4 table out of the &lt;code&gt;CR3&lt;/code&gt; register.&lt;/li&gt;
&lt;li&gt;The level 4 index is 1, so we look at the entry with index 1 of that table, which tells us that the level 3 table is stored at address 16KiB.&lt;/li&gt;
&lt;li&gt;We load the level 3 table from that address and look at the entry with index 0, which points us to the level 2 table at 24KiB.&lt;/li&gt;
&lt;li&gt;The level 2 index is 511, so we look at the last entry of that page to find out the address of the level 1 table.&lt;/li&gt;
&lt;li&gt;Through the entry with index 127 of the level 1 table we finally find out that the page is mapped to frame 12KiB, or 0xc000 in hexadecimal.&lt;/li&gt;
&lt;li&gt;The final step is to add the page offset to the frame address to get the physical address 0xc000 + 0x5ce = 0xc5ce.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://os.phil-opp.com/paging-introduction/x86_64-page-table-translation-steps.svg&quot; alt=&quot;The same example 4-level page hierarchy with 5 additional arrows: &amp;quot;Step 0&amp;quot; from the CR3 register to the level 4 table, &amp;quot;Step 1&amp;quot; from the level 4 entry to the level 3 table, &amp;quot;Step 2&amp;quot; from the level 3 entry to the level 2 table, &amp;quot;Step 3&amp;quot; from the level 2 entry to the level 1 table, and &amp;quot;Step 4&amp;quot; from the level 1 table to the mapped frames.&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The permissions for the page in the level 1 table are &lt;code&gt;r&lt;/code&gt;, which means read-only. The hardware enforces this permissions and would throw an exception if we tried to write to that page. Permissions in higher level pages restrict the possible permissions in lower level, so if we set the level 3 entry to read-only, no pages that use this entry can be writable, even if lower levels specify read/write permissions.&lt;/p&gt;
&lt;p&gt;It's important to note that even through this example used only a single instance of each table, there are typically multiple instances of each level in each address space. At maximum, there are:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;one level 4 table,&lt;/li&gt;
&lt;li&gt;512 level 3 tables (because the level 4 table has 512 entries),&lt;/li&gt;
&lt;li&gt;512 * 512 level 2 tables (because each of the 512 level 3 tables has 512 entries), and&lt;/li&gt;
&lt;li&gt;512 * 512 * 512 level 1 tables (512 entries for each level 2 table).&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;page-table-format&quot;&gt;&lt;a class=&quot;gutenberg-anchor&quot; href=&quot;https://os.phil-opp.com/paging-introduction/#page-table-format&quot; aria-label=&quot;Anchor link for: page-table-format&quot;&gt;🔗&lt;/a&gt; Page Table Format&lt;/h3&gt;
&lt;p&gt;Page tables on the x86_64 architecture are basically an array of 512 entries. In Rust syntax:&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;#[repr(align(4096))]
&lt;/span&gt;&lt;span&gt;pub struct &lt;/span&gt;&lt;span&gt;PageTable {
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;entries: [PageTableEntry; 512],
&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;As indicated by the &lt;code&gt;repr&lt;/code&gt; attribute, page tables need to be page aligned, i.e. aligned on a 4KiB boundary. This requirement guarantees that a page table always fills a complete page and allows an optimization that makes entries very compact.&lt;/p&gt;
&lt;p&gt;Each entry is 8 bytes (64 bits) large and has the following format:&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Bit(s)&lt;/th&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;14.5&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;present&lt;/td&gt;
&lt;td&gt;the page is currently in memory&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;writable&lt;/td&gt;
&lt;td&gt;it's allowed to write to this page&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;user accessible&lt;/td&gt;
&lt;td&gt;if not set, only kernel mode code can access this page&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;write through caching&lt;/td&gt;
&lt;td&gt;writes go directly to memory&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;disable cache&lt;/td&gt;
&lt;td&gt;no cache is used for this page&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;accessed&lt;/td&gt;
&lt;td&gt;the CPU sets this bit when this page is used&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;dirty&lt;/td&gt;
&lt;td&gt;the CPU sets this bit when a write to this page occurs&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;huge page/null&lt;/td&gt;
&lt;td&gt;must be 0 in P1 and P4, creates a 1GiB page in P3, creates a 2MiB page in P2&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;global&lt;/td&gt;
&lt;td&gt;page isn't flushed from caches on address space switch (PGE bit of CR4 register must be set)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;9-11&lt;/td&gt;
&lt;td&gt;available&lt;/td&gt;
&lt;td&gt;can be used freely by the OS&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;12-51&lt;/td&gt;
&lt;td&gt;physical address&lt;/td&gt;
&lt;td&gt;the page aligned 52bit physical address of the frame or the next page table&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;52-62&lt;/td&gt;
&lt;td&gt;available&lt;/td&gt;
&lt;td&gt;can be used freely by the OS&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;63&lt;/td&gt;
&lt;td&gt;no execute&lt;/td&gt;
&lt;td&gt;forbid executing code on this page (the NXE bit in the EFER register must be set)&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;We see that only bits 12–51 are used to store the physical frame address, the remaining bits are used as flags or can be freely used by the operating system. This is possible because we always point to a 4096-byte aligned address, either to a page-aligned page table or to the start of a mapped frame. This means that bits 0–11 are always zero, so there is no reason to store these bits because the hardware can just set them to zero before using the address. The same is true for bits 52–63, because the x86_64 architecture only supports 52-bit physical addresses (similar to how it only supports 48-bit virtual addresses).&lt;/p&gt;
&lt;p&gt;Let's take a closer look at the available flags:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The &lt;code&gt;present&lt;/code&gt; flag differentiates mapped pages from unmapped ones. It can be used to temporary swap out pages to disk when main memory becomes full. When the page is accessed subsequently, a special exception called &lt;em&gt;page fault&lt;/em&gt; occurs, to which the operating system can react by reloading the missing page from disk and then continuing the program.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;writable&lt;/code&gt; and &lt;code&gt;no execute&lt;/code&gt; flags control whether the contents of the page are writable or contain executable instructions respectively.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;accessed&lt;/code&gt; and &lt;code&gt;dirty&lt;/code&gt; flags are automatically set by the CPU when a read or write to the page occurs. This information can be leveraged by the operating system e.g. to decide which pages to swap out or whether the page contents were modified since the last save to disk.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;write through caching&lt;/code&gt; and &lt;code&gt;disable cache&lt;/code&gt; flags allow to control the caches for every page individually.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;user accessible&lt;/code&gt; flag makes a page available to userspace code, otherwise it is only accessible when the CPU is in kernel mode. This feature can be used to make &lt;a href=&quot;https://en.wikipedia.org/wiki/System_call&quot;&gt;system calls&lt;/a&gt; faster by keeping the kernel mapped while an userspace program is running. However, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Spectre_(security_vulnerability)&quot;&gt;Spectre&lt;/a&gt; vulnerability can allow userspace programs to read these pages nonetheless.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;global&lt;/code&gt; flag signals to the hardware that a page is available in all address spaces and thus does not need to be removed from the translation cache (see the section about the TLB below) on address space switches. This flag is commonly used together with a cleared &lt;code&gt;user accessible&lt;/code&gt; flag to map the kernel code to all address spaces.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;huge page&lt;/code&gt; flag allows to create pages of larger sizes by letting the entries of the level 2 or level 3 page tables directly point to a mapped frame. With this bit set, the page size increases by factor 512 to either 2MiB = 512 * 4KiB for level 2 entries or even 1GiB = 512 * 2MiB for level 3 entries. The advantage of using larger pages is that fewer lines of the translation cache and fewer page tables are needed.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The &lt;code&gt;x86_64&lt;/code&gt; crate provides types for &lt;a href=&quot;https://docs.rs/x86_64/0.3.4/x86_64/structures/paging/struct.PageTable.html&quot;&gt;page tables&lt;/a&gt; and their &lt;a href=&quot;https://docs.rs/x86_64/0.3.4/x86_64/structures/paging/struct.PageTableEntry.html&quot;&gt;entries&lt;/a&gt;, so we don't need to create these structures ourselves.&lt;/p&gt;
&lt;h3 id=&quot;the-translation-lookaside-buffer&quot;&gt;&lt;a class=&quot;gutenberg-anchor&quot; href=&quot;https://os.phil-opp.com/paging-introduction/#the-translation-lookaside-buffer&quot; aria-label=&quot;Anchor link for: the-translation-lookaside-buffer&quot;&gt;🔗&lt;/a&gt; The Translation Lookaside Buffer&lt;/h3&gt;
&lt;p&gt;A 4-level page table makes the translation of virtual addresses expensive, because each translation requires 4 memory accesses. To improve performance, the x86_64 architecture caches the last few translations in the so-called &lt;em&gt;translation lookaside buffer&lt;/em&gt; (TLB). This allows to skip the translation when the translation is still cached.&lt;/p&gt;
&lt;p&gt;Unlike the other CPU caches, the TLB is not fully transparent and does not update or remove translations when the contents of page tables change. This means that the kernel must manually update the TLB whenever it modifies a page table. To do this, there is a special CPU instruction called &lt;a href=&quot;https://www.felixcloutier.com/x86/INVLPG.html&quot;&gt;&lt;code&gt;invlpg&lt;/code&gt;&lt;/a&gt; (“invalidate page”) that removes the translation for the specified page from the TLB, so that it is loaded again from the page table on the next access. The TLB can also be flushed completely by reloading the &lt;code&gt;CR3&lt;/code&gt; register, which simulates an address space switch. The &lt;code&gt;x86_64&lt;/code&gt; crate provides Rust functions for both variants in the &lt;a href=&quot;https://docs.rs/x86_64/0.3.4/x86_64/instructions/tlb/index.html&quot;&gt;&lt;code&gt;tlb&lt;/code&gt; module&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It is important to remember flushing the TLB on each page table modification because otherwise the CPU might keep using the old translation, which can lead to non-deterministic bugs that are very hard to debug.&lt;/p&gt;
&lt;h2 id=&quot;implementation&quot;&gt;&lt;a class=&quot;gutenberg-anchor&quot; href=&quot;https://os.phil-opp.com/paging-introduction/#implementation&quot; aria-label=&quot;Anchor link for: implementation&quot;&gt;🔗&lt;/a&gt; Implementation&lt;/h2&gt;
&lt;p&gt;One thing that we did not mention yet: &lt;strong&gt;Our kernel already runs on paging&lt;/strong&gt;. The bootloader that we added in the &lt;a href=&quot;https://os.phil-opp.com/minimal-rust-kernel/#creating-a-bootimage&quot;&gt;&quot;A minimal Rust Kernel&quot;&lt;/a&gt; post already set up a 4-level paging hierarchy that maps every page of our kernel to a physical frame. The bootloader does this because paging is mandatory in 64-bit mode on x86_64.&lt;/p&gt;
&lt;p&gt;This means that every memory address that we used in our kernel was a virtual address. Accessing the VGA buffer at address &lt;code&gt;0xb8000&lt;/code&gt; only worked because the bootloader &lt;em&gt;identity mapped&lt;/em&gt; that memory page, which means that it mapped the virtual page &lt;code&gt;0xb8000&lt;/code&gt; to the physical frame &lt;code&gt;0xb8000&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Paging makes our kernel already relatively safe, since every memory access that is out of bounds causes a page fault exception instead of writing to random physical memory. The bootloader even set the correct access permissions for each page, which means that only the pages containing code are executable and only data pages are writable.&lt;/p&gt;
&lt;h3 id=&quot;page-faults&quot;&gt;&lt;a class=&quot;gutenberg-anchor&quot; href=&quot;https://os.phil-opp.com/paging-introduction/#page-faults&quot; aria-label=&quot;Anchor link for: page-faults&quot;&gt;🔗&lt;/a&gt; Page Faults&lt;/h3&gt;
&lt;p&gt;Let's try to cause a page fault by accessing some memory outside of our kernel. First, we create a page fault handler and register it in our IDT, so that we see a page fault exception instead of a generic &lt;a href=&quot;https://os.phil-opp.com/double-fault-exceptions/&quot;&gt;double fault&lt;/a&gt; :&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;// in src/interrupts.rs
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;lazy_static! {
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;static ref &lt;/span&gt;&lt;span&gt;IDT&lt;/span&gt;&lt;span&gt;: InterruptDescriptorTable &lt;/span&gt;&lt;span&gt;= &lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;let mut&lt;/span&gt;&lt;span&gt; idt &lt;/span&gt;&lt;span&gt;= &lt;/span&gt;&lt;span&gt;InterruptDescriptorTable::new();
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;[…]
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;idt.page_fault.set_handler_fn(page_fault_handler); &lt;/span&gt;&lt;span&gt;// new
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;idt
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;};
&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;use &lt;/span&gt;&lt;span&gt;x86_64::structures::idt::PageFaultErrorCode;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;extern &lt;/span&gt;&lt;span&gt;&quot;x86-interrupt&quot; &lt;/span&gt;&lt;span&gt;fn &lt;/span&gt;&lt;span&gt;page_fault_handler(
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;stack_frame: &lt;/span&gt;&lt;span&gt;&amp;amp;mut&lt;/span&gt;&lt;span&gt; ExceptionStackFrame,
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;_error_code: PageFaultErrorCode,
&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;use crate&lt;/span&gt;&lt;span&gt;::hlt_loop;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;use &lt;/span&gt;&lt;span&gt;x86_64::registers::control::Cr2;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;println!(&lt;/span&gt;&lt;span&gt;&quot;EXCEPTION: PAGE FAULT&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;println!(&lt;/span&gt;&lt;span&gt;&quot;Accessed Address: &lt;/span&gt;&lt;span&gt;{:?}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, Cr2::read());
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;println!(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{:#?}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, stack_frame);
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;hlt_loop();
&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Control_register#CR2&quot;&gt;&lt;code&gt;CR2&lt;/code&gt;&lt;/a&gt; register is automatically set by the CPU on a page fault and contains the accessed virtual address that caused the page fault. We use the &lt;a href=&quot;https://docs.rs/x86_64/0.3.5/x86_64/registers/control/struct.Cr2.html#method.read&quot;&gt;&lt;code&gt;Cr2::read&lt;/code&gt;&lt;/a&gt; function of the &lt;code&gt;x86_64&lt;/code&gt; crate to read and print it. Normally the &lt;a href=&quot;https://docs.rs/x86_64/0.3.4/x86_64/structures/idt/struct.PageFaultErrorCode.html&quot;&gt;&lt;code&gt;PageFaultErrorCode&lt;/code&gt;&lt;/a&gt; type would provide more information about the type of memory access that caused the page fault, but there is currently an &lt;a href=&quot;https://github.com/rust-lang/rust/issues/57270&quot;&gt;LLVM bug&lt;/a&gt; that passes an invalid error code, so we ignore it for now. We can't continue execution without resolving the page fault, so we enter a &lt;a href=&quot;https://os.phil-opp.com/hardware-interrupts/#the&quot;&gt;&lt;code&gt;hlt_loop&lt;/code&gt;&lt;/a&gt; at the end.&lt;/p&gt;
&lt;p&gt;Now we can try to access some memory outside our kernel:&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;// in src/main.rs
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;#[cfg(not(test))]
&lt;/span&gt;&lt;span&gt;#[no_mangle]
&lt;/span&gt;&lt;span&gt;pub extern &lt;/span&gt;&lt;span&gt;&quot;C&quot; &lt;/span&gt;&lt;span&gt;fn &lt;/span&gt;&lt;span&gt;_start() -&amp;gt; &lt;/span&gt;&lt;span&gt;! &lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;use &lt;/span&gt;&lt;span&gt;blog_os::interrupts::&lt;/span&gt;&lt;span&gt;PICS&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;println!(&lt;/span&gt;&lt;span&gt;&quot;Hello World&lt;/span&gt;&lt;span&gt;{}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;&quot;!&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;// set up the IDT first, otherwise we would enter a boot loop instead of
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;// invoking our page fault handler
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;blog_os::gdt::init();
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;blog_os::interrupts::init_idt();
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;unsafe &lt;/span&gt;&lt;span&gt;{ &lt;/span&gt;&lt;span&gt;PICS&lt;/span&gt;&lt;span&gt;.lock().initialize() };
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;x86_64::instructions::interrupts::enable();
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;// new
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; ptr &lt;/span&gt;&lt;span&gt;= &lt;/span&gt;&lt;span&gt;0xdeadbeaf &lt;/span&gt;&lt;span&gt;as *mut u32&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;unsafe &lt;/span&gt;&lt;span&gt;{ &lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;ptr &lt;/span&gt;&lt;span&gt;= &lt;/span&gt;&lt;span&gt;42&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;println!(&lt;/span&gt;&lt;span&gt;&quot;It did not crash!&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;blog_os::hlt_loop();
&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;When we run it, we see that our page fault handler is called:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://os.phil-opp.com/paging-introduction/qemu-page-fault.png&quot; alt=&quot;EXCEPTION: Page Fault, Accessed Address: VirtAddr(0xdeadbeaf), ExceptionStackFrame: {…}&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;CR2&lt;/code&gt; register indeed contains &lt;code&gt;0xdeadbeaf&lt;/code&gt;, the address that we tried to access.&lt;/p&gt;
&lt;p&gt;We see that the current instruction pointer is &lt;code&gt;0x20430a&lt;/code&gt;, so we know that this address points to a code page. Code pages are mapped read-only by the bootloader, so reading from this address works but writing causes a page fault. You can try this by changing the &lt;code&gt;0xdeadbeaf&lt;/code&gt; pointer to &lt;code&gt;0x20430a&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;// Note: The actual address might be different for you. Use the address that
&lt;/span&gt;&lt;span&gt;// your page fault handler reports.
&lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; ptr &lt;/span&gt;&lt;span&gt;= &lt;/span&gt;&lt;span&gt;0x20430a &lt;/span&gt;&lt;span&gt;as *mut u32&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;// read from a code page -&amp;gt; works
&lt;/span&gt;&lt;span&gt;unsafe &lt;/span&gt;&lt;span&gt;{ &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; x &lt;/span&gt;&lt;span&gt;= *&lt;/span&gt;&lt;span&gt;ptr; }
&lt;/span&gt;&lt;span&gt;// write to a code page -&amp;gt; page fault
&lt;/span&gt;&lt;span&gt;unsafe &lt;/span&gt;&lt;span&gt;{ &lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;ptr &lt;/span&gt;&lt;span&gt;= &lt;/span&gt;&lt;span&gt;42&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;By commenting out the last line, we see that the read access works, but the write access causes a page fault.&lt;/p&gt;
&lt;h3 id=&quot;accessing-the-page-tables&quot;&gt;&lt;a class=&quot;gutenberg-anchor&quot; href=&quot;https://os.phil-opp.com/paging-introduction/#accessing-the-page-tables&quot; aria-label=&quot;Anchor link for: accessing-the-page-tables&quot;&gt;🔗&lt;/a&gt; Accessing the Page Tables&lt;/h3&gt;
&lt;p&gt;Let's try to take a look at the page tables that our kernel runs on:&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;// in src/main.rs
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;#[cfg(not(test))]
&lt;/span&gt;&lt;span&gt;#[no_mangle]
&lt;/span&gt;&lt;span&gt;pub extern &lt;/span&gt;&lt;span&gt;&quot;C&quot; &lt;/span&gt;&lt;span&gt;fn &lt;/span&gt;&lt;span&gt;_start() -&amp;gt; &lt;/span&gt;&lt;span&gt;! &lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;use &lt;/span&gt;&lt;span&gt;x86_64::registers::control::Cr3;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;let &lt;/span&gt;&lt;span&gt;(level_4_page_table, &lt;/span&gt;&lt;span&gt;_&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;= &lt;/span&gt;&lt;span&gt;Cr3::read();
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;println!(&lt;/span&gt;&lt;span&gt;&quot;Level 4 page table at: &lt;/span&gt;&lt;span&gt;{:?}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, level_4_page_table.start_address());
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;[…]
&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;a href=&quot;https://docs.rs/x86_64/0.3.4/x86_64/registers/control/struct.Cr3.html#method.read&quot;&gt;&lt;code&gt;Cr3::read&lt;/code&gt;&lt;/a&gt; function of the &lt;code&gt;x86_64&lt;/code&gt; returns the currently active level 4 page table from the &lt;code&gt;CR3&lt;/code&gt; register. It returns a tuple of a &lt;a href=&quot;https://docs.rs/x86_64/0.3.4/x86_64/structures/paging/struct.PhysFrame.html&quot;&gt;&lt;code&gt;PhysFrame&lt;/code&gt;&lt;/a&gt; and a &lt;a href=&quot;https://docs.rs/x86_64/0.3.4/x86_64/registers/control/struct.Cr3Flags.html&quot;&gt;&lt;code&gt;Cr3Flags&lt;/code&gt;&lt;/a&gt; type. We are only interested in the frame, so we ignore the second element of the tuple.&lt;/p&gt;
&lt;p&gt;When we run it, we see the following output:&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;Level 4 page table at: PhysAddr(0x1000)
&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;So the currently active level 4 page table is stored at address &lt;code&gt;0x1000&lt;/code&gt; in &lt;em&gt;physical&lt;/em&gt; memory, as indicated by the &lt;a href=&quot;https://docs.rs/x86_64/0.3.4/x86_64/struct.PhysAddr.html&quot;&gt;&lt;code&gt;PhysAddr&lt;/code&gt;&lt;/a&gt; wrapper type. The question now is: how can we access this table from our kernel?&lt;/p&gt;
&lt;p&gt;Accessing physical memory directly is not possible when paging is active, since programs could easily circumvent memory protection and access memory of other programs otherwise. So the only way to access the table is through some virtual page that is mapped to the physical frame at address &lt;code&gt;0x1000&lt;/code&gt;. This problem of creating mappings for page table frames is a general problem, since the kernel needs to access the page tables regularly, for example when allocating a stack for a new thread.&lt;/p&gt;
&lt;p&gt;Solutions to this problem are explained in detail in the next post. For now it suffices to know that the bootloader used a technique called &lt;em&gt;recursive page tables&lt;/em&gt; to map the last page of the virtual address space to the physical frame of the level 4 page table. The last page of the virtual address space is &lt;code&gt;0xffff_ffff_ffff_f000&lt;/code&gt;, so let's use it to read some entries of that table:&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;// in src/main.rs
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;#[cfg(not(test))]
&lt;/span&gt;&lt;span&gt;#[no_mangle]
&lt;/span&gt;&lt;span&gt;pub extern &lt;/span&gt;&lt;span&gt;&quot;C&quot; &lt;/span&gt;&lt;span&gt;fn &lt;/span&gt;&lt;span&gt;_start() -&amp;gt; &lt;/span&gt;&lt;span&gt;! &lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; level_4_table_pointer &lt;/span&gt;&lt;span&gt;= &lt;/span&gt;&lt;span&gt;0xffff_ffff_ffff_f000 &lt;/span&gt;&lt;span&gt;as *const u64&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; i &lt;/span&gt;&lt;span&gt;in &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;..&lt;/span&gt;&lt;span&gt;10 &lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; entry &lt;/span&gt;&lt;span&gt;= unsafe &lt;/span&gt;&lt;span&gt;{ &lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;level_4_table_pointer.offset(i) };
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;println!(&lt;/span&gt;&lt;span&gt;&quot;Entry &lt;/span&gt;&lt;span&gt;{}&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;{:#x}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, i, entry);
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;[…]
&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;We cast the address of the last virtual page to a pointer to an &lt;code&gt;u64&lt;/code&gt;. As we saw in the &lt;a href=&quot;https://os.phil-opp.com/paging-introduction/#page-table-format&quot;&gt;previous section&lt;/a&gt;, each page table entry is 8 bytes (64 bits), so an &lt;code&gt;u64&lt;/code&gt; represents exactly one entry. We print the first 10 entries of the table using a &lt;code&gt;for&lt;/code&gt; loop. Inside the loop, we use an unsafe block to read from the raw pointer and the &lt;a href=&quot;https://doc.rust-lang.org/std/primitive.pointer.html#method.offset&quot;&gt;&lt;code&gt;offset&lt;/code&gt; method&lt;/a&gt; to perform pointer arithmetic.&lt;/p&gt;
&lt;p&gt;When we run it, we see the following output:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://os.phil-opp.com/paging-introduction/qemu-print-p4-entries.png&quot; alt=&quot;Entry 0: 0x2023, Entry 1: 0x6e2063, Entry 2-9: 0x0&quot;/&gt;&lt;/p&gt;
&lt;p&gt;When we look at the &lt;a href=&quot;https://os.phil-opp.com/paging-introduction/#page-table-format&quot;&gt;format of page table entries&lt;/a&gt;, we see that the value &lt;code&gt;0x2023&lt;/code&gt; of entry 0 means that the entry is &lt;code&gt;present&lt;/code&gt;, &lt;code&gt;writable&lt;/code&gt;, was &lt;code&gt;accessed&lt;/code&gt; by the CPU, and is mapped to frame &lt;code&gt;0x2000&lt;/code&gt;. Entry 1 is mapped to frame &lt;code&gt;0x6e2000&lt;/code&gt; and has the same flags as entry 0, with the addition of the &lt;code&gt;dirty&lt;/code&gt; flag that indicates that the page was written. Entries 2–9 are not &lt;code&gt;present&lt;/code&gt;, so these virtual address ranges are not mapped to any physical addresses.&lt;/p&gt;
&lt;p&gt;Instead of working with unsafe raw pointers we can use the &lt;a href=&quot;https://docs.rs/x86_64/0.3.4/x86_64/structures/paging/struct.PageTable.html&quot;&gt;&lt;code&gt;PageTable&lt;/code&gt;&lt;/a&gt; type of the &lt;code&gt;x86_64&lt;/code&gt; crate:&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;// in src/main.rs
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;#[cfg(not(test))]
&lt;/span&gt;&lt;span&gt;#[no_mangle]
&lt;/span&gt;&lt;span&gt;pub extern &lt;/span&gt;&lt;span&gt;&quot;C&quot; &lt;/span&gt;&lt;span&gt;fn &lt;/span&gt;&lt;span&gt;_start() -&amp;gt; &lt;/span&gt;&lt;span&gt;! &lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;use &lt;/span&gt;&lt;span&gt;x86_64::structures::paging::PageTable;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; level_4_table_ptr &lt;/span&gt;&lt;span&gt;= &lt;/span&gt;&lt;span&gt;0xffff_ffff_ffff_f000 &lt;/span&gt;&lt;span&gt;as *const&lt;/span&gt;&lt;span&gt; PageTable;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; level_4_table &lt;/span&gt;&lt;span&gt;= unsafe &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;&amp;amp;*&lt;/span&gt;&lt;span&gt;level_4_table_ptr};
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; i &lt;/span&gt;&lt;span&gt;in &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;..&lt;/span&gt;&lt;span&gt;10 &lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;println!(&lt;/span&gt;&lt;span&gt;&quot;Entry &lt;/span&gt;&lt;span&gt;{}&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;{:?}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, i, level_4_table[i]);
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;[…]
&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Here we cast the &lt;code&gt;0xffff_ffff_ffff_f000&lt;/code&gt; pointer first to a raw pointer and then transform it to a Rust reference. This operation still needs &lt;code&gt;unsafe&lt;/code&gt;, because the compiler can't know that this accessing this address is valid. But after this conversion we have a safe &lt;code&gt;&amp;amp;PageTable&lt;/code&gt; type, which allows us to access the individual entries through safe, bounds checked &lt;a href=&quot;https://doc.rust-lang.org/core/ops/trait.Index.html&quot;&gt;indexing operations&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The crate also provides some abstractions for the individual entries so that we directly see which flags are set when we print them:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://os.phil-opp.com/paging-introduction/qemu-print-p4-entries-abstraction.png&quot; alt=&quot; Entry 0: PageTableEntry { addr: PhysAddr(0x2000), flags: PRESENT | WRITABLE | ACCCESSED } Entry 1: PageTableEntry { addr: PhysAddr(0x6e5000), flags: PRESENT | WRITABLE | ACCESSED | DIRTY } Entry 2: PageTableEntry { addr: PhysAddr(0x0), flags: (empty)} Entry 3: PageTableEntry { addr: PhysAddr(0x0), flags: (empty)} Entry 4: PageTableEntry { addr: PhysAddr(0x0), flags: (empty)} Entry 5: PageTableEntry { addr: PhysAddr(0x0), flags: (empty)} Entry 6: PageTableEntry { addr: PhysAddr(0x0), flags: (empty)} Entry 7: PageTableEntry { addr: PhysAddr(0x0), flags: (empty)} Entry 8: PageTableEntry { addr: PhysAddr(0x0), flags: (empty)} Entry 9: PageTableEntry { addr: PhysAddr(0x0), flags: (empty)}&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The next step would be to follow the pointers in entry 0 or entry 1 to a level 3 page table. But we now again have the problem that &lt;code&gt;0x2000&lt;/code&gt; and &lt;code&gt;0x6e5000&lt;/code&gt; are physical addresses, so we can't access them directly. This problem will be solved in the next post.&lt;/p&gt;

&lt;p&gt;This post introduced two memory protection techniques: segmentation and paging. While the former uses variable-sized memory regions and suffers from external fragmentation, the latter uses fixed-sized pages and allows much more fine-grained control over access permissions.&lt;/p&gt;
&lt;p&gt;Paging stores the mapping information for pages in page tables with one or more levels. The x86_64 architecture uses 4-level page tables and a page size of 4KiB. The hardware automatically walks the page tables and caches the resulting translations in the translation lookaside buffer (TLB). This buffer is not updated transparently and needs to be flushed manually on page table changes.&lt;/p&gt;
&lt;p&gt;We learned that our kernel already runs on top of paging and that illegal memory accesses cause page fault exceptions. We tried to access the currently active page tables, but we were only able to access the level 4 table, since page tables store physical addresses that we can't access directly from our kernel.&lt;/p&gt;
&lt;h2 id=&quot;what-s-next&quot;&gt;&lt;a class=&quot;gutenberg-anchor&quot; href=&quot;https://os.phil-opp.com/paging-introduction/#what-s-next&quot; aria-label=&quot;Anchor link for: what-s-next&quot;&gt;🔗&lt;/a&gt; What's next?&lt;/h2&gt;
&lt;p&gt;The next post builds upon the fundamentals we learned in this post. It introduces an advanced technique called &lt;em&gt;recursive page tables&lt;/em&gt; to solve the problem of accessing page tables from our kernel. This allows us to traverse the page table hierarchy and implement a software based translation function. The post also explains how to create a new mapping in the page tables.&lt;/p&gt;


</description>
<pubDate>Mon, 14 Jan 2019 14:38:09 +0000</pubDate>
<dc:creator>ingve</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://os.phil-opp.com/paging-introduction/</dc:identifier>
</item>
<item>
<title>Incident Response Documentation</title>
<link>https://response.pagerduty.com/</link>
<guid isPermaLink="true" >https://response.pagerduty.com/</guid>
<description>

&lt;p&gt;&lt;img alt=&quot;Incident Response at PagerDuty&quot; src=&quot;https://response.pagerduty.com/assets/img/headers/pagerduty_ir.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;This documentation covers parts of the PagerDuty Incident Response process. It is a cut-down version of our internal documentation, used at PagerDuty for any major incidents, and to prepare new employees for on-call responsibilities. It provides information not only on preparing for an incident, but also what to do during and after. It is intended to be used by on-call practitioners and those involved in an operational incident response process (or those wishing to enact a formal incident response process). See the &lt;a href=&quot;https://response.pagerduty.com/about/&quot;&gt;about page&lt;/a&gt; for more information on what this documentation is and why it exists.&lt;/p&gt;
&lt;div class=&quot;admonition tip&quot; readability=&quot;11.655172413793&quot;&gt;
&lt;p class=&quot;admonition-title&quot;&gt;Don't know where to start?&lt;/p&gt;
&lt;p&gt;If you're new to incident response and don't yet have a formal process in your organization, we recommend looking at our &lt;a href=&quot;https://response.pagerduty.com/getting_started/&quot;&gt;Getting Started&lt;/a&gt; page for a quick list of things you can do to begin, and our &lt;a href=&quot;https://response.pagerduty.com/training/courses/incident_response/&quot;&gt;Training Course&lt;/a&gt; page for a more detailed overview of our process.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;being-on-call&quot;&gt;Being On-Call&lt;/h2&gt;
&lt;p&gt;If you've never been on-call before, you might be wondering what it's all about. These pages describe what the expectations of being on-call are, along with some resources to help you.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://response.pagerduty.com/oncall/being_oncall/&quot;&gt;Being On-Call&lt;/a&gt; - &lt;em&gt;A guide to being on-call, both what your responsibilities are, and what they are not.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://response.pagerduty.com/oncall/alerting_principles/&quot;&gt;Alerting Principles&lt;/a&gt; - &lt;em&gt;The principles we use to determine what things page an engineer, and what time of day they page.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;before-an-incident&quot;&gt;Before an Incident&lt;/h2&gt;
&lt;p&gt;Reading material for things you probably want to know before an incident occurs. You likely don't want to be reading these during an actual incident.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://response.pagerduty.com/before/what_is_an_incident/&quot;&gt;What is an Incident?&lt;/a&gt; - &lt;em&gt;Before we can talk about incident response, we need to define what an incident actually is.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://response.pagerduty.com/before/severity_levels/&quot;&gt;Severity Levels&lt;/a&gt; - &lt;em&gt;Information on our severity level classification. What constitutes a SEV-3 vs SEV-1? What response do they get?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://response.pagerduty.com/before/different_roles/&quot;&gt;Different Roles for Incidents&lt;/a&gt; - &lt;em&gt;Information on the roles during an incident; Incident Commander, Scribe, etc.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://response.pagerduty.com/before/call_etiquette/&quot;&gt;Incident Call Etiquette&lt;/a&gt; - &lt;em&gt;Our etiquette guidelines for incident calls, before you find yourself in one.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://response.pagerduty.com/before/complex_incidents/&quot;&gt;Complex Incidents&lt;/a&gt; - &lt;em&gt;Our guide for handling larger, more complex incidents.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;during-an-incident&quot;&gt;During an Incident&lt;/h2&gt;
&lt;p&gt;Information and processes during a major incident.&lt;/p&gt;
&lt;h2 id=&quot;after-an-incident&quot;&gt;After an Incident&lt;/h2&gt;
&lt;p&gt;Our followup processes, how we make sure we don't repeat mistakes and are always improving.&lt;/p&gt;
&lt;h2 id=&quot;training&quot;&gt;Training&lt;/h2&gt;
&lt;p&gt;So, you want to learn about incident response? You've come to the right place.&lt;/p&gt;
&lt;h3 id=&quot;training-guides&quot;&gt;Training Guides&lt;/h3&gt;
&lt;h3 id=&quot;training-courses&quot;&gt;Training Courses&lt;/h3&gt;
&lt;h2 id=&quot;additional-resources&quot;&gt;Additional Resources&lt;/h2&gt;
&lt;p&gt;Useful material and resources from external parties that are relevant to incident response.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://response.pagerduty.com/resources/reading/&quot;&gt;Reading&lt;/a&gt; - &lt;em&gt;Recommended reading material relevant to incident response.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://response.pagerduty.com/resources/chatops/&quot;&gt;ChatOps&lt;/a&gt; - &lt;em&gt;Description of the chat bot commands we've referenced in this documentation.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://response.pagerduty.com/resources/anti_patterns/&quot;&gt;Anti-Patterns&lt;/a&gt; - &lt;em&gt;List of things we've tried and then rejected, learn from our mistakes.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;aside class=&quot;copyright&quot; role=&quot;note&quot;&gt;Copyright © PagerDuty, Inc. – Documentation built with &lt;a href=&quot;http://www.mkdocs.org&quot; target=&quot;_blank&quot;&gt;MkDocs&lt;/a&gt; using the &lt;a href=&quot;http://squidfunk.github.io/mkdocs-material/&quot; target=&quot;_blank&quot;&gt;Material&lt;/a&gt; theme.&lt;/aside&gt;</description>
<pubDate>Mon, 14 Jan 2019 14:17:41 +0000</pubDate>
<dc:creator>blopeur</dc:creator>
<og:url>https://response.pagerduty.com/</og:url>
<og:title>PagerDuty Incident Response Documentation</og:title>
<og:description>A collection of information about the PagerDuty incident response process. Not only how to prepare new employees for on-call responsibilities, but also how to handle major incidents, both in preparation and after-work.</og:description>
<og:image>https://response.pagerduty.com/assets/img/covers/incident_response_docs.png</og:image>
<og:type>website</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://response.pagerduty.com/</dc:identifier>
</item>
<item>
<title>AWS, MongoDB, and the Economic Realities of Open Source</title>
<link>https://stratechery.com/2019/aws-mongodb-and-the-economic-realities-of-open-source/</link>
<guid isPermaLink="true" >https://stratechery.com/2019/aws-mongodb-and-the-economic-realities-of-open-source/</guid>
<description>&lt;p&gt;In 1999, music industry revenue in the United States peaked at $14.6 billion (all numbers are from the &lt;a href=&quot;https://www.riaa.com/u-s-sales-database/&quot;&gt;RIAA&lt;/a&gt;). It is important to be precise, though, about what was being sold:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;$12.8 billion was from the sale of CDs&lt;/li&gt;
&lt;li&gt;$1.1 billion was from the sale of cassettes&lt;/li&gt;
&lt;li&gt;$378 million was from the sale of music videos on physical media&lt;/li&gt;
&lt;li&gt;$222.4 million was from the sale of CD singles&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;In short, the music industry was primarily selling plastic discs in jewel cases; the music encoded on those discs was a means of differentiating those pieces of plastic from other ones, but music itself was not being sold.&lt;/p&gt;
&lt;p&gt;This may sounds like a stupid distinction, but it explains what happened after that peak:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.riaa.com/u-s-sales-database/&quot;&gt;&lt;img src=&quot;https://stratechery.com/wp-content/uploads/2019/01/Screen-Shot-2019-01-14-at-1.27.11-AM-1024x768.png&quot; alt=&quot;U.S. music industry sales over time&quot; width=&quot;640&quot; height=&quot;480&quot; class=&quot;aligncenter size-large wp-image-3887&quot; srcset=&quot;https://stratechery.com/wp-content/uploads/2019/01/Screen-Shot-2019-01-14-at-1.27.11-AM-1024x768.png 1024w, https://stratechery.com/wp-content/uploads/2019/01/Screen-Shot-2019-01-14-at-1.27.11-AM-300x225.png 300w, https://stratechery.com/wp-content/uploads/2019/01/Screen-Shot-2019-01-14-at-1.27.11-AM-768x576.png 768w, https://stratechery.com/wp-content/uploads/2019/01/Screen-Shot-2019-01-14-at-1.27.11-AM-840x630.png 840w, https://stratechery.com/wp-content/uploads/2019/01/Screen-Shot-2019-01-14-at-1.27.11-AM.png 1530w&quot; sizes=&quot;(max-width: 640px) 100vw, 640px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Music industry revenue plummeted, even as the distribution and availability of music skyrocketed: the issue is that people were no longer buying plastic discs, which is what the music industry was selling; they were simply downloading music directly.&lt;/p&gt;
&lt;h4&gt;Selling Convenience&lt;/h4&gt;
&lt;p&gt;The problem is that recorded music has always been worthless: once a recording is made, it can be copied endlessly, which means the supply is effectively infinite; it follows that to capture value from a recording depends on the imposition of scarcity. That is exactly what plastic discs were: a finite supply of a physical good differentiated by their being the most convenient way to get music. Pirating MP3s from sites like Napster or its descendants, though, was even more convenient — and cheaper.&lt;/p&gt;
&lt;p&gt;As you can see from the chart, the industry started to stabilize in 2010, and in 2016 returned to growth; 2018 looks to be up around 10% from 2017’s $8.7 billion number, and it seems likely the industry will pass that 1999 peak in the not-too-distant future.&lt;/p&gt;
&lt;p&gt;What happened is that the music industry — prodded in large part by Spotify, and then Apple — found something new to sell. No, they are still not selling music; in fact, they are beating piracy at its own game: the music industry is selling convenience. Get nearly any piece of recorded music ever made, for a mere $10/month.&lt;/p&gt;
&lt;h4&gt;DocumentDB (with MongoDB compatibility)&lt;/h4&gt;
&lt;p&gt;Last week, from the &lt;a href=&quot;https://aws.amazon.com/blogs/aws/new-amazon-documentdb-with-mongodb-compatibility-fast-scalable-and-highly-available/&quot;&gt;AWS blog&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Today we are launching &lt;a href=&quot;https://aws.amazon.com/documentdb/&quot;&gt;Amazon DocumentDB (with MongoDB compatibility)&lt;/a&gt;, a fast, scalable, and highly available document database that is designed to be compatible with your existing MongoDB applications and tools. Amazon DocumentDB uses a purpose-built SSD-based storage layer, with 6x replication across 3 separate Availability Zones. The storage layer is distributed, fault-tolerant, and self-healing, giving you the the performance, scalability, and availability needed to run production-scale MongoDB workloads.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The specifics of MongoDB and now DocumentDB are not particularly important to this article; basically, MongoDB created a type of database that is more flexible and better suited to large&lt;sup&gt;&lt;a href=&quot;https://stratechery.com/2019/aws-mongodb-and-the-economic-realities-of-open-source/#footnote_0_3886&quot; id=&quot;identifier_0_3886&quot; class=&quot;footnote-link footnote-identifier-link&quot; title=&quot;“Mongo” comes from the word humongous&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; amounts of both structured and unstructured data, making it useful for large scale applications that traditional &lt;a href=&quot;https://stratechery.com/2016/oracles-cloudy-future/&quot;&gt;relational databases&lt;/a&gt; were never designed to accommodate.&lt;/p&gt;
&lt;p&gt;And now you can run it on AWS. Kind of.&lt;/p&gt;
&lt;h4&gt;Open Source Licensing&lt;/h4&gt;
&lt;p&gt;Like an increasing number of such projects, MongoDB is open source…or it was anyways. MongoDB Inc., a venture-backed company that IPO’d in October, 2017, made its core database server product available under the &lt;a href=&quot;https://en.wikipedia.org/wiki/GNU_Affero_General_Public_License&quot;&gt;GNU Affero General Public License (AGPL)&lt;/a&gt;.&lt;sup&gt;&lt;a href=&quot;https://stratechery.com/2019/aws-mongodb-and-the-economic-realities-of-open-source/#footnote_1_3886&quot; id=&quot;identifier_1_3886&quot; class=&quot;footnote-link footnote-identifier-link&quot; title=&quot;I’m sorry, but this next bit is going to be dry; bear with me please&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;AGPL is a close relative of the &lt;a href=&quot;https://en.wikipedia.org/wiki/GNU_General_Public_License&quot;&gt;GPL&lt;/a&gt;, the copyleft license created by &lt;a href=&quot;https://en.wikipedia.org/wiki/Richard_Stallman&quot;&gt;Richard Stallman&lt;/a&gt;. “Copyleft” means that the license allows for the free distribution, use, and modification of copyrighted material&lt;br/&gt;(in this case software), with the stipulation that those same rights extend to all derivative works; that means that any project built using GPL code must itself have a GPL license. This is in contrast to “permissive” open source licenses that allow others to use the copyrighted material how they wish, without a stipulation that derivative works also be open-sourced. AGPL extended the GPL to apply to software accessed over a network; since the software is only being used, not copied, the GPL is not triggered, but the end result is even more onerous than the GPL.&lt;/p&gt;
&lt;p&gt;Both GPL and especially AGPL tend to be very problematic for companies: Apple, for example, &lt;a href=&quot;https://www.zdnet.com/article/android-vs-iphone-the-gpl-question/&quot;&gt;does not allow software licensed with the GPL on the App Store&lt;/a&gt;, because the App Store requires that apps be licensed for a single user; apps with permissive licenses are fine — their license can be replaced — but the GPL, once applied, cannot be removed. AGPL is worse, because its provisions are triggered by users simply using the software; that’s why Google bans its use internally. The company notes in its &lt;a href=&quot;https://opensource.google.com/docs/using/agpl-policy/&quot;&gt;open source documentation&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The license places restrictions on software used over a network which are extremely difficult for Google to comply with. Using AGPL software requires that anything it links to must also be licensed under the AGPL. Even if you think you aren’t linking to anything important, it still presents a huge risk to Google because of how integrated much of our code is. The risks heavily outweigh the benefits.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There is one addendum to the policy:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In some cases, we may have alternative licenses available for AGPL licensed code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is MongoDB’s business.&lt;sup&gt;&lt;a href=&quot;https://stratechery.com/2019/aws-mongodb-and-the-economic-realities-of-open-source/#footnote_2_3886&quot; id=&quot;identifier_2_3886&quot; class=&quot;footnote-link footnote-identifier-link&quot; title=&quot;To be clear, I’m not saying that Google has a license; rather, that MongoDB offers alternative licenses&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h4&gt;MongoDB’s Business Model&lt;/h4&gt;
&lt;p&gt;MongoDB explained in their &lt;a href=&quot;https://www.sec.gov/Archives/edgar/data/1441816/000104746917006014/a2233365zs-1.htm&quot;&gt;S-1&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We believe we have a highly differentiated business model that combines the developer mindshare and adoption benefits of open source with the economic benefits of a proprietary software subscription business model. To encourage developer usage, familiarity and adoption of our platform, we offer Community Server as an open source offering, analogous to a “freemium” offering. Community Server is a free-to-download version of our database that does not include all of the features of our commercial platform. This allows developers to evaluate our platform in a frictionless manner, which we believe has contributed to our platform’s popularity among developers and driven enterprise adoption of our subscription offering…&lt;/p&gt;
&lt;p&gt;Unlike software companies built around third-party open source projects, we own the intellectual property of our offerings since we are the creators of the software, enabling our proprietary software subscription business model…Our primary subscription package is MongoDB Enterprise Advanced, our comprehensive offering for enterprise customers that can be run in the cloud, on-premise or in a hybrid environment. MongoDB Enterprise Advanced includes our proprietary database server, advanced security, enterprise management capabilities, our graphical user interface, analytics integrations, technical support and a commercial license to our platform. We also offer MongoDB Atlas, our cloud hosted database-as-a-service, or DBaaS, offering that includes comprehensive infrastructure and management of our Community Server offering.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Basically, MongoDB sells three things on top of its open source database server:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Additional tools for enterprise companies to implement MongoDB&lt;/li&gt;
&lt;li&gt;A hosted service for smaller companies to use MongoDB&lt;/li&gt;
&lt;li&gt;Legal certainty&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The importance of this last one can not be overstated: MongoDB’s enterprise version and hosted service are not governed by the AGPL — or, as of late last year, a new MongoDB-created license called the &lt;a href=&quot;https://www.mongodb.com/blog/post/mongodb-now-released-under-the-server-side-public-license&quot;&gt;Server Side Public License (SSPL)&lt;/a&gt;. The SSPL is like the AGPL on steroids: it compels companies selling MongoDB-as-a-service to not only open-source their modifications, but also open-source their entire stack.&lt;sup&gt;&lt;a href=&quot;https://stratechery.com/2019/aws-mongodb-and-the-economic-realities-of-open-source/#footnote_3_3886&quot; id=&quot;identifier_3_3886&quot; class=&quot;footnote-link footnote-identifier-link&quot; title=&quot;I’m not going to get into the SSPL, but it is very controversial: many detractors argue it is not an open source license because it does not abide by the freedom to run a program for any purpose, and it may not not be enforceable&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h4&gt;What AWS Sells&lt;/h4&gt;
&lt;p&gt;The largest company selling software-as-a-service is, of course, Amazon. That, though, does not mean that Amazon is selling “software.” The reality is that software is no different than music: it is infinitely reproducible, and thus, in isolation, worth nothing.&lt;/p&gt;
&lt;p&gt;Instead, the value of software is typically realized in three ways:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;First is hardware. The most famous example is the iPhone, which is the only way to obtain iOS, but there are countless other examples.&lt;/li&gt;
&lt;li&gt;Second is licenses. This was Microsoft’s core business for decades: licenses sold to OEMs (for the consumer market) or to companies directly (for the enterprise market). Indeed, there is a bit of irony in that both Microsoft and open source, for all their historical opposition to each other, both depended on copyright, strong legal regimes, and companies doing the right thing.&lt;/li&gt;
&lt;li&gt;Third is software-as-a-service. This is Microsoft’s new model, as well as Amazon’s, and almost all new enterprise software companies.&lt;sup&gt;&lt;a href=&quot;https://stratechery.com/2019/aws-mongodb-and-the-economic-realities-of-open-source/#footnote_4_3886&quot; id=&quot;identifier_4_3886&quot; class=&quot;footnote-link footnote-identifier-link&quot; title=&quot;I’m using software-as-a-service as an umbrella term for infrastructure-as-a-service and platform-as-a-service&quot;&gt;5&lt;/a&gt;&lt;/sup&gt; In this case what is being sold is not the software per se, but rather the utility of the software: the company doing the selling does everything else, including making the software available reliably.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;With that in mind, read again what AWS announced last week:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The storage layer is distributed, fault-tolerant, and self-healing, giving you the the performance, scalability, and availability needed to run production-scale MongoDB workloads.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;AWS is not selling MongoDB: what they are selling is “performance, scalability, and availability.” DocumentDB is just one particular area of many where those benefits are manifested on AWS.&lt;/p&gt;
&lt;p&gt;Make no mistake: these benefits are valuable. There is a secular shift in enterprise computing moving to the cloud, not because it is necessarily cheaper (although costs are more closely aligned to usage), but because performance, scalability, and availability are hard problems that have little to do with the core competency and point of differentiation of most companies.&lt;/p&gt;
&lt;p&gt;Those are, though, the core competency of AWS, which can bring unmatched scale to bear on solving them: by effectively operating the servers for millions of customers Amazon can apply more resources to all of those issues than any one company could on its own, as well as develop its own customer architecture, from datacenter software down to custom chips (and drive a hard bargain for hardware from suppliers like Intel).&lt;/p&gt;
&lt;p&gt;The result is that “performance, scalability, and availability” is a tremendously attractive business: the more customers AWS has not only drive that much more recurring revenue, but also deepen AWS’ moat by allowing the company to bring that many more resources to bear on ever more obscure use cases, making AWS that much more attractive to new customers. Microsoft is competing but is a distant second; Google is even further behind. In fact, even MongoDB’s managed service runs on the three giants: it simply makes no sense to go it alone.&lt;/p&gt;
&lt;h4&gt;The Open Source Conundrum&lt;/h4&gt;
&lt;p&gt;Thus we have arrived at a conundrum for open source companies:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;MongoDB leveraged open source to gain mindshare.&lt;/li&gt;
&lt;li&gt;MongoDB Inc. built a successful company selling additional tools for enterprises to run MongoDB.&lt;/li&gt;
&lt;li&gt;More and more enterprises don’t want to run their own software: they want to hire AWS (or Microsoft&lt;sup&gt;&lt;a href=&quot;https://stratechery.com/2019/aws-mongodb-and-the-economic-realities-of-open-source/#footnote_5_3886&quot; id=&quot;identifier_5_3886&quot; class=&quot;footnote-link footnote-identifier-link&quot; title=&quot;Which, by the way, has its own MongoDB compatible offering&quot;&gt;6&lt;/a&gt;&lt;/sup&gt; or Google) to run it for them, because they value performance, scalability, and availability.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;This leaves MongoDB Inc. not unlike the record companies after the advent of downloads: what they sold was not software but rather the tools that made that software usable, but those tools are increasingly obsolete as computing moves to the cloud. And now AWS is selling what enterprises really want.&lt;/p&gt;
&lt;p&gt;Worse, because AWS doesn’t have access to MongoDB (it is only matching the API) it only supports MongoDB 3.6; the current version is 4.0.5. It is possible that if AWS’ service becomes popular that MongoDB will effectively stagnate: sure, you can get a better version from MongoDB Inc., but then you have to manage it yourself or go the effort to tie in all of your AWS services with MongoDB’s offering (then again, the potential for differentiation may be MongoDB’s salvation, and an important lesson for other companies).&lt;/p&gt;
&lt;p&gt;Not that permissive licensing would necessarily help: Redis Labs offers its Redis database under a permissive license; that means that &lt;a href=&quot;https://aws.amazon.com/redis/&quot;&gt;AWS’ offering&lt;/a&gt; is usually up-to-date, which is good for Redis development, but doesn’t help Redis Labs make any money. That compelled Redis Labs to &lt;a href=&quot;https://www.zdnet.com/article/open-source-licensing-war-commons-clause/&quot;&gt;change the licensing on its add-on modules&lt;/a&gt; to add the “Commons Clause”; this compels service providers to pay for their use, effectively making them proprietary software.&lt;/p&gt;
&lt;p&gt;It’s hard to not be sympathetic to MongoDB Inc. and Redis Labs: both spent a lot of money and effort building their products, and now Amazon is making money off of them. But that’s the thing: Amazon isn’t making money by selling software, they are making money by providing a service that enterprises value, and both MongoDB and Redis are popular in large part because they were open source to begin with.&lt;/p&gt;
&lt;h4&gt;Economic Realities and the Future&lt;/h4&gt;
&lt;p&gt;Little of what I wrote is new to folks in the open source community: the debate on the impact of cloud services on open source has been a strident one for a while now. I think, though, that the debate gets sidetracked by (understandable) discussions about “fairness” and what AWS supposedly owes open source. Yes, companies like MongoDB Inc. and Redis Labs worked hard, and yes, AWS is largely built on open source, but the world is governed by economic realities, not subjective judgments of fairness.&lt;/p&gt;
&lt;p&gt;And that is why I started with music: it wasn’t necessarily “fair” that music industry sales plummeted, and yes, companies like Apple with its iPod business made billions off of piracy. The only reality that mattered, though, was that music itself, thanks to its infinite reproducibility, was as pure a commodity as there could be.&lt;/p&gt;
&lt;p&gt;It’s the same situation with software: bits on a disk are fundamentally free — just ask Richard Stallman. In his seminal essay &lt;a href=&quot;https://www.gnu.org/philosophy/shouldbefree.en.html&quot;&gt;Why Software Should Be Free&lt;/a&gt; Stallman wrote:&lt;sup&gt;&lt;a href=&quot;https://stratechery.com/2019/aws-mongodb-and-the-economic-realities-of-open-source/#footnote_6_3886&quot; id=&quot;identifier_6_3886&quot; class=&quot;footnote-link footnote-identifier-link&quot; title=&quot;To be clear, I don’t agree with Stallman on a whole host of things; that doesn’t diminish his importance as a thinker or influence on the industry, though, or his insights on the nature of software&quot;&gt;7&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A copy of a program has nearly zero marginal cost (and you can pay this cost by doing the work yourself), so in a free market, it would have nearly zero price. A license fee is a significant disincentive to use the program. If a widely useful program is proprietary, far fewer people will use it.&lt;/p&gt;
&lt;p&gt;It is easy to show that the total contribution of a program to society is reduced by assigning an owner to it. Each potential user of the program, faced with the need to pay to use it, may choose to pay, or may forego use of the program. When a user chooses to pay, this is a zero-sum transfer of wealth between two parties. But each time someone chooses to forego use of the program, this harms that person without benefiting anyone. The sum of negative numbers and zeros must be negative.&lt;/p&gt;
&lt;p&gt;But this does not reduce the amount of work it takes to develop the program. As a result, the efficiency of the whole process, in delivered user satisfaction per hour of work, is reduced.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This tradeoff is inescapable, and it is fair to wonder if the golden age of VC-funded open source companies will start to fade (although not open source generally). The monetization model depends on the friction of on-premise software; once cloud computing is dominant, the economic model is much more challenging.&lt;/p&gt;
&lt;p&gt;That, though, should give pause to AWS, Microsoft, and Google. It is hard to imagine them ever paying for open source software, but at the same time, writing (public-facing) software isn’t necessarily the core competency of their cloud businesses. They too have benefited from open-source companies: they provide the means by which their performance, scalability, and availability are realized. Right now everyone is winning: simply following economic realities could, in the long run, mean everyone is worse off.&lt;/p&gt;
&lt;ol class=&quot;footnotes&quot;&gt;&lt;li id=&quot;footnote_0_3886&quot; class=&quot;footnote&quot;&gt;“Mongo” comes from the word &lt;em&gt;humongous&lt;/em&gt; [&lt;a href=&quot;https://stratechery.com/2019/aws-mongodb-and-the-economic-realities-of-open-source/#identifier_0_3886&quot; class=&quot;footnote-link footnote-back-link&quot;&gt;↩︎&lt;/a&gt;]&lt;/li&gt;
&lt;li id=&quot;footnote_1_3886&quot; class=&quot;footnote&quot;&gt;I’m sorry, but this next bit is going to be dry; bear with me please [&lt;a href=&quot;https://stratechery.com/2019/aws-mongodb-and-the-economic-realities-of-open-source/#identifier_1_3886&quot; class=&quot;footnote-link footnote-back-link&quot;&gt;↩︎&lt;/a&gt;]&lt;/li&gt;
&lt;li id=&quot;footnote_2_3886&quot; class=&quot;footnote&quot;&gt;To be clear, I’m not saying that Google has a license; rather, that MongoDB offers alternative licenses [&lt;a href=&quot;https://stratechery.com/2019/aws-mongodb-and-the-economic-realities-of-open-source/#identifier_2_3886&quot; class=&quot;footnote-link footnote-back-link&quot;&gt;↩︎&lt;/a&gt;]&lt;/li&gt;
&lt;li id=&quot;footnote_3_3886&quot; class=&quot;footnote&quot;&gt;I’m not going to get into the SSPL, but it is very controversial: many detractors argue it is not an open source license because it does not abide by the freedom to run a program for any purpose, and it &lt;a href=&quot;https://www.processmechanics.com/2018/10/18/the-server-side-public-license-is-flawed/&quot;&gt;may not not be enforceable&lt;/a&gt; [&lt;a href=&quot;https://stratechery.com/2019/aws-mongodb-and-the-economic-realities-of-open-source/#identifier_3_3886&quot; class=&quot;footnote-link footnote-back-link&quot;&gt;↩︎&lt;/a&gt;]&lt;/li&gt;
&lt;li id=&quot;footnote_4_3886&quot; class=&quot;footnote&quot;&gt;I’m using software-as-a-service as an umbrella term for infrastructure-as-a-service and platform-as-a-service [&lt;a href=&quot;https://stratechery.com/2019/aws-mongodb-and-the-economic-realities-of-open-source/#identifier_4_3886&quot; class=&quot;footnote-link footnote-back-link&quot;&gt;↩︎&lt;/a&gt;]&lt;/li&gt;
&lt;li id=&quot;footnote_5_3886&quot; class=&quot;footnote&quot;&gt;Which, by the way, has its own &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/cosmos-db/mongodb-introduction&quot;&gt;MongoDB compatible offering&lt;/a&gt; [&lt;a href=&quot;https://stratechery.com/2019/aws-mongodb-and-the-economic-realities-of-open-source/#identifier_5_3886&quot; class=&quot;footnote-link footnote-back-link&quot;&gt;↩︎&lt;/a&gt;]&lt;/li&gt;
&lt;li id=&quot;footnote_6_3886&quot; class=&quot;footnote&quot;&gt;To be clear, I don’t agree with Stallman on a whole host of things; that doesn’t diminish his importance as a thinker or influence on the industry, though, or his insights on the nature of software [&lt;a href=&quot;https://stratechery.com/2019/aws-mongodb-and-the-economic-realities-of-open-source/#identifier_6_3886&quot; class=&quot;footnote-link footnote-back-link&quot;&gt;↩︎&lt;/a&gt;]&lt;/li&gt;
&lt;/ol&gt;

</description>
<pubDate>Mon, 14 Jan 2019 12:51:56 +0000</pubDate>
<dc:creator>abd12</dc:creator>
<og:type>article</og:type>
<og:title>AWS, MongoDB, and the Economic Realities of Open Source</og:title>
<og:url>https://stratechery.com/2019/aws-mongodb-and-the-economic-realities-of-open-source/</og:url>
<og:description>Amazon’s latest offering highlights the economic challenges facing open source companies — and Amazon should pay attention.</og:description>
<og:image>https://stratechery.com/wp-content/uploads/2019/01/Screen-Shot-2019-01-14-at-1.27.11-AM.png</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://stratechery.com/2019/aws-mongodb-and-the-economic-realities-of-open-source/</dc:identifier>
</item>
<item>
<title>Show HN: HeyFromTheFuture – Advice people wish they had at your age</title>
<link>https://heyfromthefuture.com/age/</link>
<guid isPermaLink="true" >https://heyfromthefuture.com/age/</guid>
<description>&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;/&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1&quot;/&gt;&lt;title&gt;Select An Age - Hey From The Future&lt;/title&gt;&lt;meta name=&quot;author&quot; content=&quot;Hey From The Future&quot;/&gt;&lt;meta name=&quot;description&quot; content=&quot;Hey From The Future is a project where you can read what people wish they knew at your age, and leave advice behind for others.&quot;/&gt;&lt;meta name=&quot;keywords&quot; content=&quot;what I wish I knew, dear past self, dear future self, age advice, advice at your age,&quot;/&gt;&lt;link rel=&quot;canonical&quot; href=&quot;https://heyfromthefuture.com/age/&quot;/&gt;&lt;link rel=&quot;shortcut icon&quot; type=&quot;image/png&quot; href=&quot;/static/img/favicon.ico&quot;/&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css&quot; integrity=&quot;sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS&quot; crossorigin=&quot;anonymous&quot; type=&quot;text/css&quot;/&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;https://use.fontawesome.com/releases/v5.6.3/css/all.css&quot; integrity=&quot;sha384-UHRtZLI+pbxtHCWp1t77Bi1L4ZtiqrqD80Kn4Z8NTSRyMA2Fd33n5dQ8lWUE00s/&quot; crossorigin=&quot;anonymous&quot; type=&quot;text/css&quot;/&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;/static/css/main.css&quot; type=&quot;text/css&quot;/&gt;&lt;meta property=&quot;og:title&quot; content=&quot;Ages - Hey From The Future - Read what people wish they knew at your age&quot;/&gt;&lt;meta property=&quot;og:description&quot; content=&quot;Hey From The Future is a project where you can read what people wish they knew at your age, and leave advice behind for others.&quot;/&gt;&lt;meta property=&quot;og:type&quot; content=&quot;website&quot;/&gt;&lt;meta property=&quot;og:url&quot; content=&quot;https://heyfromthefuture.com/age/&quot;/&gt;&lt;meta property=&quot;og:image&quot; content=&quot;https://heyfromthefuture.com/static/img/hftf_logo.png&quot;/&gt;&lt;meta property=&quot;fb:app_id&quot; content=&quot;282558245792362&quot;/&gt;&lt;meta name=&quot;twitter:card&quot; content=&quot;summary&quot;/&gt;&lt;meta name=&quot;twitter:site&quot; content=&quot;@radicalsloth&quot;/&gt;&lt;meta name=&quot;twitter:title&quot; content=&quot;Ages - Hey From The Future - Read what people wish they knew at your age&quot;/&gt;&lt;meta name=&quot;twitter:description&quot; content=&quot;Hey From The Future is a project where you can read what people wish they knew at your age, and leave advice behind for others.&quot;/&gt;&lt;meta name=&quot;twitter:image&quot; content=&quot;https://heyfromthefuture.com/static/img/hftf_logo.png&quot;/&gt;&lt;/head&gt;&lt;body id=&quot;readabilityBody&quot; readability=&quot;25.986949429038&quot;&gt;


&lt;p&gt;Interested in reading advice from others? Select an age to see what others have to say.&lt;/p&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-sm&quot;&gt;
&lt;p&gt;14&lt;/p&gt;
&lt;p&gt;13&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;THIRTEEN&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;col-sm&quot;&gt;
&lt;p&gt;12&lt;/p&gt;
&lt;p&gt;14&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;FOURTEEN&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;col-sm&quot;&gt;
&lt;p&gt;21&lt;/p&gt;
&lt;p&gt;15&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;FIFTEEN&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-sm&quot;&gt;
&lt;p&gt;19&lt;/p&gt;
&lt;p&gt;16&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;SIXTEEN&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;col-sm&quot;&gt;
&lt;p&gt;15&lt;/p&gt;
&lt;p&gt;17&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;SEVENTEEN&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;col-sm&quot;&gt;
&lt;p&gt;36&lt;/p&gt;
&lt;p&gt;18&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;EIGHTEEN&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-sm&quot;&gt;
&lt;p&gt;14&lt;/p&gt;
&lt;p&gt;19&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;NINETEEN&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;col-sm&quot;&gt;
&lt;p&gt;18&lt;/p&gt;
&lt;p&gt;20&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;TWENTY&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;col-sm&quot;&gt;
&lt;p&gt;12&lt;/p&gt;
&lt;p&gt;21&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;TWENTY-ONE&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-sm&quot;&gt;
&lt;p&gt;16&lt;/p&gt;
&lt;p&gt;22&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;TWENTY-TWO&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;col-sm&quot;&gt;
&lt;p&gt;13&lt;/p&gt;
&lt;p&gt;23&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;TWENTY-THREE&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;col-sm&quot;&gt;
&lt;p&gt;9&lt;/p&gt;
&lt;p&gt;24&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;TWENTY-FOUR&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-sm&quot;&gt;
&lt;p&gt;18&lt;/p&gt;
&lt;p&gt;25&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;TWENTY-FIVE&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;col-sm&quot;&gt;
&lt;p&gt;7&lt;/p&gt;
&lt;p&gt;26&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;TWENTY-SIX&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;col-sm&quot;&gt;
&lt;p&gt;10&lt;/p&gt;
&lt;p&gt;27&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;TWENTY-SEVEN&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-sm&quot;&gt;
&lt;p&gt;6&lt;/p&gt;
&lt;p&gt;28&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;TWENTY-EIGHT&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;col-sm&quot;&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;29&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;TWENTY-NINE&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;col-sm&quot;&gt;
&lt;p&gt;8&lt;/p&gt;
&lt;p&gt;30&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;THIRTY&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-sm&quot;&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;31&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;THIRTY-ONE&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;col-sm&quot;&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;32&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;THIRTY-TWO&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;col-sm&quot;&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;33&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;THIRTY-THREE&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-sm&quot;&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;34&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;THIRTY-FOUR&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;col-sm&quot;&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;35&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;THIRTY-FIVE&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;col-sm&quot;&gt;

&lt;p&gt;36&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;THIRTY-SIX&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-sm&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;37&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;THIRTY-SEVEN&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;col-sm&quot;&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;38&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;THIRTY-EIGHT&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;col-sm&quot;&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;39&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;THIRTY-NINE&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-sm&quot;&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;40&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;FORTY&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;col-sm&quot;&gt;

&lt;p&gt;41&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;FORTY-ONE&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;col-sm&quot;&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;42&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;FORTY-TWO&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-sm&quot;&gt;

&lt;p&gt;43&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;FORTY-THREE&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;col-sm&quot;&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;44&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;FORTY-FOUR&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;col-sm&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;45&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;FORTY-FIVE&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-sm&quot;&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;46&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;FORTY-SIX&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;col-sm&quot;&gt;

&lt;p&gt;47&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;FORTY-SEVEN&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;col-sm&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;48&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;FORTY-EIGHT&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-sm&quot;&gt;

&lt;p&gt;49&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;FORTY-NINE&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;col-sm&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;50&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;FIFTY&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;col-sm&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;51&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;FIFTY-ONE&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-sm&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;52&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;FIFTY-TWO&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;col-sm&quot;&gt;

&lt;p&gt;53&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;FIFTY-THREE&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;col-sm&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;54&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;FIFTY-FOUR&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-sm&quot;&gt;

&lt;p&gt;55&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;FIFTY-FIVE&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;col-sm&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;56&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;FIFTY-SIX&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;col-sm&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;57&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;FIFTY-SEVEN&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-sm&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;58&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;FIFTY-EIGHT&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;col-sm&quot;&gt;

&lt;p&gt;59&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;FIFTY-NINE&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;col-sm&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;60&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;SIXTY&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-sm&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;61&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;SIXTY-ONE&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;col-sm&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;62&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;SIXTY-TWO&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;col-sm&quot;&gt;

&lt;p&gt;63&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;SIXTY-THREE&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-sm&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;64&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;SIXTY-FOUR&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;col-sm&quot;&gt;

&lt;p&gt;65&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;SIXTY-FIVE&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;col-sm&quot;&gt;

&lt;p&gt;66&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;SIXTY-SIX&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-sm&quot;&gt;

&lt;p&gt;67&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;SIXTY-SEVEN&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;col-sm&quot;&gt;

&lt;p&gt;68&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;SIXTY-EIGHT&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;col-sm&quot;&gt;

&lt;p&gt;69&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;SIXTY-NINE&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-sm&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;70&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;SEVENTY&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;col-sm&quot;&gt;

&lt;p&gt;71&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;SEVENTY-ONE&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;col-sm&quot;&gt;

&lt;p&gt;72&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;SEVENTY-TWO&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-sm&quot;&gt;

&lt;p&gt;73&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;SEVENTY-THREE&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;col-sm&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;74&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;SEVENTY-FOUR&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;col-sm&quot;&gt;

&lt;p&gt;75&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;SEVENTY-FIVE&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-sm&quot;&gt;

&lt;p&gt;76&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;SEVENTY-SIX&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;col-sm&quot;&gt;

&lt;p&gt;77&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;SEVENTY-SEVEN&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;col-sm&quot;&gt;

&lt;p&gt;78&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;SEVENTY-EIGHT&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-sm&quot;&gt;

&lt;p&gt;79&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;SEVENTY-NINE&lt;/span&gt;&lt;/div&gt;

&lt;div class=&quot;col-sm&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;81&lt;/p&gt;
&lt;span class=&quot;age-selector-inner&quot;&gt;EIGHTY-ONE&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;footer&gt;

&lt;/footer&gt;&lt;/body&gt;</description>
<pubDate>Mon, 14 Jan 2019 12:48:00 +0000</pubDate>
<dc:creator>ryry</dc:creator>
<og:title>Ages - Hey From The Future - Read what people wish they knew at your age</og:title>
<og:description>Hey From The Future is a project where you can read what people wish they knew at your age, and leave advice behind for others.</og:description>
<og:type>website</og:type>
<og:url>https://heyfromthefuture.com/age/</og:url>
<og:image>https://heyfromthefuture.com/static/img/hftf_logo.png</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>https://heyfromthefuture.com/age/</dc:identifier>
</item>
<item>
<title>Composing Programs in Python, SICP Style</title>
<link>https://composingprograms.com/</link>
<guid isPermaLink="true" >https://composingprograms.com/</guid>
<description>&lt;p&gt;Welcome to &lt;a href=&quot;http://www.composingprograms.com&quot;&gt;Composing Programs&lt;/a&gt;, a free online introduction to programming and computer science.&lt;/p&gt;
&lt;p&gt;In the tradition of &lt;a href=&quot;http://mitpress.mit.edu/sicp/&quot;&gt;SICP&lt;/a&gt;, this text focuses on methods for abstraction, programming paradigms, and techniques for managing the complexity of large programs. These concepts are illustrated primarily using the &lt;a href=&quot;http://www.python.org&quot;&gt;Python 3&lt;/a&gt; programming language.&lt;/p&gt;
&lt;p&gt;In addition to reading the chapters below, you can apply your knowledge to the &lt;a href=&quot;https://composingprograms.com/projects.html&quot;&gt;programming projects&lt;/a&gt; that accompany the text and visualize program execution using the &lt;a href=&quot;https://composingprograms.com/tutor.html&quot;&gt;Online Python Tutor&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Instructors&lt;/strong&gt;: If you are interested in adapting any of these materials for your courses, please &lt;a href=&quot;https://docs.google.com/forms/d/1lcDf-_y9t1oSDH_-HFz3UhUFouAX1518XeCMnlRISss/viewform&quot;&gt;fill out this short survey&lt;/a&gt; so that we can support your efforts.&lt;/p&gt;
&lt;h3&gt;Chapter 1: Building Abstractions with Functions&lt;/h3&gt;
</description>
<pubDate>Mon, 14 Jan 2019 06:52:11 +0000</pubDate>
<dc:creator>philonoist</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://composingprograms.com/</dc:identifier>
</item>
<item>
<title>Android vendors, don’t kill my app</title>
<link>https://dontkillmyapp.com/</link>
<guid isPermaLink="true" >https://dontkillmyapp.com/</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://dontkillmyapp.com/&quot;&gt;https://dontkillmyapp.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=18901006&quot;&gt;https://news.ycombinator.com/item?id=18901006&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 491&lt;/p&gt;
&lt;p&gt;# Comments: 371&lt;/p&gt;
</description>
<pubDate>Mon, 14 Jan 2019 06:04:02 +0000</pubDate>
<dc:creator>kumaranvpl</dc:creator>
<og:title>Don’t kill my app!</og:title>
<og:description>Hey Android vendors, don’t kill my app!</og:description>
<og:url>https://dontkillmyapp.com/</og:url>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://dontkillmyapp.com/</dc:identifier>
</item>
</channel>
</rss>