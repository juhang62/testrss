<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Nim 1.0</title>
<link>https://nim-lang.org//blog/2019/09/23/version-100-released.html</link>
<guid isPermaLink="true" >https://nim-lang.org//blog/2019/09/23/version-100-released.html</guid>
<description>&lt;h3 class=&quot;post-meta&quot;&gt;&lt;span&gt;23 September 2019&lt;/span&gt; &lt;span&gt; The Nim Team&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Today is the day. The Nim Team is very proud and happy to announce the much-anticipated version 1.0 of the language.&lt;/p&gt;
&lt;p&gt;Nim has always been focused on providing a compiled statically typed language focusing on efficiency, readability and flexibility.&lt;/p&gt;
&lt;p&gt;Version 1.0 marks the beginning of a stable base which can be used in the coming years, knowing that the future versions of Nim won’t break the code you have written with the current version.&lt;/p&gt;
&lt;p&gt;Nim has built a warm and welcoming &lt;a href=&quot;https://nim-lang.org/community.html&quot;&gt;community&lt;/a&gt; which is ready to help newcomers to the language.&lt;/p&gt;
&lt;p&gt;If you are one of the new users, check out our &lt;a href=&quot;https://nim-lang.org/learn.html&quot;&gt;learning resources&lt;/a&gt; and try Nim in &lt;a href=&quot;https://play.nim-lang.org/&quot;&gt;our playground&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This release includes many changes, including bug fixes and some language additions. All changes are documented in the v1.0.0 changelog available &lt;a href=&quot;https://github.com/nim-lang/Nim/blob/devel/changelogs/changelog_1_0_0.md&quot;&gt;here&lt;/a&gt;. Included as well is the latest release of Nimble, v0.11.0, the changelog for which is available &lt;a href=&quot;https://github.com/nim-lang/nimble/blob/master/changelog.markdown#0110---22092019&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Version 1.0 is now a long-term supported stable release that will only receive bug fixes and new features in the future, as long as they don’t break backwards compatibility.&lt;/p&gt;
&lt;p&gt;The 1.0.x branch will receive bug fixes for as long as there is demand for them. New features (which do not break backwards compatibility) will continue in steadily advancing 1.x branches.&lt;/p&gt;
&lt;p&gt;Our goal is to make sure that code which compiled under Nim 1.0 continues to compile under any stable Nim 1.x version in the future.&lt;/p&gt;
&lt;h2 id=&quot;what-is-included-under-the-stability-guarantee&quot;&gt;What is included under the stability guarantee?&lt;/h2&gt;
&lt;p&gt;Backwards compatibility covers only the stable fragment of the language, as defined by the &lt;a href=&quot;https://nim-lang.org/docs/manual.html&quot;&gt;manual&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The compiler still implements experimental features which are documented in the &lt;a href=&quot;https://nim-lang.org/docs/manual_experimental.html&quot;&gt;“experimental manual”&lt;/a&gt;. These features are subject to changes which may be backwards incompatible; some of the features included under this umbrella are concepts, the &lt;code class=&quot;highlighter-rouge&quot;&gt;do&lt;/code&gt; notation and a few others. There are also modules in the stdlib which are still considered unstable - these have been marked with an “Unstable API” in their docs.&lt;/p&gt;
&lt;p&gt;You can use experimental features, even in production, but be aware that these are not as fleshed out as we would like them to be.&lt;/p&gt;
&lt;p&gt;The standard library is also covered, as long as the module in question is clearly marked with a v1.0 tag in its documentation.&lt;/p&gt;
&lt;h2 id=&quot;exceptions-to-the-rule&quot;&gt;Exceptions to the rule&lt;/h2&gt;
&lt;p&gt;We of course have to concede that there are exceptions. In certain serious cases, for example if a security vulnerability is discovered in the standard library, we reserve the right to break code which uses it.&lt;/p&gt;

&lt;h2 id=&quot;new-users&quot;&gt;New users&lt;/h2&gt;
&lt;p&gt;Check out if the package manager of your OS already ships version 1.0 or install it as described &lt;a href=&quot;https://nim-lang.org/install.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;existing-users&quot;&gt;Existing users&lt;/h2&gt;
&lt;p&gt;If you have installed a previous version of Nim using &lt;code class=&quot;highlighter-rouge&quot;&gt;choosenim&lt;/code&gt;, getting Nim 1.0 is as easy as:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;choosenim update stable
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Over the years, more than 500 people contributed to the Nim codebase, implementing new features, fixing bugs and issues, writing documentation, and so on. The Nim team would like to thank all of you who helped us build Nim to become what it is today.&lt;/p&gt;
&lt;p&gt;We would also want to thank all people who have created Nimble packages, extending what is possible to do with Nim. The number of Nimble packages has been steadily growing, and in August 2019 we broke the 1000 package milestone! We are optimistic that with this release we will see even bigger growth of new and exciting packages.&lt;/p&gt;
&lt;p&gt;If you would like to help Nim grow consider donating via &lt;a href=&quot;https://opencollective.com/nim&quot;&gt;Open Collective&lt;/a&gt; or &lt;a href=&quot;https://nim-lang.org/donate.html&quot;&gt;other services&lt;/a&gt;.&lt;/p&gt;
</description>
<pubDate>Mon, 23 Sep 2019 20:19:30 +0000</pubDate>
<dc:creator>treeform</dc:creator>
<og:description>The Nim Team is very proud and happy to announce the much-anticipated version 1.0 of the language.</og:description>
<og:title>Version 1.0 released</og:title>
<og:type>website</og:type>
<og:image>https://nim-lang.org/assets/img/twitter_banner.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://nim-lang.org//blog/2019/09/23/version-100-released.html</dc:identifier>
</item>
<item>
<title>.NET Core 3.0</title>
<link>https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0/</link>
<guid isPermaLink="true" >https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0/</guid>
<description>&lt;div class=&quot;row justify-content-center&quot;&gt;
&lt;div class=&quot;col-md-4&quot;&gt;
&lt;div&gt;&lt;img src=&quot;https://secure.gravatar.com/avatar/37f91ebe219df737566a4dc7cdd53b68?s=58&amp;amp;d=mm&amp;amp;r=g&quot; width=&quot;58&quot; height=&quot;58&quot; alt=&quot;Avatar&quot; class=&quot;avatar avatar-58 wp-user-avatar wp-user-avatar-58 photo avatar-default&quot;/&gt;&lt;p&gt;Richard&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;entry-meta&quot;&gt;
&lt;p&gt;September 23rd, 2019&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;We’re excited to announce the release of .NET Core 3.0. It includes many improvements, including adding Windows Forms and WPF, adding new JSON APIs, support for ARM64 and improving performance across the board. C# 8 is also part of this release, which includes nullable, async streams, and more patterns. F# 4.7 is included, and focused on relaxing syntax and targeting .NET Standard 2.0. You can start updating existing projects to target .NET Core 3.0 today. The release is compatible with previous versions, making updating easy.&lt;/p&gt;
&lt;p&gt;Watch the team and the community talk about &lt;a href=&quot;https://www.dotnetconf.net/&quot;&gt;.NET at .NET Conf, live NOW!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can &lt;a href=&quot;https://dotnet.microsoft.com/download/dotnet-core/3.0&quot;&gt;download .NET Core 3.0&lt;/a&gt;, for Windows, macOS, and Linux:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://devblogs.microsoft.com/aspnet/asp-net-core-and-blazor-updates-in-net-core-3-0/&quot;&gt;ASP.NET Core 3.0&lt;/a&gt; and &lt;a href=&quot;https://devblogs.microsoft.com/dotnet/announcing-ef-core-3-0-and-ef-6-3-general-availability/&quot;&gt;EF Core 3.0&lt;/a&gt; are also releasing today.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://devblogs.microsoft.com/visualstudio/dot-net-core-support-in-visual-studio-2019-version-16-3/&quot;&gt;Visual Studio 2019 16.3&lt;/a&gt; and &lt;a href=&quot;https://devblogs.microsoft.com/visualstudio/visual-studio-2019-for-mac-version-8-3/&quot;&gt;Visual Studio for Mac 8.3&lt;/a&gt; were also released today and are required update to use .NET Core 3.0 with Visual Studio. .NET Core 3.0 is part of Visual Studio 2019 16.3. You can just get .NET Core by simply upgrading Visual Studio 2019 16.3.&lt;/p&gt;
&lt;p&gt;Thank you to everyone that contributed to .NET Core 3.0! Hundreds of people were involved in making this release happen, including major contributions from the community.&lt;/p&gt;
&lt;p&gt;Release notes:&lt;/p&gt;
&lt;h2&gt;What you should know about 3.0&lt;/h2&gt;
&lt;p&gt;There are some key improvements and guidance that are important to draw attention to before we go into a deep dive on all the new features in .NET Core 3.0. Here’s the quick punch list.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;.NET Core 3.0 is already battle-tested&lt;/strong&gt; by being hosted for months at &lt;a href=&quot;https://dotnet.microsoft.com/&quot;&gt;dot.net&lt;/a&gt; and on &lt;a href=&quot;https://bing.com&quot;&gt;Bing.com&lt;/a&gt;. Many other Microsoft teams will soon be deploying large workloads on .NET Core 3.0 in production.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Performance is greatly improved&lt;/strong&gt; across many components and is described in detail at &lt;a href=&quot;https://devblogs.microsoft.com/dotnet/performance-improvements-in-net-core-3-0/&quot;&gt;Performance Improvements in .NET Core 3.0&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;C# 8&lt;/strong&gt; add async streams, range/index, more patterns, and nullable reference types. Nullable enables you to directly target the flaws in code that lead to &lt;code&gt;NullReferenceException&lt;/code&gt;. The lowest layer of the framework libraries has been annotated, so that you know when to expect &lt;code&gt;null&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;F# 4.7&lt;/strong&gt; focuses on making some thing easier with implicit &lt;code&gt;yield&lt;/code&gt; expressions and some syntax relaxations. It also includes support for &lt;code&gt;LangVersion&lt;/code&gt;, and ships with &lt;code&gt;nameof&lt;/code&gt; and opening of static classes in preview. The F# Core Library now also targets .NET Standard 2.0. You can read more at &lt;a href=&quot;https://devblogs.microsoft.com/dotnet/announcing-f-4-7/&quot;&gt;Announcing F# 4.7&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.NET Standard 2.1&lt;/strong&gt; increases the set of types you can use in code that can be used with both .NET Core and Xamarin. &lt;a href=&quot;https://devblogs.microsoft.com/dotnet/announcing-net-standard-2-1/&quot;&gt;.NET Standard 2.1&lt;/a&gt; includes types since .NET Core 2.1.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Windows Desktop&lt;/strong&gt; apps are now supported with .NET Core, for both &lt;a href=&quot;https://github.com/dotnet/winforms&quot;&gt;Windows Forms&lt;/a&gt; and &lt;a href=&quot;https://github.com/dotnet/wpf&quot;&gt;WPF&lt;/a&gt; (and open source). The WPF designer is part of Visual Studio 2019 16.3. The Windows Forms designer is still in preview and available as a &lt;a href=&quot;https://aka.ms/winforms-designer&quot;&gt;VSIX download&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.NET Core apps now have executables&lt;/strong&gt; by default. In past releases, apps needed to be launched via the &lt;code&gt;dotnet&lt;/code&gt; command, like &lt;code&gt;dotnet myapp.dll&lt;/code&gt;. Apps can now be launched with an app-specific executable, like &lt;code&gt;myapp&lt;/code&gt; or &lt;code&gt;./myapp&lt;/code&gt;, depending on the operating system.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;High performance JSON APIs&lt;/strong&gt; have been added, for reader/writer, object model and serialization scenarios. These APIs were built from scratch on top of &lt;code&gt;Span&amp;lt;T&amp;gt;&lt;/code&gt; and use UTF8 under the covers instead of UTF16 (like &lt;code&gt;string&lt;/code&gt;). These APIs minimize allocations, resulting in faster performance, and much less work for the garbage collector. See &lt;a href=&quot;https://github.com/dotnet/corefx/issues/33115&quot;&gt;The future of JSON in .NET Core 3.0&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The garbage collector uses less memory&lt;/strong&gt; by default, often a lot less. This improvement is very beneficial for scenarios where many applications are hosted on the same server. The garbage collector has also been updated to make better use of large numbers of cores, on machines with &amp;gt;64 cores.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.NET Core has been hardened for Docker&lt;/strong&gt; to enable .NET applications to work predictably and efficiently in containers. The garbage collector and thread pool have been updated to work much better when a container has been configured for limited memory or CPU. .NET Core docker images are smaller, particularly the SDK image.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Raspberry Pi and ARM chips&lt;/strong&gt; are now supported to enable IoT development, including with the remote Visual Studio debugger. You can deploy apps that listen to sensors, and print messages or images on a display, all using the new GPIO APIs. ASP.NET can be used to expose data as an API or as a site that enables configuring an IoT device.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.NET Core 3.0 is a ‘current’ release&lt;/strong&gt; and will be superseded by &lt;strong&gt;.NET Core 3.1&lt;/strong&gt;, targeted for November 2019. .NET Core 3.1 will be a &lt;a href=&quot;https://dotnet.microsoft.com/platform/support/policy/dotnet-core&quot;&gt;long-term supported (LTS) release&lt;/a&gt; (supported for at least 3 years). We recommend that you adopt .NET Core 3.0 and then adopt 3.1. It’ll be very easy to upgrade.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.NET Core 2.2 will go EOL on 12/23&lt;/strong&gt; as it is now the previous ‘current’ release. See &lt;a href=&quot;https://dotnet.microsoft.com/platform/support/policy/dotnet-core&quot;&gt;.NET Core support policy&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.NET Core 3.0 will be available with RHEL 8&lt;/strong&gt; in the Red Hat Application Streams, after several years of collaboration with Red Hat.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Visual Studio 2019 16.3&lt;/strong&gt; is a required update for Visual Studio users on Windows that want to use .NET Core 3.0.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Visual Studio for Mac 8.3&lt;/strong&gt; is a required update for Visual Studio for Mac users that want to use .NET Core 3.0.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Visual Studio Code&lt;/strong&gt; users should just always use the latest version of the C# extension to ensure that the newest scenarios work, including targeting .NET Core 3.0.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Azure App Service&lt;/strong&gt; deployment of .NET Core 3.0 is currently ongoing.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Azure Dev Ops&lt;/strong&gt; deployment of .NET Core 3.0 is coming soon. Will update when it is available.&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Platform support&lt;/h2&gt;
&lt;p&gt;.NET Core 3.0 is supported on the following operating systems:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Alpine: 3.9+&lt;/li&gt;
&lt;li&gt;Debian: 9+&lt;/li&gt;
&lt;li&gt;openSUSE: 42.3+&lt;/li&gt;
&lt;li&gt;Fedora: 26+&lt;/li&gt;
&lt;li&gt;Ubuntu: 16.04+&lt;/li&gt;
&lt;li&gt;RHEL: 6+&lt;/li&gt;
&lt;li&gt;SLES: 12+&lt;/li&gt;
&lt;li&gt;macOS: 10.13+&lt;/li&gt;
&lt;li&gt;Windows Client: 7, 8.1, 10 (1607+)&lt;/li&gt;
&lt;li&gt;Windows Server: 2012 R2 SP1+&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Note: Windows Forms and WPF apps only work on Windows.&lt;/p&gt;
&lt;p&gt;Chip support follows:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;x64 on Windows, macOS, and Linux&lt;/li&gt;
&lt;li&gt;x86 on Windows&lt;/li&gt;
&lt;li&gt;ARM32 on Windows and Linux&lt;/li&gt;
&lt;li&gt;ARM64 on Linux (kernel 4.14+)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Note: Please ensure that .NET Core 3.0 ARM64 deployments use Linux kernel 4.14 version or later. For example, Ubuntu 18.04 satisfies this requirement, but 16.04 does not.&lt;/p&gt;
&lt;h2&gt;WPF and Windows Forms&lt;/h2&gt;
&lt;p&gt;You can build WPF and Windows Forms apps with .NET Core 3, on Windows. We’ve had a strong compatibility goal from the start of the project, to make it easy to migrate desktop applications from .NET Framework to .NET Core. We’ve heard feedback from many developers that have already successfully ported their app to .NET Core 3.0 that the process is straightforward. To a large degree, we took WPF and Windows Forms as-is, and got them working on .NET Core. The engineering project was very different than that, but that’s a good way to think about the project.&lt;/p&gt;
&lt;p&gt;The following image shows a .NET Core Windows Forms app:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2019/09/windows-forms-app.png&quot; alt=&quot;&quot; width=&quot;426&quot; height=&quot;427&quot; class=&quot;alignnone size-full wp-image-24614&quot; srcset=&quot;https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2019/09/windows-forms-app.png 426w, https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2019/09/windows-forms-app-150x150.png 150w, https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2019/09/windows-forms-app-300x300.png 300w&quot; sizes=&quot;(max-width: 426px) 100vw, 426px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2019 16.3 has support for creating WPF apps that target .NET Core. This includes new templates and an updated XAML designer and XAML Hot Reload. The designer is similar to the existing XAML designer (that targets .NET Framework), however, you may notice some differences in experience. The big technical difference is that the designer for .NET Core uses a new surface process (wpfsurface.exe) to solely run the runtime code targeting the .NET Core version. Previously, the .NET Framework WPF designer process (xdesproc.exe) was a itself a WPF .NET Framework process hosting the designer, and due to runtime incompatibility we can’t have a WPF .NET Framework process (in this case, Visual Studio) loading two versions of .NET (.NET Framework and .NET Core) into the same process. This means that some aspects of the designer, like designer extensions, can’t work in the same way. If you are writing designer extensions, we recommend reading &lt;a href=&quot;https://docs.microsoft.com/visualstudio/extensibility/xaml-designer-extensibility-migration?view=vs-2019&quot;&gt;XAML designer extensibility migration&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The following image shows a WPF app being displayed in the new designer:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2019/09/wpf-designer.png&quot; alt=&quot;&quot; width=&quot;2097&quot; height=&quot;1346&quot; class=&quot;alignnone size-full wp-image-24640&quot; srcset=&quot;https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2019/09/wpf-designer.png 2097w, https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2019/09/wpf-designer-300x193.png 300w, https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2019/09/wpf-designer-768x493.png 768w, https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2019/09/wpf-designer-1024x657.png 1024w&quot; sizes=&quot;(max-width: 2097px) 100vw, 2097px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The Windows Forms designer is still in preview, and available as a &lt;a href=&quot;https://aka.ms/winforms-designer&quot;&gt;separate download&lt;/a&gt;. It will be added to Visual Studio as part of a later release. The designer currently includes support for the most commonly used controls and low-level functionality. We’ll keep improving the designer with monthly updates. We don’t recommend porting your Windows Forms applications to .NET Core just yet, particularly if you rely on the designer. Please do experiment with the designer preview, and give us feedback.&lt;/p&gt;
&lt;p&gt;You can also create and build desktop applications from the command line using the .NET CLI.&lt;/p&gt;
&lt;p&gt;For example, you can quickly create a new Windows Forms app:&lt;/p&gt;
&lt;div id=&quot;crayon-5d8968cbee4a9735917429&quot; class=&quot;crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate&quot; data-settings=&quot; minimize scroll-mouseover wrap&quot;&gt;



&lt;div class=&quot;crayon-main&quot;&gt;
&lt;table class=&quot;crayon-table&quot;&gt;&lt;tr class=&quot;crayon-row&quot;&gt;&lt;td class=&quot;crayon-nums&quot; data-settings=&quot;hide&quot;&gt;

&lt;/td&gt;
&lt;td class=&quot;crayon-code&quot;&gt;
&lt;div class=&quot;crayon-pre&quot;&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee4a9735917429-1&quot;&gt;&lt;span class=&quot;crayon-e&quot;&gt;dotnet&lt;/span&gt; &lt;span class=&quot;crayon-r&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;winforms&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;crayon-i&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;crayon-e&quot;&gt;myapp&lt;/span&gt;&lt;/div&gt;

&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee4a9735917429-3&quot;&gt;&lt;span class=&quot;crayon-e&quot;&gt;dotnet&lt;/span&gt; &lt;span class=&quot;crayon-i&quot;&gt;run&lt;/span&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;You can try WPF using the same flow:&lt;/p&gt;
&lt;div id=&quot;crayon-5d8968cbee4c4305416023&quot; class=&quot;crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate&quot; data-settings=&quot; minimize scroll-mouseover wrap&quot;&gt;



&lt;div class=&quot;crayon-main&quot;&gt;
&lt;table class=&quot;crayon-table&quot;&gt;&lt;tr class=&quot;crayon-row&quot;&gt;&lt;td class=&quot;crayon-nums&quot; data-settings=&quot;hide&quot;&gt;

&lt;/td&gt;
&lt;td class=&quot;crayon-code&quot;&gt;
&lt;div class=&quot;crayon-pre&quot;&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee4c4305416023-1&quot;&gt;&lt;span class=&quot;crayon-e&quot;&gt;dotnet&lt;/span&gt; &lt;span class=&quot;crayon-r&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;wpf&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;crayon-i&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;crayon-e&quot;&gt;mywpfapp&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee4c4305416023-2&quot;&gt;&lt;span class=&quot;crayon-e&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;crayon-e&quot;&gt;mywpfapp&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee4c4305416023-3&quot;&gt;&lt;span class=&quot;crayon-e&quot;&gt;dotnet&lt;/span&gt; &lt;span class=&quot;crayon-i&quot;&gt;run&lt;/span&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We made &lt;a href=&quot;https://github.com/dotnet/winforms&quot;&gt;Windows Forms&lt;/a&gt; and &lt;a href=&quot;https://github.com/dotnet/wpf&quot;&gt;WPF&lt;/a&gt; open source, back in December 2018. It’s been great to see the community and the Windows Forms and WPF teams working together to improve those UI frameworks. In the case of WPF, we started out with a very small amount of code in the GitHub repo. At this point, almost all of WPF has been published to GitHub, and a few more components will straggle in over time. Like other .NET Core projects, these new repos are part of the .NET Foundation and licensed with the MIT license.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://www.nuget.org/packages/System.Windows.Forms.DataVisualization/&quot;&gt;System.Windows.Forms.DataVisualization&lt;/a&gt; package (which includes the chart control) is also available for .NET Core. You can now include this control in your .NET Core WinForms applications. The source for the chart control is available at &lt;a href=&quot;https://github.com/dotnet/winforms-datavisualization&quot;&gt;dotnet/winforms-datavisualization&lt;/a&gt;, on GitHub. The control was migrated to ease porting to .NET Core 3, but isn’t a component we expect to update significantly.&lt;/p&gt;
&lt;h2&gt;Windows Native Interop&lt;/h2&gt;
&lt;p&gt;Windows offers a rich native API, in the form of flat C APIs, COM and WinRT. We’ve had support for P/Invoke since .NET Core 1.0, and have been adding the ability to CoCreate COM APIs, activate WinRT APIs, and exposed managed code as COM components as part of the .NET Core 3.0 release. We have had many requests for these capabilities, so we know that they will get a lot of use.&lt;/p&gt;
&lt;p&gt;Late last year, we announced that we had managed to &lt;a href=&quot;https://twitter.com/runfaster2000/status/1053704090671185920&quot;&gt;automate Excel from .NET Core&lt;/a&gt;. That was a fun moment. Under the covers, this demo is using COM interop features like NOPIA, object equivalence and custom marshallers. You can now try this and other demos yourself at &lt;a href=&quot;https://github.com/dotnet/samples/tree/master/core/extensions&quot;&gt;extension samples&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Managed C++ and WinRT interop have partial support with .NET Core 3.0 and will be included with .NET Core 3.1.&lt;/p&gt;
&lt;h3&gt;Nullable reference types&lt;/h3&gt;
&lt;p&gt;C# 8.0 introduces &lt;em&gt;nullable reference types&lt;/em&gt; and &lt;em&gt;non-nullable reference types&lt;/em&gt; that enable you to make important statements about the properties for reference type variables:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;A reference is not supposed to be null&lt;/strong&gt;. When variables aren’t supposed to be null, the compiler enforces rules that ensure it is safe to dereference these variables without first checking that it isn’t null.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A reference may be null&lt;/strong&gt;. When variables may be null, the compiler enforces different rules to ensure that you’ve correctly checked for a null reference.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;This new feature provides significant benefits over the handling of reference variables in earlier versions of C# where the design intent couldn’t be determined from the variable declaration. With the addition of nullable reference types, you can declare your intent more clearly, and the compiler both helps you do that correctly and discover bugs in your code.&lt;/p&gt;
&lt;p&gt;See &lt;a href=&quot;https://channel9.msdn.com/Shows/On-NET/This-is-how-you-get-rid-of-null-reference-exceptions-forever&quot;&gt;This is how you get rid of null reference exceptions forever&lt;/a&gt;, &lt;a href=&quot;https://devblogs.microsoft.com/dotnet/try-out-nullable-reference-types/&quot;&gt;Try out Nullable Reference Types&lt;/a&gt; and &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/csharp/nullable-references&quot;&gt;Nullable reference types&lt;/a&gt; to learn more.&lt;/p&gt;
&lt;h2&gt;Default implementations of interface members&lt;/h2&gt;
&lt;p&gt;Today, once you publish an interface, it’s game over for changing it: you can’t add members to it without breaking all the existing implementers of it.&lt;/p&gt;
&lt;p&gt;With C# 8.0, you can provide a body for an interface member. As a result, if a class that implements the interface doesn’t implement that member (perhaps because it wasn’t there yet when they wrote the code), then the calling code will just get the default implementation instead.&lt;/p&gt;
&lt;div id=&quot;crayon-5d8968cbee4d5342828469&quot; class=&quot;crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate&quot; data-settings=&quot; minimize scroll-mouseover wrap&quot;&gt;



&lt;div class=&quot;crayon-main&quot;&gt;
&lt;table class=&quot;crayon-table&quot;&gt;&lt;tr class=&quot;crayon-row&quot;&gt;&lt;td class=&quot;crayon-nums&quot; data-settings=&quot;hide&quot;&gt;

&lt;/td&gt;
&lt;td class=&quot;crayon-code&quot;&gt;
&lt;div class=&quot;crayon-pre&quot;&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee4d5342828469-1&quot;&gt;&lt;span class=&quot;crayon-t&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;crayon-e&quot;&gt;ILogger&lt;/span&gt;&lt;/div&gt;

&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee4d5342828469-3&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;crayon-t&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;crayon-e&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;crayon-e&quot;&gt;LogLevel&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;crayon-t&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;;&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee4d5342828469-4&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;crayon-t&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;crayon-e&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;crayon-e&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;crayon-e&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;LogLevel&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;crayon-e&quot;&gt;ToString&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;crayon-c&quot;&gt;// New overload&lt;/span&gt;&lt;/div&gt;

&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee4d5342828469-6&quot;&gt;&lt;span class=&quot;crayon-t&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;ConsoleLogger&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;crayon-e&quot;&gt;ILogger&lt;/span&gt;&lt;/div&gt;

&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee4d5342828469-8&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;crayon-m&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;crayon-t&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;crayon-e&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;crayon-e&quot;&gt;LogLevel&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;crayon-t&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;crayon-sy&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;crayon-sy&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;crayon-sy&quot;&gt;}&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee4d5342828469-9&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;crayon-c&quot;&gt;// Log(Exception) gets default implementation&lt;/span&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In this example, the &lt;code&gt;ConsoleLogger&lt;/code&gt; class doesn’t have to implement the &lt;code&gt;Log(Exception)&lt;/code&gt; overload of ILogger, because it is declared with a default implementation. Now you can add new members to existing public interfaces as long as you provide a default implementation for existing implementors to use.&lt;/p&gt;
&lt;h2&gt;Async streams&lt;/h2&gt;
&lt;p&gt;You can now &lt;code&gt;foreach&lt;/code&gt; over an async stream of data using &lt;code&gt;IAsyncEnumerable&amp;lt;T&amp;gt;&lt;/code&gt;. This new interface is exactly what you’d expect; an asynchronous version of &lt;code&gt;IEnumerable&amp;lt;T&amp;gt;&lt;/code&gt;. The language lets you &lt;code&gt;await foreach&lt;/code&gt; over tasks to consume their elements. On the production side, you &lt;code&gt;yield return&lt;/code&gt; items to produce an async stream. It might sound a bit complicated, but it is incredibly easy in practice.&lt;/p&gt;
&lt;p&gt;The following example demonstrates both production and consumption of async streams. The foreach statement is async and itself uses yield return to produce an async stream for callers. This pattern – using &lt;code&gt;yield return&lt;/code&gt; — is the recommended model for producing async streams.&lt;/p&gt;
&lt;div id=&quot;crayon-5d8968cbee4e6422594503&quot; class=&quot;crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate&quot; data-settings=&quot; minimize scroll-mouseover wrap&quot;&gt;



&lt;div class=&quot;crayon-main&quot;&gt;
&lt;table class=&quot;crayon-table&quot;&gt;&lt;tr class=&quot;crayon-row&quot;&gt;&lt;td class=&quot;crayon-nums&quot; data-settings=&quot;hide&quot;&gt;

&lt;/td&gt;
&lt;td class=&quot;crayon-code&quot;&gt;
&lt;div class=&quot;crayon-pre&quot;&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee4e6422594503-1&quot;&gt;&lt;span class=&quot;crayon-e&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;IAsyncEnumerable&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;crayon-t&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;crayon-e&quot;&gt;GetBigResultsAsync&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;)&lt;/span&gt;&lt;/div&gt;

&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee4e6422594503-3&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;crayon-e&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;crayon-st&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;crayon-sy&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;crayon-t&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;crayon-e&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;crayon-st&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;crayon-e&quot;&gt;GetResultsAsync&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;)&lt;/span&gt;&lt;/div&gt;

&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee4e6422594503-5&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;crayon-st&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;crayon-sy&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;crayon-cn&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;crayon-e&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;crayon-st&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;;&lt;/span&gt;&lt;/div&gt;



&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In addition to being able to &lt;code&gt;await foreach&lt;/code&gt;, you can also create async iterators, e.g. an iterator that returns an &lt;code&gt;IAsyncEnumerable&lt;/code&gt;/&lt;code&gt;IAsyncEnumerator&lt;/code&gt; that you can both &lt;code&gt;await&lt;/code&gt; and &lt;code&gt;yield return&lt;/code&gt; in. For objects that need to be disposed, you can use &lt;code&gt;IAsyncDisposable&lt;/code&gt;, which various framework types implement, such as &lt;code&gt;Stream&lt;/code&gt; and &lt;code&gt;Timer&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Index and Range&lt;/h2&gt;
&lt;p&gt;We’ve created new syntax and types that you can use to describe indexers, for array element access or for any other type that exposes direct data access. This includes support for both a single value — the usual definition of an index — or two values, which describing a range.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Index&lt;/code&gt; is a new type that describes an array index. You can create an &lt;code&gt;Index&lt;/code&gt; from an int that counts from the beginning, or with a prefix &lt;code&gt;^&lt;/code&gt; operator that counts from the end. You can see both cases in the following example:&lt;/p&gt;
&lt;div id=&quot;crayon-5d8968cbee4f6921277503&quot; class=&quot;crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate&quot; data-settings=&quot; minimize scroll-mouseover wrap&quot;&gt;



&lt;div class=&quot;crayon-main&quot;&gt;
&lt;table class=&quot;crayon-table&quot;&gt;&lt;tr class=&quot;crayon-row&quot;&gt;&lt;td class=&quot;crayon-nums&quot; data-settings=&quot;hide&quot;&gt;

&lt;/td&gt;
&lt;td class=&quot;crayon-code&quot;&gt;
&lt;div class=&quot;crayon-pre&quot;&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee4f6921277503-1&quot;&gt;&lt;span class=&quot;crayon-e&quot;&gt;Index&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;i1&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;crayon-cn&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;crayon-h&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;crayon-c&quot;&gt;// number 3 from beginning&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee4f6921277503-2&quot;&gt;&lt;span class=&quot;crayon-e&quot;&gt;Index&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;i2&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;crayon-cn&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;crayon-c&quot;&gt;// number 4 from end&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee4f6921277503-3&quot;&gt;&lt;span class=&quot;crayon-t&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;crayon-sy&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;crayon-cn&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;crayon-cn&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;crayon-cn&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;crayon-cn&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;crayon-cn&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;crayon-cn&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;crayon-cn&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;crayon-cn&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;crayon-cn&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;crayon-cn&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;crayon-sy&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;;&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee4f6921277503-4&quot;&gt;&lt;span class=&quot;crayon-v&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;crayon-e&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;crayon-s&quot;&gt;&quot;{a[i1]}, {a[i2]}&quot;&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;crayon-c&quot;&gt;// &quot;3, 6&quot;&lt;/span&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Range&lt;/code&gt; is similar, consisting of two &lt;code&gt;Index&lt;/code&gt; values, one for the start and one for the end, and can be written with a x..y range expression. You can then index with a &lt;code&gt;Range&lt;/code&gt; in order to produce a slice of the underlying data, as demonstrated in the following example:&lt;/p&gt;
&lt;div id=&quot;crayon-5d8968cbee50d969801972&quot; class=&quot;crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate&quot; data-settings=&quot; minimize scroll-mouseover wrap&quot;&gt;



&lt;div class=&quot;crayon-main&quot;&gt;
&lt;table class=&quot;crayon-table&quot;&gt;&lt;tr class=&quot;crayon-row&quot;&gt;&lt;td class=&quot;crayon-nums&quot; data-settings=&quot;hide&quot;&gt;

&lt;/td&gt;
&lt;td class=&quot;crayon-code&quot;&gt;
&lt;div class=&quot;crayon-pre&quot;&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee50d969801972-1&quot;&gt;&lt;span class=&quot;crayon-t&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;slice&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;i1&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;i2&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;crayon-c&quot;&gt;// { 3, 4, 5 }&lt;/span&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Using Declarations&lt;/h2&gt;
&lt;p&gt;Are you tired of using statements that require indenting your code? No more! You can now write the following code, which attaches a using declaration to the scope of the current statement block and then disposes the object at the end of it.&lt;/p&gt;
&lt;div id=&quot;crayon-5d8968cbee51e108446839&quot; class=&quot;crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate&quot; data-settings=&quot; minimize scroll-mouseover wrap&quot;&gt;



&lt;div class=&quot;crayon-main&quot;&gt;
&lt;table class=&quot;crayon-table&quot;&gt;&lt;tr class=&quot;crayon-row&quot;&gt;&lt;td class=&quot;crayon-nums&quot; data-settings=&quot;hide&quot;&gt;

&lt;/td&gt;
&lt;td class=&quot;crayon-code&quot;&gt;
&lt;div class=&quot;crayon-pre&quot;&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee51e108446839-1&quot;&gt;&lt;span class=&quot;crayon-o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;br&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;crayon-e&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;;&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee51e108446839-2&quot;&gt;&lt;span class=&quot;crayon-e&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;Linq&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;;&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee51e108446839-3&quot;&gt;&lt;span class=&quot;crayon-e&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;Generic&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;;&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee51e108446839-4&quot;&gt;&lt;span class=&quot;crayon-e&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;crayon-m&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;;&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee51e108446839-5&quot;&gt;&lt;span class=&quot;crayon-e&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;;&lt;/span&gt;&lt;/div&gt;

&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee51e108446839-7&quot;&gt;&lt;span class=&quot;crayon-t&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;crayon-e&quot;&gt;usingapp&lt;/span&gt;&lt;/div&gt;

&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee51e108446839-9&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;crayon-t&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;crayon-e&quot;&gt;Program&lt;/span&gt;&lt;/div&gt;

&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee51e108446839-11&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;crayon-m&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;crayon-t&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;crayon-e&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;)&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee51e108446839-12&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;{&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee51e108446839-13&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;crayon-t&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;crayon-s&quot;&gt;&quot;Program.cs&quot;&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;;&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee51e108446839-14&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;crayon-t&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;crayon-t&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;Empty&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;;&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee51e108446839-15&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;crayon-t&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;magicString&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;crayon-s&quot;&gt;&quot;magicString&quot;&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;;&lt;/span&gt;&lt;/div&gt;

&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee51e108446839-17&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;crayon-t&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;crayon-r&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;crayon-e&quot;&gt;FileInfo&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;;&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee51e108446839-18&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;crayon-e&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;crayon-t&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;reader&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;crayon-e&quot;&gt;OpenText&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;;&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee51e108446839-19&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;crayon-st&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;crayon-sy&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;crayon-e&quot;&gt;ReadLine&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;crayon-t&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;)&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee51e108446839-20&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;{&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee51e108446839-21&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;crayon-st&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;crayon-sy&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;crayon-e&quot;&gt;Contains&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;magicString&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;crayon-h&quot;&gt;  &lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee51e108446839-22&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;{&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee51e108446839-23&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;                    &lt;/span&gt;&lt;span class=&quot;crayon-e&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;crayon-s&quot;&gt;&quot;Found string&quot;&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;;&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee51e108446839-24&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;                    &lt;/span&gt;&lt;span class=&quot;crayon-st&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;;&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee51e108446839-25&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;}&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee51e108446839-26&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;}&lt;/span&gt;&lt;/div&gt;

&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee51e108446839-28&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;crayon-e&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;crayon-s&quot;&gt;&quot;String not found&quot;&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;;&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee51e108446839-29&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;crayon-c&quot;&gt;// reader disposed here&lt;/span&gt;&lt;/div&gt;



&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Switch Expressions&lt;/h2&gt;
&lt;p&gt;Anyone who uses C# probably loves the idea of a switch statement, but not the syntax. C# 8 introduces switch expressions, which enable the following:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;terser syntax&lt;/li&gt;
&lt;li&gt;returns a value since it is an expression&lt;/li&gt;
&lt;li&gt;fully integrated with pattern matching&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The switch keyword is “infix”, meaning the keyword sits between the tested value (that’s &lt;code&gt;o&lt;/code&gt; in the first example) and the list of cases, much like expression lambdas.&lt;/p&gt;
&lt;p&gt;The first examples uses the lambda syntax for methods, which integrates well with the switch expressions but isn’t required.&lt;/p&gt;
&lt;div id=&quot;crayon-5d8968cbee52e485845200&quot; class=&quot;crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate&quot; data-settings=&quot; minimize scroll-mouseover wrap&quot;&gt;



&lt;div class=&quot;crayon-main&quot;&gt;
&lt;table class=&quot;crayon-table&quot;&gt;&lt;tr class=&quot;crayon-row&quot;&gt;&lt;td class=&quot;crayon-nums&quot; data-settings=&quot;hide&quot;&gt;

&lt;/td&gt;
&lt;td class=&quot;crayon-code&quot;&gt;
&lt;div class=&quot;crayon-pre&quot;&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee52e485845200-1&quot;&gt;&lt;span class=&quot;crayon-m&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;crayon-t&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;crayon-e&quot;&gt;Display&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;crayon-t&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;crayon-e&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;crayon-st&quot;&gt;switch&lt;/span&gt;&lt;/div&gt;

&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee52e485845200-3&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;crayon-e&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;crayon-sy&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;crayon-cn&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;crayon-cn&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;crayon-sy&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;crayon-h&quot;&gt;        &lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;crayon-s&quot;&gt;&quot;origin&quot;&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;,&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee52e485845200-4&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;crayon-e&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;crayon-sy&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;crayon-t&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;crayon-t&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;crayon-i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;crayon-sy&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;crayon-sy&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;crayon-s&quot;&gt;&quot;({x}, {y})&quot;&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;,&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee52e485845200-5&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;crayon-h&quot;&gt;                            &lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;crayon-s&quot;&gt;&quot;unknown&quot;&lt;/span&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;There are two patterns at play in this example. o first matches with the Point type pattern and then with the property pattern inside the {curly braces}. The _ describes the discard pattern, which is the same as default for switch statements.&lt;/p&gt;
&lt;p&gt;You can go one step further, and rely on tuple deconstruction and parameter position, as you can see in the following example:&lt;/p&gt;
&lt;div id=&quot;crayon-5d8968cbee53e216493740&quot; class=&quot;crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate&quot; data-settings=&quot; minimize scroll-mouseover wrap&quot;&gt;



&lt;div class=&quot;crayon-main&quot;&gt;
&lt;table class=&quot;crayon-table&quot;&gt;&lt;tr class=&quot;crayon-row&quot;&gt;&lt;td class=&quot;crayon-nums&quot; data-settings=&quot;hide&quot;&gt;

&lt;/td&gt;
&lt;td class=&quot;crayon-code&quot;&gt;
&lt;div class=&quot;crayon-pre&quot;&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee53e216493740-1&quot;&gt;&lt;span class=&quot;crayon-m&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;crayon-e&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;crayon-e&quot;&gt;ChangeState&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;crayon-e&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;crayon-e&quot;&gt;Transition&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;transition&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;crayon-t&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;hasKey&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee53e216493740-2&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;transition&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;crayon-st&quot;&gt;switch&lt;/span&gt;&lt;/div&gt;

&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee53e216493740-4&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;Opened&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;Close&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;crayon-h&quot;&gt;              &lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;Closed&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;,&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee53e216493740-5&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;Closed&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;crayon-h&quot;&gt;              &lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;Opened&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;,&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee53e216493740-6&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;Closed&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;Lock&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;crayon-h&quot;&gt;  &lt;/span&gt; &lt;span class=&quot;crayon-e&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;hasKey&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;Locked&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;,&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee53e216493740-7&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;Locked&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;Unlock&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;crayon-e&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;hasKey&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;Closed&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;,&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee53e216493740-8&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;crayon-st&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;crayon-r&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;crayon-e&quot;&gt;InvalidOperationException&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;crayon-s&quot;&gt;&quot;Invalid transition&quot;&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;)&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee53e216493740-9&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;;&lt;/span&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In this example, you can see you do not need to define a variable or explicit type for each of the cases. Instead, the compiler can match the tuple being testing with the tuples defined for each of the cases.&lt;/p&gt;
&lt;p&gt;All of these patterns enable you to write declarative code that captures your intent instead of procedural code that implements tests for it. The compiler becomes responsible for implementing that boring procedural code and is guaranteed to always do it correctly.&lt;/p&gt;
&lt;p&gt;There will still be cases where switch statements will be a better choice than switch expressions and patterns can be used with both syntax styles.&lt;/p&gt;
&lt;h2&gt;Introducing a fast JSON API&lt;/h2&gt;
&lt;p&gt;.NET Core 3.0 includes a new family of JSON APIs that enable reader/writer scenarios, random access with a document object model (DOM) and a serializer. You are likely familiar with using &lt;a href=&quot;https://www.newtonsoft.com/json&quot;&gt;Json.NET&lt;/a&gt;. The new APIs are intended to satisfy many of the same scenarios, but with less memory and faster execution.&lt;/p&gt;
&lt;p&gt;You can see the initial motivation and description of the plan in &lt;a href=&quot;https://github.com/dotnet/corefx/issues/33115&quot;&gt;The future of JSON in .NET Core 3.0&lt;/a&gt;. This includes &lt;a href=&quot;https://github.com/jamesnk&quot;&gt;James Netwon-King&lt;/a&gt;, the author of Json.Net, explaining why a new API was created, as opposed to extending Json.NET. In short, we wanted to build a new JSON API that took advantage of all the new performance capabilities in .NET Core, and delivered performance inline with that. It wasn’t possible to do that in an existing code-base like Json.NET while maintaining compatibility.&lt;/p&gt;
&lt;p&gt;Let’s take a quick look at the new API, layer by layer.&lt;/p&gt;
&lt;h3&gt;Utf8JsonReader&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;System.Text.Json.Utf8JsonReader&lt;/code&gt; is a high-performance, low allocation, forward-only reader for UTF-8 encoded JSON text, read from a &lt;code&gt;ReadOnlySpan&amp;lt;byte&amp;gt;&lt;/code&gt;. The &lt;code&gt;Utf8JsonReader&lt;/code&gt; is a foundational, low-level type, that can be leveraged to build custom parsers and deserializers. Reading through a JSON payload using the new Utf8JsonReader is 2x faster than using the reader from Json.NET. It does not allocate until you need to actualize JSON tokens as (UTF16) strings.&lt;/p&gt;
&lt;h3&gt;Utf8JsonWriter&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;System.Text.Json.Utf8JsonWriter&lt;/code&gt; provides a high-performance, non-cached, forward-only way to write UTF-8 encoded JSON text from common .NET types like &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;Int32&lt;/code&gt;, and &lt;code&gt;DateTime&lt;/code&gt;. Like the reader, the writer is a foundational, low-level type, that can be leveraged to build custom serializers. Writing a JSON payload using the new &lt;code&gt;Utf8JsonWriter&lt;/code&gt; is 30-80% faster than using the writer from &lt;code&gt;Json.NET&lt;/code&gt; and does not allocate.&lt;/p&gt;
&lt;h3&gt;JsonDocument&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;System.Text.Json.JsonDocument&lt;/code&gt; provides the ability to parse JSON data and build a read-only Document Object Model (DOM) that can be queried to support random access and enumeration. It is built on top of the &lt;code&gt;Utf8JsonReader&lt;/code&gt;. The JSON elements that compose the data can be accessed via the &lt;code&gt;JsonElement&lt;/code&gt; type which is exposed by the &lt;code&gt;JsonDocument&lt;/code&gt; as a property called &lt;code&gt;RootElement&lt;/code&gt;. The &lt;code&gt;JsonElement&lt;/code&gt; contains the JSON array and object enumerators along with APIs to convert JSON text to common .NET types. Parsing a typical JSON payload and accessing all its members using the &lt;code&gt;JsonDocument&lt;/code&gt; is 2-3x faster than &lt;code&gt;Json.NET&lt;/code&gt; with very little allocations for data that is reasonably sized (i.e. &amp;lt; 1 MB).&lt;/p&gt;
&lt;h3&gt;JSON Serializer&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;System.Text.Json.JsonSerializer&lt;/code&gt; layers on top of the high-performance &lt;code&gt;Utf8JsonReader&lt;/code&gt; and &lt;code&gt;Utf8JsonWriter&lt;/code&gt;. It deserializes objects from JSON and serializes objects to JSON. Memory allocations are kept minimal and includes support for reading and writing JSON with &lt;code&gt;Stream&lt;/code&gt; asynchronously.&lt;/p&gt;
&lt;p&gt;See the &lt;a href=&quot;https://github.com/dotnet/corefx/blob/master/src/System.Text.Json/docs/SerializerProgrammingModel.md&quot;&gt;documentation&lt;/a&gt; for information and samples.&lt;/p&gt;
&lt;h2&gt;Introducing the new SqlClient&lt;/h2&gt;
&lt;p&gt;SqlClient is the data provider you use to access Microsoft SQL Server and Azure SQL Database, either through one of the popular .NET O/RMs, like EF Core or Dapper, or directly using the ADO.NET APIs. It will now be released and updated as the &lt;a href=&quot;https://www.nuget.org/packages/Microsoft.Data.SqlClient/&quot;&gt;Microsoft.Data.SqlClient&lt;/a&gt; NuGet package, and supported for both .NET Framework and .NET Core applications. By using NuGet, it will be easier for the SQL team to provide updates to both .NET Framework and .NET Core users.&lt;/p&gt;
&lt;h2&gt;ARM and IoT Support&lt;/h2&gt;
&lt;p&gt;We added support for Linux ARM64 this release, after having added support for ARM32 for Linux and Windows in the .NET Core 2.1 and 2.2, respectively. While some IoT workloads take advantage of our existing x64 capabilities, many users had been asking for ARM support. That is now in place, and we are working with customers who are planning large deployments.&lt;/p&gt;
&lt;p&gt;Many IoT deployments using .NET are edge devices, and entirely network-oriented. Other scenarios require direct access to hardware. In this release, we added the capability to use serial ports on Linux and take advantage of digital pins on devices like the Raspberry Pi. The pins use a variety of protocols. We added support for GPIO, PWM, I2C, and SPI, to enable reading sensor data, interacting with radios and writing text and images to displays, and many other scenarios.&lt;/p&gt;
&lt;p&gt;This functionality is available as part of the following packages:&lt;/p&gt;
&lt;p&gt;As part of providing support for GPIO (and friends), we took a look at what was already available. We found APIs for C# and also Python. In both cases, the APIs were wrappers over native libraries, which were often licensed as GPL. We didn’t see a path forward with that approach. Instead, we built a 100% C# solution to implement these protocols. This means that our APIs will work anywhere .NET Core is supported, can be debugged with a C# debugger (via sourcelink), and supports multiple underlying Linux drivers (sysfs, libgpiod, and board-specific). All of the code is licensed as MIT. We see this approach as a major improvement for .NET developers compared to what has existed.&lt;/p&gt;
&lt;p&gt;See &lt;a href=&quot;https://github.com/dotnet/iot&quot;&gt;dotnet/iot&lt;/a&gt; to learn more. The best places to start are &lt;a href=&quot;https://github.com/dotnet/iot/blob/master/samples/README.md&quot;&gt;samples&lt;/a&gt; or &lt;a href=&quot;https://github.com/dotnet/iot/blob/master/src/devices/README.md&quot;&gt;devices&lt;/a&gt;. We have built a few experiments while adding support for GPIO. One of them was validating that we could &lt;a href=&quot;https://www.youtube.com/watch?v=TW4K64hfa5U&quot;&gt;control an Arduino from a Pi&lt;/a&gt; through a serial port connection. That was suprisingly easy. We also spent a lot of time playing with &lt;a href=&quot;https://learn.adafruit.com/32x16-32x32-rgb-led-matrix/&quot;&gt;LED matrices&lt;/a&gt;, as you can see in this &lt;a href=&quot;https://github.com/dotnet/iot/blob/master/src/devices/RGBLedMatrix/README.md&quot;&gt;RGB LED Matrix sample&lt;/a&gt;. We expect to share more of these experiments over time.&lt;/p&gt;
&lt;h2&gt;.NET Core runtime roll-forward policy update&lt;/h2&gt;
&lt;p&gt;The .NET Core runtime, actually the runtime binder, now enables major-version roll-forward as an opt-in policy. The runtime binder already enables roll-forward on patch and minor versions as a default policy. We decided to expose a broader set of policies, which we expected would be important for various scenarios, but did not change the default roll-forward behavior.&lt;/p&gt;
&lt;p&gt;There is a new property called &lt;code&gt;RollForward&lt;/code&gt;, which accepts the following values:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;LatestPatch&lt;/code&gt; — Rolls forward to the highest patch version. This disables the &lt;code&gt;Minor&lt;/code&gt; policy.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Minor&lt;/code&gt; — Rolls forward to the lowest higher minor version, if the requested minor version is missing. If the requested minor version is present, then the &lt;code&gt;LatestPatch&lt;/code&gt; policy is used. This is the default policy.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Major&lt;/code&gt; — Rolls forward to lowest higher major version, and lowest minor version, if the requested major version is missing. If the requested major version is present, then the &lt;code&gt;Minor&lt;/code&gt; policy is used.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LatestMinor&lt;/code&gt; — Rolls forward to highest minor version, even if the requested minor version is present.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LatestMajor&lt;/code&gt; — Rolls forward to highest major and highest minor version, even if requested major is present.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Disable&lt;/code&gt; — Do not roll forward. Only bind to specified version. This policy is not recommended for general use since it disable the ability to roll-forward to the latest patches. It is only recommended for testing.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;See &lt;a href=&quot;https://github.com/dotnet/designs/blob/master/accepted/runtime-binding.md&quot;&gt;Runtime Binding Behavior&lt;/a&gt; and &lt;a href=&quot;https://github.com/dotnet/core-setup/pull/5691&quot;&gt;dotnet/core-setup #5691&lt;/a&gt; for more information.&lt;/p&gt;
&lt;h2&gt;Docker and cgroup Limits&lt;/h2&gt;
&lt;p&gt;Many developers are &lt;a href=&quot;https://devblogs.microsoft.com/dotnet/using-net-and-docker-together-dockercon-2019-update/&quot;&gt;packaging and running their application with containers&lt;/a&gt;. A key scenario is &lt;a href=&quot;https://docs.docker.com/config/containers/resource_constraints/&quot;&gt;limiting a container’s resources&lt;/a&gt; such as CPU or memory. We implemented &lt;a href=&quot;https://github.com/dotnet/coreclr/pull/10064&quot;&gt;support for memory limits&lt;/a&gt; back in 2017. Unfortunately, we found that the implementation wasn’t aggressive enough to reliably stay under the configured limits and applications were still being OOM killed when memory limits are set (particular &amp;lt;500MB). We have fixed that in .NET Core 3.0. We strongly recommend that .NET Core Docker users upgrade to .NET Core 3.0 due to this improvement.&lt;/p&gt;
&lt;p&gt;The Docker resource limits feature is built on top of &lt;a href=&quot;https://en.wikipedia.org/wiki/Cgroups&quot;&gt;cgroups&lt;/a&gt;, which a Linux kernel feature. From a runtime perspective, we need to target cgroup primitives.&lt;/p&gt;
&lt;p&gt;You can limit the available memory for a container with the &lt;code&gt;docker run -m&lt;/code&gt; argument, as shown in the following example that creates an Alpine-based container with a 4MB memory limit (and then &lt;a href=&quot;https://stackoverflow.com/questions/42187085/check-mem-limit-within-a-docker-container&quot;&gt;prints the memory limit&lt;/a&gt;):&lt;/p&gt;
&lt;div id=&quot;crayon-5d8968cbee550394162117&quot; class=&quot;crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate&quot; data-settings=&quot; minimize scroll-mouseover wrap&quot;&gt;



&lt;div class=&quot;crayon-main&quot;&gt;
&lt;table class=&quot;crayon-table&quot;&gt;&lt;tr class=&quot;crayon-row&quot;&gt;&lt;td class=&quot;crayon-nums&quot; data-settings=&quot;hide&quot;&gt;

&lt;/td&gt;
&lt;td class=&quot;crayon-code&quot;&gt;
&lt;div class=&quot;crayon-pre&quot;&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee550394162117-1&quot;&gt;&lt;span class=&quot;crayon-v&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;crayon-e&quot;&gt;docker&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;crayon-i&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;crayon-cn&quot;&gt;4mb&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;crayon-e&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;crayon-e&quot;&gt;alpine&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;cgroup&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;limit_in&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;_&lt;/span&gt;bytes&lt;/div&gt;


&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We also added made changes to &lt;a href=&quot;https://github.com/dotnet/coreclr/commit/aea3b1a80d6c114e3e67bc9521bf39a8a17371d1&quot;&gt;better support CPU limits&lt;/a&gt; (&lt;code&gt;--cpus&lt;/code&gt;). This includes changing the way that the runtime rounds up or down for decimal CPU values. In the case where &lt;code&gt;--cpus&lt;/code&gt; is set to a value close (enough) to a smaller integer (for example, 1.499999999), the runtime would previously round that value down (in this case, to 1). As a result, the runtime would take advantage of less CPUs than requested, leading to CPU underutilization. By rounding up the value, the runtime augments the pressure on the OS threads scheduler, but even in the worst case scenario (&lt;code&gt;--cpus=1.000000001&lt;/code&gt; — previously rounded down to 1, now rounded to 2), we have not observed any overutilization of the CPU leading to performance degradation.&lt;/p&gt;
&lt;p&gt;The next step was ensuring that the thread pool honors CPU limits. Part of the algorithm of the thread pool is computing CPU busy time, which is, in part, a function of available CPUs. By taking CPU limits into account when computing CPU busy time, we avoid various heuristics of the threadpool competing with each other: one trying to allocate more threads to increase the CPU busy time, and the other one trying to allocate less threads because adding more threads doesn’t improve the throughput.&lt;/p&gt;
&lt;h2&gt;Making GC Heap Sizes Smaller by default&lt;/h2&gt;
&lt;p&gt;While working on &lt;a href=&quot;https://devblogs.microsoft.com/dotnet/announcing-net-core-3-preview-3/&quot;&gt;improving support for docker memory limits&lt;/a&gt;, we were inspired to make more general GC policy updates to improve memory usage for a broader set of applications (even when not running in a container). The changes better align the generation 0 allocation budget with modern processor cache sizes and cache hierarchy.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/DamianEdwards&quot;&gt;Damian Edwards&lt;/a&gt; on our team noticed that the &lt;a href=&quot;https://twitter.com/DamianEdwards/status/1093981272362254336&quot;&gt;memory usage of the ASP.NET benchmarks were cut in half&lt;/a&gt; with no negative effect on other performance metrics. That’s a staggering improvement! As he says, these are the new defaults, with no change required to his (or your) code (other than adopting .NET Core 3.0).&lt;/p&gt;
&lt;p&gt;The memory savings that we saw with the ASP.NET benchmarks may or may not be representative of what you’ll see with your application. We’d like to hear how these changes reduce memory usage for your application.&lt;/p&gt;
&lt;h2&gt;Better support for many proc machines&lt;/h2&gt;
&lt;p&gt;Based on .NET’s Windows heritage, the GC needed to implement the &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/ProcThread/processor-groups&quot;&gt;Windows concept of processor groups&lt;/a&gt; to support machines with 64+ processors. This implementation was made in .NET Framework, 5-10 years ago. With .NET Core, we made the choice initially for the Linux PAL to emulate that same concept, even though it doesn’t exist in Linux. We have since abandoned this concept in the GC and transitioned it exclusively to the Windows PAL.&lt;/p&gt;
&lt;p&gt;The GC now exposes a configuration switch, GCHeapAffinitizeRanges, to specify affinity masks on machines with 64+ processors. &lt;a href=&quot;https://twitter.com/maoni0&quot;&gt;Maoni Stephens&lt;/a&gt; wrote about this change in &lt;a href=&quot;https://devblogs.microsoft.com/dotnet/making-cpu-configuration-better-for-gc-on-machines-with-64-cpus/&quot;&gt;Making CPU configuration better for GC on machines with &amp;gt; 64 CPUs&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;GC Large page support&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/Memory/large-page-support&quot;&gt;Large Pages&lt;/a&gt; or &lt;a href=&quot;https://wiki.debian.org/Hugepages&quot;&gt;Huge Pages&lt;/a&gt; is a feature where the operating system is able to establish memory regions larger than the native page size (often 4K) to improve performance of the application requesting these large pages.&lt;/p&gt;
&lt;p&gt;When a virtual-to-physical address translation occurs, a cache called the &lt;a href=&quot;https://en.wikipedia.org/wiki/Translation_lookaside_buffer&quot;&gt;Translation lookaside buffer (TLB)&lt;/a&gt; is first consulted (often in parallel) to check if a physical translation for the virtual address being accessed is available, to avoid doing a potentially expensive page-table walk. Each large-page translation uses a single translation buffer inside the CPU. The size of this buffer is typically three orders of magnitude larger than the native page size; this increases the efficiency of the translation buffer, which can increase performance for frequently accessed memory. This win can be even more significant in a virtual machine, which has a two-layer TLB.&lt;/p&gt;
&lt;p&gt;The GC can now be configured with the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/inc/clrconfigvalues.h#L326&quot;&gt;GCLargePages&lt;/a&gt; opt-in feature to choose to &lt;a href=&quot;https://github.com/dotnet/coreclr/pull/23251&quot;&gt;allocate large pages on Windows&lt;/a&gt;. Using large pages reduces TLB misses therefore can potentially increase application perf in general, however, the feature has its own set of &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/Memory/large-page-support&quot;&gt;limitations&lt;/a&gt; that should be considered. Bing has experimented with this feature and seen performance improvements.&lt;/p&gt;
&lt;h2&gt;.NET Core Version APIs&lt;/h2&gt;
&lt;p&gt;We have &lt;a href=&quot;https://github.com/dotnet/coreclr/issues/22844&quot;&gt;improved the .NET Core version APIs&lt;/a&gt; in .NET Core 3.0. They now return the version information you would expect. These changes while they are objectively better are technically breaking and may break applications that rely on existing version APIs for various information.&lt;/p&gt;
&lt;p&gt;You can now &lt;a href=&quot;https://github.com/richlander/testapps/blob/master/versioninfo/Program.cs&quot;&gt;get access to the following version information&lt;/a&gt;:&lt;/p&gt;
&lt;div id=&quot;crayon-5d8968cbee566703190221&quot; class=&quot;crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate&quot; data-settings=&quot; minimize scroll-mouseover wrap&quot;&gt;



&lt;div class=&quot;crayon-main&quot;&gt;
&lt;table class=&quot;crayon-table&quot;&gt;&lt;tr class=&quot;crayon-row&quot;&gt;&lt;td class=&quot;crayon-nums&quot; data-settings=&quot;hide&quot;&gt;

&lt;/td&gt;
&lt;td class=&quot;crayon-code&quot;&gt;
&lt;div class=&quot;crayon-pre&quot;&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee566703190221-1&quot;&gt;&lt;span class=&quot;crayon-v&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;git&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;testapps&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;versioninfo&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;crayon-e&quot;&gt;dotnet&lt;/span&gt; &lt;span class=&quot;crayon-e&quot;&gt;run&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee566703190221-2&quot;&gt;&lt;span class=&quot;crayon-e&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;crayon-e&quot;&gt;NET&lt;/span&gt; &lt;span class=&quot;crayon-e&quot;&gt;Core&lt;/span&gt; &lt;span class=&quot;crayon-e&quot;&gt;info*&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;*&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee566703190221-3&quot;&gt;&lt;span class=&quot;crayon-v&quot;&gt;Environment&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;Version&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;crayon-cn&quot;&gt;3.0.0&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee566703190221-4&quot;&gt;&lt;span class=&quot;crayon-v&quot;&gt;RuntimeInformation&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;FrameworkDescription&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;crayon-sy&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;crayon-e&quot;&gt;NET&lt;/span&gt; &lt;span class=&quot;crayon-i&quot;&gt;Core&lt;/span&gt; &lt;span class=&quot;crayon-cn&quot;&gt;3.0.0&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee566703190221-5&quot;&gt;&lt;span class=&quot;crayon-e&quot;&gt;CoreCLR&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;crayon-cn&quot;&gt;3.0.0&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee566703190221-6&quot;&gt;&lt;span class=&quot;crayon-e&quot;&gt;CoreCLR&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;crayon-e&quot;&gt;ac25be694a5385a6a1496db40de932df0689b742&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee566703190221-7&quot;&gt;&lt;span class=&quot;crayon-e&quot;&gt;CoreFX&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;crayon-cn&quot;&gt;3.0.0&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee566703190221-8&quot;&gt;&lt;span class=&quot;crayon-e&quot;&gt;CoreFX&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;crayon-cn&quot;&gt;1bb52e6a3db7f3673a3825f3677b9f27b9af99aa&lt;/span&gt;&lt;/div&gt;

&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee566703190221-10&quot;&gt;&lt;span class=&quot;crayon-o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;crayon-e&quot;&gt;Environment&lt;/span&gt; &lt;span class=&quot;crayon-e&quot;&gt;info*&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;*&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee566703190221-11&quot;&gt;&lt;span class=&quot;crayon-v&quot;&gt;Environment&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;OSVersion&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;crayon-e&quot;&gt;Microsoft&lt;/span&gt; &lt;span class=&quot;crayon-e&quot;&gt;Windows&lt;/span&gt; &lt;span class=&quot;crayon-i&quot;&gt;NT&lt;/span&gt; &lt;span class=&quot;crayon-cn&quot;&gt;6.2.9200.0&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee566703190221-12&quot;&gt;&lt;span class=&quot;crayon-v&quot;&gt;RuntimeInformation&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;OSDescription&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;crayon-e&quot;&gt;Microsoft&lt;/span&gt; &lt;span class=&quot;crayon-i&quot;&gt;Windows&lt;/span&gt; &lt;span class=&quot;crayon-cn&quot;&gt;10.0.18970&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee566703190221-13&quot;&gt;&lt;span class=&quot;crayon-v&quot;&gt;RuntimeInformation&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;OSArchitecture&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;crayon-e&quot;&gt;X64&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee566703190221-14&quot;&gt;&lt;span class=&quot;crayon-v&quot;&gt;Environment&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;ProcessorCount&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;crayon-cn&quot;&gt;8&lt;/span&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Event Pipe improvements&lt;/h2&gt;
&lt;p&gt;Event Pipe now supports multiple sessions. This means that you can consume events with EventListener in-proc and simultaneously have out-of-process event pipe clients.&lt;/p&gt;
&lt;p&gt;New Perf Counters added:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;% Time in GC&lt;/li&gt;
&lt;li&gt;Gen 0 Heap Size&lt;/li&gt;
&lt;li&gt;Gen 1 Heap Size&lt;/li&gt;
&lt;li&gt;Gen 2 Heap Size&lt;/li&gt;
&lt;li&gt;LOH Heap Size&lt;/li&gt;
&lt;li&gt;Allocation Rate&lt;/li&gt;
&lt;li&gt;Number of assemblies loaded&lt;/li&gt;
&lt;li&gt;Number of ThreadPool Threads&lt;/li&gt;
&lt;li&gt;Monitor Lock Contention Rate&lt;/li&gt;
&lt;li&gt;ThreadPool Work Items Queue&lt;/li&gt;
&lt;li&gt;ThreadPool Completed Work Items Rate&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Profiler attach is now implemented using the same Event Pipe infrastructure.&lt;/p&gt;
&lt;p&gt;See &lt;a href=&quot;https://twitter.com/davidfowl/status/1135355693634949121&quot;&gt;Playing with counters&lt;/a&gt; from David Fowler to get an idea of what you can do with event pipe to perform your own performance investigations or just monitor application status.&lt;/p&gt;
&lt;p&gt;See &lt;a href=&quot;https://github.com/dotnet/diagnostics/blob/master/documentation/dotnet-counters-instructions.md&quot;&gt;dotnet-counters&lt;/a&gt; to install the dotnet-counters tool.&lt;/p&gt;
&lt;h2&gt;HTTP/2 Support&lt;/h2&gt;
&lt;p&gt;We now have support for &lt;a href=&quot;https://en.wikipedia.org/wiki/HTTP/2&quot;&gt;HTTP/2&lt;/a&gt; in HttpClient. The new protocol is a requirement for some APIs, like &lt;a href=&quot;https://github.com/grpc/&quot;&gt;gRPC&lt;/a&gt; and &lt;a href=&quot;https://developer.apple.com/library/archive/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/APNSOverview.html#//apple_ref/doc/uid/TP40008194-CH8-SW1&quot;&gt;Apple Push Notification Service&lt;/a&gt;. We expect more services to require HTTP/2 in the future. ASP.NET also has support for HTTP/2.&lt;/p&gt;
&lt;p&gt;Note: the preferred HTTP protocol version will be negotiated via TLS/ALPN and HTTP/2 will only be used if the server selects to use it.&lt;/p&gt;
&lt;h2&gt;Tiered Compilation&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/dotnet/2018/08/02/tiered-compilation-preview-in-net-core-2-1/&quot;&gt;Tiered compilation&lt;/a&gt; was added as an opt-in feature in .NET Core 2.1. It’s a feature that enables the runtime to more adaptively use the Just-In-Time (JIT) compiler to get better performance, both at startup and to maximize throughput. It is enabled by default with .NET Core 3.0. We made a lot of improvements to the feature over the last year, including testing it with a variety of workloads, including websites, PowerShell Core and Windows desktop apps. The performance is a lot better, which is what enabled us to enable it by default.&lt;/p&gt;
&lt;h2&gt;IEEE Floating-point improvements&lt;/h2&gt;
&lt;p&gt;Floating point APIs have been updated to comply with &lt;a href=&quot;https://en.wikipedia.org/wiki/IEEE_754-2008_revision&quot;&gt;IEEE 754-2008 revision&lt;/a&gt;. The goal of the &lt;a href=&quot;https://github.com/dotnet/corefx/issues/31901&quot;&gt;.NET Core floating point project&lt;/a&gt; is to expose all “required” operations and ensure that they are behaviorally compliant with the IEEE spec.&lt;/p&gt;
&lt;p&gt;Parsing and formatting fixes:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Correctly parse and round inputs of any length.&lt;/li&gt;
&lt;li&gt;Correctly parse and format negative zero.&lt;/li&gt;
&lt;li&gt;Correctly parse Infinity and NaN by performing a case-insensitive check and allowing an optional preceding &lt;code&gt;+&lt;/code&gt; where applicable.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;New &lt;a href=&quot;https://github.com/dotnet/corefx/issues/31903&quot;&gt;Math APIs&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;BitIncrement/BitDecrement&lt;/code&gt; — corresponds to the &lt;code&gt;nextUp&lt;/code&gt; and &lt;code&gt;nextDown&lt;/code&gt; IEEE operations. They return the smallest floating-point number that compares greater or lesser than the input (respectively). For example, &lt;code&gt;Math.BitIncrement(0.0)&lt;/code&gt; would return &lt;code&gt;double.Epsilon&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MaxMagnitude/MinMagnitude&lt;/code&gt; — corresponds to the &lt;code&gt;maxNumMag&lt;/code&gt; and &lt;code&gt;minNumMag&lt;/code&gt; IEEE operations, they return the value that is greater or lesser in magnitude of the two inputs (respectively). For example, &lt;code&gt;Math.MaxMagnitude(2.0, -3.0)&lt;/code&gt; would return &lt;code&gt;-3.0&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ILogB&lt;/code&gt; — corresponds to the &lt;code&gt;logB&lt;/code&gt; IEEE operation which returns an integral value, it returns the integral base-2 log of the input parameter. This is effectively the same as &lt;code&gt;floor(log2(x))&lt;/code&gt;, but done with minimal rounding error.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ScaleB&lt;/code&gt; — corresponds to the &lt;code&gt;scaleB&lt;/code&gt; IEEE operation which takes an integral value, it returns effectively &lt;code&gt;x * pow(2, n)&lt;/code&gt;, but is done with minimal rounding error.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Log2&lt;/code&gt; — corresponds to the &lt;code&gt;log2&lt;/code&gt; IEEE operation, it returns the base-2 logarithm. It minimizes rounding error.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FusedMultiplyAdd&lt;/code&gt; — corresponds to the &lt;code&gt;fma&lt;/code&gt; IEEE operation, it performs a fused multiply add. That is, it does &lt;code&gt;(x * y) + z&lt;/code&gt; as a single operation, there-by minimizing the rounding error. An example would be &lt;code&gt;FusedMultiplyAdd(1e308, 2.0, -1e308)&lt;/code&gt; which returns &lt;code&gt;1e308&lt;/code&gt;. The regular &lt;code&gt;(1e308 * 2.0) - 1e308&lt;/code&gt; returns &lt;code&gt;double.PositiveInfinity&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CopySign&lt;/code&gt; — corresponds to the &lt;code&gt;copySign&lt;/code&gt; IEEE operation, it returns the value of &lt;code&gt;x&lt;/code&gt;, but with the sign of &lt;code&gt;y&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;.NET Platform Dependent Intrinsics&lt;/h2&gt;
&lt;p&gt;We’ve added &lt;a href=&quot;https://devblogs.microsoft.com/dotnet/hardware-intrinsics-in-net-core/&quot;&gt;APIs that allow access to certain performance-oriented CPU instructions&lt;/a&gt;, such as the SIMD or Bit Manipulation instruction sets. These instructions can help achieve big performance improvements in certain scenarios, such as processing data efficiently in parallel. In addition to exposing the APIs for your programs to use, we have begun using these instructions to accelerate the .NET libraries too.&lt;/p&gt;
&lt;p&gt;The following CoreCLR PRs demonstrate a few of the intrinsics, either via implementation or use:&lt;/p&gt;
&lt;p&gt;For more information, take a look at &lt;a href=&quot;https://github.com/dotnet/designs/blob/master/accepted/platform-intrinsics.md&quot;&gt;.NET Platform Dependent Intrinsics&lt;/a&gt;, which defines an approach for defining this hardware infrastructure, allowing Microsoft, chip vendors or any other company or individual to define hardware/chip APIs that should be exposed to .NET code.&lt;/p&gt;
&lt;h2&gt;Supporting TLS 1.3 and OpenSSL 1.1.1 now Supported on Linux&lt;/h2&gt;
&lt;p&gt;NET Core can now take advantage of &lt;a href=&quot;https://www.openssl.org/blog/blog/2018/09/11/release111/&quot;&gt;TLS 1.3 support in OpenSSL 1.1.1&lt;/a&gt;. There are multiple benefits of TLS 1.3, per the OpenSSL team:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Improved connection times due to a reduction in the number of round trips required between the client and server&lt;/li&gt;
&lt;li&gt;Improved security due to the removal of various obsolete and insecure cryptographic algorithms and encryption of more of the connection handshake&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;.NET Core 3.0 is capable of utilizing OpenSSL 1.1.1, OpenSSL 1.1.0, or OpenSSL 1.0.2 (whatever the best version found is, on a Linux system). When OpenSSL 1.1.1 is available, the SslStream and HttpClient types will use TLS 1.3 when using SslProtocols.None (system default protocols), assuming both the client and server support TLS 1.3.&lt;/p&gt;
&lt;p&gt;.NET Core will support TLS 1.3 on Windows and macOS — we expect automatically — when support becomes available.&lt;/p&gt;
&lt;h2&gt;Cryptography&lt;/h2&gt;
&lt;p&gt;We added support for &lt;code&gt;AES-GCM&lt;/code&gt; and &lt;code&gt;AES-CCM&lt;/code&gt; ciphers, implemented via &lt;code&gt;System.Security.Cryptography.AesGcm&lt;/code&gt; and &lt;code&gt;System.Security.Cryptography.AesCcm&lt;/code&gt;. These algorithms are both Authenticated Encryption with Association Data (AEAD) algorithms, and the first Authenticated Encryption (AE) algorithms added to .NET Core.&lt;/p&gt;
&lt;p&gt;NET Core 3.0 now supports the import and export of asymmetric public and private keys from standard formats, without needing to use an X.509 certificate.&lt;/p&gt;
&lt;p&gt;All key types (RSA, DSA, ECDsa, ECDiffieHellman) support the X.509 SubjectPublicKeyInfo format for public keys, and the PKCS#8 PrivateKeyInfo and PKCS#8 EncryptedPrivateKeyInfo formats for private keys. RSA additionally supports PKCS#1 RSAPublicKey and PKCS#1 RSAPrivateKey. The export methods all produce DER-encoded binary data, and the import methods expect the same; if a key is stored in the text-friendly PEM format the caller will need to base64-decode the content before calling an import method.&lt;/p&gt;
&lt;p&gt;PKCS#8 files can be inspected with the &lt;code&gt;System.Security.Cryptography.Pkcs.Pkcs8PrivateKeyInfo&lt;/code&gt; class.&lt;/p&gt;
&lt;p&gt;PFX/PKCS#12 files can be inspected and manipulated with &lt;code&gt;System.Security.Cryptography.Pkcs.Pkcs12Info&lt;/code&gt; and &lt;code&gt;System.Security.Cryptography.Pkcs.Pkcs12Builder&lt;/code&gt;, respectively.&lt;/p&gt;
&lt;h2&gt;New Japanese Era (Reiwa)&lt;/h2&gt;
&lt;p&gt;On May 1st, 2019, Japan started a new era called &lt;a href=&quot;https://en.wikipedia.org/wiki/Reiwa&quot;&gt;Reiwa&lt;/a&gt;. Software that has support for Japanese calendars, like .NET Core, must be updated to accommodate Reiwa. .NET Core and .NET Framework have been updated and correctly handle Japanese date formatting and parsing with the new era.&lt;/p&gt;
&lt;p&gt;.NET relies on operating system or other updates to correctly process Reiwa dates. If you or your customers are using Windows, download the latest updates for your Windows version. If running macOS or Linux, download and install &lt;a href=&quot;http://site.icu-project.org/download/64&quot;&gt;ICU version 64.2&lt;/a&gt;, which has support the new Japanese era.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://devblogs.microsoft.com/dotnet/handling-a-new-era-in-the-japanese-calendar-in-net/&quot;&gt;Handling a new era in the Japanese calendar in .NET blog&lt;/a&gt; has more information about .NET support for the new Japanese era.&lt;/p&gt;
&lt;h2&gt;Assembly Load Context Improvements&lt;/h2&gt;
&lt;p&gt;Enhancements to AssemblyLoadContext:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Enable naming contexts&lt;/li&gt;
&lt;li&gt;Added the ability to enumerate ALCs&lt;/li&gt;
&lt;li&gt;Added the ability to enumerate assemblies within an ALC&lt;/li&gt;
&lt;li&gt;Made the type concrete – so instantiation is easier (no requirement for custom types for simple scenarios)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;See &lt;a href=&quot;https://github.com/dotnet/corefx/issues/34791&quot;&gt;dotnet/corefx #34791&lt;/a&gt; for more details. The &lt;a href=&quot;https://github.com/richlander/testapps/blob/master/appwithalc/appwithalc/Program.cs&quot;&gt;appwithalc&lt;/a&gt; sample demonstrates these new capabilities.&lt;/p&gt;
&lt;p&gt;By using &lt;code&gt;AssemblyDependencyResolver&lt;/code&gt; along with a custom &lt;code&gt;AssemblyLoadContext&lt;/code&gt;, an application can load plugins so that each plugin’s dependencies are loaded from the correct location, and one plugin’s dependencies will not conflict with another. The &lt;a href=&quot;https://github.com/dotnet/samples/tree/master/core/extensions/AppWithPlugin&quot;&gt;AppWithPlugin sample&lt;/a&gt; includes plugins that have conflicting dependencies and plugins that rely on satellite assemblies or native libraries.&lt;/p&gt;
&lt;h2&gt;Assembly Unloadability&lt;/h2&gt;
&lt;p&gt;Assembly unloadability is a new capability of AssemblyLoadContext. This new feature is largely transparent from an API perspective, exposed with just a few new APIs. It enables a loader context to be unloaded, releasing all memory for instantiated types, static fields and for the assembly itself. An application should be able to load and unload assemblies via this mechanism forever without experiencing a memory leak.&lt;/p&gt;
&lt;p&gt;We expect this new capability to be used for the following scenarios:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Plugin scenarios where dynamic plugin loading and unloading is required.&lt;/li&gt;
&lt;li&gt;Dynamically compiling, running and then flushing code. Useful for web sites, scripting engines, etc.&lt;/li&gt;
&lt;li&gt;Loading assemblies for introspection (like ReflectionOnlyLoad), although MetadataLoadContext will be a better choice in many cases.&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Assembly Metadata Reading with MetadataLoadContext&lt;/h2&gt;
&lt;p&gt;We added &lt;code&gt;MetadataLoadContext&lt;/code&gt;, which enables reading assembly metadata without affecting the caller’s application domain. Assemblies are read as data, including assemblies built for different architectures and platforms than the current runtime environment. MetadataLoadContext overlaps with the ReflectionOnlyLoad type, which is only available in the .NET Framework.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MetdataLoadContext&lt;/code&gt; is available in the &lt;a href=&quot;https://www.nuget.org/packages/System.Reflection.MetadataLoadContext&quot;&gt;System.Reflection.MetadataLoadContext&lt;/a&gt; package. It is a .NET Standard 2.0 package.&lt;/p&gt;
&lt;p&gt;Scenarios for MetadataLoadContext include design-time features, build-time tooling, and runtime light-up features that need to inspect a set of assemblies as data and have all file locks and memory freed after inspection is performed.&lt;/p&gt;
&lt;h2&gt;Native Hosting sample&lt;/h2&gt;
&lt;p&gt;The team posted a &lt;a href=&quot;https://github.com/dotnet/samples/tree/master/core/hosting/HostWithHostFxr&quot;&gt;Native Hosting sample&lt;/a&gt;. It demonstrates a best practice approach for hosting .NET Core in a native application.&lt;/p&gt;
&lt;p&gt;As part of .NET Core 3.0, we now expose general functionality to .NET Core native hosts that was previously only available to .NET Core managed applications through the officially provided .NET Core hosts. The functionality is primarily related to assembly loading. This functionality should make it easier to produce native hosts that can take advantage of the full feature set of .NET Core.&lt;/p&gt;
&lt;h2&gt;Other API Improvements&lt;/h2&gt;
&lt;p&gt;We optimized &lt;code&gt;Span&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;Memory&amp;lt;T&amp;gt;&lt;/code&gt; and related types that were introduced in .NET Core 2.1. Common operations such as span construction, slicing, parsing, and formatting now perform better. Additionally, types like String have seen under-the-cover improvements to make them more efficient when used as keys with &lt;code&gt;Dictionary&amp;lt;TKey, TValue&amp;gt;&lt;/code&gt; and other collections. No code changes are required to enjoy these improvements.&lt;/p&gt;
&lt;p&gt;The following improvements are also new:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Brotli support built-in to HttpClient&lt;/li&gt;
&lt;li&gt;ThreadPool.UnsafeQueueWorkItem(IThreadPoolWorkItem)&lt;/li&gt;
&lt;li&gt;Unsafe.Unbox&lt;/li&gt;
&lt;li&gt;CancellationToken.Unregister&lt;/li&gt;
&lt;li&gt;Complex arithmetic operators&lt;/li&gt;
&lt;li&gt;Socket APIs for TCP keep alive&lt;/li&gt;
&lt;li&gt;StringBuilder.GetChunks&lt;/li&gt;
&lt;li&gt;IPEndPoint parsing&lt;/li&gt;
&lt;li&gt;RandomNumberGenerator.GetInt32&lt;/li&gt;
&lt;li&gt;System.Buffers.SequenceReader&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Applications now have native executables by default&lt;/h2&gt;
&lt;p&gt;.NET Core applications are now built with native executables. This is new for &lt;a href=&quot;https://docs.microsoft.com/dotnet/core/deploying/&quot;&gt;framework-dependent application&lt;/a&gt;. Until now, only &lt;a href=&quot;https://docs.microsoft.com/dotnet/core/deploying/&quot;&gt;self-contained applications&lt;/a&gt; had executables.&lt;/p&gt;
&lt;p&gt;You can expect the same things with these executables as you would other native executables, such as:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;You can double click on the executable to start the application.&lt;/li&gt;
&lt;li&gt;You can launch the application from a command prompt, using &lt;code&gt;myapp.exe&lt;/code&gt;, on Windows, and &lt;code&gt;./myapp&lt;/code&gt;, on Linux and macOS.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The executable that is generated as part of the build will match your operating system and CPU. For example, if you are on a Linux x64 machine, the executable will only work on that kind of machine, not on a Windows machine and not on a Linux ARM machine. That’s because the executables are native code (just like C++). If you want to target another machine type, you need to publish with a &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-publish&quot;&gt;runtime argument&lt;/a&gt;. You can continue to launch applications with the &lt;code&gt;dotnet&lt;/code&gt; command, and not use native executables, if you prefer.&lt;/p&gt;
&lt;h2&gt;Optimize your .NET Core apps with ReadyToRun images&lt;/h2&gt;
&lt;p&gt;You can improve the startup time of your .NET Core application by compiling your application assemblies as ReadyToRun (R2R) format. R2R is a form of ahead-of-time (AOT) compilation. It is a publish-time, opt-in feature in .NET Core 3.0.&lt;/p&gt;
&lt;p&gt;R2R binaries improve startup performance by reducing the amount of work the JIT needs to do as your application is loading. The binaries contain similar native code as what the JIT would produce, giving the JIT a bit of a vacation when performance matters most (at startup). R2R binaries are larger because they contain both intermediate language (IL) code, which is still needed for some scenarios, and the native version of the same code, to improve startup.&lt;/p&gt;
&lt;p&gt;To enable the ReadyToRun compilation:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Set the &lt;code&gt;PublishReadyToRun&lt;/code&gt; property to &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Publish using an explicit &lt;code&gt;RuntimeIdentifier&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Note: When the application assemblies get compiled, the native code produced is platform and architecture specific (which is why you have to specify a valid RuntimeIdentifier when publishing).&lt;/p&gt;
&lt;p&gt;Here’s an example:&lt;/p&gt;
&lt;div id=&quot;crayon-5d8968cbee579037796971&quot; class=&quot;crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate&quot; data-settings=&quot; minimize scroll-mouseover wrap&quot;&gt;



&lt;div class=&quot;crayon-main&quot;&gt;
&lt;table class=&quot;crayon-table&quot;&gt;&lt;tr class=&quot;crayon-row&quot;&gt;&lt;td class=&quot;crayon-nums&quot; data-settings=&quot;hide&quot;&gt;

&lt;/td&gt;
&lt;td class=&quot;crayon-code&quot;&gt;
&lt;div class=&quot;crayon-pre&quot;&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee579037796971-1&quot;&gt;&lt;span class=&quot;crayon-o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;crayon-e&quot;&gt;Project&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;Sdk&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;crayon-s&quot;&gt;&quot;Microsoft.NET.Sdk&quot;&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee579037796971-2&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;PropertyGroup&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee579037796971-3&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;OutputType&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;Exe&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;OutputType&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee579037796971-4&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;TargetFramework&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;netcoreapp3&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;crayon-cn&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;TargetFramework&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee579037796971-5&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;PublishReadyToRun&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;crayon-t&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;PublishReadyToRun&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee579037796971-6&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;PropertyGroup&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee579037796971-7&quot;&gt;&lt;span class=&quot;crayon-o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;Project&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And publish using the following command:&lt;/p&gt;
&lt;div id=&quot;crayon-5d8968cbee58c502938308&quot; class=&quot;crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate&quot; data-settings=&quot; minimize scroll-mouseover wrap&quot;&gt;



&lt;div class=&quot;crayon-main&quot;&gt;
&lt;table class=&quot;crayon-table&quot;&gt;&lt;tr class=&quot;crayon-row&quot;&gt;&lt;td class=&quot;crayon-nums&quot; data-settings=&quot;hide&quot;&gt;

&lt;/td&gt;
&lt;td class=&quot;crayon-code&quot;&gt;
&lt;div class=&quot;crayon-pre&quot;&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee58c502938308-1&quot;&gt;&lt;span class=&quot;crayon-e&quot;&gt;dotnet&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;publish&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;crayon-i&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;win&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;x64&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;crayon-i&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;crayon-i&quot;&gt;Release&lt;/span&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Note: The &lt;code&gt;RuntimeIdentifier&lt;/code&gt; can be set to another operating system or chip. It can also be set in the project file.&lt;/p&gt;
&lt;h2&gt;Assembly linking&lt;/h2&gt;
&lt;p&gt;The .NET core 3.0 SDK comes with a tool that can reduce the size of apps by analyzing IL and trimming unused assemblies. It is another publish-time opt-in feature in .NET Core 3.0.&lt;/p&gt;
&lt;p&gt;With .NET Core, it has always been possible to publish self-contained apps that include everything needed to run your code, without requiring .NET to be installed on the deployment target. In some cases, the app only requires a small subset of the framework to function and could potentially be made much smaller by including only the used libraries.&lt;/p&gt;
&lt;p&gt;We use the &lt;a href=&quot;https://github.com/mono/linker&quot;&gt;IL linker&lt;/a&gt; to scan the IL of your application to detect which code is actually required, and then trim unused framework libraries. This can significantly reduce the size of some apps. Typically, small tool-like console apps benefit the most as they tend to use fairly small subsets of the framework and are usually more amenable to trimming.&lt;/p&gt;
&lt;p&gt;To use the linker:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Set the &lt;code&gt;PublishTrimmed&lt;/code&gt; property to &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Publish using an explicit &lt;code&gt;RuntimeIdentifier&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Here’s an example:&lt;/p&gt;
&lt;div id=&quot;crayon-5d8968cbee59c237645980&quot; class=&quot;crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate&quot; data-settings=&quot; minimize scroll-mouseover wrap&quot;&gt;



&lt;div class=&quot;crayon-main&quot;&gt;
&lt;table class=&quot;crayon-table&quot;&gt;&lt;tr class=&quot;crayon-row&quot;&gt;&lt;td class=&quot;crayon-nums&quot; data-settings=&quot;hide&quot;&gt;

&lt;/td&gt;
&lt;td class=&quot;crayon-code&quot;&gt;
&lt;div class=&quot;crayon-pre&quot;&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee59c237645980-1&quot;&gt;&lt;span class=&quot;crayon-o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;crayon-e&quot;&gt;Project&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;Sdk&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;crayon-s&quot;&gt;&quot;Microsoft.NET.Sdk&quot;&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee59c237645980-2&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;PropertyGroup&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee59c237645980-3&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;OutputType&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;Exe&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;OutputType&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee59c237645980-4&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;TargetFramework&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;netcoreapp3&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;crayon-cn&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;TargetFramework&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee59c237645980-5&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;PublishTrimmed&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;crayon-t&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;PublishTrimmed&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee59c237645980-6&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;PropertyGroup&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee59c237645980-7&quot;&gt;&lt;span class=&quot;crayon-o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;Project&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And publish using the following command:&lt;/p&gt;
&lt;div id=&quot;crayon-5d8968cbee5ac808334611&quot; class=&quot;crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate&quot; data-settings=&quot; minimize scroll-mouseover wrap&quot;&gt;



&lt;div class=&quot;crayon-main&quot;&gt;
&lt;table class=&quot;crayon-table&quot;&gt;&lt;tr class=&quot;crayon-row&quot;&gt;&lt;td class=&quot;crayon-nums&quot; data-settings=&quot;hide&quot;&gt;

&lt;/td&gt;
&lt;td class=&quot;crayon-code&quot;&gt;
&lt;div class=&quot;crayon-pre&quot;&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee5ac808334611-1&quot;&gt;&lt;span class=&quot;crayon-e&quot;&gt;dotnet&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;publish&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;crayon-i&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;win&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;x64&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;crayon-i&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;crayon-i&quot;&gt;Release&lt;/span&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Note: The &lt;code&gt;RuntimeIdentifier&lt;/code&gt; can be set to another operating system or chip. It can also be set in the project file.&lt;/p&gt;
&lt;p&gt;The publish output will include a subset of the framework libraries, depending on what the application code calls. For a helloworld app, the linker reduces the size from ~68MB to ~28MB.&lt;/p&gt;
&lt;p&gt;Applications or frameworks (including ASP.NET Core and WPF) that use reflection or related dynamic features will often break when trimmed, because the linker doesn’t know about this dynamic behavior and usually can’t determine which framework types will be required for reflection at run time. To trim such apps, you need to tell the linker about any types needed by reflection in your code, and in any packages or frameworks that you depend on. Be sure to test your apps after trimming. We are working on improving this experience for .NET 5.&lt;/p&gt;
&lt;p&gt;For more information about the IL Linker, see the &lt;a href=&quot;https://aka.ms/dotnet-illink&quot;&gt;documentation&lt;/a&gt;, or visit the &lt;a href=&quot;https://github.com/mono/linker&quot;&gt;mono/linker&lt;/a&gt; repo.&lt;/p&gt;
&lt;p&gt;Note: In previous versions of .NET Core, &lt;a href=&quot;https://dotnet.myget.org/feed/dotnet-core/package/nuget/Illink.Tasks&quot;&gt;ILLink.Tasks&lt;/a&gt; was shipped as an external NuGet package and provided much of the same functionality. It is no longer supported – please update to the .NET Core 3.0 SDK and try the new experience!&lt;/p&gt;
&lt;p&gt;The linker and ReadyToRun compiler can be used for the same application. In general, the linker makes your application smaller, and then the ready-to-run compiler will make it a bit larger again, but with a significant performance win. It is worth testing in various configurations to understand the impact of each option.&lt;/p&gt;
&lt;h2&gt;Publishing single-file executables&lt;/h2&gt;
&lt;p&gt;You can now publish a single-file executable with &lt;code&gt;dotnet publish&lt;/code&gt;. This form of single EXE is effectively a self-extracting executable. It contains all dependencies, including native dependencies, as resources. At startup, it copies all dependencies to a temp directory, and loads them for there. It only needs to unpack dependencies once. After that, startup is fast, without any penalty.&lt;/p&gt;
&lt;p&gt;You can enable this publishing option by adding the &lt;code&gt;PublishSingleFile&lt;/code&gt; property to your project file or by adding a new switch on the commandline.&lt;/p&gt;
&lt;p&gt;To produce a self-contained single EXE application, in this case for 64-bit Windows:&lt;/p&gt;
&lt;div id=&quot;crayon-5d8968cbee5bc148005279&quot; class=&quot;crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate&quot; data-settings=&quot; minimize scroll-mouseover wrap&quot;&gt;



&lt;div class=&quot;crayon-main&quot;&gt;
&lt;table class=&quot;crayon-table&quot;&gt;&lt;tr class=&quot;crayon-row&quot;&gt;&lt;td class=&quot;crayon-nums&quot; data-settings=&quot;hide&quot;&gt;

&lt;/td&gt;
&lt;td class=&quot;crayon-code&quot;&gt;
&lt;div class=&quot;crayon-pre&quot;&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee5bc148005279-1&quot;&gt;&lt;span class=&quot;crayon-e&quot;&gt;dotnet&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;publish&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;crayon-i&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;win10&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;x64&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;PublishSingleFile&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;crayon-t&quot;&gt;true&lt;/span&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Note: The &lt;code&gt;RuntimeIdentifier&lt;/code&gt; can be set to another operating system or chip. It can also be set in the project file.&lt;/p&gt;
&lt;p&gt;See &lt;a href=&quot;https://github.com/dotnet/core-setup/pull/5286&quot;&gt;Single file bundler&lt;/a&gt; for more information.&lt;/p&gt;
&lt;p&gt;Assembly trimmer, ahead-of-time compilation (via crossgen) and single file bundling are all new features in .NET Core 3.0 that can be used together or separately.&lt;/p&gt;
&lt;p&gt;We expect that some of you will prefer single exe provided by an ahead-of-time compiler, as opposed to the self-extracting-executable approach that we are providing in .NET Core 3.0. The ahead-of-time compiler approach will be provided as part of the .NET 5 release.&lt;/p&gt;
&lt;h2&gt;dotnet build now copies dependencies&lt;/h2&gt;
&lt;p&gt;dotnet build now copies NuGet dependencies for your application from the NuGet cache to your build output folder during the build operation. Until this release,those dependencies were only copied as part of dotnet publish. This change allows you to xcopy your build output to different machines.&lt;/p&gt;
&lt;p&gt;There are some operations, like linking and razor page publishing that require publishing.&lt;/p&gt;
&lt;h2&gt;.NET Core Tools — local installation&lt;/h2&gt;
&lt;p&gt;.NET Core tools has been updated to allow local installation. They have advantages over &lt;a href=&quot;https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/&quot;&gt;global tools&lt;/a&gt;, which were added in .NET Core 2.1.&lt;/p&gt;
&lt;p&gt;Local installation enables the following:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Limit the scope by which a tool can be used.&lt;/li&gt;
&lt;li&gt;Always use a specific version of the tool, which might differ from a globally-installed tool or another local installation. This is based on the version in the local tools manifest file.&lt;/li&gt;
&lt;li&gt;Launched with &lt;code&gt;dotnet&lt;/code&gt;, like in &lt;code&gt;dotnet mytool&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Note: See &lt;a href=&quot;https://github.com/dotnet/cli/issues/10288&quot;&gt;Local Tools Early Preview Documentation&lt;/a&gt; for more information.&lt;/p&gt;
&lt;h2&gt;.NET Core SDK installers will now Upgrade in Place&lt;/h2&gt;
&lt;p&gt;The .NET Core SDK MSI installers for Windows will start upgrading patch versions in place. This will reduce the number of SDKs that are installed on both developer and production machines.&lt;/p&gt;
&lt;p&gt;The upgrade policy will specifically target .NET Core SDK feature bands. Feature bands are defined in hundreds groups in the patch section of the version number. For example, &lt;code&gt;3.0.101&lt;/code&gt; and &lt;code&gt;3.0.201&lt;/code&gt; are versions in two different feature bands while &lt;code&gt;3.0.101&lt;/code&gt; and &lt;code&gt;3.0.199&lt;/code&gt; are in the same feature band.&lt;/p&gt;
&lt;p&gt;This means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK 3.0.101 will not be removed. In that situation, .NET Core SDK 3.0.200 will still be used by default, but .NET Core SDK 3.0.101 (or higher .1xx versions) will still be usable if it is configured for use via &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/core/tools/global-json&quot;&gt;global.json&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This approach aligns with the behavior of &lt;code&gt;global.json&lt;/code&gt;, which allows roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use.&lt;/p&gt;
&lt;p&gt;For more information, please check out:&lt;/p&gt;
&lt;h2&gt;.NET Core SDK Size Improvements&lt;/h2&gt;
&lt;p&gt;The .NET Core SDK is significantly smaller with .NET Core 3.0. The primary reason is that we changed the way we construct the SDK, by moving to purpose-built “packs” of various kinds (reference assemblies, frameworks, templates). In previous versions (including .NET Core 2.2), we constructed the SDK from NuGet packages, which included many artifacts that were not required and wasted a lot of space.&lt;/p&gt;
&lt;p&gt;.NET Core 3.0 SDK Size (size change in brackets)&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Operating System&lt;/th&gt;
&lt;th&gt;Installer Size (change)&lt;/th&gt;
&lt;th&gt;On-disk Size (change)&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Windows&lt;/td&gt;
&lt;td&gt;164MB (-440KB; 0%)&lt;/td&gt;
&lt;td&gt;441MB (-968MB; -68.7%)&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Linux&lt;/td&gt;
&lt;td&gt;115MB (-55MB; -32%)&lt;/td&gt;
&lt;td&gt;332MB (-1068MB; -76.2%)&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;macOS&lt;/td&gt;
&lt;td&gt;118MB (-51MB; -30%)&lt;/td&gt;
&lt;td&gt;337MB (-1063MB; -75.9%)&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;The size improvements for Linux and macOS are dramatic. The improvement for Windows is smaller because we have added WPF and Windows Forms as part of .NET Core 3.0. It’s amazing that we added WPF and Windows Forms in 3.0 and the installer is still (a little bit) smaller.&lt;/p&gt;
&lt;p&gt;You can see the same benefit with &lt;a href=&quot;https://hub.docker.com/_/microsoft-dotnet-core-sdk&quot;&gt;.NET Core SDK Docker images&lt;/a&gt; (here, limited to x64 Debian and Alpine).&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Distro&lt;/th&gt;
&lt;th&gt;2.2 Size&lt;/th&gt;
&lt;th&gt;3.0 Size&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Debian&lt;/td&gt;
&lt;td&gt;1.74GB&lt;/td&gt;
&lt;td&gt;706MB&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Alpine&lt;/td&gt;
&lt;td&gt;1.48GB&lt;/td&gt;
&lt;td&gt;422MB&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;You can see how we calculated these file sizes in &lt;a href=&quot;https://gist.github.com/richlander/9dbb7cf0a9a53bfd161903ba4f20a1f6&quot;&gt;.NET Core 3.0 SDK Size Improvements&lt;/a&gt;. Detailed instructions are provided so that you can run the same tests in your own environment.&lt;/p&gt;
&lt;h2&gt;Docker Publishing Update&lt;/h2&gt;
&lt;p&gt;Microsoft teams are now publishing container images to the &lt;a href=&quot;https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/&quot;&gt;Microsoft Container Registry (MCR)&lt;/a&gt;. There are two primary reasons for this change:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.&lt;/li&gt;
&lt;li&gt;Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;On the .NET team, we are now publishing all &lt;a href=&quot;https://hub.docker.com/_/microsoft-dotnet-core&quot;&gt;.NET Core images&lt;/a&gt; to MCR. As you can see from the links (if you click on it), we continue to have “home pages” on Docker Hub. We intend for that to continue indefinitely. MCR does not offer such pages, but relies of public registries, like Docker Hub, to provide users with image-related information.&lt;/p&gt;
&lt;p&gt;The links to our old repos, such as &lt;a href=&quot;https://hub.docker.com/r/microsoft/dotnet&quot;&gt;microsoft/dotnet&lt;/a&gt; and &lt;a href=&quot;https://hub.docker.com/r/microsoft/dotnet-nightly&quot;&gt;microsoft/dotnet-nightly&lt;/a&gt; now forward to the new locations. The images that existed at those locations still exists and will not be deleted.&lt;/p&gt;
&lt;p&gt;We will continue servicing the floating tags in the old repos for the supported life of the various .NET Core versions. For example, &lt;code&gt;2.1-sdk&lt;/code&gt;, &lt;code&gt;2.2-runtime&lt;/code&gt;, and &lt;code&gt;latest&lt;/code&gt; are examples of floating tags that will be serviced. A three-part version tag like &lt;code&gt;2.1.2-sdk&lt;/code&gt; will not be serviced, which was already the case. We will only be supporting .NET Core 3.0 images in MCR.&lt;/p&gt;
&lt;p&gt;For example, the correct tag string to pull the 3.0 SDK image now looks like the following:&lt;/p&gt;
&lt;div id=&quot;crayon-5d8968cbee5cd941729695&quot; class=&quot;crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate&quot; data-settings=&quot; minimize scroll-mouseover wrap&quot;&gt;



&lt;div class=&quot;crayon-main&quot;&gt;
&lt;table class=&quot;crayon-table&quot;&gt;&lt;tr class=&quot;crayon-row&quot;&gt;&lt;td class=&quot;crayon-nums&quot; data-settings=&quot;hide&quot;&gt;

&lt;/td&gt;
&lt;td class=&quot;crayon-code&quot;&gt;
&lt;div class=&quot;crayon-pre&quot;&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee5cd941729695-1&quot;&gt;&lt;span class=&quot;crayon-v&quot;&gt;mcr&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;microsoft&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;dotnet&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;sdk&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;crayon-cn&quot;&gt;3.0&lt;/span&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The new MCR string will be used with both &lt;code&gt;docker pull&lt;/code&gt; and in Dockerfile &lt;code&gt;FROM&lt;/code&gt; statements.&lt;/p&gt;
&lt;p&gt;See &lt;a href=&quot;https://devblogs.microsoft.com/dotnet/using-net-and-docker-together-dockercon-2019-update/&quot;&gt;.NET Core Images now available via Microsoft Container Registry&lt;/a&gt; for more information.&lt;/p&gt;
&lt;h2&gt;SDK Docker Images Contain PowerShell Core&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/powershell/powershell&quot;&gt;PowerShell Core&lt;/a&gt; has been added to the .NET Core SDK Docker container images, per &lt;a href=&quot;https://github.com/dotnet/dotnet-docker/issues/360&quot;&gt;requests from the community&lt;/a&gt;. PowerShell Core is a cross-platform (Windows, Linux, and macOS) automation and configuration tool/framework that works well with your existing tools and is optimized for dealing with structured data (e.g. JSON, CSV, XML, etc.), REST APIs, and object models. It includes a command-line shell, an associated scripting language and a framework for processing cmdlets.&lt;/p&gt;
&lt;p&gt;You can try out PowerShell Core, as part of the .NET Core SDK container image, by running the following Docker command:&lt;/p&gt;
&lt;div id=&quot;crayon-5d8968cbee5de016929004&quot; class=&quot;crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate&quot; data-settings=&quot; minimize scroll-mouseover wrap&quot;&gt;



&lt;div class=&quot;crayon-main&quot;&gt;
&lt;table class=&quot;crayon-table&quot;&gt;&lt;tr class=&quot;crayon-row&quot;&gt;&lt;td class=&quot;crayon-nums&quot; data-settings=&quot;hide&quot;&gt;

&lt;/td&gt;
&lt;td class=&quot;crayon-code&quot;&gt;
&lt;div class=&quot;crayon-pre&quot;&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee5de016929004-1&quot;&gt;&lt;span class=&quot;crayon-e&quot;&gt;docker&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;crayon-e&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;mcr&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;microsoft&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;dotnet&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;sdk&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;crayon-cn&quot;&gt;3.0&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;pwsh&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;crayon-i&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;Write&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;crayon-i&quot;&gt;Host&lt;/span&gt; &lt;span class=&quot;crayon-s&quot;&gt;&quot;Hello Powershell&quot;&lt;/span&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;There are two main scenarios that having PowerShell inside the .NET Core SDK container image enables, which were not otherwise possible:&lt;/p&gt;
&lt;p&gt;Example syntax for launching PowerShell for a (volume-mounted) containerized build:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;docker run -it -v c:\myrepo:/myrepo -w /myrepo mcr.microsoft.com/dotnet/core/sdk:3.0 pwsh build.ps1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker run -it -v c:\myrepo:/myrepo -w /myrepo mcr.microsoft.com/dotnet/core/sdk:3.0 ./build.ps1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;For the second example to work, on Linux, the &lt;code&gt;.ps1&lt;/code&gt; file needs to have the following pattern, and needs to be formatted with Unix (LF) not Windows (CRLF) line endings:&lt;/p&gt;
&lt;div id=&quot;crayon-5d8968cbee611936100446&quot; class=&quot;crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate&quot; data-settings=&quot; minimize scroll-mouseover wrap&quot;&gt;



&lt;div class=&quot;crayon-main&quot;&gt;
&lt;table class=&quot;crayon-table&quot;&gt;&lt;tr class=&quot;crayon-row&quot;&gt;&lt;td class=&quot;crayon-nums&quot; data-settings=&quot;hide&quot;&gt;

&lt;/td&gt;
&lt;td class=&quot;crayon-code&quot;&gt;
&lt;div class=&quot;crayon-pre&quot;&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee611936100446-1&quot;&gt;&lt;span class=&quot;crayon-p&quot;&gt;#!/usr/bin/env pwsh&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5d8968cbee611936100446-2&quot;&gt;&lt;span class=&quot;crayon-v&quot;&gt;Write&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;crayon-i&quot;&gt;Host&lt;/span&gt; &lt;span class=&quot;crayon-s&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If you are new to PowerShell and would like to learn more, we recommend reviewing the &lt;a href=&quot;https://github.com/PowerShell/PowerShell/tree/master/docs/learning-powershell&quot;&gt;getting started&lt;/a&gt; documentation.&lt;/p&gt;
&lt;p&gt;Note: PowerShell Core is now available as part of &lt;a href=&quot;https://hub.docker.com/_/microsoft-dotnet-core-sdk/&quot;&gt;.NET Core 3.0 SDK container images&lt;/a&gt;. It is not part of the &lt;a href=&quot;https://dotnet.microsoft.com/download/dotnet-core/3.0&quot;&gt;.NET Core 3.0 SDK&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Red Hat Support&lt;/h3&gt;
&lt;p&gt;In April 2015, we announced that .NET Core would be coming to Red Hat Enterprise Linux. Through an excellent engineering partnership with Red Hat, .NET Core 1.0 appeared as a component available in the Red Hat Software Collections, June 2016. Working with Red Hat engineers, we have learned (and continue to learn!) much about the releasing software to the Linux community.&lt;/p&gt;
&lt;p&gt;Over the last four years, Red Hat has shipped many .NET Core updates and significant releases, such as 2.1 and 2.2, on the same day as the Microsoft. With .NET Core 2.2, Red Hat expanded their .NET Core offerings to include OpenShift platforms. With the release of RHEL 8, we are excited to have .NET Core 2.1 and soon, 3.0, available in the Red Hat Application Streams.&lt;/p&gt;
&lt;h2&gt;Closing&lt;/h2&gt;
&lt;p&gt;.NET Core 3.0 is a major new release of .NET Core, and includes a vast set of improvements. We recommend that you start adopting .NET Core 3.0 as soon as you can. It greatly improves .NET Core in many ways, like the massive reduction in size of the SDK, and by greatly improving support for key scenarios like containers and Windows desktop applications. There are also many small improvements that were not included in this post, that you are sure to benefit from over time.&lt;/p&gt;
&lt;p&gt;Please share your feedback with us, either in the coming days, weeks or months. We hope you enjoy it. We had a lot of fun making it for you.&lt;/p&gt;
&lt;p&gt;If you still want to read more, the following recent posts are recommended reading:&lt;/p&gt;


&lt;div class=&quot;authorinfoarea&quot;&gt;
&lt;div&gt;&lt;img src=&quot;https://secure.gravatar.com/avatar/37f91ebe219df737566a4dc7cdd53b68?s=96&amp;amp;d=mm&amp;amp;r=g&quot; width=&quot;96&quot; height=&quot;96&quot; alt=&quot;Avatar&quot; class=&quot;avatar avatar-96 wp-user-avatar wp-user-avatar-96 photo avatar-default&quot;/&gt;&lt;/div&gt;

&lt;/div&gt;
</description>
<pubDate>Mon, 23 Sep 2019 16:41:41 +0000</pubDate>
<dc:creator>hmexx</dc:creator>
<og:type>article</og:type>
<og:title>Announcing .NET Core 3.0 | .NET Blog</og:title>
<og:description>Announcing .NET Core 3.0 We’re excited to announce the release of .NET Core 3.0. It includes many improvements, including adding Windows Forms and WPF, adding new JSON APIs, support for ARM64 and improving performance across the board. C# 8 is also part of this release,</og:description>
<og:url>https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0/</og:url>
<og:image>https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2019/02/swimlane-cross-platform.png</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0/</dc:identifier>
</item>
<item>
<title>Is the era of the $100 graphing calculator coming to an end?</title>
<link>https://thehustle.co/graphing-calculators-expensive/</link>
<guid isPermaLink="true" >https://thehustle.co/graphing-calculators-expensive/</guid>
<description>&lt;p&gt;Texas Instrument’s best-selling graphing calculator, the TI-84, is a woefully outdated piece of technology.&lt;/p&gt;
&lt;p&gt;Since its debut in 2004, its specs and components have remained virtually unchanged. With 24 kilobytes of RAM, a 96×64 pixel screen, and a power system that still relies on 4 AAA batteries, it has been usurped by hundreds of modern handheld devices. While the cost of its components has dramatically decreased, its price ($150 MSRP) has not.&lt;/p&gt;
&lt;p&gt;Yet, for millions of middle school and high school students around America, the graphing calculator is still a required standard — and TI controls an estimated 80% of the $300m+ market.&lt;/p&gt;
&lt;p&gt;An obsolete piece of technology has managed to maintain a stranglehold on an increasingly tech-savvy education market. But it appears that the rise of new, free-to-use technology is starting to chip away at this empire.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;How TI cornered the calculator market&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;In the late 1980s, electronics companies began to see a space in the education market for a calculator that could graph equations.&lt;/p&gt;
&lt;p&gt;Though Casio (1985) and Sharp (1986) were the first to market, it wasn’t until 1990, when Texas Instruments released the TI-81, that graphing calculators really began to hit the mainstream.&lt;/p&gt;
&lt;p&gt;TI, a semiconductor giant, &lt;a href=&quot;https://www.newspapers.com/image/179824571/&quot;&gt;sensed&lt;/a&gt; “an opportunity to provide some inexpensive technology that students could use every day.” But there was a problem: At the time, most students were perfectly fine with drawing graphs on paper and using simpler handheld calculators. Educators were rightfully wary of change — especially change that wasn’t yet proven to improve student performance.&lt;/p&gt;
&lt;img src=&quot;https://thehustle.co/wp-content/uploads/2019/09/ti81.jpg&quot; alt=&quot;&quot; class=&quot;wp-image-16077&quot; width=&quot;2500&quot; height=&quot;505&quot;/&gt;&lt;em&gt;An early TI-81 in use (YouTube/ David Hays)&lt;/em&gt;
&lt;p&gt;So, over a 20-year period, TI set out to manufacture demand by making its calculators mandated classroom tools.&lt;/p&gt;
&lt;p&gt;The company established partnerships with big textbook companies that integrated TI-specific exercises (complete with screenshots of buttons) into classroom curricula. It sought approval for standardized test use from administrators like the College Board. And every time a competing tech innovation came along, it lobbied to maintain its perch atop the parabola.&lt;/p&gt;
&lt;p&gt;According to &lt;a href=&quot;https://www.opensecrets.org/lobby/clientagns.php?id=D000000722&amp;amp;year=2005&quot;&gt;Open Secrets&lt;/a&gt; and &lt;a href=&quot;https://projects.propublica.org/represent/lobbying/r/300994872&quot;&gt;ProPublica&lt;/a&gt; data, Texas Instruments paid lobbyists to hound the Department of Education every year from 2005 to 2009 — right around the time when mobile technology and apps were becoming more of a threat.&lt;/p&gt;
&lt;p&gt;The company campaigned against devices with touchscreens, internet connection, and QWERTY keyboards. In one instance, it even lobbied the Texas legislature to make it &lt;a href=&quot;https://www.alternet.org/2013/04/why-texas-instruments-lobbying-schools-make-algebra-ii-mandatory/&quot;&gt;mandatory&lt;/a&gt; for all students to take Algebra II — a course that often requires the use of a TI graphing calculator.&lt;/p&gt;
&lt;p&gt;“A lot of [TI’s] graphing calculator success was due to really aggressive lobbying for certain policies,” a source in the education space told &lt;em&gt;The Hustle&lt;/em&gt;. “They made it so that that the types of things you were allowed to bring into a test were essentially limited to their devices.”&lt;/p&gt;
&lt;p&gt;At the same time, TI set up a robust teacher training program, launched a help hotline (1-800-TI-CARES), and organized conferences with hands-on demonstrations.&lt;/p&gt;
&lt;p&gt;By 2000, TI had sold 20m graphing calculators at $100+ a pop — enough for 40% of America’s high-school students. This ubiquity led &lt;a href=&quot;https://www.newspapers.com/image/110420811&quot;&gt;&lt;em&gt;The New York Times&lt;/em&gt;&lt;/a&gt; to dub it the “greatest technological advancement in math classrooms in a generation.”&lt;/p&gt;
&lt;p&gt;But why, 20 years and many tech leaps later, are students still forced to buy these calculators? And why are they still prohibitively expensive?&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Monopolies set their own prices&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;TI now enjoys an estimated 80% market share of the international graphing calculator market. &lt;/p&gt;
&lt;p&gt;Its bestseller, the TI-84 Plus, was first released in 2004 for around $120. Since then, the cost of electronic components has dramatically decreased, along with TI’s R&amp;amp;D costs — yet the TI-84 Plus still sells for nearly the &lt;a href=&quot;https://www.amazon.com/Texas-Instruments-TI-84-Graphics-Calculator/dp/B0001EMM0G&quot;&gt;same price&lt;/a&gt;.&lt;/p&gt;
&lt;img src=&quot;https://thehustle.co/wp-content/uploads/2019/09/ti-85.jpg&quot; alt=&quot;&quot; class=&quot;wp-image-16076&quot; width=&quot;2500&quot; height=&quot;439&quot;/&gt;&lt;em&gt;The TI-84 Plus is still one of TI’s best-selling calculators (Amazon / The Hustle)&lt;/em&gt;
&lt;p&gt;One analyst &lt;a href=&quot;https://www.washingtonpost.com/news/innovations/wp/2014/09/02/the-unstoppable-ti-84-plus-how-an-outdated-calculator-still-holds-a-monopoly-on-classrooms/&quot;&gt;placed&lt;/a&gt; the cost to produce a TI-84 Plus at around $15-20, meaning TI sells it for a profit margin of nearly 50% — far above the electronics industry’s &lt;a href=&quot;https://www.investopedia.com/ask/answers/051215/what-profit-margin-average-company-electronics-sector.asp&quot;&gt;average margin&lt;/a&gt; of 6.7%.&lt;/p&gt;
&lt;p&gt;Peter Balyta, the president of TI Education Technology, defends his calculators’ price point: “A TI calculator is a one-time investment in a student’s future that takes them from middle school math and science classes through college, as well as into the important exams they take along the way,” he says.&lt;/p&gt;
&lt;p&gt;Some students don’t see it this way.&lt;/p&gt;
&lt;p&gt;“It basically sucks,” says Marcus Grant, an 11th grader currently taking a pre-calculus course. “It was really expensive for my family. There are cheaper alternatives available, but my teacher makes [the TI calculator] mandatory and there’s no other option.”&lt;/p&gt;
&lt;p&gt;Many math teachers make graphing calculators mandatory; others strongly suggest that students purchase one. This is partly because TI has benefitted from anti-smartphone laws passed in certain districts.&lt;/p&gt;
&lt;p&gt;“New York state does not allow computer or phone use on Regents exams, only approved handhelds,” says Dina Kushnir, the Math Department Chair at Fayetteville-Manlius Central Schools. “So we have no choice but to equip students to use some sort of handheld device effectively and efficiently for high-stakes math assessments.”&lt;/p&gt;
&lt;p&gt;After years of training and support, other teachers are simply too familiar with TI calculators to switch to alternate tools, like free smartphone apps.&lt;/p&gt;
&lt;p&gt;“The process of approval [for new technologies] hinges on teacher acceptance of the technology and their willingness to integrate it into the classroom,” says Lisa Ellermann, a Math Consultant at Texas Region 8 Education Service Center. The training and support for TI calculators, she adds, outranks that offered for new tech.&lt;/p&gt;
&lt;img src=&quot;https://thehustle.co/wp-content/uploads/2019/09/calcs.jpg&quot; alt=&quot;&quot; class=&quot;wp-image-16075&quot; width=&quot;2500&quot; height=&quot;491&quot;/&gt;&lt;em&gt;Photo by Robert Daemmrich Photography Inc/Corbis via Getty Images&lt;/em&gt;
&lt;p&gt;Cheaper options have come along (Casio has offered &lt;a href=&quot;https://www.wsj.com/articles/SB125244891686393811&quot;&gt;$50&lt;/a&gt; calculators that perform the same basic tasks) but TI was too entrenched in the system to compete with.&lt;/p&gt;
&lt;p&gt;Analysts have long &lt;a href=&quot;https://www.newspapers.com/image/274347128/?terms=%22texas%2Binstruments%22%2B%22graphing%2Bcalculator%22&quot;&gt;projected&lt;/a&gt; that the “specialized nature” of the graphing calculator would eventually be usurped by more generalized machines, like phones or computers.&lt;/p&gt;
&lt;p&gt;That prediction hasn’t yet come to fruition. But recently, things are starting to change.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;The battle to make graphing calculators free&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;While tutoring low-income students in 2011, a Yale math grad named Eli Luberoff began to notice a “horrible inequity” in the system.&lt;/p&gt;
&lt;p&gt;“A lot of families simply couldn’t afford to spend $100 on a calculator,” he says, “and it was creating a huge imbalance in access to math tools.”&lt;/p&gt;
&lt;p&gt;So, Luberoff created Desmos, a free graphing calculator application for desktop and mobile. He didn’t expect it to turn into a company — but today, more than 40m students and teachers use it.&lt;/p&gt;
&lt;p&gt;“Our business model is the exact opposite of TI’s,” says Luberoff: “Their model has always been to give [tech] away for free to textbook companies and force families to buy it at a premium price; our model is to give [tech] away for &lt;em&gt;free&lt;/em&gt; to students, and charge textbook companies to integrate it.”&lt;/p&gt;
&lt;p&gt;Large middle and high school math textbook publishers like McGraw Hill have recently licensed technology from Desmos. Pages that once contained screenshots of TI-84 buttons now direct students to interactive exercises on the free Desmos app. As tests increasingly move from graph paper to school-provided computers, Desmos has also found success in the digital assessment space. &lt;/p&gt;
&lt;img src=&quot;https://thehustle.co/wp-content/uploads/2019/09/desmos.jpg&quot; alt=&quot;&quot; class=&quot;wp-image-16074&quot; width=&quot;2500&quot; height=&quot;443&quot;/&gt;&lt;em&gt;A student using the Desmos app, with a TI calculator in the background (&lt;/em&gt;&lt;a href=&quot;https://mscantumath.weebly.com/algebra/point-slope-form-practice-with-dice-and-desmos&quot;&gt;&lt;em&gt;Math With Ms. Cantu&lt;/em&gt;&lt;/a&gt;&lt;em&gt;)&lt;/em&gt;
&lt;p&gt;Gaining trust in the classroom, however, has been an uphill battle.&lt;/p&gt;
&lt;p&gt;“You’re trying to convince teachers who’ve been teaching with TI for 20 years to try something new,” says Luberoff. “It’s hard enough to be a teacher without dealing with technological change. But most understand our tool is more equitable. It’s modern technology. It’s what kids use now.”&lt;/p&gt;
&lt;p&gt;But TI says there are several problems with free alternatives like Desmos.&lt;/p&gt;
&lt;p&gt;“Schools often have to pay for IT support and consistent, reliable broadband internet, in addition to purchasing tablets and laptops to run the apps,” says Balyta. “Using tools that require internet access is especially challenging for schools and districts in rural areas, where infrastructure is limited.”&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Is change on the horizon?&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Today, 90% of teachers in the US still use handheld calculators like the TI-84 as their primary math tool in the classroom. Only 6% use software or apps as their primary tool.&lt;/p&gt;
&lt;p&gt;When asked if competing technology has impacted calculator sales, TI cited a TI-funded study showing that calculator usage has “remained consistent.”&lt;/p&gt;
&lt;p&gt;Another source told &lt;em&gt;The Hustle&lt;/em&gt; that graphing calculator sales have seen a 15% YoY decline in recent years — a trend that free alternatives like Desmos may be at least partially responsible for.&lt;/p&gt;
&lt;p&gt;In its &lt;a href=&quot;https://investor.ti.com/static-files/c442d3c4-74a7-4f93-8c7b-58159bca07ef&quot;&gt;annual reports&lt;/a&gt;, TI wraps calculator revenue into a larger category (“Other”), which includes additional products. Since 2014, this category has seen a 35% decline, from $2.2B to $1.4B.&lt;/p&gt;
&lt;p&gt;It is unclear how much of this decline can be attributed specifically to calculators. But it’s an indicator that the devices may not be selling like they used to.&lt;/p&gt;
&lt;img src=&quot;https://thehustle.co/wp-content/uploads/2019/09/grapgh.jpg&quot; alt=&quot;&quot; class=&quot;wp-image-16073&quot; width=&quot;2500&quot; height=&quot;502&quot;/&gt;&lt;em&gt;The Hustle&lt;/em&gt;
&lt;p&gt;As a company that has been on the forefront of new technologies for decades, it’s likely that TI understands its calculator kingdom will eventually cede to new innovations. And when this does happen, it won’t be &lt;em&gt;that&lt;/em&gt; crushing: Calculators make up only a tiny fraction of TI’s $15.8B annual revenue.&lt;/p&gt;
&lt;p&gt;“15 years ago, the TI-84 was an amazing device with a huge benefit to teachers and students,” says Luberoff. “Now, it’s time for their empire to cede way.”&lt;br/&gt;&lt;/p&gt;

&lt;h2&gt;Love this story?&lt;/h2&gt;
&lt;p&gt;You should check out our new premium publication called &lt;a href=&quot;http://trends.co/?utm_source=thehustleco&amp;amp;medium=blog&amp;amp;utm_campaign=sunday-story&quot;&gt;Trends&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We’ve hired a team of journalists, entrepreneurs, and data scientists to crawl millions of data points and interview industry leaders to find gaps in the market. And each week we reveal our findings in a newsletter update.&lt;/p&gt;
&lt;p&gt;We’ve also created a private community for subscribers and the people we interview, where entrepreneurs and experts pick apart ideas and discuss the merits of others’ strategies. &lt;a href=&quot;http://trends.co/?utm_source=thehustleco&amp;amp;medium=blog&amp;amp;utm_campaign=sunday-story&quot;&gt;Click here to learn more.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
&lt;h3&gt;Share and discuss&lt;/h3&gt;
&lt;/p&gt;

&lt;br clear=&quot;all&quot;/&gt;
&lt;div readability=&quot;6.44&quot;&gt;
&lt;hr/&gt;&lt;div readability=&quot;8.28&quot;&gt;&lt;a href=&quot;https://thehustle.co/&quot; onclick=&quot;ga('send', 'event', 'nav', 'advertorial', 'ps');&quot;&gt;Sign up here&lt;/a&gt; for our daily news email to get all the non-political news you never knew you needed. All it takes is 5 minutes and BOOM, you're smarter.&lt;/div&gt;
&lt;br clear=&quot;all&quot;/&gt;&lt;/div&gt;
</description>
<pubDate>Mon, 23 Sep 2019 16:35:51 +0000</pubDate>
<dc:creator>prostoalex</dc:creator>
<og:type>article</og:type>
<og:title>Is the era of the $100+ graphing calculator coming to an end?</og:title>
<og:description>Texas Instruments has enjoyed a near-monopoly on graphing calculators for nearly three decades. But new technology may be threatening the company’s empire.</og:description>
<og:url>https://thehustle.co/graphing-calculators-expensive/</og:url>
<og:image>https://thehustle.co/wp-content/uploads/2019/09/share-3.jpg</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://thehustle.co/graphing-calculators-expensive/</dc:identifier>
</item>
<item>
<title>Gridgarden: A cool game to learn CSS Grid</title>
<link>http://www.cssgridgarden.com</link>
<guid isPermaLink="true" >http://www.cssgridgarden.com</guid>
<description>&lt;div class=&quot;header&quot;&gt;
        
        &lt;div id=&quot;level-counter&quot;&gt;
          &lt;span class=&quot;arrow left&quot;&gt;◀&lt;/span&gt;
          &lt;span id=&quot;level-indicator&quot;&gt;
            &lt;span id=&quot;labelLevel&quot; class=&quot;translate&quot;&gt;Level&lt;/span&gt;
            &lt;span class=&quot;current&quot;&gt;1&lt;/span&gt;
            &lt;span id=&quot;labelOf&quot; class=&quot;translate&quot;&gt;of&lt;/span&gt;
            &lt;span class=&quot;total&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;caret&quot;&gt;▾&lt;/span&gt;
          &lt;/span&gt;
          &lt;span class=&quot;arrow right&quot;&gt;▶&lt;/span&gt;
          &lt;div id=&quot;levelsWrapper&quot; class=&quot;tooltip&quot;&gt;
            
            &lt;p&gt;Reset&lt;/p&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;&lt;div id=&quot;editor&quot;&gt;
        &lt;div id=&quot;css&quot;&gt;
          &lt;p&gt;1&lt;br/&gt;2&lt;br/&gt;3&lt;br/&gt;4&lt;br/&gt;5&lt;br/&gt;6&lt;br/&gt;7&lt;br/&gt;8&lt;br/&gt;9&lt;br/&gt;10&lt;br/&gt;11&lt;br/&gt;12&lt;br/&gt;13&lt;br/&gt;14&lt;/p&gt;
          &lt;pre id=&quot;before&quot;/&gt;
          &lt;textarea id=&quot;code&quot; autofocus=&quot;&quot;/&gt;&lt;pre id=&quot;after&quot;/&gt;
        &lt;/div&gt;
        &lt;button id=&quot;next&quot; class=&quot;translate&quot;&gt;Next&lt;/button&gt;
      &lt;/div&gt;
      &lt;div id=&quot;share&quot; readability=&quot;0.42&quot;&gt;
        &lt;a class=&quot;next flexboxfroggy&quot; href=&quot;https://codepip.com/games/flexbox-froggy/&quot;&gt;
          &lt;p&gt;
            &lt;button&gt;Flexbox Froggy&lt;/button&gt;
          &lt;/p&gt;
        &lt;/a&gt;
        &lt;a class=&quot;next treehouse&quot; href=&quot;http://treehouse.7eer.net/c/371033/228915/3944?subId1=flexboxfroggy&quot;&gt;
          &lt;p&gt;
            &lt;button&gt;Treehouse&lt;/button&gt;
          &lt;/p&gt;
        &lt;/a&gt;
        &lt;p class=&quot;social&quot;&gt;
          &lt;span id=&quot;tweet&quot;&gt;
            &lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot; data-url=&quot;http://cssgridgarden.com&quot; data-via=&quot;playcodepip&quot; data-text=&quot;I just beat Grid Garden, a game for learning CSS grid layout!&quot;&gt;Tweet&lt;/a&gt;
            &lt;a href=&quot;https://twitter.com/playcodepip&quot; class=&quot;twitter-follow-button&quot; data-show-count=&quot;false&quot;&gt;Follow @playcodepip&lt;/a&gt;
          &lt;/span&gt;
          &lt;span class=&quot;fb-like&quot; data-href=&quot;http://cssgridgarden.com&quot; data-layout=&quot;button_count&quot; data-action=&quot;like&quot; data-show-faces=&quot;true&quot; data-share=&quot;true&quot;/&gt;
        &lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;credits&quot;&gt;
        &lt;span id=&quot;labelFooter&quot; class=&quot;translate&quot;&gt;Grid Garden is created by&lt;/span&gt;
        &lt;a href=&quot;https://codepip.com&quot;&gt;Codepip&lt;/a&gt; •
        &lt;a href=&quot;https://github.com/thomaspark/gridgarden/&quot;&gt;GitHub&lt;/a&gt; •
        &lt;a href=&quot;https://twitter.com/playcodepip&quot;&gt;Twitter&lt;/a&gt; •
        &lt;span id=&quot;language&quot;&gt;
          &lt;span id=&quot;languageActive&quot; class=&quot;toggle translate&quot;&gt;English&lt;/span&gt;
          &lt;span class=&quot;tooltip&quot;&gt;
            &lt;a href=&quot;http://cssgridgarden.com/#en&quot;&gt;English&lt;/a&gt;
            &lt;a href=&quot;http://cssgridgarden.com/#es&quot;&gt;Español&lt;/a&gt;
            &lt;a href=&quot;http://cssgridgarden.com/#fr&quot;&gt;Français&lt;/a&gt;
            &lt;a href=&quot;http://cssgridgarden.com/#de&quot;&gt;Deutsch&lt;/a&gt;
            &lt;a href=&quot;http://cssgridgarden.com/#nl&quot;&gt;Nederlands&lt;/a&gt;
            &lt;a href=&quot;http://cssgridgarden.com/#it&quot;&gt;Italiano&lt;/a&gt;
            &lt;a href=&quot;http://cssgridgarden.com/#pt-br&quot;&gt;Português(BR)&lt;/a&gt;
            &lt;a href=&quot;http://cssgridgarden.com/#pt-pt&quot;&gt;Português(PT)&lt;/a&gt;
            &lt;a href=&quot;http://cssgridgarden.com/#sv&quot;&gt;Svenska&lt;/a&gt;
            &lt;a href=&quot;http://cssgridgarden.com/#no&quot;&gt;Norsk&lt;/a&gt;
            &lt;a href=&quot;http://cssgridgarden.com/#pl&quot;&gt;Polski&lt;/a&gt;
            &lt;a href=&quot;http://cssgridgarden.com/#ro&quot;&gt;Română&lt;/a&gt;
            &lt;a href=&quot;http://cssgridgarden.com/#bg&quot;&gt;Български&lt;/a&gt;
            &lt;a href=&quot;http://cssgridgarden.com/#lv&quot;&gt;Latviešu&lt;/a&gt;
            &lt;a href=&quot;http://cssgridgarden.com/#ru&quot;&gt;Русский&lt;/a&gt;
            &lt;a href=&quot;http://cssgridgarden.com/#ua&quot;&gt;Українська&lt;/a&gt;
            &lt;a href=&quot;http://cssgridgarden.com/#el&quot;&gt;Ελληνικά&lt;/a&gt;
            &lt;a href=&quot;http://cssgridgarden.com/#tr&quot;&gt;Türkçe&lt;/a&gt;
            &lt;a href=&quot;http://cssgridgarden.com/#fa&quot;&gt;فارسی&lt;/a&gt;
            &lt;a href=&quot;http://cssgridgarden.com/#zh-cn&quot;&gt;简体中文&lt;/a&gt;
            &lt;a href=&quot;http://cssgridgarden.com/#zh-tw&quot;&gt;繁體中文&lt;/a&gt;
            &lt;a href=&quot;http://cssgridgarden.com/#ja&quot;&gt;日本語&lt;/a&gt;
            &lt;a href=&quot;http://cssgridgarden.com/#ko&quot;&gt;한국어&lt;/a&gt;
          &lt;/span&gt;
        &lt;/span&gt;
      &lt;/div&gt;
      &lt;div class=&quot;credits&quot;&gt;
        &lt;span id=&quot;flexboxFroggy&quot; class=&quot;translate&quot;&gt;Want to learn CSS flexbox? Play&lt;/span&gt; &lt;a href=&quot;https://codepip.com/games/flexbox-froggy/&quot;&gt;Flexbox Froggy&lt;/a&gt;.
      &lt;/div&gt;
    </description>
<pubDate>Mon, 23 Sep 2019 16:33:10 +0000</pubDate>
<dc:creator>mikepechadotcom</dc:creator>
<og:url>http://cssgridgarden.com</og:url>
<og:type>website</og:type>
<og:title>Grid Garden</og:title>
<og:description>A game for learning CSS grid layout</og:description>
<og:image>http://cssgridgarden.com/images/screenshot.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://cssgridgarden.com/</dc:identifier>
</item>
<item>
<title>Apple’s New Mac Pro to Be Made in Texas</title>
<link>https://www.apple.com/newsroom/2019/09/apples-new-mac-pro-to-be-made-in-texas/</link>
<guid isPermaLink="true" >https://www.apple.com/newsroom/2019/09/apples-new-mac-pro-to-be-made-in-texas/</guid>
<description>&lt;p&gt;As part of its commitment to US economic growth, Apple today confirmed that its newly redesigned Mac Pro will be manufactured in Austin, Texas. This latest generation Mac Pro, which was unveiled at Apple’s annual Worldwide Developer Conference in June, will begin production soon at the same Austin facility where Mac Pro has been made since 2013.&lt;/p&gt;
&lt;p&gt;The new Mac Pro will include components designed, developed and manufactured by more than a dozen American companies for distribution to US customers. Manufacturers and suppliers across Arizona, Maine, New Mexico, New York, Oregon, Pennsylvania, Texas and Vermont, including Intersil and ON Semiconductor, are providing advanced technology. The US manufacturing of Mac Pro is made possible following a federal product exclusion Apple is receiving for certain necessary components. The value of American-made components in the new Mac Pro is 2.5 times greater than in Apple’s previous generation Mac Pro.&lt;/p&gt;
</description>
<pubDate>Mon, 23 Sep 2019 16:03:41 +0000</pubDate>
<dc:creator>infodocket</dc:creator>
<og:type>article</og:type>
<og:title>Apple’s new Mac Pro to be made in Texas</og:title>
<og:description>As part of its commitment to US economic growth, Apple today confirmed that its newly redesigned Mac Pro will be manufactured in Austin, Texas.</og:description>
<og:url>https://www.apple.com/newsroom/2019/09/apples-new-mac-pro-to-be-made-in-texas/</og:url>
<og:image>https://www.apple.com/newsroom/images/product/mac/standard/Apple-new-Mac-Pro-to-be-made-in-Texas-090519_LP_hero.jpg.og.jpg?201909231640</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.apple.com/newsroom/2019/09/apples-new-mac-pro-to-be-made-in-texas/</dc:identifier>
</item>
<item>
<title>Update from Chef</title>
<link>https://blog.chef.io/2019/09/23/an-important-update-from-chef/</link>
<guid isPermaLink="true" >https://blog.chef.io/2019/09/23/an-important-update-from-chef/</guid>
<description>&lt;p&gt;&lt;em&gt;&lt;span&gt;Below is a message that I sent to all Chef employees today about recent events affecting Chef.&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Chefs,&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;I want to provide an update on recent events affecting Chef and changes that we’re making.&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;As many of you know, we began our work with the U.S. Government in earnest in 2014 and 2015. This included DHS and its various departments under a different set of circumstances than exists today.  The overarching goal was to help them modernize their computing infrastructure and create a cooperative community of IT professionals inside the government that could share practices and approaches in a similar way to many open source communities.  Policies such as family separation and detention did not yet exist.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;While I and others privately opposed this and various other related policies, we did not take a position despite the recommendation of many of our employees.  I apologize for this. I had hoped that traditional political checks and balances would provide remedy and that our relationship with our various government customers could avoid getting intermingled with these policies.  However, it is clear that checks and balances have not provided relief to the fundamental issues of the policies in question. Chef, as well as other companies, can take stronger positions against these policies that violate basic human rights.  Over the past year, many of our employees have constructively advocated for a change in our position, and I want to thank them.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;After deep introspection and dialog within Chef, we will not renew our current contracts with ICE and CBP when they expire over the next year.  Chef will fulfill our full obligations under the current contracts. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;We have also decided that we will donate an amount equivalent to our 2019 revenues from these two contracts directed to charities that help vulnerable people impacted by the policy of family separation and detention.  We’ll create a team to lead the direction of these funds.  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;There are other work streams that I would like to initiate inside Chef to facilitate more effective dialogue inside our company and across our community.  In addition, we are committed to delivering an expanded ethics policy to define a systematic approach to evaluate potentially problematic customer contracts.  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;For those that were rightly concerned with our partial service outage last week related to chef gems, we have made and will continue to make a series of changes to ensure the full fidelity of our software and services moving forward.&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;I know the events of the past week have been painful for many of you for which I sincerely apologize.  We anticipate that there will be questions regarding additional details on some of the information outlined above and we will be following up shortly.  I look forward to working together on these important issues with you.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;– Barry&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 23 Sep 2019 15:29:17 +0000</pubDate>
<dc:creator>kyoob</dc:creator>
<og:type>article</og:type>
<og:title>An Important Update from Chef - Chef Blog</og:title>
<og:description>Below is a message that I sent to all Chef employees today about recent events affecting Chef.</og:description>
<og:url>https://blog.chef.io/2019/09/23/an-important-update-from-chef/</og:url>
<og:image>https://blog.chef.io/wp-content/uploads/2019/08/Coded-Enterprise_2.png</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.chef.io/2019/09/23/an-important-update-from-chef/</dc:identifier>
</item>
<item>
<title>Open-Source Seeds</title>
<link>https://www.opensourceseeds.org/en/home</link>
<guid isPermaLink="true" >https://www.opensourceseeds.org/en/home</guid>
<description>&lt;div readability=&quot;8.6797153024911&quot;&gt;
&lt;h3&gt;Open-source: Protecting freedom&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;OpenSourceSeeds&lt;/em&gt; is committed to re-establishing seed as a common good for all. We do this by providing new varieties with an open-source licence. This is an easy way to legally protect seed from patents and other forms of privatization. &lt;/p&gt;
&lt;a class=&quot;btn-info btn btn-border&quot; href=&quot;https://opensourceseeds.org/en/licence&quot;&gt;Learn more&lt;/a&gt;&lt;/div&gt;
</description>
<pubDate>Mon, 23 Sep 2019 13:55:21 +0000</pubDate>
<dc:creator>void_nill</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.opensourceseeds.org/en/home</dc:identifier>
</item>
<item>
<title>Snap Detailed Facebook’s Aggressive Tactics in ‘Project Voldemort’ Dossier</title>
<link>https://www.wsj.com/articles/snap-detailed-facebooks-aggressive-tactics-in-project-voldemort-dossier-11569236404?mod=rsswn</link>
<guid isPermaLink="true" >https://www.wsj.com/articles/snap-detailed-facebooks-aggressive-tactics-in-project-voldemort-dossier-11569236404?mod=rsswn</guid>
<description>&lt;div class=&quot;is-lead-inset&quot;&gt;
      &lt;div data-layout=&quot;header&amp;#10;              &quot; data-layout-mobile=&quot;&quot; class=&quot;&amp;#10;        media-object&amp;#10;        type-InsetMediaIllustration&amp;#10;          header&amp;#10;    scope-web|mobileapps&amp;#10;  article__inset&amp;#10;        article__inset--type-InsetMediaIllustration&amp;#10;          article__inset--header&amp;#10;    article__inset--lead&amp;#10;  &quot;&gt;
      
      
          
    &lt;figure class=&quot;media-object-image enlarge-image renoImageFormat- img-header article__inset__image&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;div data-mobile-ratio=&quot;66.66666666666666%&quot; data-layout-ratio=&quot;66.66666666666666%&quot; data-subtype=&quot;photo&quot; class=&quot;image-container  responsive-media article__inset__image__image&quot;&gt;
    
        &lt;img srcset=&quot;https://images.wsj.net/im-109888?width=140&amp;amp;size=1.5 140w,&amp;#10;https://images.wsj.net/im-109888?width=540&amp;amp;size=1.5 540w,&amp;#10;https://images.wsj.net/im-109888?width=620&amp;amp;size=1.5 620w,&amp;#10;https://images.wsj.net/im-109888?width=700&amp;amp;size=1.5 700w,&amp;#10;https://images.wsj.net/im-109888?width=860&amp;amp;size=1.5 860w,&amp;#10;https://images.wsj.net/im-109888?width=1260&amp;amp;size=1.5 1260w&quot; sizes=&quot;(max-width: 140px) 100px,&amp;#10;(max-width: 540px) 500px,&amp;#10;(max-width: 620px) 580px,&amp;#10;(max-width: 700px) 660px,&amp;#10;(max-width: 860px) 820px,&amp;#10;1260px&quot; src=&quot;https://images.wsj.net/im-109888?width=620&amp;amp;size=1.5&quot; data-enlarge=&quot;https://images.wsj.net/im-109888?width=1260&amp;amp;size=1.5&quot; alt=&quot;&quot; title=&quot;The Snapchat app is displayed next to the Facebook app on the home screen of...&quot;/&gt;&lt;/div&gt;

    
      &lt;figcaption class=&quot;wsj-article-caption article__inset__image__caption&quot; itemprop=&quot;caption&quot;&gt;&lt;span class=&quot;wsj-article-caption-content&quot;&gt;The Snapchat app is displayed next to the Facebook app on the home screen of an iPhone.&lt;/span&gt;
      &lt;span class=&quot;wsj-article-credit article__inset__image__caption__credit&quot; itemprop=&quot;creator&quot;&gt;
            &lt;span class=&quot;wsj-article-credit-tag&quot;&gt;
              Photo: 
            &lt;/span&gt;
        Justin Sullivan/Getty Images
          &lt;/span&gt;
  &lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt; 
    &lt;/div&gt;

  &lt;div class=&quot;clearfix byline-wrap&quot;&gt;


      
      &lt;div class=&quot;byline article__byline&quot;&gt;
      
      
          &lt;span&gt;By&lt;/span&gt;
              &lt;div class=&quot;author mobile-scrim hasMenu&quot; data-scrim=&quot;{&amp;quot;type&amp;quot;:&amp;quot;author&amp;quot;,&amp;quot;header&amp;quot;:&amp;quot;Georgia Wells&amp;quot;,&amp;quot;subhead&amp;quot;:&amp;quot;The Wall Street Journal&amp;quot;,&amp;quot;list&amp;quot;:[{&amp;quot;type&amp;quot;:&amp;quot;link&amp;quot;,&amp;quot;icon&amp;quot;:&amp;quot;bio&amp;quot;,&amp;quot;url&amp;quot;:&amp;quot;https://www.wsj.com/news/author/7791&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;Biography&amp;quot;},{&amp;quot;type&amp;quot;:&amp;quot;link&amp;quot;,&amp;quot;icon&amp;quot;:&amp;quot;twitter&amp;quot;,&amp;quot;url&amp;quot;:&amp;quot;https://twitter.com/georgia_wells&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;@georgia_wells&amp;quot;},{&amp;quot;type&amp;quot;:&amp;quot;link&amp;quot;,&amp;quot;icon&amp;quot;:&amp;quot;facebook&amp;quot;,&amp;quot;url&amp;quot;:&amp;quot;https://facebook.com/georgia.e.wells&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;georgia.e.wells&amp;quot;},{&amp;quot;type&amp;quot;:&amp;quot;link&amp;quot;,&amp;quot;icon&amp;quot;:&amp;quot;email&amp;quot;,&amp;quot;url&amp;quot;:&amp;quot;mailto:georgia.wells@wsj.com&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;georgia.wells@wsj.com&amp;quot;}]}&quot;&gt;
                  &lt;span class=&quot;name&quot; itemprop=&quot;name&quot;&gt;Georgia Wells&lt;/span&gt; and 
                  &lt;/div&gt;
        &lt;div class=&quot;author mobile-scrim hasMenu&quot; data-scrim=&quot;{&amp;quot;type&amp;quot;:&amp;quot;author&amp;quot;,&amp;quot;header&amp;quot;:&amp;quot;Deepa Seetharaman&amp;quot;,&amp;quot;subhead&amp;quot;:&amp;quot;The Wall Street Journal&amp;quot;,&amp;quot;list&amp;quot;:[{&amp;quot;type&amp;quot;:&amp;quot;link&amp;quot;,&amp;quot;icon&amp;quot;:&amp;quot;bio&amp;quot;,&amp;quot;url&amp;quot;:&amp;quot;https://www.wsj.com/news/author/8237&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;Biography&amp;quot;},{&amp;quot;type&amp;quot;:&amp;quot;link&amp;quot;,&amp;quot;icon&amp;quot;:&amp;quot;twitter&amp;quot;,&amp;quot;url&amp;quot;:&amp;quot;https://twitter.com/dseetharaman&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;@dseetharaman&amp;quot;},{&amp;quot;type&amp;quot;:&amp;quot;link&amp;quot;,&amp;quot;icon&amp;quot;:&amp;quot;facebook&amp;quot;,&amp;quot;url&amp;quot;:&amp;quot;https://facebook.com/deepa.seetharaman&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;deepa.seetharaman&amp;quot;},{&amp;quot;type&amp;quot;:&amp;quot;link&amp;quot;,&amp;quot;icon&amp;quot;:&amp;quot;email&amp;quot;,&amp;quot;url&amp;quot;:&amp;quot;mailto:deepa.seetharaman@wsj.com&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;deepa.seetharaman@wsj.com&amp;quot;}]}&quot;&gt;
                  &lt;span class=&quot;name&quot; itemprop=&quot;name&quot;&gt;Deepa Seetharaman&lt;/span&gt;
                  &lt;/div&gt;

      &lt;/div&gt;
      
        &lt;time class=&quot;timestamp article__timestamp flexbox__flex--1&quot;&gt;
          Sept. 23, 2019 7:00 am ET
        &lt;/time&gt;&lt;/div&gt;

  

  &lt;div class=&quot;article-content &quot;&gt;

       &lt;p&gt; 






        &lt;a href=&quot;https://quotes.wsj.com/FB&quot;&gt;Facebook&lt;/a&gt;
        &lt;span&gt; Inc.&lt;/span&gt;


       for most of the past decade was Silicon Valley’s 800-pound gorilla, squashing rivals, ripping off their best ideas or buying them outright as it cemented its dominance of social media.&lt;/p&gt; &lt;p&gt;Now the knives are coming out.&lt;/p&gt; 




      &lt;div class=&quot;paywall&quot;&gt;




      &lt;p&gt;A number of Facebook’s current and former competitors are talking about the company’s hardball tactics to investigators from the Federal Trade Commission, as part of its broader antitrust investigation into the social-media giant’s business practices, according to people familiar with the matter.&lt;/p&gt; &lt;p&gt;One of them is 






        &lt;a href=&quot;https://quotes.wsj.com/SNAP&quot;&gt;Snap&lt;/a&gt;
        &lt;span&gt; Inc.,&lt;/span&gt;


       where the legal team for years kept a dossier of ways that the company felt Facebook was trying to thwart competition from the buzzy upstart, according to some of those people. The title of the documents: Project Voldemort.&lt;/p&gt; 






      &lt;div data-layout=&quot;wrap&amp;#10;              &quot; data-layout-mobile=&quot;&quot; class=&quot;&amp;#10;        media-object&amp;#10;        type-InsetMediaIllustration&amp;#10;          wrap&amp;#10;    scope-web|mobileapps&amp;#10;  article__inset&amp;#10;        article__inset--type-InsetMediaIllustration&amp;#10;          article__inset--wrap&amp;#10;  &quot;&gt;
      
      
          
    &lt;figure class=&quot;media-object-image enlarge-image renoImageFormat- img-wrap article__inset__image&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;div data-mobile-ratio=&quot;66.66666666666666%&quot; data-layout-ratio=&quot;66.66666666666666%&quot; data-subtype=&quot;photo&quot; class=&quot;image-container  responsive-media article__inset__image__image&quot;&gt;
    
        &lt;img srcset=&quot;https://images.wsj.net/im-109767?width=140&amp;amp;size=1.5 140w,&amp;#10;https://images.wsj.net/im-109767?width=540&amp;amp;size=1.5 540w,&amp;#10;https://images.wsj.net/im-109767?width=620&amp;amp;size=1.5 620w,&amp;#10;https://images.wsj.net/im-109767?width=700&amp;amp;size=1.5 700w,&amp;#10;https://images.wsj.net/im-109767?width=860&amp;amp;size=1.5 860w,&amp;#10;https://images.wsj.net/im-109767?width=1260&amp;amp;size=1.5 1260w&quot; sizes=&quot;(max-width: 140px) 100px,&amp;#10;(max-width: 540px) 500px,&amp;#10;(max-width: 620px) 580px,&amp;#10;(max-width: 700px) 660px,&amp;#10;(max-width: 860px) 820px,&amp;#10;1260px&quot; src=&quot;https://images.wsj.net/im-109767?width=620&amp;amp;size=1.5&quot; data-enlarge=&quot;https://images.wsj.net/im-109767?width=1260&amp;amp;size=1.5&quot; alt=&quot;&quot; title=&quot;Snap CEO Evan Spiegel in Half Moon Bay, Calif., in February.&quot;/&gt;&lt;/div&gt;

    
      &lt;figcaption class=&quot;wsj-article-caption article__inset__image__caption&quot; itemprop=&quot;caption&quot;&gt;&lt;span class=&quot;wsj-article-caption-content&quot;&gt;Snap CEO Evan Spiegel in Half Moon Bay, Calif., in February.&lt;/span&gt;
      &lt;span class=&quot;wsj-article-credit article__inset__image__caption__credit&quot; itemprop=&quot;creator&quot;&gt;
            &lt;span class=&quot;wsj-article-credit-tag&quot;&gt;
              Photo: 
            &lt;/span&gt;
        David Paul Morris/Bloomberg News
          &lt;/span&gt;
  &lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt; 




       &lt;p&gt;The files in Voldemort, a reference to the fictional antagonist in the popular Harry Potter children’s books, chronicled Facebook moves that Snap officials believed were a threat to undermine Snap’s business, including discouraging popular account holders, or influencers, from referencing Snap on their accounts on Instagram, which Facebook owns, according to people familiar with the project. Executives also suspected that Instagram was preventing Snap content from trending on its app, the people said.&lt;/p&gt; &lt;p&gt;In recent months, the FTC has made contact with dozens of tech executives and app developers, people familiar with the agency’s outreach said. The agency’s investigators are also talking to executives from startups that became defunct after losing access to Facebook’s platform in addition to &lt;a href=&quot;https://www.wsj.com/articles/ftc-antitrust-probe-of-facebook-scrutinizes-its-acquisitions-11564683965?mod=article_inline&quot; class=&quot;icon none&quot;&gt;founders who sold their companies to Facebook&lt;/a&gt;, according to some of those people.&lt;/p&gt; 






      &lt;div data-layout=&quot;inline&amp;#10;              &quot; data-layout-mobile=&quot;&quot; class=&quot;&amp;#10;        media-object&amp;#10;        type-InsetMediaIllustration&amp;#10;          inline&amp;#10;    scope-web|mobileapps&amp;#10;  article__inset&amp;#10;        article__inset--type-InsetMediaIllustration&amp;#10;          article__inset--inline&amp;#10;  &quot;&gt;
      
      
          
    &lt;figure class=&quot;media-object-image enlarge-image renoImageFormat- img-inline article__inset__image&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;div data-mobile-ratio=&quot;66.66666666666666%&quot; data-layout-ratio=&quot;66.66666666666666%&quot; data-subtype=&quot;photo&quot; class=&quot;image-container  responsive-media article__inset__image__image&quot;&gt;
    
        &lt;img srcset=&quot;https://images.wsj.net/im-109893?width=140&amp;amp;size=1.5 140w,&amp;#10;https://images.wsj.net/im-109893?width=540&amp;amp;size=1.5 540w,&amp;#10;https://images.wsj.net/im-109893?width=620&amp;amp;size=1.5 620w,&amp;#10;https://images.wsj.net/im-109893?width=700&amp;amp;size=1.5 700w,&amp;#10;https://images.wsj.net/im-109893?width=860&amp;amp;size=1.5 860w,&amp;#10;https://images.wsj.net/im-109893?width=1260&amp;amp;size=1.5 1260w&quot; sizes=&quot;(max-width: 140px) 100px,&amp;#10;(max-width: 540px) 500px,&amp;#10;(max-width: 620px) 580px,&amp;#10;(max-width: 700px) 660px,&amp;#10;(max-width: 860px) 820px,&amp;#10;1260px&quot; src=&quot;https://images.wsj.net/im-109893?width=620&amp;amp;size=1.5&quot; data-enlarge=&quot;https://images.wsj.net/im-109893?width=1260&amp;amp;size=1.5&quot; alt=&quot;&quot; title=&quot;Facebook’s Mark Zuckerberg in Washington on Sept. 19.&quot;/&gt;&lt;/div&gt;

    
      &lt;figcaption class=&quot;wsj-article-caption article__inset__image__caption&quot; itemprop=&quot;caption&quot;&gt;&lt;span class=&quot;wsj-article-caption-content&quot;&gt;Facebook’s Mark Zuckerberg in Washington on Sept. 19.&lt;/span&gt;
      &lt;span class=&quot;wsj-article-credit article__inset__image__caption__credit&quot; itemprop=&quot;creator&quot;&gt;
            &lt;span class=&quot;wsj-article-credit-tag&quot;&gt;
              Photo: 
            &lt;/span&gt;
        Andrew Harrer/Bloomberg News
          &lt;/span&gt;
  &lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt; 




       &lt;p&gt;The discussions have focused on the aggressive growth tactics that propelled Facebook from a social network for college students 15 years ago to a collection of services now used by more than one in four people in the world every day. &lt;/p&gt; 






      &lt;div data-layout=&quot;&amp;#10;              &quot; data-layout-mobile=&quot;&quot; class=&quot;&amp;#10;        media-object&amp;#10;        type-InsetHtml&amp;#10;            reno-inset&amp;#10;            &amp;#10;            &amp;#10;            wrap&amp;#10;  article__inset&amp;#10;        article__inset--type-InsetHtml&amp;#10;            &amp;#10;            article__inset--wrap&amp;#10;  &quot;&gt;
      
          &lt;div class=&quot;media-object-rich-text&quot;&gt;
          

&lt;h4&gt;SHARE YOUR THOUGHTS&lt;/h4&gt; &lt;p&gt; &lt;em&gt;How do you think Snap’s dossier will affect perceptions about Facebook? Join the conversation below.&lt;/em&gt; &lt;/p&gt;
          &lt;/div&gt;

      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      &lt;/div&gt; 




       &lt;p&gt;The talks are a sign that the FTC may be trying to put together “a picture of what might be a pattern of behavior to prevent competition to the core Facebook business,” said Gene Kimmelman, a senior adviser at Public Knowledge, a consumer group that focuses on tech issues who was a Justice Department antitrust official in the Obama administration. Discussions with rivals are typical in antitrust probes, said Mr. Kimmelman, who isn’t involved in the case.&lt;/p&gt; &lt;p&gt;Inside Facebook, senior leaders are concerned about the possibility of rivals divulging damaging information to federal officials and have discussed ways to improve the company’s relationships around Silicon Valley, according to a person familiar with the discussions.&lt;/p&gt; &lt;p&gt;Facebook has previously said that its acquisitions fuel innovation, rather than stifle it, and a spokeswoman said the company’s addition of new services and features over the years gives consumers more choices.&lt;/p&gt; &lt;p&gt;“This is competition at work and one of the longtime hallmarks of the tech sector,” she said. “Businesses continually build and iterate on concepts and ideas in the marketplace—making them better or taking them in different directions. This is good for consumers.”&lt;/p&gt; &lt;p&gt;The FTC investigation is one of several antitrust probes into Facebook and major tech giants in the U.S. and around the world. Earlier this month, the House Judiciary Committee &lt;a href=&quot;https://www.wsj.com/articles/ftc-antitrust-probe-of-facebook-scrutinizes-its-acquisitions-11564683965?mod=article_inline&quot; class=&quot;icon none&quot;&gt;requested Facebook executive communications&lt;/a&gt; about the company’s decisions to buy the photo- and video-sharing network Instagram in 2012 and the messaging app WhatsApp in 2014. &lt;a href=&quot;https://www.wsj.com/articles/u-s-lawmakers-seek-information-from-big-tech-competitors-in-antitrust-probe-11568734080?mod=article_inline&quot; class=&quot;icon none&quot;&gt;Lawmakers have contacted several of those companies’ rivals&lt;/a&gt; as part of that probe, The Wall Street Journal reported previously. &lt;/p&gt; &lt;p&gt;The House panel can’t take enforcement actions against the companies. The FTC, however, can.&lt;/p&gt; 






      &lt;div data-layout=&quot;header&amp;#10;              &quot; data-layout-mobile=&quot;&quot; class=&quot;&amp;#10;        media-object&amp;#10;        type-InsetMediaVideo&amp;#10;          header&amp;#10;    scope-web|mobileapps&amp;#10;  article__inset&amp;#10;        article__inset--type-InsetMediaVideo&amp;#10;          article__inset--header&amp;#10;  &quot;&gt;
      
      
      
          &lt;figure class=&quot;media-object-video article__inset__video media-object-video--standard&quot;&gt;
  
    &lt;figcaption class=&quot;wsj-article-caption article__inset__video__caption&quot;&gt;
          The Department of Justice is investigating the U.S.'s largest tech firms for allegedly monopolistic behavior. Roughly 20 years ago, a similar case threatened to destabilize Microsoft. WSJ explains.
        &lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt; 




       &lt;p&gt;One area of focus for the FTC is Onavo, an Israeli mobile-analytics startup that Facebook purchased in 2013, according to a person familiar with the FTC’s line of questioning. Onavo offered a free mobile app that described itself as a way to “keep you and your data safe” by creating a virtual private network. To do this, the company redirected internet traffic on Onavo to Facebook’s servers, which allowed it to log every action in a central database.&lt;/p&gt; &lt;p&gt;That enabled Facebook to quietly track what users did on their phones, including which apps they used and for how long, the Journal reported in 2017. &lt;a href=&quot;https://www.wsj.com/articles/facebooks-onavo-gives-social-media-firm-inside-peek-at-rivals-users-1502622003?mod=article_inline&quot; class=&quot;icon none&quot;&gt;Onavo data was frequently cited&lt;/a&gt; in internal research and strategy decks, according to former employees and internal documents, and helped inform Facebook’s acquisition of WhatsApp for $22 billion in 2014. &lt;a href=&quot;https://www.wsj.com/articles/facebook-to-pull-controversial-onavo-app-11550865297?mod=article_inline&quot; class=&quot;icon none&quot;&gt;Facebook shut down the Onavo app earlier this year&lt;/a&gt; amid growing scrutiny of its data-collection practices. &lt;/p&gt; &lt;p&gt;Snap was founded in 2011, when Facebook was already the dominant player in social media. It quickly became a social-media hit after its Snapchat messaging app took off among young people. At one point, Facebook—through Onavo—was able to see Snap data as specific as the number of messages a user sent or how much time those users spent in specific Snapchat features, the former employees said. Facebook couldn’t see the content of the messages or images. The visibility into Snap usage lessened considerably after Snap encrypted its app traffic.&lt;/p&gt; &lt;p&gt;A Facebook spokeswoman said the app was similar to other industry market research tools. &lt;/p&gt; 






      &lt;div data-layout=&quot;inline&amp;#10;              &quot; data-layout-mobile=&quot;&quot; class=&quot;&amp;#10;        media-object&amp;#10;        type-InsetRichText&amp;#10;          inline&amp;#10;    scope-web|mobileapps&amp;#10;  article__inset&amp;#10;        article__inset--type-InsetRichText&amp;#10;          article__inset--inline&amp;#10;  &quot;&gt;
      
      
      
      
      
      
      
      
      
          &lt;div class=&quot;media-object-rich-text&quot;&gt;
    	

&lt;h4&gt;Related Coverage&lt;/h4&gt;  &lt;/div&gt;

      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      &lt;/div&gt; 




       &lt;p&gt;Another focus of the investigation is whether Facebook Chairman and CEO 




      Mark Zuckerberg




       acquired or tried to buy startups that he feared would later become competitors, according to people familiar with the investigation. In some cases, after Facebook’s overtures were spurned, the social-media giant copied features of the former targets.&lt;/p&gt; &lt;p&gt;For example, when Mr. Zuckerberg met with the founders of startups, including Evan Spiegel, chief executive of Snap, and 




      Dennis Crowley, 




       co-founder of Foursquare Inc., he presented them with two scenarios: either they accept the price he was offering for their companies, or face Facebook’s efforts to copy their products and make operating more difficult, according to people familiar with the conversations. In both cases, after the companies rejected the overtures, Facebook soon after released features that mimicked the products from Snap and Foursquare.&lt;/p&gt; &lt;p&gt;Foursquare in 2014 started shifting from a consumer-focused app to providing location-based tech and data to businesses.&lt;/p&gt; &lt;p&gt;Facebook rolled out a string of products similar to Snap’s most popular features, including stories, filters and stickers. &lt;a href=&quot;https://www.wsj.com/articles/snapchat-posts-2-2-billion-loss-in-first-quarterly-report-stock-plunges-1494446940?mod=article_inline&quot; class=&quot;icon none&quot;&gt;Snap’s growth waned at times&lt;/a&gt;, in part due to competition from Instagram, and it now has around 200 million daily users, less than 15% of Facebook’s total. After a rocky patch in 2018 due in part to a botched redesign, Snap is once again adding users and its stock has rebounded. Snap has also managed to attract more young users between the ages of 13 and 34 in the U.S. than Facebook and Instagram.&lt;/p&gt; &lt;p&gt;Externally, Snap has often addressed the tension with humor. After Snap launched filters tied to specific regions, in 2014, it created one that only appeared for Snap users at Facebook’s headquarters. The filter showed an image of Snap’s ghost logo laughing, pointing at the user, presumably an employee of Facebook.&lt;/p&gt; &lt;p&gt;A major point of frustration for Snap executives was the belief that Facebook was preventing Snap’s most popular content from trending on Instagram, which they considered to be an abuse of monopoly power. When users uploaded to Instagram videos and images of Snap’s most popular lenses—such as people vomiting rainbows and wearing bunny ears—the users also often included the hashtag #snapchat and the name of the lens.&lt;/p&gt; &lt;p&gt;In the Project Voldemort documents, according to people familiar with them, Snap executives noted their belief that Instagram was blocking searches of these Snap-related terms and not including this content on Instagram’s “explore” page where users discover new content.&lt;/p&gt; &lt;p&gt;Instagram representatives also started pressuring influencers to stop adding Snapchat links to their Instagram profile pages, according to people familiar with the conversations.&lt;/p&gt; &lt;p&gt;The Instagram representatives suggested to some influencers that they could potentially void the users’ “verified” status, which signifies that an account is legitimate and popular, according to one of those people.&lt;/p&gt; &lt;p&gt;Losing the blue check mark that comes with being verified can undermine an influencer’s ability to secure paid deals, which can range from hundreds to millions of dollars depending on the influencer’s popularity.&lt;/p&gt; &lt;p&gt;In 2016, Instagram added a rule that prevented users from adding links to their Snapchat profiles.&lt;/p&gt; &lt;p&gt;Facebook’s tactics have long engendered concern across Silicon Valley, said Paul Keable, chief strategy officer at Ashley Madison. The dating site, which caters to married people seeking affairs, is blocked from advertising on Facebook, which now operates its own dating feature.&lt;/p&gt; &lt;p&gt;“Facebook has created a scenario where they get to pick and choose who wins based on their personal whims,” Mr. Keable said. “All while running their own competitive products.”&lt;/p&gt; &lt;p&gt;Mr. Keable said he hopes he can work with Facebook to improve its relationship with the dating industry. He said he hasn’t been in touch with regulators but would provide information if asked.&lt;/p&gt; &lt;p class=&quot;articleTagLine&quot;&gt;—Emily Glazer and John D. McKinnon contributed to this article. &lt;/p&gt; &lt;p&gt; &lt;strong&gt;Write to &lt;/strong&gt;Georgia Wells at &lt;a href=&quot;mailto:Georgia.Wells@wsj.com&quot; target=&quot;_blank&quot; class=&quot;icon &quot;&gt;Georgia.Wells@wsj.com&lt;/a&gt; and Deepa Seetharaman at &lt;a href=&quot;mailto:Deepa.Seetharaman@wsj.com&quot; target=&quot;_blank&quot; class=&quot;icon &quot;&gt;Deepa.Seetharaman@wsj.com&lt;/a&gt;&lt;/p&gt;






      &lt;/div&gt;



  
  &lt;p&gt;Copyright ©2019 Dow Jones &amp;amp; Company, Inc. All Rights Reserved. 87990cbe856818d5eddac44c7b1cdeb8&lt;/p&gt;
  
  &lt;/div&gt;


</description>
<pubDate>Mon, 23 Sep 2019 12:09:04 +0000</pubDate>
<dc:creator>wyclif</dc:creator>
<og:title>WSJ News Exclusive | Snap Detailed Facebook’s Aggressive Tactics in ‘Project Voldemort’ Dossier</og:title>
<og:description>The FTC’s antitrust probe is giving Facebook’s competitors a chance to air complaints. One of them is Snap, where the legal team kept a dossier of ways it felt Facebook was trying to thwart competition.</og:description>
<og:url>https://www.wsj.com/articles/snap-detailed-facebooks-aggressive-tactics-in-project-voldemort-dossier-11569236404</og:url>
<og:image>https://images.wsj.net/im-109888/social</og:image>
<og:type>article</og:type>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.wsj.com/articles/snap-detailed-facebooks-aggressive-tactics-in-project-voldemort-dossier-11569236404?mod=rsswn</dc:identifier>
</item>
<item>
<title>My Talk at Microsoft</title>
<link>https://www.stallman.org/articles/microsoft-talk.html</link>
<guid isPermaLink="true" >https://www.stallman.org/articles/microsoft-talk.html</guid>
<description>&lt;head&gt;&lt;title&gt;My Talk at Microsoft&lt;/title&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;&lt;link media=&quot;all&quot; href=&quot;/common/stallman.css&quot; type=&quot;text/css&quot; rel=&quot;stylesheet&quot; /&gt;&lt;link rel=&quot;icon&quot; href=&quot;/common/rms.png&quot; /&gt;&lt;/head&gt;&lt;body id=&quot;readabilityBody&quot; readability=&quot;110.1768781911&quot;&gt;


&lt;p&gt;For current political commentary, see the &lt;a href=&quot;https://www.stallman.org/archives/polnotes.html&quot;&gt;daily political notes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.stallman.org/biographies.html#serious&quot;&gt;RMS' Bio&lt;/a&gt; | &lt;a href=&quot;http://gnu.org&quot;&gt;The GNU Project&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;— Richard Stallman&lt;/h2&gt;
&lt;p&gt;It is now public knowledge that on 4 September 2019 I gave a talk at the Microsoft campus in Redmond. I was invited and I accepted. The report of this has led to a certain amount of speculation and rumor.&lt;/p&gt;
&lt;p&gt;There are those who think that Microsoft invited me to speak in the hope of seducing me away from the free software cause. Some fear that it might even have succeeded. I am sure the Microsoft staff I addressed saw that that could never happen. I resisted Steve Jobs's snow job in 1989 or 1990; I am no easy mark for those who want me to change my views.&lt;/p&gt;
&lt;p&gt;Others assert that inviting me was opposition research and nothing more. If that was the intention, Microsoft didn't learn anything it could not have learned from recordings of my talks.&lt;/p&gt;
&lt;p&gt;In the past, Microsoft published what it called &quot;contributions to open source&quot; that were no contribution whatsoever to the Free World. (This says something about the &lt;a href=&quot;https://gnu.org/philosophy/open-source-misses-the-point.html&quot;&gt;deep difference between the open source and the free software movement&lt;/a&gt;.) However, if Microsoft sought to return to that practice, it had no need to invite me.&lt;/p&gt;
&lt;p&gt;Some are trying to portray my decision to speak there as approval of Microsoft's current conduct. This is, of course, absurd. My rejection of Microsoft's nonfree software continues just like my rejection of all other nonfree software. But the fact that people make nonfree software is no reason not to show them &lt;a href=&quot;https://gnu.org/philosophy/free-software-even-more-important.html&quot;&gt;reasons why software should be free&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I don't think Microsoft invited me with a view to seduction, or opposition research, or trickery, or misrepresention. I think some Microsoft executives are seriously interested in the ethical issues surrounding software. They may also be interested in carrying out some of the specific suggestions/requests I presented. I started with a list of actions that would help the free software community, and which I though Microsoft might be amenable to, before stating the free software philosophy in the usual way. I think there is a chance that Microsoft might change some practices in ways that would help the Free World practically, even if they do not support us overall.&lt;/p&gt;
&lt;p&gt;It is only a chance; I would not try to estimate the probability. Microsoft did not give me any promises to change; I did not ask for any.&lt;/p&gt;
&lt;p&gt;What I can say now is that we should judge Microsoft's future actions by their nature and their effects. It would be a mistake to judge a given action more harshly if done by Microsoft than we would if some other company did the same thing. &lt;a href=&quot;https://gnu.org/philosophy/microsoft.html&quot;&gt;I've said this since 1997&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That page describes some hostile things that Microsoft famously did. We should not forget them, but we should not maintain a burning grudge over actions that ended years ago. We should judge Microsoft in the future by what it does then.&lt;/p&gt;
&lt;p&gt;Another thing I've said for years, about various companies, is that when a company does several different things, it is best to judge each thing on its own, provided they are separable. Actions that benefit freedom are good, and we should say so, while being careful not to let a small good distract us from a large evil.&lt;/p&gt;
&lt;p&gt;The main motive for Microsoft's future activities, whether changed or not, will surely be profit. That is neither here nor there, because the free software movement is &lt;a href=&quot;https://gnu.org/philosophy/selling.html&quot;&gt;not against profit, as such&lt;/a&gt;; we are not the simplistic opposite of the extreme capitalism which claims that profit justifies any and all means. We approve of what respects users' freedom, whether done for profit or not, and we condemn what tramples users' freedom, whether done for profit or not.&lt;/p&gt;
&lt;p&gt;Time will show us whether Microsoft begins to do substantial activities that we can judge as good. Let's encourage that in all prudent ways.&lt;/p&gt;
&lt;h3&gt;Here are the suggestions I gave to Microsoft.&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Help keep computers unlocked (no &quot;secure boot&quot; that restricts what systems we can run). Truly secure boot means YOU specify what system is allowed to run in your computer.&lt;/li&gt;
&lt;li&gt;Help make peripherals safe — no back doors in their embedded software. This applies to keyboards, cameras, disks and memory sticks, since they contain computers and with preinstalled software that can be replaced through a universal back door. Crackers do that, installing malware into them, which becomes an advanced persistent threat. I can explain more if desired.&lt;/li&gt;
&lt;li&gt;Publicly take back Microsoft's attacks on copyleft made in the 2000s. Ballmer called the GPL a &quot;cancer&quot;. Allchin called it &quot;un-American&quot;.&lt;/li&gt;
&lt;li&gt;Encourage copylefting of application and library code, maybe even system and tool code.&lt;/li&gt;
&lt;li&gt;Direct GitHub to promote correct and clear use of licenses and the best use of copyleft (GPL version 3-or-later).&lt;/li&gt;
&lt;li&gt;Help fight against copyright on interfaces.&lt;/li&gt;
&lt;li&gt;Help make the web usable with Javascript deactivated.&lt;/li&gt;
&lt;li&gt;Implement an anonymous internet sales platform that doesn't require Javascript, using GNU Taler (&lt;a href=&quot;https://taler.net/&quot;&gt;taler.net&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Publish the hardware interface of products such as Hololens so we can run them without any nonfree software. Even if our software is years behind, that will be better than not being able to use these devices at all.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;And one other suggestion, which I made to a vice president but perhaps not in my talk.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Release the source code of Windows under the GNU GPL.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;I know that is a stretch, but from what I heard there. it isn't totally impossible.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;Copyright © 2019 Richard Stallman&lt;br /&gt;Released under CC-BY&lt;/p&gt;
&lt;/body&gt;</description>
<pubDate>Mon, 23 Sep 2019 11:22:53 +0000</pubDate>
<dc:creator>thiccly</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.stallman.org/articles/microsoft-talk.html</dc:identifier>
</item>
<item>
<title>Building a Dark Web Crawler in Go</title>
<link>https://creekorful.me/building-fast-modern-web-crawler/</link>
<guid isPermaLink="true" >https://creekorful.me/building-fast-modern-web-crawler/</guid>
<description>&lt;div id=&quot;&quot;&gt;&lt;p&gt;I have been passionated by web crawler for a long time. I have written several one in many languages such as C++, JavaScript (Node.JS), Python, ... and I love the theory behind them.&lt;/p&gt;
&lt;p&gt;But first of all, what is a web crawler ?&lt;/p&gt;

&lt;p&gt;A web crawler is a computer program that browse the internet to index existing pages, images, PDF, ... and allow user to search them using a &lt;a href=&quot;https://en.wikipedia.org/wiki/Web_search_engine&quot;&gt;search engine&lt;/a&gt;. It's basically the technology behind the famous &lt;a href=&quot;https://google.com&quot;&gt;google search engine&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Typically a efficient web crawler is designed to be distributed: instead of a single program that runs on a dedicated server, it's multiples instances of several programs that run on several servers (eg: on the cloud) that allows better task repartition, increased performances and increased bandwidth.&lt;/p&gt;
&lt;p&gt;But distributed softwares does not come without drawbacks: there is factors that may add extra latency to your program and may decrease performances such as network latency, synchronization problems, poorly designed communication protocol, etc...&lt;/p&gt;
&lt;p&gt;To be efficient, a distributed web crawler has to be well designed: it is important to eliminate as many bottlenecks as possible: as french admiral Olivier Lajous has said:&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;The weakest link determines the strength of the whole chain.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You may know that there is several successful web crawler running on the web such as google bot. So I didn't wanted to make a new one again. What I wanted to do this time was to build a web crawler for the dark web.&lt;/p&gt;
&lt;h2 id=&quot;what-s-the-dark-web&quot;&gt;What's the dark web ?&lt;/h2&gt;
&lt;p&gt;I won't be too technical to describe what the dark web is, since it may need is own article.&lt;/p&gt;
&lt;p&gt;The web is designed is composed of 3 layers and we can think of it like an iceberg:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The Surface Web, or Clear Web is the part that we browse everyday. It's indexed by popular web crawler such as Google, Qwant, Duckduckgo, etc...&lt;/li&gt;
&lt;li&gt;The Deep Web is a part of the web non indexed, It means that you cannot find these websites using a search engine but you'll need to access them by knowing the associated URL / IP address.&lt;/li&gt;
&lt;li&gt;The Dark Web is a part of the web that  you't cannot access using a regular browser. You'll need to use a particular application or a special proxy. The most famous dark web is the hidden services built on the tor network. They can be accessed using special URL who ends with .onion&lt;/li&gt;
&lt;/ul&gt;&lt;img src=&quot;https://creekorful.me/content/images/2019/09/image-1.png&quot; class=&quot;kg-image&quot;/&gt;Existing web layers
&lt;h2 id=&quot;how-is-trandoshan-designed&quot;&gt;How is Trandoshan designed ?&lt;/h2&gt;
&lt;img src=&quot;https://creekorful.me/content/images/2019/09/Trandoshan-1.png&quot; class=&quot;kg-image&quot;/&gt;Big picture of Trandoshan
&lt;p&gt;Before talking about the responsibility of each process it is important to understand how they talk to each others.&lt;/p&gt;
&lt;p&gt;The inter process communication (IPC) is mainly done using a messaging protocol known as &lt;a href=&quot;https://nats.io/&quot;&gt;NATS&lt;/a&gt; (yellow line in the diagram) based on the producers / consumers pattern. Each message in NATS has a subject  (like an email) that allow other process to identify it and therefore to read only messages they want to read. NATS allowing scaling: for example they can be 10 crawler processes reading URL from the messaging server. Each of these process will receive an unique URL to crawl. This allow process concurrency (many instances can run at the same time without any bugs) and therefore increase performances.  &lt;/p&gt;
&lt;p&gt;Trandoshan is divided in 4 principal processes:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Crawler&lt;/strong&gt;: The process responsible of crawling pages: it read URLs to crawl from NATS (message identified by subject &quot;&lt;strong&gt;todoUrls&lt;/strong&gt;&quot;), crawl the page, and extract all URLs present in the page. These extracted URLs are sent to NATS with subject &quot;&lt;strong&gt;crawledUrls&lt;/strong&gt;&quot;, and the page body (the whole content) is sent to NATS with subject &quot;&lt;strong&gt;content&lt;/strong&gt;&quot;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Scheduler&lt;/strong&gt;: The process responsible of URL approval: this process read the &quot;&lt;strong&gt;crawledUrls&lt;/strong&gt;&quot; messages, check if the URL is to be crawled (if the URL has not been already crawled) and If so, send the URL to NATS with subject &quot;&lt;strong&gt;todoUrls&lt;/strong&gt;&quot;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Persister&lt;/strong&gt;: The process responsible of content archiving: it read page content (message identified by subject &quot;&lt;strong&gt;content&quot;&lt;/strong&gt;) and store them into a NoSQL database (MongoDB).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;API:&lt;/strong&gt; The process used by other process to gather informations. For example it is used by the &lt;strong&gt;Scheduler&lt;/strong&gt; to determinate if a page has been already crawled. Instead of directly calling the database to check if an URL exist (which would add extra coupling to the database technology) the scheduler use to API: this allow sort of abstraction between database / processes.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The different processes are written using Go: because it offer a lot of performance (since it's compiled as native binary) and has a lot of library support. Go is perfectly designed to build high performance distributed systems.&lt;/p&gt;
&lt;p&gt;The source code of Trandoshan is available on github here: &lt;a href=&quot;https://github.com/trandoshan-io&quot;&gt;https://github.com/trandoshan-io&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;how-to-run-trandoshan&quot;&gt;How to run Trandoshan ?&lt;/h2&gt;
&lt;p&gt;As said before Trandoshan is designed to run on distributed systems and is available as docker image which make it a great candidate for the cloud. In fact there is a repository which hold all configurations files needed to deploy a production instance of Trandoshan on a Kubernetes cluster. The files are available here: &lt;a href=&quot;https://github.com/trandoshan-io/k8s&quot;&gt;https://github.com/trandoshan-io/k8s&lt;/a&gt; and the containers images are available on &lt;a href=&quot;https://hub.docker.com/u/trandoshanio&quot;&gt;docker hub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you have a kubectl configured correctly, you can deploy Trandoshan in a simple command:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;./bootstrap.sh&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Otherwise you can run Trandoshan locally using docker and docker-compose. In the &lt;a href=&quot;https://github.com/trandoshan-io/trandoshan-parent&quot;&gt;trandoshan-parent&lt;/a&gt; repository there is a compose file and a shell script that allow the application to run using the following command:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;./deploy.sh&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;At the moment there is a little Angular application to search for indexed content. The page use the &lt;strong&gt;API&lt;/strong&gt; process to perform search on the database.&lt;/p&gt;
&lt;img src=&quot;https://creekorful.me/content/images/2019/09/Screenshot-from-2019-09-22-17-09-49.png&quot; class=&quot;kg-image&quot;/&gt;Screenshot of the dashboard

&lt;p&gt;That's all for the moment. Trandoshan is production ready but there's a lot of optimization to be done and features to be merged. Since it's an open source project everyone can contribute to it by doing a pull request on the corresponding project.&lt;/p&gt;
&lt;p&gt;Happy hacking !&lt;/p&gt;
&lt;/div&gt;&lt;div id=&quot;&quot;&gt;&lt;p&gt;Get the latest posts delivered right to your inbox.&lt;/p&gt;

&lt;/div&gt;&lt;div id=&quot;&quot;&gt;
&lt;section class=&quot;post-nav-teaser&quot; readability=&quot;27&quot;&gt;&lt;h2 class=&quot;post-nav-title&quot;&gt;Supervisor: a host management solution&lt;/h2&gt;
&lt;p class=&quot;post-nav-excerpt&quot;&gt;Back in 2015 I used to have a lot of devices connected…&lt;/p&gt;
&lt;/section&gt;
&lt;/div&gt;</description>
<pubDate>Mon, 23 Sep 2019 07:07:27 +0000</pubDate>
<dc:creator>aadlani</dc:creator>
<og:type>article</og:type>
<og:title>Building a fast modern web crawler</og:title>
<og:description>In this post you'll learn how to design and build a web crawler for the dark web</og:description>
<og:url>https://creekorful.me/building-fast-modern-web-crawler/</og:url>
<og:image>https://images.unsplash.com/photo-1558396935-6dee8f974923?ixlib=rb-1.2.1&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1080&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjExNzczfQ</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://creekorful.me/building-fast-modern-web-crawler/</dc:identifier>
</item>
</channel>
</rss>