<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Software Disenchantment (2018)</title>
<link>https://tonsky.me/blog/disenchantment/</link>
<guid isPermaLink="true" >https://tonsky.me/blog/disenchantment/</guid>
<description>&lt;img src=&quot;https://tonsky.me/blog/disenchantment/cover.jpg&quot; height=&quot;337&quot; /&gt;&lt;p&gt;&lt;em&gt;Translations: &lt;a href=&quot;https://tonsky.me/blog/disenchantment/it/&quot;&gt;Italian&lt;/a&gt; &lt;a href=&quot;https://muchtrans.com/translations/software-disenchantment.ko.html&quot; target=&quot;_blank&quot;&gt;Korean&lt;/a&gt; &lt;a href=&quot;https://tonsky.me/blog/disenchantment/pt/&quot;&gt;Portuguese&lt;/a&gt; &lt;a href=&quot;https://tonsky.me/blog/disenchantment/ru/&quot;&gt;Russian&lt;/a&gt; &lt;a href=&quot;https://tonsky.me/blog/disenchantment/es/&quot;&gt;Spanish&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I’ve been programming for 15 years now. Recently, our industry’s lack of care for efficiency, simplicity, and excellence started really getting to me, to the point of me getting depressed by my own career and IT in general.&lt;/p&gt;
&lt;p&gt;Modern cars work, let’s say for the sake of argument, at 98% of what’s physically possible with the current engine design. Modern buildings use just enough material to fulfill their function and stay safe under the given conditions. All planes converged to the optimal size/form/load and basically look the same.&lt;/p&gt;
&lt;p&gt;Only in software, it’s fine if a program runs at 1% or even 0.01% of the possible performance. Everybody just seems to be ok with it. People are often even proud about how inefficient it is, as in “why should we worry, computers are fast enough”:&lt;/p&gt;
&lt;blockquote readability=&quot;9.5575221238938&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/tveastman/status/1039002300600147968&quot;&gt;@tveastman&lt;/a&gt;: I have a Python program I run every day, it takes 1.5 seconds. I spent six hours re-writing it in rust, now it takes 0.06 seconds. That efficiency improvement means I’ll make my time back in 41 years, 24 days :-)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You’ve probably heard this mantra: “Programmer time is more expensive than computer time.” What it means basically is that we’re wasting computers at an unprecedented scale. Would you buy a car if it eats 100 liters per 100 kilometers? How about 1000 liters? With computers, we do that all the time.&lt;/p&gt;
&lt;a href=&quot;https://xkcd.com/2021/&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://tonsky.me/blog/disenchantment/software_development_2x.gif&quot; height=&quot;440&quot; /&gt;&lt;/a&gt;
&lt;h2 id=&quot;everything-is-unbearably-slow&quot;&gt;Everything is unbearably slow&lt;/h2&gt;
&lt;p&gt;Look around: our portable computers are thousands of times more powerful than the ones that brought man to the moon. Yet every other webpage struggles to maintain a smooth 60fps scroll on the latest top-of-the-line MacBook Pro. I can comfortably play games, watch 4K videos, but not scroll web pages? How is that ok?&lt;/p&gt;
&lt;p&gt;Google Inbox, a web app written by Google, running in Chrome browser also by Google, &lt;a href=&quot;https://twitter.com/nikitonsky/statuses/968882438024941568&quot;&gt;takes 13 seconds to open moderately-sized emails&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;It also animates empty white boxes instead of showing their content because it’s the only way anything can be animated on a webpage with decent performance. No, decent doesn’t mean 60fps, it’s rather “as fast as this web page could possibly go”. I’m dying to see the web community answer when 120Hz displays become mainstream. Shit barely hits 60Hz already.&lt;/p&gt;
&lt;p&gt;Windows 10 &lt;a href=&quot;https://grumpy.website/post/0PeXr1S7N&quot;&gt;takes 30 minutes to update&lt;/a&gt;. What could it possibly be doing for that long? That much time is enough to fully format my SSD drive, download a fresh build and install it like 5 times in a row.&lt;/p&gt;
&lt;img src=&quot;https://tonsky.me/blog/disenchantment/windows_update.gif&quot; height=&quot;435&quot; /&gt;&lt;blockquote readability=&quot;6.4166666666667&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://pavelfatin.com/typing-with-pleasure/&quot;&gt;Pavel Fatin&lt;/a&gt;: Typing in editor is a relatively simple process, so even 286 PCs were able to provide a rather fluid typing experience.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Modern text editors have higher latency than 42-year-old Emacs. Text editors! What can be simpler? On each keystroke, all you have to do is update a tiny rectangular region and modern text editors can’t do that in 16ms. It’s a lot of time. A LOT. A 3D game can fill the whole screen with hundreds of thousands (!!!) of polygons in the same 16ms and also process input, recalculate the world and dynamically load/unload resources. How come?&lt;/p&gt;
&lt;p&gt;As a general trend, we’re not getting faster software with more features. We’re getting faster hardware that runs slower software with the same features. Everything works way below the possible speed. Ever wonder why your phone needs 30 to 60 seconds to boot? Why can’t it boot, say, in one second? There are no physical limitations to that. I would love to see that. I would love to see limits reached and explored, utilizing every last bit of performance we can get for something meaningful in a meaningful way.&lt;/p&gt;
&lt;h2 id=&quot;everything-is-huuuuge&quot;&gt;Everything is HUUUUGE&lt;/h2&gt;
&lt;p&gt;And then there’s bloat. Web apps could open up to 10 times faster if you just simply blocked all ads. Google begs everyone to stop shooting themselves in the foot with the AMP initiative—a technology solution to a problem that doesn’t need any technology, just a little bit of common sense. If you remove bloat, the web becomes crazy fast. How smart do you have to be to understand that?&lt;/p&gt;
&lt;p&gt;An Android system with no apps &lt;a href=&quot;https://grumpy.website/post/0Oz1lDOq5&quot;&gt;takes up almost 6 GB&lt;/a&gt;. Just think for a second about how obscenely HUGE that number is. What’s in there, HD movies? I guess it’s basically code: kernel, drivers. Some string and resources too, sure, but those can’t be big. So, how many drivers do you need for a phone?&lt;/p&gt;
&lt;img src=&quot;https://tonsky.me/blog/disenchantment/android_storage.jpg&quot; height=&quot;489&quot; /&gt;&lt;p&gt;Windows 95 was 30MB. Today we have web pages heavier than that! Windows 10 is 4GB, which is 133 times as big. But is it 133 times as superior? I mean, functionally they are basically the same. Yes, we have Cortana, but I doubt it takes 3970 MB. But whatever Windows 10 is, is Android really 150% of that?&lt;/p&gt;
&lt;p&gt;Google’s keyboard app routinely eats 150 MB. Is an app that draws 30 keys on a screen really five times more complex than the whole Windows 95? Google app, which is basically just a package for Google Web Search, is 350 MB! Google Play Services, which I do not use (I don’t buy books, music or videos there)—300 MB that just sit there and which I’m unable to delete.&lt;/p&gt;
&lt;img src=&quot;https://tonsky.me/blog/disenchantment/apps_storage.gif&quot; height=&quot;480&quot; /&gt;&lt;p&gt;All that leaves me around 1 GB for my photos after I install all the essential (social, chats, maps, taxi, banks etc) apps. And that’s with no games and no music at all! Remember times when an OS, apps and all your data fit on a floppy?&lt;/p&gt;
&lt;p&gt;Your desktop todo app is probably written in Electron and thus &lt;a href=&quot;https://josephg.com/blog/electron-is-flash-for-the-desktop/&quot;&gt;has a userland driver for the Xbox 360 controller in it&lt;/a&gt;, can render 3D graphics and play audio and take photos with your web camera.&lt;/p&gt;
&lt;img src=&quot;https://tonsky.me/blog/disenchantment/slack_memory.jpg&quot; height=&quot;388&quot; /&gt;&lt;p&gt;A simple text chat is notorious for its load speed and memory consumption. Yes, you really have to count Slack in as a resource-heavy application. I mean, chatroom and barebones text editor, those are supposed to be two of the less demanding apps in the whole world. Welcome to 2018.&lt;/p&gt;
&lt;p&gt;At least it works, you might say. Well, bigger doesn’t imply better. Bigger means someone has lost control. Bigger means we don’t know what’s going on. Bigger means complexity tax, performance tax, reliability tax. This is not the norm and should not become the norm. Overweight apps should mean a red flag. They should mean run away scared.&lt;/p&gt;
&lt;h2 id=&quot;everything-rots&quot;&gt;Everything rots&lt;/h2&gt;
&lt;p&gt;A 16GB Android phone was perfectly fine 3 years ago. Today, with Android 8.1, it’s barely usable because each app has become at least twice as big &lt;em&gt;for no apparent reason&lt;/em&gt;. There are no additional features. They are not faster or more optimized. They don’t look different. They just…grow?&lt;/p&gt;
&lt;p&gt;The iPhone 4s was released with iOS 5, but can barely run iOS 9. And it’s not because iOS 9 is that much superior—it’s basically the same. But their new hardware is faster, so they made software slower. Don’t worry—you got exciting new capabilities like…running the same apps with the same speed! I dunno.&lt;/p&gt;
&lt;p&gt;iOS 11 dropped support for 32-bit apps. That means if the developer isn’t around at the time of the iOS 11 release or isn’t willing to go back and update a once-perfectly-fine app, chances are you won’t be seeing their app ever again.&lt;/p&gt;
&lt;blockquote readability=&quot;5.7055214723926&quot;&gt;
&lt;p&gt;@&lt;a href=&quot;https://twitter.com/jckarter/statuses/1017071794245623808&quot;&gt;jckarter&lt;/a&gt;: A DOS program can be made to run unmodified on pretty much any computer made since the 80s. A JavaScript app might break with tomorrow’s Chrome update&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Web pages working today &lt;a href=&quot;http://tonsky.me/blog/chrome-intervention/&quot;&gt;would not be compatible with any browser in 10 years time&lt;/a&gt; (probably sooner).&lt;/p&gt;
&lt;p&gt;“It takes all the running you can do, to keep in the same place”. But what’s the point? I might enjoy occasionally buying a new phone and new MacBook as much as the next guy, but to do so just to be able to run all the same apps which just became slower?&lt;/p&gt;
&lt;p&gt;I think we can and should do better than that. Everyone is busy building stuff for right now, today, rarely for tomorrow. But it would be nice to also have stuff that lasts a little longer than that.&lt;/p&gt;
&lt;h2 id=&quot;worse-is-better&quot;&gt;Worse is better&lt;/h2&gt;
&lt;p&gt;Nobody understands anything at this point. Neither do they want to. We just throw barely baked shit out there, hope for the best and call it “startup wisdom”.&lt;/p&gt;
&lt;p&gt;Web pages ask you to refresh if anything goes wrong. Who has time to figure out what happened?&lt;/p&gt;
&lt;img src=&quot;https://tonsky.me/blog/disenchantment/reload.jpg&quot; height=&quot;185&quot; /&gt;&lt;p&gt;Any web app produces a constant stream of “random” JS errors in the wild, even on compatible browsers.&lt;/p&gt;
&lt;p&gt;The whole webpage/SQL database architecture is built on a premise (hope, even) that nobody will touch your data while you look at the rendered webpage.&lt;/p&gt;
&lt;p&gt;Most collaborative implementations are “best effort” and have many common-life scenarios in which they lose data. Ever seen this dialogue “which version to keep?” I mean, the bar is so low today that your users would be happy to at least have a window like that.&lt;/p&gt;
&lt;img src=&quot;https://tonsky.me/blog/disenchantment/icloud_conflict.jpg&quot; height=&quot;468&quot; /&gt;&lt;p&gt;And no, in my world, an app that says “I’m gonna destroy some of your work, but you get to choose which one” is not okay.&lt;/p&gt;
&lt;p&gt;Linux kills random processes &lt;em&gt;by design&lt;/em&gt;. And yet it’s the most popular server-side OS.&lt;/p&gt;
&lt;p&gt;Every device I own fails regularly one way or another. My Dell monitor needs a hard reboot from time to time because there’s software in it. Airdrop? You’re lucky if it’ll detect your device, otherwise, what do I do? Bluetooth? The spec is so complex that devices &lt;a href=&quot;https://thewirecutter.com/blog/understanding-bluetooth-pairing-problems/&quot;&gt;won’t talk to each other&lt;/a&gt; and &lt;a href=&quot;http://time.com/4358533/bluetooth-fix-how/&quot;&gt;periodic resets are the best way to go&lt;/a&gt;.&lt;/p&gt;
&lt;img src=&quot;https://tonsky.me/blog/disenchantment/plz_connect.jpg&quot; height=&quot;450&quot; /&gt;&lt;p&gt;And I’m not even touching the &lt;a href=&quot;https://twitter.com/internetofshit&quot;&gt;Internet of Things&lt;/a&gt;. It’s so far beyond the laughing point I’m not even sure what to add.&lt;/p&gt;
&lt;p&gt;I want to take pride in my work. I want to deliver working, stable things. To do that, we need to understand what we are building, in and out, and that’s impossible to do in bloated, over-engineered systems.&lt;/p&gt;
&lt;h2 id=&quot;programming-is-the-same-mess&quot;&gt;Programming is the same mess&lt;/h2&gt;
&lt;p&gt;It just seems that nobody is interested in building quality, fast, efficient, lasting, foundational stuff anymore. Even when efficient solutions have been known for ages, we still struggle with the same problems: package management, build systems, compilers, language design, IDEs.&lt;/p&gt;
&lt;p&gt;Build systems are inherently unreliable and periodically require full clean, even though all info for invalidation is there. Nothing stops us from making build processes reliable, predictable and 100% reproducible. Just nobody thinks its important. NPM has stayed in “sometimes works” state for years.&lt;/p&gt;
&lt;blockquote readability=&quot;5.2941176470588&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/przemyslawdabek/status/940547268729606145&quot;&gt;@przemyslawdabek&lt;/a&gt;: It seems to me that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rm -rf node_modules&lt;/code&gt; is indispensable part of workflow when developing Node.js/JavaScript projects.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And build times? Nobody thinks compiler that works minutes or even hours is a problem. What happened to “programmer’s time is more important”? Almost all compilers, pre- and post-processors add significant, sometimes disastrous time tax to your build without providing proportionally substantial benefits.&lt;/p&gt;
&lt;a href=&quot;https://xkcd.com/303/&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://tonsky.me/blog/disenchantment/compiling.gif&quot; height=&quot;360&quot; /&gt;&lt;/a&gt;
&lt;p&gt;You would expect programmers to make mostly rational decisions, yet sometimes they do the exact opposite of that. E.g. choosing Hadoop &lt;a href=&quot;https://www.chrisstucchio.com/blog/2013/hadoop_hatred.html&quot;&gt;even when it’s slower than running the same task on a single desktop&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Machine learning and “AI” moved software to guessing in the times when most computers are not even reliable enough in the first place.&lt;/p&gt;
&lt;blockquote readability=&quot;11.695652173913&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/freetonik/status/1039826129190875136&quot;&gt;@rakhim&lt;/a&gt;: When an app or a service is described as “AI-powered” or “ML-based”, I read it as “unreliable, unpredictable, and impossible to reason about behavior”. I try to avoid “AI” because I want computers to be the opposite: reliable, predictable, reasonable.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We put virtual machines inside Linux, and then we put Docker inside virtual machines, simply because nobody was able to clean up the mess that most programs, languages and their environment produce. We cover shit with blankets just not to deal with it. “Single binary” is still a HUGE selling point for Go, for example. No mess == success.&lt;/p&gt;
&lt;a href=&quot;https://xkcd.com/1987/&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://tonsky.me/blog/disenchantment/python_environment_2x.gif&quot; height=&quot;594&quot; /&gt;&lt;/a&gt;
&lt;p&gt;And dependencies? People easily add overengineered “full package solutions” to solve the simplest problems without considering their costs. And those dependencies bring other dependencies. You end up with a tree that is something in between of horror story (OMG so big and full of conflicts) and comedy (there’s no reason we include these, &lt;a href=&quot;https://medium.com/@jdan/i-peeked-into-my-node-modules-directory-and-you-wont-believe-what-happened-next-b89f63d21558&quot;&gt;yet here they are&lt;/a&gt;):&lt;/p&gt;
&lt;img src=&quot;https://tonsky.me/blog/disenchantment/dependencies.gif&quot; height=&quot;440&quot; /&gt;&lt;p&gt;Programs can’t work for years without reboots anymore. Sometimes &lt;a href=&quot;https://docs.gitlab.com/ee/administration/operations/unicorn.html#unicorn-worker-killer&quot;&gt;even days are too much to ask&lt;/a&gt;. Random stuff happens and nobody knows why.&lt;/p&gt;
&lt;p&gt;What’s worse, nobody has time to stop and figure out what happened. Why bother if you can always buy your way out of it. Spin another AWS instance. Restart process. Drop and restore the whole database. Write a watchdog that will restart your broken app every 20 minutes. Include same resources &lt;a href=&quot;https://blog.timac.org/2017/0410-analysis-of-the-facebook-app-for-ios-v-87-0/&quot;&gt;multiple times, zip and ship&lt;/a&gt;. Move fast, don’t fix.&lt;/p&gt;
&lt;p&gt;That is not engineering. That’s just lazy programming. Engineering is understanding performance, structure, limits of what you build, deeply. Combining poorly written stuff with more poorly written stuff goes strictly against that. To progress, we need to understand what and why are we doing.&lt;/p&gt;
&lt;h2 id=&quot;were-stuck-with-it&quot;&gt;We’re stuck with it&lt;/h2&gt;
&lt;p&gt;So everything is just a pile of barely working code added on top of previously written barely working code. It keeps growing in size and complexity, diminishing any chance for a change.&lt;/p&gt;
&lt;p&gt;To have a healthy ecosystem you &lt;em&gt;need&lt;/em&gt; to go back and revisit. You &lt;em&gt;need&lt;/em&gt; to occasionally throw stuff away and replace it with better stuff.&lt;/p&gt;
&lt;img src=&quot;https://tonsky.me/blog/disenchantment/design_process.jpg&quot; height=&quot;657&quot; /&gt;&lt;p&gt;But who has time for that? We haven’t seen new OS kernels in what, 25 years? It’s just too complex to simply rewrite by now. Browsers are so full of edge cases and historical precedents by now that nobody dares to write layout engine from scratch.&lt;/p&gt;
&lt;p&gt;Today’s definition of progress is either throw more fuel into the fire:&lt;/p&gt;
&lt;blockquote readability=&quot;6.7466063348416&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/sahrizv/status/1018184792611827712&quot;&gt;@sahrizv&lt;/a&gt;: 2014 - We must adopt #microservices to solve all problems with monoliths.&lt;br /&gt;2016 - We must adopt #docker to solve all problems with microservices.&lt;br /&gt;2018 - We must adopt #kubernetes to solve all problems with docker&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;or reinventing the wheel:&lt;/p&gt;
&lt;blockquote readability=&quot;6.7383177570093&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/dr_c0d3/status/1040092903052378112&quot;&gt;@dr_c0d3&lt;/a&gt;: 2000: Write 100s of lines of XML to “declaratively” configure your servlets and EJBs.&lt;br /&gt;2018: Write 100s of lines of YAML to “declaratively” configure your microservices.&lt;br /&gt;At least XML had schemas…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We’re stuck with what we have, and nobody will ever save us.&lt;/p&gt;
&lt;h2 id=&quot;business-wont-care&quot;&gt;Business won’t care&lt;/h2&gt;
&lt;p&gt;Neither will users. They are only learned to expect what we can provide. We (engineers) say every Android app takes 350 MB? Ok, they’ll live with that. We say we can’t give them smooth scrolling? Ok, they’ll live with a phone that stutter. We say “if it doesn’t work, reboot”? They’ll reboot. After all, they have no choice.&lt;/p&gt;
&lt;p&gt;There’s no competition either. Everybody is building the same slow, bloated, unreliable products. Occasional jump forward in quality does bring competitive advantage (iPhone/iOS vs other smartphones, Chrome vs other browsers) and forces everybody to regroup, but not for long.&lt;/p&gt;
&lt;p&gt;So it’s our mission as engineers to show the world what’s possible with today’s computers in terms of performance, reliability, quality, usability. If we care, people will learn. And there’s nobody but us to show them that it’s very much possible. If only we care.&lt;/p&gt;
&lt;h2 id=&quot;its-not-all-bad&quot;&gt;It’s not all bad&lt;/h2&gt;
&lt;p&gt;There are some bright spots indicating that improving over state-of-the-art is not impossible.&lt;/p&gt;
&lt;p&gt;Work &lt;a href=&quot;https://twitter.com/mjpt777&quot;&gt;Martin Thompson&lt;/a&gt; has being doing (&lt;a href=&quot;https://github.com/LMAX-Exchange/disruptor&quot;&gt;LMAX Disruptor&lt;/a&gt;, &lt;a href=&quot;https://github.com/real-logic/simple-binary-encoding&quot;&gt;SBE&lt;/a&gt;, &lt;a href=&quot;https://github.com/real-logic/aeron&quot;&gt;Aeron&lt;/a&gt;) is impressive, refreshingly simple and efficient.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/google/xi-editor&quot;&gt;Xi editor&lt;/a&gt; by Raph Levien seems to be built with the right principles in mind.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/user/jblow888&quot;&gt;Jonathan Blow&lt;/a&gt; has a language he alone develops for his game that can compile 500k lines per second on his laptop. That’s cold compile, no intermediate caching, no incremental builds.&lt;/p&gt;
&lt;p&gt;You don’t have to be a genius to write fast programs. There’s no magic trick. The only thing required is not building on top of a huge pile of crap that modern toolchain is.&lt;/p&gt;
&lt;h2 id=&quot;better-world-manifesto&quot;&gt;Better world manifesto&lt;/h2&gt;
&lt;p&gt;I want to see progress. I want change. I want state-of-the-art in software engineering to improve, not just stand still. I don’t want to reinvent the same stuff over and over, less performant and more bloated each time. I want something to believe in, a worthy end goal, a future better than what we have today, and I want a community of engineers who share that vision.&lt;/p&gt;
&lt;p&gt;What we have today is not progress. We barely meet business goals with poor tools applied over the top. We’re stuck in local optima and nobody wants to move out. It’s not even a good place, it’s bloated and inefficient. We just somehow got used to it.&lt;/p&gt;
&lt;p&gt;So I want to call it out: where we are today is bullshit. As engineers, we can, and should, and will do better. We can have better tools, we can build better apps, faster, more predictable, more reliable, using fewer resources (orders of magnitude fewer!). We need to understand deeply what we are doing and why. We need to deliver: reliably, predictably, with topmost quality. We can—and should–take pride in our work. Not just “given what we had…”—no buts!&lt;/p&gt;
&lt;p&gt;I hope I’m not alone at this. I hope there are people out there who want to do the same. I’d appreciate if we at least start talking about how absurdly bad our current situation in the software industry is. And then we maybe figure out how to get out.&lt;/p&gt;

&lt;div class=&quot;about&quot; readability=&quot;8.456043956044&quot;&gt;

&lt;div class=&quot;about_inner&quot; readability=&quot;12.461538461538&quot;&gt;
&lt;p&gt;Hi!&lt;/p&gt;
&lt;p&gt;I’m Nikita. Here I write about programming and UI design &lt;a class=&quot;btn-subscribe&quot; href=&quot;https://tonsky.me/blog/how-to-subscribe/&quot; target=&quot;_blank&quot;&gt;Subscribe&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I also create open-source stuff: Fira Code, AnyBar, DataScript and Rum. If you like what I do and want to get early access to my articles (along with other benefits), you should &lt;a href=&quot;https://patreon.com/tonsky&quot; target=&quot;_blank&quot;&gt;support me on Patreon&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Wed, 01 Jan 2020 18:48:33 +0000</pubDate>
<dc:creator>ibdknox</dc:creator>
<og:title>Software disenchantment</og:title>
<og:url>https://tonsky.me/blog/disenchantment/</og:url>
<og:type>article</og:type>
<og:description>Everything is going to hell and nobody seems to care</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://tonsky.me/blog/disenchantment/</dc:identifier>
</item>
<item>
<title>Godot Engine – A decade in retrospective and future</title>
<link>https://godotengine.org/article/retrospective-and-future</link>
<guid isPermaLink="true" >https://godotengine.org/article/retrospective-and-future</guid>
<description>&lt;img data-src=&quot;godecade.png&quot; src=&quot;https://godotengine.org/storage/app/uploads/public/5e0/b8b/0c0/5e0b8b0c04557983735004.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt;

&lt;h4 class=&quot;author&quot;&gt;By: Juan Linietsky &lt;span class=&quot;date&quot;&gt;Dec 31, 2019&lt;/span&gt;&lt;/h4&gt;
&lt;/p&gt;&lt;p&gt;The dawn of a new decade looms and there is a lot of excitement about the future of Godot! But it was not always like this, as the previous decade did not go as expected..&lt;/p&gt;
&lt;h3&gt;The beginning&lt;/h3&gt;
&lt;p&gt;Ten years ago, Ariel Manzur and I were convinced that our future was going to be as entrepreneurs, using to our advantage the vast experience we amassed as game technology consultants during the 2000s and the tools (by that time already called Godot, as far as I remember) that we had created for use by our clients.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://godotengine.org/storage/app/uploads/public/5e0/b83/849/5e0b838492e95726884765.jpeg&quot; alt=&quot;Early 2010s screenshot of Godot before the open sourcing&quot;/&gt;&lt;em&gt;Early 2010s screenshot of Godot before the open sourcing&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We were strong in technology, but we lacked the rest, so we decided to join the very talented and creative people from Okam to work together. As we wanted to continue using the technology we developed before (and were not interested on selling it, we wanted to make games), we made it open source and put it on GitHub.&lt;/p&gt;
&lt;p&gt;Things did not really go as planned though. Even though the company had a stellar take off, to the point we managed to work for companies like Square Enix, Turner, etc. and even made our own games (Dog Mendonça), the truth is that the country we live in (Argentina) is too unstable politically and economically, which made it very difficult and stressing for the company to continue operating.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://godotengine.org/storage/app/uploads/public/5e0/b85/d9d/5e0b85d9d3edb853495694.png&quot; alt=&quot;Games made with Godot before open sourcing&quot;/&gt;&lt;em&gt;Games made with Godot before open sourcing&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Change of plans, Godot becomes a hobby&lt;/h3&gt;
&lt;p&gt;At the time (around 2014), I was just planning to move away and start over somewhere else, in a region with a more stable economy. In the meantime, I went back to work as a consultant (and started specializing in game business consulting too) and Ariel remained working as his own company (Lone Wolf Technology). For me, Godot became more or less a hobby. It was fun to get feedback from users, which would often complain about how terrible usability was (of course, Godot had always been a licensed and in-house engine). Almost no one would contribute code for a long time, so all I did was fix the issues reported by users in my free time.&lt;/p&gt;
&lt;p&gt;After a year, &lt;a href=&quot;https://godotengine.org/article/godot-engine-reaches-1-0&quot;&gt;version 1.0 was released&lt;/a&gt;. This was cool but users really complained about the many limitations of the 2D engine (and 3D being outright unusable), so many months of work resulted in a 1.1 release with &lt;a href=&quot;https://godotengine.org/article/godot-1-1-out&quot;&gt;improved 2D features&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://godotengine.org/storage/app/uploads/public/5e0/b86/9eb/5e0b869ebd618160831355.png&quot; alt=&quot;Screenshot of Godot 1.0&quot;/&gt;&lt;em&gt;Godot 1.0, released in December 2014&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Usability remained as the main complaint, though. Users still had to go through a lot of steps to do things that were simpler in other engines. Their feedback was heard and, several months later, &lt;a href=&quot;https://godotengine.org/article/godot-engine-reaches-2-0-stable&quot;&gt;Godot 2.0 came out&lt;/a&gt;. The work on improving usability continued until &lt;a href=&quot;https://godotengine.org/article/godot-reaches-2-1-stable&quot;&gt;2.1 finally came out&lt;/a&gt; at the end of 2016.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://godotengine.org/storage/app/uploads/public/5e0/b86/b5e/5e0b86b5e5873141503256.png&quot; alt=&quot;Screenshot of Godot 2.0&quot;/&gt;&lt;em&gt;Godot 2.0, released in February 2016&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Godot starts growing&lt;/h3&gt;
&lt;p&gt;Users were beginning to be happy with 2D, so I moved focus to improving the 3D part of the engine, modernizing it and implementing physically based rendering and some more modern features. At the same time, the amount of issues and pull request opened kept growing and I was starting to lose grasp of everything (remember that, at the time, I was doing consulting as my main full time job, and working on Godot on the side).&lt;/p&gt;
&lt;p&gt;In parallel, the project was blessed by the arrival of Rémi Verschelde in 2015, who quickly took over project management and the interaction with all contributors. That allowed the project to start expanding in code, docs, etc. much faster than before. Rémi took over release management, which meant maintenance releases for stable branches (2.0 was the first release to get 2.0.x maintenance versions).&lt;/p&gt;
&lt;p&gt;At the same time, the work towards 3.0 took an unexpected turn. As before being open, Godot was used in many commercial projects (for both our clients and later our company), a lot of the code-base remained set in stone to avoid breaking compatibility. This led to a very long TODO list of things that would be nice to refactor. But this was no longer a problem at this time, because we had no longer any commercial obligation with anyone regarding the code-base.&lt;/p&gt;
&lt;p&gt;Because of this, Godot 3.0 took much longer than expected, as we performed a massive refactor of most of the code-base, resulting in huge usability gains (and huge compatibility breaking that many of our users hated, sorry :( ).&lt;/p&gt;
&lt;p&gt;By the time Godot 3.0 was released, it had begun amassing a very significant community of users and contributors. Still tiny compared to other technologies, but enough to put it on the radar.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://godotengine.org/storage/app/uploads/public/5e0/b87/225/5e0b87225348f403410178.jpg&quot; alt=&quot;Screenshot of Godot 3.0&quot;/&gt;&lt;em&gt;Godot 3.0, released in January 2018&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Change of plans again, no longer a hobby&lt;/h3&gt;
&lt;p&gt;To be completely honest, my plan up to this point remained unchanged. I wanted to leave the country and start over a new game development company somewhere else. Of course, during the years I was working as a consultant, it crossed my mind that it might be possible to turn Godot into a non-profit organization and ask for donations (which is why we signed with Ariel to put the project in the &lt;a href=&quot;https://sfconservancy.org/&quot;&gt;Software Freedom Conservancy&lt;/a&gt; from the beginning), but the idea seemed too far away (and I was not completely sure I wanted to stop developing games).&lt;/p&gt;
&lt;p&gt;But life often &lt;a href=&quot;https://www.kickstarter.com/projects/gdquest/make-professional-2d-games-godot-engine-online-cou&quot;&gt;slaps you in the face&lt;/a&gt; and shows that you are wrong, and I realized that others were already doing Godot-based consulting jobs or successful Kickstarters to create tutorials.&lt;/p&gt;
&lt;p&gt;We set up a Patreon and started asking for donations so I could work &lt;a href=&quot;https://www.patreon.com/godotengine&quot;&gt;full-time&lt;/a&gt;. Goal was met quickly.&lt;/p&gt;
&lt;p&gt;This was an extremely hard decision to make, because at the time, my experience (been making games and technology since the 90s) was paid a lot more, and I was receiving extremely good job offers from companies around the world due to my work on Godot. Still, the fact that the project became so important for many and the hope that it will continue growing made me change plans yet again.&lt;/p&gt;
&lt;p&gt;Eventually, the same happened to Rémi (who many may not know is an Energy Engineer), and he also changed his life plans and profession to work full time for the project.&lt;/p&gt;
&lt;p&gt;In fact, thanks to community and company donations, Godot now employs many of our contributors:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Ignacio Roldán Etcheverry is employed part-time to work on C# thanks to a generous grant from Microsoft.&lt;/li&gt;
&lt;li&gt;Fabio Alessandreli is employed part-time to work on networking, web-sockets and HTML5 thanks to a generous award from Mozilla.&lt;/li&gt;
&lt;li&gt;Fernando Calabró (who made the art for the TPS demo) is now hired to create art for a new third person platformer demo. This is a bigger and more complex demo, which hopefully be done by the time Godot 4.0 is out.&lt;/li&gt;
&lt;li&gt;George Marques has recently been hired as a generalist thanks to community donations.&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Godot 3.0 and a dose of realism&lt;/h3&gt;
&lt;p&gt;Back to the retrospective, something unexpected happened during the late part of Godot 3.0 development. We decided to use OpenGL ES 3.0 / OpenGL 3.3 for Godot 3. It looked like a great choice, having a very nice API and it would work perfectly on desktop and mobile. Reality has &lt;a href=&quot;https://godotengine.org/article/abandoning-gles3-vulkan-and-gles2&quot;&gt;shown us otherwise&lt;/a&gt;, so only a month after releasing 3.0 we realized we would need to leave OpenGL behind.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://godotengine.org/storage/app/uploads/public/5e0/b87/bb2/5e0b87bb2df48404553151.png&quot; alt=&quot;Illustration for Godot's announcement of planned Vulkan support&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Still, the explosion in new users and contributors, and the fact it took us a year and half to push Godot 3.0 out of the door, forced us to keep our expectations in check. There were massive amounts of bugs resulting from all the code rewrite and new features for Godot 3.0, so we had to spend an entire year fixing bugs and improving usability, while the 3D engine had to be more or less set in stone (given the plan was to rewrite it in Vulkan, anyway).&lt;/p&gt;
&lt;p&gt;Additionally, OpenGL ES 3.0 was barely working for a lot of mobile hardware, so we had to go back to add an OpenGL ES 2.0 / OpenGL 2.1 renderer again, but still using the new PBR design of Godot 3.0.&lt;/p&gt;
&lt;p&gt;After a very intense year of work, we finally managed to release &lt;a href=&quot;https://godotengine.org/article/godot-3-1-released&quot;&gt;Godot 3.1&lt;/a&gt;, which then again contributed to another boost in the amount of users, given that the engine was a lot more stable and usable.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://godotengine.org/storage/app/uploads/public/5e0/b88/c66/5e0b88c660334537087053.png&quot; alt=&quot;Interest over time in &quot; godot=&quot;&quot; on=&quot;&quot; google=&quot;&quot;/&gt;&lt;em&gt;Interest over time in &quot;Godot Engine&quot; on Google Trends&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;GodotCons&lt;/h3&gt;
&lt;p&gt;As the project started growing, Godot Conferences started being organized, this way most of the core contributors could meet face to face. This greatly improved discussions and decision-making in key areas.&lt;/p&gt;
&lt;p&gt;Nowadays, we meet several times a year in Europe. In fact you are welcome to &lt;a href=&quot;https://godotengine.org/article/meet-community-fosdem-and-godotcon-2020&quot;&gt;join us next month&lt;/a&gt; in Brussels!&lt;/p&gt;
&lt;h3&gt;New goals&lt;/h3&gt;
&lt;p&gt;Afterwards, the plan was to &quot;split&quot; teams, as I would work on the Vulkan branch (which will become the master branch soon, and is expected to release as Godot 4.0 by mid 2020) and Rémi would manage with the rest of the contributors the release of Godot 3.2 (for the first time, entirely on his own, and he is doing an amazing job so far).&lt;/p&gt;
&lt;p&gt;And then a decade has gone by. The almost six years since Godot was open-sourced were a roller-coaster. It's hard to believe so much happened in such a short amount of time.&lt;/p&gt;
&lt;h3&gt;Future&lt;/h3&gt;
&lt;p&gt;Today, Godot has over a thousand contributors and an amazing user community. The new 3.2 version will hopefully be released this month (January 2020), with even better and improved usability and stability, and putting an end to our best release cycle yet.&lt;/p&gt;
&lt;p&gt;Afterwards, the Vulkan branch will become master (it will be pretty unstable for a while, so definitely not advised for production). The plan is to not add a lot of new general features in 4.0 and focus exclusively on bringing rendering quality and performance on par with mainstream game engines.&lt;/p&gt;
&lt;p&gt;Of course, as always, keep in mind that all this is done with ease of use as our first priority, as Godot is designed so that small and medium sized teams, as well as individual developers, have the best possible tool for the games they want to make.&lt;/p&gt;
&lt;p&gt;The new rendering architecture will also allow companies working on console ports to more efficiently port the engine and offer our users the possibility of running their games on the most popular game consoles (something we will, unfortunately, never be able to offer officially due to legal reasons, thus forcing us to cooperate with companies porting it on their own).&lt;/p&gt;
&lt;p&gt;So, to everyone contributing, using, following or &lt;a href=&quot;https://www.patreon.com/godotengine&quot;&gt;donating&lt;/a&gt; to Godot development, have a happy new decade! From the bottom of our hearts, lets hope our hard work will help you one day make your dream games come true!&lt;/p&gt;
</description>
<pubDate>Wed, 01 Jan 2020 16:42:43 +0000</pubDate>
<dc:creator>perakojotgenije</dc:creator>
<og:image>https://godotengine.org/storage/app/uploads/public/5e0/b8b/0c0/5e0b8b0c04557983735004.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://godotengine.org/article/retrospective-and-future</dc:identifier>
</item>
<item>
<title>What Will Happen in the 2020s</title>
<link>https://avc.com/2020/01/what-will-happen-in-the-2020s/</link>
<guid isPermaLink="true" >https://avc.com/2020/01/what-will-happen-in-the-2020s/</guid>
<description>&lt;p&gt;It’s 2020. Time to look forward to the decade that is upon us.&lt;/p&gt;
&lt;p&gt;One of my favorite quotes, attributed to Bill Gates, is that people overestimate what will happen in a year and underestimate what will happen in a decade.&lt;/p&gt;
&lt;p&gt;This is an important decade for mankind. It is a decade in which we will need to find answers to questions that hang over us like last night’s celebrations.&lt;/p&gt;
&lt;p&gt;I am an optimist and believe in society’s ability to find the will to face our challenges and the intelligence to find solutions to them.&lt;/p&gt;
&lt;p&gt;So, I am starting out 2020 in an optimistic mood and here are some predictions for the decade that we are now in.&lt;/p&gt;
&lt;p&gt;1/ The looming climate crisis will be to this century what the two world wars were to the previous one. It will require countries and institutions to re-allocate capital from other endeavors to fight against a warming planet. This is the decade we will begin to see this re-allocation of capital. We will see carbon taxed like the vice that it is in most countries around the world this decade, including in the US. We will see real estate values collapse in some of the most affected regions and we will see real estate values increase in regions that benefit from the warming climate. We will see massive capital investments made in protecting critical regions and infrastructure. We will see nuclear power make a resurgence around the world, particularly smaller reactors that are easier to build and safer to operate. We will see installed solar power worldwide go from ~650GW currently to over 20,000GW by the end of this decade. All of these things and many more will cause the capital markets to focus on and fund the climate issue to the detriment of many other sectors.&lt;/p&gt;
&lt;p&gt;2/ Automation will continue to take costs out of operating many of the services and systems that we rely on to live and be productive. The fight for who should have access to this massive consumer surplus will define the politics of the 2020s. We will see capitalism come under increasing scrutiny and experiments to reallocate wealth and income more equitably will produce a new generation of world leaders who ride this wave to popularity.&lt;/p&gt;
&lt;p&gt;3/ China will emerge as the world’s dominant global superpower leveraging its technical prowess and ability to adapt quickly to changing priorities (see #1). Conversely the US becomes increasingly internally focused and isolationist in its world view.&lt;/p&gt;
&lt;p&gt;4/ Countries will create and promote digital/crypto versions of their fiat currencies, led by China who moves first and benefits the most from this move. The US will be hamstrung by regulatory restraints and will be slow to move, allowing other countries and regions to lead the crypto sector. Asian crypto exchanges, unchecked by cumbersome regulatory restraints in Europe and the US and leveraging decentralized finance technologies, will become the dominant capital markets for all types of financial instruments.&lt;/p&gt;
&lt;p&gt;5/ A decentralized internet will emerge, led initially by decentralized infrastructure services like storage, bandwidth, compute, etc. The emergence of decentralized consumer applications will be slow to take hold and a killer decentralized consumer app will not emerge until the latter part of the decade.&lt;/p&gt;
&lt;p&gt;6/ Plant based diets will dominate the world by the end of the decade. Eating meat will become a delicacy, much like eating caviar is today. Much of the world’s food production will move from farms to laboratories.&lt;/p&gt;
&lt;p&gt;7/ The exploration and commercialization of space will be dominated by private companies as governments increasingly step back from these investments. The early years of this decade will produce a wave of hype and investment in the space business but returns will be slow to come and we will be in a trough of disillusionment on the space business as the decade comes to an end.&lt;/p&gt;
&lt;p&gt;8/ Mass surveillance by governments and corporations will become normal and expected this decade and people will increasingly turn to new products and services to protect themselves from surveillance. The biggest consumer technology successes of this decade will be in the area of privacy.&lt;/p&gt;
&lt;p&gt;9/ We will finally move on from the Baby Boomers dominating the conversation in the US and around the world and Millennials and Gen-Z will be running many institutions by the end of the decade. Age and experience will be less valued by shareholders, voters, and other stakeholders and vision and courage will be valued more.&lt;/p&gt;
&lt;p&gt;10/ Continued advancements in genetics will produce massive wins this decade as cancer and other terminal illnesses become well understood and treatable. Fertility and reproduction will be profoundly changed. Genetics will also create new diseases and moral/ethical issues that will confound and confuse society. Balancing the gains and losses that come from genetics will be our greatest challenge in this decade.&lt;/p&gt;
&lt;p&gt;That’s ten predictions, enough for now and enough for me. I hope I made you think as much as I made myself think writing this. That’s the goal. It is impossible to be right about all of this. But it is important to be thinking about it.&lt;/p&gt;
&lt;p&gt;I know that comments here at AVC are broken at the moment and so I look forward to the conversation on email and Twitter and elsewhere.&lt;/p&gt;
</description>
<pubDate>Wed, 01 Jan 2020 16:29:42 +0000</pubDate>
<dc:creator>gz5</dc:creator>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://avc.com/2020/01/what-will-happen-in-the-2020s/</dc:identifier>
</item>
<item>
<title>How to stay private when using Android</title>
<link>https://protonmail.com/blog/android-privacy/</link>
<guid isPermaLink="true" >https://protonmail.com/blog/android-privacy/</guid>
<description>&lt;p&gt;The smartphone is one of the most invasive devices ever invented. It’s easy to forget that, of course, because we are so familiar with them, and they are so useful. But while you might value your smartphone for the convenience it gives you, tech companies value it for an entirely different reason: it is collecting data on everything you do.&lt;/p&gt;
&lt;p&gt;If you believe, like us, that &lt;a rel=&quot;noreferrer noopener&quot; aria-label=&quot; (opens in a new tab)&quot; href=&quot;https://protonmail.com/blog/internet-privacy/&quot; target=&quot;_blank&quot;&gt;privacy is a human right&lt;/a&gt;, Android is &lt;a href=&quot;https://digitalcontentnext.org/wp-content/uploads/2018/08/DCN-Google-Data-Collection-Paper.pdf&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot; aria-label=&quot; (opens in a new tab)&quot;&gt;something of a nightmare&lt;/a&gt;. Most people who use Google services are aware the company is tracking their location, checking which websites they go to, recording their voice, and reading their emails. What a lot of people forget is that Android was developed by Google, and is one of the most important tools for this data collection.&lt;/p&gt;
&lt;p&gt;It is possible, though, to use Android in a way that drastically limits the amount of data you are sharing with Google (and other companies who want your data). In this guide, we’ll show you how to do that.&lt;/p&gt;
&lt;p&gt;In each step below, we’ll show you how to use the settings menu on your device to increase your security and privacy. Most of the menus we mention will be the same for most current Android devices, but since devices vary you might find these options in a slightly different location or named differently. With a little poking around in your device’s menu, you should be able to find the relevant option. &lt;/p&gt;
&lt;h2&gt;The basic principle: Turn everything off&lt;/h2&gt;
&lt;p&gt;Before we begin with the specific steps necessary to make your Android device more private, let’s highlight a basic principle of using your phone: turn off all the connectivity you do not need.&lt;/p&gt;
&lt;p&gt;This goes for whatever smartphone, and whichever operating system, you have. Don’t let your phone connect to unknown WiFi networks because they may be a source of malware. Don’t leave your Bluetooth on because there are plenty of &lt;a rel=&quot;noreferrer noopener&quot; aria-label=&quot; (opens in a new tab)&quot; href=&quot;https://www.csoonline.com/article/3431705/are-you-being-tracked-through-a-bluetooth-security-vulnerability.html&quot; target=&quot;_blank&quot;&gt;Bluetooth security vulnerabilities&lt;/a&gt;. Don’t connect your phone to your computer (if you can avoid it), because smartphones can also act as a reservoir of malware, and your phone can be infected without you realizing it. &lt;/p&gt;
&lt;p&gt;In short: if you are not using a service right now, turn it off.&lt;/p&gt;
&lt;p&gt;With that out of the way, let’s make your phone more secure. Here is a short(ish) list of how to do that.&lt;/p&gt;
&lt;h2&gt;1. Avoid Google Data Protection&lt;/h2&gt;
&lt;p&gt;First and foremost, you should be aware of &lt;a href=&quot;https://protonmail.com/blog/google-fake-online-privacy/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot; aria-label=&quot; (opens in a new tab)&quot;&gt;Google’s fake commitment to privacy&lt;/a&gt; and limit the data the company collects from your phone. Android phones let you do this, but it is hidden. Go to your settings, and look for “activity controls.” Here, you can limit the data that Google is collecting via your phone. &lt;/p&gt;
&lt;p&gt;Going further, you can even use your Google device without signing into your Google account. Unfortunately, this really limits what you can do with your phone. &lt;/p&gt;
&lt;h2&gt;2. Use a PIN&lt;/h2&gt;
&lt;p&gt;Another basic privacy step is to lock your phone with a personal identification number (PIN). Locking your phone prevents random strangers from being able to get into it and keeps your data private in the event that your phone is stolen or one of your friends “borrows” it.&lt;/p&gt;
&lt;p&gt;When you set up a PIN on your device, some versions of Android will ask you if you want to encrypt the device as well. This is also a good idea, and we’ll come to that process shortly.&lt;/p&gt;
&lt;p&gt;In 2019, it might seem a bit old-fashioned to use a PIN (or, even better, an &lt;a rel=&quot;noreferrer noopener&quot; aria-label=&quot; (opens in a new tab)&quot; href=&quot;https://protonmail.com/blog/how-to-create-a-strong-password/&quot; target=&quot;_blank&quot;&gt;alphanumeric password&lt;/a&gt;), but in terms of data privacy, a PIN is still king. That’s because if you are using the other locking methods that Android provides — your fingerprint or face recognition — you are consenting for this biometric information to be stored on your phone, and &lt;a href=&quot;https://www.cnet.com/how-to/google-collects-face-data-now-what-it-means-and-how-to-opt-out/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot; aria-label=&quot; (opens in a new tab)&quot;&gt;occasionally transmitted to Google&lt;/a&gt;. &lt;/p&gt;
&lt;h2&gt;3. Encrypt your device&lt;/h2&gt;
&lt;p&gt;Encrypting your entire phone is pretty simple, but not many people do this. &lt;a href=&quot;https://protonmail.com/support/knowledge-base/what-is-encryption/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot; aria-label=&quot; (opens in a new tab)&quot;&gt;Encryption&lt;/a&gt;, though, is by far the best way to keep your data private, whether your phone is hacked or stolen.&lt;/p&gt;
&lt;p&gt;Encrypting your phone can be done from the “security” menu in Android. You need to enter a PIN to do this, and the phone needs to be plugged in. Just don’t forget the PIN, because if you do all of the data on your phone may be lost forever.&lt;/p&gt;
&lt;h2&gt;4. Keep your software up-to-date&lt;/h2&gt;
&lt;p&gt;Everyone knows that keeping your software up-to-date is incredibly important, but even the most security-conscious people sometimes skip that annoying notification. If you don’t keep your phone updated, you are opening yourself up to vulnerabilities that can be exploited by hackers to steal your data.&lt;/p&gt;
&lt;p&gt;In Android, you can update your software at any time by going to Settings &amp;gt; About Phone &amp;gt; System Update.&lt;/p&gt;
&lt;h2&gt;5. Be wary of unknown sources&lt;/h2&gt;
&lt;p&gt;By default, Android locks down the sources of software you can use by only allowing you to download apps from “approved sources” that have been vetted by Android developers. This is actually something that Android has inherited from Linux, which the OS is based on. However, sometimes your phone asks you to enable “unknown sources” for software, and if you’re in a rush you can accidentally turn this on. You should never trust software from these sources: some of it is malware, and some of it is merely riddled with security flaws.&lt;/p&gt;
&lt;p&gt;To disable unknown software sources, go to Settings &amp;gt; Security &amp;gt; Unknown Sources, and uncheck the box. It’s probably not enabled anyway, but it doesn’t hurt to check.&lt;/p&gt;
&lt;h2&gt;6. Check app permissions&lt;/h2&gt;
&lt;p&gt;Yep. You know already that you should carefully check all of the permissions that an app asks for when you install it, but in a hurry you may not. There is no hard-and-fast rule when it comes to checking these permissions, but there is a good guiding principle: are the permissions an app is asking for appropriate for what it does? Does this silly game you’ve downloaded really need to access your camera, contacts, and microphone? Probably not.&lt;/p&gt;
&lt;p&gt;The situation, when it comes to app permissions, has improved in recent years. In response to user concerns over privacy, Android apps now ask for (almost) all of the permissions they need. They will also ask for these selectively, so you can use an app without granting it all the permissions it asks for. An app will ask for Bluetooth permission, for instance, only when you try to use this functionality. &lt;/p&gt;
&lt;p&gt;On the other hand, there are some permissions that are so “basic” that they are not even counted as permissions by Android. The most striking example of this is access to your Internet connection. All apps are granted this permission by default, they will not ask you to confirm this, and you cannot disable it. This means that even your flashlight app can send and receive data.&lt;/p&gt;
&lt;p&gt;You should check the permissions that an app asks for when you install it, but you should also audit your apps frequently to make sure that you have not granted them more permissions than they need. Building this kind of audit into your monthly schedule is a great way of staying on top of your cybersecurity, since you can easily spot extra permissions that you may have granted in a rush. To check these permissions, go to Settings &amp;gt; Apps &amp;gt; ⚙ icon &amp;gt; App permissions.&lt;/p&gt;
&lt;p&gt;In general, if you think an app is asking for greater permissions than necessary, look for an alternative that takes your privacy more seriously.&lt;/p&gt;
&lt;h2&gt;7. Review your cloud sync&lt;/h2&gt;
&lt;p&gt;Plenty of apps request permission to sync data with the cloud, and sometimes you might want them to do this. There are many advantages of cloud storage for messaging apps and those that store important data. But, just like checking the permissions they ask for, you should also limit the number of apps you have syncing to the cloud. &lt;/p&gt;
&lt;p&gt;You can turn off cloud syncing for individual apps by going to Settings &amp;gt; Accounts, and then tapping on the app name. &lt;/p&gt;
&lt;h2&gt;8. Hide notifications&lt;/h2&gt;
&lt;p&gt;An often overlooked way of making Android devices more private is simply to turn off notifications on the lock screen. That way, someone who picks up your phone won’t be able to see your contacts, message previews, reminders, and alerts.&lt;/p&gt;
&lt;p&gt;Turning off these notifications is easy. Just go to Settings &amp;gt; Sound &amp;amp; Notifications.&lt;/p&gt;
&lt;h2&gt;9. Review default apps&lt;/h2&gt;
&lt;p&gt;Now we’re getting to some more technical measures. Android opens certain types of files with certain apps, and these are controlled by a list held in Settings &amp;gt; Apps &amp;gt; ⚙ icon &amp;gt; Default. Here, you can see which apps Android uses for each type of file. &lt;/p&gt;
&lt;p&gt;The key here is to make sure that Android is using the most secure apps available to open particular files. If you’ve installed ProtonMail, for example, make this your default app for email. The same goes for any other secure app you download because by default Android opens everything with the least privacy-focused apps available (i.e. the apps made by Google, which wants to spy on you).&lt;/p&gt;
&lt;h2&gt;10. Don’t share your location with apps&lt;/h2&gt;
&lt;p&gt;Many apps request that you share your location with them. For some apps, this is incredibly useful. In fact, some apps lose all functionality unless you give them your location data. &lt;/p&gt;
&lt;p&gt;On the other hand, plenty of apps that don’t need to know where you are ask for this information. This, in fact, has been one of the major &lt;a href=&quot;https://www.cso.com.au/article/663680/can-security-industry-keep-up-5g/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot; aria-label=&quot; (opens in a new tab)&quot;&gt;security concerns of the 5G network&lt;/a&gt;, and why Huawei is banned from taking part in it. There was a fear that the Chinese tech giant was collecting location data by default for everyone who used their hardware, and that this could be used to identify individuals even when they had taken precautions against this.&lt;/p&gt;
&lt;p&gt;To turn off location permissions for your apps, go to Settings &amp;gt; Apps &amp;gt; ⚙ icon &amp;gt; App permissions &amp;gt; Location.&lt;/p&gt;
&lt;p&gt;A more general way of limiting access to your location data is to disable Google’s attempts to track your every move. You can do that by going to Settings &amp;gt; Location &amp;gt; Google Location History.&lt;/p&gt;
&lt;h2&gt;11. Use a non-Google version of Android&lt;/h2&gt;
&lt;p&gt;If you take your privacy seriously, you could also consider using a version of Android that is not built by Google and won’t send them data.&lt;/p&gt;
&lt;p&gt;Though most device manufacturers make their own “flavor” of Android, most of these variant systems are built around the core functionality that Google provides. As a result, almost all “mainstream” versions of Android will share your data with Google. &lt;/p&gt;
&lt;p&gt;There are some versions of Android, however, that do not do this. Installing them is a pretty major and complicated step, though, so you should carefully consider whether you want to wipe the existing OS from your phone. At the moment, the most developed (and stable) alternative Android OS is &lt;a rel=&quot;noreferrer noopener&quot; aria-label=&quot; (opens in a new tab)&quot; href=&quot;http://lineageos.org/&quot; target=&quot;_blank&quot;&gt;LineageOS&lt;/a&gt;. This is based on CyanogenMod, which limits access to your phone by third parties. Installing an alternative OS requires technical knowledge, though there are plenty of &lt;a href=&quot;http://wiki.lineageos.org/install_guides.html&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot; aria-label=&quot; (opens in a new tab)&quot;&gt;install guides&lt;/a&gt; to help you.&lt;/p&gt;
&lt;h2&gt;12. Don’t use Google for search&lt;/h2&gt;
&lt;p&gt;You might be wondering why this option is not higher up on this list. It should be easy to change your default search engine within Android, right? Well, yes and no. No surprise, Android doesn’t let you use any other search service from within its default browser. &lt;/p&gt;
&lt;p&gt;In order to use a more secure search engine, you need to &lt;a href=&quot;https://protonmail.com/blog/best-browser-for-privacy/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot; aria-label=&quot; (opens in a new tab)&quot;&gt;download an alternative browser&lt;/a&gt;. These let you change the default search engine and avoid Google collecting data on your queries. &lt;/p&gt;
&lt;h2&gt;13. Use a VPN&lt;/h2&gt;
&lt;p&gt;A virtual private network (VPN) encrypts all of the data passing between your phone (or computer, or tablet) and the wider Internet. &lt;/p&gt;
&lt;p&gt;There are plenty of VPN providers out there, but you should be careful about which one you choose. In general, VPN providers often are not transparent about who operates them or how they may or may not use your data. In addition, be wary of VPN providers that are based in the EU or (even worse) the US, because they may be required to &lt;a rel=&quot;noreferrer noopener&quot; aria-label=&quot; (opens in a new tab)&quot; href=&quot;https://protonvpn.com/blog/5-eyes-global-surveillance/&quot; target=&quot;_blank&quot;&gt;share data with foreign intelligence agencies&lt;/a&gt;. With our own VPN service, we have gone to great lengths to demonstrate why we offer a &lt;a href=&quot;https://protonvpn.com/blog/is-protonvpn-trustworthy/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot; aria-label=&quot; (opens in a new tab)&quot;&gt;VPN worthy of your trust&lt;/a&gt;. &lt;/p&gt;
&lt;h2&gt;14. Use a secure email provider&lt;/h2&gt;
&lt;p&gt;Finally, you should use an email provider that doesn’t read your emails. It may sound pretty obvious. But you should remember that everything you do on Gmail is being read by Google. If you are uncomfortable with that, there are plenty of secure (and private) email providers out there. &lt;/p&gt;
&lt;p&gt;One of them is ProtonMail. We use &lt;a rel=&quot;noreferrer noopener&quot; aria-label=&quot; (opens in a new tab)&quot; href=&quot;https://protonmail.com/blog/what-is-pgp-encryption/&quot; target=&quot;_blank&quot;&gt;PGP encryption&lt;/a&gt; to keep your emails private when they are in transit, and &lt;a href=&quot;https://protonmail.com/blog/zero-access-encryption/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot; aria-label=&quot; (opens in a new tab)&quot;&gt;zero-access encryption&lt;/a&gt; to secure your data at rest. As a result, no one but you can access your messages, not even us. It’s also quite easy to transfer your data from Gmail using the ProtonMail &lt;a rel=&quot;noreferrer noopener&quot; aria-label=&quot; (opens in a new tab)&quot; href=&quot;https://protonmail.com/blog/import-export-beta/&quot; target=&quot;_blank&quot;&gt;Import-Export application&lt;/a&gt; (now in beta).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://protonmail.com/blog/is-protonmail-trustworthy/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot; aria-label=&quot; (opens in a new tab)&quot;&gt;Learn more: why ProtonMail is trustworthy&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Using Android privately&lt;/h2&gt;
&lt;p&gt;In closing, it’s also worth pointing out that, although Android is a risk to your privacy if you don’t lock it down correctly, smartphones per se are not evil.&lt;/p&gt;
&lt;p&gt;In fact, if used correctly they can be extremely useful in securing other parts of your online life. The clearest example of this is &lt;a href=&quot;https://protonmail.com/blog/what-is-two-factor-authentication-how-to-use-it/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot; aria-label=&quot; (opens in a new tab)&quot;&gt;two-factor authentication&lt;/a&gt;, in which a time-based code from a smartphone app is required in addition to your password to log in to your account. (Where possible, you should set up this kind of system for all of your online accounts.)&lt;/p&gt;
&lt;p&gt;The trick to using a smartphone securely, as with any other device, is to take the time to find out how it actually works. That way, you can disable the data-collection and data-sharing “functions” that you don’t need. &lt;/p&gt;
&lt;p&gt;And just by reading this article, you’ve taken the first step on that road. &lt;/p&gt;
&lt;p&gt;Best Regards,&lt;br/&gt;The ProtonMail Team&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;You can get a &lt;a href=&quot;https://protonmail.com/signup&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;free secure email account from ProtonMail here&lt;/a&gt;.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;We also provide a &lt;a href=&quot;https://protonvpn.com/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;free VPN service&lt;/a&gt; to protect your privacy.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;ProtonMail and ProtonVPN are funded by community contributions. If you would like to support our development efforts, you can upgrade to a &lt;a rel=&quot;noreferrer noopener&quot; href=&quot;https://protonmail.com/support/knowledge-base/paid-plans/&quot; target=&quot;_blank&quot;&gt;paid plan&lt;/a&gt; or &lt;a rel=&quot;noreferrer noopener&quot; href=&quot;https://protonmail.com/donate&quot; target=&quot;_blank&quot;&gt;donate&lt;/a&gt;. Thank you for your support.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;


</description>
<pubDate>Wed, 01 Jan 2020 13:51:10 +0000</pubDate>
<dc:creator>amorfati</dc:creator>
<og:type>article</og:type>
<og:title>How to use Android without sacrificing your privacy - ProtonMail Blog</og:title>
<og:description>Android is one of Google’s most important tools for collecting data on users. This guide will help you improve your privacy on Android devices.</og:description>
<og:url>https://protonmail.com/blog/android-privacy/</og:url>
<og:image>https://protonmail.com/blog/wp-content/uploads/2019/12/ProtonMail-how-to-stay-private-while-using-android-1024x512.png</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://protonmail.com/blog/android-privacy/</dc:identifier>
</item>
<item>
<title>Happy New Year HN!</title>
<link>https://news.ycombinator.com/item?id=21927866</link>
<guid isPermaLink="true" >https://news.ycombinator.com/item?id=21927866</guid>
<description>&lt;tr class=&quot;athing comtr&quot; id=&quot;21929028&quot; readability=&quot;13.599523241955&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;6.7997616209774&quot;&gt;&lt;tr readability=&quot;13.599523241955&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;15.056615017878&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;29.81662591687&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Happy new decade! Copied this from my Mastodon post:&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Big picture, in the next decade, I would like to see:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;1. Federated free software services become the dominant platform for social media and messaging.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;2. A more privacy-oriented and cryptographically-literate public, and simple, standard free software tools anyone can leverage for this purpose.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;3. Open hardware, especially RISC-V, becoming the dominant approach for new hardware development.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;4. Recapturing the mobile market from proprietary walled gardens, instead favoring models which put the user in control of their devices (e.g. pmOS).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;5. Average (read: non-SV CEO) technologists becoming more politically engaged, including running for and winning offices, and using political will to reinforce the above and start making a difference outside of tech&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21930067&quot; readability=&quot;5.7248908296943&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.8624454148472&quot;&gt;&lt;tr readability=&quot;5.7248908296943&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;5.7248908296943&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;10.875&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Re 1: what can we do to make this happen? Both as developers and as users of social media?&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Re 2: I used to co-organize &quot;privacy café&quot; workshops. I was surprised by how many people showed up and how grateful they were to learn about really basic tools -- like ad blockers or just browser cookie delete functionality. Everyone knows how to brush their teeth, and everyone had to learn how at one point. Digital hygiene is no different.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21930443&quot; readability=&quot;11.684901531729&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;5.8424507658643&quot;&gt;&lt;tr readability=&quot;11.684901531729&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;12.658643326039&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;24.860022396417&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;1:&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;As a user: boldly use new social networks that fit this mold and allow your social circle to grow to embrace them. Participate with the network on its own merits and the new friends you can make, not the based on whether or not your old friends are there. The only way to solve the network problem is to ignore it.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;As a dev: don't build new walled gardens. Consider how to connect with the existing ecosystem - and crucially, how it can connect back to you - when designing your next project. Prefer collaboration over competition. Prefer small, interlinked communities over large silos. Distribute costs across the network, by letting volunteers shoulder hosting costs through grassroots &quot;local&quot; fundraising efforts.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;2: Nice! It would be cool to organize a simple cirriculum for privacy literacy and start reaching out to local libraries, schools, etc, about giving talks or classes.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21930947&quot; readability=&quot;2.41875&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.209375&quot;&gt;&lt;tr readability=&quot;2.41875&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I like the idea of privacy workshops. Do you have any resources for someone who is interested in organizing something similar?&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21931846&quot; readability=&quot;7.4285714285714&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.7142857142857&quot;&gt;&lt;tr readability=&quot;7.4285714285714&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;A small issue with number 5. How is an average technologist going to do any better with things like tax policy, immigration policy, energy or foreign policy than an account, lawyer or civil engineer? I wonder if we would all be better of trying to use technology to get good candidates in office that are not beholden to large agenda driven donors.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21931914&quot; readability=&quot;2.5174825174825&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.2587412587413&quot;&gt;&lt;tr readability=&quot;2.5174825174825&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I think it's ok to be politically active in certain topics without having an answer to all open questions in society.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21929632&quot; readability=&quot;3.4385964912281&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.719298245614&quot;&gt;&lt;tr readability=&quot;3.4385964912281&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;That is a &lt;em&gt;very&lt;/em&gt; good list, but I fear that we won't achieve any of those. Maybe we can make some incremental moves towards achieving those goals.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21931205&quot; readability=&quot;5.4713656387665&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.7356828193833&quot;&gt;&lt;tr readability=&quot;5.4713656387665&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.1035242290749&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;7.8095238095238&quot;&gt;&lt;span class=&quot;commtext c5a&quot;&gt;&amp;gt;3. Open hardware, especially RISC-V, becoming the dominant approach for new hardware development.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c5a&quot;&gt;Why is everyone so hyped up on RSIC-V and not something like POWER? When both are now fully open sourced.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21931531&quot; readability=&quot;3.4913294797688&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.7456647398844&quot;&gt;&lt;tr readability=&quot;3.4913294797688&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;AFAIK, the POWER architecture consumes a lot of energy so it's not suited for mobile and/or embedded gadgets so it's not as appealing to the masses.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21929618&quot; readability=&quot;0.75862068965517&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21930042&quot; readability=&quot;2.8830188679245&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21930506&quot; readability=&quot;3.258064516129&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.6290322580645&quot;&gt;&lt;tr readability=&quot;3.258064516129&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Dictionaries are descriptions of language not prescriptions. Thou doth protest too much, methinks.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21929061&quot; readability=&quot;6.1822429906542&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.0911214953271&quot;&gt;&lt;tr readability=&quot;6.1822429906542&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;6.1822429906542&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;12.661458333333&quot;&gt;&lt;span class=&quot;commtext c88&quot;&gt;&amp;gt; Happy new decade!&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c88&quot;&gt;HN wouldn't be HN if I'd let this stand uncommented, so... The decade actually runs from 2011-2020. But yes, the 20s have finally started.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c88&quot;&gt;Anyways, Happy New Year! ;)&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21929427&quot; readability=&quot;6.1869688385269&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21929799&quot; readability=&quot;8.5605095541401&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.2802547770701&quot;&gt;&lt;tr readability=&quot;8.5605095541401&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;As the link you provided acknowledges, &quot;decade&quot; and &quot;century&quot; describe a duration, not specific start times. They find it convenient for purposes of the ISO 8601 document to set the start of decades and centuries in a way that corresponds to portions of the way dates are represented. Outside the context of that document these definitions could cause problems. For example, no first century exists by that definition, since there was no year 0.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21930212&quot; readability=&quot;18.018087855297&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;9.0090439276486&quot;&gt;&lt;tr readability=&quot;18.018087855297&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;160&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;12.802325581395&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;25.131046613896&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Of course you are right regarding the first century. But when we get to later centuries, say the 18th century, we are as likely to describe it as &quot;the 1700s&quot;, in which case, it seems that it should start at 1700, not 1701. And we certainly do that with decades (notwithstanding the hard-to-name last two decades). It is now the 20s. That's a decade.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;There are always going to be weird cases. If it is February 10th, and you say &quot;one month from today,&quot; what is meant by that? 28 (or 29) days later, March 10? Or 30.4375 days later, plus or minus a day or two?&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;And then you have days which are 23 or 25 hours long, because of Daylight Savings Time. (see all the potential for ambiguity with the word &quot;day&quot;: &lt;a href=&quot;https://en.wikipedia.org/wiki/Day&quot; rel=&quot;nofollow&quot;&gt;https://en.wikipedia.org/wiki/Day&lt;/a&gt;)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;I personally think it makes the most sense to think of decades, centuries, and millennia starting when the number rolls over. When you find yourself in ambiguous territory (such as talking about the first century, and in a way it matters whether it is 99 or 100 years long), just take the extra effort to clarify. Most likely this will never come up except for a very small subset of people.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21929719&quot; readability=&quot;1.1692307692308&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21929069&quot; readability=&quot;8.1271551724138&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.0635775862069&quot;&gt;&lt;tr readability=&quot;8.1271551724138&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;5.8696120689655&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;11.295711060948&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Pretty sick of hearing this one, it doesn't make any sense. According to who? How about the billions of people celebrating the new decade? It just seems like the rallying cry of buzzkills.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Edit: dear god, it was rhetorical, please stop explaining it. Construct a system in which everyone is correct by making the 0th or 1st year undefined until additional context is established, then use it to stop being a pedant. &lt;a href=&quot;https://xkcd.com/2249&quot; rel=&quot;nofollow&quot;&gt;https://xkcd.com/2249&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21929136&quot; readability=&quot;12.35792019347&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;6.1789600967352&quot;&gt;&lt;tr readability=&quot;12.35792019347&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;11.033857315599&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;21.623762376238&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;&lt;em&gt;The year zero does not exist in the Anno Domini (AD) system commonly used to number years in the Gregorian calendar&lt;/em&gt; [1], so the first decade was years 1AD-10AD (ten years). This means current decade started on January 1st 2001. and ends with December 31st 2020.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;From Wikipedia Decade[2] article:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;&lt;em&gt;There are two main methods of counting decades in recognition. One, called ordinal, counts decades starting with the first year 1 CE (For example, the years 1981–1990 is referred to as the 199th decade or the 9th decade of the 20th century), while the other, called cardinal, groups years based on having the same digits (For example, the years 1980–1989 is referred to as the 1980s, or commonly known as the eighties).&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;1: &lt;a href=&quot;https://en.wikipedia.org/wiki/Year_zero&quot; rel=&quot;nofollow&quot;&gt;https://en.wikipedia.org/wiki/Year_zero&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;2: &lt;a href=&quot;https://en.wikipedia.org/wiki/Decade&quot; rel=&quot;nofollow&quot;&gt;https://en.wikipedia.org/wiki/Decade&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21929170&quot; readability=&quot;8.5214408233276&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.2607204116638&quot;&gt;&lt;tr readability=&quot;8.5214408233276&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;10.415094339623&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;20.810810810811&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;According to what years mean. Years are not 0 indexed.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;A &quot;decade&quot; of apples would be apple #1 to apple #10 The second &quot;decade&quot; would then be apple #11 to apple #20&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Ergo, 2020 is the ending year of the second decade of the third millennium, which started on 2001 :)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;It's essentially the difference between celebrating a new chunk of time defined by our collective radix, and celebrating a year because of the way it looks.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;We are now in &quot;the 2020s&quot; but not the second decade until next year. Therefore, it is inaccurate to say we are in a new decade.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21929988&quot; readability=&quot;11.126708074534&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;5.5633540372671&quot;&gt;&lt;tr readability=&quot;11.126708074534&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;160&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;10.698757763975&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;21.030612244898&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;They are zero indexed. The first zero is just missing. It's only relevant if you need to work in terms of the nth century, or cross the boundary between CE and BCE.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Calling this the start of a new decade, and 2001 the start of this century, still makes perfect sense with the logical and consistent model that ISO has come up with.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;&lt;a href=&quot;https://www.iso.org/obp/ui#iso:std:iso:8601:-1:ed-1:v1:en&quot; rel=&quot;nofollow&quot;&gt;https://www.iso.org/obp/ui#iso:std:iso:8601:-1:ed-1:v1:en&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;I like ordinals and appreciate the distinction between ordinal and cardinal, and am happy with this edge case.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;It gets confusing with centuries and terms like the 2000s (&lt;a href=&quot;https://en.wikipedia.org/wiki/2000s&quot; rel=&quot;nofollow&quot;&gt;https://en.wikipedia.org/wiki/2000s&lt;/a&gt;) but decades tend to always be called 10s, 20s, etc. If you can get people to call this the 202nd decade, more power to you. However, defining the 2020s or 20s as 2021-2030 is wrong.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21929188&quot; readability=&quot;10.38578680203&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;5.1928934010152&quot;&gt;&lt;tr readability=&quot;10.38578680203&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;8.0253807106599&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;15.786666666667&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;&amp;gt; it doesn't make any sense. According to who?&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;The year numbering in the current western calendar starts from one (AD 1), not zero (it jumps from 1 BC to AD 1). So the first decade would be from AD 1 to AD 10, the second decade from AD 11 to AD 20, and so on (and the same on the other direction, with a decade from 10 BC to 1 BC, another one from 20 BC to 11 BC, etc).&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21929129&quot; readability=&quot;3.3529411764706&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21929145&quot; readability=&quot;2.9333333333333&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21929182&quot; readability=&quot;2&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21929208&quot; readability=&quot;1.4567901234568&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21930301&quot; readability=&quot;1.2380952380952&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21929629&quot; readability=&quot;0.53731343283582&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21928806&quot; readability=&quot;4.4377510040161&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.218875502008&quot;&gt;&lt;tr readability=&quot;4.4377510040161&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.4377510040161&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;8.7991071428571&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;When did everyone go to sleep last night in local time?&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;I passed out around 9pm. I normally stay up a little later but ordered delivery and drank more than usual (recently at least, new years resolution now) so yea....&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21928841&quot; readability=&quot;5.5958083832335&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21929655&quot; readability=&quot;6.6492693110647&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.3246346555324&quot;&gt;&lt;tr readability=&quot;6.6492693110647&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;9:30am... dinner with friends ended at 2am then I went to meet my cousin in the city center, from there I went away with a friend of hers only to find a dear friend of mine on the way, the three of us then went to a clubkindofthing where I casually met my younger brother and we stood outside talking and freezing until late/early... then the four of us went to take a cup of tea and something to eat for breakfast and parted ways&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;happy 2020 HN people!&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21928976&quot; readability=&quot;7.3485342019544&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.6742671009772&quot;&gt;&lt;tr readability=&quot;7.3485342019544&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Couldn't sleep because of noise from nearby pub or something, people singing old hindi songs just because they have to. Stuff like &quot;gimme some sunshine gimme some rain, and then Yeh dosti hum nahin todenge&quot;. You might not know these songs, but I hope you understand my annoyance.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21928861&quot; readability=&quot;4.4493392070485&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.2246696035242&quot;&gt;&lt;tr readability=&quot;4.4493392070485&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Stayed up til 2am watching YouTube (stuff from the author of Ultralearning mostly) and then got woken up by my 7:30am weekday alarm which doesn’t care if it’s a holiday, and I forgot to turn off.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21928869&quot; readability=&quot;3.5433789954338&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.7716894977169&quot;&gt;&lt;tr readability=&quot;3.5433789954338&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;3.5433789954338&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;6.8223350253807&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I normally try and sleep by 7pm. But last night I stayed up super late until 10pm and played video games to celebrate. Both vices I normally don’t make time for.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Happy New Year everyone!!!!&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21929000&quot; readability=&quot;1.2&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21929104&quot; readability=&quot;1.0566037735849&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21930521&quot; readability=&quot;2.2577319587629&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21930943&quot; readability=&quot;2.4206896551724&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.2103448275862&quot;&gt;&lt;tr readability=&quot;2.4206896551724&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;3am local time. Had champagne cheers and chocolate and just chatted with my partner about how this past year went.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21929256&quot; readability=&quot;3.6845878136201&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.84229390681&quot;&gt;&lt;tr readability=&quot;3.6845878136201&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Had a quiet evening with my wife watching anime (we're in our 30s). I spent about 30 minutes sending (personalized) texts to people I want to keep in touch with in the future -- wishing them the best wishes for 2020. Went to sleep before 1am. I loved it.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21929274&quot; readability=&quot;1.1067961165049&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21929529&quot; readability=&quot;6.3428571428571&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.1714285714286&quot;&gt;&lt;tr readability=&quot;6.3428571428571&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.530612244898&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;8.8&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Stayed up til after 3am because I was running a virtual fireworks show in an Open Simulator world, and they all run on Pacific time.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;This might be my last one, because TBH I'm getting tired of Open Sim, it's a dead end.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21930292&quot; readability=&quot;2.424&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.212&quot;&gt;&lt;tr readability=&quot;2.424&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I really wish simulated worlds would pick up. They’re just such a cool idea. And now we have VR!&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21930517&quot; readability=&quot;6.2476635514019&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.1238317757009&quot;&gt;&lt;tr readability=&quot;6.2476635514019&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.0163551401869&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;7.7938144329897&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Oh, I think there's potential for virtual worlds, just not the SL/OS type. Something more like Sansar or Sinespace could still catch on.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Or better yet, something that can run in a browser.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21930966&quot; readability=&quot;3.4556213017751&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.7278106508876&quot;&gt;&lt;tr readability=&quot;3.4556213017751&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Very very happy new year. Can not imagine going to bed with out skimming HN each each night, just missed yesterday and was in bed at about 1 am&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21928996&quot; readability=&quot;3.4390243902439&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.719512195122&quot;&gt;&lt;tr readability=&quot;3.4390243902439&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I had intended not to stay up, but after spending all day hacking I found myself watching a movie until after 1am as my brain cooled down.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21930389&quot; readability=&quot;2.6834170854271&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.3417085427136&quot;&gt;&lt;tr readability=&quot;2.6834170854271&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;3.5778894472362&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;6.8066298342541&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Around 2am. Good times on dance floor. Well those that didn't succumb to the sketch food first&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;22h00 to 11h30 was brutal though. Lull post dinner and everyone was just waiting&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21928895&quot; readability=&quot;1.3424657534247&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21931320&quot; readability=&quot;2.4642857142857&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.2321428571429&quot;&gt;&lt;tr readability=&quot;2.4642857142857&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c5a&quot;&gt;Thanks. I also wish you a happy new year 2020 and the congratulations also go to the news ycombinator community.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21931305&quot; readability=&quot;1.0384615384615&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21930694&quot; readability=&quot;0.91304347826087&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21929832&quot; readability=&quot;2.2767857142857&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21927937&quot; readability=&quot;1&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21931004&quot; readability=&quot;1.0384615384615&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21929818&quot; readability=&quot;2.8235294117647&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21929890&quot; readability=&quot;1.95&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21930019&quot; readability=&quot;0.98245614035088&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21929445&quot; readability=&quot;1.1803278688525&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21928659&quot; readability=&quot;1.4328358208955&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21929019&quot; readability=&quot;3.6290322580645&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.8145161290323&quot;&gt;&lt;tr readability=&quot;3.6290322580645&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Why do we celebrate surviving for yet another year without celebrating all the steps we took during the year towards prolonging human lifespans? There should be a global medical/scientific conference to recap or something.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21928757&quot; readability=&quot;1.0212765957447&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;</description>
<pubDate>Wed, 01 Jan 2020 13:04:47 +0000</pubDate>
<dc:creator>john200ok</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://news.ycombinator.com/item?id=21927866</dc:identifier>
</item>
<item>
<title>Rewriting m4vgalib in Rust</title>
<link>http://cliffle.com/blog/m4vga-in-rust/</link>
<guid isPermaLink="true" >http://cliffle.com/blog/m4vga-in-rust/</guid>
<description>&lt;header class=&quot;post-title&quot;&gt;
&lt;/header&gt;&lt;span class=&quot;post-date&quot;&gt;2019-02-23&lt;/span&gt;
&lt;p&gt;If this isn't your first time visiting my blog, you may recall that I've spent the past several years building an &lt;a href=&quot;http://cliffle.com/tags/glitch-demo/&quot;&gt;elaborate microcontroller graphics demo&lt;/a&gt; using C++.&lt;/p&gt;
&lt;p&gt;Over the past few months, I've been rewriting it — in &lt;a href=&quot;https://rust-lang.org/&quot;&gt;Rust&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is an interesting test case for Rust, because we're very much in C/C++'s home court here: the demo runs on the bare metal, without an operating system, and is very sensitive to both CPU timing and memory usage.&lt;/p&gt;
&lt;p&gt;The results so far? &lt;strong&gt;The Rust implementation is simpler, shorter (in lines of code), faster, and smaller (in bytes of Flash)&lt;/strong&gt; than my heavily-optimized C++ version — and because it's &lt;strong&gt;almost entirely safe code,&lt;/strong&gt; several types of bugs that I fought regularly, such as race conditions and dangling pointers, are now caught &lt;em&gt;by the compiler.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;It's fantastic. Read on for my notes on the process.&lt;/p&gt;


&lt;ul readability=&quot;5.8866396761134&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;The Rust tools and library ecosystem are fantastic. Simply having a package manager is an incredibly important advance.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2.8415094339623&quot;&gt;
&lt;p&gt;When I am writing C++, I'm thinking about undefined behavior and bugs the compiler won't catch. When I'm writing Rust, I'm thinking instead about how to optimize things or add features. There is a very real &lt;a href=&quot;https://en.wikipedia.org/wiki/Cognitive_load&quot;&gt;cognitive load&lt;/a&gt; difference and it makes me more productive.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;Rust's safety features, such as bounds checking, have caught bugs and have not caused performance problems. (With one exception, discussed below; in that case the fix was simple.)&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;The port revealed &lt;em&gt;significant subtle bugs in the C++ code&lt;/em&gt; when the Rust compiler wouldn't let me do certain things...that turned out to be legitimately incorrect things to do.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I wrote &lt;a href=&quot;https://github.com/cbiffle/m4vgalib/&quot;&gt;m4vgalib&lt;/a&gt; and the &lt;a href=&quot;https://github.com/cbiffle/m4vgalib-demos/&quot;&gt;attendant demos&lt;/a&gt; as an exercise in hard-real-time programming. I wanted to see how far I could push C++, so I avoided assembly language everywhere except certain routines that weren't possible without it.&lt;/p&gt;
&lt;p&gt;Now, given my &lt;a href=&quot;http://cliffle.com/blog/prefer-rust/&quot;&gt;feelings about C++&lt;/a&gt;, I want to see how far I can push Rust — specifically, safe Rust. See, despite having written C++ as my day job for many years, I'm aware that most of the common security/reliability bugs we see in software today are a result of flaws in the C and C++ languages. Rust fixes &lt;em&gt;essentially all of these flaws.&lt;/em&gt; So I've been keeping an eye on it for a while. More reliable software with less work? &lt;em&gt;Yes please.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;My graphics demos are so resource-constrained, and so timing-sensitive, that they fall squarely into the traditional domain of assembly and C — a domain that has been well-defended for years. Can I build the same thing using a memory-safe language? Could I use the additional brain-space that I'm &lt;em&gt;not&lt;/em&gt; spending on remembering C++'s initialization order rules (for example) to make a better system with more features?&lt;/p&gt;
&lt;p&gt;The answer so far seems to be yes.&lt;/p&gt;

&lt;p&gt;This is a late addition to my notes, because I've gotten so used to it in languages like Rust, Haskell, Python...even JavaScript...that I had forgotten what a giant thing this is.&lt;/p&gt;
&lt;p&gt;Programming languages fall into two categories: those that were designed before the advent of modern package managers, and those designed after. There's a very important difference between these two categories:&lt;/p&gt;
&lt;ul readability=&quot;1&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;Pre-package-manager languages try to have an everything-plus-the-kitchen-sink standard library, and developers tend to avoid third-party libraries.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;Post-package-manager languages go for a more minimal standard library, and developers are accustomed to extending it with packages.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;In particular, C falls in the first category, and Rust falls in the second.&lt;/p&gt;

&lt;p&gt;Adding a new third-party dependency to a C project is, at best, a giant pain. It might not support your build system, you're probably going to have to figure out some include-path magic, and it's almost certainly not built with the same linter settings. At worst, it might be using an incompatible subset of core language features, like exceptions vs. not. C programmers (myself included) tend to avoid such dependencies at all costs, &lt;em&gt;up to and including rewriting everything themselves.&lt;/em&gt; (&lt;a href=&quot;https://github.com/cbiffle/etl/&quot;&gt;Guilty.&lt;/a&gt;) This is a huge drain on productivity and creates new bugs each time.&lt;/p&gt;
&lt;p&gt;For contrast: there came a moment when porting my Conway's Game of Life implementation when I needed a random number generator, to seed the playing field. Rust's standard library &lt;em&gt;doesn't contain a random number generator.&lt;/em&gt; Instead, I added a dependency on &lt;a href=&quot;https://crates.io/crates/rand/&quot;&gt;the &lt;code&gt;rand&lt;/code&gt; crate&lt;/a&gt;, let it automatically download and build, and continued programming.&lt;/p&gt;
&lt;p&gt;I see the C++ community watching Rust and &lt;a href=&quot;https://herbsutter.com/2018/09/20/lifetime-profile-v1-0-posted/&quot;&gt;trying to adapt our best features&lt;/a&gt;, but imagine what a standardized C++ build system and package manager would do for the language.&lt;/p&gt;

&lt;p&gt;For bare-metal programming specifically, the &lt;em&gt;truly killer feature&lt;/em&gt; of Rust is the &lt;code&gt;no_std&lt;/code&gt; ecosystem.&lt;/p&gt;
&lt;p&gt;C++ has a monolithic standard library with an amazing set of cool stuff in it (because, as I noted in the last section, of when it was written). However, the library embeds some important assumptions. In particular, it is written for a &quot;normal&quot; C++ execution environment, which for our purposes means two things:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;There is a heap, and it's okay to allocate/free whenever.&lt;/li&gt;
&lt;li&gt;Exceptions are turned on.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;In most high-reliability, hard-real-time embedded environments, neither of these statements is true. We eschew heaps because of the potential for exhaustion and fragmentation; we eschew exceptions because the performance of unwinding code is unpredictable and vendor-dependent.&lt;/p&gt;

&lt;p&gt;Now, there are &lt;em&gt;parts&lt;/em&gt; of the C++ standard library that you can use safely in a no-heap, no-exceptions environment. Header-only libraries like &lt;code&gt;type_traits&lt;/code&gt; are probably fine. Simple primitive types like &lt;code&gt;atomic&lt;/code&gt; are ... probably fine?&lt;/p&gt;
&lt;p&gt;I keep saying &quot;probably&quot; because the no-heap, no-exception subset of the C++ standard is &lt;em&gt;not clearly defined.&lt;/em&gt; (The C++ standards folk have, in fact, resisted doing this, arguing that it would fragment the language; this ship has most definitely sailed.) As a result, it's really easy to &lt;em&gt;accidentally&lt;/em&gt; introduce a heap dependency, or to &lt;em&gt;accidentally&lt;/em&gt; use an API that can't indicate failure when exceptions are disabled (like &lt;code&gt;std::vector::push_back&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The Rust standard library has a critical difference: it's divided into two parts, &lt;code&gt;std&lt;/code&gt; and &lt;code&gt;core&lt;/code&gt;. &lt;code&gt;std&lt;/code&gt; is like the C++ equivalent. &lt;code&gt;core&lt;/code&gt;, on the other hand, is how &lt;code&gt;std&lt;/code&gt; itself is implemented, and &lt;em&gt;doesn't assume the existence of things like &quot;the heap,&quot; threads, and the like.&lt;/em&gt; While code depends on &lt;code&gt;std&lt;/code&gt; by default, you can set an attribute, &lt;code&gt;no_std&lt;/code&gt;, to request only &lt;code&gt;core&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is a tiny design decision with huge implications:&lt;/p&gt;
&lt;ol readability=&quot;5.5&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;By setting the &lt;code&gt;#[no_std]&lt;/code&gt; attribute on a crate, you're opting out of the default dependency on &lt;code&gt;std&lt;/code&gt;. Any attempt to use a feature from &lt;code&gt;std&lt;/code&gt; is now a compile time error — but you can still use &lt;code&gt;core&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;You can trust &lt;em&gt;other&lt;/em&gt; crates to do the same, so you can use third-party libraries safely if they, too, are &lt;code&gt;no_std&lt;/code&gt;. Many crates are either &lt;code&gt;no_std&lt;/code&gt; by default, or can have it enabled at build time.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;&lt;code&gt;core&lt;/code&gt; is small enough that porting it to a new platform is easy -- significantly easier, in fact, than porting &lt;code&gt;newlib&lt;/code&gt;, the standard-bearer for portable embedded C libraries.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;For &lt;code&gt;m4vgalib&lt;/code&gt; I rewrote almost all my dependencies to get a system that wouldn't throw or allocate. In Rust, I don't have to do that!&lt;/p&gt;


&lt;p&gt;Rust's ownership rules produce a sort of bizarro-world of API design.&lt;/p&gt;
&lt;ul readability=&quot;1&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;Some (uncommon, but reasonable) API designs won't make it past the borrow checker. (In nearly every case, these are APIs that were &lt;em&gt;easy to use incorrectly&lt;/em&gt; in other languages.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Some API patterns that are grossly unsafe or unwise in other languages are routine in Rust because of lifetime checking.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;As an example of the latter: it is common, and safe, to loan out stack-allocated data structures &lt;em&gt;to other threads&lt;/em&gt; with no runtime checks. (See: &lt;a href=&quot;https://docs.rs/crossbeam/0.7.1/crossbeam/thread/&quot;&gt;scoped threads in crossbeam&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;Another: it is normal in Rust text-processing code to deal in &lt;code&gt;&amp;amp;str&lt;/code&gt;, which is equivalent to a C++ &lt;code&gt;string_view&lt;/code&gt;. Storing a &lt;code&gt;string_view&lt;/code&gt; in C++ (say, in the heap) is an incredibly bad idea, because &lt;a href=&quot;https://github.com/isocpp/CppCoreGuidelines/issues/1038&quot;&gt;it's easy for it to become a dangling pointer&lt;/a&gt;; C++ programs resort to defensive copying to avoid this. On the other hand, Rust programs routinely store &lt;code&gt;&amp;amp;str&lt;/code&gt;, copying only when the borrow checker can't prove that the code is correct.&lt;/p&gt;
&lt;p&gt;When this is working well, it can cause abstractions and complexity to dissolve.&lt;/p&gt;
&lt;p&gt;Concrete example: &lt;code&gt;m4vgalib&lt;/code&gt; (C++) lets applications provide custom &lt;em&gt;rasterizers&lt;/em&gt; that are invoked to generate pixel data. They are subclasses of the &lt;code&gt;Rasterizer&lt;/code&gt; library class, which sports a single virtual member function (called — wait for it — &lt;code&gt;rasterize&lt;/code&gt;). You register a &lt;code&gt;Rasterizer&lt;/code&gt; with the driver by putting a pointer to it into a table. Once registered, the &lt;code&gt;Rasterizer&lt;/code&gt; will have its &lt;code&gt;rasterize&lt;/code&gt; function called from an interrupt handler once per scanline.&lt;/p&gt;
&lt;p&gt;You, the application author, have some responsibilities to use this API safely:&lt;/p&gt;
&lt;ol readability=&quot;8&quot;&gt;&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;The &lt;code&gt;Rasterizer&lt;/code&gt; object needs to hang around until you're done with it — it might be &lt;code&gt;static&lt;/code&gt; or it might be allocated from a carefully-managed arena. Otherwise, the ISR will try to use dangling pointers, and that's bad.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;6&quot;&gt;
&lt;p&gt;While the &lt;code&gt;Rasterizer&lt;/code&gt; object is accessible by the ISR, it can be entered at &lt;em&gt;basically any time&lt;/em&gt; by code running at interrupt priority. Because we can't disable interrupts without distorting the display, this means that your application code that shares state with the &lt;code&gt;Rasterizer&lt;/code&gt; (say, a drawing loop) needs to be written carefully to avoid data races. Commonly, this means double-buffering with a &lt;code&gt;std::atomic&amp;lt;bool&amp;gt;&lt;/code&gt; flip signal...and some manually-inserted barriers...and some squinting and care to avoid accessing other state incorrectly.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;Before disposing of the &lt;code&gt;Rasterizer&lt;/code&gt; object, you must un-register it with the driver. This prevents an ISR from dereferencing its dangling pointer, which, again, would be bad.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;I recreated the C++ API verbatim in Rust, and immediately started to run into ownership issues. My internal monologue went something like this:&lt;/p&gt;
&lt;ul readability=&quot;8.3581644815256&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&quot;Okay, here's a &lt;code&gt;Raster&lt;/code&gt; trait and an implementation thereof.&quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&quot;Hm. How can I pass a reference to this to an interrupt handler? In C++ I stuffed a pointer into a global variable, but Rust's the rules around &lt;code&gt;static&lt;/code&gt; state seem to prevent that.&quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;&quot;Okay, I've built an abstraction (&lt;code&gt;IRef&lt;/code&gt;) to enable that to be done safely; only it turns out I didn't actually want to give &lt;em&gt;all&lt;/em&gt; of the &lt;code&gt;Rasterizer&lt;/code&gt; to the ISR, because I want to draw into its background buffer and make other state changes. It needs to be shared with the main rendering loop!&quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&quot;If I split the &lt;code&gt;Rasterizer&lt;/code&gt; into two parts and give &lt;em&gt;one&lt;/em&gt; to the ISR, how do I communicate between them when it comes time to flip buffers? Do I need to pepper my code with &lt;code&gt;Cell&lt;/code&gt; to do interior mutability?&quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-0.77777777777778&quot;&gt;
&lt;p&gt;&quot;This feels a lot like the problem that &lt;a href=&quot;https://docs.rs/crossbeam/0.7.1/crossbeam/thread/&quot;&gt;scoped threads&lt;/a&gt; solves.&quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&quot;...heeeeey, how do they implement this?&quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Taking inspiration from crossbeam, I added code to loan a &lt;em&gt;closure&lt;/em&gt;, rather than an object, to the ISR. Closures are fundamentally different, from an API perspective, because they can capture local state easily -- and that capture is visible to the borrow checker, to avoid races or dangling pointers.&lt;/p&gt;
&lt;p&gt;In the end, the Rust API wound up being &lt;em&gt;very&lt;/em&gt; different: there is no &lt;code&gt;Rasterizer&lt;/code&gt; trait, and there are no rasterizers. There are only functions. This makes new effects &lt;em&gt;much&lt;/em&gt; easier to write. For example, this one draws a red line that sweeps down the display at 60 pixels/second:&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;let&lt;/span&gt;&lt;span&gt; red_line &lt;/span&gt;&lt;span&gt;= &lt;/span&gt;&lt;span&gt;SpinLock::new(Wrapping(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;));
vga.&lt;/span&gt;&lt;span&gt;with_raster&lt;/span&gt;&lt;span&gt;(
    &lt;/span&gt;&lt;span&gt;// The raster callback is invoked on every horizontal retrace to
    // provide new pixels. It runs in interrupt context.
    &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt;line, tgt, ctx&lt;/span&gt;&lt;span&gt;| &lt;/span&gt;&lt;span&gt;{
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; line &lt;/span&gt;&lt;span&gt;== *&lt;/span&gt;&lt;span&gt;red_line.&lt;/span&gt;&lt;span&gt;lock&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;% &lt;/span&gt;&lt;span&gt;1024 &lt;/span&gt;&lt;span&gt;{
            &lt;/span&gt;&lt;span&gt;fill&lt;/span&gt;&lt;span&gt;(tgt, &lt;/span&gt;&lt;span&gt;RED&lt;/span&gt;&lt;span&gt;);
        } &lt;/span&gt;&lt;span&gt;else &lt;/span&gt;&lt;span&gt;{
            &lt;/span&gt;&lt;span&gt;fill&lt;/span&gt;&lt;span&gt;(tgt, &lt;/span&gt;&lt;span&gt;BLACK&lt;/span&gt;&lt;span&gt;);
        }
    },
    &lt;/span&gt;&lt;span&gt;// The scope callback is executed to run application logic. As soon as
    // it returns, the raster callback is revoked from the ISR, so we know
    // that state is no longer shared with interrupts.
    &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt;vga&lt;/span&gt;&lt;span&gt;| &lt;/span&gt;&lt;span&gt;loop &lt;/span&gt;&lt;span&gt;{
        vga.&lt;/span&gt;&lt;span&gt;sync_to_vblank&lt;/span&gt;&lt;span&gt;();
        &lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;red_line.&lt;/span&gt;&lt;span&gt;lock_mut&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;+= &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
    })
&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This makes the problem of sharing state trivial: have the state in scope when you declare these closures, and share it using normal Rust techniques.&lt;/p&gt;
&lt;p&gt;In addition to being easier to use, this API is also much harder to &lt;em&gt;misuse&lt;/em&gt;: it's essentially impossible to accidentally introduce a data race. This is because the raster callback is required to be &lt;code&gt;Send&lt;/code&gt;, meaning it can safely be transferred across threads (or, here, to an interrupt handler, which is like a second thread). If the closure had captured some state that &lt;em&gt;isn't&lt;/em&gt; thread-safe, like a simple &lt;code&gt;mut&lt;/code&gt; local variable or a &lt;code&gt;Cell&lt;/code&gt;, it is a compile error. (&lt;code&gt;SpinLock&lt;/code&gt; in the code above is thread-safe.)&lt;/p&gt;
&lt;p&gt;As of C++11, C++ has closures with captures. You could almost implement this same API in &lt;code&gt;m4vgalib&lt;/code&gt;. But I wouldn't, because...&lt;/p&gt;
&lt;ul readability=&quot;5.9386189258312&quot;&gt;&lt;li readability=&quot;4.8955613577024&quot;&gt;
&lt;p&gt;&lt;strong&gt;It wouldn't be robust.&lt;/strong&gt; Capturing stack structures by reference creates a real risk that you'll accidentally leak the reference into a larger scope, e.g. by storing it in a global or member field of a long-lived object. Plus, C++'s type system doesn't have any notion of thread-safety, so nothing would stop you from sharing a non-threadsafe structure with the ISR. It's all &lt;a href=&quot;https://en.wiktionary.org/wiki/footgun&quot;&gt;footguns&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;strong&gt;It might require allocations.&lt;/strong&gt; In Rust, the ISR invokes the closure generically through the &lt;code&gt;FnMut&lt;/code&gt; trait that all closures implement. In C++, there is no direct equivalent; closures do not have vtables, but must be wrapped in a heap-allocated &lt;code&gt;std::function&lt;/code&gt; to be used dynamically. (In Rust, closures also do not have vtables, because we don't do virtual dispatch the same way. That's a longer story.)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Rust has a reputation for producing larger binaries than C++. This reputation appears to be undeserved.&lt;/p&gt;
&lt;p&gt;If you run a release build of one of the demos and run &lt;code&gt;size&lt;/code&gt;, you will find binaries that are larger than their C++ equivalents. For example, here's a comparison of &lt;code&gt;horiz_tp&lt;/code&gt; written in each language:&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt; text          data     bss     dec     hex filename
&lt;/span&gt;&lt;span&gt; 4463            16  179688  184167   2cf67 cpp/horiz_tp
&lt;/span&gt;&lt;span&gt;21010            92  180872  201974   314f6 rust/horiz_tp
&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;This comparison is misleading.&lt;/strong&gt; The C++ codebase goes to some length to avoid including extraneous material in Flash — in particular, it compiles out all assert messages. Rust, on the other hand, is built with support for stack unwinding and panic messages. (Why? Because Rust came with support for funneling those messages over JTAG and into my debugger through the processor's ITM block. C++ had no such support, so I didn't waste the Flash.)&lt;/p&gt;
&lt;p&gt;But this means each binary contains all the panic strings, plus all the message formatting code. If you would like to produce smaller binaries, and are willing to sacrifice panic messages, you need to build with a different feature set:&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;$ cargo build --release --no-default-features --features panic-halt
&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;In this mode, the binaries are much smaller:&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;text    data     bss     dec     hex filename
&lt;/span&gt;&lt;span&gt;4366     104  180860  185330   2d3f2 horiz_tp
&lt;/span&gt;&lt;span&gt;4404     104  180796  185304   2d3d8 xor_pattern
&lt;/span&gt;&lt;span&gt;6688     104  180152  186944   2da40 conway
&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;In fact, &lt;em&gt;the binaries are 3-9% smaller than in C++,&lt;/em&gt; despite compiling the C++ with &lt;code&gt;-Os&lt;/code&gt; and the Rust with (the equivalent of) &lt;code&gt;-O3&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Size has not been a issue for this project.&lt;/p&gt;

&lt;p&gt;I'm currently using &lt;code&gt;unsafe&lt;/code&gt; in 35 places. &lt;em&gt;None of them are for Rust-specific performance reasons.&lt;/em&gt; (I say &quot;Rust-specific&quot; because some of them are calling into assembly routines, which definitely exist for performance reasons, but are identical in C++.)&lt;/p&gt;
&lt;p&gt;The majority of &lt;code&gt;unsafe&lt;/code&gt; code (&lt;strong&gt;13 instances&lt;/strong&gt;) is related to a class of API deficits in the &lt;code&gt;stm32f4&lt;/code&gt; device interface crate I'm using. It treats any field in a register for which it doesn't have defined valid bit patterns as potentially unsafe... and then fails to define most of the register fields I'm using. Not sure why. I imagine this can be fixed. (I've already upstreamed part of the fix.)&lt;/p&gt;
&lt;p&gt;After that, the leading causes are situations that are &lt;em&gt;inherently&lt;/em&gt; unsafe. In these cases the right solution is to wrap the code in a neat, safe API (and I have):&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;5 cases: Getting exclusive references to shared mutable global data, which is super racy unless you're careful.&lt;/li&gt;
&lt;li&gt;4 cases: Calling into assembly code, which can do literally whatever it wants and so must be handled carefully.&lt;/li&gt;
&lt;li&gt;4 cases: Managing the DMA controller, which is basically a peripheral for doing unsafe memory things.&lt;/li&gt;
&lt;li&gt;3 cases: Implementing custom mutex-like types.&lt;/li&gt;
&lt;li&gt;2 cases: Setting up the CPU and hardware environment.&lt;/li&gt;
&lt;li&gt;2 cases: Doing something scary with &lt;code&gt;core::mem::transmute&lt;/code&gt; to implement an inter-thread reference sharing primitive:&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;em&gt;These are the reason &lt;code&gt;unsafe&lt;/code&gt; exists:&lt;/em&gt; so that I can do these things without having to change languages or use assembler. (Note that unsafe Rust is still a more featureful place than safe C.)&lt;/p&gt;
&lt;p&gt;This leaves two &lt;code&gt;unsafe&lt;/code&gt; uses that can likely be fixed:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Taking a very lazy shortcut with &lt;code&gt;core::mem::transmute&lt;/code&gt; that can probably be improved.&lt;/li&gt;
&lt;li&gt;Deliberately aliasing a &lt;code&gt;[u32]&lt;/code&gt; as &lt;code&gt;[u8]&lt;/code&gt;, which is memory-safe but endian-sensitive.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;If you wanted to check every potential source of memory and data race bugs in the Rust codebase, you would need to review these 35 locations; you can find them all trivially using &lt;code&gt;grep&lt;/code&gt;. To perform the same review in &lt;code&gt;m4vgalib&lt;/code&gt;, you would be reading &lt;strong&gt;10,692 lines of unsafe code.&lt;/strong&gt; That is, every C++ statement that I wrote.&lt;/p&gt;

&lt;p&gt;I can't bring up memory safety without someone taking a potshot at Rust's bounds checking for arrays. Since &lt;code&gt;m4vga&lt;/code&gt; demands pretty high performance, I've been auditing the machine code produced by &lt;code&gt;rustc&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the performance critical parts of the code, bounds checks were either &lt;em&gt;already eliminated at compile time,&lt;/em&gt; or could be eliminated by a simple refactoring of the code.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The demos spend effectively no time evaluating bounds checks.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;There are two relevant patterns in the current code.&lt;/p&gt;
&lt;p&gt;First: in Rust, we can pass a fixed-length array by reference &lt;em&gt;without it degrading into a pointer as it does in C.&lt;/em&gt; For instance,&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;fn &lt;/span&gt;&lt;span&gt;get_element_3&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;array&lt;/span&gt;&lt;span&gt;: [&lt;/span&gt;&lt;span&gt;u8&lt;/span&gt;&lt;span&gt;; 10]) -&amp;gt; &lt;/span&gt;&lt;span&gt;u8 &lt;/span&gt;&lt;span&gt;{
    &lt;/span&gt;&lt;span&gt;// This bounds check is trivially proven and will not be
    // performed at runtime.
&lt;/span&gt;&lt;span&gt;    array[&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;]
}

&lt;/span&gt;&lt;span&gt;// This attempt to pass a 2-element array is a compile
// error.
&lt;/span&gt;&lt;span&gt;get_element_3&lt;/span&gt;&lt;span&gt;([&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;; &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;]);
&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Neither of those statements holds in C. As a result, we use fixed-length arrays in several places in the demo where we didn't in C++.&lt;/p&gt;
&lt;p&gt;Second, if the length of an array is known (to us, the programmer) but not &lt;em&gt;known&lt;/em&gt; (to the poor compiler), we can hoist bounds checks to a convenient place. For instance, this routine as written performs runtime bounds checks at each loop iteration:&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;// Note that the array is a slice of runtime-determined length.
&lt;/span&gt;&lt;span&gt;fn &lt;/span&gt;&lt;span&gt;fill_1024&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;array&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;mut&lt;/span&gt;&lt;span&gt; [&lt;/span&gt;&lt;span&gt;u8&lt;/span&gt;&lt;span&gt;], &lt;/span&gt;&lt;span&gt;color&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;u8&lt;/span&gt;&lt;span&gt;) {
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; i &lt;/span&gt;&lt;span&gt;in &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;..&lt;/span&gt;&lt;span&gt;1024 &lt;/span&gt;&lt;span&gt;{
        array[i] &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; color;
    }
}
&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;We can check the length outside the loop, and make the length visible to the compiler, like this:&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;fn &lt;/span&gt;&lt;span&gt;fill_1024&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;array&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;mut&lt;/span&gt;&lt;span&gt; [&lt;/span&gt;&lt;span&gt;u8&lt;/span&gt;&lt;span&gt;], &lt;/span&gt;&lt;span&gt;color&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;u8&lt;/span&gt;&lt;span&gt;) {
    &lt;/span&gt;&lt;span&gt;// Perform an explicit, checked, slice of the array before
    // entering the loop.
    &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; array &lt;/span&gt;&lt;span&gt;= &amp;amp;&lt;/span&gt;&lt;span&gt;mut&lt;/span&gt;&lt;span&gt; array[&lt;/span&gt;&lt;span&gt;..&lt;/span&gt;&lt;span&gt;1024&lt;/span&gt;&lt;span&gt;];

    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; i &lt;/span&gt;&lt;span&gt;in &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;..&lt;/span&gt;&lt;span&gt;1024 &lt;/span&gt;&lt;span&gt;{
        array[i] &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; color;
    }
}
&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;Most of the actual &lt;em&gt;thinking&lt;/em&gt; that I had to do during the port — as opposed to mechanically translating C++ code into Rust — had to do with ownership and races.&lt;/p&gt;
&lt;p&gt;(This won't surprise anyone who remembers learning Rust.)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;m4vga&lt;/code&gt; is a prioritized preemptive multi-tasking system: it runs application code at the processor's Thread priority, and interrupts it with a collection of three interrupt service routines that generate video.&lt;/p&gt;
&lt;p&gt;And, to keep things interesting, they all share data with each other. There's potential for all manner of interesting data races. (And believe me, most of them happened during the development of the C++ codebase.)&lt;/p&gt;
&lt;p&gt;The C++ code uses a data race mitigation strategy that I call &lt;em&gt;convince yourself it works once and then hope it never breaks.&lt;/em&gt; (I can use a snarky name like that because I'm talking about work &lt;em&gt;I did.&lt;/em&gt;) In a couple of places I used &lt;code&gt;std::atomic&lt;/code&gt; (or my own intrinsics, before &lt;code&gt;atomic&lt;/code&gt; stabilized — yes, this code is old), and in others I relied on the assumption that I was running on an Cortex-M3/M4 and crossed my fingers.&lt;/p&gt;
&lt;p&gt;I could certainly use the same strategy in Rust by employing &lt;code&gt;unsafe&lt;/code&gt; code. But that's boring.&lt;/p&gt;
&lt;p&gt;Instead, I figured out which pieces of data were shared between which tasks, grouped them, and wrapped them with custom bare-metal mutex types. Whenever a thread or ISR wants to access data, it locks it, performs the access, and unlocks it. This costs a few cycles more than the C++ &quot;hold my beer&quot; approach, but that hasn't been an issue even in the latency-sensitive parts of the code.&lt;/p&gt;
&lt;p&gt;Because of Rust's ownership and thread-safety rules, you can &lt;em&gt;only&lt;/em&gt; share data between threads and ISRs if it's packaged in one of these thread-safe containers. In Rust terms, the containers convert a type that is &lt;code&gt;Send&lt;/code&gt;, or safe to move &lt;em&gt;between&lt;/em&gt; threads but not safe to use &lt;em&gt;concurrently&lt;/em&gt;, into a type that is &lt;code&gt;Sync&lt;/code&gt;, or safe for concurrent use. If you add some new data and attempt to share it without protecting it, your code will simply not compile. This means &lt;em&gt;I don't have to think about data races&lt;/em&gt; except when I'm hacking the internals of a locking primitive, so I can think about other things instead.&lt;/p&gt;
&lt;p&gt;On lock contention, we &lt;code&gt;panic!&lt;/code&gt;. This is a hard-real-time system; if data isn't available on the cycle we need it, the display is going to distort and there's no point in continuing. Late data is wrong data, after all. Using Rust's &lt;code&gt;panic!&lt;/code&gt; facility has the pleasant side effect of printing a human-readable error message on my debugger (thanks to the &lt;code&gt;panic_itm&lt;/code&gt; crate).&lt;/p&gt;
&lt;p&gt;So far two interesting side effects have come up:&lt;/p&gt;
&lt;ol readability=&quot;1&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;Having to think about task interactions has led to a much better factoring of the driver code, which was initially laid out like the C++ code.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;I found an actual bug &lt;em&gt;that also exists in the C++ code&lt;/em&gt;. There was a subtle data race between rasterization and the start-of-active-video ISR. I caught it and fixed it in the Rust. I haven't yet updated the C++ (because meh... it would just regress.)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;span class=&quot;post-tags&quot;&gt;&lt;a href=&quot;http://cliffle.com/tags/c/&quot;&gt;#c++&lt;/a&gt; &lt;a href=&quot;http://cliffle.com/tags/embedded/&quot;&gt;#embedded&lt;/a&gt; &lt;a href=&quot;http://cliffle.com/tags/graphics/&quot;&gt;#graphics&lt;/a&gt; &lt;a href=&quot;http://cliffle.com/tags/rust/&quot;&gt;#rust&lt;/a&gt;&lt;/span&gt;</description>
<pubDate>Wed, 01 Jan 2020 08:38:20 +0000</pubDate>
<dc:creator>zimmerfrei</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://cliffle.com/blog/m4vga-in-rust/</dc:identifier>
</item>
<item>
<title>Show HN: Simple 2D car physics with JavaScript</title>
<link>https://pakastin.github.io/car/</link>
<guid isPermaLink="true" >https://pakastin.github.io/car/</guid>
<description>&lt;canvas/&gt;
    &lt;p&gt;
      &lt;button&gt;Disconnect&lt;/button&gt;
      &lt;button&gt;Clear screen&lt;/button&gt;
    &lt;/p&gt;
    &lt;a href=&quot;https://github.com/pakastin/car&quot; class=&quot;github-corner&quot; aria-label=&quot;View source on GitHub&quot;&gt;&lt;svg width=&quot;80&quot; height=&quot;80&quot; viewbox=&quot;0 0 250 250&quot; aria-hidden=&quot;true&quot;&gt;&lt;path d=&quot;M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z&quot;/&gt;&lt;path d=&quot;M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2&quot; fill=&quot;currentColor&quot; class=&quot;octo-arm&quot;/&gt;&lt;path d=&quot;M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z&quot; fill=&quot;currentColor&quot; class=&quot;octo-body&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;&lt;style&gt;&lt;![CDATA[.github-corner:hover .octo-arm{animation:octocat-wave 560ms ease-in-out}@keyframes octocat-wave{0%,100%{transform:rotate(0)}20%,60%{transform:rotate(-25deg)}40%,80%{transform:rotate(10deg)}}@media (max-width:500px){.github-corner:hover .octo-arm{animation:none}.github-corner .octo-arm{animation:octocat-wave 560ms ease-in-out}}]]&gt;&lt;/style&gt;</description>
<pubDate>Wed, 01 Jan 2020 07:26:17 +0000</pubDate>
<dc:creator>pkstn</dc:creator>
<og:title>Multiplayer 2d car game!</og:title>
<og:image>https://pakastin.github.io/car/og.png</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>https://pakastin.github.io/car/</dc:identifier>
</item>
<item>
<title>Automate the Boring Stuff with Python (2015)</title>
<link>https://automatetheboringstuff.com/2e/</link>
<guid isPermaLink="true" >https://automatetheboringstuff.com/2e/</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://automatetheboringstuff.com/2e/&quot;&gt;https://automatetheboringstuff.com/2e/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=21927009&quot;&gt;https://news.ycombinator.com/item?id=21927009&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 347&lt;/p&gt;
&lt;p&gt;# Comments: 59&lt;/p&gt;
</description>
<pubDate>Wed, 01 Jan 2020 07:02:26 +0000</pubDate>
<dc:creator>saranshk</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://automatetheboringstuff.com/2e/</dc:identifier>
</item>
<item>
<title>Calculate the day of the week for any date in your head</title>
<link>http://rudy.ca/doomsday.html</link>
<guid isPermaLink="true" >http://rudy.ca/doomsday.html</guid>
<description>&lt;h2&gt;The Doomsday Algorithm gives the day of the week for any date (and you can do it in your head)&lt;/h2&gt;
&lt;p class=&quot;dateadded&quot;&gt;Added 1994-02-22, Updated 2019-02-28 with examples for 2019&lt;/p&gt;
&lt;br /&gt;&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;The Doomsday Algorithm is presented in the following sections.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://rudy.ca/doomsday.html#feb2829&quot;&gt;February 28 or 29&lt;/a&gt;: Doomsday is the last day of February&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rudy.ca/doomsday.html#even&quot;&gt;Even Months&lt;/a&gt;: April, June, August, October, and December (months 4, 6, 8, 10, and 12)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rudy.ca/doomsday.html#odd&quot;&gt;Odd Months&lt;/a&gt;: March, May, July, September, and November (months 3, 5, 7, 9, and 11)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rudy.ca/doomsday.html#calendar&quot;&gt;2018 Calendar&lt;/a&gt;: the current year calendar, highlighting the Doomsday in each month&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rudy.ca/doomsday.html#years&quot;&gt;Other Years&lt;/a&gt;: how to apply the Doomsday Algorithm to other years in the 1900s and 2000s&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rudy.ca/doomsday.html#centuries&quot;&gt;Other Centuries&lt;/a&gt;: extending the Doomsday Algorithm to other centuries&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rudy.ca/doomsday.html#hand&quot;&gt;The Hand&lt;/a&gt;: Dr. Conway's shortcut method&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rudy.ca/doomsday.html#origins&quot;&gt;Origins&lt;/a&gt;: the creation of the Doomsday Algorithm by Dr. John Horton Conway&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rudy.ca/doomsday.html#links&quot;&gt;Links&lt;/a&gt;: Doomsday Algorithm resources on the Web for additional information&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Have fun!&lt;/p&gt;
&lt;h2 id=&quot;feb2829&quot;&gt;February 28 or 29&lt;/h2&gt;
&lt;p&gt;To use the Doomsday Algorithm in any year, we first need to know the Doomsday for that year.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Doomsday is February 28 or 29&lt;/strong&gt;. In other words, Doomsday is always the last day of February. In normal years, Doomsday is February 28, and in leap years, Doomsday is February 29.&lt;/p&gt;
&lt;p&gt;In 2019, which is not a leap year, the last day of February is &lt;strong&gt;Thursday&lt;/strong&gt; the 28th.&lt;/p&gt;
&lt;p&gt;Once we know Doomsday, it's pretty easy to get the day of the week for any day in February. This is done by adding and subtracting, using multiples of 7, and you should be comfortable doing this in your head, otherwise the rest of the algorithm will give you trouble! Luckily, most people, through practice or whatever, are good at mentally picturing a month if they have something to anchor it on, and Doomsday is this anchor. For February, it's always the 28th in normal years, and the 29th in leap years.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;: what is this year's Valentine's Day, February 14th?&lt;br /&gt;&lt;strong&gt;Answer&lt;/strong&gt;: Doomsday 2019 is Thursday the 28th of February. So one week earlier, the 21st is also Thursday. Another week earlier is Thursday the 14th. So Valentine's Day 2019 is Thursday.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;: what is this year's Groundhog day, February 2nd?&lt;br /&gt;&lt;strong&gt;Answer&lt;/strong&gt;: Doomsday 2019 is Thursday the 28th of February... then subtracting 7 for each week going backwards, we have Thursday the 21st... Thursday the 14th... Thursday the 7th... and then we have to go five days back, to get from the 7th to the 2nd.&lt;/p&gt;
&lt;p&gt;If going back five days in your head is difficult—and it often is, especially looking back over a weekend—there's a little trick we can use here. Going two days forward gives the &lt;em&gt;same day of the week&lt;/em&gt; as five days back. So if February 7th is Thursday, then two days forward is Saturday the 9th, which is the same day of the week as Saturday the 2nd. So Groundhog day in 2019 is Saturday. Remember, all we're after is the day of the week, so &quot;-5&quot; is the same as &quot;+2&quot; but &quot;+2&quot; is usually easier to do.&lt;/p&gt;
&lt;p&gt;If it helps, you can review the above two examples using this calendar for February 2019 —&lt;/p&gt;
&lt;pre class=&quot;highlight&quot;&gt;
  &lt;strong&gt;2.Feb(28th/non-leap)&lt;/strong&gt;
  Su Mo Tu We Th Fr Sa                       
                  1  2      
   3  4  5  6  7  8  9                       
  10 11 12 13 14 15 16                       
  17 18 19 20 21 22 23                       
  24 25 26 27 &lt;strong&gt;28&lt;/strong&gt;  
&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;http://rudy.ca/doomsday.html#content&quot;&gt;Return to top&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;even&quot;&gt;Even Months&lt;/h2&gt;
&lt;p&gt;Okay, the last day of February is Doomsday. Once we know what day of the week Doomsday is, we immediately know the day of the week of certain other days in the year. There are actually 52 (or 53) other days which are all on the same day of the week as &quot;the&quot; Doomsday at the end of February, but there's a special one each month which we will now learn.&lt;/p&gt;
&lt;p&gt;Each month has a special day which we remember, because it is on the same day of the week as the Doomsday which is at the end of February. We call these the Doomsdays for their months. Just keep in mind that the entire year is determined by the Doomsday at the end of February, and that all the other Doomsdays within the year are on the same day of the week.&lt;/p&gt;
&lt;p&gt;Let's begin with the even months. These are months 2, 4, 6, 8, 10, and 12, i.e. February, April, June, August, October, and December. Actually, we never do February this way, because it's special, and we've already covered it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;For even months&lt;/strong&gt; (not including February), &lt;strong&gt;the Nth of that month is a Doomsday&lt;/strong&gt;. In other words, it's the same day of the week as the last day in February. This is a delightful coincidence, and it's &lt;em&gt;so&lt;/em&gt; easy to remember:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;April 4th is a Doomsday&lt;/li&gt;
&lt;li&gt;June 6th is a Doomsday&lt;/li&gt;
&lt;li&gt;August 8th is a Doomsday&lt;/li&gt;
&lt;li&gt;October 10th is a Doomsday&lt;/li&gt;
&lt;li&gt;December 12th is a Doomsday&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Neat, eh? Now we can simply work our way around any even month based on its Doomsday.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;: what is this year's Christmas Day, December 25th?&lt;br /&gt;&lt;strong&gt;Answer&lt;/strong&gt;: Doomsday 2019 is Thursday. Then December (even month) 12th is the Doomsday for December, so it's also Thursday. Two weeks later, December 26th is also Thursday, so Christmas, the day before, is Wednesday December 25th. Easy! In fact, after you do the Doomsday algorithm often enough, you just start remembering things like &lt;strong&gt;Christmas is always the day before Doomsday&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;: what is this year's Halloween, October 31st?&lt;br /&gt;&lt;strong&gt;Answer&lt;/strong&gt;: Doomsday 2019 is Thursday. So October (even) 10th is Thursday. Then three weeks (21 days) later is Thursday, October 31st. Easy! In fact, after you do the Doomsday algorithm often enough, you just start remembering things like &lt;strong&gt;Halloween is always Doomsday&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;: what is this year's Canadian Thanksgiving Day, the second Monday in October?&lt;br /&gt;&lt;strong&gt;Answer&lt;/strong&gt;: Doomsday 2019 is Thursday. So October (even) 10th is Thursday. A week earlier is Thursday October 3rd, and two days before that is Tuesday the 1st. So that means the first Monday of October is the 7th, and the second Monday in October, Canadian Thanksgiving (also Columbus Day in the US), is Monday, October 14th in 2019.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://rudy.ca/doomsday.html#content&quot;&gt;Return to top&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;odd&quot;&gt;Odd Months&lt;/h2&gt;
&lt;p&gt;Now let's do the odd months—months 1, 3, 5, 7, 9, and 11, i.e. January, March, May, July, September, and November. Skip January and March for a moment, and concentrate on 5, 7, 9, and 11.&lt;/p&gt;
&lt;p&gt;Consider the following mnemonic phrase:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;I work 9-5 at the 7-11&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&quot;Nine to five&quot; is a common working day (9 a.m. to 5 p.m.) while &lt;a href=&quot;http://www.7-eleven.com/&quot;&gt;7-Eleven&lt;/a&gt; is a chain of convenience stores. This mnemonic phrase should help you remember:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;for the 9th month, Doomsday is the 5th&lt;/li&gt;
&lt;li&gt;for the 5th month, Doomsday is the 9th&lt;/li&gt;
&lt;li&gt;for the 7th month, Doomsday is the 11th&lt;/li&gt;
&lt;li&gt;for the 11th month, Doomsday is the 7th&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;This gives us Doomsday for May, July, September, and November. Now we just work our way around again within each month, using the Doomsday for that month.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;: what day is this year's July 4th?&lt;br /&gt;&lt;strong&gt;Answer&lt;/strong&gt;: Doomsday 2019 is Thursday, so the Doomsday for July (7th month) is the 11th, also a Thursday. So one week earlier, July 4th is also Thursday. In fact, after you do the Doomsday algorithm often enough, you just start remembering things like &lt;strong&gt;July 4th is always Doomsday&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;: what is this year's Labour Day, the first Monday of September?&lt;br /&gt;&lt;strong&gt;Answer&lt;/strong&gt;: Doomsday 2019 is Thursday. September (9th month) 5th is Thursday. To o back to Monday, we go back 3 days. So Labour Day in 2019, the first Monday of September, is September 2nd.&lt;/p&gt;
&lt;p&gt;Now March.&lt;/p&gt;
&lt;p&gt;Doomsday, the last day of February, is often also called the &quot;0th&quot; of March. You might have to think about that for a moment, until you realize that the next day is the 1st of March. So if the &quot;0th&quot; of March is Doomsday, then the &lt;strong&gt;7th of March&lt;/strong&gt;, exactly one week after the last day of February, no matter whether it's the 28th or 29th, is also Doomsday.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;: what day is this year's St. Patrick's Day, March 17th?&lt;br /&gt;&lt;strong&gt;Answer&lt;/strong&gt;: Doomsday 2019 is Thursday, which we know is the &quot;0th&quot; of March. So a week later, March 7th is Thursday. March 14th is Thursday. Now we go three days forward, to get to Sunday, March 17th.&lt;/p&gt;
&lt;p&gt;An alternate, simpler method for March is to use &lt;a href=&quot;https://en.wikipedia.org/wiki/Pi_Day&quot;&gt;Pi Day&lt;/a&gt;, which is March 14th, i.e. 3/14 using month/day numbers. &lt;strong&gt;Pi Day is always Doomsday&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Finally, we have to be able to do January.&lt;/p&gt;
&lt;p&gt;The easiest way to calculate January's Doomsday was described to me by reader &lt;strong&gt;Bob Goddard&lt;/strong&gt;:&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;It's January 3rd three years out of four, the non-leap years. It's January 4th only in the fourth year, the years divisible by 4.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is &lt;em&gt;so&lt;/em&gt; much simpler than what I had before (which involved January 31st and &quot;January 32nd&quot;).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;: what is this year's New Year's Day (January 1st)?&lt;br /&gt;&lt;strong&gt;Answer&lt;/strong&gt;: Doomsday 2019 is Thursday, and since 2019 is not a leap year, January 3rd is Thursday. Go back 2 days, and January 1st is Tuesday. Simple, eh? Thanks, Bob.&lt;/p&gt;
&lt;p&gt;Another way to calculate January's Doomsday was sent to me by reader &lt;strong&gt;Roman Weil&lt;/strong&gt;. It's actually due to his son Sandy Weil, who is the Director of Football Analytics for the Baltimore Ravens:&lt;/p&gt;
&lt;blockquote readability=&quot;17&quot;&gt;
&lt;p&gt;A January trick: Instead of associating January with the new year, associate it with the old. That is, think of Jan 2019 as being part of 2018. In that case, Pi Days in January are 1/2 and 1/23. So in 2019, 1/2 and 1/23 are Wednesdays, which is the Pi Day of 2018. You will find, if you are like me, that when you think about January, it's more often about 'next January' than about 'last January,' so putting January at the end of the current year will solve most of your January issues.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Sandy here refers to &quot;Pi Days&quot; which is another name for Doomsdays—this is further discussed in &lt;a href=&quot;http://rudy.ca/doomsday.html#origins&quot;&gt;Origins&lt;/a&gt;. The mnemonic part of Sandy's trick is that 1/2 and 1/23 sound like &quot;one two&quot; and &quot;one two three.&quot;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://rudy.ca/doomsday.html#content&quot;&gt;Return to top&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;calendar&quot;&gt;2019 Calendar&lt;/h2&gt;
&lt;p&gt;If you've worked your way through the rules but have trouble remembering them, it may help to see the Doomsdays in calendar form. Here's the Doomsday Calendar for 2019 with all the Doomsdays highlighted:&lt;/p&gt;
&lt;h3&gt;Doomsday Calendar for 2019&lt;/h3&gt;
&lt;pre class=&quot;highlight&quot;&gt;
  &lt;strong&gt; 1.Jan(3rd/nonleap) &lt;/strong&gt;   &lt;strong&gt; 2.Feb(28th/nonleap)&lt;/strong&gt;
  Su Mo Tu We Th Fr Sa   Su Mo Tu We Th Fr Sa
         1  2  &lt;strong&gt;3&lt;/strong&gt;  4  5                   1  2
   6  7  8  9 10 11 12    3  4  5  6  7  8  9
  13 14 15 16 17 18 19   10 11 12 13 14 15 16
  20 21 22 23 24 25 26   17 18 19 20 21 22 23
  27 28 29 30 31         24 25 26 27 &lt;strong&gt;28&lt;/strong&gt;  
  
  &lt;strong&gt;     3.Mar(7th)     &lt;/strong&gt;   &lt;strong&gt;     4.Apr(4th)     &lt;/strong&gt;
  Su Mo Tu We Th Fr Sa   Su Mo Tu We Th Fr Sa
                  1  2       1  2  3  &lt;strong&gt;4&lt;/strong&gt;  5  6
   3  4  5  6  &lt;strong&gt;7&lt;/strong&gt;  8  9    7  8  9 10 11 12 13
  10 11 12 13 14 15 16   14 15 16 17 18 19 20
  17 18 19 20 21 22 23   21 22 23 24 25 26 27
  24 25 26 27 28 29 30   28 29 30
  31
  
  &lt;strong&gt;     5.May(9th)     &lt;/strong&gt;   &lt;strong&gt;     6.Jun(6th)     &lt;/strong&gt;
  Su Mo Tu We Th Fr Sa   Su Mo Tu We Th Fr Sa
            1  2  3  4                      1
   5  6  7  8  &lt;strong&gt;9&lt;/strong&gt; 10 11    2  3  4  5  &lt;strong&gt;6&lt;/strong&gt;  7  8
  12 13 14 15 16 17 18    9 10 11 12 13 14 15
  19 20 21 22 23 24 25   16 17 18 19 20 21 22
  26 27 28 29 30 31      23 24 25 26 27 28 29
                         30
  
  &lt;strong&gt;     7.Jul(11th)    &lt;/strong&gt;   &lt;strong&gt;     8.Aug(8th)     &lt;/strong&gt;
  Su Mo Tu We Th Fr Sa   Su Mo Tu We Th Fr Sa
      1  2  3  4  5  6                1  2  3
   7  8  9 10 &lt;strong&gt;11&lt;/strong&gt; 12 13    4  5  6  7  &lt;strong&gt;8&lt;/strong&gt;  9 10
  14 15 16 17 18 19 20   11 12 13 14 15 16 17 
  21 22 23 24 25 26 27   18 19 20 21 22 23 24
  28 29 30 31            25 26 27 28 29 30 31
  
  &lt;strong&gt;     9.Sep(5th)     &lt;/strong&gt;   &lt;strong&gt;    10.Oct(10th)    &lt;/strong&gt;
  Su Mo Tu We Th Fr Sa   Su Mo Tu We Th Fr Sa
   1  2  3  4  &lt;strong&gt;5&lt;/strong&gt;  6  7          1  2  3  4  5
   8  9 10 11 12 13 14    6  7  8  9 &lt;strong&gt;10&lt;/strong&gt; 11 12 
  15 16 17 18 19 20 21   13 14 15 16 17 18 19
  22 23 24 25 26 27 28   20 21 22 23 24 25 26
  29 30                  27 28 29 30 31
  
  &lt;strong&gt;    11.Nov(7th)     &lt;/strong&gt;   &lt;strong&gt;    12.Dec(12th)    &lt;/strong&gt;
  Su Mo Tu We Th Fr Sa   Su Mo Tu We Th Fr Sa
                  1  2    1  2  3  4  5  6  7
   3  4  5  6  &lt;strong&gt;7&lt;/strong&gt;  8  9    8  9 10 11 &lt;strong&gt;12&lt;/strong&gt; 13 14
  10 11 12 13 14 15 16   15 16 17 18 19 20 21
  17 18 19 20 21 22 23   22 23 24 25 26 27 28
  24 25 26 27 28 29 30   29 30 31
&lt;/pre&gt;
&lt;h3&gt;Previous Doomsday Calendars&lt;/h3&gt;
&lt;p&gt;Here are links to single-page versions of the Doomsday Calendar (the first two are actually GIFs; sorry 'bout that) suitable for printing:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://rudy.ca/doomsday.html#content&quot;&gt;Return to top&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;years&quot;&gt;Other Years&lt;/h2&gt;
&lt;p&gt;Okay, we can do 2019. What about other years? If Doomsday is Thursday this year, what was it last year, in 2018?&lt;/p&gt;
&lt;p&gt;Well, you could go look it up in a calendar, but let me tell you it was a Wednesday. Doomsday advances by one day each year because 365 divided by 7 leaves 1 remainder. Doomsday advances two days each leap year, and we'll come back to more on that in a moment.&lt;/p&gt;
&lt;p&gt;Let's work a couple of examples for last year, 2018, when Doomsday was Wednesday.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;: what day was New Year's Eve last year?&lt;br /&gt;&lt;strong&gt;Answer&lt;/strong&gt;: Start with Doomsday for last year -- Doomsday 2018 was Wednesday. December (even) 12th was Wednesday, and so was the 26th. Five days later, December 31st, was Monday. Or, if you're starting to get the hang of this, instead of &quot;Wednesday + 5 = Monday,&quot; you'll think &quot;Wednesday - 2 = Monday,&quot; which seems just a wee bit easier. Remember, all we're looking for is the day of the week. So New Year's Eve last year, 2018, was Monday.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;: what day of the week was New Year's Eve, 2017?&lt;br /&gt;&lt;strong&gt;Answer&lt;/strong&gt;: Since we were just doing examples for last year, let's try New Year's Eve, 2017 by going backwards from January 1st, 2018. Now, Doomsday 2018 was Wednesday, and since 2018 was not a leap year, that means that &lt;strong&gt;January 3rd, 2018&lt;/strong&gt; was Wednesday. So then January 1st, 2018 was 2 days earlier, i.e. Monday. Finally, this means that the day before, New Year's Eve, December 31st, 2017, was Sunday.&lt;/p&gt;
&lt;p&gt;The Doomsday Algorithm is often used with people's birthdays. In order to do the Doomsday algorithm for &lt;strong&gt;any year in the 1900's&lt;/strong&gt;, when most of us were born, we need to memorize the fact that &lt;strong&gt;Doomsday for 1900 is Wednesday&lt;/strong&gt;. Then we do a calculation based on the number of years since 1900.&lt;/p&gt;
&lt;p&gt;First, look at the following chart of Doomsdays:&lt;/p&gt;
&lt;pre class=&quot;highlight&quot;&gt;
  &lt;strong&gt; Sun  Mon  Tue  Wed  Thu  Fri  Sat&lt;/strong&gt;
                 1900 1901 1902 1903
  ---- &lt;strong&gt;1904&lt;/strong&gt; 1905 1906 1907 ---- &lt;strong&gt;1908&lt;/strong&gt;
  1909 1910 1911 ---- &lt;strong&gt;1912&lt;/strong&gt; 1913 1914
  1915 ---- &lt;strong&gt;1916&lt;/strong&gt; 1917 1918 1919 ----
  &lt;strong&gt;1920&lt;/strong&gt; 1921 1922 1923 ---- &lt;strong&gt;1924&lt;/strong&gt; 1925
  1926 1927 ---- &lt;strong&gt;1928&lt;/strong&gt; 1929 1930 1931
  ---- &lt;strong&gt;1932&lt;/strong&gt; 1933 1934 1935 ---- &lt;strong&gt;1936&lt;/strong&gt;
  1937 1938 1939 ---- &lt;strong&gt;1940&lt;/strong&gt; 1941 1942
  1943 ---- &lt;strong&gt;1944&lt;/strong&gt; 1945 1946 1947 ----
  &lt;strong&gt;1948&lt;/strong&gt; 1949 1950 1951 ---- &lt;strong&gt;1952&lt;/strong&gt; 1953
  1954 1955 ---- &lt;strong&gt;1956&lt;/strong&gt; 1957 1958 1959
  ---- &lt;strong&gt;1960&lt;/strong&gt; 1961 1962 1963 ---- &lt;strong&gt;1964&lt;/strong&gt;
  1965 1966 1967 ---- &lt;strong&gt;1968&lt;/strong&gt; 1969 1970
  1971 ---- &lt;strong&gt;1972&lt;/strong&gt; 1973 1974 1975 ----
  &lt;strong&gt;1976&lt;/strong&gt; 1977 1978 1979 ---- &lt;strong&gt;1980&lt;/strong&gt; 1981
  1982 1983 ---- &lt;strong&gt;1984&lt;/strong&gt; 1985 1986 1987
  ---- &lt;strong&gt;1988&lt;/strong&gt; 1989 1990 1991 ---- &lt;strong&gt;1992&lt;/strong&gt;
  1993 1994 1995 ---- &lt;strong&gt;1996&lt;/strong&gt; 1997 1998
  1999 ---- &lt;strong&gt;2000&lt;/strong&gt; ...
&lt;/pre&gt;
&lt;p&gt;Notice that Doomsday 1900 is Wednesday. This is the anchor for all the years in the 1900's. (Notice also that 1900 is &lt;em&gt;not&lt;/em&gt; a leap year, so Doomsday 1900 is February 28th.) How do we remember 1900=Wednesday? Dr. Conway (see &lt;a href=&quot;http://rudy.ca/doomsday.html#origins&quot;&gt;Origins&lt;/a&gt;) suggests the mnemonic &quot;We-in-dis-day&quot;, indicative of the fact that most of us were born in the 1900's.&lt;/p&gt;
&lt;p&gt;Now every twelve years, Doomsday advances by one. Check for yourself. In the chart above, pick a year and look ahead twelve years—down two rows and over one day. This leads to the following rule...&lt;/p&gt;
&lt;p&gt;For any year 19YY, using the YY part of the year, calculate:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;the number of 12's in the YY part of the year&lt;/li&gt;
&lt;li&gt;the remainder of step 1&lt;/li&gt;
&lt;li&gt;the number of 4's in the remainder of step 1&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Feel free to throw out multiples of 7 along the way if you find this easy to do.&lt;/p&gt;
&lt;p&gt;Now we need to add the result of our calculation to 1900=Wednesday to get the Doomsday for that year. We do by this treating Wednesday as day 4. Quite easy to remember, since that's Wednesday's day of the week in the normal Sunday-to-Saturday calendar.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;: what is Doomsday 1929?&lt;br /&gt;&lt;strong&gt;Answer&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;29 divided by 12 is &lt;strong&gt;2&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;... remainder &lt;strong&gt;5&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;5 divided by 4 is &lt;strong&gt;1&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Adding these up, we get 5+2+1=&lt;strong&gt;8&lt;/strong&gt;, and we can throw out a 7 to get &lt;strong&gt;1&lt;/strong&gt;. Finally, this 1 has to be added to 1900=Wednesday, so Doomsday for 1929 is Thursday.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;: what is Doomsday 1999?&lt;br /&gt;&lt;strong&gt;Answer&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;99 divided by 12 is &lt;strong&gt;8&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;... remainder &lt;strong&gt;3&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;and of course 3 divided by 4 is &lt;strong&gt;0&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Adding these up, we get 8+3+0=&lt;strong&gt;11&lt;/strong&gt; i.e. &lt;strong&gt;4&lt;/strong&gt;. This has to be added to 1900=Wednesday, so Doomsday for 1999 is Sunday.&lt;/p&gt;
&lt;p&gt;We should now be able to do &lt;strong&gt;any day in the 1900's in our head&lt;/strong&gt;. Let's do a couple more examples...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;: what day of the week was November 27, 1982?&lt;br /&gt;&lt;strong&gt;Answer&lt;/strong&gt;: 82 / 12 = &lt;strong&gt;6&lt;/strong&gt; ... remainder &lt;strong&gt;10&lt;/strong&gt; ... 10 / 4 = &lt;strong&gt;2&lt;/strong&gt; ... 6 + 10 + 2 = 18 which is 4 days to be added to Wednesday (for 1900) ... so Doomsday 1982 was &lt;strong&gt;Sunday&lt;/strong&gt; ... November(11) 7th was Sunday, 28th was Sunday ... November 27th 1982 was Saturday; that was the day the Doomsday Algorithm was featured on &lt;cite&gt;Quirks and Quarks&lt;/cite&gt; (see &lt;a href=&quot;http://rudy.ca/doomsday.html#origins&quot;&gt;Origins&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;: what day of the week was July 20, 1969? (the date of the first landing of humans on the Moon)&lt;br /&gt;&lt;strong&gt;Answer&lt;/strong&gt;: 69 / 12 = &lt;strong&gt;5&lt;/strong&gt; ... remainder &lt;strong&gt;9&lt;/strong&gt; ... 9 / 4 = &lt;strong&gt;2&lt;/strong&gt; ... 5 + 9 + 2 = 16 which is 2 days to be added to Wednesday (for 1900) ... so Doomsday 1969 was &lt;strong&gt;Friday&lt;/strong&gt; ... July(7) 11th is Friday, 18th is Friday ... July 20th 1969 was Sunday&lt;/p&gt;
&lt;h3&gt;Increased Speed&lt;/h3&gt;
&lt;p&gt;Dr. Sidney Graham  sent me the following:&lt;/p&gt;
&lt;blockquote readability=&quot;18.5&quot;&gt;
&lt;p&gt;Do you know Conway's method for &quot;increased speed&quot;? Basically, the trick is to memorize the list:&lt;/p&gt;
&lt;blockquote readability=&quot;14&quot;&gt;
&lt;p&gt;6, 11.5, 17, 23, 28, 34, ...., 84, 90, 95.5&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;These are the years in a century that have the same doomsday as the century year, i.e. Doomsday1900 = Doomsday1906 = Doomsday1917 etc.&lt;/p&gt;
&lt;p&gt;The &quot;11.5&quot; refers to the fact that Doomsday1911 = Doomsday1900 - 1 and Doomsday1912 = Doomsday1900 + 1.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This list of years can be seen in the above table in the column under 1900. Here's that column again, all by itself:&lt;/p&gt;
&lt;pre class=&quot;highlight&quot;&gt;
   Sun  Mon  Tue  Wed  Thu  Fri  Sat
                 1900
                   06
                11 -- 12
                   17
                   23
                   28
                   34
                39 -- 40
                   45
                   51
                   56
                   62
                67 -- 68
                   73
                   79
                   84
                   90
                95 -- 96
&lt;/pre&gt;
&lt;p&gt;Obviously, if you can memorize this list, you can increase the speed of your calculations. For some of us, that's a big &lt;em&gt;IF&lt;/em&gt;; it reminds me of a comment someone made when first shown the entire Doomsday Algorithm:&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;Find the day of the week for any year in history in your head? Maybe, but only if one of the steps included in my head is telling myself &quot;Remember where you put the printout of that page.&quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In any case, let's have a couple of examples:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;: what day of the week was August 13, 1971&lt;br /&gt;&lt;strong&gt;Answer: &quot;67.5&quot; means 1968 = Doomsday + 1&lt;/strong&gt; ... thus 1971 is Doomsday + 4 = Sunday ... August(8) 8th is Doomsday ... August 13th 1971 was a Friday&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;: what day of the week was December 24, 1973?&lt;br /&gt;&lt;strong&gt;Answer: 73 = Doomsday&lt;/strong&gt; ... thus 1973 is Wednesday ... December(12) 12th is Doomsday ... December 24th 1973 was a Monday&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://rudy.ca/doomsday.html#content&quot;&gt;Return to top&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;centuries&quot;&gt;Other Centuries&lt;/h2&gt;
&lt;p&gt;Previously, we learned that Doomsday for 1900 was Wednesday. What is Doomsday for other centuries?&lt;/p&gt;
&lt;p&gt;Let's start with the 21st century, i.e. the 2000's.&lt;/p&gt;
&lt;h3&gt;The 2000's&lt;/h3&gt;
&lt;p&gt;Well, it turns out the 2000's are real easy. Recall the chart we were looking at earlier. Here it is again, extended into the 2000's a few years...&lt;/p&gt;
&lt;pre class=&quot;highlight&quot;&gt;
 &lt;strong&gt;  Sun  Mon  Tue  Wed  Thu  Fri  Sat&lt;/strong&gt;
  1999 ---- &lt;strong&gt;2000&lt;/strong&gt; 2001 2002 2003 ----
  &lt;strong&gt;2004&lt;/strong&gt; 2005 2006 2007 ---- &lt;strong&gt;2008&lt;/strong&gt; 2009
  2010 2011 ---- &lt;strong&gt;2012&lt;/strong&gt; 2013 2014 2015
  ---- &lt;strong&gt;2016&lt;/strong&gt; 2017 2018 2019 ...
&lt;/pre&gt;
&lt;p&gt;Notice that &lt;strong&gt;Doomsday for 2000 is Tuesday, i.e. &quot;2000=Tue&quot;&lt;/strong&gt;. This is the mnemonic that helps us anchor the other years in this century.&lt;/p&gt;
&lt;p&gt;Remember the formula we learned for the 1900's, where we got the multiples of 12, kept the remainder, and added the number of 4's in the remainder? That still works, we just apply it to this century with Tuesday as the Doomsday for the 2000's.&lt;/p&gt;
&lt;p&gt;Let's work through a couple of examples.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;: what day of the week is May 29, 2017? (That would have been &lt;a href=&quot;http://en.wikipedia.org/wiki/John_F._Kennedy&quot;&gt;John F. Kennedy&lt;/a&gt;'s 100th birthday, had he lived.)&lt;br /&gt;&lt;strong&gt;Answer&lt;/strong&gt;: 17 / 12 = &lt;strong&gt;1&lt;/strong&gt; ... remainder &lt;strong&gt;5&lt;/strong&gt; ... 5 / 4 is &lt;strong&gt;1&lt;/strong&gt; ... 1 + 5 + 1 = 7 which is 7=0 days to be added to Tuesday (for the 2000's) ... Doomsday 2017 is &lt;strong&gt;Tuesday&lt;/strong&gt; (which the chart above confirms) ... May(5) 9th is Tuesday, 23rd is Tuesday ... May 29th, 2017 is Monday.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;: what day of the week is July 20, 2069? (That will be the 100th anniversary of the Apollo 11 moon landing.)&lt;br /&gt;&lt;strong&gt;Answer&lt;/strong&gt;: 69 / 12 = &lt;strong&gt;5&lt;/strong&gt; ... remainder &lt;strong&gt;9&lt;/strong&gt; ... 9 / 4 is &lt;strong&gt;2&lt;/strong&gt; ... 5 + 9 + 2 = 16 which is 2 days to be added to Tuesday (for the 2000's) ... Doomsday 2069 is &lt;strong&gt;Thursday&lt;/strong&gt; ... July(7) 11th is Thursday ... July 18th is Thursday, so July 20th, 2069 is Saturday.&lt;/p&gt;
&lt;h3&gt;Other Centuries&lt;/h3&gt;
&lt;p&gt;Let's construct another chart of years, extending backwards and forwards from the previous chart, except we want it to cover a bigger range of years. Let's show only those rows with a century year:&lt;/p&gt;
&lt;pre class=&quot;highlight&quot;&gt;
 &lt;strong&gt;  Sun  Mon  Tue  Wed  Thu  Fri  Sat&lt;/strong&gt;
  1599      &lt;strong&gt;1600&lt;/strong&gt; 1601 1602 1603
  &lt;strong&gt;1700&lt;/strong&gt; 1701 1702 1703      1704 1705
       1796 1797 1798 1799 &lt;strong&gt;1800&lt;/strong&gt; 1801
  1897 1898 1899 &lt;strong&gt;1900&lt;/strong&gt; 1901 1902 1903
  1999      &lt;strong&gt;2000&lt;/strong&gt; 2001 2002 2003
  &lt;strong&gt;2100&lt;/strong&gt; 2101 2102 2103      2104 2105
       2196 2197 2198 2199 &lt;strong&gt;2200&lt;/strong&gt; 2201
  2297 2298 2299 &lt;strong&gt;2300&lt;/strong&gt; 2301 2302 2303
  2399      &lt;strong&gt;2400&lt;/strong&gt; 2401 2402 2403
  &lt;strong&gt;2500&lt;/strong&gt; 2501 2502 2503      2504 2505
&lt;/pre&gt;
&lt;p&gt;Examine this chart carefully, until you convince yourself that it is behaving exactly as you would expect for leap century years and non-leap century years. Remember the rule for determining a leap year:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;if it's divisible by 4, it is a leap year,
&lt;ul&gt;&lt;li&gt;unless it's divisible by 100, then it's &lt;strong&gt;not&lt;/strong&gt; a leap year,
&lt;ul&gt;&lt;li&gt;unless it's divisible by 400, then it &lt;strong&gt;is&lt;/strong&gt; a leap year&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Each normal year advances Doomsday by one day. Each leap year advances Doomsday by two days. Now look at the century years again:&lt;/p&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;strong&gt;   Sun  Mon  Tue  Wed  Thu  Fri  Sat&lt;/strong&gt;
  1700      1600
  2100      2000 1900      1800
  2500      2400 2300      2200
&lt;/pre&gt;
&lt;p&gt;What's the best way to memorize century Doomsdays? I'm not sure. Here's what I use. Notice that century Doomsdays fall only on &quot;Sun-Tue-Wed-Fri&quot;. I say this as &quot;Son to wed Friday&quot;, thinking of my own (&lt;em&gt;second&lt;/em&gt;) son and how pleased I would be if he were indeed getting married this Friday (my first son got married on a Saturday in 2003).&lt;/p&gt;
&lt;p&gt;Combine &quot;Sun-Tue-Wed-Fri&quot; with Dr. Conway's &quot;We-in-dis-day&quot; for 1900=Wednesday and &quot;2000=Tuesday&quot;, and I can reconstruct the chart mentally. The tricky part is that the years go right to left in each row, but 2000=Tue and 1900=Wed help with this. The easy part is that if you can get just that one row, with 2000=Tue and 1900=Wed in it, then the other years have the &lt;strong&gt;same Doomsday, plus or minus 400 years&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;: what day of the week is Canada's 300th birthday, July 1st, 2167?&lt;br /&gt;&lt;strong&gt;Answer&lt;/strong&gt;: 67 / 12 = &lt;strong&gt;5&lt;/strong&gt; ... remainder &lt;strong&gt;7&lt;/strong&gt; ... 7 / 4 = &lt;strong&gt;1&lt;/strong&gt; ... 5 + 7 + 1 = &lt;strong&gt;13&lt;/strong&gt; i.e. &lt;strong&gt;6&lt;/strong&gt; ... 6 + &lt;strong&gt;2100=Sunday&lt;/strong&gt; = Saturday ... July(7) 11th is a Saturday, so July 1st, 2167, is Wednesday.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://rudy.ca/doomsday.html#content&quot;&gt;Return to top&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;hand&quot;&gt;The Hand&lt;/h2&gt;
&lt;p&gt;Dr. Conway now teaches the Doomsday algorithm, complete with Century adjustment, using a very simple visual aid—your hand.&lt;/p&gt;
&lt;pre&gt;
      _____
 ____/  ___)____   &amp;lt;-- 1
         _______)  &amp;lt;-- 2
         ________) &amp;lt;-- 3
 ____    _______)  &amp;lt;-- 4
     \________)    &amp;lt;-- 5
&lt;/pre&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;1 -- Doomsday Difference&lt;br /&gt;2 -- Century Day&lt;br /&gt;3 -- number of DOZENS&lt;br /&gt;4 -- remainder&lt;br /&gt;5 -- number of 4s in remainder&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;strong&gt;Doomsday Difference&lt;/strong&gt; is the difference between the required date and a nearby Doomsday, recorded as so many days &quot;on&quot; (i.e. to be added) or &quot;off&quot; (subtracted) from that Doomsday.&lt;/p&gt;
&lt;p&gt;Recall a couple of the examples we've covered:&lt;/p&gt;
&lt;ul readability=&quot;0.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;July 4th is always Doomsday, i.e. the Doomsday Difference is 0&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;Christmas, December 25th, is always &quot;1 off&quot; Doomsday&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Be careful with the Doomsday Difference for dates in January and February. (Thanks to Bob Goddard for pointing this out.) In a leap year, we must subtract 1 from the Doomsday Difference for January and February dates:&lt;/p&gt;
&lt;ul readability=&quot;7.5&quot;&gt;&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;Valentine's Day, February 14, is always &quot;1 off&quot; Doomsday in leap years, when Doomsday is February 29th; in ordinary years, the Doomsday Difference for Valentine's Day is 0&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;Groundhog Day, February 2, is only &quot;1 on&quot; Doomsday in leap years, when Doomsday is February 29th; in ordinary years, the Doomsday Difference for Groundhog Day is &quot;2 on&quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;New Year's Day, January 1, is always &quot;3 off&quot; Doomsday in leap years, when Doomsday is the 4th of January; in ordinary years, the Doomsday Difference for New Year's Day is &quot;2 off&quot;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Examples using the hand&lt;/h3&gt;
&lt;p&gt;Here, in his own description, is how Dr. Conway would calculate the day of the week for Pearl Harbor Day, December 7th, 1941.&lt;/p&gt;
&lt;blockquote readability=&quot;30.5&quot;&gt;
&lt;p&gt;The various numbers to be attached to the hand are (reading from the thumb):&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&quot;2 on&quot; (for Dec 7)&lt;/li&gt;
&lt;li&gt;&quot;Wednesday&quot; (for 1900)&lt;/li&gt;
&lt;li&gt;&quot;3 dozen&quot; (getting us to 1936)&lt;/li&gt;
&lt;li&gt;&quot;5 remainder&quot; (number of years after 1936)&lt;/li&gt;
&lt;li&gt;&quot;and 1&quot; (since one of those 5 years was a leap year).&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Don't start adding these up until you've formed them all, and then proceed as far as possible by cancelling first 14s, then 7s. To make sure we haven't forgotten them, let's say:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&quot; 2, Wed, 3, 5, 1 &quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(touching the appropriate digits as we do so), and then cancel that 2+5=7 (and folding down the thumb and ring finger) to get&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&quot;Wed, 3 and 1 &quot; = Wed + 4 = Sun&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I also advise use of my mnemonic names for weekdays, namely:&lt;/p&gt;
&lt;blockquote readability=&quot;12&quot;&gt;
&lt;p&gt;NUNday, ONEday, TWOSday, tWEBLESday, FOURSday, FIVEday, SIXurday, SE'ENday&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;which can be pronounced so that they both sound like numbers and weekdays, and so help you do the addition, for example&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&quot; TREBLES, 3 and 1 = SEVENday &quot; (Sunday)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;in the above case.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The nice part about Dr. Conway's Hand is that we do the calculations &lt;strong&gt;in the same order we usually say the date -- month/day, then century/year.&lt;/strong&gt; For example, for August 4, 1997, we do August 4, then 19, then 97.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;: what day is August 4, 1997? &lt;strong&gt;Answer&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;
      _____
 ____/  ___)____   &amp;lt;-- &lt;strong&gt;4 off&lt;/strong&gt; (Aug 4)
         _______)  &amp;lt;-- &lt;strong&gt;Wed&lt;/strong&gt; (for 1900)
         ________) &amp;lt;-- &lt;strong&gt;8&lt;/strong&gt; DOZENS
 ____    _______)  &amp;lt;-- remainder &lt;strong&gt;1&lt;/strong&gt;
     \________)    &amp;lt;-- and &lt;strong&gt;0&lt;/strong&gt;
&lt;/pre&gt;
&lt;p&gt;which is &quot;4 off, tWEBLESday, 8, 1&quot; or -4+3+8+1 which is 1, so August 4, 1997 is a Monday.&lt;/p&gt;
&lt;p&gt;Finally, one last warning: Watch out for Gregorian versus Julian dates. The Doomsday algorithm described up to this point covers only Gregorian dates.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;: what day was September 14, 1752?&lt;br /&gt;&lt;strong&gt;Answer&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;
      _____
 ____/  ___)____   &amp;lt;-- &lt;strong&gt;2 on&lt;/strong&gt; (Sep 14)
         _______)  &amp;lt;-- &lt;strong&gt;Sun&lt;/strong&gt; (for 1700)
         ________) &amp;lt;-- &lt;strong&gt;4&lt;/strong&gt; DOZENS
 ____    _______)  &amp;lt;-- remainder &lt;strong&gt;4&lt;/strong&gt;
     \________)    &amp;lt;-- and &lt;strong&gt;1&lt;/strong&gt;
&lt;/pre&gt;
&lt;p&gt;which is &quot;2, Sun, 4, 4, 1&quot; and we can throw out the 2, a 4 and the 1 to get &lt;strong&gt;4 on Sunday&lt;/strong&gt;, so September 14, 1752 was a Thursday.&lt;/p&gt;
&lt;p&gt;That was a trick question, sort of. September 14, 1752 was the first day of the Gregorian calendar in England and its colonies. (The Gregorian calendar was originally adopted in parts of Europe in 1583). So September 1752 actually looked like this:&lt;/p&gt;
&lt;pre&gt;
Sun Mon Tue Wed Thu Fri Sat
          1   2  14  15  16
 17  18  19  20  21  22  23
 24  25  26  27  28  29  30
&lt;/pre&gt;
&lt;p&gt;Neat, eh?&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://rudy.ca/doomsday.html#content&quot;&gt;Return to top&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;origins&quot;&gt;Origins&lt;/h2&gt;
&lt;p&gt;The Doomsday algorithm was created by &lt;strong&gt;John Horton Conway&lt;/strong&gt;, an eminent mathematician, perhaps best known as the inventor of the &lt;a href=&quot;http://en.wikipedia.org/wiki/Conway's_Game_of_Life&quot;&gt;Game of Life&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I first heard about the Doomsday algorithm on November 27, 1982, on a &lt;strong&gt;CBC Radio&lt;/strong&gt; program called &lt;a href=&quot;http://www.cbc.ca/quirks/&quot;&gt;Quirks and Quarks&lt;/a&gt;. Dr. Conway was interviewed by &lt;strong&gt;Jay Ingram&lt;/strong&gt;, who later worked at Discovery Canada and has recently &lt;a href=&quot;http://www.cbc.ca/news/canada/british-columbia/jay-ingram-explores-alzheimer-s-disease-in-new-book-1.2976547&quot;&gt;released a new book called &lt;cite&gt;The End of Memory&lt;/cite&gt;&lt;/a&gt;. Anyhow, back in those days Quirks and Quarks occasionally made typed transcripts available, and I sent away for one.&lt;/p&gt;
&lt;p&gt;Dr. Conway had just published a book that year (co-authored by Elwyn R. Berlekamp and Richard K. Guy) called &lt;a href=&quot;http://amazon.com/exec/obidos/ASIN/0120911027/r937-20&quot;&gt;Winning Ways For Your Mathematical Plays&lt;/a&gt;, Volume 2: Games in Particular, Academic Press, London, 1982, ISBN 01-12-091102-7. The Doomsday algorithm is on pages 795-797, and the rest of the book is mainly about games, with substantial emphasis on their mathematical underpinnings.&lt;/p&gt;
&lt;p&gt;In the original version of the Doomsday algorithm, the odd months were a bit harder to remember than &quot;I work from 9-5 at the 7-11.&quot; You had to remember if the odd month was a long month or a short month. The 3rd, 5th, and 7th months are &quot;long&quot; because March, May, and July have 31 days, while the 9th and 11th months are &quot;short&quot; because September and November have only 30 days. You could remember &lt;cite&gt;&quot;30 days hath September... and November&quot;&lt;/cite&gt; (but be careful because this old rhyme includes April and June which are even months). Anyway, &lt;strong&gt;for long odd months, Doomsday is the (N+4)th, while for short odd months, Doomsday is the (N-4)th.&lt;/strong&gt; The mnemonic was long=add, short=subtract. Thus:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;March (3rd month, long) 3+4=&lt;strong&gt;7&lt;/strong&gt;th is Doomsday&lt;/li&gt;
&lt;li&gt;May (5th month, long) 5+4=&lt;strong&gt;9&lt;/strong&gt;th is Doomsday&lt;/li&gt;
&lt;li&gt;July (7th month, long) 7+4=&lt;strong&gt;11&lt;/strong&gt;th is Doomsday&lt;/li&gt;
&lt;li&gt;September (9th month, short) 9-4=&lt;strong&gt;5&lt;/strong&gt;th is Doomsday&lt;/li&gt;
&lt;li&gt;November (11th month, short) 11-4=&lt;strong&gt;7&lt;/strong&gt;th is Doomsday&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;I'd agree that it's easier to remember &quot;I work from 9-5 at the 7-11&quot; together with &quot;March 0th=7th&quot;.&lt;/p&gt;
&lt;h3&gt;Additional background&lt;/h3&gt;
&lt;p&gt;For more on the development of the Doomsday Algorithm, see &lt;a href=&quot;http://doomsdayrule.blogspot.ca/2011/01/doomsday-timeline.html&quot;&gt;Doomsday Timeline&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.tanyakhovanova.com/?p=232&quot;&gt;The Second Doomsday Lesson&lt;/a&gt; describes a 2010 meeting with Dr. Conway in which he explains the &quot;Hand&quot; method on the back of a napkin (picture included).&lt;/p&gt;
&lt;h3&gt;Pi Days&lt;/h3&gt;
&lt;p&gt;I recently received the following email from reader &lt;strong&gt;Roman Weil&lt;/strong&gt;, currently teaching at Princeton.&lt;/p&gt;
&lt;blockquote readability=&quot;28&quot;&gt;
&lt;p&gt;I've been teaching Doomsday Rule for about fifteen years because I can show students the first day of class what my exam questions are like-working backwards. If Thanksgiving Thursday is November 27 in a Leap Year, what is the day of the week of Feb. 28 that year?&lt;/p&gt;
&lt;p&gt;Students can think they have mastered the rule and still not answer the question. I can show them up front that directionally correct doesn't cut it; thorough mastery is needed. Doomsday is a good way to get them there on the first day.&lt;/p&gt;
&lt;p&gt;Students invariable ask why the name. When I taught at Princeton five years ago, I asked my old college roommate to get to John Conway and ask. To my surprise it took 3, not 2, degrees of separation to get to him. He said he wanted the name to end in &quot;-day&quot; and &quot;Dooms&quot; popped into his head.&lt;/p&gt;
&lt;p&gt;About a decade ago, one of my adult students said his family had used the rule for years and called it Pi Day, because 3.14 is a one, too. From then, I call it Pi Day, because it's easier to explain the etymology.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Thanks so much, Roman. Delighted to have this background.&lt;/p&gt;
&lt;p&gt;In case it wasn't obvious, &quot;Pi day&quot; refers to March 14th because 3.14 are the first significant digits of &lt;big&gt;π&lt;/big&gt;. And of course March 14th is always a Doomsday.&lt;/p&gt;
&lt;p&gt;Note: Roman also included a January trick by his son Sandy Weil which is mentioned in &lt;a href=&quot;http://rudy.ca/doomsday.html#odd&quot;&gt;Odd Months&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://rudy.ca/doomsday.html#content&quot;&gt;Return to top&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;links&quot;&gt;Links&lt;/h2&gt;
&lt;p&gt;The following web sites are about or include descriptions of Dr. Conway's Doomsday algorithm.&lt;/p&gt;
&lt;ul readability=&quot;13.381979695431&quot;&gt;&lt;li readability=&quot;-0.77586206896552&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Doomsday_rule&quot;&gt;Doomsday Rule&lt;/a&gt; — the Wikipedia entry; very comprehensive.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0.21428571428571&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.scientificamerican.com/article/calendar-algorithm/&quot;&gt;What Day Is Doomsday? How to Mentally Calculate the Day of the Week for Any Date&lt;/a&gt;, October 2011 article in &lt;a href=&quot;http://www.scientificamerican.com/&quot;&gt;Scientific American&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://firstsundaydoomsday.blogspot.ca/&quot;&gt;First Sunday Doomsday Algorithm&lt;/a&gt; explains a modification to the Doomsday algorithm using the &quot;first Sunday of the month&quot; and the &quot;Odd+11&quot; rule.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;If you're into heavy math, see &lt;a href=&quot;http://arxiv.org/ftp/arxiv/papers/1006/1006.3913.pdf&quot;&gt;Methods for Accelerating Conway's Doomsday Algorithm (part 1)&lt;/a&gt; PDF&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-0.83333333333333&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://www.angelfire.com/dc2/calendrics/CALNDR-L/98/FEB/13sc1.html&quot;&gt;Simon Cassidy&lt;/a&gt; comments on the &quot;Hand&quot; in the context of the Dee-Cecil calendar.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;4.5205479452055&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://www.faqs.org/faqs/astronomy/faq/part3/index.html&quot;&gt;C.07.2 Can I calculate the date of Easter?&lt;/a&gt; explains Conway's algorithm for Easter, and gives another explanation of his Doomsday algorithm; includes the remark &quot;Note to non-US readers: 'Seven-Eleven' is the name of a ubiquitous chain of convenience stores.&quot; Reader &lt;strong&gt;Richard Ezell&lt;/strong&gt; wrote to me in 2004 to report that this explanation may not really be necessary, as he had seen four 7-11 stores in a seven block stretch in Bangkok, Thailand.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2.1386138613861&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://quasar.as.utexas.edu/BillInfo/doomsday.html&quot;&gt;AST 309-TIME; What is the day of the week, given any date?&lt;/a&gt; contains notes by William H. Jefferys for a school course on time, with another explanation of the Doomsday algorithm (examples are from 1997). &lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1.3962264150943&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://jimvb.home.mindspring.com/doom14.html&quot;&gt;The Doomsday Rule for Fortnights&lt;/a&gt;, by Jim Blowers, gives calculations for Doomsday based on 14-day periods.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;5.1086956521739&quot;&gt;
&lt;p&gt;Kate Larson's &lt;a href=&quot;http://web.archive.org/web/20061018103244/http://www.cs.wustl.edu/~ksl2/mathpoem.html&quot;&gt;Mathematical poem to calculate the &quot;day of the week&quot; for any day of any year&lt;/a&gt; is a beautiful, whimsical poem, attributed to Dr. Conway, which describes the algorithm completely, including both Gregorian and Julian century adjustments. (Note: link goes to &lt;a href=&quot;http://web.archive.org/&quot;&gt;archive.org&lt;/a&gt;, as the original has dropped off the Web.)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;For more information about Dr. Conway, see:&lt;/p&gt;
&lt;ul readability=&quot;10.001593625498&quot;&gt;&lt;li readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://www.theguardian.com/science/2015/jul/23/john-horton-conway-the-most-charismatic-mathematician-in-the-world&quot;&gt;John Horton Conway: the world's most charismatic mathematician&lt;/a&gt;. &quot;John Horton Conway is a cross between Archimedes, Mick Jagger and Salvador Dalí. For many years, he worried that his obsession with playing silly games was ruining his career — until he realised that it could lead to extraordinary discoveries.&quot; Story by Siobhan Roberts, author of &lt;cite&gt;Genius at Play, The Curious Mind of John Horton Conway&lt;/cite&gt; published by Bloomsbury, 2015.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2.3347280334728&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://www.thestar.com/news/insight/2015/08/23/inside-the-mind-of-mathemagician-john-horton-conway.html&quot;&gt;Inside the mind of 'mathemagician' John Horton Conway&lt;/a&gt;. In this Toronto Star excerpt from her biography, &lt;cite&gt;Genius at Play&lt;/cite&gt;, author Siobhan Roberts introduces readers to a distinguished scholar who claims never to have worked a day in his life.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2.5560538116592&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ams.org/notices/201305/rnoti-p567.pdf&quot;&gt;Interview with John Horton Conway&lt;/a&gt; (PDF). Edited version of an interview with John Horton Conway conducted in July 2011 at the first International Mathematical Summer School for Students at Jacobs University, Bremen, Germany&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://www.sciam.com/article.cfm?id=not-just-fun-and-games&quot;&gt;Not Just Fun and Games&lt;/a&gt; April 1999 Scientific American profile of John H. Conway. (&lt;strong&gt;Note:&lt;/strong&gt; this article is now available online only if you purchase the digital edition.)&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-0.83116883116883&quot;&gt;
&lt;p&gt;Charles Seife's &lt;a href=&quot;http://www.cloud9.net/~cgseife/conway.html&quot;&gt;Mathemagician&lt;/a&gt; -- an amusing article about John Horton Conway.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://www.tech.org/~stuart/life/life.html&quot;&gt;John Conway's Game of Life&lt;/a&gt; by Stephen Stuart -- an interactive version that you can play via your web browser.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Interesting calendar links&lt;/h3&gt;
&lt;p&gt;For links to other calendar sites, see my &lt;a href=&quot;http://rudy.ca/callinks.html&quot;&gt;Calendar Links&lt;/a&gt; page; CAUTION, this page of links has not been updated since 2003!&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href=&quot;https://cms.math.ca/Kabol/&quot;&gt;&lt;img src=&quot;http://rudy.ca/candy.gif&quot; alt=&quot;KaBoL logo&quot; class=&quot;floatleft&quot; /&gt;&lt;/a&gt; The Doomsday Algorithm was &quot;latest link in the braid&quot; for the week of &lt;a href=&quot;http://cms.math.ca/cgi/kabol/browse.pl?Number=154&quot;&gt;April 6-12, 1999&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;&quot;This page will teach you a simple algorithm to calculate mentally the day of the week corresponding to any given date. Give it a try, it's quite rewarding! The page features clear instructions, examples, and mnemonic tricks.&quot;&lt;/cite&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;KaBoL&lt;/strong&gt; is a &quot;cool math site of the week&quot; service to the mathematics community provided by the &lt;a href=&quot;http://cms.math.ca/&quot;&gt;Canadian Mathematical Society&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://rudy.ca/doomsday.html#content&quot;&gt;Return to top&lt;/a&gt;&lt;/p&gt;

</description>
<pubDate>Wed, 01 Jan 2020 01:48:33 +0000</pubDate>
<dc:creator>emrehan</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>http://rudy.ca/doomsday.html</dc:identifier>
</item>
<item>
<title>Rhasspy is an open source, fully offline voice assistant toolkit</title>
<link>https://rhasspy.readthedocs.io/en/latest/</link>
<guid isPermaLink="true" >https://rhasspy.readthedocs.io/en/latest/</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://rhasspy.readthedocs.io/en/latest/img/rhasspy.svg&quot; title=&quot;Rhasspy logo&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Rhasspy (pronounced RAH-SPEE) is an &lt;a href=&quot;https://github.com/synesthesiam/rhasspy&quot;&gt;open source&lt;/a&gt;, fully offline voice assistant toolkit for &lt;a href=&quot;https://rhasspy.readthedocs.io/en/latest/#supported-languages&quot;&gt;many languages&lt;/a&gt; that works well with &lt;a href=&quot;https://www.home-assistant.io/&quot;&gt;Home Assistant&lt;/a&gt;, &lt;a href=&quot;https://www.home-assistant.io/hassio/&quot;&gt;Hass.io&lt;/a&gt;, and &lt;a href=&quot;https://nodered.org&quot;&gt;Node-RED&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You specify voice commands in a &lt;a href=&quot;https://rhasspy.readthedocs.io/en/latest/training/&quot;&gt;template language&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[LightState]
states = (on | off)
turn (&amp;lt;states&amp;gt;){state} [the] light
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;and Rhasspy will produce &lt;a href=&quot;https://json.org&quot;&gt;JSON&lt;/a&gt; events that can trigger actions in &lt;a href=&quot;https://www.home-assistant.io/docs/automation/trigger/#event-trigger&quot;&gt;home automation software&lt;/a&gt; or &lt;a href=&quot;https://rhasspy.readthedocs.io/en/latest/usage/#node-red&quot;&gt;Node-RED flows&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;json&quot;&gt;{
    &quot;text&quot;: &quot;turn on the light&quot;,
    &quot;intent&quot;: {
        &quot;name&quot;: &quot;LightState&quot;
    },
    &quot;slots&quot;: {
        &quot;state&quot;: &quot;on&quot;
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Rhasspy is &lt;strong&gt;optimized for&lt;/strong&gt;:&lt;/p&gt;
&lt;h2 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;Ready to try Rhasspy? Follow the steps below and check out the &lt;a href=&quot;https://rhasspy.readthedocs.io/en/latest/tutorials/&quot;&gt;tutorials&lt;/a&gt;.&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Make sure you have the &lt;a href=&quot;https://rhasspy.readthedocs.io/en/latest/hardware/&quot;&gt;necessary hardware&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Choose an &lt;a href=&quot;https://rhasspy.readthedocs.io/en/latest/installation/&quot;&gt;installation method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Access the &lt;a href=&quot;https://rhasspy.readthedocs.io/en/latest/usage/#web-interface&quot;&gt;web interface&lt;/a&gt; to download a profile&lt;/li&gt;
&lt;li&gt;Author your &lt;a href=&quot;https://rhasspy.readthedocs.io/en/latest/training/&quot;&gt;custom voice commands&lt;/a&gt; and train Rhasspy&lt;/li&gt;
&lt;li&gt;Connect Rhasspy to &lt;a href=&quot;https://rhasspy.readthedocs.io/en/latest/usage/#home-assistant&quot;&gt;Home Assistant&lt;/a&gt; or a &lt;a href=&quot;https://rhasspy.readthedocs.io/en/latest/usage/#node-red&quot;&gt;Node-RED&lt;/a&gt; flow&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;getting-help&quot;&gt;Getting Help&lt;/h2&gt;
&lt;p&gt;If you have problems, please stop by the &lt;a href=&quot;https://community.rhasspy.org&quot;&gt;Rhasspy community site&lt;/a&gt; or &lt;a href=&quot;https://github.com/synesthesiam/rhasspy/issues&quot;&gt;open a GitHub issue&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;supported-languages&quot;&gt;Supported Languages&lt;/h2&gt;
&lt;p&gt;Rhasspy supports the following languages:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;English (&lt;code&gt;en&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;German (&lt;code&gt;de&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Spanish (&lt;code&gt;es&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;French (&lt;code&gt;fr&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Italian (&lt;code&gt;it&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Dutch (&lt;code&gt;nl&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Russian (&lt;code&gt;ru&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Greek (&lt;code&gt;el&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Hindi (&lt;code&gt;hi&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Mandarin (&lt;code&gt;zh&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Vietnamese (&lt;code&gt;vi&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Portuguese (&lt;code&gt;pt&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Swedish (&lt;code&gt;sv&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Catalan (&lt;code&gt;ca&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;intended-audience&quot;&gt;Intended Audience&lt;/h2&gt;
&lt;p&gt;Rhasspy is intended for advanced users that want to have a voice interface to Home Assistant, but value &lt;strong&gt;privacy&lt;/strong&gt; and &lt;strong&gt;freedom&lt;/strong&gt; above all else. There are many other voice assistants, but none (to my knowledge) that:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Can function &lt;strong&gt;completely disconnected from the Internet&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Are entirely free/open source&lt;/li&gt;
&lt;li&gt;Work well with Home Assistant, Hass.io, and Node-RED&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;If you feel comfortable sending your voice commands through the Internet for someone else to process, or are not comfortable with rolling your own Home Assistant automations to handle intents, I recommend taking a look at &lt;a href=&quot;https://mycroft.ai&quot;&gt;Mycroft&lt;/a&gt;.&lt;/p&gt;
</description>
<pubDate>Wed, 01 Jan 2020 01:31:56 +0000</pubDate>
<dc:creator>reedlaw</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://rhasspy.readthedocs.io/en/latest/</dc:identifier>
</item>
</channel>
</rss>