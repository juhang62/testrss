<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>U.N. postal union clinches deal to keep U.S. in</title>
<link>http://reuters.com/article/us-un-postal/u-n-postal-union-clinches-deal-to-keep-u-s-in-club-idUSKBN1WA247</link>
<guid isPermaLink="true" >http://reuters.com/article/us-un-postal/u-n-postal-union-clinches-deal-to-keep-u-s-in-club-idUSKBN1WA247</guid>
<description>&lt;p&gt;GENEVA (Reuters) - The U.N. agency linking postal systems worldwide on Wednesday agreed to reform its fee structure under a proposal by the United States that averted the Trump administration leaving the global network but may mean many consumers pay more.&lt;/p&gt;
&lt;div class=&quot;PrimaryAsset_container&quot; readability=&quot;9&quot;&gt;
&lt;div class=&quot;Image_container&quot; tabindex=&quot;-1&quot; readability=&quot;13&quot;&gt;
&lt;div class=&quot;LazyImage_container LazyImage_dark&quot;&gt;&lt;img src=&quot;https://s2.reutersmedia.net/resources/r/?m=02&amp;amp;d=20190925&amp;amp;t=2&amp;amp;i=1433907625&amp;amp;r=LYNXMPEF8O1MH&amp;amp;w=20&quot; aria-label=&quot;FILE PHOTO: A U.S. Postal Inspection Service facility is pictured near Miami International Airport, in Miami, Florida, U.S., October 25, 2018. REUTERS/Zach Fagenson&quot;/&gt;
&lt;/div&gt;

&lt;p&gt;&lt;span&gt;FILE PHOTO: A U.S. Postal Inspection Service facility is pictured near Miami International Airport, in Miami, Florida, U.S., October 25, 2018. REUTERS/Zach Fagenson&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The compromise deal was agreed by consensus at the Universal Postal Union’s emergency congress after two days of talks, with delegates standing to applaud.&lt;/p&gt;
&lt;p&gt;The Trump administration served notice last October that it would leave in 12 months unless fee rates were changed so that importing countries did not lose money from distributing mail and packages from countries including China in the age of e-commerce.&lt;/p&gt;
&lt;p&gt;Under the agreement, high-volume importers of mail and packages would be allowed to begin imposing “self-declared rates” for distributing foreign mail from January 2021. There is a five-year period for phasing in new fees.&lt;/p&gt;
&lt;p&gt;Countries with more than 75,000 tonnes in post imported annually - mainly the United States - may apply their self-declared new rates from July 2020, UPU officials said.&lt;/p&gt;
&lt;p&gt;“We will begin our self-declared rates at the end of June next year. This is exactly what we wanted and planned for,” White House trade adviser Peter Navarro, who led the U.S. delegation, told a Geneva news conference.&lt;/p&gt;
&lt;p&gt;“We’ll buy less Chinese stuff, buy more from other countries, we will make more in America and the market will be free of distortions,” he said, crediting President Donald Trump.&lt;/p&gt;
&lt;p&gt;Navarro said that the current system meant the U.S. Postal Service was effectively spending $300 million to $500 million to subsidize the cost of delivering imports, including goods mailed to the United States from China.&lt;/p&gt;
&lt;p&gt;“China is certainly going to pay more for the privilege of shipping to our market,” he said.&lt;/p&gt;
&lt;p&gt;The “historic victory” was clinched in negotiations among 34 countries including China, he told reporters.&lt;/p&gt;
&lt;p&gt;China’s delegation backed the deal, telling the talks: “For China we have always been actively working with all the members and trying to find a positive solution and compromise in the spirit of UPU.”&lt;/p&gt;
&lt;p&gt;UPU Director-General Bishar Hussein warned on Tuesday that any U.S. departure from the 193-member agency would be a “nightmare scenario”, with delivery of global mail disrupted and U.S. stamps no longer being recognized abroad.&lt;/p&gt;
&lt;p&gt;Hussein, speaking to reporters on Wednesday, welcomed the deal as preserving unity but conceded it would mean higher postal rates for some.&lt;/p&gt;
&lt;p&gt;“Today what I witnessed is a historical moment where we averted possible exit of one of our member countries. I can tell you it was very tense,” he said.&lt;/p&gt;
&lt;p&gt;“Once a country declares their rate, exporting countries will have to factor that cost, it means that cost will be transferred to the person sending that item ... When you are in a country and you buy items overseas, the end-customer will definitely have to pay a higher price.”&lt;/p&gt;
&lt;div class=&quot;Attribution_container&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;Attribution_attribution&quot; readability=&quot;8&quot;&gt;
&lt;p class=&quot;Attribution_content&quot;&gt;Reporting by Stephanie Nebehay; Editing by Chizu Nomiyama, Lisa Shumaker and Giles Elgood&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;StandardArticleBody_trustBadgeContainer&quot;&gt;&lt;span class=&quot;StandardArticleBody_trustBadgeTitle&quot;&gt;Our Standards:&lt;/span&gt;&lt;span class=&quot;trustBadgeUrl&quot;&gt;&lt;a href=&quot;http://thomsonreuters.com/en/about-us/trust-principles.html&quot;&gt;The Thomson Reuters Trust Principles.&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
</description>
<pubDate>Wed, 25 Sep 2019 17:12:09 +0000</pubDate>
<dc:creator>ineedasername</dc:creator>
<og:title>U.N. postal union clinches deal to keep U.S. in club</og:title>
<og:url>https://www.reuters.com/article/us-un-postal-idUSKBN1WA247</og:url>
<og:type>article</og:type>
<og:description>The U.N. agency linking postal systems worldwide on Wednesday agreed to reform i...</og:description>
<og:image>https://s2.reutersmedia.net/resources/r/?m=02&amp;d=20190925&amp;t=2&amp;i=1433907625&amp;w=1200&amp;r=LYNXMPEF8O1MH</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.reuters.com/article/us-un-postal/u-n-postal-union-clinches-deal-to-keep-u-s-in-club-idUSKBN1WA247</dc:identifier>
</item>
<item>
<title>WeWork and Counterfeit Capitalism</title>
<link>https://mattstoller.substack.com/p/wework-and-counterfeit-capitalism</link>
<guid isPermaLink="true" >https://mattstoller.substack.com/p/wework-and-counterfeit-capitalism</guid>
<description>&lt;p&gt;Hi,&lt;/p&gt;
&lt;p&gt;Welcome to BIG, a newsletter about the politics of monopoly. If you’d like to sign up, you can do so &lt;a href=&quot;https://mattstoller.substack.com/welcome&quot;&gt;here&lt;/a&gt;. Or just read on…&lt;/p&gt;
&lt;p&gt;I’m back! One of the themes of this newsletter has turned out to be the breakdown of integrity in American business, and the consequences in terms of our increasingly inability to produce the vital systems we need to sustain our civilization. I’ve written about &lt;a href=&quot;https://mattstoller.substack.com/p/why-new-york-city-is-on-the-verge&quot;&gt;Con Edison and New York City’s vulnerabilities&lt;/a&gt;, how &lt;a href=&quot;https://mattstoller.substack.com/p/how-monopolies-broke-the-federal&quot;&gt;monopolies have undermined the Federal Reserve&lt;/a&gt;, why &lt;a href=&quot;https://mattstoller.substack.com/p/why-private-equity-should-not-exist&quot;&gt;private equity is not business but a form of corrupted governance&lt;/a&gt;, and &lt;a href=&quot;https://mattstoller.substack.com/p/the-coming-boeing-bailout&quot;&gt;how Boeing is falling apart&lt;/a&gt;. It has been a pleasure to write about these problems, because I’ve gotten help and feedback from my audience on pretty much every issue. So keep it coming.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;WeWork and Counterfeit Capitalism&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Today I’m going to continue on this theme, and discuss the increasingly common tendency of capital markets to finance loss-making companies, which is an important trend I call “Counterfeit Capitalism.” The most hilarious example is WeWork, because it’s just such an obvious example of self-dealing couched in New Age management consulting speak. Its CEO, Adam Neumann, was just forced to step down. Both Neumann’s rise, and his fall, have important lessons if we want to correct serious errors in our political economy philosophy as a society.&lt;/p&gt;
&lt;p&gt;Here’s Neumann.&lt;/p&gt;
&lt;a class=&quot;image-link&quot; target=&quot;_blank&quot; href=&quot;https://cdn.substack.com/image/fetch/c_limit,f_auto,q_auto:good/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F96343172-3085-4beb-bd42-d77bd4613752_455x369.png&quot;&gt;&lt;img src=&quot;https://cdn.substack.com/image/fetch/w_1100,c_limit,f_auto,q_auto:good/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F96343172-3085-4beb-bd42-d77bd4613752_455x369.png&quot; data-attrs=&quot;{&amp;quot;src&amp;quot;:&amp;quot;https://bucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com/public/images/96343172-3085-4beb-bd42-d77bd4613752_455x369.png&amp;quot;,&amp;quot;height&amp;quot;:369,&amp;quot;width&amp;quot;:455,&amp;quot;bytes&amp;quot;:117735,&amp;quot;alt&amp;quot;:null,&amp;quot;title&amp;quot;:null,&amp;quot;type&amp;quot;:&amp;quot;image/png&amp;quot;,&amp;quot;href&amp;quot;:null}&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;
&lt;p&gt;&lt;strong&gt;The Stupidity of WeWork&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;WeWork describes itself as offering the ‘“space-as-a-service” membership model that offers the benefits of a collaborative culture, the flexibility to scale workspace up and down as needed and the power of a worldwide community, all for a lower cost.” In other words, the company sublets office space.&lt;/p&gt;
&lt;p&gt;I glanced over &lt;a href=&quot;https://www.sec.gov/Archives/edgar/data/1533523/000119312519220499/d781982ds1.htm&quot;&gt;the company’s S-1&lt;/a&gt;. Here’s the graphic of the company’s business model.&lt;/p&gt;
&lt;a class=&quot;image-link&quot; target=&quot;_blank&quot; href=&quot;https://cdn.substack.com/image/fetch/c_limit,f_auto,q_auto:good/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F3f58b0a8-33d8-4b2c-930b-8423cf2ac6df_673x349.png&quot;&gt;&lt;img src=&quot;https://cdn.substack.com/image/fetch/w_1100,c_limit,f_auto,q_auto:good/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F3f58b0a8-33d8-4b2c-930b-8423cf2ac6df_673x349.png&quot; data-attrs=&quot;{&amp;quot;src&amp;quot;:&amp;quot;https://bucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com/public/images/3f58b0a8-33d8-4b2c-930b-8423cf2ac6df_673x349.png&amp;quot;,&amp;quot;height&amp;quot;:349,&amp;quot;width&amp;quot;:673,&amp;quot;bytes&amp;quot;:124453,&amp;quot;alt&amp;quot;:null,&amp;quot;title&amp;quot;:null,&amp;quot;type&amp;quot;:&amp;quot;image/png&amp;quot;,&amp;quot;href&amp;quot;:null}&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;
&lt;p&gt;The old business model, in case it’s not obvious from this McKinsey-ified chart, had been to make stupid graphics to show investors in hopes that they give ex-CEO Adam Neumann more money. The new business model will be to beg investors to give money to the new co-CEOs, who will radically change the company by wearing suits to investor presentations instead of ill-fitting t-shirts.&lt;/p&gt;
&lt;p&gt;This isn’t to say WeWork is a total waste. As Kara Swisher and Scott Galloway note, the spaces themselves are nicely done, and there is probably a small market opportunity in serving smaller enterprises that need office space. But there’s no justification for WeWork as it currently exists. The company is &lt;a href=&quot;https://www.cnbc.com/2019/09/10/david-faber-wework-ipo-full-speed-ahead-roadshow-to-kick-off-monday.html&quot;&gt;losing an enormous amount of money&lt;/a&gt; and has no path to profitability at scale.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Narcissism of Modern Financiers&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There are a few key players in this saga. The first is ex-CEO Adam Neumann, who according to the S-1 was pivotal to the company.&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;Our future success depends in large part on the continued service of Adam Neumann, our Co-Founder and Chief Executive Officer, which cannot be ensured or guaranteed.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Neumann was an untested CEO with an unlimited line of credit. As I read more stories about him, I noticed reporters dance around his personality. They call him ‘quirky,’ ‘charismatic,’ ‘unorthodox,’ and so forth. These are code words for something else.&lt;/p&gt;
&lt;p&gt;Consider a few descriptions of how he and his family behaved. His wife, a New Age guru who was the chief impact officer, would fire employees because she ‘didn’t like their energy.’ They banned employee expensing of meals with meat (employees later saw Neumann eating meat). &lt;a href=&quot;https://www.wsj.com/articles/this-is-not-the-way-everybody-behaves-how-adam-neumanns-over-the-top-style-built-wework-11568823827&quot;&gt;And then there’s this&lt;/a&gt; episode, which I found particularly revealing:&lt;/p&gt;
&lt;blockquote readability=&quot;22&quot;&gt;
&lt;p&gt;A few weeks after Mr. Neumann fired 7% of the staff in 2016, he somberly addressed the issue at an evening all-hands meeting at headquarters, telling attendees the move was tough but necessary to cut costs, and the company would be better because of it.&lt;/p&gt;
&lt;p&gt;Then employees carrying trays of plastic shot glasses filled with tequila came into the room, followed by toasts and drinks.&lt;/p&gt;
&lt;p&gt;Soon after, Darryl McDaniels of hip-hop group Run-DMC entered the room, embraced Mr. Neumann and played a set for the staff. Workers danced to the 1980s hit “It’s Tricky” as the tequila trays made more rounds; some others, still focused on the firings, say they were stunned and confused.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Mass layoffs followed by an expensive alcohol fueled party hosted by a celebrity reflects a problematic leadership style, to put it mildly. Neumann paired poor judgment with self-dealing. By now the story of Neumann’s corruption is well-known; he has pulled roughly $700 million from the company, owns buildings personally he leases to WeWork, and flies around on private jets. But the self-dealing is camouflaged with something else. Take this passage from the S-1.&lt;/p&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;To evidence their commitment to charitable causes and to ensure this commitment is meaningful, if Adam and Rebekah have not contributed at least $1 billion to charitable causes as of the ten-year anniversary of the closing date of this offering, holders of all of the Company’s high-vote stock will only be entitled to ten votes per share instead of twenty votes per share.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I don’t think there’s a better example than this passage of using philanthropy as moral cleanser. It is something Anand Giridharadas has written about as a pivotal element of modern capitalism.&lt;/p&gt;
&lt;p&gt;All of this, the faux philanthropy, the strange management choices, the personal behavior, and so forth indicates something very simple. I am going to be blunt, because it’s time to stop using euphemisms just because someone is rich and a business leader. Adam Neumann is not “quirky,” he is not “charismatic,” and he does not have “an unorthodox leadership style.” He is an untalented and abusive monster who lies to get what he wants. And he was given an unlimited credit line from which he could legally steal.&lt;/p&gt;
&lt;p&gt;Now, Neumann himself isn’t very important, foolish charlatans are common in society. The question is why he became so powerful despite being so obviously unfit for a role stewarding billions in capital and managing thousands of people. And that’s where we get to the real power centers behind this fiasco, the financiers who lent WeWork large sums of money. This includes Jamie Dimon of JP Morgan and Masayoshi Son of Softbank.&lt;/p&gt;
&lt;p&gt;Dimon’s role is prosaic; his bank essentially &lt;a href=&quot;https://www.wsj.com/articles/wework-is-a-mess-for-jpmorgan-jamie-dimon-is-cleaning-it-up-11569349994&quot;&gt;financed&lt;/a&gt; WeWork after Dimon was tricked by Neumann into thinking the real estate money losing enterprise represented the future. Dimon wanted JP Morgan serve as Neumann’s personal banker, to serve as the commercial banker to WeWork, to take the company public, and to offer credit services as well.&lt;/p&gt;
&lt;p&gt;If you know Dimon’s actual reputation, him getting suckered isn’t surprising. From what I heard back in 2009, Dimon is a mediocrity who essentially got lucky his bank was too slow to get in on the subprime scam in 2006; he then used his bank’s incompetence at getting into the bubble as justification for how prudent he was. In this case, however, Dimon didn’t miss the fraud boat. JP Morgan managed to just make it into WeWork, the last round of the money losing fake tech bubble. Dimon will now portray himself as the adult cleaning up the mess, but of course, he’s more of an arsonist pretending to be a firefighter.&lt;/p&gt;
&lt;p&gt;Son is a more interesting character. He’s a venture capitalist/empire builder who had been able to raise hundreds of billions of dollars to restructure industries globally. Son built his reputation in the first dot com boom with a lucky investment in Yahoo! and Alibaba. He has since restructured ride-sharing with large investments in Uber and its foreign counterparts. Like most major financiers, Son is a powerful and connected political operator. For instance, he’s an owner of Sprint, and he’s currently trying to force an illegal merger of Sprint with T-Mobile, hoping his political connections to Donald Trump can get it through merger review.&lt;/p&gt;
&lt;p&gt;Generally speaking, Softbank’s model is to manipulate private capital markets as a way of drowning out competitors with cash. For instance, there were several ‘rounds’ of WeWork investment where Softbank was buying more shares at higher valuations. WeWork ostensibly became more valuable because Son said it was more valuable, and bought shares for higher prices. And since there was no public market for these shares, the pricing of the shares was totally arbitrary. WeWork then used this cash to underprice competitors in the co-working space market, hoping to be able to profit later once it had a strong market position in real estate subletting or ancillary businesses.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Counterfeit Capitalism&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is of course Amazon’s model, which underpriced competitors in retail and eventually came to control the whole market. And Amazon has spawned a host of imitators, including WeWork. It has also reshaped venture investing. The goal of Son, and increasingly most large financiers in private equity and venture capital, is to find big markets and then dump capital into one player in such a market who can underprice until he becomes the dominant remaining actor. In this manner, financiers can help kill all competition, with the idea of profiting later on via the surviving monopoly.&lt;/p&gt;
&lt;p&gt;Engaging in such a strategy used to be illegal, and was known as predatory pricing. There are laws, like Robinson-Patman and the Clayton Act, which, if read properly and enforced, prohibit such conduct. The reason is very basic to capitalism. Capitalism works because companies that thrive take a bunch of inputs and create a product that is more valuable than the sum of its parts. That creates additional value, and in such a model companies have to compete by making better goods and services.&lt;/p&gt;
&lt;p&gt;What predatory pricing does is to enable competition purely based on access to capital. Someone like Neumann, and Son’s entire model with his Vision Fund, is to take inputs, combine them into products worth less than their cost, and plug up the deficit through the capital markets in hopes of acquiring market power later or of just self-dealing so the losses are placed onto someone else. This model has spread. Bird, the scooter company, &lt;a href=&quot;https://www.theinformation.com/articles/hit-by-big-loss-bird-seeks-300m-in-new-funds?shared=3bfb7b8531e5148e&quot;&gt;is not making money&lt;/a&gt;. Uber and Lyft are similarly and systemically unprofitable. This model is catastrophic not just for individual companies, but for their competitors who have to *make* money. I’ve written about this problem before. Amazon has created a much less competitive and brittle retail sector. Netflix’s &lt;a href=&quot;https://mattstoller.substack.com/p/the-slow-death-of-hollywood&quot;&gt;money-losing business&lt;/a&gt; is ruining Hollywood.&lt;/p&gt;
&lt;p&gt;Endless money-losing is a variant of counterfeiting, and counterfeiting has dangerous economic consequences. The subprime fiasco was one example. Another example was the Worldcom fraud in the late 1990s, which forced the rest of the U.S. telecom sector to over-invest into broadband. Competitors have to copy their fraudulent competitors. It’s a variant of Gresham’s Law, which says that &quot;bad money drives out good.” If you can counterfeit something for cheap, the counterfeit will eventually take over the entire market and drive out the real commodity. That is what is happening in our economy writ large, a kind of counterfeit capitalism as ‘leaders’ like Neumann are celebrated and actual leaders who can make things and manage are treated like dogshit.&lt;/p&gt;
&lt;p&gt;This kind of counterfeit capitalism is terrible for society as a whole. At first, with companies like Walmart and Amazon, predatory pricing can seem smart. The entire retail sector might be decimated and communities across America might be harmed, but two day shipping is convenient and Walmart and Amazon do have positive cash flow. But increasingly with cheap capital and a narrow slice of financiers who want to copy the winners, there is a second or third generation of companies asking Wall Street to just ‘trust me.’&lt;/p&gt;
&lt;p&gt;As euphoria in capital markets takes hold, predatory pricing scheme come to entirely wastes capital on money losing enterprises, and eventually these companies become Soviet-style generators of white elephants and self-dealing. The men and women who run them have to be charlatans, because they are storytellers justifying losses. Powerful men like Dimon are sucked in, consultants start explaining to old-line economy companies how they too can become like WeWork, and eventually more and more of the economy just adopts counterfeit capitalism.&lt;/p&gt;
&lt;p&gt;(I’ll note that there’s an additional policy conflict here, which is Glass-Steagall. If JP Morgan had to pick either investment banking or commercial banking, Dimon wouldn’t have been so eager to jump into WeWork. He would have had to look at the company purely as an investment banker or as a commercial banker, and not as a conflicted operator with centralized control of the whole capital raising process.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Good News: FDR Stops Neumann from Beyond the Grave&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Here’s the good news. Neumann stepped down! Why? It happened when WeWork had to go public to access money from ordinary investors. That meant that the private valuation games Softbank and WeWork were playing came into conflict with basic disclosure of investing information required by the Securities and Exchange Commission. In 1933, Ferdinand Pecora, backed by Franklin Delano Roosevelt, exposed a whole host of self-dealing and fraud among bankers and utility magnates, the tech titans of the time. (This is in &lt;a href=&quot;https://www.simonandschuster.com/books/Goliath/Matt-Stoller/9781501183089&quot;&gt;my upcoming book&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;One of the results was the establishment of the Securities and Exchange Commission, which was designed to stop monopolization and fraud enabled by stock manipulation. As it turned out, it worked quite well. And as corrupt as the SEC has become, these principles even work now, in 2019, under the Donald Trump administration. Pure disclosure and public markets managed to stop Jamie Dimon, Masayoshi Son, and Adam Neumann.&lt;/p&gt;
&lt;p&gt;It turns out good public policy can stop counterfeit capitalism.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Time to Restore Honest Capitalism&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Part of what’s going on with WeWork is that monopolies and private equity have eliminated profitable opportunities for investment, which is why the Federal Reserve &lt;a href=&quot;https://mattstoller.substack.com/p/how-monopolies-broke-the-federal&quot;&gt;is increasingly powerless&lt;/a&gt;. Republicans like Mitt Romney are &lt;a href=&quot;https://mattstoller.substack.com/p/the-republican-debate-over-big-finance&quot;&gt;noticing&lt;/a&gt; that excess capital is harmful. Capitalism itself is breaking down in the face of business models that are simply organized around loss-making and endless access to the small number of (largely) men who can enable unlimited access to the capital markets.&lt;/p&gt;
&lt;p&gt;Across the West, the basic problem of a corrupted productive process is becoming a quiet crisis. The reason is simple. The people that do the work in organizations are increasingly excluded from the decision-making about the work. That is why Boeing is losing its ability to build planes, why we can’t build infrastructure, and why New York City is &lt;a href=&quot;https://mattstoller.substack.com/p/why-new-york-city-is-on-the-verge&quot;&gt;on the verge of disaster&lt;/a&gt;. And the cherry on top is investors pouring money into enterprises that aren’t even speculative, but are purely loss-making, because they find a destructive personality like Adam Neumann compelling.&lt;/p&gt;
&lt;p&gt;That’s why Neumann was given an unlimited charge card and a license to abuse his employees. As it turns out, the S-1 was correct; he &lt;em&gt;was&lt;/em&gt; pivotal to WeWork, because WeWork only exists due to his ability to get money from investors.&lt;/p&gt;
&lt;p&gt;It’s a good thing Neumann’s stepped down. And if we restore laws against predatory pricing and centralized financial control, the entire counterfeit capitalism model will go away. We can then get back to the business of making and selling things to each other without engaging in celebrated cases of fraud and abuse under the guise of ‘quirkiness.’&lt;/p&gt;
&lt;p&gt;Thanks for reading. And if you liked this essay, you can sign up &lt;a href=&quot;http://email.mg1.substack.com/c/eJxVUMFuwyAM_ZpwjIAmYT34UHXtb0QEnBSNQARmVf5-pN1hkyzberae37PRhEtMOxBmYiVjGp0FZoEradTEXB7nhLhq54FtZfLOaHIxHFtC9LJjDzhxNUs7nKTlnGsthRKDmj-s4dIYO0i2xUyjLtZhMAj4jWmPAZmHB9GWm9OlkfcaqybKFL3H1OYyZdLmqzVxraMn-togcyC5OPNzzT3ve9WKVnS3y5WL4a54d1PdZ9PxdRH_CFiCX946XA4vL7TaGWtdS3C0jxj05NECpYKM3v94Cad9Qwj4zB6JML3Bw74chFCsHrKxcgb4o_8H-RJ1Kg&quot;&gt;here&lt;/a&gt; for more issues of Big, a newsletter on how to restore fair commerce, innovation and democracy. If you want to really understand the secret history of monopoly power, buy my upcoming book, &lt;a href=&quot;https://www.amazon.com/exec/obidos/ASIN/1501183087&quot;&gt;Goliath: The 100-Year War Between Monopoly Power and Democracy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;cheers,&lt;/p&gt;
&lt;p&gt;Matt Stoller&lt;/p&gt;
</description>
<pubDate>Wed, 25 Sep 2019 15:48:16 +0000</pubDate>
<dc:creator>cjbest</dc:creator>
<og:type>article</og:type>
<og:title>WeWork and Counterfeit Capitalism</og:title>
<og:description>Hi, Welcome to BIG, a newsletter about the politics of monopoly. If you’d like to sign up, you can do so here. Or just read on… I’m back! One of the themes of this newsletter has turned out to be the breakdown of integrity in American business, and the consequences in terms of our increasingly inability to produce the vital systems we need to sustain our civilization. I’ve written about</og:description>
<og:image>https://res.cloudinary.com/hhsslviub/image/fetch/h_600/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F96343172-3085-4beb-bd42-d77bd4613752_455x369.png</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>https://mattstoller.substack.com/p/wework-and-counterfeit-capitalism</dc:identifier>
</item>
<item>
<title>A patent lawsuit against GNOME</title>
<link>https://lwn.net/Articles/800516/</link>
<guid isPermaLink="true" >https://lwn.net/Articles/800516/</guid>
<description>&lt;div readability=&quot;33&quot;&gt;

&lt;p&gt;[Posted September 25, 2019 by corbet]&lt;/p&gt;
&lt;/div&gt;&lt;div readability=&quot;31.219917012448&quot;&gt;A company called Rothschild Patent Imaging LLC has &lt;a href=&quot;https://insight.rpxcorp.com/litigation_documents/13472237&quot;&gt;filed a lawsuit [PDF]&lt;/a&gt; against the GNOME Foundation, alleging that the Shotwell photo manager violates &lt;a href=&quot;https://patents.google.com/patent/US9936086B2/en&quot;&gt;patent 9,936,086&lt;/a&gt;. Stay tuned, more details will surely emerge.
&lt;hr width=&quot;60%&quot; align=&quot;left&quot; /&gt;
(&lt;a href=&quot;https://lwn.net/Login/?target=/Articles/800516/&quot;&gt;Log in&lt;/a&gt; to post comments)&lt;/div&gt;</description>
<pubDate>Wed, 25 Sep 2019 15:29:14 +0000</pubDate>
<dc:creator>globuous</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://lwn.net/Articles/800516/</dc:identifier>
</item>
<item>
<title>Show HN: HTTP Mock – Intercept, debug and mock HTTP(S) with zero setup</title>
<link>https://httptoolkit.tech/mock/</link>
<guid isPermaLink="true" >https://httptoolkit.tech/mock/</guid>
<description>&lt;h3 class=&quot;sc-kIPQKe gfknAX&quot;&gt;Inspect&lt;/h3&gt;
&lt;h4 class=&quot;sc-eXEjpC jiXawy&quot;&gt;Explore, search &amp;amp; examine HTTP&lt;/h4&gt;
&lt;p class=&quot;sc-ibxdXY jKMNWK&quot;&gt;Skim through traffic with highlighting by content type, status &amp;amp; source, or search by URL, status and headers to hunt down the messages that matter.&lt;/p&gt;
&lt;p class=&quot;sc-ibxdXY jKMNWK&quot;&gt;Examine the URL, status, headers &amp;amp; body of each request or response, &lt;strong&gt;with inline explanations &amp;amp; docs from &lt;a href=&quot;https://developer.mozilla.org/docs/Web/HTTP&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;MDN&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p class=&quot;sc-ibxdXY jKMNWK&quot;&gt;Dig into message bodies with &lt;strong&gt;highlighting &amp;amp; autoformatting for JSON, HTML, JS, hex and others&lt;/strong&gt;, all using the power of Monaco, the editor from Visual Studio Code.&lt;/p&gt;
</description>
<pubDate>Wed, 25 Sep 2019 14:12:08 +0000</pubDate>
<dc:creator>pimterry</dc:creator>
<og:url>https://httptoolkit.tech</og:url>
<og:type>website</og:type>
<og:title>HTTP Toolkit</og:title>
<og:description>Intercept, debug and build with HTTP. Beautiful, cross-platform &amp; open-source HTTP(S) proxy, analyzer and client. Built-in support for Chrome, Android, Docker and more.</og:description>
<og:image>https://httptoolkit.tech/logo-facebook.png</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>https://httptoolkit.tech/mock/</dc:identifier>
</item>
<item>
<title>Some tea bags may shed billions of microplastics per cup</title>
<link>https://www.cbc.ca/news/technology/tea-bags-plastic-study-mcgill-1.5295662</link>
<guid isPermaLink="true" >https://www.cbc.ca/news/technology/tea-bags-plastic-study-mcgill-1.5295662</guid>
<description>&lt;p&gt;
Many fancier teas now come in 'silken' bags instead of paper, and some of them are pyramid-shaped, which is billed as a way to make room for the large leaves in premium teas to expand.  (Shutterstock / slawomir.gawryluk)
&lt;/p&gt;&lt;div readability=&quot;178.44484217377&quot;&gt;
&lt;p&gt;&lt;span&gt;You may be swallowing billions of tiny plastic particles while sipping a cup of freshly brewed gourmet tea, &lt;a href=&quot;http://pubs.acs.org/doi/abs/10.1021/acs.est.9b02540&quot; target=&quot;_blank&quot;&gt;a new study&lt;/a&gt; from McGill University in Montreal suggests.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Many fancier teas now come in &quot;silken&quot; bags instead of paper. Some of them are pyramid-shaped, which is billed as a way to make room for the large leaves in premium teas to expand. &lt;/span&gt;&lt;/p&gt;
&lt;section id=&quot;inread-wrapper-id-72051930&quot;/&gt;&lt;p&gt;&lt;span&gt;Nathalie Tufenkji, a professor of chemical engineering at the Montreal university, was surprised to find one such bag in the tea she ordered from a coffee shop one morning.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;It looked like plastic, she recalled. &quot;I said, 'Oh God, I'm sure if it's plastic it's, like, breaking down into the tea.'&quot;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;So when she got into the lab, she asked her graduate student, Laura Hernandez, to go out and buy a bunch from different brands.&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;div class=&quot;placeholder&quot;&gt;

&lt;span&gt;&lt;img alt=&quot;&quot; srcset=&quot;&quot; sizes=&quot;&quot; src=&quot;https://i.cbc.ca/1.5164430.1559806037!/cpImage/httpImage/image.jpg_gen/derivatives/original_780/bottled-water-20190507.jpg&quot;/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;span&gt;The plastics are made of polyethylene terephthalate (found in plastic drink bottles) and nylon (used in many food bags and pouches) that are approved as food packaging. (Jonathan Hayward/The Canadian Press)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;Sure enough, Hernandez's lab tests showed that when steeped in hot water, the tea bags released microplastic and even smaller nanoplastic particles — and not just the hundreds or thousands Tufenkji had been expecting.&lt;/p&gt;
&lt;p&gt;&quot;We were shocked when we saw billions of particles in a single cup of tea,&quot; she said.&lt;/p&gt;
&lt;p&gt;One cup from a single tea bag could contain 11.6 billion microplastic and 3.1 billion nanoplastic particles, the researchers estimated from their results, published Wednesday &lt;a href=&quot;http://pubs.acs.org/doi/abs/10.1021/acs.est.9b02540&quot;&gt;&lt;u&gt;in the journal Environmental Science &amp;amp; Technology&lt;/u&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The bits are so tiny — on average, the size of grains of dust or pollen — that the amount in one cup is about 16 micrograms or one-sixtieth of a milligram of plastic. &lt;/p&gt;
&lt;p&gt;But that's still much more than has been found in other foods and beverages, including tap and &lt;a href=&quot;https://www.cbc.ca/news/technology/bottled-water-microplastics-1.4575045&quot;&gt;bottled water&lt;/a&gt;, beer, honey, &lt;a href=&quot;https://www.cbc.ca/news/technology/microplastics-fish-shellfish-1.3954947&quot;&gt;fish and shellfish&lt;/a&gt;, chicken and salt. Tufekji said that's partly because her study included and counted smaller particles than most other studies. But it's also because, for most foods and beverages, the plastic is an accidental contaminant. With tea &quot;you're literally adding plastic into the beverage.&quot;&lt;/p&gt;
&lt;p&gt;That may sound unappetizing, but is it a health risk? After all, the plastics are made of PET (polyethylene terephthalate, found in plastic drink bottles) and nylon (used in many food bags and pouches) that are approved as food packaging. And the World Health Organization has said &lt;a href=&quot;https://www.cbc.ca/news/health/microplastics-who-drinking-water-study-low-risk-1.5255493&quot;&gt;&lt;u&gt;the risk from microplastics in drinking water is low&lt;/u&gt;&lt;/a&gt;, especially if the particles are relatively large.&lt;/p&gt;
&lt;p&gt;So far, scientists don't know what, if any, risks there might be.&lt;/p&gt;
&lt;p&gt;&quot;There's really no research. But this really points to the need to do those studies,&quot; Tufenkji said. &quot;Think of people who drink one or two or three cups of tea a day, every day.&quot;&lt;/p&gt;
&lt;p&gt;Collectively, Canadians drink about &lt;a href=&quot;https://www.cbc.ca/news/canada/pesticide-traces-in-some-tea-exceed-allowable-limits-1.2564624&quot;&gt;&lt;u&gt;10 billion cups of tea a year&lt;/u&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Tufenkji says the potential health risk isn't the only reason to stick to paper tea bags and loose leaf tea.&lt;/p&gt;
&lt;p&gt;&quot;Personally, I would say avoid the plastic tea bags because it's just another single-use plastic&quot; — something many governments, &lt;a href=&quot;https://www.cbc.ca/news/politics/government-to-ban-single-use-plastics-as-early-as-2021-source-1.5168386&quot;&gt;&lt;u&gt;including Canada's&lt;/u&gt;&lt;/a&gt;, are trying to reduce due to the &lt;a href=&quot;https://www.cbc.ca/news/world/plastic-oceans-basel-convention-1.5131420&quot;&gt;&lt;u&gt;impact on oceans&lt;/u&gt;&lt;/a&gt; and the &lt;a href=&quot;https://www.cbc.ca/radio/thesundayedition/the-sunday-edition-for-april-21-2019-1.5099057/why-your-recycling-may-not-actually-get-recycled-1.5099103&quot;&gt;&lt;u&gt;challenges of recycling it&lt;/u&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The researchers counted the plastic particles by cutting open bags of tea, removing the tea, rinsing off any pieces that might have come off during cutting, and then steeping the bags in distilled water at 95 C. They then took a sample, let the water evaporate, and counted the plastic particles under an electron microscope, then extrapolated to get the amount in one cup. They also used other instruments to identify the type of plastic in each bag.&lt;/p&gt;
&lt;p&gt;The researchers also repeated the experiment with uncut bags that still contained tea to make sure the cutting didn't cause the bags to shed, and with loose tea leaves, confirming that uncut bags shed microplastics too (although they were harder to count) and the plastic didn't originate from the tea itself.&lt;/p&gt;
&lt;div&gt;
&lt;div class=&quot;placeholder&quot;&gt;

&lt;span&gt;&lt;img alt=&quot;&quot; srcset=&quot;&quot; sizes=&quot;&quot; src=&quot;https://i.cbc.ca/1.2051234.1381652258!/httpImage/image.jpg_gen/derivatives/original_780/tp-waterfea.jpg&quot;/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;span&gt;In a preliminary experiment, water fleas exposed to the microplastics from the tea bags 'ballooned' and showed behavioural changes that suggested they were stressed. ((Paul D.N. Hebert, University of Guelph))&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;Finally, they did a preliminary study where they exposed water fleas — tiny freshwater animals distantly related to shrimp — to the microplastics from the tea bags, which are similar in size to their food.&lt;/p&gt;
&lt;p&gt;The water fleas didn't die, but swam &quot;crazily,&quot; Tufenkji said. &quot;It really stresses them out.&quot;&lt;/p&gt;

&lt;p&gt;They also changed shape, revealed CT scans performed by McGill researcher Hans Larsson. The study described the exposed water fleas as having a &quot;ballooned&quot; carapace.&lt;/p&gt;
&lt;p&gt;Tufenkji said the results point to the need for more studies with other animals.&lt;/p&gt;
&lt;p&gt;It also motivates her research group to see if other plastic packaging might be releasing particles into food and beverages.&lt;/p&gt;
&lt;p&gt;The study was funded by the Canada Research Chairs program, the Canada Foundation for Innovation, the Natural Science and Engineering Research Council of Canada, and McGill University.&lt;/p&gt;
&lt;h2&gt;Here are the takeaways&lt;/h2&gt;
&lt;p&gt;Matthew Hoffman, a researcher who studies freshwater plastic pollution at the Rochester Institute of Technology but wasn't involved in the new study, said the experiments seemed well designed and robust.&lt;/p&gt;
&lt;p&gt;&quot;One of the big takeaways,&quot; he wrote in an email, &quot;is that the humans would be exposed to orders of magnitude more plastic particles than has been reported from previous food and drink studies.&quot;&lt;/p&gt;
&lt;p&gt;His colleague, Christy Tyler, an aquatic ecologist who was also not involved in the newly released research, noted the small size of the particles in the study.&lt;/p&gt;
&lt;p&gt;&quot;We're getting a clearer understanding that nanoscale plastics (like other nano-scale particles) can cross into cells,&quot; she wrote.&lt;/p&gt;
&lt;p&gt;While it wasn't clear exactly how the microplastics were causing changes in the water fleas, and we don't know the effects on humans, she added, &quot;it's still cause for caution in how we approach widespread use of these materials in our everyday products.&quot;&lt;/p&gt;
&lt;/div&gt;</description>
<pubDate>Wed, 25 Sep 2019 13:05:43 +0000</pubDate>
<dc:creator>Sgt_Apone</dc:creator>
<og:url>https://www.cbc.ca/news/technology/tea-bags-plastic-study-mcgill-1.5295662</og:url>
<og:title>Some tea bags may shed billions of microplastics per cup | CBC News</og:title>
<og:image>https://i.cbc.ca/1.5295696.1569350248!/fileImage/httpImage/image.jpg_gen/derivatives/16x9_620/605449088.jpg</og:image>
<og:description>You may be swallowing billions of tiny plastic particles while sipping a cup of freshly brewed gourmet tea, a new study from McGill University in Montreal suggests.</og:description>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cbc.ca/news/technology/tea-bags-plastic-study-mcgill-1.5295662</dc:identifier>
</item>
<item>
<title>WARP is here</title>
<link>https://blog.cloudflare.com/announcing-warp-plus/</link>
<guid isPermaLink="true" >https://blog.cloudflare.com/announcing-warp-plus/</guid>
<description>&lt;img src=&quot;https://blog-cloudflare-com-assets.storage.googleapis.com/2019/09/Warp-@2x.png&quot; class=&quot;kg-image&quot;/&gt;&lt;p&gt;Today, after a longer than expected wait, we're opening &lt;a href=&quot;https://1.1.1.1/&quot;&gt;WARP&lt;/a&gt; and &lt;a href=&quot;https://warp.plus&quot;&gt;WARP Plus&lt;/a&gt; to the general public. If you haven’t heard about it yet, WARP is a mobile app designed for everyone which uses our global network to secure all of your phone’s Internet traffic.&lt;/p&gt;&lt;p&gt;We &lt;a href=&quot;https://blog.cloudflare.com/1111-warp-better-vpn/&quot;&gt;announced WARP on April 1 of this year&lt;/a&gt; and expected to roll it out over the next few months at a fairly steady clip and get it released to everyone who wanted to use it by July. That didn’t happen. It turned out that building a next generation service to secure consumer mobile connections without slowing them down or burning battery was… harder than we originally thought.&lt;/p&gt;
&lt;p&gt;Before today, there were approximately two million people on the waitlist to try WARP. That demand blew us away. It also embarrassed us. The common refrain is consumers don’t care about their security and privacy, but the attention WARP got proved to us how wrong that assumption actually is.&lt;/p&gt;
&lt;p&gt;This post is an explanation of why releasing WARP took so long, what we've learned along the way, and an apology for those who have been eagerly waiting. It also talks briefly about the rationale for why we built WARP as well as the privacy principles we’ve committed to. However, if you want a deeper dive on those last two topics, I encourage you to read &lt;a href=&quot;https://blog.cloudflare.com/1111-warp-better-vpn/&quot;&gt;our original launch announcement&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And, if you just want to jump in and try it, you can download and start using WARP on your iOS or Android devices for free through the following links:&lt;/p&gt;

&lt;p&gt;If you’ve already installed the 1.1.1.1 App on your device, you may need to update to the latest version in order to get the option to enable Warp.&lt;/p&gt;
&lt;h3 id=&quot;mea-culpa&quot;&gt;Mea Culpa&lt;/h3&gt;
&lt;p&gt;Let me start with the apology. We are sorry making WARP available took far longer than we ever intended. As a way of hopefully making amends, for everyone who was on the waitlist before today, we're giving 10 GB of WARP Plus — the even faster version of WARP that uses Cloudflare’s Argo network — to those of you who have been patiently waiting.&lt;/p&gt;
&lt;p&gt;For people just signing up today, &lt;strong&gt;the basic WARP service is free without bandwidth caps or limitations&lt;/strong&gt;. The unlimited version of WARP Plus is available for a monthly subscription fee. WARP Plus is the even faster version of WARP that you can optionally pay for. The fee for WARP Plus varies by region and is designed to approximate what a &lt;a href=&quot;https://en.wikipedia.org/wiki/Big_Mac_Index&quot;&gt;McDonald’s Big Mac would cost in the region&lt;/a&gt;. On iOS, the WARP Plus pricing as of the publication of this post is still being adjusted on a regional basis, but that should settle out in the next couple days.&lt;/p&gt;
&lt;p&gt;WARP Plus uses Cloudflare’s virtual private backbone, &lt;a href=&quot;https://www.cloudflare.com/products/argo-smart-routing/&quot;&gt;known as Argo&lt;/a&gt;, to achieve higher speeds and ensure your connection is encrypted across the long haul of the Internet. We charge for it because it costs us more to provide. However, in order to help spread the word about WARP, you can earn 1GB of WARP Plus for every friend you refer to sign up for WARP. And everyone you refer gets 1GB of WARP Plus for free to get started as well.&lt;/p&gt;
&lt;h3 id=&quot;okay-thanks-that-s-nice-but-what-took-you-so-long&quot;&gt;Okay, Thanks, That’s Nice, But What Took You So Long?&lt;/h3&gt;
&lt;p&gt;So what took us so long?&lt;/p&gt;
&lt;p&gt;WARP is an ambitious project. We set out to secure Internet connections from mobile devices to the edge of Cloudflare's network. In doing so, however, we didn't want to slow devices down or burn excess battery. We wanted it to just work. We also wanted to bet on the technology of the future, not the technology of the past. Specifically, we wanted to build not around legacy protocols like IPsec, but instead around the &lt;a href=&quot;https://www.wireguard.com/&quot;&gt;hyper-efficient WireGuard protocol&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;At some level, we thought it would be easy. We already had the &lt;a href=&quot;https://1.1.1.1/&quot;&gt;1.1.1.1 App&lt;/a&gt; that was securing DNS requests running on millions of mobile devices. That worked great. How much harder could securing all the rest of the requests on a device be? Right??&lt;/p&gt;
&lt;p&gt;It turns out, a lot. Zack Bloom has written up a &lt;a href=&quot;https://blog.cloudflare.com/warp-technical-challenges/&quot;&gt;great technical post&lt;/a&gt; describing many of the challenges we faced and the solutions we had to invent to deal with them. If you're interested, I encourage you to check it out.&lt;/p&gt;
&lt;p&gt;Some highlights:&lt;/p&gt;
&lt;p&gt;Apple threw us a curveball by releasing iOS 12.2 just days before the April 1 planned roll out. The new version of iOS significantly changed the underlying network stack implementation in a way that made some of what we were doing to implement WARP unstable. Ultimately we had to find work-arounds in our networking code, costing us valuable time.&lt;/p&gt;
&lt;p&gt;We had a version of the WARP app that (kind of) worked on April 1. But, when we started to invite people from outside of Cloudflare to use it, we quickly realized that the mobile Internet around the world was far more wild and varied than we'd anticipated. The Internet is made up of diverse network components which do not always play nicely, we knew that. What we didn’t expect was how much more pain is introduced by the diversity of mobile carriers, mobile operating systems, and mobile device models.&lt;/p&gt;
&lt;p&gt;And, while phones in our testbed were relatively stationary, phones in the real world move around — a lot. When they do, their network settings can change wildly. While that doesn't matter much for stateless, simple DNS queries, for the rest of Internet traffic that makes things complex. Keeping WireGuard fast requires long-lived sessions between your phone and a server in our network, maintaining that for hours and days was very complex. Even beyond that, we use a technology called Anycast to route your traffic to our network. Anycast meant your traffic could move not just between machines, but between entire data centers. That made things very complex.&lt;/p&gt;
&lt;h3 id=&quot;overcoming-challenges&quot;&gt;Overcoming Challenges&lt;/h3&gt;
&lt;p&gt;But there is a huge difference between hard and impossible. From long before the announcement, the team has been hard at work and I’m deeply proud of what they’ve accomplished. We changed our roll out plan to focus on iOS and solidify the shared underpinnings of the app to ensure it would work even with future network stack upgrades. We invited beta users not in the order of when they signed up, but instead based on networks where we didn't yet have information to help us discover as many corner cases as possible. And we invented new technologies to keep session state even when the wild west of mobile networks and Anycast routing collide.&lt;/p&gt;
&lt;img src=&quot;https://blog-cloudflare-com-assets.storage.googleapis.com/2019/09/warp-comet-@2x.png&quot; class=&quot;kg-image&quot;/&gt;&lt;p&gt;I've been running WARP on my phone since April 1. The first few months were… rough. Really rough. But, today, WARP has blended into the background of my mobile. And I sleep better knowing that my Internet connections from my phone are secure. Using my phone is as fast, and in some cases faster, than without WARP. In other words, WARP today does what we set out to accomplish: securing your mobile Internet connection and otherwise getting out of the way.&lt;/p&gt;
&lt;h3 id=&quot;there-will-be-bugs&quot;&gt;There Will Be Bugs&lt;/h3&gt;
&lt;p&gt;While WARP is a lot better than it was when we first announced it, we know there are still bugs. The most common bug we’re seeing these days is when WARP is significantly slower than using the mobile Internet without WARP. This is usually due to traffic being misrouted. For instance, we discovered a network in Turkey earlier this week that was being routed to London rather than our local Turkish facility. Once we’re aware of these routing issues we can typically fix them quickly.&lt;/p&gt;
&lt;p&gt;Other common bugs involved captive portals — the pages where you have to enter information, for instance, when connecting to a hotel WiFI. We’ve fixed a lot of them but we haven’t had WARP users connecting to every hotel WiFi yet, so there will inevitably still be some that are broken.&lt;/p&gt;
&lt;img src=&quot;https://blog-cloudflare-com-assets.storage.googleapis.com/2019/09/pasted-image-0-2.png&quot; class=&quot;kg-image&quot;/&gt;&lt;p&gt;We’ve made it easy to report issues that you discover. From the 1.1.1.1 App you can click on the little bug icon near the top of the screen, or just shake your phone with the app open, and quickly send us a report. We expect, over the weeks ahead, we’ll be squashing many of the bugs that you report.&lt;/p&gt;
&lt;h3 id=&quot;even-faster-with-plus&quot;&gt;Even Faster With Plus&lt;/h3&gt;
&lt;p&gt;WARP is not just a product, it’s a testbed for all of the Internet-improving technology we have spent years developing. One dream was to use our &lt;a href=&quot;https://www.cloudflare.com/products/argo-smart-routing/&quot;&gt;Argo&lt;/a&gt; routing technology to allow all of your Internet traffic to use faster, less-congested, routes through the Internet. When used by Cloudflare customers for the past several years Argo has improved the speed of their websites by an average of over 30%. Through some hard work of the team we are making that technology available to you as WARP Plus.&lt;/p&gt;
&lt;img src=&quot;https://blog-cloudflare-com-assets.storage.googleapis.com/2019/09/Warp-plus-@4x.png&quot; class=&quot;kg-image&quot;/&gt;&lt;p&gt;The WARP Plus technology is not without cost for us. Routing your traffic over our network often costs us more than if we release it directly to the Internet. To cover those costs we charge a monthly fee — $4.99/month or less — for WARP Plus. The fee depends on the region that you’re in and is intended to approximate what a Big Mac would cost in the same region.&lt;/p&gt;
&lt;p&gt;Basic WARP is free. Our first priority is not to make money off of WARP however, we want to grow it to secure every single phone. To help make that happen, we wanted to give you an incentive to share WARP with your friends. You can earn 1GB of free WARP Plus for every person you share WARP with. And everyone you refer also gets 1GB of WARP Plus for free as well. There is no limit on how much WARP Plus data you can earn by sharing.&lt;/p&gt;
&lt;h3 id=&quot;privacy-first&quot;&gt;Privacy First&lt;/h3&gt;
&lt;p&gt;The free consumer security space has traditionally not been the most reputable. Many other companies that have promised to keep consumers’ data safe but instead built businesses around selling it or using it help target you with advertising. We think that’s disgusting. That is not Cloudflare’s business model and it never will be. WARP continues all the &lt;a href=&quot;https://developers.cloudflare.com/1.1.1.1/commitment-to-privacy/&quot;&gt;strong privacy protections that 1.1.1.1 launched with&lt;/a&gt; including:&lt;br/&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;We don't write user-identifiable log data to disk;&lt;/li&gt;
&lt;li&gt;We will never sell your browsing data or use it in any way to target you with advertising data;&lt;/li&gt;
&lt;li&gt;Don’t need to provide any personal information — not your name, phone number, or email address — in order to use WARP or WARP Plus; and&lt;/li&gt;
&lt;li&gt;We will regularly work with outside auditors to ensure we're living up to these promises.&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;what-warp-is-not&quot;&gt;What WARP Is Not&lt;/h3&gt;
&lt;p&gt;From a technical perspective, WARP is a VPN. But it is designed for a very different audience than a traditional VPN. WARP is not designed to allow you to access geo-restricted content when you’re traveling. It will not hide your IP address from the websites you visit. If you’re looking for that kind of high-security protection then a traditional VPN or a &lt;a href=&quot;https://www.torproject.org/&quot;&gt;service like Tor&lt;/a&gt; are likely better choices for you.&lt;/p&gt;
&lt;p&gt;WARP, instead, is built for the average consumer. It’s built to ensure that your data is secured while it’s in transit. So the networks between you and the applications you’re using can’t spy on you. It will help protect you from people sniffing your data while you’re at a local coffee shop. It will also help ensure that your ISP isn’t hoovering up data on your browsing patterns to sell to advertisers.&lt;/p&gt;
&lt;p&gt;WARP isn’t designed for the ultra-techie who wants to specify exactly what server their traffic will be routed through. There’s basically only one button in the WARP interface: ON or OFF. It’s simple on purpose. It’s designed for my mom and dad who ask me every holiday dinner what they can do to be a bit safer online. I’m excited this year to have something easy for them to do: install the &lt;a href=&quot;https://1.1.1.1/&quot;&gt;1.1.1.1 App&lt;/a&gt;, enable WARP, and rest a bit easier.&lt;/p&gt;
&lt;h3 id=&quot;how-fast-is-it&quot;&gt;How Fast Is It?&lt;/h3&gt;
&lt;p&gt;Once we got WARP to a stable place, this was my first question. My initial inclination was to go to one of the many Speed Test sites and see the results. And the results were… weird. Sometimes much faster, sometimes much slower. Overall, they didn’t make a lot of sense. The reason why is that these sites are designed to measure the speed of your ISP. WARP is different, so these test sites don’t give particularly accurate readings.&lt;/p&gt;
&lt;p&gt;The better test is to visit common sites around the Internet and see how they load, in real conditions, on WARP versus off. We’ve built a tool that does this. Generally, in our tests, WARP is around the same speed as non-WARP connections when you’re on a high performance network. As network conditions get worse, WARP will often improve performance more. But your experience will depend on the particular conditions of your network.&lt;/p&gt;
&lt;p&gt;We plan, in the next few weeks, to expose the test tool within the 1.1.1.1 App so you can see how your device loads a set of popular sites without WARP, with WARP, and with WARP Plus. And, again, if you’re seeing particularly poor performance, please report it to us. Our goal is to provide security without slowing you down or burning excess battery. We can already do that for many networks and devices and we won’t rest until we can do it for everyone.&lt;/p&gt;
&lt;h3 id=&quot;here-s-to-a-more-secure-fast-internet&quot;&gt;Here’s to a More Secure, Fast Internet&lt;/h3&gt;
&lt;p&gt;Cloudflare’s mission is to help build a better Internet. We’ve done that by securing and making more performance millions of Internet properties since we launched almost exactly 9 years ago. WARP furthers Cloudflare’s mission by extending &lt;a href=&quot;https://www.cloudflare.com/network/&quot;&gt;our network&lt;/a&gt; to help make every consumer’s mobile device a bit more secure. Our team is proud of what we’ve built with WARP — albeit a bit embarrassed it took us so long to get into your hands. We hope you’ll forgive us for the delay, give WARP a try, and let us know what you think.&lt;/p&gt;

&lt;img src=&quot;https://blog-cloudflare-com-assets.storage.googleapis.com/2019/09/Birthday-week-2019-header@2x-1.png&quot; class=&quot;kg-image&quot;/&gt;</description>
<pubDate>Wed, 25 Sep 2019 13:01:53 +0000</pubDate>
<dc:creator>BCM43</dc:creator>
<og:type>article</og:type>
<og:title>WARP is here (sorry it took so long)</og:title>
<og:description>Today, after a longer than expected wait, we're opening WARP and WARP Plus to the general public. If you haven’t heard about it yet, WARP is a mobile app designed for everyone which uses our global network to secure all of your phone’s Internet traffic.</og:description>
<og:url>https://blog.cloudflare.com/announcing-warp-plus/</og:url>
<og:image>https://blog-cloudflare-com-assets.storage.googleapis.com/2019/09/facebook-Linked_Image___Warp-@2x.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.cloudflare.com/announcing-warp-plus/</dc:identifier>
</item>
<item>
<title>The one who kept VLC free</title>
<link>https://www.welcometothejungle.co/en/articles/kempf-interview-vlc-videolan</link>
<guid isPermaLink="true" >https://www.welcometothejungle.co/en/articles/kempf-interview-vlc-videolan</guid>
<description>&lt;p&gt;&lt;em&gt;Jean-Baptiste Kempf is the president of VideoLAN and a lead developer of the open-source media player &lt;a target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot; href=&quot;https://www.videolan.org/vlc/index.html&quot;&gt;VLC&lt;/a&gt;. For Behind the Code, he discusses how he initially got involved in VLC, why it was such a success, and explains why it was important for him to keep it free. He also shares his tips for developers who want to improve, and outlines what he looks for in them when he’s hiring.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;VideoLAN as a student project&lt;/h2&gt;
&lt;p&gt;The VideoLAN project was started at Ecole Centrale Paris by students who were basically managing the computer network on their campus. All the computers were managed by a team of students, not the university, which was a bit unusual.&lt;/p&gt;
&lt;p&gt;I was vice president of the network team and that’s how I got into VLC. I didn’t have any programming experience—everything was just a bit theoretical at school.&lt;/p&gt;
&lt;h2&gt;His first programming task&lt;/h2&gt;
&lt;p&gt;So the first task I actually did on VLC was very tedious and quite difficult. It was to update all the dependencies of VLC—about 100 libraries created in C and C++—to the Windows version of VLC. That’s a lot of tooling and a lot of cross-compilation—you need to know a lot about compilation, which of course I didn’t know back then, so it took me a really long time.&lt;/p&gt;
&lt;h2&gt;When a mistake becomes a genius move&lt;/h2&gt;
&lt;p&gt;One of the genius moves, which of course actually came about more by mistake than design, was that VLC plays everything you want without you needing to install any Codec packs.&lt;/p&gt;
&lt;p&gt;Before that, it was a huge mess. You needed to double install some of the packs, which was just a nightmare. Half of them had malware in them and even debugging them didn’t ensure it would work. So then you would install another Codec pack, which would destroy the one before it.&lt;/p&gt;
&lt;p&gt;But with VLC it just works. You don’t even need to install VLC to use it, you can just unzip it and it works.&lt;/p&gt;
&lt;h2&gt;A huge success&lt;/h2&gt;
&lt;p&gt;So VLC became a success due to a lot of factors that were independent of each other. There are some organizational reasons for this.&lt;/p&gt;
&lt;p&gt;Firstly, we are open source and we don’t have a marketing department or a management team of people who decide on a feature that is then pushed down to the users, as has been happening with RealPlayer and BS.Player. So, when we add a feature it’s because people actually need it and actually want it.&lt;/p&gt;
&lt;p&gt;The second reason is that it’s easy. Maybe the UI (user interface) is not beautiful but the UX (user experience) is great—just double click on a file and it will work. Whatever happens, it just works. You can play, pause, go to full screen. Then of course there are more advanced options, but for most people it works fine.&lt;/p&gt;
&lt;p&gt;Trust us—we’ve been doing this for 15 years. We do it with no interest in making a profit and with clear goals, so people know what we are aiming to achieve and they can trust us.&lt;/p&gt;
&lt;p&gt;For macOS users it was the only way to play DVDs for a long time. Also, you could play videos that had been downloaded, and VLC allows you to play your clip before it has read the whole file.&lt;/p&gt;
&lt;h2&gt;Keeping VLC free&lt;/h2&gt;
&lt;p&gt;Keeping VLC free and without ads is a no-brainer. I know people focus a lot on that part but, for me, it’s just the way it should be and it’s not difficult for me to keep it like that. Money can restrict you. Of course you need a decent income, but you’re programming, you’re a developer in one of the most active industries, where there is virtually no unemployment, you’re going to be earning enough no matter what city you’re based in. Sure, more money would be fun, but most of the people I know who have more money are annoying. And if it makes you a slave to your work, what good is that?&lt;/p&gt;
&lt;h2&gt;Why VLC is so attractive to contributors&lt;/h2&gt;
&lt;p&gt;Because it was done as a student project, it is a very modular program and it is very easy to add a new feature. There are about 500 modules in VLC, which means you can come and work on a very small part and improve it without breaking everything else. And that’s really helpful, because that’s how you attract a lot of contributions—VLC has received input from more than 800 authors since the beginning of the project.&lt;/p&gt;
&lt;h2&gt;Maintainability over everything&lt;/h2&gt;
&lt;p&gt;For a patch to get accepted, it needs to be maintainable as well as useful. You might be wondering why that is. Well, if you send me a patch or 2, it’s highly likely that in 6 months you’ve disappeared from the project. People change jobs, change wives, have kids, accidents, and so on. So everything in VLC needs to be done so that we can continue without you.&lt;/p&gt;
&lt;p&gt;Which means that we put a lot of emphasis on quality. So, with any code we get sent, we need to make sure that we can still maintain it in 6 months, 1 year, or 2 years… And that’s why we have a lot of features in VLC that some consider completely useless and why we don’t have others that some people think are important. It’s not because we’re stupid, it’s just that the code needs to be clean—if it’s not, you don’t get in.&lt;/p&gt;
&lt;h2&gt;Learn how computers work&lt;/h2&gt;
&lt;p&gt;So many developers don’t know how a computer works. Understanding computer architecture is extremely important, yet less than 1% of the people I see for interview know about their computers. If your focus is a high-level language, you still need to understand lower-level ones.&lt;/p&gt;
&lt;p&gt;My advice usually is that you should at least know C, along with Python, Ruby, or Go, JavaScript, and a functional programming. You don’t need to master a lower-level language, but you should at least understand how it works, because it will then help you with other languages.&lt;/p&gt;
&lt;p&gt;There are a lot of “developers” who are actually technicians of one framework in one specific language. But that’s no good, because what are you going to do in 2 or 3 years’ time? To be a good developer, you need to understand the lower-level languages as well as your own.&lt;/p&gt;
&lt;h2&gt;How to recruit the best developers&lt;/h2&gt;
&lt;p&gt;Pure code testing is not the best method. It has a lot of bias and I don’t like that. For VLC I need people with creativity and who can think outside the box, and you don’t get to see that by code testing. The questions I ask in technical interviews are very generic. I’m never going to ask how you would copy a string by removing the backslash, for example. That’s something anyone can learn.&lt;/p&gt;
&lt;p&gt;So my questions are very generic, because if you start answering them, it shows that you’ve been looking at the subject for a long time and you like it. For example, when I see JavaScript developers, I ask them questions about the HTTP stack. A lot of them are just like, &lt;em&gt;“Yeah, but I don’t really know about networking.”&lt;/em&gt; My reaction to that is, “&lt;em&gt;You don’t know about networking, yet most of your time is spent on the web, over a network.”&lt;/em&gt; No matter how good you are at your main focus, this makes you an average developer, and I need good developers.&lt;/p&gt;
&lt;p&gt;Good developers are the ones who, when they look at JavaScript, go to Wikipedia, click on “web”, and the first link is about HTTP, which tells them about what a networking stack is. I don’t need them to understand all of it, but I want them to at least be interested enough in their work that they’re going to spend some time doing that. And that’s how you find good developers.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This article is part of Behind the Code, the media for developers, by developers. Discover more articles and videos by visiting &lt;a target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot; href=&quot;https://www.welcometothejungle.co/collections/behind-the-code&quot;&gt;Behind the Code&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Want to contribute? &lt;a target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot; href=&quot;https://docs.google.com/forms/d/e/1FAIpQLSeelH8Eh0HohNrrDWnmKJGBRsFijXfMsMw1fPxOSGdMVypCyg/viewform?usp=sf_link&quot;&gt;Get published!&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Follow us on &lt;a target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot; href=&quot;https://twitter.com/behind_thecode&quot;&gt;Twitter&lt;/a&gt; to stay tuned!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Illustration by WTTJ&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;iframe src=&quot;https://www.youtube.com/embed/03fR2o15QYQ?wmode=transparent&amp;amp;rel=0&amp;amp;autohide=1&amp;amp;showinfo=0&amp;amp;enablejsapi=1&quot; frameborder=&quot;0&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 25 Sep 2019 11:03:16 +0000</pubDate>
<dc:creator>elorant</dc:creator>
<og:title>The one who kept VLC free</og:title>
<og:description>Jean-Baptiste Kempf discusses how he initially got involved in VLC and shares his tips for developers who want to improve and get hired.</og:description>
<og:image>https://cdn.welcometothejungle.co/uploads/article/image/8014/155904/large_jean-baptiste-kempf-VLC.jpg</og:image>
<og:url>https://www.welcometothejungle.co/en/articles/kempf-interview-vlc-videolan</og:url>
<og:type>video</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.welcometothejungle.co/en/articles/kempf-interview-vlc-videolan</dc:identifier>
</item>
<item>
<title>Looking Back at the Snowden Revelations</title>
<link>https://blog.cryptographyengineering.com/2019/09/24/looking-back-at-the-snowden-revelations/</link>
<guid isPermaLink="true" >https://blog.cryptographyengineering.com/2019/09/24/looking-back-at-the-snowden-revelations/</guid>
<description>&lt;p&gt;Edward Snowden recently &lt;a href=&quot;https://www.engadget.com/2019/09/17/us-edward-snowden-book-permanent-record-lawsuit-memoir/?guccounter=1&amp;amp;guce_referrer=aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS8&amp;amp;guce_referrer_sig=AQAAAEN9nGGD8_27xhxxu9D07hop95uTL4kNHiDKqIAFI98sz6PjReV6bEUjHmjmyUfWp0C8WdHb91Q7I45x33jODGhmgyFp8XsalfmO-HbDOedCdG6LA7qO8LGpJpC1Fdi7j5FknMe3secd0pfBxyPIfhjE4SgkhYZ2gsjDyTx7OtQA&quot;&gt;released his memoirs&lt;/a&gt;. In some parts of the Internet, this has rekindled an ancient debate: namely, &lt;em&gt;was it all worth it?&lt;/em&gt; Did Snowden’s leaks make us better off, or did Snowden just embarass us and set back U.S. security by decades? Most of the arguments are so familiar that they’re boring at this point. But no matter how many times I read them, I still feel that there’s something important missing.&lt;/p&gt;
&lt;p&gt;It’s no coincidence that &lt;em&gt;this is a cryptography blog&lt;/em&gt;, which means that I’m not concerned with the same things as the general public. That is, I’m not terribly interested in debating the value of whistleblower laws (for some of that, see this excellent &lt;a href=&quot;https://threadreaderapp.com/thread/1173278854007394307.html&quot;&gt;Twitter thread&lt;/a&gt; by Jake Williams). Instead, when it comes to Snowden’s leaks, I think the question we should be asking ourselves is very different. Namely:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;What did the Snowden leaks tell us about modern surveillance capabilities? And what did we learn about our ability to defend against them?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;And while the leaks themselves have receded into the past a bit — and the world has continued to get more complicated — the &lt;em&gt;technical&lt;/em&gt; concerns that Snowden alerted us to are only getting more salient.&lt;/p&gt;
&lt;h3&gt;Life before June 2013&lt;/h3&gt;
&lt;p&gt;It’s difficult to believe that the Snowden revelations began over six years ago. It’s also easy to forget how much things have changed in the intervening years.&lt;/p&gt;
&lt;p&gt;Six years ago, vast portions of our communication were done in plaintext. It’s hard to believe how bad things were, but back in 2013, Google was one of the only major tech companies who had &lt;a href=&quot;https://www.wired.com/2011/11/mf_soghoian/&quot;&gt;deployed HTTPS in its services by default&lt;/a&gt;, and even there they had some major exceptions. Web clients were even worse. These graphs (&lt;a href=&quot;https://transparencyreport.google.com/https/overview?hl=en&quot;&gt;source&lt;/a&gt; and &lt;a href=&quot;https://letsencrypt.org/stats/#percent-pageloads&quot;&gt;source&lt;/a&gt;) don’t cover the whole time period, but they give some of the flavor:&lt;/p&gt;
&lt;p&gt;&lt;img data-attachment-id=&quot;5098&quot; data-permalink=&quot;https://blog.cryptographyengineering.com/2019/09/24/looking-back-at-the-snowden-revelations/httpsgraph/&quot; data-orig-file=&quot;https://matthewdgreen.files.wordpress.com/2019/09/httpsgraph.png&quot; data-orig-size=&quot;2282,1222&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;HTTPSGraph&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://matthewdgreen.files.wordpress.com/2019/09/httpsgraph.png?w=300&quot; data-large-file=&quot;https://matthewdgreen.files.wordpress.com/2019/09/httpsgraph.png?w=700&quot; class=&quot;alignnone size-full wp-image-5098&quot; src=&quot;https://matthewdgreen.files.wordpress.com/2019/09/httpsgraph.png?w=700&quot; alt=&quot;HTTPSGraph&quot; srcset=&quot;https://matthewdgreen.files.wordpress.com/2019/09/httpsgraph.png?w=700 700w, https://matthewdgreen.files.wordpress.com/2019/09/httpsgraph.png?w=1400 1400w, https://matthewdgreen.files.wordpress.com/2019/09/httpsgraph.png?w=150 150w, https://matthewdgreen.files.wordpress.com/2019/09/httpsgraph.png?w=300 300w, https://matthewdgreen.files.wordpress.com/2019/09/httpsgraph.png?w=768 768w, https://matthewdgreen.files.wordpress.com/2019/09/httpsgraph.png?w=1024 1024w&quot; sizes=&quot;(max-width: 700px) 100vw, 700px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-attachment-id=&quot;5099&quot; data-permalink=&quot;https://blog.cryptographyengineering.com/2019/09/24/looking-back-at-the-snowden-revelations/httpsfirefox/&quot; data-orig-file=&quot;https://matthewdgreen.files.wordpress.com/2019/09/httpsfirefox.png&quot; data-orig-size=&quot;1794,994&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;HTTPSFirefox&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://matthewdgreen.files.wordpress.com/2019/09/httpsfirefox.png?w=300&quot; data-large-file=&quot;https://matthewdgreen.files.wordpress.com/2019/09/httpsfirefox.png?w=700&quot; class=&quot;alignnone size-full wp-image-5099&quot; src=&quot;https://matthewdgreen.files.wordpress.com/2019/09/httpsfirefox.png?w=700&quot; alt=&quot;HTTPSFirefox&quot; srcset=&quot;https://matthewdgreen.files.wordpress.com/2019/09/httpsfirefox.png?w=700 700w, https://matthewdgreen.files.wordpress.com/2019/09/httpsfirefox.png?w=1400 1400w, https://matthewdgreen.files.wordpress.com/2019/09/httpsfirefox.png?w=150 150w, https://matthewdgreen.files.wordpress.com/2019/09/httpsfirefox.png?w=300 300w, https://matthewdgreen.files.wordpress.com/2019/09/httpsfirefox.png?w=768 768w, https://matthewdgreen.files.wordpress.com/2019/09/httpsfirefox.png?w=1024 1024w&quot; sizes=&quot;(max-width: 700px) 100vw, 700px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Outside of HTTPS, the story was even worse. In 2013 the vast majority of text messages were sent via unencrypted SMS/MMS or poorly-encrypted IM services, which were a privacy nightmare. Future developments like the inclusion of &lt;a href=&quot;https://www.independent.co.uk/life-style/gadgets-and-tech/news/whatsapp-update-encryption-end-to-end-messages-security-government-privacy-a6970101.html&quot;&gt;default end-to-end encryption in WhatsApp&lt;/a&gt; were years away. Probably the sole (and surprising) exception to was Apple, which had been ahead of the curve in deploying end-to-end encryption. This was largely counterbalanced by the tire fire that was Android back in those days.&lt;/p&gt;
&lt;p&gt;But even these raw facts don’t tell the full story.&lt;/p&gt;
&lt;p&gt;What’s harder to present in a chart is how different attitudes were towards surveillance back before Snowden. The idea that governments would conduct large-scale interception of our communications traffic was a point of view that relatively few “normal people” spent time thinking about — it was mostly confined to security mailing lists and X-Files scripts. Sure, everyone understood that government surveillance was a thing, &lt;em&gt;in the abstract.&lt;/em&gt; But actually talking about this was bound to make you look a little silly, even in paranoid circles.&lt;/p&gt;
&lt;p&gt;That these concerns have been granted &lt;em&gt;respectability&lt;/em&gt; is one of the most important things Snowden did for us.&lt;/p&gt;
&lt;h3&gt;So what did Snowden’s leaks really tell us?&lt;/h3&gt;
&lt;p&gt;The brilliant thing about the Snowden leaks was that he didn’t tell us much of anything. He showed us. Most of the revelations came in the form of a Powerpoint slide deck, the misery of which somehow made it all more real. And despite all the revelation fatigue, the things he showed us were remarkable. I’m going to hit a few of the highlights from my perspective. Many are cryptography-related, just because that’s what this blog is about. Others tell a more basic story about how vulnerable our networks are.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;“Collect it all”&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Prior to Snowden, even surveillance-skeptics would probably concede that, yes, the NSA collects data on specific targets. But even the most paranoid observers were shocked by the sheer scale of what the NSA was actually doing out there.&lt;/p&gt;
&lt;p&gt;The Snowden revelations detailed several programs that were so astonishing in the breadth and scale of the data being collected, the only real limits on them were caused by technical limitations in the NSA’s hardware. Most of us are familiar with the famous examples, like nationwide phone metadata collection. But it’s the bizarre, obscure leaks that really drive this home. For example:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“Optic Nerve”.&lt;/strong&gt; From 2008-2010 the NSA and GCHQ collected &lt;a href=&quot;https://www.theguardian.com/world/2014/feb/27/gchq-nsa-webcam-images-internet-yahoo&quot;&gt;millions of still images from every Yahoo! Messenger webchat stream&lt;/a&gt;, and used them to build a massive database for facial recognition. The collection of data had no particular rhyme or reason — &lt;em&gt;i.e.,&lt;/em&gt; it didn’t target specific users who might be a national security threat. It was just… everything. Don’t believe me? Here’s how we know how indiscriminate this was: &lt;span&gt;the program didn’t even necessarily target faces&lt;/span&gt;. It got… other things:&lt;/p&gt;
&lt;p&gt;&lt;img data-attachment-id=&quot;5105&quot; data-permalink=&quot;https://blog.cryptographyengineering.com/2019/09/24/looking-back-at-the-snowden-revelations/optic/&quot; data-orig-file=&quot;https://matthewdgreen.files.wordpress.com/2019/09/optic.png&quot; data-orig-size=&quot;1240,326&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;Optic&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://matthewdgreen.files.wordpress.com/2019/09/optic.png?w=300&quot; data-large-file=&quot;https://matthewdgreen.files.wordpress.com/2019/09/optic.png?w=700&quot; class=&quot;alignnone size-full wp-image-5105&quot; src=&quot;https://matthewdgreen.files.wordpress.com/2019/09/optic.png?w=700&quot; alt=&quot;Optic.png&quot; srcset=&quot;https://matthewdgreen.files.wordpress.com/2019/09/optic.png?w=700 700w, https://matthewdgreen.files.wordpress.com/2019/09/optic.png?w=150 150w, https://matthewdgreen.files.wordpress.com/2019/09/optic.png?w=300 300w, https://matthewdgreen.files.wordpress.com/2019/09/optic.png?w=768 768w, https://matthewdgreen.files.wordpress.com/2019/09/optic.png?w=1024 1024w, https://matthewdgreen.files.wordpress.com/2019/09/optic.png 1240w&quot; sizes=&quot;(max-width: 700px) 100vw, 700px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MYSTIC/SOMALGET.&lt;/strong&gt; In addition to collecting massive quantities of Internet metadata, the NSA &lt;a href=&quot;https://theintercept.com/2014/05/19/data-pirates-caribbean-nsa-recording-every-cell-phone-call-bahamas/&quot;&gt;recorded the full audio every cellular call made in the Bahamas&lt;/a&gt;. (Note: this is not simply calls &lt;span&gt;to&lt;/span&gt; the Bahamas, which might be sort of a thing. They abused a law enforcement access feature in order to record all the mobile calls made within the country.) Needless to say, the Bahamian government was not party to this secret.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MUSCULAR.&lt;/strong&gt; In case anyone thought the NSA avoided attacks on American providers, a series of leaks in 2014 &lt;a href=&quot;https://www.washingtonpost.com/world/national-security/nsa-infiltrates-links-to-yahoo-google-data-centers-worldwide-snowden-documents-say/2013/10/30/e51d661e-4166-11e3-8b74-d89d714ca4dd_story.html&quot;&gt;documented that the NSA had tapped the internal leased lines&lt;/a&gt; used to connect Google and Yahoo datacenters. This gave the agencies access to vast and likely indiscriminate access to torrents of data on U.S. and European users, information was likely &lt;span&gt;above and beyond&lt;/span&gt; the data that these companies already shared with the U.S. under existing programs like &lt;a href=&quot;https://en.wikipedia.org/wiki/PRISM_(surveillance_program)&quot;&gt;PRISM&lt;/a&gt;. This leak is probably most famous for this slide:&lt;/p&gt;
&lt;p&gt;&lt;img data-attachment-id=&quot;5109&quot; data-permalink=&quot;https://blog.cryptographyengineering.com/2019/09/24/looking-back-at-the-snowden-revelations/addedremoved-3/&quot; data-orig-file=&quot;https://matthewdgreen.files.wordpress.com/2019/09/addedremoved.png&quot; data-orig-size=&quot;1334,936&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;addedremoved&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://matthewdgreen.files.wordpress.com/2019/09/addedremoved.png?w=300&quot; data-large-file=&quot;https://matthewdgreen.files.wordpress.com/2019/09/addedremoved.png?w=700&quot; class=&quot;aligncenter size-large wp-image-5109&quot; src=&quot;https://matthewdgreen.files.wordpress.com/2019/09/addedremoved.png?w=700&amp;amp;h=491&quot; alt=&quot;addedremoved&quot; srcset=&quot;https://matthewdgreen.files.wordpress.com/2019/09/addedremoved.png?w=700&amp;amp;h=491 700w, https://matthewdgreen.files.wordpress.com/2019/09/addedremoved.png?w=150&amp;amp;h=105 150w, https://matthewdgreen.files.wordpress.com/2019/09/addedremoved.png?w=300&amp;amp;h=210 300w, https://matthewdgreen.files.wordpress.com/2019/09/addedremoved.png?w=768&amp;amp;h=539 768w, https://matthewdgreen.files.wordpress.com/2019/09/addedremoved.png?w=1024&amp;amp;h=718 1024w, https://matthewdgreen.files.wordpress.com/2019/09/addedremoved.png 1334w&quot; sizes=&quot;(max-width: 700px) 100vw, 700px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Yahoo!, post-Snowden.&lt;/strong&gt; And in case you believe that this all ended after Snowden’s leaks, we’ve learned even more disturbing things since. For example, in 2015, Yahoo got caught installing what has been described as a “rootkit” that &lt;a href=&quot;https://www.reuters.com/article/us-yahoo-nsa-exclusive-idUSKCN1241YT&quot;&gt;scanned every single email in its database for specific selectors&lt;/a&gt;, at the request of the U.S. government. This was so egregious that the company didn’t even tell it’s CISO, who left the next week. In fact, we know a lot more about Yahoo’s &lt;a href=&quot;https://www.theguardian.com/world/2014/sep/11/yahoo-nsa-lawsuit-documents-fine-user-data-refusal&quot;&gt;collaboration during this time period&lt;/a&gt;, thanks to Snowden.&lt;/p&gt;
&lt;p&gt;These examples are not necessarily the worst things we learned from the Snowden leaks. I chose them only to illustrate how completely indiscriminate the agency’s surveillance really was. &lt;em&gt;And not because the NSA was especially evil, but just because it was easy to do.&lt;/em&gt; If you had any illusions that this data was being carefully filtered to exclude capturing data belonging to U.S. citizens, or U.S. companies, the Snowden leaks should have set you straight.&lt;/p&gt;
&lt;h3&gt;SIGINT Enabling&lt;/h3&gt;
&lt;p&gt;The Snowden leaks also helped shatter a second illusion: the idea that the NSA was on the side of the angels when it comes to making the Internet more secure. I’ve &lt;a href=&quot;https://blog.cryptographyengineering.com/2013/09/06/on-nsa/&quot;&gt;written about this plenty&lt;/a&gt; on this blog (with sometimes &lt;a href=&quot;https://www.theguardian.com/world/2013/sep/10/johns-hopkins-dean-apologises-for-blog&quot;&gt;exciting results&lt;/a&gt;), but maybe this needs to be said again.&lt;/p&gt;
&lt;p&gt;One of the most important lessons we learned from the Snowden leaks was that the NSA very much prioritizes its surveillance mission, to the point where it is willing to actively insert vulnerabilities into encryption products and standards &lt;span&gt;used on U.S. networks&lt;/span&gt;. And this kind of thing wasn’t just an occasional crime of opportunity — the agency spent $250 million per year on a program called the &lt;a href=&quot;https://www.documentcloud.org/documents/784285-sigint-enabling-project&quot;&gt;SIGINT Enabling Project&lt;/a&gt;. Its goal was, basically, to bypass our commercial encryption at any cost.&lt;/p&gt;
&lt;p&gt;&lt;img data-attachment-id=&quot;5111&quot; data-permalink=&quot;https://blog.cryptographyengineering.com/2019/09/24/looking-back-at-the-snowden-revelations/sigint/&quot; data-orig-file=&quot;https://matthewdgreen.files.wordpress.com/2019/09/sigint.png&quot; data-orig-size=&quot;1262,868&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;sigint&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://matthewdgreen.files.wordpress.com/2019/09/sigint.png?w=300&quot; data-large-file=&quot;https://matthewdgreen.files.wordpress.com/2019/09/sigint.png?w=700&quot; class=&quot;alignnone size-full wp-image-5111&quot; src=&quot;https://matthewdgreen.files.wordpress.com/2019/09/sigint.png?w=700&quot; alt=&quot;sigint&quot; srcset=&quot;https://matthewdgreen.files.wordpress.com/2019/09/sigint.png?w=700 700w, https://matthewdgreen.files.wordpress.com/2019/09/sigint.png?w=150 150w, https://matthewdgreen.files.wordpress.com/2019/09/sigint.png?w=300 300w, https://matthewdgreen.files.wordpress.com/2019/09/sigint.png?w=768 768w, https://matthewdgreen.files.wordpress.com/2019/09/sigint.png?w=1024 1024w, https://matthewdgreen.files.wordpress.com/2019/09/sigint.png 1262w&quot; sizes=&quot;(max-width: 700px) 100vw, 700px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;This kind of sabotage is, needless to say, something that not even the most paranoid security researchers would have predicted from our own intelligence agencies. Agencies that, ostensibly have a mission to &lt;span&gt;protect&lt;/span&gt; U.S. networks.&lt;/p&gt;
&lt;p&gt;&lt;img data-attachment-id=&quot;5121&quot; data-permalink=&quot;https://blog.cryptographyengineering.com/2019/09/24/looking-back-at-the-snowden-revelations/enabling/&quot; data-orig-file=&quot;https://matthewdgreen.files.wordpress.com/2019/09/enabling.png&quot; data-orig-size=&quot;1214,252&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;enabling&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://matthewdgreen.files.wordpress.com/2019/09/enabling.png?w=300&quot; data-large-file=&quot;https://matthewdgreen.files.wordpress.com/2019/09/enabling.png?w=700&quot; class=&quot;alignnone size-full wp-image-5121&quot; src=&quot;https://matthewdgreen.files.wordpress.com/2019/09/enabling.png?w=700&quot; alt=&quot;enabling&quot; srcset=&quot;https://matthewdgreen.files.wordpress.com/2019/09/enabling.png?w=700 700w, https://matthewdgreen.files.wordpress.com/2019/09/enabling.png?w=150 150w, https://matthewdgreen.files.wordpress.com/2019/09/enabling.png?w=300 300w, https://matthewdgreen.files.wordpress.com/2019/09/enabling.png?w=768 768w, https://matthewdgreen.files.wordpress.com/2019/09/enabling.png?w=1024 1024w, https://matthewdgreen.files.wordpress.com/2019/09/enabling.png 1214w&quot; sizes=&quot;(max-width: 700px) 100vw, 700px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The Snowden reporting not only revealed the existence of these overall programs, but they uncovered a lot of unpleasant specifics, leading to a great deal of follow-up investigation.&lt;/p&gt;
&lt;p&gt;For example, the Snowden leaks contained specific &lt;a href=&quot;https://blog.cryptographyengineering.com/2013/09/18/the-many-flaws-of-dualecdrbg/&quot;&gt;allegations of a vulnerability in a NIST standard called Dual EC&lt;/a&gt;. The possibility of such a vulnerability had previously been noted by U.S. security researchers Dan Shumow and Niels Ferguson a few years earlier. But despite making a reasonable case for re-designing this algorithm, those researchers (and others) were basically &lt;a href=&quot;https://csrc.nist.gov/csrc/media/projects/crypto-standards-development-process/documents/dualec_in_x982_and_sp800-90.pdf&quot;&gt;brushed off by the “serious” people at NIST&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img data-attachment-id=&quot;5112&quot; data-permalink=&quot;https://blog.cryptographyengineering.com/2019/09/24/looking-back-at-the-snowden-revelations/schneier/&quot; data-orig-file=&quot;https://matthewdgreen.files.wordpress.com/2019/09/schneier.png&quot; data-orig-size=&quot;1950,1560&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;schneier&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://matthewdgreen.files.wordpress.com/2019/09/schneier.png?w=300&quot; data-large-file=&quot;https://matthewdgreen.files.wordpress.com/2019/09/schneier.png?w=700&quot; class=&quot;aligncenter size-medium wp-image-5112&quot; src=&quot;https://matthewdgreen.files.wordpress.com/2019/09/schneier.png?w=300&amp;amp;h=240&quot; alt=&quot;schneier&quot; width=&quot;300&quot; height=&quot;240&quot; srcset=&quot;https://matthewdgreen.files.wordpress.com/2019/09/schneier.png?w=300&amp;amp;h=240 300w, https://matthewdgreen.files.wordpress.com/2019/09/schneier.png?w=600&amp;amp;h=480 600w, https://matthewdgreen.files.wordpress.com/2019/09/schneier.png?w=150&amp;amp;h=120 150w&quot; sizes=&quot;(max-width: 300px) 100vw, 300px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The Snowden documents changed all that. The leaks were a devastating embarassment to the U.S. cryptographic establishment, and led to some actual changes. Not only does it appear that the NSA deliberately backdoored Dual EC, it seems that they did so (and used NIST) in order to deploy the backdoor into U.S. security products. Later investigations would show that &lt;a href=&quot;https://blog.cryptographyengineering.com/2017/12/19/the-strange-story-of-extended-random/&quot;&gt;Dual EC was present in software by RSA Security&lt;/a&gt; (allegedly because of a &lt;a href=&quot;https://www.reuters.com/article/us-usa-security-rsa/exclusive-secret-contract-tied-nsa-and-security-industry-pioneer-idUSBRE9BJ1C220131220&quot;&gt;secret contract with the NSA&lt;/a&gt;) and in firewalls made by &lt;a href=&quot;https://kb.juniper.net/InfoCenter/index?page=content&amp;amp;id=KB28205&amp;amp;actp=METADATA&quot;&gt;Juniper Networks.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(Just to make everything a bit more horrifying, Juniper’s Dual EC backdoor would later &lt;a href=&quot;https://blog.cryptographyengineering.com/2015/12/22/on-juniper-backdoor/&quot;&gt;be hijacked and turned against the United States by unknown hackers&lt;/a&gt; — illustrating exactly how reckless this all was.)&lt;/p&gt;
&lt;p&gt;And finally, there are the &lt;em&gt;mysteries&lt;/em&gt;. Snowden slides indicate that the NSA has been decrypting SSL/TLS and IPsec connections at vast scale. Even beyond the SIGINT Enabling-type sabotage, this raises huge questions about &lt;em&gt;what the hell is &lt;a href=&quot;https://blog.cryptographyengineering.com/2013/12/03/how-does-nsa-break-ssl/&quot;&gt;actually going on here&lt;/a&gt;.&lt;/em&gt; There are &lt;a href=&quot;https://blog.cryptographyengineering.com/2015/05/22/attack-of-week-logjam/&quot;&gt;theories&lt;/a&gt;. These may or may not be correct, but at least now people are thinking about them. At very least, it’s clear that something is very, very wrong.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.eff.org/document/20141228-spiegel-gchq-presentation-bullrun-programs-decryption-capabilities&quot;&gt;&lt;img data-attachment-id=&quot;5122&quot; data-permalink=&quot;https://blog.cryptographyengineering.com/2019/09/24/looking-back-at-the-snowden-revelations/bullrun/&quot; data-orig-file=&quot;https://matthewdgreen.files.wordpress.com/2019/09/bullrun.png&quot; data-orig-size=&quot;1462,924&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;bullrun&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://matthewdgreen.files.wordpress.com/2019/09/bullrun.png?w=300&quot; data-large-file=&quot;https://matthewdgreen.files.wordpress.com/2019/09/bullrun.png?w=700&quot; class=&quot;aligncenter size-medium wp-image-5122&quot; src=&quot;https://matthewdgreen.files.wordpress.com/2019/09/bullrun.png?w=300&amp;amp;h=190&quot; alt=&quot;bullrun&quot; width=&quot;300&quot; height=&quot;190&quot; srcset=&quot;https://matthewdgreen.files.wordpress.com/2019/09/bullrun.png?w=300&amp;amp;h=190 300w, https://matthewdgreen.files.wordpress.com/2019/09/bullrun.png?w=600&amp;amp;h=380 600w, https://matthewdgreen.files.wordpress.com/2019/09/bullrun.png?w=150&amp;amp;h=95 150w&quot; sizes=&quot;(max-width: 300px) 100vw, 300px&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.eff.org/document/20141228-spiegel-gchq-presentation-bullrun-programs-decryption-capabilities&quot;&gt;&lt;img data-attachment-id=&quot;305&quot; data-permalink=&quot;https://blog.cryptographyengineering.com/2015/05/22/attack-of-week-logjam/50522-nsa_combined/&quot; data-orig-file=&quot;https://matthewdgreen.files.wordpress.com/2015/05/50522-nsa_combined.png&quot; data-orig-size=&quot;1340,700&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;50522-nsa_combined&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://matthewdgreen.files.wordpress.com/2015/05/50522-nsa_combined.png?w=300&quot; data-large-file=&quot;https://matthewdgreen.files.wordpress.com/2015/05/50522-nsa_combined.png?w=700&quot; class=&quot;aligncenter size-medium wp-image-305&quot; src=&quot;https://matthewdgreen.files.wordpress.com/2015/05/50522-nsa_combined.png?w=300&amp;amp;h=157&quot; alt=&quot;50522-nsa_combined&quot; width=&quot;300&quot; height=&quot;157&quot; srcset=&quot;https://matthewdgreen.files.wordpress.com/2015/05/50522-nsa_combined.png?w=300&amp;amp;h=157 300w, https://matthewdgreen.files.wordpress.com/2015/05/50522-nsa_combined.png?w=600&amp;amp;h=314 600w, https://matthewdgreen.files.wordpress.com/2015/05/50522-nsa_combined.png?w=150&amp;amp;h=78 150w&quot; sizes=&quot;(max-width: 300px) 100vw, 300px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Have things improved?&lt;/h3&gt;
&lt;p&gt;This is the $250 million question.&lt;/p&gt;
&lt;p&gt;Some of the top-level indicators are surprisingly healthy. HTTPS adoption has taken off like a rocket, driven in part by Google’s willingness to use it as a signal for &lt;a href=&quot;https://webmasters.googleblog.com/2014/08/https-as-ranking-signal.html&quot;&gt;search rankings&lt;/a&gt; — and the rise of free Certificate Authorities like &lt;a href=&quot;https://letsencrypt.org/&quot;&gt;LetsEncrypt&lt;/a&gt;. It’s possible that these things would have happened eventually without Snowden, but it’s less likely.&lt;/p&gt;
&lt;p&gt;End-to-end encrypted messaging has also taken off, largely due to adoption by WhatsApp and a host of relatively new apps. It’s reached the point where law enforcement agencies have begun to freak out, as the slide below illustrates.&lt;/p&gt;
&lt;img data-attachment-id=&quot;5124&quot; data-permalink=&quot;https://blog.cryptographyengineering.com/2019/09/24/looking-back-at-the-snowden-revelations/e2e-2/&quot; data-orig-file=&quot;https://matthewdgreen.files.wordpress.com/2019/09/e2e.png&quot; data-orig-size=&quot;1024,512&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;e2e&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://matthewdgreen.files.wordpress.com/2019/09/e2e.png?w=300&quot; data-large-file=&quot;https://matthewdgreen.files.wordpress.com/2019/09/e2e.png?w=700&quot; class=&quot;alignnone size-full wp-image-5124&quot; src=&quot;https://matthewdgreen.files.wordpress.com/2019/09/e2e.png?w=700&quot; alt=&quot;e2e&quot; srcset=&quot;https://matthewdgreen.files.wordpress.com/2019/09/e2e.png?w=700 700w, https://matthewdgreen.files.wordpress.com/2019/09/e2e.png?w=150 150w, https://matthewdgreen.files.wordpress.com/2019/09/e2e.png?w=300 300w, https://matthewdgreen.files.wordpress.com/2019/09/e2e.png?w=768 768w, https://matthewdgreen.files.wordpress.com/2019/09/e2e.png 1024w&quot; sizes=&quot;(max-width: 700px) 100vw, 700px&quot;/&gt;Slightly dated numbers, source: CSIS (or this &lt;a href=&quot;https://www.finextra.com/blogposting/16329/secure-messaging-for-financial-institutions&quot;&gt;article&lt;/a&gt;)
&lt;p&gt;Does Snowden deserve credit for this? Maybe not directly, but it’s almost certain that concerns over the surveillance he revealed did play a role. (It’s worth noting that this adoption is &lt;em&gt;not&lt;/em&gt; evenly distributed across the globe.)&lt;/p&gt;
&lt;p&gt;It’s also worth pointing out that &lt;em&gt;at least in the open source community&lt;/em&gt; the quality of our encryption software has &lt;a href=&quot;http://events17.linuxfoundation.org/sites/events/files/slides/linuxcon-v2.pdf&quot;&gt;improved&lt;/a&gt; &lt;a href=&quot;https://github.com/google/boringssl&quot;&gt;enormously&lt;/a&gt;, largely due to the fact that major companies made well-funded efforts to harden their systems, in part as a result of serious flaws like Heartbleed — and in part as a response to the company’s own concerns about surveillance.&lt;/p&gt;
&lt;p&gt;It might very well be that the NSA has lost a significant portion of its capability since Snowden.&lt;/p&gt;
&lt;h3&gt;The future isn’t American&lt;/h3&gt;
&lt;p&gt;I’ve &lt;a href=&quot;https://blog.cryptographyengineering.com/2015/08/16/the-network-is-hostile/&quot;&gt;said this before&lt;/a&gt;, as have many others: even if you support the NSA’s mission, and believe that the U.S. is doing everything right, it doesn’t matter. Unfortunately, the future of surveillance has very little to do with what happens in Ft. Meade, Maryland. In fact, the world that Snowden brought to our attention isn’t necessarily a world that Americans have much say in.&lt;/p&gt;
&lt;p&gt;As an example: today the U.S. government is in the midst of forcing a &lt;a href=&quot;https://www.apnews.com/e79cdf51aca4468699139c39a1105685&quot;&gt;standoff with China&lt;/a&gt; over the global deployment of &lt;a href=&quot;https://techcrunch.com/2019/06/25/huawei-wins-5g-contracts/&quot;&gt;Huawei’s 5G wireless networks&lt;/a&gt; around the world. This is a complicated issue, and financial interest probably plays a big role. But global security also matters here. This conflict is perhaps the clearest acknowledgement we’re likely to see that our own government knows how much control of communications networks really matters, and our inability to secure communications on these networks could really hurt us. This means that we, here in the West, had better get our stuff together — or else we should be prepared to get a taste of our own medicine.&lt;/p&gt;
&lt;p&gt;If nothing else, we owe Snowden for helping us to understand how high the stakes might be.&lt;/p&gt;

</description>
<pubDate>Wed, 25 Sep 2019 05:37:04 +0000</pubDate>
<dc:creator>sohkamyung</dc:creator>
<og:type>article</og:type>
<og:title>Looking back at the Snowden revelations</og:title>
<og:url>https://blog.cryptographyengineering.com/2019/09/24/looking-back-at-the-snowden-revelations/</og:url>
<og:description>Edward Snowden recently released his memoirs. In some parts of the Internet, this has rekindled an ancient debate: namely, was it all worth it? Did Snowden’s leaks make us better off, or did …</og:description>
<og:image>https://matthewdgreen.files.wordpress.com/2019/09/snowden.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.cryptographyengineering.com/2019/09/24/looking-back-at-the-snowden-revelations/</dc:identifier>
</item>
<item>
<title>We are clueless about how long things should take</title>
<link>http://kyleprifogle.com/dear-startup/</link>
<guid isPermaLink="true" >http://kyleprifogle.com/dear-startup/</guid>
<description>&lt;p&gt;24 Sep 2019&lt;/p&gt;
&lt;h3 id=&quot;the-problem&quot;&gt;The problem&lt;/h3&gt;
&lt;p&gt;Throughout my career working for tech startups I noticed a strange phenomenon. Throughout the beginning of my career I had a fair bit of what some would consider relatively “simple” web development work. Things like developing crud apps, building an API integration, etc. I noticed that even though I would give estimates for my work, my managers and their managers all the way up to the founder would have certain expectations about how long work should take regardless of my estimates, and if my estimates outpaced their expectations then there would be problems. Often times this would be in spite of the fact that many times those above me didn’t have nearly the technical expertise at all to make such an assessment. I chalked it off at the time as simply just a display of systemic mistrust within that organization and tried my best to meet their expectations in spite of them sometimes being unrealistic.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://kyleprifogle.com/images/calvin.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;However, as the years have gone by I’ve noticed that the problem extended to almost every company I worked for. The problem became worse when I graduated from simple web development work to distributed computing and what many people would consider “big data” (though I hate the term to be honest). Many of the problems I was now solving were significantly more involved, cluster management, event driven systems, high availability, functional programing, complex distributed graph computations, topics of research and scalable data science. However, I found that the unspoken expectations of the managers above me in terms of how long certain tasks should take still on average remained roughly the same as was when I was doing simple web development work!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://kyleprifogle.com/images/expect.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;They wouldn’t say this at first, you would give your estimates and thoughtfully break your tasks into reasonable chunks and factor in for uncertainties and testing, but still if you sat down and pressed them they would still expect anything that would take more than a couple of weeks to be too involved, and they would assume that the problem was how you are approaching the problem, regardless of how hard the problem actually was. I found myself absolutely astonished that tech founders could be so clueless as to assume that a simple rest api integration should take the same amount of time as a real time transactional distributed ward’s clustering implementation for peta bytes of data, or a highly available complex distributed metastore. Had engineering really come that far in those few short years for this much harder work to be commoditized already? No.&lt;/p&gt;
&lt;p&gt;After all of these years, I finally came to one simple conclusion. With all due respect: we are completely clueless about how long things should take.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://kyleprifogle.com/images/boat.jpg&quot;/&gt;&lt;em&gt;Next stop: Unicorn Island&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;the-parsimonious-yachtman&quot;&gt;The Parsimonious Yachtman&lt;/h3&gt;
&lt;p&gt;Lets explore this point more by means of an extended analogy. Suppose that you wanted to start a new business as a yachting captain. Suppose that you had watched a show my wife will indulge in from time to time, “Below Deck”, and you had determined that you needed one of those gigantic multi million dollar yachts to serve the best of the best, baseball stars and movie directors will be your quarry. This is in many ways analogous to when a startup company decides that they want to serve the fortune 500, companies that have petabytes and beyond of data. However, you as a startup founder have to operate lean, and you are only willing to spend $10,000 on a boat. If you were to walk up to the owner of the multi million dollar yacht and say, I’ll give you $10,000 for that boat, you would be laughed off the dock.&lt;/p&gt;
&lt;p&gt;Similarly if you were to walk to a boat construction company (because what does that yacht owner know) and ask them to build a comparable boat, they wouldn’t take you seriously. So what do you do instead? Hire someone that’s an expert in boats to make it work for you. Shift the culpability of making the impossible happen to someone else. So you hire your enthusiastic new employee and and think to yourself, “He will find me exactly what I want, a tremendous yacht that can serve 20 people with luxury amenities, full kitchen, hot tub, etc.” essentially you envision in a piecemeal fashion what you saw before but couldn’t afford. Now suppose that you were to pay them simply a flat fee for their services, and then you give them the budget of $10,000. Now suppose additionally, you didn’t give them the full vision of the boat that you wanted, but simply told them “I want a boat that can transport 20 people” and left out the rest of it.&lt;/p&gt;
&lt;p&gt;The boat expert may think to themselves, this is impossible, but I dont want to dissapoint them on my first week, so maybe I can find some type of discounted used ferry for under $50,000 and says “ok lets do this but lets up the budget to $50,000”. Its more than the founder had wanted to spend, but they are willing to make this concession. So the boat finder begins his work, however, as the different parts of the vision start to unfold, and the luxury nature of the yacht starts to reveal itself, the boat expert suddenly realizes they have just become victim to a case of misplaced culpability, and any additional needs that they surface to satisfy the needs of the “luxury yacht” vision is now a &lt;em&gt;issue of their own invention&lt;/em&gt;! Even though the business requirements are coming from the owner, they are still surfacing the additional technical requirements needed to satisfy the vision and thus are in many ways now an obstacle to the founders original intention of acquiring a boat for under $10,000. Suddenly, the boat expert is producing problems, and not solutions, suddenly he &lt;em&gt;is&lt;/em&gt; a problem.&lt;/p&gt;
&lt;p&gt;The parsimonious yachtman isn’t being malicious here. Its just inevietable, that no matter what the boat finding expert does, he will never be able to overcome the fact that the founder really only “values” his new acquisition with a price tag of $10,000 so anything he does contrary to this reality simply weakens his position, REGARDLESS of how right he is in his on going estimation, and additionally he’s already started the engagement by asking for a concession.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://kyleprifogle.com/images/boatexpect.png&quot;/&gt;&lt;em&gt;Expectations vs Reality&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Back to the tech startup, suppose that you think of the development of a piece of software in terms of its TCA (total cost of acquisition), but multiplying the development hours that you spend on something by the developer salaries, and for simplicity suppose that you don’t factor in things like infrastructure costs or license costs for other software. The startup manager says they want a system built that can support X write latency/throughput, Y read/latency and throughput, but the exact nature of the product itself is a WIP due to the fact that they are exploring the market and trying to find the right clients (namely any clients) so need to keep some doors open. Additionally the manager has an idea in the back of his mind that it should take about 2 weeks to build the system by comparing it to another system that he was involved with (unbeknownst to him that system was much much simpler and didn’t have anywhere near the same requirements). The engineer comes back with this simplified description and says he can get a first version produced, but it will take a month instead of 2 weeks. The engineer was being optimistic, and it was a stretch goal already, but he’s new to the company and doesn’t want to seem like he’s a slow poke.&lt;/p&gt;
&lt;p&gt;The manager after 2 weeks (his original expectations) has already started breathing down the engineers neck. But why is that? Didn’t the engineer say it would take a month? Not to mention that now that the client focus has shifted, new requirements are now pushing the estimate well beyond the month, but the estimate is not allowed to shift with shifting requirements. It is now the written gospel of expectation for the project, regardless of lip service the company may pay to “agile”.&lt;/p&gt;
&lt;p&gt;I could take the comparison farther, but nothing can change the fact that the founder was so far off his original unspoken 2 week expectation that nothing the engineer can do will satisfy what he has in mind and his original budget of 2 weeks was all that he “really” was willing to spend, and a month was a stretch but he was willing to pay a bit more. He was doomed from the start by the manager/founders inaccurate expectation. What happens next? Most likely the engineering lead fails to live up to the expectation and is replaced on the project with another one. But that sounds kind of like an extreme scenario doesn’t it? Would you be surprised to hear that most companies I’ve worked for fell prey to some form of this pattern? Its clearly not an isolated problem.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://kyleprifogle.com/images/bargaining.jpeg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Startup founders fool themselves into thinking that they can procure assets orders of magnitude beyond what they are willing to pay to procure those assets. In essence, when it comes to engineering assets and engineering time they fall prey to “magical thinking” (likely inspired by some depiction of a hacker they saw in a movie once). If founders/managers were to step back and think about it simply in terms of TCA and compare what they are building to what a company is charging for a similar product they might realize that they are trying to get a $10 million yacht for $10,000. Again, no one is being malicious, they are simply learning from what the history of tech enterprises that have gone before us have taught them. That skilled engineers working in a basement totally clueless to business requirements can produce tremendous value. They don’t realize that so many factors have gone into play in those success stories that went before including luck, timing, market conditions to name a few.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://kyleprifogle.com/images/invincible.gif&quot;/&gt;&lt;em&gt;Why can't you just be more like Boris?&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;a-radical-proposal&quot;&gt;A Radical Proposal&lt;/h3&gt;
&lt;p&gt;The underlying problem still remains that the founder/managers (albeit uninformed, ultimately unchangeable) subconcious expectations about how long the task should take &lt;em&gt;inspired&lt;/em&gt; by how much they value that particular component is not even in the same galaxy to what it will cost to build such a system. Some “product development methodologies” like Agile have tried to solve the problem but given us nothing more than a slightly different means to shift culpability to engineering when things aren’t happening as fast as we expect. So how do you solve that problem? The question I have started asking managers and founders is simple. “How much time do YOU want me to spend on this”. This little question has often made them pause. “What do you mean, you are supposed to provide me with an estimate and then I approve it.” Its just not that simple.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://kyleprifogle.com/images/estimation.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Estimates are such a loaded and dangerous endeavor for an engineer. To the point where companies mistakenly talk about estimates like its a “skill” that an engineer can learn. But the reality is that if you can make a probabalistically accurate estimate, then its likely that the task should have been automated by some other means already. In other words, its easy to estimate a task that essentially amounts to copy and pasting some well known CRUD API end point patterns, but any even remotely creative or novel work is almost guaranteed to be totally unknown. Its almost always a way to trap an engineer in a bargaining conundrum. Ie, if you make me provide an estimate first and its no where near what you have in mind (because it won’t be), then you have placed me automatically in a position of begging for additional time. Its not so surprising that this subtle form of manipulation in the sales tactic of getting us to put our cards out the table first comes from the business end of the company. So as engineers, what do we have to do?&lt;/p&gt;
&lt;h2 id=&quot;no-more-estimates&quot;&gt;NO MORE ESTIMATES.&lt;/h2&gt;
&lt;p&gt;But estimates are our friends, it conveys expectations back to the company. The truth is that isn’t how it actually plays out, and this needs to become our new engineering battle cry. If engineers stop giving estimates for their work and simply ask for deadlines then it changes the dynamic of the conversation. If they say that they want to spend $10,000 on acquiring the boat, then we can come back and say, well I won’t be able to give you the luxury yacht you had in mind, however, I can find a used sailboat and after we fix it up you can possible charge high end clientele for exclusive sailing excursions. It puts us back in the superior position of negotiation. Then as engineers, we have the freedom to come up with a solution that meets your expectations and simultaneously doesn’t put us in an impossible situation. Or at a minimum at least veto the idea all together as not being possible to achieve in the desired time spans. Besides 99% of the time you end up getting a deadline anyway, so why even go through the excercise of making estimates?&lt;/p&gt;
&lt;h3 id=&quot;it-will-only-get-worse&quot;&gt;It will only get worse&lt;/h3&gt;
&lt;p&gt;Engineering is not getting simpler, its getting more and more complex, because we are solving harder and harder problems, which means that these things (which all haven’t been commoditized yet, in spite of the fact that many founders secretly think that all engineering problems have already been reduced to the drag and drop simplicity of building Wix websites) will take longer to solve and will have a higher TCA. As a result, the gap between the expectations of founders/managers in terms of time to implementation and the amount of time we &lt;em&gt;should&lt;/em&gt; be spending building these systems is becoming light years apart. As a result, we continue to push out half baked solutions cobbled together with duct tape and chicken wire just barely hobbling across the finish line so we can toss it off to operational teams and burden them with our rushed decision making for the rest of the life of the company or until they burn out and leave (guess which will come first).&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://kyleprifogle.com/images/shit.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The problem will get much worse until engineers start hitting their employers with much needed reality checks on what it takes to solve these problems. For startup founders/managers, if I cannot appeal to your sense of pity for your employees, I hope I can at least appeal to your sense of pride: Don’t be the guy asking the $10 million yacht captain if he wants to sell it for $10,000.&lt;/p&gt;
&lt;p&gt;Kyle Prifogle&lt;/p&gt;
&lt;br/&gt;&lt;a href=&quot;https://twitter.com/intent/tweet?text=http://kyleprifogle.com/dear-startup/&quot; class=&quot;btn btn_twitter&quot; title=&quot;Share on Twitter&quot;&gt; &lt;span&gt;Twitter&lt;/span&gt;&lt;/a&gt; &lt;a href=&quot;https://www.facebook.com/sharer/sharer.php?u=http://kyleprifogle.com/dear-startup/&quot; class=&quot;btn btn_facebook&quot; title=&quot;Share on Facebook&quot;&gt; &lt;span&gt;Facebook&lt;/span&gt;&lt;/a&gt; &lt;a href=&quot;https://plus.google.com/share?url=http://kyleprifogle.com/dear-startup/&quot; class=&quot;btn btn_google-plus&quot; title=&quot;Share on Google Plus&quot;&gt; &lt;span&gt;Google+&lt;/span&gt;&lt;/a&gt;
</description>
<pubDate>Wed, 25 Sep 2019 04:02:26 +0000</pubDate>
<dc:creator>yachtman</dc:creator>
<og:type>article</og:type>
<og:title>Dear Startup: You have no idea how much that costs.</og:title>
<og:description>The problem</og:description>
<og:url>http://kyleprifogle.com/dear-startup/</og:url>
<og:image>http://kyleprifogle.com/images/kyle-small.png</og:image>
<dc:identifier>http://kyleprifogle.com/dear-startup/</dc:identifier>
</item>
<item>
<title>Reverse engineering a custom CPU from a single program</title>
<link>https://www.robertxiao.ca/hacking/dsctf-2019-cpu-adventure-unknown-cpu-reversing/</link>
<guid isPermaLink="true" >https://www.robertxiao.ca/hacking/dsctf-2019-cpu-adventure-unknown-cpu-reversing/</guid>
<description>&lt;p&gt;&lt;em&gt;or: reverse-engineering a custom, unknown CPU from a single program&lt;/em&gt;&lt;/p&gt;&lt;p&gt;tl;dr: We reverse-engineered a program written for a completely custom, unknown CPU architecture, without any documentation for the CPU (no emulator, no ISA reference, nothing) in the span of ten hours. Read on to find out how we did it…&lt;/p&gt;
&lt;p&gt;This past weekend, I participated in Dragon Sector’s 2019 Teaser CTF with the CMU PPP team, as a way of de-stressing after a manic &lt;a href=&quot;https://chi2020.acm.org/&quot;&gt;CHI 2020&lt;/a&gt; deadline. Dragon Sector is a well-respected Polish team with a history of interesting CTFs, so I wanted to see what they had in store.&lt;/p&gt;
&lt;p&gt;After solving “ummmfpu”, a challenge that involved reversing bytecode for the Micromega uM-FPU floating-point unit, I decided to tackle the CPU Adventure challenge, which at that point had not been solved by any teams (we would eventually be the only team to solve that challenge).&lt;/p&gt;
&lt;p&gt;Here’s the description for the CPU Adventure problem, with a cute fictional backstory:&lt;/p&gt;
&lt;blockquote class=&quot;wp-block-quote&quot; readability=&quot;24.722991689751&quot;&gt;
&lt;p&gt;My grandfather used to design computers back in the 60s. While cleaning out his attic, I found a strange machine. Next to the machine, I found a deck of punched cards labeled “Dragon Adventure Game”. After some time, I managed to hook it up to modern hardware, but the game is too hard and I cannot get to the end without cheating. Can you help me?&lt;/p&gt;&lt;p&gt;I’m attaching a transcription of the punched cards used by the machine. The machine proudly claims to have 4 general purpose registers, 1kiB of data memory, and 32kiB of instruction memory.&lt;/p&gt;&lt;p&gt;To play the game, connect to the server as follows:&lt;br/&gt;&lt;code&gt;socat tcp4-connect:cpuadventure.hackable.software:1234 fd:0,rawer&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Hint: this is a custom CPU, don’t bother googling it.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.robertxiao.ca/wp-content/uploads/game.bin_.txt&quot;&gt;game.bin&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Connecting to the server gives us the following output:&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;
&lt;code&gt;THERE IS A TAVERN HERE.  INSIDE THE TAVERN, YOU SEE VALIS.

SELECT AN OPTION:

- GO (N)ORTH
- GO (E)AST
- (T)ALK TO VALIS
- (D)RINK
- SHOW (I)NVENTORY

YOUR CHOICE: &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Nice. It’s an old-school adventure game. Playing with it for a bit suggests that we can fight enemies and get a flag off this Valis character if we can make him happy:&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;
&lt;code&gt;YOUR CHOICE: T

YOU ENTER THE TAVERN AND APPROACH VALIS.

- HEY, I WAS WONDERING IF YOU COULD HELP ME FIND THE FLAG?
- THE FLAG?  MAYBE, BUT FIRST, I NEED A REDBULL.
- I... I DON'T HAVE A REDBULL.
- WELL THEN, MAKE YOURSELF USEFUL AND FIND ONE.

THERE IS A TAVERN HERE.  INSIDE THE TAVERN, YOU SEE VALIS.

SELECT AN OPTION:

- GO (N)ORTH
- GO (E)AST
- (T)ALK TO VALIS
- (D)RINK
- SHOW (I)NVENTORY

YOUR CHOICE: &lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;First Steps&lt;/h3&gt;
&lt;p&gt;I didn’t play with the game for too long, figuring that reversing the &lt;code&gt;game.bin&lt;/code&gt; file was probably more important. I popped it open in a hex editor, expecting binary – imagine my surprise when this is what it looked like:&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
110011111101000000111100110010001110000011001101000000000000110010011101010000001101001111100001111111001100111000000011...
&lt;/pre&gt;
&lt;p&gt;It’s &lt;em&gt;literally&lt;/em&gt; a binary file – a text file containing nothing but ASCII 1s and 0s. We know this is probably machine code for their custom CPU – but besides the fact that it has 4 registers, 1 KiB of data memory and 32 KiB of program memory, we know literally &lt;em&gt;nothing&lt;/em&gt; else about this CPU. So our first big task is to figure out the unit size of this binary file (&lt;em&gt;e.g.&lt;/em&gt; is it 8-bit aligned? or maybe it’s 12-bit or 18-bit aligned like some &lt;a href=&quot;https://www.robertxiao.ca/hacking/defcon2018-assembly-polyglot/&quot;&gt;ancient architectures&lt;/a&gt;?)&lt;/p&gt;
&lt;p&gt;To figure out the alignment of an unknown file, I turn to an age-old trick – resizing a text window until the line-wrap length matches the file alignment. This works wonders for things like repeating-XOR ciphertext, unknown (uncompressed) file formats, and code from an unknown CPU:&lt;/p&gt;
&lt;p&gt;&lt;img data-attachment-id=&quot;681&quot; data-permalink=&quot;https://www.robertxiao.ca/align-mov/&quot; data-orig-file=&quot;https://www.robertxiao.ca/wp-content/uploads/align.mov.gif&quot; data-orig-size=&quot;180,332&quot; data-comments-opened=&quot;0&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;align.mov&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://www.robertxiao.ca/wp-content/uploads/align.mov-163x300.gif&quot; data-large-file=&quot;https://www.robertxiao.ca/wp-content/uploads/align.mov.gif&quot; class=&quot;wp-image-681&quot; src=&quot;https://www.robertxiao.ca/wp-content/uploads/align.mov.gif&quot; alt=&quot;Resizing a text window&quot;/&gt;&lt;/p&gt;
&lt;p&gt;So, from this quick test I figured out that the unit size of this file must divide 20 (the width of the window at alignment). To nail down the exact unit size, I wrote a quick script to look for long repeated strings (figuring that any code would have repeated stereotypical sequences). The longest repeated string was the following 425-bit block, which appeared at positions 43625 and 44510:&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
10000011111110000001010100011111110100000101100010111000001001000101000100001000100001010001011000101000000001111111111100010000011110010100100001010100111100000110000010100000101000101000011110001111001101111001010100001010000111110100001010000110010011011110011111000000111011101000000001100000110000111101011010111011000100100010100000111000100011100011000000000101010101100010111000001010000001101010010000000011000001100
&lt;/pre&gt;
&lt;p&gt;Since the distance between the repeats was 885, we concluded that the unit size must be 5 bits – i.e. the unknown CPU must have 5-bit “bytes”. Progress!&lt;/p&gt;
&lt;p&gt;We looked for 5-bit punch card encodings, and quickly settled on the historical &lt;a href=&quot;https://en.wikipedia.org/wiki/Baudot_code&quot;&gt;Baudot code&lt;/a&gt; encoding. Indeed, when we used an online decoder to decode some snippets, we got readable text!&lt;/p&gt;
&lt;blockquote class=&quot;wp-block-quote&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;⇩DRAGON⇩HERE⇧;⇧⇧⇩SHE⇩APPEARS⇩TO⇩BE⇩GUARDING⇩&lt;br/&gt;SOME⇩KIND⇩OF⇩A⇩BOTTLE⇧;&amp;amp;.&amp;amp;.⇩␀THERE⇩IS⇩A⇩B&lt;/p&gt;
&lt;cite&gt;decoding of the 425-bit code above using LSB Baudot ITA 1&lt;/cite&gt;&lt;/blockquote&gt;
&lt;p&gt;When we tried to decode the whole file using Baudot code, we got gibberish for the first 20,000 bits or so, after which we got completely readable text. This suggested that the first part of the file corresponded to a “code” section, which was followed by a “data” section containing constant strings. We guessed that the machine probably used Baudot code for I/O, which is why it also stored constant strings in memory using Baudot encoding. To make the code segment more readable, I decided to encode it using a base-32 encoding, similar to hexadecimal encoding but extended to the alphabet 0-9a-v. Here’s what the game.bin file looks like, with the first part base-32 encoded and the second half Baudot decoded (full file here: &lt;a href=&quot;https://gist.github.com/nneonneo/8546fb794ac0b65b5a2c3daa9ad0e079#file-02_game-b32&quot;&gt;game.b32&lt;/a&gt;):&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted wp-block-code&quot;&gt;
pv83pi70pk00p7a0qfgvpjg3f0kf13f28p5f3pv10pk40pn60f0sf1sf24p5f3r9c11qad0f0sf1df26p5f39c21qad0f05f1ff26p5f39c41qad0f08f1df26p5f39c81qad0f0hf1ef26p5f3r1c00qaq15c20qcl0f01f1of27p5f3p3g3psf35c10qal0f02f1nf27p5f3p3g3psf3rf0hf1nf27p5f3f05f16f27p5f3rf84f95101311fl0f510f84907qa40b518447qa40b514f84f95k9m0k9m0k9m0907qa40b511447qa40b512ruougf10f20g0i9g0i910931b320u2u1u0ro9f0o9f0ojh0o9f0o9f0o9f0olj0o9f0o9f0o9f0o9f0o9f0o9f0o9f0o9k1onp0o9f0o9f0o9f0o9f0onf0ot82odi0o9f0o9f0o9f0o9f0o9f0o9f0o9f0olg0o9f0f0gf1df24p5f3r9c11qa835548755
[...]
93e9n59ka8fo87r85g8ui8ml8ed87b9h89u291u82333333333456789abcdb01234567892)%c3BOTTLE OF SOPLICA PIGWOWAENEMY HEALTH: 




YOU ATTACK 

YOU APPROACH REDFORD.



YOU ENTER THE TAVERN AND APPROACH VALIS.
[...]
&lt;/pre&gt;
&lt;p&gt;For simplicity, in the following sections I will refer to the five-bit units as “bytes”. We internally had a bunch other names for these things – I called them kibbles, and Zach called them hecs.&lt;/p&gt;
&lt;h3&gt;Reversing an Unknown CPU Architecture&lt;/h3&gt;
&lt;p&gt;Well, now we get to the hard part – reversing the 4000 bytes of code which are run on a completely unknown, custom CPU architecture. From the code, it’s pretty evident that it must be a &lt;em&gt;variable-length&lt;/em&gt; instruction set, because there’s no obvious repeating pattern that holds throughout. I spent several hours on this, assisted later by my teammate Zachary Wade (@zwad3). My first order of business was to start looking for repetitive bits of code, under the assumption that they would use a small number of instructions frequently. I started splitting the code up into shorter, repetitive sequences that would be more amenable to analysis. I wish I could say that I had a rigorous process, but it was very much the following fuzzy algorithm:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Scan through the code and see if there’s something that shows up a lot&lt;/li&gt;
&lt;li&gt;Run a find-replace to stick a newline near that repeat&lt;/li&gt;
&lt;li&gt;Examine the similarities/differences between the resulting split lines&lt;/li&gt;
&lt;li&gt;Repeat this process for about an hour…&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;For example, one pattern I found was “0f0.f” where “.” represented an unknown character. I split on that to get the following:&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;
&lt;code&gt;pv83pi70pk00p7a0qfgvpjg3f0kf13f28p5f3pv10pk40pn60f0sf
1sf24p5f3r9c11qad0f0sf
1df26p5f39c21qad0f05f
1ff26p5f39c41qad0f08f
1df26p5f39c81qad0f0hf
1ef26p5f3r1c00qaq15c20qcl0f01f
1of27p5f3p3g3psf35c10qal0f02f
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This is very useful! From the second and third lines, we can see that we have “…p5f3r9c…” and “…p5f39c…”, suggesting that “r” is a one-byte opcode, which means that “…5f3” is the end of one opcode and “9c..” is the start of another. In the last two lines, we have “p5f3r1c…” which means that “1c..” is another opcode, and “p3…” is yet another opcode.&lt;/p&gt;
&lt;p&gt;I kept splitting instructions like this over and over again, using commonalities and differences between similar blocks to identify probable instructions. Eventually, I had something like this:&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;
&lt;code&gt;pv83
pi70
pk00
p7a0
qfgv
pjg3
f0k
f13
f28
p5f3
pv10
pk40
pn60
f0s
f1s
f24
p5f3
r
9c11
qad0
f0s
f1d
f26
p5f3
9c21
qad0
f05
f1f&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I inferred that “p” and “q” were instructions with three operand bytes, “f0”, “f1” and “f2” were instructions with one operand, and “9c” was an instruction with two operands. I didn’t know what any of the instructions actually were, though.&lt;/p&gt;
&lt;p&gt;When I went to catalog all of the “p” instructions I had extracted, I discovered that by far the most common “p” instruction was “p5f3”. Furthermore, upon looking at all the places it appeared, I found that it was always preceded by “f0”, “f1” and “f2” instructions. Looking at all the “f0”, “f1” and “f2” operands, I noticed that the f2 operands were always in the range of 4-8. Remembering that the CPU had 32 KiB of program memory – which requires 15 bits to address – I made a guess that “f0”, “f1” and “f2” were loading some kind of address, with f2 as the high byte. When I pieced together some of the addresses, I found they pointed exactly at the start of constant strings in the data – I had just found the “print” function!! This immediately implied that “p5f3” was actually some kind of print string or call instruction; given the three byte operand, a “call” was most likely. Looking again at all the “p” instructions, I realized that the three operand bytes represented a program address in &lt;em&gt;little-endian order&lt;/em&gt; – that is, the last operand byte was the most significant address byte.&lt;/p&gt;
&lt;p&gt;This was a huge breakthrough! We had figured out our first instruction. Seeing “f0” and “f1” used in some other places, I guessed that perhaps they weren’t loading addresses – instead, maybe they were loading one of the four registers (f0 loading register 0, for example) with 5-bit immediate constants. This would make sense for p5f3 – it was loading three register arguments for the function 3f5 (“print_string”).&lt;/p&gt;
&lt;p&gt;I started writing a disassembler, which recognized the “print” idiom (f0x, f1x, f2x, p5f3), placing the printed string inline into the disassembly. Due to the sheer number of strings in the program, this quickly rendered the disassembly very readable, and it was easy to discern where the functional blocks were (full disassembly &lt;a href=&quot;https://gist.github.com/nneonneo/fd9465283b7ad698d500bc019a374ec6&quot;&gt;here&lt;/a&gt;):&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;
&lt;code&gt;0: call 38v
4: call 7i
8: call k
c: call a7
g: q vgf

k: call 3gj
o: print 83k # 'SELECT AN OPTION\x0e:\r\n\r\n\x0f\x00'
15: call 1v
19: call 4k
1d: call 6n
1h: print 4ss # '\r\nYOUR CHOICE\x0e: \x0f\x00'
1u: ret

1v: unk 9
20: unk c
21: unk 1
22: unk 1
23: q 0da
27: print 6ds # '\x0e- \x0fGO \x0e(\x0fS\x0e)\x0fOUTH\r\n\x00'
2k: unk 9
2l: unk c
2m: unk 2
2n: unk 1
2o: q 0da
2s: print 6f5 # '\x0e- \x0fGO \x0e(\x0fN\x0e)\x0fORTH\r\n\x00'
39: unk 9
3a: unk c
3b: unk 4
3c: unk 1
3d: q 0da
3h: print 6d8 # '\x0e- \x0fGO \x0e(\x0fE\x0e)\x0fAST\r\n\x00'
3u: unk 9
3v: unk c
40: unk 8
41: unk 1
42: q 0da
46: print 6eh # '\x0e- \x0fGO \x0e(\x0fW\x0e)\x0fEST\r\n\x00'
4j: ret&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Just from this little snippet of code, I was able to guess a few things: the “q0” instruction must represent some kind of conditional branch (because it’s used to skip printing invalid directions in the 1v function), and the instructions “9c11”, “9c21”, “9c41”, “9c81” should represent some kind of AND instruction – checking bits set to see if those directions are allowed (the use of “1”, “2”, “4” and “8” in these instructions is quite telling).&lt;/p&gt;
&lt;p&gt;For the next two hours, me and Zachary Wade (@zwad3) worked through the various instructions, making and refining our guesses as to what the instructions did. The presence of many readable print statements made our job a lot easier. We decided to each write our own disassembler so we could explore instructions at our own pace and just share our findings back and forth.&lt;/p&gt;
&lt;h3&gt;Reversing the Code&lt;/h3&gt;
&lt;p&gt;After a few hours, we were starting to make great progress on disassembly. By looking at the code that worked with the user’s inventory (specifically, the “drink” function and every handler associated with it), we found memory store and load instructions (recall that there is 1 KiB of data memory attached to the CPU). We then worked out that certain arithmetic/logic (ALU) instructions took memory operands (e.g. “9c41” actually meant “AND the value at data address 1 with the immediate 4”). From there, we could reconstruct the variables that lived in data memory – for example, [0] held the ID of the NPC at your current location, and [6,7] contained your current health (low 5 bits in [6], high 5 bits in [7]). At this point, I broke away from reversing instructions to start annotating my disassembly and reverse engineering the program itself. You can see my funny notation for 5-bit values (“0y…”, a play on “0x”) below:&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;
&lt;code&gt;_start:
    call init

L4:
    call check_moves
    call print_menu
    call handle_command
    br 4

print_menu:
    call print_itemname
    print 83k # 'SELECT AN OPTION\x0e:\r\n\r\n\x0f\x00'
    call print_moves
    call print_npcmenu
    call print_itemmenu
    print 4ss # '\r\nYOUR CHOICE\x0e: \x0f\x00'
    ret

print_moves:
    and 0y1, [1]
    brz 2k
    print 6ds # '\x0e- \x0fGO \x0e(\x0fS\x0e)\x0fOUTH\r\n\x00'
2k: and 0y2, [1]
    brz 39
    print 6f5 # '\x0e- \x0fGO \x0e(\x0fN\x0e)\x0fORTH\r\n\x00'
39: and 0y4, [1]
    brz 3u
    print 6d8 # '\x0e- \x0fGO \x0e(\x0fE\x0e)\x0fAST\r\n\x00'
3u: and 0y8, [1]
    brz 4j
    print 6eh # '\x0e- \x0fGO \x0e(\x0fW\x0e)\x0fEST\r\n\x00'
4j: ret

print_npcmenu:
    add 0y0, [0]
    brz 6m
    sub 0y2, [0]
    br&amp;lt;c&amp;gt; 5p
    print 7o1 # '\x0e- (\x0fT\x0e)\x0fALK TO \x00'
    call print_npcname
    call print_crlf
5p: sub 0y1, [0]
    brz 6m
    print 7n2 # '\x0e- (\x0fF\x0e)\x0fIGHT \x00'
    call print_npcname
    call print_crlf
6m: ret

print_itemmenu:
    print 7nh # '\x0e- (\x0fD\x0e)\x0fRINK\r\n\x00'
    print 765 # '\x0e- \x0fSHOW \x0e(\x0fI\x0e)\x0fNVENTORY\r\n\x00'
    ret&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;There were still lots of unknown opcodes – for example, while we figured out that “qa” was a conditional branch-on-zero (brz), we did not figure out what “qc” was (represented as br&amp;lt;c&amp;gt; above). But, it was enough to start figuring out the program logic.&lt;/p&gt;
&lt;p&gt;The game lets you basically walk around an 8×8 map, in which NPCs (dragons, “red bulls” and people) are randomly placed. You can fight any NPC (even Valis, despite the lack of a menu option to do so). During a fight, you can attack your opponent, dealing random amounts of damage or missing, and your opponent then attacks you, again dealing random damage or missing. Alternatively, you can choose to shield, which causes the opponent’s attack to either miss or hit your shield and do no damage. Finally, you can cheat, which sets your health to 1000, but also sets a hidden variable (“cheated”, address 10) to 1. If you successfully kill your opponent, they drop an item – usually, a bottle of alcohol of some kind (clearly, not a kid-friendly game).&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;
&lt;code&gt;YOUR CHOICE: W

THERE IS A YELLOW DRAGON HERE.  SHE APPEARS TO BE GUARDING SOME KIND OF A BOTTLE.

SELECT AN OPTION:

- GO (S)OUTH
- GO (N)ORTH
- GO (E)AST
- GO (W)EST
- (F)IGHT THE YELLOW DRAGON
- (D)RINK
- SHOW (I)NVENTORY

YOUR CHOICE: F

YOU ATTACK THE YELLOW DRAGON.

- (A)TTACK
- USE (S)HIELD
- (C)HEAT

YOUR CHOICE: A

YOU HIT THE YELLOW DRAGON.
ENEMY HEALTH: 94%
THE YELLOW DRAGON HITS YOU.
CURRENT HEALTH: 88%

- (A)TTACK
- USE (S)HIELD
- (C)HEAT

YOUR CHOICE: C

CURRENT HEALTH: 1000%.

- (A)TTACK
- USE (S)HIELD
- (C)HEAT

YOUR CHOICE: A

YOU HIT THE YELLOW DRAGON.
ENEMY HEALTH: 88%
THE YELLOW DRAGON ATTACKS YOU, BUT MISSES.

- (A)TTACK
- USE (S)HIELD
- (C)HEAT

YOUR CHOICE: S

THE YELLOW DRAGON ATTACKS YOU, BUT BOUNCES OFF YOUR SHIELD.

- (A)TTACK
- USE (S)HIELD
- (C)HEAT

YOUR CHOICE: S

THE YELLOW DRAGON ATTACKS YOU, BUT MISSES.
[...]
YOUR CHOICE: A

YOU HIT THE YELLOW DRAGON.
ENEMY HEALTH: 10%
THE YELLOW DRAGON ATTACKS YOU, BUT MISSES.

- (A)TTACK
- USE (S)HIELD
- (C)HEAT

YOUR CHOICE: A

YOU KILL THE YELLOW DRAGON.
YOU ACQUIRE AN ITEM: BOTTLE OF RUM.

THERE IS NOTHING INTERESTING HERE.

SELECT AN OPTION:

- GO (S)OUTH
- GO (N)ORTH
- GO (E)AST
- GO (W)EST
- (D)RINK
- SHOW (I)NVENTORY

YOUR CHOICE: D

CHOOSE AN ITEM TO DRINK:

- BOTTLE OF R(U)M

YOUR CHOICE: U

YOU DRINK A BOTTLE OF RUM.
YOU GET DRUNK.&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Valis, the main NPC who you have to get a flag from, has a state machine in which he asks you for several items – a bunch of red bull drinks (obtained by defeating red bull enemies, obviously), various mixed drinks (e.g. a gin and tonic, obtained by defeating a blue dragon and a gray dragon and mixing their drops), and a power strip, obtained by either defeating or helping the other human NPC in the game (Redford). If you finish his long series of requests, he gives you a flag – but &lt;em&gt;only&lt;/em&gt; if the “cheated” variable isn’t set. So, our goal is to beat the game without cheating. Since you start with only 100 HP, the same as every enemy, if you play normally it will be impossible to beat every single enemy (you have to beat about 20 to get all items needed). You need to somehow rig the RNG so your opponent always misses.&lt;/p&gt;
&lt;p&gt;Random number generation is provided by a function which appears to be some kind of PRNG (address 37a), but it uses unique instructions that aren’t used anywhere else, so we could not reverse it. However, we noted that it loads its state vector from three memory locations [11], [12] and [13], meaning that its full state is only 15 bits in size. This means that the RNG must have a short period – no more than 2^15 = 32768 in length.&lt;/p&gt;
&lt;p&gt;Jay Bosamiya (@jay_f0xtr0t) and Matthew Savage (@thebluepichu) implemented the exploit while I was still attempting (futilely) to reverse the RNG implementation. By simply sending the command “shield” 100,000 times in a row, we were able to get a sequence of enemy “hits” and “misses” which corresponded to the bits output by the RNG. We confirmed that this sequence repeated with a period of 32767. Thus, we were able to build our master exploit – at the first enemy we encountered, we shielded 40 times to recover a sequence of hits and misses, searched for the sequence in the big periodic sequence, and then figured out when to shield and when to attack such that the enemy always missed. We simply then walked around the map in &lt;a href=&quot;https://en.wiktionary.org/wiki/murderhobo&quot;&gt;murderhobo&lt;/a&gt; mode, killing everything and taking their loot. Finally, we returned to Valis and asked nicely for the flag, which we received:&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;
&lt;code&gt;DrgnS{m4kin9-v4lis-happy-w1th-n4t1ve-b4ud0t-cpu}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Whew! What an adventure, indeed. I still can’t quite believe that we went from a binary string and zero documentation on the CPU to two nearly-complete disassemblers and nice, clean disassembly code in less than 10 hours! See GitHub for all the code: &lt;a href=&quot;https://gist.github.com/nneonneo/8546fb794ac0b65b5a2c3daa9ad0e079#file-03_disas-py&quot;&gt;my disassembler&lt;/a&gt;, &lt;a href=&quot;https://gist.github.com/zwade/d63141544243eab5372a2d8c3023bd54&quot;&gt;Zach’s disassembler&lt;/a&gt;, &lt;a href=&quot;https://gist.github.com/nneonneo/8546fb794ac0b65b5a2c3daa9ad0e079#file-04_disas-txt&quot;&gt;my raw disassembly&lt;/a&gt;, &lt;a href=&quot;https://gist.github.com/nneonneo/8546fb794ac0b65b5a2c3daa9ad0e079#file-05_disas-annotated-txt&quot;&gt;my annotated disassembly&lt;/a&gt;, &lt;a href=&quot;https://gist.github.com/bluepichu/d18065b547eeb106bbefc95b3df0a6b3&quot;&gt;Matt’s exploit client&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;sharedaddy sd-sharing-enabled&quot;&gt;
&lt;div class=&quot;robots-nocontent sd-block sd-social sd-social-icon sd-sharing&quot;&gt;
&lt;h3 class=&quot;sd-title&quot;&gt;Share this:&lt;/h3&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
&lt;h3 class=&quot;jp-relatedposts-headline&quot;&gt;&lt;em&gt;Related&lt;/em&gt;&lt;/h3&gt;
&lt;/p&gt;
</description>
<pubDate>Wed, 25 Sep 2019 00:01:44 +0000</pubDate>
<dc:creator>nneonneo</dc:creator>
<og:type>article</og:type>
<og:title>[DSCTF 2019] CPU Adventure – Unknown CPU Reversing</og:title>
<og:url>https://www.robertxiao.ca/hacking/dsctf-2019-cpu-adventure-unknown-cpu-reversing/</og:url>
<og:description>or: reverse-engineering a custom, unknown CPU from a single programtl;dr: We reverse-engineered a program written for a completely custom, unknown CPU architecture, without any documentation for th…</og:description>
<og:image>https://www.robertxiao.ca/wp-content/uploads/dsctf2019_2.png</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.robertxiao.ca/hacking/dsctf-2019-cpu-adventure-unknown-cpu-reversing/</dc:identifier>
</item>
</channel>
</rss>