<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Event Sourcing is Hard</title>
<link>https://chriskiehl.com/article/event-sourcing-is-hard</link>
<guid isPermaLink="true" >https://chriskiehl.com/article/event-sourcing-is-hard</guid>
<description>&lt;p&gt;&lt;img alt=&quot;image&quot; src=&quot;https://s3.amazonaws.com/awsblogstore/articles/6b9e4765/0cff85a4-event-sourcing-title-image-1920px.jpeg&quot; srcset=&quot;https://s3.amazonaws.com/awsblogstore/articles/6b9e4765/0cff85a4-event-sourcing-title-image-1920px.jpeg 1920w, https://s3.amazonaws.com/awsblogstore/articles/6b9e4765/0cff85a4-event-sourcing-title-image-1600px.jpeg 1600w, https://s3.amazonaws.com/awsblogstore/articles/6b9e4765/0cff85a4-event-sourcing-title-image-1280px.jpeg 1280w, https://s3.amazonaws.com/awsblogstore/articles/6b9e4765/0cff85a4-event-sourcing-title-image-960px.jpeg 960w, https://s3.amazonaws.com/awsblogstore/articles/6b9e4765/0cff85a4-event-sourcing-title-image-640px.jpeg 640w, https://s3.amazonaws.com/awsblogstore/articles/6b9e4765/0cff85a4-event-sourcing-title-image-320px.jpeg 320w&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;sup&gt;published 2019-02-03&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;I'm going to give it to you straight: event sourcing actually comes with drawbacks. If you've read anything about the topic on the internet this will surely shock you. After all, it's commonly sold as one big fat bag of sunshine and rainbows. You got some kind of a problem? Turns out its actually solved by event sourcing. In fact, most of your life troubles up till now were probably directly caused by your &lt;em&gt;lack&lt;/em&gt; of event sourcing.&lt;/p&gt;
&lt;p&gt;You, having been seduced by the internet, are probably off to start your event sourcing journey and begin living the good life. Well, before you do that, I'm here to ruin it for you and tell you that event sourcing is not actually a bag filled with pure joy, but instead a bag filled with mines designed to blow your legs off and leave you to a crippled life filled with pain.&lt;/p&gt;
&lt;p&gt;Why would I say such things? Because I'm a guy who previously drank the juice, had the power to make design calls, and took a team down the path of building an event sourced system from scratch. After an aggressive year of deploying a complex application, I've collected a lot of scars, bruises, and lessons learned. Below are my opinions, unexpected hurdles, bad assumptions, bad understandings, after growing an Event Sourced application.&lt;/p&gt;
&lt;h3&gt;Preface&lt;/h3&gt;
&lt;p&gt;To be clear, this is not a &quot;you should never event source&quot;, or an &quot;event sourcing is the worst thing ever&quot;, this is just a collection of the unexpected costs and problems that popped up while putting an event sourcing powered system into production. The bulk of these probably fall under &quot;he obviously didn't understand X,&quot; or &quot;you should &lt;em&gt;never&lt;/em&gt; do Y!&quot; in which case you would be absolutely right. The point of this is that I didn't understand the drawbacks or pain points until I'd gotten past the &quot;toy&quot; stage.&lt;/p&gt;
&lt;p&gt;Without further ado...&lt;/p&gt;
&lt;h3&gt;The core selling point of Event Sourcing is largely an anti-pattern&lt;/h3&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;In my humble, opinion, of course&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The big Event Sourcing &quot;sell&quot; is the idea that any interested sub-systems can just subscribe to an event stream and happily listen away and do its work. Y'know, &lt;em&gt;this&lt;/em&gt; picture, that you'll find in pretty much any Event Sourcing Intro:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;The typical event sourcing example picture&quot; src=&quot;https://s3.amazonaws.com/awsblogstore/articles/6b9e4765/cd052e2f-image-803px.jpeg&quot; srcset=&quot;https://s3.amazonaws.com/awsblogstore/articles/6b9e4765/cd052e2f-image-803px.jpeg 803w, https://s3.amazonaws.com/awsblogstore/articles/6b9e4765/cd052e2f-image-669px.jpeg 669w, https://s3.amazonaws.com/awsblogstore/articles/6b9e4765/cd052e2f-image-535px.jpeg 535w, https://s3.amazonaws.com/awsblogstore/articles/6b9e4765/cd052e2f-image-401px.jpeg 401w, https://s3.amazonaws.com/awsblogstore/articles/6b9e4765/cd052e2f-image-267px.jpeg 267w, https://s3.amazonaws.com/awsblogstore/articles/6b9e4765/cd052e2f-image-133px.jpeg 133w&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;1.4864864864865&quot;&gt;
&lt;p&gt;Image via: &lt;a href=&quot;https://www.amazon.com/Microservices-Clojure-event-driven-microservices-monitoring-ebook/dp/B076VKG1Y1/ref=sr_1_fkmr0_1?ie=UTF8&amp;amp;qid=1547352676&amp;amp;sr=8-1-fkmr0&amp;amp;keywords=microservices+in+clojure&quot;&gt;Microservices with Clojure&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In practice, this manages to somehow simultaneously be both extremely coupled and yet excruciatingly opaque. The idea of a keeping a central log against which multiple services can subscribe and publish is insane. You wouldn't let two separate services reach directly into each other's data storage when &lt;em&gt;not&lt;/em&gt; event sourcing – you'd pump them through a layer of abstraction to avoid breaking every consumer of your service when it needs to change its data – However, with the event log, we pretend this isn't the case. &quot;Reach right on in there and grab those raw data events&quot;, we say. They're immutable &quot;facts&quot; after all. And Immutable things don't change, right? (&lt;em&gt;*cough* no *cough*&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;In effect, the raw event stream subscription setup kills the ability to locally reason about the boundaries of a service. Under &quot;normal&quot; development flows, you operate within the safe, cozy little walls which make up your service. You're free to make choices about implementation and storage and then, when you're ready, deal with how those things get exposed to the outside world. It's one of the core benefits of &quot;services&quot;. However, when people are reaching into your data store and reading your events directly, that 'black box' property goes out the window. Coordination can't be bolted on later, you have to talk to the people who will be consuming the events you produce to ensure that the events include enough data for the consuming system to make a decision.&lt;/p&gt;
&lt;p&gt;If you fight through the above obstacle and mange to successfully wire a fleet of services together via an event stream, you'll be rewarded with a new problem: opacity. With multiple systems just reading an event stream sans any coordination layer, &lt;em&gt;how&lt;/em&gt; these system actually work and connect together will eventually be completely baffling. You've basically got &lt;a href=&quot;https://infoscience.epfl.ch/record/176887/files/DeprecatingObservers2012.pdf&quot;&gt;all the problems that come with Observer heavy code&lt;/a&gt;, but now on the system level. Control becomes inverted in a way that makes it difficult to reason about how data actually flows through the systems, or which systems consume / produce events, or care if they're added / removed / modified, etc.. etc..&lt;/p&gt;
&lt;p&gt;Now, to be fair, &lt;a href=&quot;https://youtu.be/LDW0QWie21s?t=2391&quot;&gt;Eric Evans has a talk&lt;/a&gt; where he mentions these problems and advocates for solving them via Process Managers or simple Actor based setups i.e. introducing something which can serve as central coordination point which can route events. However, I didn't see that talk until much later. I went in thinking that ledgers would rule the world, and had to slowly discover the need for this meta management layer by painfully bumping into all the bits that &lt;em&gt;don't&lt;/em&gt; work with the Event Sourcing setup &lt;em&gt;as commonly sold&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;The upstart costs are large&lt;/h3&gt;
&lt;p&gt;Event Sourcing is not a &quot;&lt;em&gt;Move Fast and Break Things&lt;/em&gt;&quot; kind of setup when you're a green field application. It's a more of a &quot;&lt;em&gt;Let's all Move Slow and Try Not to Die&lt;/em&gt;&quot; sort of setup. For one, you're &lt;em&gt;probably&lt;/em&gt; going to be building the core components from scratch. Frameworks in this area tend to be heavy weight, overly prescriptive, and inflexible in terms of tech stacks. If you want to get something up in running in your corporate environment with the tech available to you &lt;em&gt;today&lt;/em&gt;, rolling your own is the way to go (&lt;a href=&quot;https://youtu.be/LDW0QWie21s?t=1926&quot;&gt;and a suggested approach!&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;While this path is honestly a &lt;em&gt;ton&lt;/em&gt; of fun, it's also super time consuming. It will all be time which is not being spent making actual forward progress on your application. Entire sprints will be lost to planning out how you deploy things on the infrastructure available, how to ensure streams behave, messages get processed, how failures will be retried, and &lt;em&gt;then&lt;/em&gt; you've got to actually go about implementing it, learning what sucks about your choices, implementing it again with your newly gained knowledge, until you end up with a solid enough foundation upon which you can actually begin to build the application in question.&lt;/p&gt;
&lt;p&gt;And once you're into the implementation stage, you'll realize something else: the shear volume of plumbing code involved is staggering. Instead of your friendly N-tier setup, you've now got classes for commands, command handlers, command validators, events, aggregates, &lt;em&gt;AND THEN&lt;/em&gt; your projections, those model classes, their access classes, custom materialization code, and so on. Getting from zero to working baseline requires significant scaffolding. Now, admittedly, how much this hurts is somewhat language dependent, but if you're is an already verbose language like Java (like I was), your fingers will be tired at the end of each day.&lt;/p&gt;
&lt;p&gt;As a final point on the Getting Started side of things, there's a certain human / political cost involved. Getting an entire development team onboard philosophically is non-trivial. There will be those excited by the idea who read up on it outside work and are down for riding out the growing pains involved in trying alternative development methodologies, and then there will be those who aren't into it &lt;em&gt;at all&lt;/em&gt;. However, regardless of which &quot;camp&quot; a person is in, disagreements will still mount as everyone tries to figure out how best to build a maintainable a system under a foreign methodology with unclear best practices.&lt;/p&gt;
&lt;p&gt;These team problems can additionally creep outside of your immediate development group. Getting tertiary members like UX involved presents its own challenges. Which leads to the unexpected point of...&lt;/p&gt;
&lt;h3&gt;Event sourcing needs the UI side to play along&lt;/h3&gt;
&lt;p&gt;This one, while obvious in retrospect, caught me by surprise. If you have a UI, it generally needs to play along with the event driven aspect of the back end. Meaning, it should be &lt;a href=&quot;https://www.uxmatters.com/mt/archives/2014/12/task-driven-user-interfaces.php&quot;&gt;task based&lt;/a&gt;. However, the bulk of common UI iterations &lt;em&gt;aren't&lt;/em&gt; designed that way. They're static and form based. Which means you end up with a massive impedance mismatch between the back-end, which wants small semantic events, and the front-end, which is giving you fat blobs of form data.&lt;/p&gt;
&lt;p&gt;A common response to would be the argument that maybe those heavy form driven parts of the application shouldn't be written to a ledger at all – let CRUD be CRUD, and that's an interesting argument, which brings me to..&lt;/p&gt;
&lt;h3&gt;You'll potentially be building two entirely different systems along side each other&lt;/h3&gt;
&lt;p&gt;A super common piece of advice in the ES world is that &lt;a href=&quot;https://www.infoq.com/news/2016/04/event-sourcing-anti-pattern&quot;&gt;you don't event source everywhere&lt;/a&gt; &lt;small&gt;[0]&lt;/small&gt;. This is all well and good at the conceptual level, but actually figuring out where and when to draw those architectural boundaries through your system is quite tough in practice.&lt;/p&gt;
&lt;p&gt;The core reason is that the requirements that likely led you to Event Sourcing in the first place generally don't go away just because some parts of your application are more &quot;CRUD-y&quot;. If you still need to audit your data, do you build out a totally different audit strategy for those non-event driven parts, or just reuse the ledger setups you've already deployed and tested? What about communication with other systems? Do you build out new communication channels, or reuse the streaming architecture already in place?&lt;/p&gt;
&lt;p&gt;There's no clear answer because no path is ideal. Each one comes with its own pain points and draw backs.&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;small&gt;[0] ...although this flies in the face of &lt;em&gt;other&lt;/em&gt; advice like [&quot;only CRUD when you can afford it&quot;](https://webcache.googleusercontent.com/search?q=cache:7LlBzKXMJhUJ:https://blog.csdn.net/waterboy/article/details/143597+&amp;amp;cd=4&amp;amp;hl=en&amp;amp;ct=clnk&amp;amp;gl=us))&lt;/small&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Past system states from the audit Log will often have fidelity problems&lt;/h3&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;Unless you're willing to go into crazy person territory.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Software changes, requirements change, focuses shift. Those immutable &quot;facts,&quot; along with your ability to process them, won't last as long as you expect.&lt;/p&gt;
&lt;p&gt;We made it about a month before a shift in focus caused us to hit our first &quot;oh, so these events are no longer relevant, &lt;em&gt;at all&lt;/em&gt;?&quot; situation. Once you hit this point, you've got a decision to make: what to do with the irrelevant / wrong / outdated events.&lt;/p&gt;
&lt;p&gt;Do you keep the now deprecated events in the ledger, but &quot;cast&quot; them up to new events (or &lt;code&gt;no-op&lt;/code&gt;s) during materialization, or do you rewrite the ledger itself to remove/cast the old events? The best practices in this area are often debated.&lt;/p&gt;
&lt;p&gt;Regardless of which path you take, as soon as you take it, you've lost the ability to accurately produce the state of your system &lt;em&gt;at the point in time of the rewrite&lt;/em&gt;. (unless you have the deep character flaws required to do something &lt;a href=&quot;https://martinfowler.com/eaaDev/TemporalProperty.html&quot;&gt;completely psychotic&lt;/a&gt;, of course).&lt;/p&gt;
&lt;p&gt;So, the often sold idea of a &lt;a href=&quot;http://eventuate.io/whyeventsourcing.html&quot;&gt;&quot;100% accurate audit log&quot;&lt;/a&gt; and &lt;a href=&quot;http://eventuate.io/whyeventsourcing.html&quot;&gt;&quot;easy temporal queries!&quot;&lt;/a&gt; ends up suffering from a case of &quot;nope&quot; once you get past the conceptual / toy stage and bump into the real world. If you've sold your magical log idea to stake holders, this fidelity loss over time could pose issues depending on your domain.&lt;/p&gt;
&lt;h3&gt;The audit log is often &lt;em&gt;too&lt;/em&gt; chatty for direct use&lt;/h3&gt;
&lt;p&gt;This one is obviously &lt;em&gt;very&lt;/em&gt; business / use case dependent, but having a full low-level audit log of every action in the application was often more of a hindrance than a help. Meaning, most of it ends up being pure noise that actually needs filtered out, both by end users, and by consuming sub-systems. All of those transient &quot;Bob renamed field x to y&quot; are seldom of interest. If you're showing the audit log to an end user, more often than not, discrete logical states are of far more value than transient intermediates. So, the &quot;free audit log&quot; actually turns into &quot;tedious projection writing.&quot; For downstream systems, this chattiness causes similar coordination woes. &quot;When should I actually run?&quot; and &quot;should I care about event X?&quot; was a common question during design meetings. It's all in the class of problems that require either Process Managers or the introduction of queues to solve.&lt;/p&gt;
&lt;h3&gt;The audit log as a debugging tool considered: over hyped&lt;/h3&gt;
&lt;p&gt;Minor, but worth pointing out: another touted benefit to being ledger based is that it helps with debugging. &quot;If you find a bug in your application, you can replay the log to see how you got into that state!&quot; I'm yet to see this play out. 99% of the time &quot;bad states&quot; were &lt;em&gt;bad events&lt;/em&gt; caused by your standard run-of-the-mill human error. No different than any other &quot;how did that get in the database?&quot; style problem. Having a ledger provided little value over your normal debugging intuition when using a standard db set. Meaning, if an &lt;code&gt;age&lt;/code&gt; field was corrupt, you'd probably know which code to start investigating.&lt;/p&gt;
&lt;h3&gt;Projections are not actually free&lt;/h3&gt;
&lt;p&gt;&quot;You're no longer bound to a single table structure&quot;, says Event Sourcing. If you need a different view of your data, just materialize the event log in a new way. &quot;It's so easy!&quot;&lt;/p&gt;
&lt;p&gt;In practice, this is expensive both in terms of initial development cost and ongoing maintenance. That first extra projection you add doubles the amount of code that touches your event stream. And odds are, you'll be writing more than one projection. So now you have N things processing this event stream instead of 1 thing. There's no more &lt;a href=&quot;https://en.wikipedia.org/wiki/Don%27t_repeat_yourself&quot;&gt;DRY&lt;/a&gt; from this point forward. If you add, modify, or remove an event type, you're on the hook for spreading knowledge of that change to N different places.&lt;/p&gt;
&lt;h3&gt;You'll deal with materialization lag:&lt;/h3&gt;
&lt;p&gt;Once your data grows to the point where you can no longer materialize from the ledger in a reasonable amount of time, you'll be forced to offload the reads to your materialized projections. And with this step comes materialization lag and the loss of read-after-write consistency.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;image&quot; src=&quot;https://s3.amazonaws.com/awsblogstore/articles/6b9e4765/1013ed4b-read-your-writes-1920px.jpeg&quot; srcset=&quot;https://s3.amazonaws.com/awsblogstore/articles/6b9e4765/1013ed4b-read-your-writes-1920px.jpeg 1920w, https://s3.amazonaws.com/awsblogstore/articles/6b9e4765/1013ed4b-read-your-writes-1600px.jpeg 1600w, https://s3.amazonaws.com/awsblogstore/articles/6b9e4765/1013ed4b-read-your-writes-1280px.jpeg 1280w, https://s3.amazonaws.com/awsblogstore/articles/6b9e4765/1013ed4b-read-your-writes-960px.jpeg 960w, https://s3.amazonaws.com/awsblogstore/articles/6b9e4765/1013ed4b-read-your-writes-640px.jpeg 640w, https://s3.amazonaws.com/awsblogstore/articles/6b9e4765/1013ed4b-read-your-writes-320px.jpeg 320w&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Information is now either outdated, missing, or just wrong. Newly created data will 404, deleted items will awkwardly stick around, duplicate items will be returned, you get the gist. Basically all the joys of the &lt;em&gt;eventual&lt;/em&gt; part of consistency.&lt;/p&gt;
&lt;p&gt;Individually, they're not a huge deal, but these are still things you have to spend time solving. Do you bake in a fall-back strategy for reads? Do you spend time adding smarts to the materialization itself in order to make it faster? Do you write logic to allow the caller to request the type of read they want (i.e. ledger, at the cost of latency, or projected, at the cost of consistency)?&lt;/p&gt;
&lt;p&gt;There are a ton of ways to solve it. But &lt;em&gt;you&lt;/em&gt; having to solve it is the key thing I'm getting at here. This is time that needs to be accounted for, planned, implemented, and deployed (all at the expense the thing you're &lt;em&gt;supposed&lt;/em&gt; to be solving!).&lt;/p&gt;
&lt;h3&gt;Finally: You won't really know the pain points until you're past the toy level.&lt;/h3&gt;
&lt;p&gt;This is just the reality of maintaining any long-lived software. Regardless of how much you try to prepare, how much background reading you do, or how many prototypes you build, you're doing something totally &lt;em&gt;new&lt;/em&gt;. The problems that cause the most pain won't manifest themselves in small test programs. It's only once you have a living, breathing machine, users which depend on you, consumers which you can't break, and all the other real-world complexities that plague software projects that the hard problems in event sourcing will rear their heads. And once you hit them, you're on your own. &lt;/p&gt;
&lt;h3&gt;So what now?&lt;/h3&gt;
&lt;p&gt;Event Sourcing isn't &lt;em&gt;all&lt;/em&gt; bad, my complaint with it is just that it is wildly over sold as a cure all and rarely are any negative side-effects talked about. I still really like the &lt;em&gt;ideas&lt;/em&gt; from event sourcing, it's just that putting it into practice caused more pain than I would have otherwise liked.  &lt;/p&gt;
&lt;h3&gt;What's the take away here? Should I event source or not!?&lt;/h3&gt;
&lt;p&gt;I think you can generally answer it with some alone time, deep introspection, and two questions:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;For which &lt;em&gt;core problem&lt;/em&gt; is event sourcing the solution? &lt;/li&gt;
&lt;li&gt;Is what you actually want just a plain old queue? &lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;If you can't answer the first question concretely, or the justification involves vague hand-wavy ideas like &quot;auditablity&quot;, &quot;flexibility,&quot; or something about &quot;read separation&quot;: &lt;strong&gt;Don't&lt;/strong&gt;. Those are not problems exclusively solved by event sourcing. A good ol' fashion history table gets you 80% of the value of a ledger with essentially none of the cost. It won't have first class change semantics baked in, but those low-level details are mostly worthless anyway and can ultimately be derived at a later date if so required. Similarly CQRS doesn't require event sourcing. You can have all the power of different projections &lt;em&gt;without&lt;/em&gt; putting the ledger at the heart of your system.&lt;/p&gt;
&lt;p&gt;The latter question is to weed out confused people like myself who thought the Ledgers would rule the world. Look at the interaction points of your systems. If you're going full event sourcing, what events are actually going to be produced? Do those downstream systems care about those intermediate states, or will it just be noise that needs to be filtered out? If the end goal is just decoupled processes which communicate via &lt;em&gt;something&lt;/em&gt;, event sourcing is not required. Put a queue between those two bad boys and start enjoying the good life.&lt;/p&gt;
</description>
<pubDate>Sun, 03 Feb 2019 23:15:15 +0000</pubDate>
<dc:creator>goostavos</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://chriskiehl.com/article/event-sourcing-is-hard</dc:identifier>
</item>
<item>
<title>Debugging Emacs, or How I Learned to Stop Worrying and Love DTrace (2018)</title>
<link>https://nullprogram.com/blog/2018/01/17/</link>
<guid isPermaLink="true" >https://nullprogram.com/blog/2018/01/17/</guid>
<description>&lt;time datetime=&quot;2018-01-17&quot;&gt;January 17, 2018&lt;/time&gt;&lt;p&gt;nullprogram.com/blog/2018/01/17/&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Update: This article was featured on &lt;a href=&quot;https://www.youtube.com/watch?v=Xi_pX2QIzho&quot;&gt;BSD Now 233&lt;/a&gt; (starting at 21:38).&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For some time &lt;a href=&quot;https://github.com/skeeto/elfeed&quot;&gt;Elfeed&lt;/a&gt; was experiencing a strange, spurious failure. Every so often users were &lt;a href=&quot;https://github.com/skeeto/elfeed/issues/248&quot;&gt;seeing an error&lt;/a&gt; (spoiler warning) when updating feeds: “error in process sentinel: Search failed.” If you use Elfeed, you might have even seen this yourself. From the surface it appeared that curl, tasked with the &lt;a href=&quot;https://nullprogram.com/blog/2016/06/16/&quot;&gt;responsibility for downloading feed data&lt;/a&gt;, was producing incomplete output despite reporting a successful run. Since the run was successful, Elfeed assumed certain data was in curl’s output buffer, but, since it wasn’t, it failed hard.&lt;/p&gt;
&lt;p&gt;Unfortunately this issue was not reproducible. Manually running curl outside of Emacs never revealed any issues. Asking Elfeed to retry fetching the feeds would work fine. The issue would only randomly rear its head when Elfeed was fetching many feeds in parallel, under stress. By the time the error was discovered, the curl process had exited and vital debugging information was lost. Considering that this was likely to be a bug in Emacs itself, there really wasn’t a reliable way to capture the necessary debugging information from within Emacs Lisp. And, indeed, this later proved to be the case.&lt;/p&gt;
&lt;p&gt;A quick-and-dirty work around is to use &lt;code class=&quot;highlighter-rouge&quot;&gt;condition-case&lt;/code&gt; to catch and swallow the error. When the bizarre issue shows up, rather than fail badly in front of the user, Elfeed could attempt to swallow the error — assuming it can be reliably detected — and treat the fetch as simply a failure. That didn’t sit comfortably with me. Elfeed had done its due diligence checking for errors already. &lt;em&gt;Someone&lt;/em&gt; was lying to Elfeed, and I intended to catch them with their pants on fire. Someday.&lt;/p&gt;
&lt;p&gt;I’d just need to witness the bug on one of my own machines. Elfeed is part of my daily routine, so surely I’d have to experience this issue myself someday. My plan was, should that day come, to run a modified Elfeed, instrumented to capture extra data. I would have also routinely run Emacs under GDB so that I could inspect the failure more deeply.&lt;/p&gt;
&lt;p&gt;For now I just had to wait to &lt;a href=&quot;https://www.youtube.com/watch?v=fE2KDzZaxvE&quot;&gt;hunt that zebra&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;bryan-cantrill-dtrace-and-freebsd&quot;&gt;Bryan Cantrill, DTrace, and FreeBSD&lt;/h3&gt;
&lt;p&gt;Over the holidays I re-discovered &lt;a href=&quot;https://en.wikipedia.org/wiki/Bryan_Cantrill&quot;&gt;Bryan Cantrill&lt;/a&gt;, a systems software engineer who worked for Sun between 1996 and 2010, and is most well known for &lt;a href=&quot;http://dtrace.org/blogs/about/&quot;&gt;DTrace&lt;/a&gt;. My first exposure to him was in a &lt;a href=&quot;https://www.youtube.com/watch?v=l6XQUciI-Sc&quot;&gt;BSD Now interview&lt;/a&gt; in 2015. I had re-watched that interview and decided there was a lot more I had to learn from him. He’s become a personal hero to me. So I scoured the internet for &lt;a href=&quot;http://dtrace.org/blogs/bmc/2018/02/03/talks/&quot;&gt;more of his writing and talks&lt;/a&gt;. Besides what I’ve already linked in this article, here are a couple more great presentations:&lt;/p&gt;
&lt;p&gt;You can also find some of his writing &lt;a href=&quot;http://dtrace.org/blogs/bmc/&quot;&gt;scattered around the DTrace blog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Some interesting operating system technology came out of Sun during its final 15 or so years — most notably DTrace and ZFS — and Bryan speaks about it passionately. Almost as a matter of luck, most of it survived the Oracle acquisition thanks to Sun releasing it as open source in just the nick of time. Otherwise it would have been lost forever. The scattered ex-Sun employees, still passionate about their prior work at Sun, along with some of their old customers have since picked up the pieces and kept going as a community under the name &lt;a href=&quot;https://illumos.org/&quot;&gt;illumos&lt;/a&gt;. It’s like an open source flotilla.&lt;/p&gt;
&lt;p&gt;Naturally I wanted to get my hands on this stuff to try it out for myself. Is it really as good as they say? Normally I stick to Linux, but it (generally) doesn’t have these Sun technologies. The main reason is license incompatibility. Sun released its code under the &lt;a href=&quot;https://opensource.org/licenses/CDDL-1.0&quot;&gt;CDDL&lt;/a&gt;, which is incompatible with the GPL. Ubuntu &lt;em&gt;does&lt;/em&gt; &lt;a href=&quot;https://insights.ubuntu.com/2016/02/18/zfs-licensing-and-linux/&quot;&gt;infamously include ZFS&lt;/a&gt;, but other distributions are unwilling to take that risk. Porting DTrace is a serious undertaking since it’s got its fingers throughout the kernel, which also makes the licensing issues even more complicated.&lt;/p&gt;
&lt;p&gt;(&lt;em&gt;Update Feburary 2018&lt;/em&gt;: &lt;a href=&quot;https://gnu.wildebeest.org/blog/mjw/2018/02/14/dtrace-for-linux-oracle-does-the-right-thing/&quot;&gt;DTrace has been released under the GPLv2&lt;/a&gt;, allowing it to be legally integrated with Linux.)&lt;/p&gt;
&lt;p&gt;Linux has a reputation for Not Invented Here (NIH) syndrome, and these licensing issues certainly contribute to that. Rather than adopt ZFS and DTrace, they’ve been reinvented from scratch: btrfs instead of ZFS, and &lt;a href=&quot;http://www.brendangregg.com/blog/2015-07-08/choosing-a-linux-tracer.html&quot;&gt;a slew of partial options&lt;/a&gt; instead of DTrace. Normally I’m most interested in system call tracing, and my go to is &lt;a href=&quot;https://en.wikipedia.org/wiki/Strace&quot;&gt;strace&lt;/a&gt;, though it certainly has its limitations — including this situation of debugging curl under Emacs. Another famous example of NIH is Linux’s &lt;a href=&quot;http://man7.org/linux/man-pages/man7/epoll.7.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;epoll(2)&lt;/code&gt;&lt;/a&gt;, which is a &lt;a href=&quot;https://idea.popcount.org/2017-02-20-epoll-is-fundamentally-broken-12/&quot;&gt;broken&lt;/a&gt; &lt;a href=&quot;https://idea.popcount.org/2017-03-20-epoll-is-fundamentally-broken-22/&quot;&gt;version&lt;/a&gt; of BSD &lt;a href=&quot;https://www.freebsd.org/cgi/man.cgi?query=kqueue&amp;amp;sektion=2&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;kqueue(2)&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So, if I want to try these for myself, I’ll need to install a different operating system. I’ve dabbled with &lt;a href=&quot;https://omnios.omniti.com/&quot;&gt;OmniOS&lt;/a&gt;, an OS built on illumos, in virtual machines, using it as an alien environment to test some of my software (e.g. &lt;a href=&quot;https://nullprogram.com/blog/2017/03/12/&quot;&gt;enchive&lt;/a&gt;). OmniOS has a philosophy called &lt;a href=&quot;https://omnios.omniti.com/wiki.php/KYSTY&quot;&gt;Keep Your Software To Yourself&lt;/a&gt; (KYSTY), which is really just code for “we don’t do packaging.” Honestly, you can’t blame them since &lt;a href=&quot;https://utcc.utoronto.ca/~cks/space/blog/solaris/IllumosSupportLimits&quot;&gt;they’re a tiny community&lt;/a&gt;. The best solution to this is probably &lt;a href=&quot;https://www.pkgsrc.org/&quot;&gt;pkgsrc&lt;/a&gt;, which is essentially a universal packaging system. Otherwise &lt;a href=&quot;https://nullprogram.com/blog/2017/06/19/&quot;&gt;you’re on your own&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There’s also &lt;a href=&quot;https://www.openindiana.org/&quot;&gt;openindiana&lt;/a&gt;, which is a more friendly desktop-oriented illumos distribution. Still, the short of it is that you’re very much on your own when things don’t work. The situation is like running Linux a couple decades ago, when it was still difficult to do.&lt;/p&gt;
&lt;p&gt;If you’re interested in trying DTrace, the easiest option these days is probably &lt;a href=&quot;https://www.freebsd.org/&quot;&gt;FreeBSD&lt;/a&gt;. It’s got a big, active community, thorough documentation, and a huge selection of packages. Its license (the &lt;em&gt;BSD license&lt;/em&gt;, duh) is compatible with the CDDL, so both ZFS and DTrace have been ported to FreeBSD.&lt;/p&gt;
&lt;h3 id=&quot;what-is-dtrace&quot;&gt;What is DTrace?&lt;/h3&gt;
&lt;p&gt;I’ve done all this talking but haven’t yet described what &lt;a href=&quot;https://wiki.freebsd.org/DTrace/Tutorial&quot;&gt;DTrace really is&lt;/a&gt;. I won’t pretend to write my own tutorial, but I’ll provide enough information to follow along. DTrace is a tracing framework for debugging production systems &lt;em&gt;in real time&lt;/em&gt;, both for the kernel and for applications. The “production systems” part means it’s stable and safe — using DTrace won’t put your system at risk of crashing or damaging data. The “real time” part means it has little impact on performance. You can use DTrace on live, active systems with little impact. Both of these core design principles are vital for troubleshooting those really tricky bugs that only show up in production.&lt;/p&gt;
&lt;p&gt;There are DTrace &lt;em&gt;probes&lt;/em&gt; scattered all throughout the system: on system calls, scheduler events, networking events, process events, signals, virtual memory events, etc. Using a specialized language called D (unrelated to the general purpose programming language D), you can dynamically add behavior at these instrumentation points. Generally the behavior is to capture information, but it can also manipulate the event being traced.&lt;/p&gt;
&lt;p&gt;Each probe is fully identified by a 4-tuple delimited by colons: provider, module, function, and probe name. An empty element denotes a sort of wildcard. For example, &lt;code class=&quot;highlighter-rouge&quot;&gt;syscall::open:entry&lt;/code&gt; is a probe at the beginning (i.e. “entry”) of &lt;code class=&quot;highlighter-rouge&quot;&gt;open(2)&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;syscall:::entry&lt;/code&gt; matches all system call entry probes.&lt;/p&gt;
&lt;p&gt;Unlike strace on Linux which monitors a specific process, DTrace applies to the entire system when active. To run curl under strace from Emacs, I’d have to modify Emacs’ behavior to do so. With DTrace I can instrument every curl process without making a single change to Emacs, and with negligible impact to Emacs. That’s a big deal.&lt;/p&gt;
&lt;p&gt;So, when it comes to this Elfeed issue, FreeBSD is much better poised for debugging the problem. All I have to do is catch it in the act. However, it’s been months since that bug report and I’m not really making this connection yet. I’m just hoping I eventually find an interesting problem where I can apply DTrace.&lt;/p&gt;
&lt;h3 id=&quot;freebsd-on-a-raspberry-pi-2&quot;&gt;FreeBSD on a Raspberry Pi 2&lt;/h3&gt;
&lt;p&gt;So I’ve settled in FreeBSD as the playground for these technologies, I just have to decide where. I could always run it in a virtual machine, but it’s always more interesting to try things out on real hardware. &lt;a href=&quot;https://wiki.freebsd.org/FreeBSD/arm/Raspberry%20Pi&quot;&gt;FreeBSD supports the Raspberry Pi 2&lt;/a&gt; as a Tier 2 system, and I had a Raspberry Pi 2 sitting around collecting dust, so I put it to use.&lt;/p&gt;
&lt;p&gt;I wrote the image to an SD card, and for a few days I stretched my legs on this new system. I cloned a couple dozen of my own git repositories, ran the builds and the tests, and just got a feel for things. I tried out the ports system for the first time, mainly to discover that the low-powered Raspberry Pi 2 takes days to build some of the packages I want to try.&lt;/p&gt;
&lt;p&gt;I &lt;a href=&quot;https://nullprogram.com/blog/2017/04/01/&quot;&gt;mostly program in Vim these days&lt;/a&gt;, so it’s some days before I even set up Emacs. Eventually I do build Emacs, clone my configuration, fire it up, and give Elfeed a spin.&lt;/p&gt;
&lt;p&gt;And that’s when the “search failed” bug strikes! Not just once, but dozens of times. Perfect! This low-powered platform is the jackpot for this particular bug, triggering it left and right. Given that I’ve got DTrace at my disposal, it’s &lt;em&gt;the&lt;/em&gt; perfect place to debug this. Something is lying to Elfeed and DTrace will play the judge.&lt;/p&gt;
&lt;p&gt;Before I dive in I see three possibilities:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;curl is reporting success but truncating its output.&lt;/li&gt;
&lt;li&gt;Emacs is quietly truncating curl’s output.&lt;/li&gt;
&lt;li&gt;Emacs is misinterpreting curl’s exit status.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;With Dtrace I can observe what every curl process writes to Emacs, and I can also double check curl’s exit status. I come up with the following (newbie) DTrace script:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;9.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;syscall::write:entry
/execname == &quot;curl&quot;/
{
    printf(&quot;%d WRITE %d \&quot;%s\&quot;\n&quot;,
           pid, arg2, stringof(copyin(arg1, arg2)));
}

syscall::exit:entry
/execname == &quot;curl&quot;/
{
    printf(&quot;%d EXIT  %d\n&quot;, pid, arg0);
}
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;/execname == &quot;curl&quot;/&lt;/code&gt; is a predicate that (obviously) causes the behavior to only fire for curl processes. The first probe has DTrace print a line for every &lt;code class=&quot;highlighter-rouge&quot;&gt;write(2)&lt;/code&gt; from curl. &lt;code class=&quot;highlighter-rouge&quot;&gt;arg0&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;arg1&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;arg2&lt;/code&gt; correspond to the arguments of &lt;code class=&quot;highlighter-rouge&quot;&gt;write(2)&lt;/code&gt;: fd, buf, count. It logs the process ID (pid) of the write, the length of the write, and the actual contents written. Remember that these curl processes are run in parallel by Emacs, so the pid allows me to associate the separate writes and the exit status.&lt;/p&gt;
&lt;p&gt;The second probe prints the pid and the exit status (the first argument to &lt;code class=&quot;highlighter-rouge&quot;&gt;exit(2)&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;I also want to compare this to exactly what is delivered to Elfeed when curl exits, so I modify the &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/elisp/Sentinels.html&quot;&gt;process sentinel&lt;/a&gt; — the callback that handles a subprocess exiting — to call &lt;code class=&quot;highlighter-rouge&quot;&gt;write-file&lt;/code&gt; before any action is taken. I can compare these buffer dumps to the logs produced by DTrace.&lt;/p&gt;
&lt;p&gt;There are two important findings.&lt;/p&gt;
&lt;p&gt;First, when the “search failed” bug occurs, the buffer was completely empty (95% of the time) or truncated at the end of the HTTP headers (5% of the time), right at the blank line. DTrace indicates that curl did its job to the full, so it’s Emacs who’s the liar. It’s not delivering all of curl’s data to Elfeed. That’s pretty annoying.&lt;/p&gt;
&lt;p&gt;Second, &lt;strong&gt;curl was line-buffered&lt;/strong&gt;. Each line was a separate, independent &lt;code class=&quot;highlighter-rouge&quot;&gt;write(2)&lt;/code&gt;. I was certainly &lt;em&gt;not&lt;/em&gt; expecting this. Normally the C library only does line buffering when the output is a terminal. That’s because it’s guessing a user may be watching, expecting the output to arrive a line at a time.&lt;/p&gt;
&lt;p&gt;Here’s a sample of what it looked like in the log:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;88188 WRITE 32 &quot;Server: Apache/2.4.18 (Ubuntu)
&quot;
88188 WRITE 46 &quot;Location: https://blog.plover.com/index.atom
&quot;
88188 WRITE 21 &quot;Content-Length: 299
&quot;
88188 WRITE 45 &quot;Content-Type: text/html; charset=iso-8859-1
&quot;
88188 WRITE 2 &quot;
&quot;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Why would curl think Emacs is a terminal?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Oh.&lt;/em&gt; That’s right. &lt;em&gt;This is the &lt;a href=&quot;https://nullprogram.com/blog/2014/02/06/&quot;&gt;same problem I ran into four years ago when writing EmacSQL&lt;/a&gt;.&lt;/em&gt; By default Emacs connects to subprocesses through a pseudo-terminal (pty). I called this a mistake in Emacs back then, and I still stand by that claim. The pty causes weird, annoying problems for little benefit:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Interpreting control characters. Hope you weren’t transferring binary data!&lt;/li&gt;
&lt;li&gt;Subprocesses will generally get line buffered. This makes them slower, though in some situations it might be desirable.&lt;/li&gt;
&lt;li&gt;Stdout and stderr get mixed together. (Optional since Emacs 25.)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;New!&lt;/em&gt; There’s a bug somewhere in Emacs that causes truncation when ptys are used heavily in parallel.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Just from eyeballing the DTrace log I knew what to do: dump the pty and switch to a pipe. This is controlled with the &lt;code class=&quot;highlighter-rouge&quot;&gt;process-connection-type&lt;/code&gt; variable, and fixing it &lt;a href=&quot;https://github.com/skeeto/elfeed/commit/945765a57d2f27996b6a43bc62e803dc167d1547&quot;&gt;is a one-liner&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Not only did this completely resolve the truncation issue, Elfeed is noticeably faster at fetching feeds on all machines. It’s no longer receiving mountains of XML one line at a time, like sucking pudding through a straw. It’s now quite zippy even on my Raspberry Pi 2, which had &lt;em&gt;never&lt;/em&gt; been the case before (without the “search failed” bug). Even if you were never affected by this bug, you will benefit from the fix.&lt;/p&gt;
&lt;p&gt;I haven’t officially reported this as an Emacs bug yet because reproducibility is still an issue. It needs something better than “fire off a bunch of HTTP requests across the internet in parallel from a Raspberry Pi.”&lt;/p&gt;
&lt;p&gt;The fix reminds me of that &lt;a href=&quot;https://www.buzzmaven.com/old-engineer-hammer-2/&quot;&gt;old boilermaker story&lt;/a&gt; about charging a lot of money just to swing a hammer. Once the problem arose, &lt;strong&gt;DTrace quickly helped to identify the place to hit Emacs with the hammer&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Finally, a big thanks to alphapapa for originally taking the time to report this bug months ago.&lt;/em&gt;&lt;/p&gt;
&lt;ol class=&quot;references print-only&quot;/&gt;&lt;nav class=&quot;no-print&quot;&gt;

&lt;/nav&gt;
</description>
<pubDate>Sun, 03 Feb 2019 16:25:59 +0000</pubDate>
<dc:creator>lelf</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://nullprogram.com/blog/2018/01/17/</dc:identifier>
</item>
<item>
<title>Show HN: The operating system I built as my high school project (2016)</title>
<link>https://github.com/aswinmohanme/ultronOS</link>
<guid isPermaLink="true" >https://github.com/aswinmohanme/ultronOS</guid>
<description>&lt;div class=&quot;Box-body p-6&quot;&gt;
&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt;
&lt;hr/&gt;&lt;p&gt;Ultron OS is an x86 Operating System written in C++. It is able to boot Initialise the GDT and and IDT and do a couple of things that Operating Systems are supposed to do.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Author :&lt;/strong&gt; @aswinmohanme&lt;/p&gt;
&lt;hr/&gt;&lt;hr/&gt;&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;Ultron is designed with OOP in mind and has not failed to live up to the promise at all possible places.&lt;/p&gt;
&lt;hr/&gt;&lt;h2&gt;Installation&lt;/h2&gt;
&lt;h3&gt;Requirements&lt;/h3&gt;
&lt;p&gt;For Compiling the Operating System image it is required that these dependencies must be met.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;Any *&lt;strong&gt;nix&lt;/strong&gt; like system&lt;/li&gt;
&lt;li&gt;The GNU &lt;strong&gt;GCC&lt;/strong&gt; compiler Toolchain&lt;/li&gt;
&lt;li&gt;Netwide Assembler &lt;strong&gt;NASM&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;GNU &lt;strong&gt;Make&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;GNU general linker &lt;strong&gt;ld&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Astlye Formatter&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;For Testing the Operating System it is recommended to use&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Qemu&lt;/strong&gt; the Emulator of our Choice&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr/&gt;&lt;h3&gt;Getting the Source&lt;/h3&gt;
&lt;p&gt;The most recent Source Code is hosted on &lt;em&gt;&lt;a href=&quot;https://github.com/aswinmohanme/Ultron-OS&quot;&gt;https://github.com/aswinmohanme/Ultron-OS&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;**How to get the most Recent Version **&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Get the Updated Source from github&lt;/span&gt;
git clone https://github.com/aswinmohanme/Ultron-OS
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Compiling&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;# Change the Directory into the Current One
cd Ultron-OS
# Run Make at the root of the project
make
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;Testing&lt;/h3&gt;
&lt;p&gt;Make sure you have installed &lt;strong&gt;qemu&lt;/strong&gt; on your system. From the project root run&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# This Command Runs the OS on an Emulated Machine
make run
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Thanks !! Enjoy&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;
</description>
<pubDate>Sun, 03 Feb 2019 15:37:35 +0000</pubDate>
<dc:creator>aswinmohanme</dc:creator>
<og:image>https://avatars1.githubusercontent.com/u/20600674?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>aswinmohanme/ultronOS</og:title>
<og:url>https://github.com/aswinmohanme/ultronOS</og:url>
<og:description>A pretty simple Operating System for my High School Project - aswinmohanme/ultronOS</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/aswinmohanme/ultronOS</dc:identifier>
</item>
<item>
<title>Things that are more inequitable than road pricing</title>
<link>http://cityobservatory.org/ten-things-more-inequitable-that-road-pricing/</link>
<guid isPermaLink="true" >http://cityobservatory.org/ten-things-more-inequitable-that-road-pricing/</guid>
<description>&lt;p&gt;&lt;em&gt;Don’t decry congestion pricing as inequitable until after you fix, or at least acknowledge, these ten other things that are even more inequitable about the way we pay for transportation.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;There’s a growing interest in using congestion pricing to help tackle traffic issues in major cities. Putting a price on peak hour road capacity is the only thing that’s been shown to effectively reduce congestion, based on experience in London, Stockholm, Singapore and other cities, high occupancy toll (HOT) lanes in a growing number of US cities.  But proposals to put a price on something that’s widely–&lt;a href=&quot;http://cityobservatory.org/theres-no-such-thing-as-a-free-way/&quot;&gt;if inaccurately&lt;/a&gt;–perceived to be “free” invites all manner of arguments from those who might have to pay. And a favorite argument is that road pricing is somehow punitive to the poor, and inequitable.&lt;/p&gt;
&lt;p&gt;Any time we charge a positive price for anything, the cost of paying that price is a higher burden on the poor than it is on the rich. It takes a special combination of myopia and tunnel vision to look at the prospect of congestion pricing anything other than a minor blip on a system of transportation finance that is systematically unfair to the poor and those who don’t own (or can’t afford) car.&lt;/p&gt;
&lt;p&gt;Here is our list of ten things that are more inequitable that road pricing.&lt;/p&gt;
&lt;p&gt;1. &lt;strong&gt;Flat vehicle registration fees&lt;/strong&gt;. Many states charge the same amount to register a used economy car as they charge to register a new full-sized SUV.  As we demonstrated in our commentary, &lt;a href=&quot;http://cityobservatory.org/transportation-equity-part-2-the-subaru-and-the-suburban/&quot;&gt;the Suburban and the Subaru&lt;/a&gt;, whether based on miles driven (a measure of value received from public roads), income or value (a measure of ability to pay) or weight (a measure of damage done to the roadway, a flat fee is simply unfair to lower income families.  On a per mile basis, the owner of a ten year-old Subaru can easily end up paying registration fees three times higher than the owner of a new Suburban.&lt;/p&gt;
&lt;p&gt;2. &lt;strong&gt;Not pricing road&lt;/strong&gt;s, which results in &lt;a href=&quot;http://cityobservatory.org/why-road-pricing-is-inherently-equitable-faster-buses/&quot;&gt;slower bus speeds&lt;/a&gt;. As we pointed out last year, those who depend on public buses are the victims of congested roadways.  Buses travel more slowly, are a less attractive alternative to car travel, and are less efficient (each bus and driver carry fewer passengers per hour or day). Not pricing roads makes bus travel worse for those who are dependent on it.&lt;/p&gt;
&lt;a href=&quot;https://i0.wp.com/cityobservatory.org/wp-content/uploads/2018/10/trimet_bus_pdx.jpg&quot;&gt;&lt;img class=&quot;size-large wp-image-7277&quot; src=&quot;https://i0.wp.com/cityobservatory.org/wp-content/uploads/2018/10/trimet_bus_pdx.jpg?resize=640%2C480&quot; alt=&quot;&quot; width=&quot;640&quot; height=&quot;480&quot; srcset=&quot;https://i0.wp.com/cityobservatory.org/wp-content/uploads/2018/10/trimet_bus_pdx.jpg?resize=1024%2C768 1024w, https://i0.wp.com/cityobservatory.org/wp-content/uploads/2018/10/trimet_bus_pdx.jpg?resize=300%2C225 300w, https://i0.wp.com/cityobservatory.org/wp-content/uploads/2018/10/trimet_bus_pdx.jpg?resize=768%2C576 768w, https://i0.wp.com/cityobservatory.org/wp-content/uploads/2018/10/trimet_bus_pdx.jpg?w=1030 1030w&quot; sizes=&quot;(max-width: 640px) 100vw, 640px&quot; data-recalc-dims=&quot;1&quot;/&gt;&lt;/a&gt;Not pricing roads means these travel more slowly, which is unfair to low income households
&lt;p&gt;3. &lt;strong&gt;The storm sewer subsidy&lt;/strong&gt;. Some of the most expensive infrastructure out there is the massive stormwater systems cities are building to deal with runoff during storms. Impervious surfaces like roadways account for up to half of urban stormwater, and much, if not most of the toxic material in stormwater comes from cars (leaking oil, tire residue, brake material, precipitated air pollutants). But roads (and therefore cars and car users) generally contribute nothing to the cost of collecting or treating stormwater:  the entire cost is usually added to city sewer and water bills.  The result is that city tax and ratepayers pay the cost of dealing with pollution, which comes from those who drive, many of whom are non-residents. It’s a huge burden for economically distressed cities, like Akron, which is spending &lt;a href=&quot;https://www.cleveland.com/akron/index.ssf/2015/06/the_largest_construction_proje.html&quot;&gt;over a billion dollars&lt;/a&gt; for giant new sewers to eliminate storm runoff. Akron city residents tend to be poorer and have low rates of car ownership, so they will pay for storm sewers; suburbanites in commute into Akron, and use the roads and surface parking lots that create the runoff, and who have higher incomes, won’t pay.  It’s inequitable.&lt;/p&gt;
&lt;p&gt;4. &lt;strong&gt;Insurance rates&lt;/strong&gt;. Virtually all states require motorists to purchase liability insurance as a condition of owning or operating a motor vehicle.  While insurance is privately provided, the fact that it is legally mandated makes it much like a tax. And insurance rates are not discounted for the poor.  If anything, there is abundant evidence that both the poor and urban residents &lt;a href=&quot;http://www.michiganradio.org/post/woman-pays-182-more-car-insurance-detroit-she-would-ann-arbor&quot;&gt;pay more for car insurance&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;5. &lt;strong&gt;Gasoline and gas taxes&lt;/strong&gt;. Nearly all vehicles are fueled by gasoline. Gas taxes, the principal user fee for roads, is not pro-rated by income. Low income households pay the same per gallon tax as high income households.  Gas taxes, as a result, tend to be &lt;a href=&quot;https://econreview.berkeley.edu/is-the-california-gas-tax-worth-saving/&quot;&gt;much more regressive&lt;/a&gt; than other forms of taxation. That’s just as inequitable, on its face, as congestion pricing, yet we’ve never seen a serious argument that we ought to discount the price of gasoline for poor households.&lt;/p&gt;
&lt;p&gt;6. &lt;strong&gt;Tax credits for the purchase of new electric vehicles&lt;/strong&gt;.  The federal government and many states offer tax credits for the purchase of electric vehicles.  Poor households both have much lower rates of car ownership, and are far &lt;a href=&quot;https://www.cleveland.com/akron/index.ssf/2015/06/the_largest_construction_proje.html&quot;&gt;less&lt;/a&gt; likely to purchase new vehicles; most can only afford used vehicles, for which tax credits are not available.  Giving &lt;a href=&quot;https://www.energy.gov/eere/electricvehicles/electric-vehicles-tax-credits-and-other-incentives&quot;&gt;$7,500 tax credits&lt;/a&gt; to households who are rich enough to afford a new Tesla (MSRP: $46,000) isn’t equitable. (Some 200,000 Tesla owners have already gotten the credit, which will now be dialed back to $3,750 per car). Doubtful that any poor families qualified.&lt;/p&gt;
&lt;p&gt;7.  &lt;strong&gt;Paid parking&lt;/strong&gt;.  In many locations, particularly dense city centers, you practically can’t use a vehicle for transportation unless you are willing to pay for its parking space either at a metered space on the street, or at an off-street lot or parking structure. While cities do provide free parking for disabled citizens (a perk that is frequently abused), parking meters don’t charge different rates to users based on their income; you have to pay the same amount to park your used Jetta as you do your new Mercedes. Again:  the cost of parking bears more heavily on the poor than on the rich, both as a share of income, and in relation to the value of their vehicles. Plus, we haven’t even said anything about the provisions of the &lt;a href=&quot;http://transitcenter.org/publications/who-pays-for-parking/#executive-summary&quot;&gt;tax code that subsidize parking&lt;/a&gt;, chiefly for high income workers. That’s inequitable.&lt;/p&gt;
&lt;a href=&quot;https://i1.wp.com/cityobservatory.org/wp-content/uploads/2019/01/Parking_295.jpg&quot;&gt;&lt;img class=&quot;wp-image-7434 size-full&quot; src=&quot;https://i1.wp.com/cityobservatory.org/wp-content/uploads/2019/01/Parking_295.jpg?resize=494%2C873&quot; alt=&quot;&quot; width=&quot;494&quot; height=&quot;873&quot; srcset=&quot;https://i1.wp.com/cityobservatory.org/wp-content/uploads/2019/01/Parking_295.jpg?w=494 494w, https://i1.wp.com/cityobservatory.org/wp-content/uploads/2019/01/Parking_295.jpg?resize=170%2C300 170w&quot; sizes=&quot;(max-width: 494px) 100vw, 494px&quot; data-recalc-dims=&quot;1&quot;/&gt;&lt;/a&gt;Is high priced parking fair to the poor?
&lt;p&gt;8.  &lt;strong&gt;“Free” parking.&lt;/strong&gt; As Donald Shoup has demonstrated time and again, &lt;a href=&quot;https://www.vox.com/2014/6/27/5849280/why-free-parking-is-bad-for-everyone&quot;&gt;there’s nothing free about free parking&lt;/a&gt;.  The effective requirement that people have to build new parking as a condition of getting a building permit for a store, office, home or apartment, drives up the cost of new construction and housing. In addition, those who don’t own cars, who walk, cycle and ride buses, end up subsidizing those who get the free parking. One study estimates that carless renters pay almost &lt;a href=&quot;https://www.accessmagazine.org/spring-2017/the-hidden-cost-of-bundled-parking/&quot;&gt;half a billion dollars a yea&lt;/a&gt;r for garage parking that’s bundled in their rent, but which they can’t use, because they don’t own cars. As we wrote in our commentary on the &lt;a href=&quot;http://cityobservatory.org/parking-where-we-embrace-socialism-in-the-us/&quot;&gt;triumph of parking socialism&lt;/a&gt;, the law in its majesty provides free parking to everyone, whether they own a vehicle or not. As a practical matter, “free” parking, like free roads, benefits those with higher incomes who can afford and who use cars extensively.&lt;/p&gt;
&lt;a href=&quot;https://i2.wp.com/cityobservatory.org/wp-content/uploads/2019/01/parking_2day.jpg&quot;&gt;&lt;img class=&quot;wp-image-7432 size-large&quot; src=&quot;https://i2.wp.com/cityobservatory.org/wp-content/uploads/2019/01/parking_2day.jpg?resize=640%2C362&quot; alt=&quot;&quot; width=&quot;640&quot; height=&quot;362&quot; srcset=&quot;https://i2.wp.com/cityobservatory.org/wp-content/uploads/2019/01/parking_2day.jpg?resize=1024%2C579 1024w, https://i2.wp.com/cityobservatory.org/wp-content/uploads/2019/01/parking_2day.jpg?resize=300%2C170 300w, https://i2.wp.com/cityobservatory.org/wp-content/uploads/2019/01/parking_2day.jpg?resize=768%2C434 768w, https://i2.wp.com/cityobservatory.org/wp-content/uploads/2019/01/parking_2day.jpg?w=1544 1544w, https://i2.wp.com/cityobservatory.org/wp-content/uploads/2019/01/parking_2day.jpg?w=1280 1280w&quot; sizes=&quot;(max-width: 640px) 100vw, 640px&quot; data-recalc-dims=&quot;1&quot;/&gt;&lt;/a&gt;And parking can be so cheap it undercuts transit, and makes cities less walkable.
&lt;p&gt;9. &lt;strong&gt;The property tax exemption for cars&lt;/strong&gt;. Unlike say houses and other forms of real property, cars are seldom charged property taxes. For example, Oregon completely exempts cars from state and local property taxes, a provision that costs local governments &lt;a href=&quot;http://www.oregon.gov/DOR/programs/gov-research/Documents/full-tax-expenditure_2017-19.pdf&quot;&gt;$989 million per biennium in revenue&lt;/a&gt;. And naturally, the exemption is a benefit only for those who own cars, and disproportionately rewards those who own expensive newer cars.  If we extended the property tax to cars–with say an exemption on the first $10,000 of value, so that someone driving a ten-year old clunker would pay nothing, the system would be much more equitable.&lt;/p&gt;
&lt;p&gt;10. &lt;strong&gt;Unfair taxation of greener, safer, less congesting modes of transportation&lt;/strong&gt;. Consider the fiscal conditions imposed on scooter operators as part of Portland’s experiment with fleets of shared electric scooters last year. The city required the scooter companies to pay $1 per scooter per day to cover the cost of streets. As we noted at &lt;a href=&quot;http://cityobservatory.org/e-scooters-and-paying-for-roads/&quot;&gt;City Observatory&lt;/a&gt;, that’s vastly more that the amount charged to cars, considering that cars take up dramatically more road space, cause more congestion and air pollution, and damage roads more. If cars were charged proportionately to scooters relative to their weight or value, cars should be paying $10 or $20 per day to drive in the city. Again:  a transportation finance system that’s not equitable.&lt;/p&gt;
&lt;p&gt;Peak hour congestion pricing actually tends to affect higher income households more because they are the ones who commute by car at the peak hour.  As we documented at City Observatory, peak hour car commuters in Portland earn roughly t&lt;a href=&quot;http://cityobservatory.org/transportation-equity/&quot;&gt;wice as much on average&lt;/a&gt;, as those who commute by car or bus or in non-peak hours. Similarly, unlike flat tolls, congestion pricing can have low or even zero charges during off-peak hours, creating a low-cost or free alternative for those with limited means and flexibility in travel schedules.&lt;/p&gt;
&lt;p&gt;There are plenty of things we can do to ameliorate any of the perceived negative effects of congestion pricing. First, as we noted in number two (above) road pricing actually benefits the poor and transit-dependent by speeding buses.   But beyond that, there are good reasons to believe that we could rebate some of the funds from congestion pricing to offset the negative effect on low income households.  In addition, we can spend congestion pricing revenue on transit and other alternative forms of transportation.&lt;/p&gt;
&lt;p&gt;Playing the “equity” card as an objection to pricing the roads actually turns out to be a way to advance the interests not of the poor, but of those who benefit already from the wealth of subsidies to car ownership. We seem to be perfectly fine with all kinds of inequity in our transportation finance system, so long as it benefits wealthier car owners.&lt;/p&gt;
&lt;p&gt;If we’re going to talk about equity, let’s not apply it to one isolated part of the transportation system. Instead, let’s ask what it takes to create an overall system that is fair to all, considering all aspects of how the system is paid for, who benefits, and who bears the external costs (of things like crashes, air pollution and runoff). If we do, congestion pricing can be at the heart of a system that is both more efficient and fair.&lt;/p&gt;
&lt;p&gt;Note: This commentary has been revised to correct a typo in the headline, h/t to @stevenspinello.&lt;/p&gt;

</description>
<pubDate>Sun, 03 Feb 2019 13:27:55 +0000</pubDate>
<dc:creator>oftenwrong</dc:creator>
<og:title>City Observatory - Ten things more inequitable than road pricing</og:title>
<og:type>website</og:type>
<og:url>http://cityobservatory.org/ten-things-more-inequitable-that-road-pricing/</og:url>
<og:image>http://cityobservatory.org/wp-content/uploads/2019/01/Parking_295.jpg</og:image>
<og:description>The City Observatory is a study of modern-day cities and urban development practices.</og:description>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://cityobservatory.org/ten-things-more-inequitable-that-road-pricing/</dc:identifier>
</item>
<item>
<title>Let Children Get Bored Again</title>
<link>https://www.nytimes.com/2019/02/02/opinion/sunday/children-bored.html</link>
<guid isPermaLink="true" >https://www.nytimes.com/2019/02/02/opinion/sunday/children-bored.html</guid>
<description>&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;“I’m bored.” It’s a puny little phrase, yet it has the power to fill parents with a cascade of dread, annoyance and guilt. If someone around here is bored, someone else must have failed to enlighten or enrich or divert. And how can anyone — child or adult — claim boredom when there’s so much that can and should be done? Immediately.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;But boredom is something to experience rather than hastily swipe away. And not as some kind of cruel Victorian conditioning, recommended because it’s awful and toughens you up. Despite the lesson most adults learned growing up — boredom is for boring people — boredom is useful. It’s good for you.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;If kids don’t figure this out early on, they’re in for a nasty surprise. School, let’s face it, can be dull, and it isn’t actually the teacher’s job to entertain as well as educate. Life isn’t meant to be an endless parade of amusements. “That’s right,” a mother says to her daughter in Maria Semple’s 2012 novel, “&lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/2012/08/07/books/whered-you-go-bernadette-a-maria-semple-novel.html?module=inline&quot; title=&quot;&quot;&gt;Where’d You Go, Bernadette&lt;/a&gt;.” “You are bored. And I’m going to let you in on a little secret about life. You think it’s boring now? Well, it only gets more boring. The sooner you learn it’s on you to make life interesting, the better off you’ll be.”&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;People used to accept that much of life was boring. Memoirs of pre-21st-century life are rife with tedium. When not idling in drawing rooms, members of the leisured class took long walks and stared at trees. They went motoring and stared at more trees. Those who had to work had it a lot harder. Agricultural and industrial jobs were often mind-numbing; few people were looking to be fulfilled by paid labor. Children could expect those kinds of futures and they got used to the idea from an early age, left unattended with nothing but bookshelves and tree branches, and later, bad afternoon television.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Only a few short decades ago, during the lost age of underparenting, grown-ups thought a certain amount of boredom was appropriate. And children came to appreciate their empty agendas. In an &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.gq.com/story/unexpected-lin-manuel-miranda&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;interview with GQ magazine&lt;/a&gt;, Lin-Manuel Miranda credited his unattended afternoons with fostering inspiration. “Because there is nothing better to spur creativity than a blank page or an empty bedroom,” he said.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Nowadays, subjecting a child to such inactivity is viewed as a dereliction of parental duty. In a much-read story in The Times, “&lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/2018/12/25/upshot/the-relentlessness-of-modern-parenting.html?module=inline&quot; title=&quot;&quot;&gt;The Relentlessness of Modern Parenting&lt;/a&gt;,” Claire Cain Miller cited a &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://academic.oup.com/sf/advance-article/doi/10.1093/sf/soy107/5257458&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;recent study&lt;/a&gt; that found that regardless of class, income or race, parents believed that “children who were bored after school should be enrolled in extracurricular activities, and that parents who were busy should stop their task and draw with their children if asked.”&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Every spare moment is to be optimized, maximized, driven toward a goal.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;When not being uberparented, kids today are left to their own devices — their own digital devices, that is. Parents preparing for a long car ride or airplane trip are like Army officers plotting a complicated land maneuver. Which movies to load onto the iPad? Should we start a new family-friendly podcast? Is this an O.K. time to let the kids play Fortnite until their brains melt into the back seat? What did parents in the ’70s do when kids were bored in the way-back? Nothing! They let them breathe in gas fumes. Torture their siblings. And since it wasn’t actually for wearing, play with the broken seatbelt.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;If you complained about being bored back then, you were really asking for it. “Go outside,” you might get, or worse, “Clean your room.” Was this fun? No. Was it helpful? Yes.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Because things happen when you’re bored. Some of the most boring jobs I’ve had were also the most creative. Working at an import factory after school, I pasted photos of ugly Peruvian sweaters onto sales sheets. My hands became encrusted with glue as the sweaters blurred into a clumpy sameness. For some reason, everything smelled like molasses. My mind had no choice but to drift into an elaborate fantasy realm. It’s when you are bored that stories set in. Checking out groceries at the supermarket, I invented narratives around people’s purchases. The man buying eggplant and a six-pack of Bud at 9 p.m.: Which was the must-get item and which the impulse purchase? How did my former fifth-grade teacher feel about my observing her weekly purchase of Nutter Butters?&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Once you’ve truly settled into the anesthetizing effects of boredom, you find yourself en route to discovery. With monotony, small differences begin to emerge, between those trees, those sweaters. This is why so many useful ideas occur in the shower, when you’re held captive to a mundane activity. You let your mind wander and follow it where it goes.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Of course, it’s not really the boredom itself that’s important; it’s what we do with it. When you reach your breaking point, boredom teaches you to respond constructively, to make something happen for yourself. But unless we are faced with a steady diet of stultifying boredom, we never learn how.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;The idea isn’t that you suffer through crushing tedium indefinitely like Neville (“N is for Neville who died of ennui”) of “&lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.independent.co.uk/arts-entertainment/art/great-works/gorey-edward-the-gashlycrumb-tinies-1963-887857.html&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;The Gashlycrumb Tinies&lt;/a&gt;.” It’s that you learn how to vanquish it. This may come in several forms: You might turn inward and use the time to think. You might reach for a book. You might imagine your way to a better job. Boredom leads to &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.tandfonline.com/doi/abs/10.1080/10400419.2014.901073#preview&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;flights of fancy&lt;/a&gt;. But ultimately, to self-discipline. To resourcefulness.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;The ability to handle boredom, not surprisingly, is correlated with the ability to focus and to self-regulate. &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://link.springer.com/article/10.1007/s00221-012-3147-z&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Research has shown&lt;/a&gt; that people with attention disorders are particularly prone to boredom. It makes sense that in a hyperstimulating world, what at first seems captivating now feels less so; what was once mildly diverting may now be flat-out dull.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;It’s especially important that kids get bored — and be allowed to stay bored — when they’re young. That it not be considered “a problem” to be avoided or eradicated by the higher-ups, but instead something kids grapple with on their own.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;We’ve stopped training children to do this. Rather than teach them to absorb material that is slower, duller and decidedly two-dimensional, like a lot of worthwhile information is, schools cave in to what they say children expect: fun. Teachers spend more time concocting ways to “engage” students through visuals and “interactive learning” (read: screens, games) tailored to their Candy Crushed attention spans. Kids won’t listen to long lectures, goes the argument, so it’s on us to serve up learning in easier-to-swallow portions.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;But surely teaching children to endure boredom rather than ratcheting up the entertainment will prepare them for a more realistic future, one that doesn’t raise false expectations of what work or life itself actually entails. One day, even in a job they otherwise love, our kids may have to spend an entire day answering Friday’s leftover email. They may have to check spreadsheets. Or assist robots at a vast internet-ready warehouse.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;This sounds boring, you might conclude. It sounds like work, and it sounds like life. Perhaps we should get used to it again, and use it to our benefit. Perhaps in an incessant, up-the-ante world, we could do with a little less excitement.&lt;/p&gt;
&lt;p class=&quot;css-1psfkbx etfikam0&quot;&gt;&lt;a class=&quot;css-1g7m0tk&quot; href=&quot;http://www.pamelapaul.com/&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Pamela Paul&lt;/a&gt; is the editor of the Book Review and a co-author of the forthcoming book “How to Raise a Reader.&quot;&lt;/p&gt;
&lt;p class=&quot;css-1psfkbx etfikam0&quot;&gt;&lt;em class=&quot;css-2fg4z9 e1gzwzxm0&quot;&gt;Follow The New York Times Opinion section on&lt;/em&gt; &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.facebook.com/nytopinion&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;&lt;em class=&quot;css-2fg4z9 e1gzwzxm0&quot;&gt;Facebook&lt;/em&gt;&lt;/a&gt;&lt;em class=&quot;css-2fg4z9 e1gzwzxm0&quot;&gt;,&lt;/em&gt; &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;http://twitter.com/NYTOpinion&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;&lt;em class=&quot;css-2fg4z9 e1gzwzxm0&quot;&gt;Twitter (@NYTopinion)&lt;/em&gt;&lt;/a&gt; &lt;em class=&quot;css-2fg4z9 e1gzwzxm0&quot;&gt;and&lt;/em&gt; &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.instagram.com/nytopinion/&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;&lt;em class=&quot;css-2fg4z9 e1gzwzxm0&quot;&gt;Instagram&lt;/em&gt;&lt;/a&gt;&lt;em class=&quot;css-2fg4z9 e1gzwzxm0&quot;&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;
</description>
<pubDate>Sun, 03 Feb 2019 12:48:46 +0000</pubDate>
<dc:creator>glassworm</dc:creator>
<og:url>https://www.nytimes.com/2019/02/02/opinion/sunday/children-bored.html</og:url>
<og:type>article</og:type>
<og:title>Opinion | Let Children Get Bored Again</og:title>
<og:image>https://static01.nyt.com/images/2019/02/03/opinion/sunday/03paul/03paul-facebookJumbo.jpg</og:image>
<og:description>Boredom teaches us that life isn’t a parade of amusements. More important, it spawns creativity and self-sufficiency.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.nytimes.com/2019/02/02/opinion/sunday/children-bored.html</dc:identifier>
</item>
<item>
<title>React as a UI Runtime</title>
<link>https://overreacted.io/react-as-a-ui-runtime/</link>
<guid isPermaLink="true" >https://overreacted.io/react-as-a-ui-runtime/</guid>
<description>&lt;p&gt;Most tutorials introduce React as a UI library. This makes sense because React &lt;em&gt;is&lt;/em&gt; a UI library. That’s literally what the tagline says!&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;gatsby-resp-image-link&quot; href=&quot;https://overreacted.io/static/0429fcb4a2f2022852afc698ff8968f1/74bd4/react.png&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;span class=&quot;gatsby-resp-image-wrapper&quot;&gt;&lt;span class=&quot;gatsby-resp-image-background-image&quot;&gt;&lt;img class=&quot;gatsby-resp-image-image&quot; alt=&quot;React homepage screenshot: &quot; a=&quot;&quot; javascript=&quot;&quot; library=&quot;&quot; for=&quot;&quot; building=&quot;&quot; user=&quot;&quot; title=&quot;&quot; src=&quot;https://overreacted.io/static/0429fcb4a2f2022852afc698ff8968f1/74bd4/react.png&quot; srcset=&quot;/static/0429fcb4a2f2022852afc698ff8968f1/309d6/react.png 148w, /static/0429fcb4a2f2022852afc698ff8968f1/fe30e/react.png 295w, /static/0429fcb4a2f2022852afc698ff8968f1/74bd4/react.png 500w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I’ve written about the challenges of creating &lt;a href=&quot;https://overreacted.io/the-elements-of-ui-engineering/&quot;&gt;user interfaces&lt;/a&gt; before. But this post talks about React in a different way — more as a &lt;a href=&quot;https://en.wikipedia.org/wiki/Runtime_system&quot;&gt;programming runtime&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This post won’t teach you anything about creating user interfaces.&lt;/strong&gt; But it might help you understand the React programming model in more depth.&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;Note: If you’re &lt;em&gt;learning&lt;/em&gt; React, check out &lt;a href=&quot;https://reactjs.org/docs/getting-started.html#learn-react&quot;&gt;the docs&lt;/a&gt; instead.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;⚠️&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This is a deep dive — THIS IS NOT a beginner-friendly post.&lt;/strong&gt; In this post, I’m describing most of the React programming model from first principles. I don’t explain how to use it — just how it works.&lt;/p&gt;
&lt;p&gt;It’s aimed at experienced programmers and folks working on other UI libraries who asked about some tradeoffs chosen in React. I hope you’ll find it useful!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Many people successfully use React for years without thinking about most of these topics.&lt;/strong&gt; This is definitely a programmer-centric view of React rather than, say, a &lt;a href=&quot;http://mrmrs.cc/writing/2016/04/21/developing-ui/&quot;&gt;designer-centric one&lt;/a&gt;. But I don’t think it hurts to have resources for both.&lt;/p&gt;
&lt;p&gt;With that disclaimer out of the way, let’s go!&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;host-tree&quot;&gt;Host Tree&lt;/h2&gt;
&lt;p&gt;Some programs output numbers. Other programs output poems. Different languages and their runtimes are often optimized for a particular set of use cases, and React is no exception to that.&lt;/p&gt;
&lt;p&gt;React programs usually output &lt;strong&gt;a tree that may change over time&lt;/strong&gt;. It might be a &lt;a href=&quot;https://www.npmjs.com/package/react-dom&quot;&gt;DOM tree&lt;/a&gt;, an &lt;a href=&quot;https://developer.apple.com/library/archive/documentation/General/Conceptual/Devpedia-CocoaApp/View%20Hierarchy.html&quot;&gt;iOS hierarchy&lt;/a&gt;, a tree of &lt;a href=&quot;https://react-pdf.org/&quot;&gt;PDF primitives&lt;/a&gt;, or even of &lt;a href=&quot;https://reactjs.org/docs/test-renderer.html&quot;&gt;JSON objects&lt;/a&gt;. However, usually we want to represent some UI with it. We’ll call it a “&lt;em&gt;host&lt;/em&gt; tree” because it is a part of the &lt;em&gt;host environment&lt;/em&gt; outside of React — like DOM or iOS. The host tree usually has &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Node/appendChild&quot;&gt;its&lt;/a&gt; &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiview/1622616-addsubview&quot;&gt;own&lt;/a&gt; imperative API. React is a layer on top of it.&lt;/p&gt;
&lt;p&gt;So what is React useful for? Very abstractly, it helps you write a program that predictably manipulates a complex host tree in response to external events like interactions, network responses, timers, and so on.&lt;/p&gt;
&lt;p&gt;A specialized tool works better than a generic one when it can impose and benefit from particular constraints. React makes a bet on two principles:&lt;/p&gt;
&lt;ul readability=&quot;2&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;strong&gt;Stability.&lt;/strong&gt; The host tree is relatively stable and most updates don’t radically change its overall structure. If an app rearranged all its interactive elements into a completely different combination every second, it would be difficult to use. Where did that button go? Why is my screen dancing?&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;strong&gt;Regularity.&lt;/strong&gt; The host tree can be broken down into UI patterns that look and behave consistently (such as buttons, lists, avatars) rather than random shapes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;These principles happen to be true for most UIs.&lt;/strong&gt; However, React is ill-suited when there are no stable “patterns” in the output. For example, React may help you write a Twitter client but won’t be very useful for a &lt;a href=&quot;https://www.youtube.com/watch?v=Uzx9ArZ7MUU&quot;&gt;3D pipes screensaver&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;host-instances&quot;&gt;Host Instances&lt;/h2&gt;
&lt;p&gt;The host tree consists of nodes. We’ll call them “host instances”.&lt;/p&gt;
&lt;p&gt;In the DOM environment, host instances are regular DOM nodes — like the objects you get when you call &lt;code class=&quot;language-text&quot;&gt;document.createElement('div')&lt;/code&gt;. On iOS, host instances could be values uniquely identifying a native view from JavaScript.&lt;/p&gt;
&lt;p&gt;Host instances have their own properties (e.g. &lt;code class=&quot;language-text&quot;&gt;domNode.className&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;view.tintColor&lt;/code&gt;). They may also contain other host instances as children.&lt;/p&gt;
&lt;p&gt;(This has nothing to do with React — I’m describing the host environments.)&lt;/p&gt;
&lt;p&gt;There is usually an API to manipulate host instances. For example, the DOM provides APIs like &lt;code class=&quot;language-text&quot;&gt;appendChild&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;removeChild&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;setAttribute&lt;/code&gt;, and so on. In React apps, you usually don’t call these APIs. That’s the job of React.&lt;/p&gt;
&lt;h2 id=&quot;renderers&quot;&gt;Renderers&lt;/h2&gt;
&lt;p&gt;A &lt;em&gt;renderer&lt;/em&gt; teaches React to talk to a specific host environment and manage its host instances. React DOM, React Native, and even &lt;a href=&quot;https://mobile.twitter.com/vadimdemedes/status/1089344289102942211&quot;&gt;Ink&lt;/a&gt; are React renderers. You can also &lt;a href=&quot;https://github.com/facebook/react/tree/master/packages/react-reconciler&quot;&gt;create your own React renderer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;React renderers can work in one of two modes.&lt;/p&gt;
&lt;p&gt;The vast majority of renderers are written to use the “mutating” mode. This mode is how the DOM works: we can create a node, set its properties, and later add or remove children from it. The host instances are completely mutable.&lt;/p&gt;
&lt;p&gt;React can also work in a “persistent” mode. This mode is for host environments that don’t provide methods like &lt;code class=&quot;language-text&quot;&gt;appendChild()&lt;/code&gt; but instead clone the parent tree and always replace the top-level child. Immutability on the host tree level makes multi-threading easier. &lt;a href=&quot;https://facebook.github.io/react-native/blog/2018/06/14/state-of-react-native-2018&quot;&gt;React Fabric&lt;/a&gt; takes advantage of that.&lt;/p&gt;
&lt;p&gt;As a React user, you never need to think about these modes. I only want to highlight that React isn’t just an adapter from one mode to another. Its usefulness is orthogonal to the target low-level view API paradigm.&lt;/p&gt;
&lt;h2 id=&quot;react-elements&quot;&gt;React Elements&lt;/h2&gt;
&lt;p&gt;In the host environment, a host instance (like a DOM node) is the smallest building block. In React, the smallest building block is a &lt;em&gt;React element&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;React element is a plain JavaScript object. It can &lt;em&gt;describe&lt;/em&gt; a host instance.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;code class=&quot;language-jsx&quot;&gt;

&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  type&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;'button'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  props&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; className&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;'blue'&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A React element is lightweight and has no host instance tied to it. Again, it is merely a &lt;em&gt;description&lt;/em&gt; of what you want to see on the screen.&lt;/p&gt;
&lt;p&gt;Like host instances, React elements can form a tree:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;code class=&quot;language-jsx&quot;&gt;




&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  type&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;'dialog'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  props&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    children&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      type&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;'button'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      props&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; className&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;'blue'&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      type&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;'button'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      props&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; className&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;'red'&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;(Note: I omitted &lt;a href=&quot;https://overreacted.io/why-do-react-elements-have-typeof-property/&quot;&gt;some properties&lt;/a&gt; that aren’t important to this explanation.)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;However, remember that &lt;strong&gt;React elements don’t have their own persistent identity.&lt;/strong&gt; They’re meant to be re-created and thrown away all the time.&lt;/p&gt;
&lt;p&gt;React elements are immutable. For example, you can’t change the children or a property of a React element. If you want to render something different later, you will &lt;em&gt;describe&lt;/em&gt; it with a new React element tree created from scratch.&lt;/p&gt;
&lt;p&gt;I like to think of React elements as being like frames in a movie. They capture what the UI should look like at a specific point in time. They don’t change.&lt;/p&gt;
&lt;h2 id=&quot;entry-point&quot;&gt;Entry Point&lt;/h2&gt;
&lt;p&gt;Each React renderer has an “entry point”. It’s the API that lets us tell React to render a particular React element tree inside a container host instance.&lt;/p&gt;
&lt;p&gt;For example, React DOM entry point is &lt;code class=&quot;language-text&quot;&gt;ReactDOM.render&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;code class=&quot;language-jsx&quot;&gt;ReactDOM&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;blue&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'container'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When we say &lt;code class=&quot;language-text&quot;&gt;ReactDOM.render(reactElement, domContainer)&lt;/code&gt;, we mean: &lt;strong&gt;“Dear React, make the &lt;code class=&quot;language-text&quot;&gt;domContainer&lt;/code&gt; host tree match my &lt;code class=&quot;language-text&quot;&gt;reactElement&lt;/code&gt;.”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;React will look at the &lt;code class=&quot;language-text&quot;&gt;reactElement.type&lt;/code&gt; (in our example, &lt;code class=&quot;language-text&quot;&gt;'button'&lt;/code&gt;) and ask the React DOM renderer to create a host instance for it and set the properties:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;code class=&quot;language-jsx&quot;&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createHostInstance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;reactElement&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; domNode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;reactElement&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;  domNode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;className &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; reactElement&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;className&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; domNode&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In our example, effectively React will do this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; domNode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'button'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;domNode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;className &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;'blue'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
domContainer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;domNode&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If the React element has child elements in &lt;code class=&quot;language-text&quot;&gt;reactElement.props.children&lt;/code&gt;, React will recursively create host instances for them too on the first render.&lt;/p&gt;
&lt;h2 id=&quot;reconciliation&quot;&gt;Reconciliation&lt;/h2&gt;
&lt;p&gt;What happens if we call &lt;code class=&quot;language-text&quot;&gt;ReactDOM.render()&lt;/code&gt; twice with the same container?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;code class=&quot;language-jsx&quot;&gt;ReactDOM&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;blue&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;  document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'container'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;





ReactDOM&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;red&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;  document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'container'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Again, React’s job is to &lt;em&gt;make the host tree match the provided React element tree&lt;/em&gt;. The process of figuring out &lt;em&gt;what&lt;/em&gt; to do to the host instance tree in response to new information is sometimes called &lt;a href=&quot;https://reactjs.org/docs/reconciliation.html&quot;&gt;reconciliation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are two ways to go about it. A simplified version of React could blow away the existing tree and re-create it from scratch:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; domContainer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'container'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

domContainer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerHTML &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; domNode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'button'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
domNode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;className &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;'red'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
domContainer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;domNode&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But in DOM, this is slow and loses important information like focus, selection, scroll state, and so on. Instead, we want React to do something like this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; domNode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; domContainer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;firstChild&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

domNode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;className &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;'red'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In other words, React needs to decide when to &lt;em&gt;update&lt;/em&gt; an existing host instance to match a new React element, and when to create a &lt;em&gt;new&lt;/em&gt; one.&lt;/p&gt;
&lt;p&gt;This raises a question of &lt;em&gt;identity&lt;/em&gt;. The React element may be different every time, but when does it refer to the same host instance conceptually?&lt;/p&gt;
&lt;p&gt;In our example, it’s simple. We used to render a &lt;code class=&quot;language-text&quot;&gt;&amp;lt;button&amp;gt;&lt;/code&gt; as a first (and only) child, and we want to render a &lt;code class=&quot;language-text&quot;&gt;&amp;lt;button&amp;gt;&lt;/code&gt; in the same place again. We already have a &lt;code class=&quot;language-text&quot;&gt;&amp;lt;button&amp;gt;&lt;/code&gt; host instance there so why re-create it? Let’s just reuse it.&lt;/p&gt;
&lt;p&gt;This is pretty close to how React thinks about it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If an element type in the same place in the tree “matches up” between the previous and the next renders, React reuses the existing host instance.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Here is an example with comments showing roughly what React does:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;code class=&quot;language-jsx&quot;&gt;


ReactDOM&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;blue&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'container'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;gatsby-highlight-code-line&quot;/&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;/&gt;ReactDOM&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;red&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'container'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;gatsby-highlight-code-line&quot;/&gt;



ReactDOM&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'container'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;gatsby-highlight-code-line&quot;/&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;/&gt;ReactDOM&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;Goodbye&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'container'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The same heuristic is used for child trees. For example, when we update a &lt;code class=&quot;language-text&quot;&gt;&amp;lt;dialog&amp;gt;&lt;/code&gt; with two &lt;code class=&quot;language-text&quot;&gt;&amp;lt;button&amp;gt;&lt;/code&gt;s inside, React first decides whether to re-use the &lt;code class=&quot;language-text&quot;&gt;&amp;lt;dialog&amp;gt;&lt;/code&gt;, and then repeats this decision procedure for each child.&lt;/p&gt;
&lt;h2 id=&quot;conditions&quot;&gt;Conditions&lt;/h2&gt;
&lt;p&gt;If React only reuses host instances when the element types “match up” between updates, how can we render conditional content?&lt;/p&gt;
&lt;p&gt;Say we want to first show only an input, but later render a message before it:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;code class=&quot;language-jsx&quot;&gt;
ReactDOM&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;dialog&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token plain-text&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token plain-text&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;dialog&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  domContainer
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;


ReactDOM&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;dialog&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;&lt;span class=&quot;token plain-text&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;I was just added here!&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token plain-text&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;dialog&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  domContainer
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this example, the &lt;code class=&quot;language-text&quot;&gt;&amp;lt;input&amp;gt;&lt;/code&gt; host instance would get re-created. React would walk the element tree, comparing it with the previous version:&lt;/p&gt;
&lt;p&gt;So effectively the update code executed by React would be like:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; oldInputNode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; dialogNode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;firstChild&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;dialogNode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;removeChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;oldInputNode&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; pNode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'p'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
pNode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;textContent &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;'I was just added here!'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
dialogNode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pNode&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; newInputNode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'input'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;dialogNode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;newInputNode&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is not great because &lt;em&gt;conceptually&lt;/em&gt; the &lt;code class=&quot;language-text&quot;&gt;&amp;lt;input&amp;gt;&lt;/code&gt; hasn’t been &lt;em&gt;replaced&lt;/em&gt; with &lt;code class=&quot;language-text&quot;&gt;&amp;lt;p&amp;gt;&lt;/code&gt; — it just moved. We don’t want to lose its selection, focus state, and content due to re-creating the DOM.&lt;/p&gt;
&lt;p&gt;While this problem has an easy fix (which we’ll get to in a minute), it doesn’t occur often in the React applications. It’s interesting to see why.&lt;/p&gt;
&lt;p&gt;In practice, you would rarely call &lt;code class=&quot;language-text&quot;&gt;ReactDOM.render&lt;/code&gt; directly. Instead, React apps tend to be broken down into functions like this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Form&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; showMessage &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; message &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;showMessage&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    message &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;I was just added here!&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;dialog&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;dialog&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This example doesn’t suffer from the problem we just described. It might be easier to see why if we use object notation instead of JSX. Look at the &lt;code class=&quot;language-text&quot;&gt;dialog&lt;/code&gt; child element tree:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Form&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; showMessage &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; message &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;showMessage&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    message &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      type&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;'p'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      props&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; children&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;'I was just added here!'&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    type&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;'dialog'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    props&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;      children&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;        message&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; type&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;'input'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; props&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;      &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/span&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Regardless of whether &lt;code class=&quot;language-text&quot;&gt;showMessage&lt;/code&gt; is &lt;code class=&quot;language-text&quot;&gt;true&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;false&lt;/code&gt;, the &lt;code class=&quot;language-text&quot;&gt;&amp;lt;input&amp;gt;&lt;/code&gt; is the second child and doesn’t change its tree position between renders.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If &lt;code class=&quot;language-text&quot;&gt;showMessage&lt;/code&gt; changes from &lt;code class=&quot;language-text&quot;&gt;false&lt;/code&gt; to &lt;code class=&quot;language-text&quot;&gt;true&lt;/code&gt;, React would walk the element tree, comparing it with the previous version:&lt;/p&gt;
&lt;p&gt;And the code executed by React would be similar to this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; inputNode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; dialogNode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;firstChild&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; pNode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'p'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
pNode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;textContent &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;'I was just added here!'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
dialogNode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;insertBefore&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pNode&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; inputNode&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;No input state is lost now.&lt;/p&gt;
&lt;h2 id=&quot;lists&quot;&gt;Lists&lt;/h2&gt;
&lt;p&gt;Comparing the element type at the same position in the tree is usually enough to decide whether reuse or re-create the corresponding host instance.&lt;/p&gt;
&lt;p&gt;But this only works well if children positions are static and don’t re-order. In our example above, even though &lt;code class=&quot;language-text&quot;&gt;message&lt;/code&gt; could be a “hole”, we still knew that there the input goes after the message, and there are no other children.&lt;/p&gt;
&lt;p&gt;With dynamic lists, we can’t be sure the order is ever the same:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ShoppingList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; list &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;form&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;list&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;item &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
          You bought &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;br&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
          Enter how many do you want: &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;form&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If the &lt;code class=&quot;language-text&quot;&gt;list&lt;/code&gt; of our shopping items is ever re-ordered, React will see that all &lt;code class=&quot;language-text&quot;&gt;p&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;input&lt;/code&gt; elements inside have the same type, and won’t know to move them. (From React’s point of view, the &lt;em&gt;items themselves&lt;/em&gt; changed, not their order.)&lt;/p&gt;
&lt;p&gt;The code executed by React to re-order 10 items would be something like:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; pNode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; formNode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;childNodes&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; textNode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; pNode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;firstChild&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  textNode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;textContent &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;'You bought '&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; items&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So instead of &lt;em&gt;re-ordering&lt;/em&gt; them, React would effectively &lt;em&gt;update&lt;/em&gt; each of them. This can create performance issues and possible bugs. For example, the content of the first input would stay reflected in first input &lt;em&gt;after&lt;/em&gt; the sort — even though conceptually they might refer to different products in your shopping list!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This is why React nags you to specify a special property called &lt;code class=&quot;language-text&quot;&gt;key&lt;/code&gt; every time you include an array of elements in your output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ShoppingList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; list &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;form&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token plain-text&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;list&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;item &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;productId&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;          You bought &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token plain-text&quot;&gt;          &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;br&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token plain-text&quot;&gt;          Enter how many do you want: &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token plain-text&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token plain-text&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;form&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A &lt;code class=&quot;language-text&quot;&gt;key&lt;/code&gt; tells React that it should consider an item to be &lt;em&gt;conceptually&lt;/em&gt; the same even if it has different &lt;em&gt;positions&lt;/em&gt; inside its parent element between renders.&lt;/p&gt;
&lt;p&gt;When React sees &lt;code class=&quot;language-text&quot;&gt;&amp;lt;p key=&quot;42&quot;&amp;gt;&lt;/code&gt; inside a &lt;code class=&quot;language-text&quot;&gt;&amp;lt;form&amp;gt;&lt;/code&gt;, it will check if the previous render also contained &lt;code class=&quot;language-text&quot;&gt;&amp;lt;p key=&quot;42&quot;&amp;gt;&lt;/code&gt; inside the same &lt;code class=&quot;language-text&quot;&gt;&amp;lt;form&amp;gt;&lt;/code&gt;. This works even if &lt;code class=&quot;language-text&quot;&gt;&amp;lt;form&amp;gt;&lt;/code&gt; children changed their order. React will reuse the previous host instance with the same key if it exists, and re-order the siblings accordingly.&lt;/p&gt;
&lt;p&gt;Note that the &lt;code class=&quot;language-text&quot;&gt;key&lt;/code&gt; is only relevant within a particular parent React element, such as a &lt;code class=&quot;language-text&quot;&gt;&amp;lt;form&amp;gt;&lt;/code&gt;. React won’t try to “match up” elements with the same keys between different parents. (React doesn’t have idiomatic support for moving a host instance between different parents without re-creating it.)&lt;/p&gt;
&lt;p&gt;What’s a good value for a &lt;code class=&quot;language-text&quot;&gt;key&lt;/code&gt;? An easy way to answer this is to ask: &lt;strong&gt;when would &lt;em&gt;you&lt;/em&gt; say an item is the “same” even if the order changed?&lt;/strong&gt; For example, in our shopping list, the product ID uniquely identifies it between siblings.&lt;/p&gt;
&lt;h2 id=&quot;components&quot;&gt;Components&lt;/h2&gt;
&lt;p&gt;We’ve already seen functions that return React elements:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Form&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; showMessage &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; message &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;showMessage&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    message &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;I was just added here!&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;dialog&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;dialog&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;They are called &lt;em&gt;components&lt;/em&gt;. They let us create our own “toolbox” of buttons, avatars, comments, and so on. Components are the bread and butter of React.&lt;/p&gt;
&lt;p&gt;Components take one argument — an object hash. It contains “props” (short for “properties”). Here, &lt;code class=&quot;language-text&quot;&gt;showMessage&lt;/code&gt; is a prop. They’re like named arguments.&lt;/p&gt;
&lt;h2 id=&quot;purity&quot;&gt;Purity&lt;/h2&gt;
&lt;p&gt;React components are assumed to be pure with respect to their props.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  
  props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isActive &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In general, mutation is not idiomatic in React. (We’ll talk more about the idiomatic way to update the UI in response to events later.)&lt;/p&gt;
&lt;p&gt;However, &lt;em&gt;local mutation&lt;/em&gt; is absolutely fine:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;FriendList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; friends &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; items &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; friends&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; friend &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; friends&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;    items&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;/span&gt;      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Friend&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;friend&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;friend&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;friend&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;section&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;items&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;section&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We created &lt;code class=&quot;language-text&quot;&gt;items&lt;/code&gt; &lt;em&gt;while rendering&lt;/em&gt; and no other component “saw” it so we can mutate it as much as we like before handing it off as part of the render result. There is no need to contort your code to avoid local mutation.&lt;/p&gt;
&lt;p&gt;Similarly, lazy initialization is fine despite not being fully “pure”:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ExpenseForm&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  
  SuperCalculator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;initializeIfNotReady&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As long as calling a component multiple times is safe and doesn’t affect rendering of other components, React doesn’t care if it’s 100% pure in the strict FP sense of the word. &lt;a href=&quot;https://stackoverflow.com/questions/1077412/what-is-an-idempotent-operation&quot;&gt;Idempotence&lt;/a&gt; is more important to React than purity.&lt;/p&gt;
&lt;p&gt;That said, side effects that are directly visible to the user are not allowed in React components. In other words, merely &lt;em&gt;calling&lt;/em&gt; a component function shouldn’t by itself produce a change on the screen.&lt;/p&gt;
&lt;h2 id=&quot;recursion&quot;&gt;Recursion&lt;/h2&gt;
&lt;p&gt;How do we &lt;em&gt;use&lt;/em&gt; components from other components? Components are functions so we &lt;em&gt;could&lt;/em&gt; call them:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; reactElement &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Form&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; showMessage&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
ReactDOM&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;reactElement&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; domContainer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, this is &lt;em&gt;not&lt;/em&gt; the idiomatic way to use components in the React runtime.&lt;/p&gt;
&lt;p&gt;Instead, the idiomatic way to use a component is with the same mechanism we’ve already seen before — React elements. &lt;strong&gt;This means that you don’t directly call the component function, but instead let React later do it for you&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;code class=&quot;language-jsx&quot;&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; reactElement &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Form&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;showMessage&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
ReactDOM&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;reactElement&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; domContainer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And somewhere inside React, your component will be called:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;code class=&quot;language-jsx&quot;&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; type &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; reactElement&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; props &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; reactElement&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Component function names are by convention capitalized. When the JSX transform sees &lt;code class=&quot;language-text&quot;&gt;&amp;lt;Form&amp;gt;&lt;/code&gt; rather than &lt;code class=&quot;language-text&quot;&gt;&amp;lt;form&amp;gt;&lt;/code&gt;, it makes the object &lt;code class=&quot;language-text&quot;&gt;type&lt;/code&gt; itself an identifier rather than a string:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;code class=&quot;language-jsx&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;form&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; 
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Form&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There is no global registration mechanism — we literally refer to &lt;code class=&quot;language-text&quot;&gt;Form&lt;/code&gt; by name when typing &lt;code class=&quot;language-text&quot;&gt;&amp;lt;Form /&amp;gt;&lt;/code&gt;. If &lt;code class=&quot;language-text&quot;&gt;Form&lt;/code&gt; doesn’t exist in local scope, you’ll see a JavaScript error just like you normally would with a bad variable name.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Okay, so what does React do when an element type is a function? It calls your component, and asks what element &lt;em&gt;that&lt;/em&gt; component wants to render.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This process continues recursively, and is described in more detail &lt;a href=&quot;https://reactjs.org/blog/2015/12/18/react-components-elements-and-instances.html&quot;&gt;here&lt;/a&gt;. In short, it looks like this:&lt;/p&gt;
&lt;ul readability=&quot;3&quot;&gt;&lt;li&gt;&lt;strong&gt;You:&lt;/strong&gt; &lt;code class=&quot;language-text&quot;&gt;ReactDOM.render(&amp;lt;App /&amp;gt;, domContainer)&lt;/code&gt;&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;strong&gt;React:&lt;/strong&gt; Hey &lt;code class=&quot;language-text&quot;&gt;App&lt;/code&gt;, what do you render to?&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;App&lt;/code&gt;: I render &lt;code class=&quot;language-text&quot;&gt;&amp;lt;Layout&amp;gt;&lt;/code&gt; with &lt;code class=&quot;language-text&quot;&gt;&amp;lt;Content&amp;gt;&lt;/code&gt; inside.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;strong&gt;React:&lt;/strong&gt; Hey &lt;code class=&quot;language-text&quot;&gt;Layout&lt;/code&gt;, what do you render to?&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Layout&lt;/code&gt;: I render my children in a &lt;code class=&quot;language-text&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt;. My child was &lt;code class=&quot;language-text&quot;&gt;&amp;lt;Content&amp;gt;&lt;/code&gt; so I guess that goes into the &lt;code class=&quot;language-text&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;strong&gt;React:&lt;/strong&gt; Hey &lt;code class=&quot;language-text&quot;&gt;&amp;lt;Content&amp;gt;&lt;/code&gt;, what do you render to?&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Content&lt;/code&gt;: I render an &lt;code class=&quot;language-text&quot;&gt;&amp;lt;article&amp;gt;&lt;/code&gt; with some text and a &lt;code class=&quot;language-text&quot;&gt;&amp;lt;Footer&amp;gt;&lt;/code&gt; inside.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;strong&gt;React:&lt;/strong&gt; Hey &lt;code class=&quot;language-text&quot;&gt;&amp;lt;Footer&amp;gt;&lt;/code&gt;, what do you render to?&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Footer&lt;/code&gt;: I render a &lt;code class=&quot;language-text&quot;&gt;&amp;lt;footer&amp;gt;&lt;/code&gt; with some more text.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;React:&lt;/strong&gt; Okay, here you go:&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;code class=&quot;language-jsx&quot;&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;article&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    Some text
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;footer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;some more text&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;footer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;article&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is why we say reconciliation is recursive. When React walks the element tree, it might meet an element whose &lt;code class=&quot;language-text&quot;&gt;type&lt;/code&gt; is a component. It will call it and keep descending down the tree of returned React elements. Eventually we’ll run out of components, and React will know what to change in the host tree.&lt;/p&gt;
&lt;p&gt;The same reconciliation rules we already discussed apply here too. If the &lt;code class=&quot;language-text&quot;&gt;type&lt;/code&gt; at the same position (as determined by index and optional &lt;code class=&quot;language-text&quot;&gt;key&lt;/code&gt;) changes, React will throw away the host instances inside, and re-create them.&lt;/p&gt;
&lt;h2 id=&quot;inversion-of-control&quot;&gt;Inversion of Control&lt;/h2&gt;
&lt;p&gt;You might be wondering: why don’t we just call components directly? Why write &lt;code class=&quot;language-text&quot;&gt;&amp;lt;Form /&amp;gt;&lt;/code&gt; rather than &lt;code class=&quot;language-text&quot;&gt;Form()&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;React can do its job better if it “knows” about your components rather than if it only sees the React element tree after recursively calling them.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;code class=&quot;language-jsx&quot;&gt;

ReactDOM&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;Layout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; children&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Article&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  domContainer
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;



ReactDOM&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Layout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Article&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;Layout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  domContainer
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is a classic example of &lt;a href=&quot;https://en.wikipedia.org/wiki/Inversion_of_control&quot;&gt;inversion of control&lt;/a&gt;. There’s a few interesting properties we get by letting React take control of calling our components:&lt;/p&gt;
&lt;ul readability=&quot;9.6759847522236&quot;&gt;&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;&lt;strong&gt;Components become more than functions.&lt;/strong&gt; React can augment component functions with features like &lt;em&gt;local state&lt;/em&gt; that are tied to the component identity in the tree. A good runtime provides fundamental abstractions that match the problem at hand. As we already mentioned, React is oriented specifically at programs that render UI trees and respond to interactions. If you called components directly, you’d have to build these features yourself.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;Component types participate in the reconciliation.&lt;/strong&gt; By letting React call your components, you also tell it more about the conceptual structure of your tree. For example, when you move from rendering &lt;code class=&quot;language-text&quot;&gt;&amp;lt;Feed&amp;gt;&lt;/code&gt; to the &lt;code class=&quot;language-text&quot;&gt;&amp;lt;Profile&amp;gt;&lt;/code&gt; page, React won’t attempt to re-use host instances inside them — just like when you replace &lt;code class=&quot;language-text&quot;&gt;&amp;lt;button&amp;gt;&lt;/code&gt; with a &lt;code class=&quot;language-text&quot;&gt;&amp;lt;p&amp;gt;&lt;/code&gt;. All state will be gone — which is usually good when you render a conceptually different view. You wouldn’t want to preserve input state between &lt;code class=&quot;language-text&quot;&gt;&amp;lt;PasswordForm&amp;gt;&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;&amp;lt;MessengerChat&amp;gt;&lt;/code&gt; even if the &lt;code class=&quot;language-text&quot;&gt;&amp;lt;input&amp;gt;&lt;/code&gt; position in the tree accidentally “lines up” between them.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3.6584022038567&quot;&gt;
&lt;p&gt;&lt;strong&gt;React can delay the reconciliation.&lt;/strong&gt; If React takes control over calling our components, it can do many interesting things. For example, it can let the browser do some work between the component calls so that re-rendering a large component tree &lt;a href=&quot;https://reactjs.org/blog/2018/03/01/sneak-peek-beyond-react-16.html&quot;&gt;doesn’t block the main thread&lt;/a&gt;. Orchestrating this manually without reimplementing a large part of React is difficult.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0.87654320987654&quot;&gt;
&lt;p&gt;&lt;strong&gt;A better debugging story.&lt;/strong&gt; If components are first-class citizens that the library is aware of, we can build &lt;a href=&quot;https://github.com/facebook/react-devtools&quot;&gt;rich developer tools&lt;/a&gt; for introspection in development.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The last benefit to React calling your component functions is &lt;em&gt;lazy evaluation&lt;/em&gt;. Let’s see what this means.&lt;/p&gt;
&lt;h2 id=&quot;lazy-evaluation&quot;&gt;Lazy Evaluation&lt;/h2&gt;
&lt;p&gt;When we call functions in JavaScript, arguments are evaluated before the call:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;code class=&quot;language-jsx&quot;&gt;
&lt;span class=&quot;token function&quot;&gt;eat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  
  &lt;span class=&quot;token function&quot;&gt;prepareMeal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is usually what JavaScript developers expect because JavaScript functions can have implicit side effects. It would be surprising if we called a function, but it wouldn’t execute until its result gets somehow “used” in JavaScript.&lt;/p&gt;
&lt;p&gt;However, React components are &lt;a href=&quot;https://overreacted.io/react-as-a-ui-runtime/#purity&quot;&gt;relatively&lt;/a&gt; pure. There is absolutely no need to execute it if we know its result won’t get rendered on the screen.&lt;/p&gt;
&lt;p&gt;Consider this component putting &lt;code class=&quot;language-text&quot;&gt;&amp;lt;Comments&amp;gt;&lt;/code&gt; inside a &lt;code class=&quot;language-text&quot;&gt;&amp;lt;Page&amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Story&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; currentUser &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  
  
  
  
  
  
  
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Page&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;currentUser&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;&lt;span class=&quot;token plain-text&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Comments&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;Page&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;language-text&quot;&gt;Page&lt;/code&gt; component can render the children given to it inside some &lt;code class=&quot;language-text&quot;&gt;Layout&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Page&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; currentUser&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; children &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Layout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;&lt;span class=&quot;token plain-text&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;children&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;Layout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;(&lt;code class=&quot;language-text&quot;&gt;&amp;lt;A&amp;gt;&amp;lt;B /&amp;gt;&amp;lt;/A&amp;gt;&lt;/code&gt; in JSX is the same as &lt;code class=&quot;language-text&quot;&gt;&amp;lt;A children={&amp;lt;B /&amp;gt;} /&amp;gt;&lt;/code&gt;.)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;But what if it has an early exit condition?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Page&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; currentUser&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; children &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;currentUser&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isLoggedIn&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;Please login&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Layout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token plain-text&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;children&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token plain-text&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;Layout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we called &lt;code class=&quot;language-text&quot;&gt;Comments()&lt;/code&gt; as a function, it would execute immediately regardless of whether &lt;code class=&quot;language-text&quot;&gt;Page&lt;/code&gt; wants to render them or not:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;code class=&quot;language-jsx&quot;&gt;


&lt;span class=&quot;gatsby-highlight-code-line&quot;/&gt;

&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Page&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;&lt;span class=&quot;token plain-text&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Comments&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;Page&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But if we pass a React element, we don’t execute &lt;code class=&quot;language-text&quot;&gt;Comments&lt;/code&gt; ourselves at all:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;code class=&quot;language-jsx&quot;&gt;


&lt;span class=&quot;gatsby-highlight-code-line&quot;/&gt;

&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Page&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;&lt;span class=&quot;token plain-text&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Comments&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;Page&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This lets React decide when and &lt;em&gt;whether&lt;/em&gt; to call it. If our &lt;code class=&quot;language-text&quot;&gt;Page&lt;/code&gt; component ignores its &lt;code class=&quot;language-text&quot;&gt;children&lt;/code&gt; prop and renders &lt;code class=&quot;language-text&quot;&gt;&amp;lt;h1&amp;gt;Please login&amp;lt;/h1&amp;gt;&lt;/code&gt; instead, React won’t even attempt to call the &lt;code class=&quot;language-text&quot;&gt;Comments&lt;/code&gt; function. What’s the point?&lt;/p&gt;
&lt;p&gt;This is good because it both lets us avoid unnecessary rendering work that would be thrown away, and makes the code less fragile. (We don’t care if &lt;code class=&quot;language-text&quot;&gt;Comments&lt;/code&gt; throws or not when the user is logged out — it won’t be called.)&lt;/p&gt;
&lt;h2 id=&quot;state&quot;&gt;State&lt;/h2&gt;
&lt;p&gt;We’ve talked &lt;a href=&quot;https://overreacted.io/react-as-a-ui-runtime/#reconciliation&quot;&gt;earlier&lt;/a&gt; about identity and how element’s conceptual “position” in the tree tells React whether to re-use a host instance or create a new one. Host instances can have all kinds of local state: focus, selection, input, etc. We want to preserve this state between updates that conceptually render the same UI. We also want to predictably destroy it when we render something conceptually different (such as moving from &lt;code class=&quot;language-text&quot;&gt;&amp;lt;SignupForm&amp;gt;&lt;/code&gt; to &lt;code class=&quot;language-text&quot;&gt;&amp;lt;MessengerChat&amp;gt;&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Local state is so useful that React lets &lt;em&gt;your own&lt;/em&gt; components have it too.&lt;/strong&gt; Components are still functions but React augments them with features that are useful for UIs. Local state tied to the position in the tree is one of these features.&lt;/p&gt;
&lt;p&gt;We call these features &lt;em&gt;Hooks&lt;/em&gt;. For example, &lt;code class=&quot;language-text&quot;&gt;useState&lt;/code&gt; is a Hook.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Example&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setCount&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;&lt;span class=&quot;token plain-text&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;You clicked &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt; times&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;&lt;span class=&quot;token plain-text&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setCount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;count &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;        Click me&lt;/span&gt;
&lt;span class=&quot;token plain-text&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token plain-text&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It returns a pair of values: the current state and a function that updates it.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Array_destructuring&quot;&gt;array destructuring&lt;/a&gt; syntax lets us give arbitrary names to our state variables. For example, I called this pair &lt;code class=&quot;language-text&quot;&gt;count&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;setCount&lt;/code&gt;, but it could’ve been a &lt;code class=&quot;language-text&quot;&gt;banana&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;setBanana&lt;/code&gt;. In the text below, I will use &lt;code class=&quot;language-text&quot;&gt;setState&lt;/code&gt; to refer to the second value regardless of its actual name in the specific examples.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(You can learn more about &lt;code class=&quot;language-text&quot;&gt;useState&lt;/code&gt; and other Hooks provided by React &lt;a href=&quot;https://reactjs.org/docs/hooks-intro.html&quot;&gt;here&lt;/a&gt;.)&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;consistency&quot;&gt;Consistency&lt;/h2&gt;
&lt;p&gt;Even if we want to split the reconciliation process itself into &lt;a href=&quot;https://www.youtube.com/watch?v=mDdgfyRB5kg&quot;&gt;non-blocking&lt;/a&gt; chunks of work, we should still perform the actual host tree operations in a single synchronous swoop. This way we can ensure that the user doesn’t see a half-updated UI, and that the browser doesn’t perform unnecesssary layout and style recalculation for intermediate states that the user shouldn’t see.&lt;/p&gt;
&lt;p&gt;This is why React splits all work into the “render phase” and the “commit phase”. &lt;em&gt;Render phase&lt;/em&gt; is when React calls your components and performs reconciliation. It is safe to interrupt and &lt;a href=&quot;https://reactjs.org/blog/2018/03/01/sneak-peek-beyond-react-16.html&quot;&gt;in the future&lt;/a&gt; will be asynchronous. &lt;em&gt;Commit phase&lt;/em&gt; is when React touches the host tree. It is always synchronous.&lt;/p&gt;
&lt;h2 id=&quot;memoization&quot;&gt;Memoization&lt;/h2&gt;
&lt;p&gt;When a parent schedules an update by calling &lt;code class=&quot;language-text&quot;&gt;setState&lt;/code&gt;, by default React reconciles its whole child subtree. This is because React can’t know whether an update in the parent would affect the child or not, and by default React opts to be consistent. This may sound very expensive but in practice it’s not a problem for small and medium-sized subtrees.&lt;/p&gt;
&lt;p&gt;When trees get too deep or wide, you can tell React to &lt;a href=&quot;https://en.wikipedia.org/wiki/Memoization&quot;&gt;memoize&lt;/a&gt; a subtree and reuse previous render result during shallowly equal prop changes:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Row&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; item &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;memo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Row&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now &lt;code class=&quot;language-text&quot;&gt;setState&lt;/code&gt; in a parent &lt;code class=&quot;language-text&quot;&gt;&amp;lt;Table&amp;gt;&lt;/code&gt; component would skip over reconciling &lt;code class=&quot;language-text&quot;&gt;Row&lt;/code&gt;s whose &lt;code class=&quot;language-text&quot;&gt;item&lt;/code&gt; is referentially equal to the &lt;code class=&quot;language-text&quot;&gt;item&lt;/code&gt; rendered last time.&lt;/p&gt;
&lt;p&gt;You can get fine-grained memoization at the level of individual expressions with the &lt;a href=&quot;https://reactjs.org/docs/hooks-reference.html#usememo&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;useMemo()&lt;/code&gt; Hook&lt;/a&gt;. The cache is local to component tree position and will be destroyed together with its local state. It only holds one last item.&lt;/p&gt;
&lt;p&gt;React intentionally doesn’t memoize components by default. Many components always receive different props so memoizing them would be a net loss.&lt;/p&gt;
&lt;h2 id=&quot;raw-models&quot;&gt;Raw Models&lt;/h2&gt;
&lt;p&gt;Ironically, React doesn’t use a “reactivity” system for fine-grained updates. In other words, any update at the top triggers reconciliation instead of updating just the components affected by changes.&lt;/p&gt;
&lt;p&gt;This is an intenional design decision. &lt;a href=&quot;https://calibreapp.com/blog/time-to-interactive/&quot;&gt;Time to interactive&lt;/a&gt; is a crucial metric in consumer web applications, and traversing models to set up fine-grained listeners spends that precious time. Additionally, in many apps interactions tend to result either in small (button hover) or large (page transition) updates, in which case fine-grained subscriptions are a waste of memory resources.&lt;/p&gt;
&lt;p&gt;One of the core design principles of React is that it works with raw data. If you have a bunch of JavaScript objects received from the network, you can pump them directly into your components with no preprocessing. There are no gotchas about which properties you can access, or unexpected performance cliffs when a structure slightly changes. React rendering is O(&lt;em&gt;view size&lt;/em&gt;) rather than O(&lt;em&gt;model size&lt;/em&gt;), and you can significantly cut the &lt;em&gt;view size&lt;/em&gt; with &lt;a href=&quot;https://react-window.now.sh/#/examples/list/fixed-size&quot;&gt;windowing&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are some kinds of applications where fine-grained subscriptions are beneficial — such as stock tickers. This is a rare example of “everything constantly updating at the same time”. While imperative escape hatches can help optimize such code, React might not be the best fit for this use case. Still, you can implement your own fine-grained subscription system on top of React.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note that there are common performance issues that even fine-grained subscriptions and “reactivity” systems can’t solve.&lt;/strong&gt; For example, rendering a &lt;em&gt;new&lt;/em&gt; deep tree (which happens on every page transition) without blocking the browser. Change tracking doesn’t make it faster — it makes it slower because we have to do more work to set up subscriptions. Another problem is that we have to wait for data before we can start rendering the view. In React, we aim to solve both of these problems with &lt;a href=&quot;https://reactjs.org/blog/2018/03/01/sneak-peek-beyond-react-16.html&quot;&gt;Concurrent Rendering&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;batching&quot;&gt;Batching&lt;/h2&gt;
&lt;p&gt;Several components may want to update state in response to the same event. This example is convoluted but it illustrates a common pattern:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Parent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setCount&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setCount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;count &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;      Parent clicked &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt; times&lt;/span&gt;
&lt;span class=&quot;token plain-text&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Child&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token plain-text&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Child&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setCount&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setCount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;count &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;      Child clicked &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt; times&lt;/span&gt;
&lt;span class=&quot;token plain-text&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When an event is dispatched, the child’s &lt;code class=&quot;language-text&quot;&gt;onClick&lt;/code&gt; fires first (triggering its &lt;code class=&quot;language-text&quot;&gt;setState&lt;/code&gt;). Then the parent calls &lt;code class=&quot;language-text&quot;&gt;setState&lt;/code&gt; in its own &lt;code class=&quot;language-text&quot;&gt;onClick&lt;/code&gt; handler.&lt;/p&gt;
&lt;p&gt;If React immediately re-rendered components in response to &lt;code class=&quot;language-text&quot;&gt;setState&lt;/code&gt; calls, we’d end up rendering the child twice:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; Entering React's browser click event handler &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;Child&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;onClick&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; setState
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;  &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; re&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;render Child &lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Parent&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;onClick&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; setState
  &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; re&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;render Parent
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;  &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; re&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;render Child&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; Exiting React's browser click event handler &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first &lt;code class=&quot;language-text&quot;&gt;Child&lt;/code&gt; render would be wasted. And we couldn’t make React skip rendering &lt;code class=&quot;language-text&quot;&gt;Child&lt;/code&gt; for the second time because the &lt;code class=&quot;language-text&quot;&gt;Parent&lt;/code&gt; might pass some different data to it based on its updated state.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This is why React batches updates inside event handlers:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; Entering React's browser click event handler &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;Child&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;onClick&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; setState
&lt;span class=&quot;token function&quot;&gt;Parent&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;onClick&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; setState
&lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; Processing state updates                     &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; re&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;render Parent
  &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; re&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;render Child
&lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; Exiting React's browser click event handler  &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;language-text&quot;&gt;setState&lt;/code&gt; calls in components wouldn’t immediately cause a re-render. Instead, React would execute all event handlers first, and then trigger a single re-render batching all of those updates together.&lt;/p&gt;
&lt;p&gt;Batching is good for performance but can be surprising if you write code like:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;code class=&quot;language-jsx&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setCounter&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;setCounter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;count &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we start with &lt;code class=&quot;language-text&quot;&gt;count&lt;/code&gt; set to &lt;code class=&quot;language-text&quot;&gt;0&lt;/code&gt;, these would just be three &lt;code class=&quot;language-text&quot;&gt;setCount(1)&lt;/code&gt; calls. To fix this, &lt;code class=&quot;language-text&quot;&gt;setState&lt;/code&gt; provides an overload that accepts an “updater” function:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;code class=&quot;language-jsx&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setCounter&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;setCounter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;c &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; c &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;React would put the updater functions in a queue, and later run them in sequence, resulting in a re-render with &lt;code class=&quot;language-text&quot;&gt;count&lt;/code&gt; set to &lt;code class=&quot;language-text&quot;&gt;3&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When state logic gets more complex than a few &lt;code class=&quot;language-text&quot;&gt;setState&lt;/code&gt; calls, I recommend to express it as a local state reducer with the &lt;a href=&quot;https://reactjs.org/docs/hooks-reference.html#usereducer&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;useReducer&lt;/code&gt; Hook&lt;/a&gt;. It’s like an evolution of this “updater” pattern where each update is given a name:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;code class=&quot;language-jsx&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;counter&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; dispatch&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useReducer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; action&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;action &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;'increment'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; state &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'increment'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'increment'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'increment'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;language-text&quot;&gt;action&lt;/code&gt; argument can be anything, although an object is a common choice.&lt;/p&gt;
&lt;h2 id=&quot;call-tree&quot;&gt;Call Tree&lt;/h2&gt;
&lt;p&gt;A programming language runtime usually has a &lt;a href=&quot;https://medium.freecodecamp.org/understanding-the-javascript-call-stack-861e41ae61d4&quot;&gt;call stack&lt;/a&gt;. When a function &lt;code class=&quot;language-text&quot;&gt;a()&lt;/code&gt; calls &lt;code class=&quot;language-text&quot;&gt;b()&lt;/code&gt; which itself calls &lt;code class=&quot;language-text&quot;&gt;c()&lt;/code&gt;, somewhere in the JavaScript engine there’s a data structure like &lt;code class=&quot;language-text&quot;&gt;[a, b, c]&lt;/code&gt; that “keeps track” of where you are and what code to execute next. Once you exit out of &lt;code class=&quot;language-text&quot;&gt;c&lt;/code&gt;, its call stack frame is gone — poof! It’s not needed anymore. We jump back into &lt;code class=&quot;language-text&quot;&gt;b&lt;/code&gt;. By the time we exit &lt;code class=&quot;language-text&quot;&gt;a&lt;/code&gt;, the call stack is empty.&lt;/p&gt;
&lt;p&gt;Of course, React itself runs in JavaScript and obeys JavaScript rules. But we can imagine that internally React has some kind of its own call stack to remember which component we are currently rendering, e.g. &lt;code class=&quot;language-text&quot;&gt;[App, Page, Layout, Article /* we're here */]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;React is different from a general purpose language runtime because it’s aimed at rendering UI trees. These trees need to “stay alive” for us to interact with them. The DOM doesn’t disappear after our first &lt;code class=&quot;language-text&quot;&gt;ReactDOM.render()&lt;/code&gt; call.&lt;/p&gt;
&lt;p&gt;This may be stretching the metaphor but I like to think of React components as being in a “call tree” rather than just a “call stack”. When we go “out” of the &lt;code class=&quot;language-text&quot;&gt;Article&lt;/code&gt; component, its React “call tree” frame doesn’t get destroyed. We need to keep the local state and references to the host instances &lt;a href=&quot;https://medium.com/react-in-depth/the-how-and-why-on-reacts-usage-of-linked-list-in-fiber-67f1014d0eb7&quot;&gt;somewhere&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;These “call tree” frames &lt;em&gt;are&lt;/em&gt; destroyed along with their local state and host instances, but only when the &lt;a href=&quot;https://overreacted.io/react-as-a-ui-runtime/#reconciliation&quot;&gt;reconciliation&lt;/a&gt; rules say it’s necessary. If you ever read React source, you might have seen these frames being referred to as &lt;a href=&quot;https://en.wikipedia.org/wiki/Fiber_(computer_science)&quot;&gt;Fibers&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Fibers are where the local state actually lives. When state is updated, React marks the Fibers below as needing reconciliation, and calls those components.&lt;/p&gt;
&lt;h2 id=&quot;context&quot;&gt;Context&lt;/h2&gt;
&lt;p&gt;In React, we pass things down to other components as props. Sometimes, the majority of component need the same thing — for example, the currently chosen visual theme. It gets cumbersome to pass it down through every level.&lt;/p&gt;
&lt;p&gt;In React, this is solved by &lt;a href=&quot;https://reactjs.org/docs/context.html&quot;&gt;Context&lt;/a&gt;. It is essentially like &lt;a href=&quot;http://wiki.c2.com/?DynamicScoping&quot;&gt;dynamic scoping&lt;/a&gt; for components. It’s like a wormhole that lets you put something on the top, and have every child at the bottom be able to read it and re-render when it changes.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; ThemeContext &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createContext&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;'light'&lt;/span&gt; 
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;DarkApp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ThemeContext.Provider&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;dark&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;MyComponents&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ThemeContext.Provider&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;SomeDeeplyNestedChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; theme &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useContext&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ThemeContext&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When &lt;code class=&quot;language-text&quot;&gt;SomeDeeplyNestedChild&lt;/code&gt; renders, &lt;code class=&quot;language-text&quot;&gt;useContext(ThemeContext)&lt;/code&gt; will look for the closest &lt;code class=&quot;language-text&quot;&gt;&amp;lt;ThemeContext.Provider&amp;gt;&lt;/code&gt; above it in the tree, and use its &lt;code class=&quot;language-text&quot;&gt;value&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;(In practice, React maintains a context stack while it renders.)&lt;/p&gt;
&lt;p&gt;If there’s no &lt;code class=&quot;language-text&quot;&gt;ThemeContext.Provider&lt;/code&gt; above, the result of &lt;code class=&quot;language-text&quot;&gt;useContext(ThemeContext)&lt;/code&gt; call will be the default value specified in the &lt;code class=&quot;language-text&quot;&gt;createContext()&lt;/code&gt; call. In our example, it is &lt;code class=&quot;language-text&quot;&gt;'light'&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;effects&quot;&gt;Effects&lt;/h2&gt;
&lt;p&gt;We mentioned earlier that React components shouldn’t have observable side effects during rendering. But side effects are sometimes necessary. We may want to manage focus, draw on a canvas, subscribe to a data source, and so on.&lt;/p&gt;
&lt;p&gt;In React, this is done by declaring an effect:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Example&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setCount&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;  &lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;    document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;title &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;`You clicked &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;count&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; times`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token plain-text&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;You clicked &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt; times&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token plain-text&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setCount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;count &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token plain-text&quot;&gt;        Click me&lt;/span&gt;
&lt;span class=&quot;token plain-text&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token plain-text&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When possible, React defers executing effects until after the browser re-paints the screen. This is good because code like data source subscriptions shouldn’t hurt &lt;a href=&quot;https://calibreapp.com/blog/time-to-interactive/&quot;&gt;time to interactive&lt;/a&gt; and &lt;a href=&quot;https://developers.google.com/web/tools/lighthouse/audits/first-meaningful-paint&quot;&gt;time to first paint&lt;/a&gt;. (There’s a &lt;a href=&quot;https://reactjs.org/docs/hooks-reference.html#uselayouteffect&quot;&gt;rarely used&lt;/a&gt; Hook that lets you opt out of that behavior and do things synchronously. Avoid it.)&lt;/p&gt;
&lt;p&gt;Effects don’t just run once. They run both after component is shown to the user for the first time, and after it updates. Effects can close over current props and state, such as with &lt;code class=&quot;language-text&quot;&gt;count&lt;/code&gt; in the above example.&lt;/p&gt;
&lt;p&gt;Effects may require cleanup, such as in case of subscriptions. To clean up after itself, an effect can return a function:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;code class=&quot;language-jsx&quot;&gt;  &lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    DataSource&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addSubscription&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;handleChange&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; DataSource&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;removeSubscription&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;handleChange&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;React will execute the returned function before applying this effect the next time, and also before the component is destroyed.&lt;/p&gt;
&lt;p&gt;Sometimes, re-running the effect on every render can be undesirable. You can tell React to &lt;a href=&quot;https://reactjs.org/docs/hooks-effect.html#tip-optimizing-performance-by-skipping-effects&quot;&gt;skip&lt;/a&gt; applying an effect if certain variables didn’t change:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;code class=&quot;language-jsx&quot;&gt;  &lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;title &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;`You clicked &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;count&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; times`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, it is often a premature optimization and can lead to problems if you’re not familiar with how JavaScript closures work.&lt;/p&gt;
&lt;p&gt;For example, this code is buggy:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;code class=&quot;language-jsx&quot;&gt;  &lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    DataSource&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addSubscription&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;handleChange&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; DataSource&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;removeSubscription&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;handleChange&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is buggy because &lt;code class=&quot;language-text&quot;&gt;[]&lt;/code&gt; says “don’t ever re-execute this effect”. But the effect closes over &lt;code class=&quot;language-text&quot;&gt;handleChange&lt;/code&gt; which is defined outside of it. And &lt;code class=&quot;language-text&quot;&gt;handleChange&lt;/code&gt; might reference any props or state:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;code class=&quot;language-jsx&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;handleChange&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we never let the effect re-run, &lt;code class=&quot;language-text&quot;&gt;handleChange&lt;/code&gt; will keep pointing at the version from the first render, and &lt;code class=&quot;language-text&quot;&gt;count&lt;/code&gt; will always be &lt;code class=&quot;language-text&quot;&gt;0&lt;/code&gt; inside of it.&lt;/p&gt;
&lt;p&gt;To solve this, make sure that if you specify the dependency array, it includes &lt;strong&gt;all&lt;/strong&gt; things that can change, including the functions:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;code class=&quot;language-jsx&quot;&gt;  &lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    DataSource&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addSubscription&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;handleChange&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; DataSource&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;removeSubscription&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;handleChange&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;handleChange&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Depending on your code, you might still see unnecessary resubscriptions because &lt;code class=&quot;language-text&quot;&gt;handleChange&lt;/code&gt; itself is different on every render. The &lt;a href=&quot;https://reactjs.org/docs/hooks-reference.html#usecallback&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;useCallback&lt;/code&gt;&lt;/a&gt; Hook can help you with that. Alternatively, you can just let it re-subscribe. For example, browser’s &lt;code class=&quot;language-text&quot;&gt;addEventListener&lt;/code&gt; API is extremely fast, and jumping through hoops to avoid calling it might cause more problems than it’s worth.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(You can learn more about &lt;code class=&quot;language-text&quot;&gt;useEffect&lt;/code&gt; and other Hooks provided by React &lt;a href=&quot;https://reactjs.org/docs/hooks-effect.html&quot;&gt;here&lt;/a&gt;.)&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;custom-hooks&quot;&gt;Custom Hooks&lt;/h2&gt;
&lt;p&gt;Since Hooks like &lt;code class=&quot;language-text&quot;&gt;useState&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;useEffect&lt;/code&gt; are function calls, we can compose them into our own Hooks:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;MyResponsiveComponent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; width &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useWindowWidth&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;/span&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;Window width is &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;width&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useWindowWidth&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;width&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setWidth&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerWidth&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;handleResize&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setWidth&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerWidth&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'resize'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; handleResize&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;removeEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'resize'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; handleResize&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; width&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Custom Hooks let different components share reusable stateful logic. Note that the &lt;em&gt;state itself&lt;/em&gt; is not shared. Each call to a Hook declares its own isolated state.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(You can learn more about writing your own Hooks &lt;a href=&quot;https://reactjs.org/docs/hooks-custom.html&quot;&gt;here&lt;/a&gt;.)&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;static-use-order&quot;&gt;Static Use Order&lt;/h2&gt;
&lt;p&gt;You can think of &lt;code class=&quot;language-text&quot;&gt;useState&lt;/code&gt; as a syntax for defining a “React state variable”. It’s not &lt;em&gt;really&lt;/em&gt; a syntax, of course. We’re still writing JavaScript. But we are looking at React as a runtime environment, and because React tailors JavaScript to describing UI trees, its features sometimes live closer to the language space.&lt;/p&gt;
&lt;p&gt;If &lt;code class=&quot;language-text&quot;&gt;use&lt;/code&gt; &lt;em&gt;was&lt;/em&gt; a syntax, it would make sense for it to be be at the top level:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;code class=&quot;language-jsx&quot;&gt;
component &lt;span class=&quot;token function&quot;&gt;Example&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setCount&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; use &lt;span class=&quot;token function&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token plain-text&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;You clicked &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt; times&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token plain-text&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setCount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;count &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token plain-text&quot;&gt;        Click me&lt;/span&gt;
&lt;span class=&quot;token plain-text&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token plain-text&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What would putting it into a condition or a callback or outside a component even mean?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;code class=&quot;language-jsx&quot;&gt;


&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setCount&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; use &lt;span class=&quot;token function&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

component &lt;span class=&quot;token function&quot;&gt;Example&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;condition&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setCount&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; use &lt;span class=&quot;token function&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    
    
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setCount&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; use &lt;span class=&quot;token function&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;React state is local to the &lt;em&gt;component&lt;/em&gt; and its identity in the tree. If &lt;code class=&quot;language-text&quot;&gt;use&lt;/code&gt; was a real syntax it would make sense to scope it to the top-level of a component too:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;code class=&quot;language-jsx&quot;&gt;
component &lt;span class=&quot;token function&quot;&gt;Example&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setCount&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; use &lt;span class=&quot;token function&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;condition&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setCount&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; use &lt;span class=&quot;token function&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is similar to how &lt;code class=&quot;language-text&quot;&gt;import&lt;/code&gt; only works at the top level of a module.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Of course, &lt;code class=&quot;language-text&quot;&gt;use&lt;/code&gt; is not actually a syntax.&lt;/strong&gt; (It wouldn’t bring much benefit and would create a lot of friction.)&lt;/p&gt;
&lt;p&gt;However, React &lt;em&gt;does&lt;/em&gt; expect that all calls to Hooks happen only at the top level of a component and unconditionally. These &lt;a href=&quot;https://reactjs.org/docs/hooks-rules.html&quot;&gt;Rules of Hooks&lt;/a&gt; can be enforced with &lt;a href=&quot;https://www.npmjs.com/package/eslint-plugin-react-hooks&quot;&gt;a linter plugin&lt;/a&gt;. There have been heated arguments about this design choice but in practice I haven’t seen it confusing people. I also wrote about why commonly proposed alternative &lt;a href=&quot;https://overreacted.io/why-do-hooks-rely-on-call-order/&quot;&gt;don’t work&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Internally, Hooks are implemented as &lt;a href=&quot;https://dev.to/aspittel/thank-u-next-an-introduction-to-linked-lists-4pph&quot;&gt;linked lists&lt;/a&gt;. When you call &lt;code class=&quot;language-text&quot;&gt;useState&lt;/code&gt;, we move the pointer to the next item. When we exit the component’s &lt;a href=&quot;https://overreacted.io/react-as-a-ui-runtime/#call-tree&quot;&gt;“call tree” frame&lt;/a&gt;, we save the resulting list there until the next render.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.com/@ryardley/react-hooks-not-magic-just-arrays-cd4f1857236e&quot;&gt;This article&lt;/a&gt; provides a simplified explanation for how Hooks work internally. Arrays might be an easier mental model than linked lists:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;
&lt;code class=&quot;language-jsx&quot;&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; hooks&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;hooks&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; hooks&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  
  hooks&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;


i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
hooks &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; fiber&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;hooks &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;YourComponent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

fiber&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;hooks &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; hooks&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;(If you’re curious, the real code is &lt;a href=&quot;https://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactFiberHooks.js&quot;&gt;here&lt;/a&gt;.)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This is roughly how each &lt;code class=&quot;language-text&quot;&gt;useState()&lt;/code&gt; call gets the right state. As we’ve learned &lt;a href=&quot;https://overreacted.io/react-as-a-ui-runtime/#reconciliation&quot;&gt;earlier&lt;/a&gt;, “matching things up” isn’t new to React — reconciliation relies on the elements matching up between renders in a similar way.&lt;/p&gt;
&lt;h2 id=&quot;whats-left-out&quot;&gt;What’s Left Out&lt;/h2&gt;
&lt;p&gt;We’ve touched on pretty much all important aspects of the React runtime environment. If you finished this page, you probably know React in more detail than 90% of its users. And there’s nothing wrong with that!&lt;/p&gt;
&lt;p&gt;There are some parts I left out — mostly because they’re unclear even to us. React doesn’t currently have a good story for multipass rendering, i.e. when the parent render needs information about the children. Also, the &lt;a href=&quot;https://reactjs.org/docs/error-boundaries.html&quot;&gt;error handling API&lt;/a&gt; doesn’t yet have a Hooks version. It’s possible that these two problems can be solved together. Concurrent Mode is not stable yet, and there are interesting questions about how Suspense fits into this picture. Maybe I’ll do a follow-up when they’re fleshed out and Suspense is ready for more than &lt;a href=&quot;https://reactjs.org/blog/2018/10/23/react-v-16-6.html#reactlazy-code-splitting-with-suspense&quot;&gt;lazy loading&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I think it speaks to the success of React’s API that you can get very far without ever thinking about most of these topics.&lt;/strong&gt; Good defaults like the reconciliation heuristics do the right thing in most cases. Warnings like the &lt;code class=&quot;language-text&quot;&gt;key&lt;/code&gt; warning nudge you when you risk shooting yourself in the foot.&lt;/p&gt;
&lt;p&gt;If you’re a UI library nerd, I hope this post was somewhat entertaining and clarified how React works in more depth. Or maybe you decided React is too complicated and you’ll never look it again. In either case, I’d love to hear from you on Twitter! Thank you for reading.&lt;/p&gt;
</description>
<pubDate>Sun, 03 Feb 2019 02:01:07 +0000</pubDate>
<dc:creator>danabramov</dc:creator>
<og:url>https://overreacted.io/react-as-a-ui-runtime/</og:url>
<og:title>React as a UI Runtime</og:title>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://overreacted.io/react-as-a-ui-runtime/</dc:identifier>
</item>
<item>
<title>Blackmailers use false copyright claims to shut down victims&amp;#039; YouTube accounts</title>
<link>https://boingboing.net/2019/01/30/moderation-at-scale.html</link>
<guid isPermaLink="true" >https://boingboing.net/2019/01/30/moderation-at-scale.html</guid>
<description>&lt;div id=&quot;story&quot; readability=&quot;89.257662560871&quot;&gt;&lt;span id=&quot;metadata&quot;/&gt;
&lt;div class=&quot;featuredimage&quot;&gt;&lt;span id=&quot;metadata&quot;&gt;&lt;img width=&quot;881&quot; height=&quot;616&quot; src=&quot;https://media.boingboing.net/wp-content/uploads/2019/01/8461872536_1e790c9e0c_o.jpg&quot; class=&quot;attachment-post-thumbnail size-post-thumbnail wp-post-image&quot; alt=&quot;&quot; srcset=&quot;https://i2.wp.com/media.boingboing.net/wp-content/uploads/2019/01/8461872536_1e790c9e0c_o.jpg?w=881&amp;amp;ssl=1 881w, https://i2.wp.com/media.boingboing.net/wp-content/uploads/2019/01/8461872536_1e790c9e0c_o.jpg?resize=300%2C210&amp;amp;ssl=1 300w, https://i2.wp.com/media.boingboing.net/wp-content/uploads/2019/01/8461872536_1e790c9e0c_o.jpg?resize=600%2C420&amp;amp;ssl=1 600w, https://i2.wp.com/media.boingboing.net/wp-content/uploads/2019/01/8461872536_1e790c9e0c_o.jpg?resize=768%2C537&amp;amp;ssl=1 768w&quot; sizes=&quot;(max-width: 881px) 100vw, 881px&quot;/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;span id=&quot;metadata&quot;/&gt;
&lt;p&gt;&lt;span id=&quot;metadata&quot;&gt;Youtube's ContentID system allows rightsholders to upload video and audio and block videos that contain their works (or put ads on those videos and take the revenue they generate), and to have the accounts of repeat copyright offenders permanently deleted, along with all their videos.&lt;/span&gt;&lt;/p&gt;
&lt;span id=&quot;metadata&quot;/&gt;

&lt;span id=&quot;metadata&quot;&gt;&lt;span id=&quot;more-698035&quot;/&gt;&lt;/span&gt;
&lt;p&gt;ContentID is badly flawed. On the one hand, it routinely catches things that aren't copyright infringements (like &lt;a href=&quot;https://boingboing.net/2012/02/27/rumblefish-claims-to-own-copyr.html&quot;&gt;birdsong&lt;/a&gt;, &lt;a href=&quot;https://boingboing.net/2018/01/08/a-youtube-video-of-white-noise.html&quot;&gt;white noise&lt;/a&gt;, or &lt;a href=&quot;https://boingboing.net/2018/09/05/mozart-bach-sorta-mach.html&quot;&gt;home-recorded&lt;/a&gt; performances of &lt;a href=&quot;https://boingboing.net/2018/12/18/roll-over-beethoven.html&quot;&gt;classical music&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;On the other hand, the system has few checks and balances. While Youtube requires that people who want to make ContentID claims go through a vetting process, the process is very lightweight and allows all kinds of bad actors in, who can then &lt;a href=&quot;https://boingboing.net/2018/12/26/youtube-let-a-contentid-scamme.html&quot;&gt;steal creators' revenues&lt;/a&gt; by falsely claiming copyright over their videos.&lt;/p&gt;
&lt;p&gt;No one expects Youtube to be perfect, but it also fails with a remarkable lack of grace. The small number of humans available to review contested claims means that people who fall afoul of machine error, sloppiness and criminal mischief are often unable to get a fair hearing or justice. This phenomenon is familiar to anyone who's had a complaint against one of the big platforms: unless your story makes the news, you're likely to get stuck in an email loop where your complaint keeps getting sent back with irrelevant, semi-automated responses that make it seem like no one has even paid enough attention to understand what's going on.&lt;/p&gt;
&lt;p&gt;That lack of human oversight creates the perfect conditions for all kinds of fraud and malice, and criminals have noticed.&lt;/p&gt;
&lt;p&gt;A Youtuber called ObbyRaidz, who makes videos about Minecraft, has found himself having received two copyright &quot;strikes&quot; on Youtube from a blackmailer calling themselves VengefulFlame, who has demanded &quot;$150 PayPal or $75 btc (Bitcoin)&quot; or equivalent &quot;goods/services&quot; to have the strikes removed. If ObbyRaidz doesn't comply, VengefulFlame could send one more complaint to Youtube and have ObbyRaidz's account -- and all the videos he's created -- permanently deleted.&lt;/p&gt;
&lt;p&gt;ObbyRaidz says he's been unable to get any help from Youtube, despite repeated complaints and entreaties.&lt;/p&gt;
&lt;p&gt;The extortion attempt is a timely reminder of what's at stake in the fight over the EU's &lt;a href=&quot;https://boingboing.net/tag/article-13&quot;&gt;Copyright Directive&lt;/a&gt;, which mandates a much broader version of ContentID, but for every service and every type of copyrighted work, from tweets to Minecraft skins. Under the proposal, anyone could add anything to the databases of blocked content, and get anyone else's work censored; while this could be used simply to suppress information that a fraudster doesn't like (say, reports of political corruption or complaints about a scammy business), they could also be used as fuel for extortion.&lt;/p&gt;
&lt;blockquote readability=&quot;14&quot;&gt;
&lt;p&gt;Like many YouTubers, ObbyRaidz says he’s worked “really hard” on his channel but with no help from YouTube, he’s scared he’s going to lose his entire channel due to these bogus complaints.&lt;/p&gt;
&lt;p&gt;“It’s not fun and i’m gonna be really sad to see if my channel gets terminated. Then I have to go through the process of getting in contact with YouTube and stuff. YouTube is very broken and I want to see if they can fix their system so this doesn’t happen to other content creators,” he says.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a href=&quot;https://torrentfreak.com/youtube-strikes-now-being-used-as-scammers-extortion-tool/?utm_source=feedburner&amp;amp;utm_medium=feed&amp;amp;utm_campaign=Feed%3A+Torrentfreak+%28Torrentfreak%29&quot;&gt;YouTube Strikes Now Being Used as Scammers’ Extortion Tool&lt;/a&gt; [Andy/Torrentfreak]
&lt;p&gt;(&lt;em&gt;Image: &lt;a href=&quot;https://www.flickr.com/photos/jeanette4/8461872536&quot;&gt;Valerie Lawson&lt;/a&gt;, CC-BY-SA&lt;/em&gt;)&lt;/p&gt;



&lt;/div&gt;&lt;div id=&quot;next-post-thumbnails&quot; readability=&quot;39.78021978022&quot;&gt;
&lt;div class=&quot;nextstory&quot; readability=&quot;28.166666666667&quot;&gt;

&lt;a href=&quot;https://boingboing.net/2019/01/31/save-eu-fix-copyright.html?utm_source=moreatbb&amp;amp;utm_medium=nextpost&amp;amp;utm_campaign=nextpostthumbnails&quot; onclick=&quot;clickTrack(this.href, 'Next Post Button', 'Next Post Thumbnails');&quot;&gt;&lt;img width=&quot;600&quot; height=&quot;300&quot; src=&quot;https://i2.wp.com/media.boingboing.net/wp-content/uploads/2019/01/article-13-germany-2.png?fit=600%2C300&amp;amp;ssl=1&quot; class=&quot;attachment-medium size-medium wp-post-image&quot; alt=&quot;&quot; srcset=&quot;https://i2.wp.com/media.boingboing.net/wp-content/uploads/2019/01/article-13-germany-2.png?w=1200&amp;amp;ssl=1 1200w, https://i2.wp.com/media.boingboing.net/wp-content/uploads/2019/01/article-13-germany-2.png?resize=300%2C150&amp;amp;ssl=1 300w, https://i2.wp.com/media.boingboing.net/wp-content/uploads/2019/01/article-13-germany-2.png?resize=600%2C300&amp;amp;ssl=1 600w, https://i2.wp.com/media.boingboing.net/wp-content/uploads/2019/01/article-13-germany-2.png?resize=768%2C384&amp;amp;ssl=1 768w, https://i2.wp.com/media.boingboing.net/wp-content/uploads/2019/01/article-13-germany-2.png?resize=930%2C465&amp;amp;ssl=1 930w&quot; sizes=&quot;(max-width: 600px) 100vw, 600px&quot;/&gt;&lt;/a&gt;
&lt;p&gt;The EU's plan to censor the internet with algorithms that block anything that might be a copyright infringement has only days to go before it will be too late for a vote before the upcoming elections, and so far, progress has been stalled thanks to France's unwillingness to accept tiny, meaningless concessions that Germany feels […]&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;https://boingboing.net/2019/01/31/save-eu-fix-copyright.html&quot;&gt;READ THE REST&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&quot;nextstory&quot; readability=&quot;26.331914893617&quot;&gt;

&lt;a href=&quot;https://boingboing.net/2019/01/29/all-textile-armored-transport.html?utm_source=moreatbb&amp;amp;utm_medium=nextpost&amp;amp;utm_campaign=nextpostthumbnails&quot; onclick=&quot;clickTrack(this.href, 'Next Post Button', 'Next Post Thumbnails');&quot;&gt;&lt;img width=&quot;600&quot; height=&quot;435&quot; src=&quot;https://i0.wp.com/media.boingboing.net/wp-content/uploads/2019/01/il_fullxfull.1038183068_j663.jpg?fit=600%2C435&amp;amp;ssl=1&quot; class=&quot;attachment-medium size-medium wp-post-image&quot; alt=&quot;&quot; srcset=&quot;https://i0.wp.com/media.boingboing.net/wp-content/uploads/2019/01/il_fullxfull.1038183068_j663.jpg?w=1500&amp;amp;ssl=1 1500w, https://i0.wp.com/media.boingboing.net/wp-content/uploads/2019/01/il_fullxfull.1038183068_j663.jpg?resize=300%2C218&amp;amp;ssl=1 300w, https://i0.wp.com/media.boingboing.net/wp-content/uploads/2019/01/il_fullxfull.1038183068_j663.jpg?resize=600%2C435&amp;amp;ssl=1 600w, https://i0.wp.com/media.boingboing.net/wp-content/uploads/2019/01/il_fullxfull.1038183068_j663.jpg?resize=768%2C557&amp;amp;ssl=1 768w, https://i0.wp.com/media.boingboing.net/wp-content/uploads/2019/01/il_fullxfull.1038183068_j663.jpg?resize=930%2C675&amp;amp;ssl=1 930w&quot; sizes=&quot;(max-width: 600px) 100vw, 600px&quot;/&gt;&lt;/a&gt;
&lt;p&gt;You can make your own perfectly adorable chibi crocheted AT-AT Walker with this $5.90 pattern from Polish textile artist Kamila Krawczyk, AKA Krawka. (via The Stars My Destination)&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;https://boingboing.net/2019/01/29/all-textile-armored-transport.html&quot;&gt;READ THE REST&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&quot;nextstory&quot; readability=&quot;22.979310344828&quot;&gt;

&lt;a href=&quot;https://boingboing.net/2019/01/29/fundamentally-wrong-premises.html?utm_source=moreatbb&amp;amp;utm_medium=nextpost&amp;amp;utm_campaign=nextpostthumbnails&quot; onclick=&quot;clickTrack(this.href, 'Next Post Button', 'Next Post Thumbnails');&quot;&gt;&lt;img width=&quot;600&quot; height=&quot;600&quot; src=&quot;https://i0.wp.com/media.boingboing.net/wp-content/uploads/2019/01/eu-compliant-meme.png?fit=600%2C600&amp;amp;ssl=1&quot; class=&quot;attachment-medium size-medium wp-post-image&quot; alt=&quot;&quot; srcset=&quot;https://i0.wp.com/media.boingboing.net/wp-content/uploads/2019/01/eu-compliant-meme.png?w=1080&amp;amp;ssl=1 1080w, https://i0.wp.com/media.boingboing.net/wp-content/uploads/2019/01/eu-compliant-meme.png?resize=300%2C300&amp;amp;ssl=1 300w, https://i0.wp.com/media.boingboing.net/wp-content/uploads/2019/01/eu-compliant-meme.png?resize=600%2C600&amp;amp;ssl=1 600w, https://i0.wp.com/media.boingboing.net/wp-content/uploads/2019/01/eu-compliant-meme.png?resize=768%2C768&amp;amp;ssl=1 768w, https://i0.wp.com/media.boingboing.net/wp-content/uploads/2019/01/eu-compliant-meme.png?resize=930%2C930&amp;amp;ssl=1 930w&quot; sizes=&quot;(max-width: 600px) 100vw, 600px&quot;/&gt;&lt;/a&gt;
&lt;p&gt;After the last-minute collapse of negotiations over the new EU Copyright Directive, things have only gone from bad to worse for the beleaguered (but deadly and far-reaching) internet regulation.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;https://boingboing.net/2019/01/29/fundamentally-wrong-premises.html&quot;&gt;READ THE REST&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&quot;nextstory&quot; readability=&quot;32.054421768707&quot;&gt;

&lt;a href=&quot;https://boingboing.net/2019/01/27/grow-boatloads-of-instagram-fo.html?utm_source=moreatbb&amp;amp;utm_medium=nextpost&amp;amp;utm_campaign=nextpostthumbnails&quot; onclick=&quot;clickTrack(this.href, 'Next Post Button', 'Next Post Thumbnails');&quot;&gt;&lt;img width=&quot;600&quot; height=&quot;400&quot; src=&quot;https://i0.wp.com/media.boingboing.net/wp-content/uploads/2019/01/instagramphone-1.jpeg?fit=600%2C400&amp;amp;ssl=1&quot; class=&quot;attachment-medium size-medium wp-post-image&quot; alt=&quot;&quot; srcset=&quot;https://i0.wp.com/media.boingboing.net/wp-content/uploads/2019/01/instagramphone-1.jpeg?w=800&amp;amp;ssl=1 800w, https://i0.wp.com/media.boingboing.net/wp-content/uploads/2019/01/instagramphone-1.jpeg?resize=300%2C200&amp;amp;ssl=1 300w, https://i0.wp.com/media.boingboing.net/wp-content/uploads/2019/01/instagramphone-1.jpeg?resize=600%2C400&amp;amp;ssl=1 600w, https://i0.wp.com/media.boingboing.net/wp-content/uploads/2019/01/instagramphone-1.jpeg?resize=768%2C512&amp;amp;ssl=1 768w&quot; sizes=&quot;(max-width: 600px) 100vw, 600px&quot;/&gt;&lt;/a&gt;
&lt;p&gt;Everybody’s on Instagram to be seen, but what separates the average selfies-and-food account from the true influencers? Chances are, it’s not random chance. Check out our favorite online tools geared to get you the kind of visibility advertisers dream of, from educational courses to optimizing apps. PostFly Instagram Automation If you’re looking to get the […]&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;https://boingboing.net/2019/01/27/grow-boatloads-of-instagram-fo.html&quot;&gt;READ THE REST&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&quot;nextstory&quot; readability=&quot;32.304449648712&quot;&gt;

&lt;a href=&quot;https://boingboing.net/2019/01/26/these-are-the-last-workout-ear.html?utm_source=moreatbb&amp;amp;utm_medium=nextpost&amp;amp;utm_campaign=nextpostthumbnails&quot; onclick=&quot;clickTrack(this.href, 'Next Post Button', 'Next Post Thumbnails');&quot;&gt;&lt;img width=&quot;596&quot; height=&quot;447&quot; src=&quot;https://i1.wp.com/media.boingboing.net/wp-content/uploads/2019/01/cresuerearbuds.jpg?fit=596%2C447&amp;amp;ssl=1&quot; class=&quot;attachment-medium size-medium wp-post-image&quot; alt=&quot;&quot; srcset=&quot;https://i1.wp.com/media.boingboing.net/wp-content/uploads/2019/01/cresuerearbuds.jpg?w=596&amp;amp;ssl=1 596w, https://i1.wp.com/media.boingboing.net/wp-content/uploads/2019/01/cresuerearbuds.jpg?resize=300%2C225&amp;amp;ssl=1 300w&quot; sizes=&quot;(max-width: 596px) 100vw, 596px&quot;/&gt;&lt;/a&gt;
&lt;p&gt;The wheel. The light bulb. Throughout history, the best technology has always been simple and elegant. That’s especially true for a good pair of earbuds, which should sound like they’re packing an orchestra and feel like they’re not even there. Hitting that sweet spot especially hard are the Cresuer Touchwave True Wireless Bluetooth Earbuds, which […]&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;https://boingboing.net/2019/01/26/these-are-the-last-workout-ear.html&quot;&gt;READ THE REST&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&quot;nextstory&quot; readability=&quot;31.952494061758&quot;&gt;

&lt;a href=&quot;https://boingboing.net/2019/01/25/learn-piano-the-fun-way-with-t.html?utm_source=moreatbb&amp;amp;utm_medium=nextpost&amp;amp;utm_campaign=nextpostthumbnails&quot; onclick=&quot;clickTrack(this.href, 'Next Post Button', 'Next Post Thumbnails');&quot;&gt;&lt;img width=&quot;600&quot; height=&quot;450&quot; src=&quot;https://i1.wp.com/media.boingboing.net/wp-content/uploads/2019/01/sale_16493_primary_image.jpg?fit=600%2C450&amp;amp;ssl=1&quot; class=&quot;attachment-medium size-medium wp-post-image&quot; alt=&quot;&quot; srcset=&quot;https://i1.wp.com/media.boingboing.net/wp-content/uploads/2019/01/sale_16493_primary_image.jpg?w=630&amp;amp;ssl=1 630w, https://i1.wp.com/media.boingboing.net/wp-content/uploads/2019/01/sale_16493_primary_image.jpg?resize=300%2C225&amp;amp;ssl=1 300w, https://i1.wp.com/media.boingboing.net/wp-content/uploads/2019/01/sale_16493_primary_image.jpg?resize=600%2C450&amp;amp;ssl=1 600w&quot; sizes=&quot;(max-width: 600px) 100vw, 600px&quot;/&gt;&lt;/a&gt;
&lt;p&gt;The keyboard is one of the most universally loved instruments, and it’s relatively easy to learn. So why do so many kids hate their piano lessons? It’s likely they weren’t being taught Pianoforall, an innovative yet simple method that lets students discover what’s great about music right away. Taught by pianist and therapist Robin Hall, […]&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;https://boingboing.net/2019/01/25/learn-piano-the-fun-way-with-t.html&quot;&gt;READ THE REST&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;

&lt;/div&gt;</description>
<pubDate>Sat, 02 Feb 2019 21:31:53 +0000</pubDate>
<dc:creator>Keverw</dc:creator>
<og:type>article</og:type>
<og:title>Blackmailers use false copyright claims to shut down victims' Youtube accounts, offer to lift them in exchange for Bitcoin</og:title>
<og:description>Blackmailers use false copyright claims to shut down victims' Youtube accounts, offer to lift them in exchange for Bitcoin</og:description>
<og:url>https://boingboing.net/2019/01/30/moderation-at-scale.html</og:url>
<og:image>https://media.boingboing.net/wp-content/uploads/2019/01/8461872536_1e790c9e0c_o.jpg</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://boingboing.net/2019/01/30/moderation-at-scale.html</dc:identifier>
</item>
<item>
<title>I have chosen the wrong flight dates because your date picker is broken</title>
<link>https://twitter.com/pugson/status/1091699189166174208</link>
<guid isPermaLink="true" >https://twitter.com/pugson/status/1091699189166174208</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://twitter.com/pugson/status/1091699189166174208&quot;&gt;https://twitter.com/pugson/status/1091699189166174208&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=19065635&quot;&gt;https://news.ycombinator.com/item?id=19065635&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 234&lt;/p&gt;
&lt;p&gt;# Comments: 187&lt;/p&gt;
</description>
<pubDate>Sat, 02 Feb 2019 20:51:42 +0000</pubDate>
<dc:creator>bfoks</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://mobile.twitter.com/pugson/status/1091699189166174208</dc:identifier>
</item>
<item>
<title>A Python Interpreter Written in Rust</title>
<link>https://github.com/RustPython/RustPython</link>
<guid isPermaLink="true" >https://github.com/RustPython/RustPython</guid>
<description>&lt;div class=&quot;Box-body p-6&quot;&gt;
&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt;
&lt;p&gt;A Python-3 (CPython &amp;gt;= 3.5.0) Interpreter written in Rust 🐍 😱 🤘.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/RustPython/RustPython&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/fb7cccfd031d15215ec7bb2b9e31569c557a5a4e/68747470733a2f2f7472617669732d63692e6f72672f52757374507974686f6e2f52757374507974686f6e2e7376673f6272616e63683d6d6173746572&quot; alt=&quot;Build Status&quot; data-canonical-src=&quot;https://travis-ci.org/RustPython/RustPython.svg?branch=master&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://opensource.org/licenses/MIT&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/76f0e887c183ccc31c1cb63c33d2dbf48cb2df51/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d677265656e2e737667&quot; alt=&quot;License: MIT&quot; data-canonical-src=&quot;https://img.shields.io/badge/License-MIT-green.svg&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/RustPython/RustPython/graphs/contributors&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/926ca81f11ceabcbac75cc7ff44d16f14f9b4cca/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f636f6e7472696275746f72732f52757374507974686f6e2f52757374507974686f6e2e737667&quot; alt=&quot;Contributors&quot; data-canonical-src=&quot;https://img.shields.io/github/contributors/RustPython/RustPython.svg&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://gitter.im/rustpython/Lobby&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/1361bb3b490b72eab5bafeeab1cc871312133c60/68747470733a2f2f6261646765732e6769747465722e696d2f52757374507974686f6e2f4c6f6262792e737667&quot; alt=&quot;Gitter&quot; data-canonical-src=&quot;https://badges.gitter.im/RustPython/Lobby.svg&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Check out our &lt;a href=&quot;https://rustpython.github.io/demo/&quot; rel=&quot;nofollow&quot;&gt;online demo&lt;/a&gt; running on WebAssembly.&lt;/h3&gt;
&lt;p&gt;To test RustPython, do the following:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git clone https://github.com/RustPython/RustPython
$ cd RustPython
$ cargo run demo.py
Hello, RustPython!
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Or use the interactive shell:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ cargo run
Welcome to rustpython
&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; 2+2
4
&lt;/code&gt;
&lt;/pre&gt;

&lt;ul&gt;&lt;li&gt;Full Python-3 environment entirely in Rust (not CPython bindings)&lt;/li&gt;
&lt;li&gt;A clean implementation without compatibility hacks&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Currently the project is in an early phase, and so is the documentation.&lt;/p&gt;
&lt;p&gt;You can read the &lt;a href=&quot;https://rustpython.github.io/website/rustpython/index.html&quot; rel=&quot;nofollow&quot;&gt;online documentation&lt;/a&gt; for the latest code on master.&lt;/p&gt;
&lt;p&gt;You can also generate documentation locally by running:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ cargo doc &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Including documentation for all dependencies&lt;/span&gt;
$ cargo doc --no-deps --all &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Excluding all dependencies&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Documentation HTML files can then be found in the &lt;code&gt;target/doc&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;If you wish to update the online documentation. Push directly to the &lt;code&gt;release&lt;/code&gt; branch (or ask a maintainer to do so), this will trigger a Travis build that updates the documentation and WebAssembly demo page.&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;&lt;code&gt;parser/src&lt;/code&gt;: python lexing, parsing and ast&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vm/src&lt;/code&gt;: python virtual machine
&lt;ul&gt;&lt;li&gt;&lt;code&gt;builtins.rs&lt;/code&gt;: Builtin functions&lt;/li&gt;
&lt;li&gt;&lt;code&gt;compile.rs&lt;/code&gt;: the python compiler from ast to bytecode&lt;/li&gt;
&lt;li&gt;&lt;code&gt;obj&lt;/code&gt;: python builtin types&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;src&lt;/code&gt;: using the other subcrates to bring rustpython to life.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docs&lt;/code&gt;: documentation (work in progress)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;py_code_object&lt;/code&gt;: CPython bytecode to rustpython bytecode converter (work in progress)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wasm&lt;/code&gt;: Binary crate and resources for WebAssembly build&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tests&lt;/code&gt;: integration test snippets&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To start contributing, there are a lot of things that need to be done.&lt;/p&gt;
&lt;p&gt;Most tasks are listed in the &lt;a href=&quot;https://github.com/RustPython/RustPython/issues&quot;&gt;issue tracker&lt;/a&gt;. Check issues labeled with &lt;code&gt;good first issue&lt;/code&gt; if you wish to start coding.&lt;/p&gt;
&lt;p&gt;Another approach is to checkout the sourcecode: builtin functions and object methods are often the simplest and easiest way to contribute.&lt;/p&gt;
&lt;p&gt;You can also simply run &lt;code&gt;cargo run tests/snippets/whats_left_to_implement.py&lt;/code&gt; to assist in finding any unimplemented method.&lt;/p&gt;

&lt;p&gt;To test rustpython, there is a collection of python snippets located in the &lt;code&gt;tests/snippets&lt;/code&gt; directory. To run those tests do the following:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;cd&lt;/span&gt; tests
$ pipenv install
$ pipenv run pytest -v
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There also are some unittests, you can run those will cargo:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ cargo &lt;span class=&quot;pl-c1&quot;&gt;test&lt;/span&gt; --all
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As of now the standard library is under construction.&lt;/p&gt;
&lt;p&gt;You can play around with other standard libraries for python. For example, the &lt;a href=&quot;https://github.com/pybee/ouroboros&quot;&gt;ouroboros library&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To do this, follow this method:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;~&lt;/span&gt;/GIT
$ git clone git@github.com:pybee/ouroboros.git
$ &lt;span class=&quot;pl-k&quot;&gt;export&lt;/span&gt; PYTHONPATH=&lt;span class=&quot;pl-k&quot;&gt;~&lt;/span&gt;/GIT/ouroboros/ouroboros
$ &lt;span class=&quot;pl-c1&quot;&gt;cd&lt;/span&gt; RustPython
$ cargo run -- -c &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;import statistics&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At this stage RustPython only has preliminary support for web assembly. The instructions here are intended for developers or those wishing to run a toy example.&lt;/p&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;To get started, install &lt;a href=&quot;https://rustwasm.github.io/wasm-pack/installer/&quot; rel=&quot;nofollow&quot;&gt;wasm-pack&lt;/a&gt; and &lt;code&gt;npm&lt;/code&gt;. (&lt;a href=&quot;https://rustwasm.github.io/wasm-bindgen/whirlwind-tour/basic-usage.html&quot; rel=&quot;nofollow&quot;&gt;wasm-bindgen&lt;/a&gt; should be installed by &lt;code&gt;wasm-pack&lt;/code&gt;. if not, install it yourself)&lt;/p&gt;
&lt;h2&gt;Build&lt;/h2&gt;
&lt;p&gt;Move into the &lt;code&gt;wasm&lt;/code&gt; directory. This directory contains a library crate for interop with python to rust to js and back in &lt;code&gt;wasm/lib&lt;/code&gt;, the demo website found at &lt;a href=&quot;https://rustpython.github.io/demo&quot; rel=&quot;nofollow&quot;&gt;https://rustpython.github.io/demo&lt;/a&gt; in &lt;code&gt;wasm/demo&lt;/code&gt;, and an example of how to use the crate as a library in one's own JS app in &lt;code&gt;wasm/example&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Go to the demo directory. This is the best way of seeing the changes made to either the library or the JS demo, as the &lt;code&gt;rustpython_wasm&lt;/code&gt; module is set to the global JS variable &lt;code&gt;rp&lt;/code&gt; on the website.&lt;/p&gt;

&lt;p&gt;Now, start the webpack development server. It'll compile the crate and then the demo app. This will likely take a long time, both the wasm-pack portion and the webpack portion (from after it says &quot;Your crate has been correctly compiled&quot;), so be patient.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
npm run dev
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can now open the webpage on &lt;a href=&quot;https://localhost:8080&quot; rel=&quot;nofollow&quot;&gt;https://localhost:8080&lt;/a&gt; and Python code in either the text box or browser devtools with:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-smi&quot;&gt;rp&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;pyEval&lt;/span&gt;(
  &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;print(js_vars['a'] * 9)&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt;,
  {
    vars&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      a&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;9&lt;/span&gt;
    }
  }
);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Alternatively, you can run &lt;code&gt;npm run build&lt;/code&gt; to build the app once, without watching for changes, or &lt;code&gt;npm run dist&lt;/code&gt; to build the app in release mode, both for the crate and webpack.&lt;/p&gt;

&lt;p&gt;The code style used is the default rustfmt codestyle. Please format your code accordingly.&lt;/p&gt;

&lt;p&gt;Chat with us on &lt;a href=&quot;https://gitter.im/rustpython/Lobby&quot; rel=&quot;nofollow&quot;&gt;gitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The initial work was based on &lt;a href=&quot;https://github.com/windelbouwman/rspython&quot;&gt;windelbouwman/rspython&lt;/a&gt; and &lt;a href=&quot;https://github.com/shinglyu/RustPython&quot;&gt;shinglyu/RustPython&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These are some useful links to related projects:&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;
</description>
<pubDate>Sat, 02 Feb 2019 17:01:20 +0000</pubDate>
<dc:creator>rch</dc:creator>
<og:image>https://avatars0.githubusercontent.com/u/39710557?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>RustPython/RustPython</og:title>
<og:url>https://github.com/RustPython/RustPython</og:url>
<og:description>A Python Interpreter written in Rust. Contribute to RustPython/RustPython development by creating an account on GitHub.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/RustPython/RustPython</dc:identifier>
</item>
<item>
<title>McKinsey Advised Purdue Pharma How to ‘Turbocharge’ Opioid Sales, Lawsuit Says</title>
<link>https://www.nytimes.com/2019/02/01/business/purdue-pharma-mckinsey-oxycontin-opiods.html</link>
<guid isPermaLink="true" >https://www.nytimes.com/2019/02/01/business/purdue-pharma-mckinsey-oxycontin-opiods.html</guid>
<description>&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;The world’s most prestigious management-consulting firm, McKinsey &amp;amp; Company, has been drawn into a national reckoning over who bears responsibility for the opioid crisis that has devastated families and communities across America.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;In &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.documentcloud.org/documents/5715954-Massachusetts-AGO-Amended-Complaint-2019-01-31.html&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;legal papers&lt;/a&gt; released in unredacted form on Thursday, the Massachusetts attorney general said McKinsey had helped the maker of OxyContin fan the flames of the opioid epidemic. McKinsey’s consultants, the attorney general revealed, had instructed the drug company, Purdue Pharma, on how to “turbocharge” sales of OxyContin, how to counter efforts by drug enforcement agents to reduce opioid use, and were part of a team that looked at how “to counter the emotional messages from mothers with teenagers that overdosed” on the drug.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;The McKinsey disclosures are part of a &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/2019/01/31/health/opioids-purdue-pharma-sackler.html?module=inline&quot; title=&quot;&quot;&gt;lawsuit&lt;/a&gt; Massachusetts filed against Purdue Pharma, accusing the company of misleading doctors and patients about the safety of opioid use. Even when the company knew patients were addicted and dying, it still tried to boost sales of opioids, the lawsuit alleges, adding, “All the while, Purdue peddled falsehoods to keep patients away from safer alternatives.”&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Purdue Pharma helped plant the seeds of the opioid epidemic through its aggressive marketing of OxyContin. More than 130 people die each day in the United States — 47,000 in 2017 — after overdosing on opioids, according to the National Institute on Drug Abuse.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;As the death toll from opioid abuse has climbed, the cast of those who are alleged to have contributed to the crisis — manufacturers, distributors, doctors, pharmacists, hospitals and regulatory agencies — has grown. McKinsey is the newest and perhaps most surprising actor in this drama.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;“From our initial review of the complaint, it appears that some of the references to McKinsey’s work lack context, including references to McKinsey that appear to be second- or third-hand,” McKinsey said in a statement, adding that it was continuing to review the document.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;The suit, filed last year, names several Purdue executives and board members as well as members of the Sackler family, which controls the privately held company. McKinsey is mentioned 71 times in the 275-page complaint. The unredacted version was first &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.propublica.org/article/oxycontin-purdue-pharma-massachusetts-lawsuit-anti-addiction-market&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;reported&lt;/a&gt; by ProPublica and the medical news website Stat.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;In 2009, McKinsey wrote a report for Purdue Pharma saying that new sales tactics would increase sales of OxyContin by $200 million to $400 million annually and “suggested sales ‘drivers’ based on the ideas that opioids reduce stress and make patients more optimistic and less isolated,” according to the lawsuit.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;It was that year that Craig Landau, then Purdue’s chief medical officer and now its chief executive, had an email exchange that included a McKinsey consultant about how to counter mothers whose teenagers had overdosed on OxyContin. The solution: bring in patients to emphasize how the drug helps to relieve pain.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;In 2013, amid the rapidly intensifying opioid crisis, the federal Drug Enforcement Administration and the Justice Department reached a settlement with Walgreens, the second-biggest American pharmacy chain. Walgreens agreed to new procedures to crack down on illegal prescriptions. In a report to Purdue Pharma, McKinsey said that “deep examination of Purdue’s available pharmacy purchasing data shows that Walgreens has reduced its units by 18%.”&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;According to the lawsuit, McKinsey recommended that Purdue “lobby Walgreens’ leaders to loosen up.”&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;McKinsey also recommended that Purdue redirect its sales force to focus on doctors who were especially prolific prescribers of OxyContin, according to the suit. One slide made public by the attorney general’s office, attributed to McKinsey, focused on one doctor in the town of Wareham, Mass., who almost doubled his annual output of OxyContin prescriptions after a big increase in visits from Purdue sales representatives.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;If doctors resisted, McKinsey recommended that Purdue employ “patient pushback,” getting patients to lobby for OxyContin, according to the suit.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;In a statement, Purdue said that the Massachusetts attorney general’s office “offers little evidence to support its sweeping legal claims.” The company also said that the lawsuit mischaracterized McKinsey’s work with Purdue.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;On a chat site where participants must have a McKinsey email address to register for the company’s discussion room, several expletive-laced expressions of outrage over the revelations of McKinsey’s work with Purdue were mixed with comments about the responsibility to serve the client’s bottom line within moral and ethical boundaries.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;“Then, of course it’s ok to maximize shareholder value, seek profits!,” one person wrote. “But not at all costs, not at the cost of our moral values and our society’s well being.”&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Another person’s post — like all 42 entries about Purdue and McKinsey posted by midday Friday, it was anonymous — reproduced a bullet point from McKinsey’s values statement stating that the company will “observe high ethical standards.”&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;That is the second bullet point printed on the framed poster listing McKinsey’s mission and values that graces the 21st-floor lobby of McKinsey’s home office in Midtown Manhattan. The first reads: “put client interests ahead of the Firm’s.”&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;In 2018, after it spent years advising Purdue Pharma on how to increase sales of OxyContin, McKinsey published &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.mckinsey.com/industries/healthcare-systems-and-services/our-insights/why-we-need-bolder-action-to-combat-the-opioid-epidemic&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;a report titled&lt;/a&gt;: “Why we need bolder action to combat the opioid epidemic.”&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;
</description>
<pubDate>Sat, 02 Feb 2019 16:31:07 +0000</pubDate>
<dc:creator>seapunk</dc:creator>
<og:url>https://www.nytimes.com/2019/02/01/business/purdue-pharma-mckinsey-oxycontin-opiods.html</og:url>
<og:type>article</og:type>
<og:title>McKinsey Advised Purdue Pharma How to ‘Turbocharge’ Opioid Sales, Lawsuit Says</og:title>
<og:image>https://static01.nyt.com/images/2019/01/31/business/00purduemckinsey1/merlin_149883558_57e930ff-6348-42d3-a87a-beaa979c7843-facebookJumbo.jpg</og:image>
<og:description>The disclosures about the consulting firm are part of the Massachusetts attorney general’s suit against the pharmaceutical giant, which is accused of misleading doctors and patients about the safety of the medication.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.nytimes.com/2019/02/01/business/purdue-pharma-mckinsey-oxycontin-opiods.html</dc:identifier>
</item>
</channel>
</rss>