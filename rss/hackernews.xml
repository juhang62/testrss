<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Lemmy, an open-source federated Reddit alternative, gets funding for development</title>
<link>https://dev.lemmy.ml/post/35293</link>
<guid isPermaLink="true" >https://dev.lemmy.ml/post/35293</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://dev.lemmy.ml/post/35293&quot;&gt;https://dev.lemmy.ml/post/35293&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=23664067&quot;&gt;https://news.ycombinator.com/item?id=23664067&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 417&lt;/p&gt;
&lt;p&gt;# Comments: 311&lt;/p&gt;
</description>
<pubDate>Sat, 27 Jun 2020 19:36:23 +0000</pubDate>
<dc:creator>jasonbourne1901</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://dev.lemmy.ml/post/35293</dc:identifier>
</item>
<item>
<title>Xi-Editor Retrospective</title>
<link>https://raphlinus.github.io/xi/2020/06/27/xi-retrospective.html</link>
<guid isPermaLink="true" >https://raphlinus.github.io/xi/2020/06/27/xi-retrospective.html</guid>
<description>&lt;p&gt;A bit more than four years ago I started the &lt;a href=&quot;https://github.com/xi-editor/xi-editor&quot;&gt;xi-editor&lt;/a&gt; project. Now I have placed it on the back burner (though there is still some activity from the open source community).&lt;/p&gt;
&lt;p&gt;The original goal was to deliver a very high quality editing experience. To this end, the project spent a rather large number of “novelty points”:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Rust as the implementation language for the core.&lt;/li&gt;
&lt;li&gt;A rope data structure for text storage.&lt;/li&gt;
&lt;li&gt;A multiprocess architecture, with front-end and plug-ins each with their own process.&lt;/li&gt;
&lt;li&gt;Fully embracing async design.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Conflict-free_replicated_data_type&quot;&gt;CRDT&lt;/a&gt; as a mechanism for concurrent modification.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;I still believe it would be possible to build a high quality editor based on the original design. But I &lt;em&gt;also&lt;/em&gt; believe that this would be quite a complex system, and require significantly more work than necessary.&lt;/p&gt;
&lt;p&gt;I’ve written the &lt;a href=&quot;https://github.com/xi-editor/xi-editor/issues/1187#issuecomment-491473599&quot;&gt;CRDT part of this retrospective&lt;/a&gt; already, as a comment in response to a Github issue. That prompted good &lt;a href=&quot;https://news.ycombinator.com/item?id=19886883&quot;&gt;discussion&lt;/a&gt; on Hacker News. In this post, I will touch again on CRDT but will focus on the other aspects of the system design.&lt;/p&gt;
&lt;h2 id=&quot;origins&quot;&gt;Origins&lt;/h2&gt;
&lt;p&gt;The original motivation for xi came from working on the Android text stack, and confronting two problems in particular. One, text editing would become very slow as the text buffer got bigger. Two, there were a number of concurrency bugs in the interface between the EditText widget and the keyboard (input method editor).&lt;/p&gt;
&lt;p&gt;The culprit of the first problem turned out to be the &lt;a href=&quot;https://developer.android.com/reference/android/text/SpanWatcher&quot;&gt;SpanWatcher&lt;/a&gt; interface, combined with the fact that modern keyboards like to put a spelling correction span on each word. When you insert a character, all the successive spans bump their locations up by one, and then you have to send onSpanChanged for each of those spans to all the watchers. Combined with the fact that the spans data structure had a naive O(n) implementation, and the whole thing was quadratic or worse.&lt;/p&gt;
&lt;p&gt;The concurrency bugs boil down to synchronizing edits across two different processes, because the keyboard is a different process than the application hosting the EditText widget. Thus, when you send an update (to move the cursor, for example) and the text on the other side is changing concurrently, it’s ambiguous whether it refers to the old or new location. This was handled in an “almost correct” style, with timeouts for housekeeping updates to minimize the chance of a race. A nice manifestation of that is that swiping the cursor slowly through text containing complex emoji could cause flashes of the emoji breaking.&lt;/p&gt;
&lt;p&gt;These problems have a unifying thread: in both cases there are small diffs to the text, but then the data structures and protocols handled these diffs in a less than optimal way, leading to both performance and correctness bugs.&lt;/p&gt;
&lt;p&gt;To a large extent, xi started as an exploration into the “right way” to handle text editing operations. In the case of the concurrency bugs, I was hoping to find a general, powerful technique to facilitate concurrent text editing in a distributed-ish system. While most of the Operational Transformation literature is focused on multiple users collaboratively editing a document, I was hoping that other text manipulations (like an application enforcing credit card formatting on a text input field) could fit into the general framework.&lt;/p&gt;
&lt;p&gt;That was also the time I was starting to get heavily into Rust, so it made natural sense to start prototyping a new green-field text editing engine. How would you “solve text” if you were free of backwards compatibility constraints (a huge problem in Android)?&lt;/p&gt;
&lt;p&gt;When I started, I knew that Operational Transformation was a solution for collaborative editing, but had a reputation for being complex and finicky. I had no idea how deep the rabbithole would be of OT and then CRDT. Much of that story is told in the &lt;a href=&quot;https://news.ycombinator.com/item?id=19886883&quot;&gt;CRDT discussion&lt;/a&gt; previously linked.&lt;/p&gt;
&lt;h2 id=&quot;the-lure-of-modular-software&quot;&gt;The lure of modular software&lt;/h2&gt;
&lt;p&gt;There is an extremely long history of people trying to build software as composable modules connected by some kind of inter-module communication fabric. Historical examples include &lt;a href=&quot;https://en.wikipedia.org/wiki/DCE/RPC&quot;&gt;DCE/RPC&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Common_Object_Request_Broker_Architecture&quot;&gt;Corba&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Bonobo_(GNOME)&quot;&gt;Bonobo&lt;/a&gt;, and more recently things like &lt;a href=&quot;https://sandstorm.io/&quot;&gt;Sandstorm&lt;/a&gt; and &lt;a href=&quot;https://fuchsia.dev/fuchsia-src/concepts/modular/module&quot;&gt;Fuchsia Modular&lt;/a&gt;. There are some partial successes, including &lt;a href=&quot;https://developer.android.com/reference/android/os/Binder&quot;&gt;Binder&lt;/a&gt; on Android, but this is still mostly an unrealized vision. (Regarding Binder, it evolved from a much more idealistic vision, and I strongly recommend reading this 2006 interview about &lt;a href=&quot;https://www.osnews.com/story/13674/introduction-to-openbinder-and-interview-with-dianne-hackborn/&quot;&gt;OpenBinder&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;When I started xi, there were signs we were getting there. Microservices were becoming popular in the Internet world, and of course all Web apps have a client/server boundary. Within Google, &lt;a href=&quot;https://grpc.io/&quot;&gt;gRPC&lt;/a&gt; was working fairly well, as was the internal process separation within Chrome. In Unix land, there’s a long history of the terminal itself presenting a GUI (if primitive, though gaining features such as color and mouse). There’s also the tradition of &lt;a href=&quot;https://en.wikipedia.org/wiki/Blit_(computer_terminal)&quot;&gt;Blit&lt;/a&gt; and then, of course, &lt;a href=&quot;https://en.wikipedia.org/wiki/NeWS&quot;&gt;NeWS&lt;/a&gt; and X11.&lt;/p&gt;
&lt;p&gt;I think one of the strongest positive models was the database / business logic split, which is arguably the most successful example of process separation. In this model, the database is responsible for performance and integrity, and the business logic is in a separate process, so it can safely do things like crash and hang. I very much thought of xi-core as a database-like engine, capable of handling concurrent text modification much like a database handles transactions.&lt;/p&gt;
&lt;p&gt;Building software in such a modular way requires two things: first, infrastructure to support remote procedure calls (including serialization of the requests and data), and second, well-defined interfaces. Towards the end of 2017, I saw the goal of xi-editor as &lt;em&gt;primarily&lt;/em&gt; being about defining the interfaces needed for large scale text editing, and that this work could endure over a long period of time even as details of the implementation changed.&lt;/p&gt;
&lt;p&gt;For the infrastructure, we chose JSON (about which more below) and hand-rolled our own xi-rpc layer (based on JSON-RPC). It turns out there are a lot of details to get right, including dealing with error conditions, negotiating when two ends of the protocol aren’t exactly on the same version, etc.&lt;/p&gt;
&lt;p&gt;One of the bolder design decisions in xi was to have a process separation between front-end and core. This was inspired in part by &lt;a href=&quot;https://neovim.io/&quot;&gt;Neovim&lt;/a&gt;, in which everything is a plugin, even GUI. But the main motivation was to build GUI applications using Rust, even though at the time Rust was nowhere near capable of native GUI. The idea is that you use the best GUI technology of the platform, and communicate via async pipes.&lt;/p&gt;
&lt;p&gt;One argument for process separation is to improve overall system reliability. For example, Chrome has a process per tab, and if the process crashes, all you get is an “Aw, snap” without bringing the whole browser down. I think it’s worth asking the question: is it useful to have the front-end continue after the core crashes, or the other way around? I think probably not; in the latter case it might be able to safely save the file, but you can also do that by frequently checkpointing.&lt;/p&gt;
&lt;p&gt;Looking back, I see much of the promise of modular software as addressing goals related to project management, not technical excellence. Ideally, once you’ve defined an inter-module architecture, then smaller teams can be responsible for their own module, and the cost of coordination goes down. I think this type of project management structure is especially appealing to large companies, who otherwise find it difficult to manage larger projects. And the tax of greater overall complexity is often manageable, as these big companies tend to have more resources.&lt;/p&gt;
&lt;h3 id=&quot;json&quot;&gt;JSON&lt;/h3&gt;
&lt;p&gt;The choice of JSON was controversial from the start. It did end up being a source of friction, but for surprising reasons.&lt;/p&gt;
&lt;p&gt;The original vision was to write plug-ins in any language, especially for things like language servers that would be best developed in the language of that ecosystem. This is the main reason I chose JSON, because I expected there would be high quality implementations in every viable language.&lt;/p&gt;
&lt;p&gt;Many people complained about the fact that JSON escapes strings, and suggested alternatives such as &lt;a href=&quot;https://msgpack.org/index.html&quot;&gt;MessagePack&lt;/a&gt;. But I knew that the speed of raw JSON parsing was a solved problem, with a number of extremely high performance implementations (&lt;a href=&quot;https://github.com/simdjson/simdjson&quot;&gt;simdjson&lt;/a&gt; is a good example).&lt;/p&gt;
&lt;p&gt;Even so, aside from the general problems of modular software as described above, JSON was the source of two additional problems. For one, &lt;a href=&quot;https://github.com/xi-editor/xi-mac/issues/102&quot;&gt;JSON in Swift is shockingly slow&lt;/a&gt;. There are &lt;a href=&quot;https://forums.swift.org/t/rearchitecting-jsonencoder-to-be-much-faster/28139&quot;&gt;discussions on improving it&lt;/a&gt; but it’s still a problem. This is surprising to me considering how important it is in many workloads, and the fact that it’s clearly possible to write a high performance JSON implementation.&lt;/p&gt;
&lt;p&gt;Second, on the Rust side, while &lt;a href=&quot;https://serde.rs/&quot;&gt;serde&lt;/a&gt; is quite fast and very convenient (thanks to proc macros), when serializing a large number of complex structures, it bloats code size considerably. The xi core is 9.3 megabytes in a Linux release build (debug is an eye-watering 88MB), and a great deal of that bloat is serialization. There is work to reduce this, including &lt;a href=&quot;https://github.com/dtolnay/miniserde&quot;&gt;miniserde&lt;/a&gt; and &lt;a href=&quot;https://github.com/not-fl3/nanoserde&quot;&gt;nanoserde&lt;/a&gt;, but serde is still by far the most mainstream.&lt;/p&gt;
&lt;p&gt;I believe it’s possible to do performant, clean JSON across most languages, but people should know, we’re not there yet.&lt;/p&gt;
&lt;h2 id=&quot;the-rope&quot;&gt;The rope&lt;/h2&gt;
&lt;p&gt;There are only a few data structures suitable for representation of text in a text editor. I would enumerate them as: contiguous string, gapped buffer, array of lines, piece table, and rope. I would consider the first unsuitable for the goals of xi-editor as it doesn’t scale well to large documents, though its simplicity is appealing, and memcpy is fast these days; if you know your document is always under a megabyte or so, it’s probably the best choice.&lt;/p&gt;
&lt;p&gt;Array of lines has performance failure modes, most notably very long lines. Similarly, many good editors have been written using piece tables, but I’m not a huge fan; performance is very good when first opening the file, but degrades over time.&lt;/p&gt;
&lt;p&gt;My favorite aspect of the rope as a data structure is its excellent worst-case performance. Basically, there aren’t any cases where it performs &lt;em&gt;badly.&lt;/em&gt; And even the concern about excess copying because of its immutability might not be a real problem; Rust has a &lt;a href=&quot;https://doc.rust-lang.org/std/sync/struct.Arc.html#method.make_mut&quot;&gt;copy-on-write mechanism&lt;/a&gt; where you can mutate in-place when there’s only one reference to the data.&lt;/p&gt;
&lt;p&gt;The main argument against the rope is its complexity. I think this varies a lot by language; in C a gapped buffer might be preferable, but I think in Rust, a rope is the sweet spot. A large part of the reason is that in C, low level implementation details tend to leak through; you’ll often be dealing with a pointer to the buffer. For the common case of operations that don’t need to span the gap, you can hand out a pointer to a contiguous slice, and things just don’t get any simpler than that. Conversely, if any of the invariants of the rope are violated, the whole system will just fall apart.&lt;/p&gt;
&lt;p&gt;In Rust, though, things are different. Proper Rust style is for all access to the data structure to be mediated by a well-defined interface. Then the details about how that’s implemented are hidden from the user. A good way to think about this is that the implementation has complexity, but that complexity is &lt;em&gt;contained.&lt;/em&gt; It doesn’t leak out.&lt;/p&gt;
&lt;p&gt;I think the rope in xi-editor meets that ideal. A lot of work went into getting it right, but now it works. Certain things, like navigating by line and counting UTF-16 code units, are easy and efficient. It’s built in layers, so could be used for other things including binary editing.&lt;/p&gt;
&lt;p&gt;One of the best things about the rope is that it can readily and safely be shared across threads. Ironically we didn’t end up making much use of that in xi-editor, as it was more common to share across &lt;em&gt;processes,&lt;/em&gt; using sophisicated diff/delta and caching protocols.&lt;/p&gt;
&lt;p&gt;A rope is a fairly niche data structure. You really only want it when you’re dealing with large sequences, and also doing a lot of small edits on them. Those conditions rarely arise outside text editors. But for people building text editing in Rust, I think xi-rope holds up well and is one of the valuable artifacts to come from the project.&lt;/p&gt;
&lt;p&gt;There’s a good &lt;a href=&quot;https://news.ycombinator.com/item?id=15381886&quot;&gt;HN discussion of text editor data structures&lt;/a&gt; where I talk about the rope more, and can also point people to the &lt;a href=&quot;https://xi-editor.io/docs/rope_science_00.html&quot;&gt;Rope science&lt;/a&gt; series for more color.&lt;/p&gt;
&lt;h2 id=&quot;async-is-a-complexity-multiplier&quot;&gt;Async is a complexity multiplier&lt;/h2&gt;
&lt;p&gt;We knew going in that async was going to be a source of complexity. The hope is that we would be able to tackle the async stuff once, and that the complexity would be encapsulated, much as it was for the rope data structure.&lt;/p&gt;
&lt;p&gt;The reality was that adding async made everything more complicated, in some cases considerably so. A particularly difficult example was dealing with word wrap. In particular, when the width of the viewport is tied to the window, then live-resizing the window causes text to rewrap continuously. With the process split between front-end and core, and an async protocol between them, all kinds of interesting things can go wrong, including races between editing actions and word wrap updates. More fundamentally, it is difficult to avoid tearing-style artifacts.&lt;/p&gt;
&lt;p&gt;One early relative success was implementing scrolling. The problem is that, as you scroll, the front-end needs to sometimes query the core to fetch visible text that’s outside its cache. We ended up building this, but it took months to get it right. By contrast, if we just had the text available as an in-process data structure for the UI to query, it would have been quite straightforward.&lt;/p&gt;
&lt;p&gt;I should note that async in interactive systems is more problematic than the tamer variety often seen in things like web servers. There, the semantics are generally the same as simple blocking threads, just with (hopefully) better performance. But in an interactive system, it’s generally possible to observe internal states. You have to display &lt;em&gt;something&lt;/em&gt;, even when not all subqueries have completed.&lt;/p&gt;
&lt;p&gt;As a conclusion, while the process split with plug-ins is supportable (similar to the Language Server protocol), I now firmly believe that the process separation between front-end and core was not a good idea.&lt;/p&gt;
&lt;h2 id=&quot;syntax-highlighting&quot;&gt;Syntax highlighting&lt;/h2&gt;
&lt;p&gt;Probably the high point of the project was the successful implementation of syntax highlighting, based on Tristan Hume’s &lt;a href=&quot;https://github.com/trishume/syntect&quot;&gt;syntect&lt;/a&gt; library, which was motivated by xi. There’s a lot more to say about this.&lt;/p&gt;
&lt;p&gt;First, TextMate / Sublime style syntax highlighting is not really all that great. It is quite slow, largely because it grinds through a lot of regular expressions with captures, and it is also not very precise. On the plus side, there is a large and well-curated open source collection of syntax definitions, and it’s definitely “good enough” for most use. Indeed, code that fools these syntax definitions (such as two open braces on the same line) is a good anti-pattern to avoid.&lt;/p&gt;
&lt;p&gt;It may be surprising just how much slower regex-based highlighting is than fast parsers. The library that xi uses, syntect, is probably the fastest open source implementation in existence (the one in Sublime is faster but not open source). Even so, it is approximately 2500 times slower for parsing Markdown than &lt;a href=&quot;https://github.com/raphlinus/pulldown-cmark&quot;&gt;pulldown-cmark&lt;/a&gt;. And syntect doesn’t even parse setext-style lists correctly, because Sublime style syntax definitions have to work line-at-a-time, and the line of dashes following a heading isn’t available until the next line.&lt;/p&gt;
&lt;p&gt;These facts influenced the design of xi in two important ways. First, I took it as a technical challenge to provide a high-performance editing experience even on large files, overcoming the performance problems through async. Second, the limitations of the regex-based approach argued in favor of a modular plug-in architecture, so that as better highlighters were developed, they could be plugged in. I had some ambitions of creating a standard protocol that could be used by other editors, but this absolutely failed to materialize. For example, Atom instead developed &lt;a href=&quot;https://github.blog/2018-10-31-atoms-new-parsing-system/&quot;&gt;tree-sitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In any case, I dug in and did it. The resulting implementation is impressive in many ways. The syntax highlighter lives in a different process, with asynchronous updates so typing is never slowed down. It’s also incremental, so even if changes ripple through a large file, it updates what’s on the screen quickly. Some of the sophistication is described in &lt;a href=&quot;https://xi-editor.io/docs/rope_science_11.html&quot;&gt;Rope science 11&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There was considerable complexity in the implementation. Text was synchronized between the main xi-core process and the plug-in, but for large files, the latter stores only a fixed-size cache; the cache protocol ended up being quite sophisticated. Updates were processed through a form of Operational Transformation, so if a highlighting result raced a text edit, it would never color an incorrect region (this is still very much a problem for language server annotations).&lt;/p&gt;
&lt;p&gt;As I said, syntax highlighting was something of a high point. The success suggested that a similar high-powered engineering approach could systematically work through the other problems. But this was not to be.&lt;/p&gt;
&lt;p&gt;As part of this work, I explored an alternative syntax highlighting engine based on parser combinators. If I had pursued that, the result would have been lightning fast, of comparable quality to the regex approach, and difficult to create syntax descriptions, as it involved a fair amount of manual factoring of parsing state. While the performance would have been nice to have, ultimately I don’t think there’s much niche for such a thing. If I were trying to create the best possible syntax highlighting experience today, I’d adapt Marijn Haverbeke’s &lt;a href=&quot;https://marijnhaverbeke.nl/blog/lezer.html&quot;&gt;Lezer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To a large extent, syntax highlighting is a much easier problem than many of the others we faced, largely because the annotations are a history-free function of the document’s plain text. The problem of determining indentation may seem similar, but is dependent on history. And it basically doesn’t fit nicely in the CRDT model at all, as that requires the ability to resolve arbitrarily divergent edits between the different processes (imagine that one goes offline for a bit, types a bit, then the language server comes back online and applies indentation).&lt;/p&gt;
&lt;p&gt;Another problem is that our plug-in interface had become overly specialized to solve the problems of syntax highlighting, and did not well support the other things we wanted to do. I think those problems could have been solved, but only with significant difficulty.&lt;/p&gt;
&lt;h2 id=&quot;there-is-no-such-thing-as-native-gui&quot;&gt;There is no such thing as native GUI&lt;/h2&gt;
&lt;p&gt;As mentioned above, a major motivation for the front-end / core process split was to support development of GUI apps using a polyglot approach, as Rust wasn’t a suitable language for building GUI. The theory was that you’d build the GUI using whatever libraries and language that was most suitable for the platform, basically the platform’s native GUI, then interact with the Rust engine using interprocess communication.&lt;/p&gt;
&lt;p&gt;The strongest argument for this is probably macOS, which at the time had Cocoa as basically &lt;em&gt;the&lt;/em&gt; blessed way to build GUI. Most other platforms have some patchwork of tools. &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/apps/desktop/choose-your-platform&quot;&gt;Windows&lt;/a&gt; is particularly bad in this respect, as there’s old-school (GDI+ based) win32, WinForms, WPF, Xamarin, and most recently &lt;a href=&quot;https://microsoft.github.io/microsoft-ui-xaml/&quot;&gt;WinUI&lt;/a&gt;, which nobody wants to use because it’s Windows 10 only. Since xi began, macOS is now catching up in the number of official frameworks, with &lt;a href=&quot;https://developer.apple.com/mac-catalyst/&quot;&gt;Catalyst&lt;/a&gt; and SwiftUI added to the roster. Outside the realm of official Apple projects, lots of stuff is shipping in Electron these days, and there are other choices including Qt, Flutter, Sciter, etc.&lt;/p&gt;
&lt;p&gt;When doing some &lt;a href=&quot;https://www.recurse.com/events/localhost-raph-levien&quot;&gt;performance work&lt;/a&gt; on xi, I found to my great disappointment that performance of these so-called “native” UI toolkits was often pretty poor, even for what you’d think of as the relatively simple task of displaying a screenful of text. A large part of the problem is that these toolkits were generally made at a time when software rendering was a reasonable approach to getting pixels on screen. These days, I consider GPU acceleration to be essentially required for good GUI performance. There’s a whole other blog post in the queue about how some toolkits try to work around these performance limitations by leveraging the compositor more, but that has its own set of drawbacks, often including somewhat ridiculous RAM usage for all the intermediate textures.&lt;/p&gt;
&lt;p&gt;I implemented an OpenGL-based text renderer for xi-mac, and did similar explorations on Windows, but this approach gives up a lot of the benefits of using the native features (as a consequence, emoji didn’t render correctly). Basically, I discovered that there is a pretty big opportunity to build UI that doesn’t suck.&lt;/p&gt;
&lt;p&gt;Perhaps the most interesting exploration was on Windows, the &lt;a href=&quot;https://github.com/xi-editor/xi-win&quot;&gt;xi-win&lt;/a&gt; project. Originally I was expecting to build the front-end in C# using one of the more mainstream stacks, but I also wanted to explore the possibility of using lower-level platform capabilities and programming the UI in Rust. Early indications were positive, and this project gradually morphed into &lt;a href=&quot;https://github.com/linebender/druid&quot;&gt;Druid&lt;/a&gt;, a native Rust GUI toolkit which I consider very promising.&lt;/p&gt;
&lt;p&gt;If I had said that I would be building a GUI toolkit from scratch as part of this work when I set out, people would have rightly ridiculed the scope as far too ambitious. But that is how things are turning out.&lt;/p&gt;
&lt;h2 id=&quot;fuchsia&quot;&gt;Fuchsia&lt;/h2&gt;
&lt;p&gt;An important part of the history of the project is its home in Fuchsia for a couple years. I was fortunate that the team was willing to invest in the xi vision, including funding Colin’s work and letting me host Tristan to build multi-device collaborative editing as an intern project. In many ways the goals and visions aligned, and the demo of that was impressive. Ultimately, though, Fuchsia was not at the time (and still isn’t) ready to support the kind of experience that xi was shooting for. Part of the motivation was also to develop a better IME protocol, and that made some progress (continued by Robert Lord, and you can read about some of what we discovered in &lt;a href=&quot;https://lord.io/blog/2019/text-editing-hates-you-too/&quot;&gt;Text Editing Hates You Too&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;It’s sad this didn’t work out better, but such is life.&lt;/p&gt;
&lt;h2 id=&quot;a-low-point&quot;&gt;A low point&lt;/h2&gt;
&lt;p&gt;My emotional tone over the length of the project went up and down, with the initial enthusiasm, stretches of slow going, a renewed excitement over getting the syntax highlighting done, and some other low points. One of those was learning about the &lt;a href=&quot;https://github.com/atom-archive/xray&quot;&gt;xray&lt;/a&gt; project. I probably shouldn’t have taken this personally, as it is &lt;em&gt;very common&lt;/em&gt; in open source for people to spin up new projects for a variety of reasons, not least of which is that it’s fun to do things yourself, and often you learn a lot.&lt;/p&gt;
&lt;p&gt;Even so, xray was a bit of a wake-up call for me. It was evidence that the vision I had set out for xi was not quite compelling enough that people would want to join forces. Obviously, the design of xray had a huge amount of overlap with xi (including the choice of Rust and decision to use a CRDT), but there were other significant differences, particularly the choice to use Web technology for the UI so it would be cross-platform (the fragmented state of xi front-ends, especially the lack of a viable Windows port, was definitely a problem).&lt;/p&gt;
&lt;p&gt;I’m putting this here because often, how you &lt;em&gt;feel&lt;/em&gt; about a project is just as important, even more so, than technical aspects. I now try to listen more deeply to those emotional signals, especially valid criticisms.&lt;/p&gt;
&lt;h2 id=&quot;community&quot;&gt;Community&lt;/h2&gt;
&lt;p&gt;Part of the goal of the project was to develop a good open-source community. We did pretty well, but looking back, there are some things we could have done better.&lt;/p&gt;
&lt;p&gt;A lot of the friction was simply the architectural burden described above. But in general I think the main thing we could have done better is giving contributors more &lt;em&gt;agency.&lt;/em&gt; If you have an idea for a feature or other improvement, you should be able to come to the project and do it. The main role of the maintainers should be to help you do that. In xi, far too often things were blocking on some major architectural re-work (we have to redo the plug-in API before you can implement that feature). One of the big risks in a modular architecture is that it is often expedient to implement things in one module when to do things “right” might require it in a different place, or, even worse, require changes in inter-module interfaces. We had these decisions a lot, and often as maintainers we were in a gate-keeping role. One of the worst examples of this was vi keybindings, for which there was a great deal of community interest, and even a &lt;a href=&quot;https://github.com/Peltoche/vixi&quot;&gt;project done off to the side&lt;/a&gt; to try to achieve it, but never merged into the main project.&lt;/p&gt;
&lt;p&gt;So I think monolithic architectures, perhaps ironically, are &lt;em&gt;better&lt;/em&gt; for community. Everybody takes some responsibility for the quality of the whole.&lt;/p&gt;
&lt;p&gt;In 2017 we hosted three Google Summer of Code Students: Anna Scholtz, Dzũng Lê, and Pranjal Paliwal. This worked out well, and I think GSoC is a great resource.&lt;/p&gt;
&lt;p&gt;I have been fortunate for almost the entire time to have Colin Rofls taking on most of the front-line community interaction. To the extent that xi has been a good community, much of the credit is due him.&lt;/p&gt;
&lt;p&gt;One of the things we have done very right is setting up a Zulip instance. It’s open to all with a Github account, but we have had virtually no difficulty with moderation issues. We try to maintain positive interactions around all things, and lead by example. This continues as we pivot to other things, and may be one of the more valuable spin-offs of the project.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The xi-editor project had very ambitious goals, and bet on a number of speculative research subprojects. Some of those paid off, others didn’t. One thing I would do differently is more clearly identify which parts are research and which parts are reasonably straightforward implementations of known patterns. I try to do that more explicitly today.&lt;/p&gt;
&lt;p&gt;To a large extent the project was optimized for learning rather than shipping, and through that lens it has been pretty successful. I now know a lot more than I did about building editor-like GUI applications in Rust, and am now applying that to making the &lt;a href=&quot;https://github.com/linebender/druid&quot;&gt;Druid&lt;/a&gt; toolkit and the &lt;a href=&quot;https://github.com/linebender/runebender&quot;&gt;Runebender&lt;/a&gt; font editor. Perhaps more important, because these projects are more ambitious than one person could really take on, the community started around xi-editor is evolving into one that can sustain GUI in Rust. I’m excited to see what we can do.&lt;/p&gt;
&lt;p&gt;Discuss on &lt;a href=&quot;https://news.ycombinator.com/item?id=23663878&quot;&gt;Hacker News&lt;/a&gt; and &lt;a href=&quot;https://www.reddit.com/r/rust/comments/hgzdu5/xieditor_retrospective/&quot;&gt;/r/rust&lt;/a&gt;.&lt;/p&gt;
</description>
<pubDate>Sat, 27 Jun 2020 19:06:44 +0000</pubDate>
<dc:creator>raphlinus</dc:creator>
<og:title>xi-editor retrospective</og:title>
<og:description>A bit more than four years ago I started the xi-editor project. Now I have placed it on the back burner (though there is still some activity from the open source community). The original goal was to deliver a very high quality editing experience. To this end, the project spent a rather large number of “novelty points”: Rust as the implementation language for the core. A rope data structure for text storage. A multiprocess architecture, with front-end and plug-ins each with their own process. Fully embracing async design. CRDT as a mechanism for concurrent modification. I still believe it would be possible to build a high quality editor based on the original design. But I also believe that this would be quite a complex system, and require significantly more work than necessary. I’ve written the CRDT part of this retrospective already, as a comment in response to a Github issue. That prompted good discussion on Hacker News. In this post, I will touch again on CRDT but will focus on the other aspects of the system design. Origins The original motivation for xi came from working on the Android text stack, and confronting two problems in particular. One, text editing would become very slow as the text buffer got bigger. Two, there were a number of concurrency bugs in the interface between the EditText widget and the keyboard (input method editor). The culprit of the first problem turned out to be the SpanWatcher interface, combined with the fact that modern keyboards like to put a spelling correction span on each word. When you insert a character, all the successive spans bump their locations up by one, and then you have to send onSpanChanged for each of those spans to all the watchers. Combined with the fact that the spans data structure had a naive O(n) implementation, and the whole thing was quadratic or worse. The concurrency bugs boil down to synchronizing edits across two different processes, because the keyboard is a different process than the application hosting the EditText widget. Thus, when you send an update (to move the cursor, for example) and the text on the other side is changing concurrently, it’s ambiguous whether it refers to the old or new location. This was handled in an “almost correct” style, with timeouts for housekeeping updates to minimize the chance of a race. A nice manifestation of that is that swiping the cursor slowly through text containing complex emoji could cause flashes of the emoji breaking. These problems have a unifying thread: in both cases there are small diffs to the text, but then the data structures and protocols handled these diffs in a less than optimal way, leading to both performance and correctness bugs. To a large extent, xi started as an exploration into the “right way” to handle text editing operations. In the case of the concurrency bugs, I was hoping to find a general, powerful technique to facilitate concurrent text editing in a distributed-ish system. While most of the Operational Transformation literature is focused on multiple users collaboratively editing a document, I was hoping that other text manipulations (like an application enforcing credit card formatting on a text input field) could fit into the general framework. That was also the time I was starting to get heavily into Rust, so it made natural sense to start prototyping a new green-field text editing engine. How would you “solve text” if you were free of backwards compatibility constraints (a huge problem in Android)? When I started, I knew that Operational Transformation was a solution for collaborative editing, but had a reputation for being complex and finicky. I had no idea how deep the rabbithole would be of OT and then CRDT. Much of that story is told in the CRDT discussion previously linked. The lure of modular software There is an extremely long history of people trying to build software as composable modules connected by some kind of inter-module communication fabric. Historical examples include DCE/RPC, Corba, Bonobo, and more recently things like Sandstorm and Fuchsia Modular. There are some partial successes, including Binder on Android, but this is still mostly an unrealized vision. (Regarding Binder, it evolved from a much more idealistic vision, and I strongly recommend reading this 2006 interview about OpenBinder). When I started xi, there were signs we were getting there. Microservices were becoming popular in the Internet world, and of course all Web apps have a client/server boundary. Within Google, gRPC was working fairly well, as was the internal process separation within Chrome. In Unix land, there’s a long history of the terminal itself presenting a GUI (if primitive, though gaining features such as color and mouse). There’s also the tradition of Blit and then, of course, NeWS and X11. I think one of the strongest positive models was the database / business logic split, which is arguably the most successful example of process separation. In this model, the database is responsible for performance and integrity, and the business logic is in a separate process, so it can safely do things like crash and hang. I very much thought of xi-core as a database-like engine, capable of handling concurrent text modification much like a database handles transactions. Building software in such a modular way requires two things: first, infrastructure to support remote procedure calls (including serialization of the requests and data), and second, well-defined interfaces. Towards the end of 2017, I saw the goal of xi-editor as primarily being about defining the interfaces needed for large scale text editing, and that this work could endure over a long period of time even as details of the implementation changed. For the infrastructure, we chose JSON (about which more below) and hand-rolled our own xi-rpc layer (based on JSON-RPC). It turns out there are a lot of details to get right, including dealing with error conditions, negotiating when two ends of the protocol aren’t exactly on the same version, etc. One of the bolder design decisions in xi was to have a process separation between front-end and core. This was inspired in part by Neovim, in which everything is a plugin, even GUI. But the main motivation was to build GUI applications using Rust, even though at the time Rust was nowhere near capable of native GUI. The idea is that you use the best GUI technology of the platform, and communicate via async pipes. One argument for process separation is to improve overall system reliability. For example, Chrome has a process per tab, and if the process crashes, all you get is an “Aw, snap” without bringing the whole browser down. I think it’s worth asking the question: is it useful to have the front-end continue after the core crashes, or the other way around? I think probably not; in the latter case it might be able to safely save the file, but you can also do that by frequently checkpointing. Looking back, I see much of the promise of modular software as addressing goals related to project management, not technical excellence. Ideally, once you’ve defined an inter-module architecture, then smaller teams can be responsible for their own module, and the cost of coordination goes down. I think this type of project management structure is especially appealing to large companies, who otherwise find it difficult to manage larger projects. And the tax of greater overall complexity is often manageable, as these big companies tend to have more resources. JSON The choice of JSON was controversial from the start. It did end up being a source of friction, but for surprising reasons. The original vision was to write plug-ins in any language, especially for things like language servers that would be best developed in the language of that ecosystem. This is the main reason I chose JSON, because I expected there would be high quality implementations in every viable language. Many people complained about the fact that JSON escapes strings, and suggested alternatives such as MessagePack. But I knew that the speed of raw JSON parsing was a solved problem, with a number of extremely high performance implementations (simdjson is a good example). Even so, aside from the general problems of modular software as described above, JSON was the source of two additional problems. For one, JSON in Swift is shockingly slow. There are discussions on improving it but it’s still a problem. This is surprising to me considering how important it is in many workloads, and the fact that it’s clearly possible to write a high performance JSON implementation. Second, on the Rust side, while serde is quite fast and very convenient (thanks to proc macros), when serializing a large number of complex structures, it bloats code size considerably. The xi core is 9.3 megabytes in a Linux release build (debug is an eye-watering 88MB), and a great deal of that bloat is serialization. There is work to reduce this, including miniserde and nanoserde, but serde is still by far the most mainstream. I believe it’s possible to do performant, clean JSON across most languages, but people should know, we’re not there yet. The rope There are only a few data structures suitable for representation of text in a text editor. I would enumerate them as: contiguous string, gapped buffer, array of lines, piece table, and rope. I would consider the first unsuitable for the goals of xi-editor as it doesn’t scale well to large documents, though its simplicity is appealing, and memcpy is fast these days; if you know your document is always under a megabyte or so, it’s probably the best choice. Array of lines has performance failure modes, most notably very long lines. Similarly, many good editors have been written using piece tables, but I’m not a huge fan; performance is very good when first opening the file, but degrades over time. My favorite aspect of the rope as a data structure is its excellent worst-case performance. Basically, there aren’t any cases where it performs badly. And even the concern about excess copying because of its immutability might not be a real problem; Rust has a copy-on-write mechanism where you can mutate in-place when there’s only one reference to the data. The main argument against the rope is its complexity. I think this varies a lot by language; in C a gapped buffer might be preferable, but I think in Rust, a rope is the sweet spot. A large part of the reason is that in C, low level implementation details tend to leak through; you’ll often be dealing with a pointer to the buffer. For the common case of operations that don’t need to span the gap, you can hand out a pointer to a contiguous slice, and things just don’t get any simpler than that. Conversely, if any of the invariants of the rope are violated, the whole system will just fall apart. In Rust, though, things are different. Proper Rust style is for all access to the data structure to be mediated by a well-defined interface. Then the details about how that’s implemented are hidden from the user. A good way to think about this is that the implementation has complexity, but that complexity is contained. It doesn’t leak out. I think the rope in xi-editor meets that ideal. A lot of work went into getting it right, but now it works. Certain things, like navigating by line and counting UTF-16 code units, are easy and efficient. It’s built in layers, so could be used for other things including binary editing. One of the best things about the rope is that it can readily and safely be shared across threads. Ironically we didn’t end up making much use of that in xi-editor, as it was more common to share across processes, using sophisicated diff/delta and caching protocols. A rope is a fairly niche data structure. You really only want it when you’re dealing with large sequences, and also doing a lot of small edits on them. Those conditions rarely arise outside text editors. But for people building text editing in Rust, I think xi-rope holds up well and is one of the valuable artifacts to come from the project. There’s a good HN discussion of text editor data structures where I talk about the rope more, and can also point people to the Rope science series for more color. Async is a complexity multiplier We knew going in that async was going to be a source of complexity. The hope is that we would be able to tackle the async stuff once, and that the complexity would be encapsulated, much as it was for the rope data structure. The reality was that adding async made everything more complicated, in some cases considerably so. A particularly difficult example was dealing with word wrap. In particular, when the width of the viewport is tied to the window, then live-resizing the window causes text to rewrap continuously. With the process split between front-end and core, and an async protocol between them, all kinds of interesting things can go wrong, including races between editing actions and word wrap updates. More fundamentally, it is difficult to avoid tearing-style artifacts. One early relative success was implementing scrolling. The problem is that, as you scroll, the front-end needs to sometimes query the core to fetch visible text that’s outside its cache. We ended up building this, but it took months to get it right. By contrast, if we just had the text available as an in-process data structure for the UI to query, it would have been quite straightforward. I should note that async in interactive systems is more problematic than the tamer variety often seen in things like web servers. There, the semantics are generally the same as simple blocking threads, just with (hopefully) better performance. But in an interactive system, it’s generally possible to observe internal states. You have to display something, even when not all subqueries have completed. As a conclusion, while the process split with plug-ins is supportable (similar to the Language Server protocol), I now firmly believe that the process separation between front-end and core was not a good idea. Syntax highlighting Probably the high point of the project was the successful implementation of syntax highlighting, based on Tristan Hume’s syntect library, which was motivated by xi. There’s a lot more to say about this. First, TextMate / Sublime style syntax highlighting is not really all that great. It is quite slow, largely because it grinds through a lot of regular expressions with captures, and it is also not very precise. On the plus side, there is a large and well-curated open source collection of syntax definitions, and it’s definitely “good enough” for most use. Indeed, code that fools these syntax definitions (such as two open braces on the same line) is a good anti-pattern to avoid. It may be surprising just how much slower regex-based highlighting is than fast parsers. The library that xi uses, syntect, is probably the fastest open source implementation in existence (the one in Sublime is faster but not open source). Even so, it is approximately 2500 times slower for parsing Markdown than pulldown-cmark. And syntect doesn’t even parse setext-style lists correctly, because Sublime style syntax definitions have to work line-at-a-time, and the line of dashes following a heading isn’t available until the next line. These facts influenced the design of xi in two important ways. First, I took it as a technical challenge to provide a high-performance editing experience even on large files, overcoming the performance problems through async. Second, the limitations of the regex-based approach argued in favor of a modular plug-in architecture, so that as better highlighters were developed, they could be plugged in. I had some ambitions of creating a standard protocol that could be used by other editors, but this absolutely failed to materialize. For example, Atom instead developed tree-sitter. In any case, I dug in and did it. The resulting implementation is impressive in many ways. The syntax highlighter lives in a different process, with asynchronous updates so typing is never slowed down. It’s also incremental, so even if changes ripple through a large file, it updates what’s on the screen quickly. Some of the sophistication is described in Rope science 11. There was considerable complexity in the implementation. Text was synchronized between the main xi-core process and the plug-in, but for large files, the latter stores only a fixed-size cache; the cache protocol ended up being quite sophisticated. Updates were processed through a form of Operational Transformation, so if a highlighting result raced a text edit, it would never color an incorrect region (this is still very much a problem for language server annotations). As I said, syntax highlighting was something of a high point. The success suggested that a similar high-powered engineering approach could systematically work through the other problems. But this was not to be. As part of this work, I explored an alternative syntax highlighting engine based on parser combinators. If I had pursued that, the result would have been lightning fast, of comparable quality to the regex approach, and difficult to create syntax descriptions, as it involved a fair amount of manual factoring of parsing state. While the performance would have been nice to have, ultimately I don’t think there’s much niche for such a thing. If I were trying to create the best possible syntax highlighting experience today, I’d adapt Marijn Haverbeke’s Lezer. To a large extent, syntax highlighting is a much easier problem than many of the others we faced, largely because the annotations are a history-free function of the document’s plain text. The problem of determining indentation may seem similar, but is dependent on history. And it basically doesn’t fit nicely in the CRDT model at all, as that requires the ability to resolve arbitrarily divergent edits between the different processes (imagine that one goes offline for a bit, types a bit, then the language server comes back online and applies indentation). Another problem is that our plug-in interface had become overly specialized to solve the problems of syntax highlighting, and did not well support the other things we wanted to do. I think those problems could have been solved, but only with significant difficulty. There is no such thing as native GUI As mentioned above, a major motivation for the front-end / core process split was to support development of GUI apps using a polyglot approach, as Rust wasn’t a suitable language for building GUI. The theory was that you’d build the GUI using whatever libraries and language that was most suitable for the platform, basically the platform’s native GUI, then interact with the Rust engine using interprocess communication. The strongest argument for this is probably macOS, which at the time had Cocoa as basically the blessed way to build GUI. Most other platforms have some patchwork of tools. Windows is particularly bad in this respect, as there’s old-school (GDI+ based) win32, WinForms, WPF, Xamarin, and most recently WinUI, which nobody wants to use because it’s Windows 10 only. Since xi began, macOS is now catching up in the number of official frameworks, with Catalyst and SwiftUI added to the roster. Outside the realm of official Apple projects, lots of stuff is shipping in Electron these days, and there are other choices including Qt, Flutter, Sciter, etc. When doing some performance work on xi, I found to my great disappointment that performance of these so-called “native” UI toolkits was often pretty poor, even for what you’d think of as the relatively simple task of displaying a screenful of text. A large part of the problem is that these toolkits were generally made at a time when software rendering was a reasonable approach to getting pixels on screen. These days, I consider GPU acceleration to be essentially required for good GUI performance. There’s a whole other blog post in the queue about how some toolkits try to work around these performance limitations by leveraging the compositor more, but that has its own set of drawbacks, often including somewhat ridiculous RAM usage for all the intermediate textures. I implemented an OpenGL-based text renderer for xi-mac, and did similar explorations on Windows, but this approach gives up a lot of the benefits of using the native features (as a consequence, emoji didn’t render correctly). Basically, I discovered that there is a pretty big opportunity to build UI that doesn’t suck. Perhaps the most interesting exploration was on Windows, the xi-win project. Originally I was expecting to build the front-end in C# using one of the more mainstream stacks, but I also wanted to explore the possibility of using lower-level platform capabilities and programming the UI in Rust. Early indications were positive, and this project gradually morphed into Druid, a native Rust GUI toolkit which I consider very promising. If I had said that I would be building a GUI toolkit from scratch as part of this work when I set out, people would have rightly ridiculed the scope as far too ambitious. But that is how things are turning out. Fuchsia An important part of the history of the project is its home in Fuchsia for a couple years. I was fortunate that the team was willing to invest in the xi vision, including funding Colin’s work and letting me host Tristan to build multi-device collaborative editing as an intern project. In many ways the goals and visions aligned, and the demo of that was impressive. Ultimately, though, Fuchsia was not at the time (and still isn’t) ready to support the kind of experience that xi was shooting for. Part of the motivation was also to develop a better IME protocol, and that made some progress (continued by Robert Lord, and you can read about some of what we discovered in Text Editing Hates You Too). It’s sad this didn’t work out better, but such is life. A low point My emotional tone over the length of the project went up and down, with the initial enthusiasm, stretches of slow going, a renewed excitement over getting the syntax highlighting done, and some other low points. One of those was learning about the xray project. I probably shouldn’t have taken this personally, as it is very common in open source for people to spin up new projects for a variety of reasons, not least of which is that it’s fun to do things yourself, and often you learn a lot. Even so, xray was a bit of a wake-up call for me. It was evidence that the vision I had set out for xi was not quite compelling enough that people would want to join forces. Obviously, the design of xray had a huge amount of overlap with xi (including the choice of Rust and decision to use a CRDT), but there were other significant differences, particularly the choice to use Web technology for the UI so it would be cross-platform (the fragmented state of xi front-ends, especially the lack of a viable Windows port, was definitely a problem). I’m putting this here because often, how you feel about a project is just as important, even more so, than technical aspects. I now try to listen more deeply to those emotional signals, especially valid criticisms. Community Part of the goal of the project was to develop a good open-source community. We did pretty well, but looking back, there are some things we could have done better. A lot of the friction was simply the architectural burden described above. But in general I think the main thing we could have done better is giving contributors more agency. If you have an idea for a feature or other improvement, you should be able to come to the project and do it. The main role of the maintainers should be to help you do that. In xi, far too often things were blocking on some major architectural re-work (we have to redo the plug-in API before you can implement that feature). One of the big risks in a modular architecture is that it is often expedient to implement things in one module when to do things “right” might require it in a different place, or, even worse, require changes in inter-module interfaces. We had these decisions a lot, and often as maintainers we were in a gate-keeping role. One of the worst examples of this was vi keybindings, for which there was a great deal of community interest, and even a project done off to the side to try to achieve it, but never merged into the main project. So I think monolithic architectures, perhaps ironically, are better for community. Everybody takes some responsibility for the quality of the whole. In 2017 we hosted three Google Summer of Code Students: Anna Scholtz, Dzũng Lê, and Pranjal Paliwal. This worked out well, and I think GSoC is a great resource. I have been fortunate for almost the entire time to have Colin Rofls taking on most of the front-line community interaction. To the extent that xi has been a good community, much of the credit is due him. One of the things we have done very right is setting up a Zulip instance. It’s open to all with a Github account, but we have had virtually no difficulty with moderation issues. We try to maintain positive interactions around all things, and lead by example. This continues as we pivot to other things, and may be one of the more valuable spin-offs of the project. Conclusion The xi-editor project had very ambitious goals, and bet on a number of speculative research subprojects. Some of those paid off, others didn’t. One thing I would do differently is more clearly identify which parts are research and which parts are reasonably straightforward implementations of known patterns. I try to do that more explicitly today. To a large extent the project was optimized for learning rather than shipping, and through that lens it has been pretty successful. I now know a lot more than I did about building editor-like GUI applications in Rust, and am now applying that to making the Druid toolkit and the Runebender font editor. Perhaps more important, because these projects are more ambitious than one person could really take on, the community started around xi-editor is evolving into one that can sustain GUI in Rust. I’m excited to see what we can do. Discuss on Hacker News and /r/rust.</og:description>
<og:url>https://raphlinus.github.io/xi/2020/06/27/xi-retrospective.html</og:url>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://raphlinus.github.io/xi/2020/06/27/xi-retrospective.html</dc:identifier>
</item>
<item>
<title>How Does Sqlite Work? (2014)</title>
<link>https://jvns.ca/blog/2014/09/27/how-does-sqlite-work-part-1-pages/</link>
<guid isPermaLink="true" >https://jvns.ca/blog/2014/09/27/how-does-sqlite-work-part-1-pages/</guid>
<description>&lt;p&gt;This evening the fantastic &lt;a href=&quot;https://twitter.com/kamalmarhubi&quot;&gt;Kamal&lt;/a&gt; and I sat down to learn a little more about databases than we did before.&lt;/p&gt;
&lt;p&gt;I wanted to hack on &lt;a href=&quot;https://www.sqlite.org/&quot;&gt;SQLite&lt;/a&gt;, because I’ve used it before, it requires no configuration or separate server process, I’d been told that its source code is well-written and approachable, and all the data is stored in one file. Perfect!&lt;/p&gt;
&lt;p&gt;To start out, I created a new database like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot;&gt;drop table if exists fun;
create table fun (
    id int PRIMARY KEY,
    word string
);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Just a primary key and a string! What could be simpler? I then wrote a little Python script to put the contents of &lt;code&gt;/usr/share/dict/words&lt;/code&gt; in the database:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;import sqlite3
c = sqlite3.connect(&quot;./fun.sqlite&quot;)
with open('/usr/share/dict/words') as f:
    for i, word in enumerate(f):
        word = word.strip()
        word = unicode(word, 'latin1')
        c.execute(&quot;INSERT INTO fun VALUES (?, ?);&quot;, (i, word))
c.commit()
c.close()
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Great! Now we have a 4MB database called &lt;code&gt;fun.sqlite&lt;/code&gt; for experimentation. My favorite first thing to do with binary files is to &lt;code&gt;cat&lt;/code&gt; them. That worked pretty well, but Kamal pointed out that of course &lt;code&gt;hexdump&lt;/code&gt; is a better way to look at binary files. The output of &lt;code&gt;hexdump -C fun.sqlite&lt;/code&gt; looks something like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;|.............{.n|
|.a.R.D.4.%......|
|................|
|...y.n._.N.&amp;gt;.,.$|
|................|
|..............F.|
|..EAcevedo.E...D|
|Accra's.D...CAcc|
|ra.C..#BAccentur|
|e's.B...AAccentu|
|&lt;a href=&quot;https://jvns.ca/cdn-cgi/l/email-protection&quot; class=&quot;__cf_email__&quot; data-cfemail=&quot;4f3d2a610e61616e0f0e2c2e3f3a232c20&quot;&gt;[email protected]&lt;/a&gt;|
|'&lt;a href=&quot;https://jvns.ca/cdn-cgi/l/email-protection&quot; class=&quot;__cf_email__&quot; data-cfemail=&quot;5e2d701e707070&quot;&gt;[email protected]&lt;/a&gt;?Acapulco|
|.?...&amp;gt;Acadia's.&amp;gt;|
|...=Aradia.=...&amp;lt;|
|Ac's.&amp;lt;...;Ac.;..|
|%:Abyssinian's.:|
|..!9Abyssinian.9|
|..#8Abyssinia's.|
|8...7Abyssinia.7|
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I’ve pasted the first few thousand lines of the hexdump in &lt;a href=&quot;https://gist.github.com/jvns/d21876d1388343c3a4a3&quot;&gt;this gist&lt;/a&gt;, so you can look more closely. You’ll see that the file is alternately split into words and gibberish – there will be a sequence of mostly words, and then unreadable nonsense.&lt;/p&gt;
&lt;p&gt;Of course there’s a rhyme to this reason! The wonderfully written &lt;a href=&quot;https://www.sqlite.org/fileformat2.html&quot;&gt;File Format for SQLite Databases&lt;/a&gt; tells us that a SQLite database is split into &lt;strong&gt;pages&lt;/strong&gt;, and that bytes 16 and 17 of our file are the &lt;strong&gt;page size&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;My &lt;code&gt;fun.sqlite&lt;/code&gt; starts like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;00000000  53 51 4c 69 74 65 20 66  6f 72 6d 61 74 20 33 00  |SQLite format 3.|
00000010  04 00 01 01 00 40 20 20  00 00 00 27 00 00 0c be  |&lt;a href=&quot;https://jvns.ca/cdn-cgi/l/email-protection&quot; class=&quot;__cf_email__&quot; data-cfemail=&quot;f2dcdcdcdcdcb2&quot;&gt;[email protected]&lt;/a&gt;  ...'....|
          ^^ ^^
        page size :)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;so our page size is &lt;code&gt;0x0400&lt;/code&gt; bytes, or 1024 bytes, or 1k. So this database is split into a bunch of 1k chunks called pages.&lt;/p&gt;
&lt;p&gt;There’s an index on the &lt;code&gt;id&lt;/code&gt; column of our &lt;code&gt;fun&lt;/code&gt; table, which lets us run queries like &lt;code&gt;select * from fun where id = 100&lt;/code&gt; quickly. To be a bit more precise: to find row 100, we don’t need to read every page, we can just read a few pages. I’ve always understood indexes in a pretty vague way – I know that they’re “some kind of tree”, which lets you access data in O(log n), and in particular that databases use something called a &lt;strong&gt;btree&lt;/strong&gt;. I still do not really know what a btree is. Let’s see if we can do any better!&lt;/p&gt;
&lt;p&gt;Here’s where it starts to get really fun! I downloaded the sqlite source code, and Kamal and I figured out how to get it to compile. (using nix, which is a totally other story)&lt;/p&gt;
&lt;p&gt;Then I put in a print statement so that it would tell me every time it accesses a page. There’s about 140,000 lines of SQLite source code, which is a bit intimidating!&lt;/p&gt;
&lt;p&gt;It’s also incredibly well commented, though, and includes adorable notes like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c&quot;&gt;/************** End of btree.c ***********************************************/
/************** Begin file backup.c ******************************************/
/*
** 2009 January 28
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:                                                                                                                                                   
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
** This file contains the implementation of the sqlite3_backup_XXX()
** API functions and the related features.
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;My next goal was to get SQLite to tell me how it was traversing the pages. Some careful grepping of the 140,000 lines led us to this function &lt;code&gt;btreePageFromDbPage&lt;/code&gt;. All page reads need to go through this function, so we can just add some logging to it :)&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c&quot;&gt;/*
** Convert a DbPage obtained from the pager into a MemPage used by
** the btree layer.
*/
static MemPage *btreePageFromDbPage(DbPage *pDbPage, Pgno pgno, BtShared *pBt){
  MemPage *pPage = (MemPage*)sqlite3PagerGetExtra(pDbPage);
  pPage-&amp;gt;aData = sqlite3PagerGetData(pDbPage);
  pPage-&amp;gt;pDbPage = pDbPage;
  pPage-&amp;gt;pBt = pBt;
  pPage-&amp;gt;pgno = pgno;
  printf(&quot;Read a btree page, page number %d\n&quot;, pgno); // added by me!
  pPage-&amp;gt;hdrOffset = pPage-&amp;gt;pgno==1 ? 100 : 0;
  return pPage;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now it’ll notify us every time it reads a page! NEAT! Let’s experiment a little bit.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;sqlite&amp;gt; select * from fun where id = 1;
Read a btree page, page number 1
Read a btree page, page number 5
Read a btree page, page number 828
Read a btree page, page number 10
Read a btree page, page number 2
Read a btree page, page number 76
Read a btree page, page number 6
1|A's

sqlite&amp;gt; select * from fun where id = 20;
Read a btree page, page number 1
Read a btree page, page number 5
Read a btree page, page number 828
Read a btree page, page number 10
Read a btree page, page number 2
Read a btree page, page number 76
Read a btree page, page number 6
20|Aaliyah
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Those two rows (1 and 20) are in the same page, so it traverses the same path to get to both of them!&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;sqlite&amp;gt; select * from fun where id = 200;
Read a btree page, page number 1
Read a btree page, page number 5
Read a btree page, page number 828
Read a btree page, page number 11
Read a btree page, page number 2
Read a btree page, page number 76
Read a btree page, page number 2818
200|Aggie
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Apparently &lt;code&gt;200&lt;/code&gt; is pretty close in the tree, but it needs to go to page &lt;code&gt;2818&lt;/code&gt; instead at the end. And &lt;code&gt;80000&lt;/code&gt; is much further away:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;sqlite&amp;gt; select * from fun where id = 80000;
Read a btree page, page number 1
Read a btree page, page number 5
Read a btree page, page number 1198
Read a btree page, page number 992
Read a btree page, page number 2
Read a btree page, page number 1813
Read a btree page, page number 449
80000|scarfs
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If we go back and inspect the file, we can see that pages 1, 5, 1198, 992, 2, and 1813 are &lt;em&gt;interior nodes&lt;/em&gt; – they have no data in them, just pointers to other pages. Pages 6, 2818, and 449 are &lt;em&gt;leaf nodes&lt;/em&gt;, and they’re where the data is.&lt;/p&gt;
&lt;p&gt;I’m still not super clear on how exactly the interior pages are structured and how the pointers to their child pages work. It’s time to sleep now, but perhaps that will happen another day!&lt;/p&gt;
&lt;p&gt;Modifying open source programs to print out debug information to understand their internals better: SO FUN.&lt;/p&gt;
</description>
<pubDate>Sat, 27 Jun 2020 17:17:18 +0000</pubDate>
<dc:creator>searchableguy</dc:creator>
<og:title>How does SQLite work? Part 1: pages!</og:title>
<og:description>This evening the fantastic Kamal and I sat down to learn a little more about databases than we did before. I wanted to hack on SQLite, because I’ve used it before, it requires no configuration or separate server process, I’d been told that its source code is well-written and approachable, and all the data is stored in one file. Perfect!</og:description>
<og:type>website</og:type>
<og:url>https://jvns.ca/blog/2014/09/27/how-does-sqlite-work-part-1-pages/</og:url>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://jvns.ca/blog/2014/09/27/how-does-sqlite-work-part-1-pages/</dc:identifier>
</item>
<item>
<title>Sensors detect rise in nuclear particles on Baltic Sea</title>
<link>https://mobile.reuters.com/article/idUSKBN23X2TN</link>
<guid isPermaLink="true" >https://mobile.reuters.com/article/idUSKBN23X2TN</guid>
<description>&lt;p&gt;VIENNA (Reuters) - Radiation sensors in Stockholm have detected higher-than-usual but still harmless levels of isotopes produced by nuclear fission, probably from somewhere on or near the Baltic Sea, a body running a worldwide network of the sensors said on Friday.&lt;/p&gt;
&lt;p&gt;The Comprehensive Nuclear-Test-Ban Treaty Organization (CTBTO) oversees a network of hundreds of monitoring stations that use seismic, hydroacoustic and other technology to check for a nuclear weapon test anywhere in the world. That technology can, however, be put to other uses as well.&lt;/p&gt;
&lt;p&gt;One of its stations scanning the air for radionuclides - telltale radioactive particles that can be carried long distances by the wind - detected unusually high levels of three radionuclides earlier this week: caesium-134, caesium-137 and ruthenium-103.&lt;/p&gt;
&lt;p&gt;The Stockholm monitoring station &quot;detected 3isotopes; Cs-134, Cs-137 &amp;amp; Ru-103 associated w/Nuclear fission @ higher[ ] than usual levels (but not harmful for human health)&quot;, CTBTO chief Lassina Zerbo said on Twitter (&lt;a href=&quot;https://twitter.com/SinaZerbo/status/1276559857731153921?s=20&quot;&gt;here&lt;/a&gt;) on Friday evening.&lt;/p&gt;
&lt;p&gt;The particles were detected on “22/23 June”, he added.&lt;/p&gt;
&lt;p&gt;Zerbo's post included a borderless map showing where the particles might have come from in the 72 hours before they were detected - a large area (&lt;a href=&quot;https://twitter.com/SinaZerbo/status/1276559857731153921/photo/1&quot;&gt;here&lt;/a&gt;) covering the tips of Denmark and Norway as well as southern Sweden, much of Finland, Baltic countries and part of western Russia including St Petersburg.&lt;/p&gt;
&lt;p&gt;“These are certainly nuclear fission products, most likely from a civil source,” a spokeswoman for the Vienna-based CTBTO said, referring to the atomic chain reaction that generates heat in a nuclear reactor.&lt;/p&gt;
&lt;p&gt;“We are able to indicate the likely region of the source, but it’s outside the CTBTO’s mandate to identify the exact origin,” she added.&lt;/p&gt;
&lt;div class=&quot;Attribution_container&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;Attribution_attribution&quot; readability=&quot;7&quot;&gt;
&lt;p class=&quot;Attribution_content&quot;&gt;Reporting by Francois Murphy; Editing by David Gregorio&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;StandardArticleBody_trustBadgeContainer&quot;&gt;&lt;span class=&quot;StandardArticleBody_trustBadgeTitle&quot;&gt;Our Standards:&lt;/span&gt;&lt;span class=&quot;trustBadgeUrl&quot;&gt;&lt;a href=&quot;http://thomsonreuters.com/en/about-us/trust-principles.html&quot;&gt;The Thomson Reuters Trust Principles.&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
</description>
<pubDate>Sat, 27 Jun 2020 15:01:49 +0000</pubDate>
<dc:creator>BerislavLopac</dc:creator>
<og:title>Sensors detect rise in nuclear particles on Baltic Sea, global body says</og:title>
<og:url>https://www.reuters.com/article/us-nuclear-particles-baltic-idUSKBN23X2TN</og:url>
<og:type>article</og:type>
<og:description>Radiation sensors in Stockholm have detected higher-than-usual but still harmless levels of isotopes produced by nuclear fission, probably from somewhere on or near the Baltic Sea, a body running a worldwide network of the sensors said on Friday.</og:description>
<og:image>https://s4.reutersmedia.net/resources_v2/images/rcom-default.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.reuters.com/article/us-nuclear-particles-baltic/sensors-detect-rise-in-nuclear-particles-on-baltic-sea-global-body-says-idUSKBN23X2TN</dc:identifier>
</item>
<item>
<title>Show HN: Rainbow – an attempt to display colour on a B&amp;W monitor</title>
<link>https://www.anfractuosity.com/projects/rainbow/</link>
<guid isPermaLink="true" >https://www.anfractuosity.com/projects/rainbow/</guid>
<description>&lt;p&gt;The aim of this project was to display a colour image on a black and white monitor, by overlaying an acetate bayer filter over the monitor and mosaicing a colour image.&lt;/p&gt;&lt;p&gt;I obtained an Eizo B&amp;amp;W monitor from ebay, which I was intending for use viewing B&amp;amp;W photos and was curious if I could replicate an effect similar to &lt;strong&gt;Autochrome Lumière&lt;/strong&gt; ( see &lt;a href=&quot;https://en.wikipedia.org/wiki/Autochrome_Lumi%C3%A8re&quot;&gt;wikipedia&lt;/a&gt; ) where they overlay colour filters over a B&amp;amp;W photographic plate, using starch grains, which creates a colour image.&lt;/p&gt;
&lt;p&gt;The following image shows a 500x microscope image of the pixels that make up the B&amp;amp;W LCD display, taken using a very cheap USB microscope. It looks to me as if each pixel, is represented by 4 sub-pixel elements, please correct me if this appears not be the case.&lt;/p&gt;
&lt;img src=&quot;https://www.anfractuosity.com/wp-content/uploads/2020/06/mpv-shot0007.jpg&quot; alt=&quot;&quot; class=&quot;wp-image-4077&quot; srcset=&quot;https://www.anfractuosity.com/wp-content/uploads/2020/06/mpv-shot0007.jpg 640w, https://www.anfractuosity.com/wp-content/uploads/2020/06/mpv-shot0007-300x225.jpg 300w&quot; sizes=&quot;(max-width: 640px) 100vw, 640px&quot;/&gt;&lt;p&gt;A pdf was created of the bayer display, with the dimensions 433.1mm x 324.8mm. The monitor has a resolution of 2048×1536 and I assumed the pixels had the same width as height.&lt;/p&gt;
&lt;p&gt;You can see an example of the pdf I created below, where for example a blue element, should be represented by 2×2 pixels from the B&amp;amp;W monitor.&lt;/p&gt;
&lt;img src=&quot;https://www.anfractuosity.com/wp-content/uploads/2020/06/bayer_pdf-1024x540.png&quot; alt=&quot;&quot; class=&quot;wp-image-4083&quot; srcset=&quot;https://www.anfractuosity.com/wp-content/uploads/2020/06/bayer_pdf-1024x540.png 1024w, https://www.anfractuosity.com/wp-content/uploads/2020/06/bayer_pdf-300x158.png 300w, https://www.anfractuosity.com/wp-content/uploads/2020/06/bayer_pdf-768x405.png 768w, https://www.anfractuosity.com/wp-content/uploads/2020/06/bayer_pdf-1536x810.png 1536w, https://www.anfractuosity.com/wp-content/uploads/2020/06/bayer_pdf.png 1920w&quot; sizes=&quot;(max-width: 1024px) 100vw, 1024px&quot;/&gt;&lt;p&gt;I created 3 pdfs:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;bayer_1.pdf – each element, is represented by 1 pixel from the display&lt;/li&gt;
&lt;li&gt;bayer_2.pdf – each element, is represented by 2×2 pixels from the display (this is the acetate used in the video)&lt;/li&gt;
&lt;li&gt;bayer_4.pdf – each element is represented by 4×4 pixels from the display&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The following image shows the printed acetate with the bayer pattern:&lt;/p&gt;
&lt;img src=&quot;https://www.anfractuosity.com/wp-content/uploads/2020/06/IMG_7509-1024x683.jpg&quot; alt=&quot;&quot; class=&quot;wp-image-4090&quot; srcset=&quot;https://www.anfractuosity.com/wp-content/uploads/2020/06/IMG_7509-1024x683.jpg 1024w, https://www.anfractuosity.com/wp-content/uploads/2020/06/IMG_7509-300x200.jpg 300w, https://www.anfractuosity.com/wp-content/uploads/2020/06/IMG_7509-768x512.jpg 768w, https://www.anfractuosity.com/wp-content/uploads/2020/06/IMG_7509-1536x1024.jpg 1536w, https://www.anfractuosity.com/wp-content/uploads/2020/06/IMG_7509-2048x1365.jpg 2048w&quot; sizes=&quot;(max-width: 1024px) 100vw, 1024px&quot;/&gt;&lt;p&gt;The following, is a B&amp;amp;W image with mosaicing applied from the colour image:&lt;/p&gt;
&lt;a href=&quot;https://www.anfractuosity.com/wp-content/uploads/2020/06/out.png&quot;&gt;&lt;img src=&quot;https://www.anfractuosity.com/wp-content/uploads/2020/06/out-1024x768.png&quot; alt=&quot;&quot; class=&quot;wp-image-4094&quot; srcset=&quot;https://www.anfractuosity.com/wp-content/uploads/2020/06/out-1024x768.png 1024w, https://www.anfractuosity.com/wp-content/uploads/2020/06/out-300x225.png 300w, https://www.anfractuosity.com/wp-content/uploads/2020/06/out-768x576.png 768w, https://www.anfractuosity.com/wp-content/uploads/2020/06/out-1536x1152.png 1536w, https://www.anfractuosity.com/wp-content/uploads/2020/06/out.png 2048w&quot; sizes=&quot;(max-width: 1024px) 100vw, 1024px&quot;/&gt;&lt;/a&gt;
&lt;p&gt;The monitor I am using seems to generally be used portrait, to make it landscape on linux:&lt;/p&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot; title=&quot;&quot;&gt;
xrandr --output HDMI1 --rotate left
&lt;/pre&gt;
&lt;h2&gt;Image of effect&lt;/h2&gt;
&lt;p&gt;As you can see the effect of my attempt is quite slight, but you can see in the centre the different colours of the balloons.&lt;/p&gt;
&lt;a href=&quot;https://www.anfractuosity.com/wp-content/uploads/2020/06/mpv-shot0001.jpg&quot;&gt;&lt;img src=&quot;https://www.anfractuosity.com/wp-content/uploads/2020/06/mpv-shot0001-1024x576.jpg&quot; alt=&quot;&quot; class=&quot;wp-image-4109&quot; srcset=&quot;https://www.anfractuosity.com/wp-content/uploads/2020/06/mpv-shot0001-1024x576.jpg 1024w, https://www.anfractuosity.com/wp-content/uploads/2020/06/mpv-shot0001-300x169.jpg 300w, https://www.anfractuosity.com/wp-content/uploads/2020/06/mpv-shot0001-768x432.jpg 768w, https://www.anfractuosity.com/wp-content/uploads/2020/06/mpv-shot0001-1536x864.jpg 1536w, https://www.anfractuosity.com/wp-content/uploads/2020/06/mpv-shot0001.jpg 1920w&quot; sizes=&quot;(max-width: 1024px) 100vw, 1024px&quot;/&gt;&lt;/a&gt;
&lt;h2&gt;Video of effect&lt;/h2&gt;
&lt;p&gt;The effect is also demonstrated in the following video, with the following parameters:&lt;/p&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot; title=&quot;&quot;&gt;
 mpv out.mkv --fullscreen --loop --brightness=10 --contrast=20
&lt;/pre&gt;
&lt;p&gt;&lt;iframe title=&quot;Rainbow - using an acetate bayer filter over a B&amp;amp;W monitor&quot; width=&quot;940&quot; height=&quot;529&quot; src=&quot;https://www.youtube.com/embed/Sh2d9qAjYPo?feature=oembed&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/p&gt;
&lt;h2&gt;Possible improvements&lt;/h2&gt;
&lt;p&gt;I wonder if by measuring the exact pixel width/height under a microscope, if the effect could possibly be improved somewhat, as that information could be used when creating the acetate filter.&lt;/p&gt;
&lt;p&gt;Alignment is also a key issue, I need to think of ways to improve that possibly using a microscope while aligning the acetate.&lt;/p&gt;
&lt;p&gt;I’d be interested in other improvements I could make too!&lt;/p&gt;
&lt;h2&gt;Source&lt;/h2&gt;
&lt;p&gt;The sourcecode to generate the PDFs for the acetate and the mosaiced images and videos is at:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.github.com/anfractuosity/rainbow&quot;&gt;https://www.github.com/anfractuosity/rainbow&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
&lt;h6 class=&quot;sectiontitle&quot;&gt;&lt;em&gt;8 Comments&lt;/em&gt;&lt;/h6&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;h6 class=&quot;sectiontitle&quot;&gt;&lt;em&gt;Leave Comment&lt;/em&gt;&lt;/h6&gt;
&lt;/p&gt;

</description>
<pubDate>Sat, 27 Jun 2020 13:43:18 +0000</pubDate>
<dc:creator>anfractuosity</dc:creator>
<og:title>Rainbow - an attempt to display colour on a B&amp;W monitor</og:title>
<og:url>https://www.anfractuosity.com/projects/rainbow/</og:url>
<og:type>article</og:type>
<og:description>The aim of this project was to display a colour image on a black and white monitor, by overlaying an acetate bayer filter over the monitor and mosaicing a colour image. I obtained an Eizo B&amp;W monitor from ebay, which I was intending for use viewing B&amp;W photos and was curious if I could re</og:description>
<og:image>https://www.anfractuosity.com/wp-content/uploads/2020/06/mpv-shot0001.jpg</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.anfractuosity.com/projects/rainbow/</dc:identifier>
</item>
<item>
<title>Astronomers detect regular rhythm of radio waves, with origins unknown</title>
<link>http://news.mit.edu/2020/astronomers-rhythm-radio-waves-0617</link>
<guid isPermaLink="true" >http://news.mit.edu/2020/astronomers-rhythm-radio-waves-0617</guid>
<description>&lt;div class=&quot;region region-content&quot;&gt;
&lt;div id=&quot;block-system-main&quot; class=&quot;block block-system&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;field field-name-field-article-content field-type-text-long field-label-hidden&quot;&gt;
&lt;div class=&quot;field-items&quot;&gt;
&lt;div class=&quot;field-item even&quot;&gt;
&lt;p&gt;A team of astronomers, including researchers at MIT, has picked up on a curious, repeating rhythm of fast radio bursts emanating from an unknown source outside our galaxy, 500 million light years away.&lt;/p&gt;
&lt;p&gt;Fast radio bursts, or FRBs, are short, intense flashes of radio waves that are thought to be the product of small, distant, extremely dense objects, though exactly what those objects might be is a longstanding mystery in astrophysics. FRBs typically last a few milliseconds, during which time they can outshine entire galaxies.&lt;/p&gt;
&lt;p&gt;Since the first FRB was observed in 2007, astronomers have catalogued over 100 fast radio bursts from distant sources scattered across the universe, outside our own galaxy. For the most part, these detections were one-offs, flashing briefly before disappearing entirely. In a handful of instances, astronomers observed fast radio bursts multiple times from the same source, though with no discernible pattern.&lt;/p&gt;
&lt;p&gt;This new FRB source, which the team has catalogued as FRB 180916.J0158+65, is the first to produce a periodic, or cyclical pattern of fast radio bursts. The pattern begins with a noisy, four-day window, during which the source emits random bursts of radio waves, followed by a 12-day period of radio silence.&lt;/p&gt;
&lt;p&gt;The astronomers observed that this 16-day pattern of fast radio bursts reoccurred consistently over 500 days of observations.&lt;/p&gt;
&lt;p&gt;“This FRB we’re reporting now is like clockwork,” says Kiyoshi Masui, assistant professor of physics in MIT’s Kavli Institute for Astrophysics and Space Research. “It’s the most definitive pattern we’ve seen from one of these sources. And it’s a big clue that we can use to start hunting down the physics of what’s causing these bright flashes, which nobody really understands.”&lt;/p&gt;
&lt;p&gt;Masui is a member of the CHIME/FRB collaboration, a group of more than 50 scientists led by the University of British Columbia, McGill University, University of Toronto, and the National Research Council of Canada, that operates and analyzes the data from the Canadian Hydrogen Intensity Mapping Experiment, or CHIME, a radio telescope in British Columbia that was the first to pick up signals of the new periodic FRB source.&lt;/p&gt;
&lt;p&gt;The CHIME/FRB Collaboration has published the details of the new observation today in the journal &lt;em&gt;Nature.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A radio view&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In 2017, CHIME was erected at the Dominion Radio Astrophysical Observatory in British Columbia, where it quickly began detecting fast radio bursts from galaxies across the universe, billions of light years from Earth.&lt;/p&gt;
&lt;p&gt;CHIME consists of four large antennas, each about the size and shape of a snowboarding half-pipe, and is designed with no moving parts. Rather than swiveling to focus on different parts of the sky, CHIME stares fixedly at the entire sky, using digital signal processing to pinpoint the region of space where incoming radio waves are originating.&lt;/p&gt;
&lt;p&gt;From September 2018 to February 2020, CHIME picked out 38 fast radio bursts from a single source, FRB 180916.J0158+65, which the astronomers traced to a star-churning region on the outskirts of a massive spiral galaxy, 500 million light years from Earth. The source is the most active FRB source that CHIME has yet detected, and until recently it was the closest FRB source to Earth.&lt;/p&gt;
&lt;p&gt;As the researchers plotted each of the 38 bursts over time, a pattern began to emerge: One or two bursts would occur over four days, followed by a 12-day period without any bursts, after which the pattern would repeat. This 16-day cycle occurred again and again over the 500 days that they observed the source.&lt;/p&gt;
&lt;p&gt;“These periodic bursts are something that we’ve never seen before, and it’s a new phenomenon in astrophysics,” Masui says.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Circling scenarios&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Exactly what phenomenon is behind this new extragalactic rhythm is a big unknown, although the team explores some ideas in their new paper. One possibility is that the periodic bursts may be coming from a single compact object, such as a neutron star, that is both spinning and wobbling — an astrophysical phenomenon known as precession. Assuming that the radio waves are emanating from a fixed location on the object, if the object is spinning along an axis and that axis is only pointed toward the direction of Earth every four out of 16 days, then we would observe the radio waves as periodic bursts.&lt;/p&gt;
&lt;p&gt;Another possibility involves a binary system, such as a neutron star orbiting another neutron star or black hole. If the first neutron star emits radio waves, and is on an eccentric orbit that briefly brings it close to the second object, the tides between the two objects could be strong enough to cause the first neutron star to deform and burst briefly before it swings away. This pattern would repeat when the neutron star swings back along its orbit.&lt;/p&gt;
&lt;p&gt;The researchers considered a third scenario, involving a radio-emitting source that circles a central star. If the star emits a wind, or cloud of gas, then every time the source passes through the cloud, the gas from the cloud could periodically magnify the source’s radio emissions.&lt;/p&gt;
&lt;p&gt;“Maybe the source is always giving off these bursts, but we only see them when it’s going through these clouds, because the clouds act as a lens,” Masui says.&lt;/p&gt;
&lt;p&gt;Perhaps the most exciting possibility is the idea that this new FRB, and even those that are not periodic or even repeating, may originate from magnetars — a type of neutron star that is thought to have an extremely powerful magnetic field. The particulars of magnetars are still a bit of a mystery, but astronomers have observed that they do occasionally release massive amounts of radiation across the electromagnetic spectrum, including energy in the radio band.&lt;/p&gt;
&lt;p&gt;“People have been working on how to make these magnetars emit fast radio bursts, and this periodicity we’ve observed has since been worked into these models to figure out how this all fits together,” Masui says.&lt;/p&gt;
&lt;p&gt;Very recently, the same group made a new observation that supports the idea that magnetars may in fact be a viable source for fast radio bursts. In late April, CHIME picked up a signal that looked like a fast radio burst, coming from a flaring magnetar, some 30,000 light years from Earth. If the signal is confirmed, this would be the first FRB detected within our own galaxy, as well as the most compelling evidence of magnetars as a source of these mysterious cosmic sparks.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr id=&quot;separator-comments&quot;/&gt;&lt;section&gt;
&lt;/section&gt;&lt;section&gt;
&lt;/section&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Sat, 27 Jun 2020 12:06:09 +0000</pubDate>
<dc:creator>rdamico</dc:creator>
<og:image>http://news.mit.edu/sites/mit.edu.newsoffice/files/styles/og/public/images/2020/MIT-Radio-Bursts-01.jpg</og:image>
<og:title>Astronomers detect regular rhythm of radio waves, with origins unknown</og:title>
<og:description>Signal from 500 million light years away is the first periodic pattern of radio bursts detected.</og:description>
<og:type>article</og:type>
<og:url>http://news.mit.edu/2020/astronomers-rhythm-radio-waves-0617</og:url>
<dc:format>text/html</dc:format>
<dc:identifier>http://news.mit.edu/2020/astronomers-rhythm-radio-waves-0617</dc:identifier>
</item>
<item>
<title>Palm – The best small phone for minimalists, athletes, and kids</title>
<link>https://palm.com/pages/product</link>
<guid isPermaLink="true" >https://palm.com/pages/product</guid>
<description>&lt;div class=&quot;shogun-root&quot; data-shogun-id=&quot;5d39b5f8df5c080050505a14&quot; data-shogun-site-id=&quot;aec0dd02-83af-46d5-9c86-da903cbdce20&quot; data-shogun-page-id=&quot;5d39b5f8df5c080050505a14&quot; data-shogun-page-version-id=&quot;5ee1ae4431a7e100684c4b78&quot; data-shogun-platform-type=&quot;shopify&quot; data-shogun-variant-id=&quot;5ee1ae4631a7e100684c5960&quot; data-region=&quot;main&quot;&gt;





&lt;div class=&quot;shg-box-vertical-align-wrapper&quot;&gt;
&lt;div class=&quot;shg-box shg-c&quot; id=&quot;s-2da24b1d-1015-4375-a9cb-9b9e2f29ec67&quot;&gt;

&lt;div class=&quot;shg-box-content&quot;&gt;





















&lt;div class=&quot;shg-fw&quot;&gt;
&lt;div class=&quot;shg-box-vertical-align-wrapper&quot;&gt;
&lt;div class=&quot;shg-box shg-c center-container&quot; id=&quot;s-d741024b-ff3d-4e8b-bf46-32798e81b6cb&quot;&gt;

&lt;div class=&quot;shg-box-content&quot;&gt;

&lt;div class=&quot;shg-c&quot; id=&quot;s-d855639a-9e77-406c-9991-3a7d3efaa213&quot;&gt;
&lt;div class=&quot;shg-row&quot; data-col-grid-mode-on=&quot;&quot;&gt;
&lt;div class=&quot;shg-c-lg-4 shg-c-md-4 shg-c-sm-4 shg-c-xs-12&quot; readability=&quot;6.5&quot;&gt;

&lt;div id=&quot;s-8c492ab8-6079-44d3-9e97-7f8f899ad239&quot; class=&quot;shg-c sofiapro-light shg-align-left&quot;&gt;
&lt;p&gt;
&lt;h3&gt;Standalone&lt;br/&gt;&lt;/h3&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;shg-box-vertical-align-wrapper&quot;&gt;
&lt;div class=&quot;shg-box shg-c product-text&quot; id=&quot;s-e08ac771-0454-430e-82fa-2fec370f3032&quot;&gt;

&lt;div class=&quot;shg-box-content&quot;&gt;


&lt;div id=&quot;s-a7c5360d-c3db-4c91-bb73-8415f9c2e574&quot; class=&quot;shg-c shg-align-left&quot; readability=&quot;17.493097736057&quot;&gt;
&lt;div class=&quot;spec-container&quot; readability=&quot;30.127001656543&quot;&gt;
&lt;ul&gt;&lt;li&gt;Processor: Qualcomm® 435 processor. Octa-core CPU&lt;/li&gt;
&lt;li&gt;Display: 3.3” HD Display - 445 ppi high pixel density LCD&lt;/li&gt;
&lt;li&gt;Glass: Impact resistant front and rear Corning Gorilla Glass&lt;/li&gt;
&lt;li&gt;Cameras: 12MP rear camera with flash + 8MP front camera&lt;/li&gt;
&lt;li&gt;Construction: Crafted billet aluminum mid-frame&lt;/li&gt;
&lt;li&gt;Durability: IP68 water and dust resistant&lt;/li&gt;
&lt;li&gt;Memory: 3 GB RAM / 32 GB Storage&lt;/li&gt;
&lt;li&gt;Audio: Dual speaker&lt;/li&gt;
&lt;li&gt;Sensors: G-Sensor, Glonass GPS, Proximity, E-compass, Gyro&lt;/li&gt;
&lt;li&gt;OS: Android 8.1&lt;/li&gt;
&lt;li&gt;Security: Face unlock&lt;/li&gt;
&lt;li&gt;Dimensions: 50.6 X 96.6 X 7.4mm&lt;/li&gt;
&lt;li&gt;Weight: 62.5 grams&lt;/li&gt;
&lt;li&gt;Colors: Available in titanium and gold&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Carrier Compatibility: The U.S. carrier unlocked Palm works with most major U.S. carriers. It is compatible with Verizon, AT&amp;amp;T, T-Mobile, and US Mobile among others. The U.S. Unlocked Palm is not compatible with the Sprint Network, and any subsidiary networks of Sprint using the same cellular bands and frequencies.&lt;/p&gt;
&lt;p&gt;For international orders, &lt;a href=&quot;https://palm.com/pages/buy-international&quot;&gt;&lt;u&gt;&lt;span&gt;go here.&lt;/span&gt;&lt;/u&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Battery: Palm uses a USB-C charger that is compatible with any standard outlet for all-day use. With Life Mode, Palm gets an all-day battery life with typical use:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Talk-Time: Up to 3 hours and 20 minutes&lt;/li&gt;
&lt;li&gt;GPS Workout: Up to 4 hours and 45 minutes&lt;/li&gt;
&lt;li&gt;Music LTE Streaming: Up to 5 hours and 30 minutes&lt;/li&gt;
&lt;li&gt;Music Wi-Fi Streaming: Up to 6 hours&lt;/li&gt;
&lt;li&gt;Local Music Playback: Up to 9 hours and 30 minutes&lt;/li&gt;
&lt;li&gt;Music Over LTE + GPS Workout: Up to 3 hours outdoor workout with streaming audio, GPS, and LTE&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Standby Time: 3+ days&lt;/p&gt;
&lt;p&gt;Charge Time: 50% at 31 minutes, 100% at 68 minutes&lt;/p&gt;
&lt;p&gt;Battery life differs by use, configuration, cellular coverage, signal strength, Wi-Fi connection and other factors. Battery life was tested on a pre-production unit using pre-released software.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div class=&quot;shg-box-vertical-align-wrapper&quot;&gt;
&lt;div class=&quot;shg-box shg-c&quot; id=&quot;s-268d874b-f61d-4adc-ae22-cd94376e12c5&quot;&gt;

&lt;div class=&quot;shg-box-content&quot;&gt;



















&lt;div class=&quot;shg-fw&quot;&gt;
&lt;div class=&quot;shg-box-vertical-align-wrapper&quot;&gt;
&lt;div class=&quot;shg-box shg-c center-container&quot; id=&quot;s-31f2f000-5eaf-45cd-a927-d51568bb0f39&quot;&gt;

&lt;div class=&quot;shg-box-content&quot;&gt;

&lt;div class=&quot;shg-c&quot; id=&quot;s-9448f6cf-4c33-4a42-a519-dc8959279725&quot;&gt;
&lt;div class=&quot;shg-row&quot; data-col-grid-mode-on=&quot;&quot;&gt;
&lt;div class=&quot;shg-c-lg-4 shg-c-md-4 shg-c-sm-4 shg-c-xs-12&quot; readability=&quot;6.5&quot;&gt;

&lt;div id=&quot;s-445cd387-4b2c-4110-a0c9-580f06761003&quot; class=&quot;shg-c sofiapro-light shg-align-left&quot;&gt;
&lt;p&gt;
&lt;h3&gt;Standalone&lt;br/&gt;&lt;/h3&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;shg-box-vertical-align-wrapper&quot;&gt;
&lt;div class=&quot;shg-box shg-c product-text&quot; id=&quot;s-121d5254-0660-4264-b4c5-aa69664b0b3d&quot;&gt;

&lt;div class=&quot;shg-box-content&quot;&gt;


&lt;div id=&quot;s-490c7b4c-54c8-401e-b543-feaa1ab6d926&quot; class=&quot;shg-c shg-align-left&quot; readability=&quot;17.493097736057&quot;&gt;
&lt;div class=&quot;spec-container&quot; readability=&quot;30.127001656543&quot;&gt;
&lt;ul&gt;&lt;li&gt;Processor: Qualcomm® 435 processor. Octa-core CPU&lt;/li&gt;
&lt;li&gt;Display: 3.3” HD Display - 445 ppi high pixel density LCD&lt;/li&gt;
&lt;li&gt;Glass: Impact resistant front and rear Corning Gorilla Glass&lt;/li&gt;
&lt;li&gt;Cameras: 12MP rear camera with flash + 8MP front camera&lt;/li&gt;
&lt;li&gt;Construction: Crafted billet aluminum mid-frame&lt;/li&gt;
&lt;li&gt;Durability: IP68 water and dust resistant&lt;/li&gt;
&lt;li&gt;Memory: 3 GB RAM / 32 GB Storage&lt;/li&gt;
&lt;li&gt;Audio: Dual speaker&lt;/li&gt;
&lt;li&gt;Sensors: G-Sensor, Glonass GPS, Proximity, E-compass, Gyro&lt;/li&gt;
&lt;li&gt;OS: Android 8.1&lt;/li&gt;
&lt;li&gt;Security: Face unlock&lt;/li&gt;
&lt;li&gt;Dimensions: 50.6 X 96.6 X 7.4mm&lt;/li&gt;
&lt;li&gt;Weight: 62.5 grams&lt;/li&gt;
&lt;li&gt;Colors: Available in titanium and gold&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Carrier Compatibility: The U.S. carrier unlocked Palm works with most major U.S. carriers. It is compatible with Verizon, AT&amp;amp;T, T-Mobile, and US Mobile among others. The U.S. Unlocked Palm is not compatible with the Sprint Network, and any subsidiary networks of Sprint using the same cellular bands and frequencies.&lt;/p&gt;
&lt;p&gt;For international orders, &lt;a href=&quot;https://palm.com/pages/buy-international&quot;&gt;&lt;u&gt;&lt;span&gt;go here.&lt;/span&gt;&lt;/u&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Battery: Palm uses a USB-C charger that is compatible with any standard outlet for all-day use. With Life Mode, Palm gets an all-day battery life with typical use:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Talk-Time: Up to 3 hours and 20 minutes&lt;/li&gt;
&lt;li&gt;GPS Workout: Up to 4 hours and 45 minutes&lt;/li&gt;
&lt;li&gt;Music LTE Streaming: Up to 5 hours and 30 minutes&lt;/li&gt;
&lt;li&gt;Music Wi-Fi Streaming: Up to 6 hours&lt;/li&gt;
&lt;li&gt;Local Music Playback: Up to 9 hours and 30 minutes&lt;/li&gt;
&lt;li&gt;Music Over LTE + GPS Workout: Up to 3 hours outdoor workout with streaming audio, GPS, and LTE&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Standby Time: 3+ days&lt;/p&gt;
&lt;p&gt;Charge Time: 50% at 31 minutes, 100% at 68 minutes&lt;/p&gt;
&lt;p&gt;Battery life differs by use, configuration, cellular coverage, signal strength, Wi-Fi connection and other factors. Battery life was tested on a pre-production unit using pre-released software.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;















&lt;div class=&quot;shg-box-vertical-align-wrapper&quot;&gt;
&lt;div class=&quot;shg-box shg-c center-container&quot; id=&quot;s-21f6a737-6b65-4f56-b952-712146e68ad6&quot;&gt;

&lt;div class=&quot;shg-box-content&quot;&gt;

&lt;div class=&quot;shg-c&quot; id=&quot;s-a9c4f1f4-b27f-4fc8-a220-58cfb8bb17f3&quot;&gt;
&lt;div class=&quot;shg-row&quot; data-col-grid-mode-on=&quot;&quot;&gt;
&lt;div class=&quot;shg-c-lg-4 shg-c-md-4 shg-c-sm-4 shg-c-xs-12&quot; readability=&quot;6.5&quot;&gt;

&lt;div id=&quot;s-aeb4c45a-49b7-45bd-8a90-fd085b1e69b3&quot; class=&quot;shg-c sofiapro-light shg-align-left&quot;&gt;
&lt;p&gt;
&lt;h3&gt;Standalone&lt;br/&gt;&lt;/h3&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;shg-box-vertical-align-wrapper&quot;&gt;
&lt;div class=&quot;shg-box shg-c product-text&quot; id=&quot;s-98304e0f-18ae-41dd-b0ef-6e609edc9c61&quot;&gt;

&lt;div class=&quot;shg-box-content&quot;&gt;


&lt;div id=&quot;s-f1184143-aa3e-4197-8b62-1112b5540799&quot; class=&quot;shg-c shg-align-left&quot; readability=&quot;17.512221041445&quot;&gt;
&lt;div class=&quot;spec-container&quot; readability=&quot;30.159936238045&quot;&gt;
&lt;ul&gt;&lt;li&gt;Works with most major carriers, including AT&amp;amp;T, Verizon, and T-Mobile.&lt;/li&gt;
&lt;li&gt;Processor: Qualcomm® 435 processor. Octa-core CPU&lt;/li&gt;
&lt;li&gt;Display: 3.3” HD Display - 445 ppi high pixel density LCD&lt;/li&gt;
&lt;li&gt;Glass: Impact resistant front and rear Corning Gorilla Glass&lt;/li&gt;
&lt;li&gt;Cameras: 12MP rear camera with flash + 8MP front camera&lt;/li&gt;
&lt;li&gt;Construction: Crafted billet aluminum mid-frame&lt;/li&gt;
&lt;li&gt;Durability: IP68 water and dust resistant&lt;/li&gt;
&lt;li&gt;Memory: 3 GB RAM / 32 GB Storage&lt;/li&gt;
&lt;li&gt;Audio: Dual speaker&lt;/li&gt;
&lt;li&gt;Sensors: G-Sensor, Glonass GPS, Proximity, E-compass, Gyro&lt;/li&gt;
&lt;li&gt;OS: Android 8.1&lt;/li&gt;
&lt;li&gt;Security: Face unlock&lt;/li&gt;
&lt;li&gt;Dimensions: 50.6 X 96.6 X 7.4mm&lt;/li&gt;
&lt;li&gt;Weight: 62.5 grams&lt;/li&gt;
&lt;li&gt;Colors: Available in titanium and gold&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Carrier Compatibility: The U.S. carrier unlocked Palm works with most major U.S. carriers. It is compatible with Verizon, AT&amp;amp;T, T-Mobile, and US Mobile among others. The U.S. Unlocked Palm is not compatible with the Sprint Network, and any subsidiary networks of Sprint using the same cellular bands and frequencies.&lt;/p&gt;
&lt;p&gt;For international orders, &lt;a href=&quot;https://palm.com/pages/buy-international&quot;&gt;&lt;u&gt;&lt;span&gt;go here.&lt;/span&gt;&lt;/u&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Battery: Palm uses a USB-C charger that is compatible with any standard outlet for all-day use. With Life Mode, Palm gets an all-day battery life with typical use:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Talk-Time: Up to 3 hours and 20 minutes&lt;/li&gt;
&lt;li&gt;GPS Workout: Up to 4 hours and 45 minutes&lt;/li&gt;
&lt;li&gt;Music LTE Streaming: Up to 5 hours and 30 minutes&lt;/li&gt;
&lt;li&gt;Music Wi-Fi Streaming: Up to 6 hours&lt;/li&gt;
&lt;li&gt;Local Music Playback: Up to 9 hours and 30 minutes&lt;/li&gt;
&lt;li&gt;Music Over LTE + GPS Workout: Up to 3 hours outdoor workout with streaming audio, GPS, and LTE&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Standby Time: 3+ days&lt;/p&gt;
&lt;p&gt;Charge Time: 50% at 31 minutes, 100% at 68 minutes&lt;/p&gt;
&lt;p&gt;Battery life differs by use, configuration, cellular coverage, signal strength, Wi-Fi connection and other factors. Battery life was tested on a pre-production unit using pre-released software.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;p&gt;Use left/right arrows to navigate the slideshow or swipe left/right if using a mobile device&lt;/p&gt;
</description>
<pubDate>Sat, 27 Jun 2020 06:13:09 +0000</pubDate>
<dc:creator>prostoalex</dc:creator>
<og:url>https://palm.com/pages/product</og:url>
<og:title>Palm | Product | The best small phone for minimalists, athletes, and kids</og:title>
<og:type>website</og:type>
<og:description>Your entire digital life now fits into a smartphone the size of a credit card. storage. Perfect for athletes, digital minimalists, kids, or people trying to temporarily escape distraction of their big phone. 4G LTE, 3.3&quot; display, 12MB rear camera &amp; 8 MB selfie camera, and a32GB</og:description>
<og:image>https://i.shgcdn.com/fd7c48fc-8228-4816-bdda-f91ca06f62c6/-/format/auto/-/preview/3000x3000/-/quality/lighter/</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://palm.com/pages/product</dc:identifier>
</item>
<item>
<title>Milton Glaser, designer of ‘I ♥ NY’ logo, has died</title>
<link>https://www.nytimes.com/2020/06/26/obituaries/milton-glaser-dead.html</link>
<guid isPermaLink="true" >https://www.nytimes.com/2020/06/26/obituaries/milton-glaser-dead.html</guid>
<description>&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-53u6y8&quot;&gt;
&lt;p class=&quot;css-158dogj evys1bk0&quot;&gt;&lt;a class=&quot;css-1g7m0tk&quot; href=&quot;http://www.miltonglaser.com/the-studio/&quot; title=&quot;Glaser website&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Milton Glaser,&lt;/a&gt; a graphic designer who changed the vocabulary of American visual culture in the 1960s and ’70s with his brightly colored, extroverted posters, magazines, book covers and record sleeves, notably his 1967 &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;http://www.miltonglaser.com/the-work/444/columbia-records-poster-for-bob-dylans-greatest-hits-1967/&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;poster of Bob Dylan&lt;/a&gt; with psychedelic hair and his &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;http://www.miltonglaser.com/the-work/81/new-york-state-i-love-ny-campaign/&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;“I&lt;/a&gt; ♥ &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;http://www.miltonglaser.com/the-work/81/new-york-state-i-love-ny-campaign/&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;NY” logo&lt;/a&gt;, died on Friday, his 91st birthday, in Manhattan.&lt;/p&gt;
&lt;p class=&quot;css-158dogj evys1bk0&quot;&gt;His wife and only immediate survivor, Shirley Glaser, said the cause was a stroke. He also had renal failure.&lt;/p&gt;
&lt;p class=&quot;css-158dogj evys1bk0&quot;&gt;Mr. Glaser brought wit, whimsy, narrative and skilled drawing to commercial art at a time when advertising was dominated by the severe strictures of modernism on one hand and the cozy realism of magazines like The Saturday Evening Post on the other.&lt;/p&gt;
&lt;p class=&quot;css-158dogj evys1bk0&quot;&gt;At Push Pin Studios, which he and several former Cooper Union classmates formed in 1954, he opened up design to myriad influences and styles that began to grab the attention of magazines and advertising agencies, largely through the studio’s influential promotional publication, the Push Pin Almanack (later renamed Push Pin Monthly Graphic).&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-ew4tgv&quot; aria-label=&quot;companion column&quot;/&gt;&lt;/div&gt;&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-53u6y8&quot;&gt;
&lt;p class=&quot;css-158dogj evys1bk0&quot;&gt;“We were excited by the very idea that we could use anything in the visual history of humankind as influence,” Mr. Glaser, who designed more than 400 posters over the course of his career, said in an interview for the book “The Push Pin Graphic: A Quarter Century of Innovative Design and Illustration” (2004).&lt;/p&gt;
&lt;p class=&quot;css-158dogj evys1bk0&quot;&gt;“Art Nouveau, Chinese wash drawing, German woodcuts, American primitive paintings, the Viennese secession and cartoons of the ’30s were an endless source of inspiration,” he added. “All the things that the doctrine of orthodox modernism seemed to have contempt for — ornamentation, narrative illustration, visual ambiguity — attracted us.”&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-ew4tgv&quot; aria-label=&quot;companion column&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-79elbk&quot; data-testid=&quot;photoviewer-wrapper&quot;&gt;

&lt;div data-testid=&quot;photoviewer-children&quot; class=&quot;css-1a48zt4 ehw59r15&quot;&gt;
&lt;div class=&quot;css-1xdhyk6 erfvjey0&quot;&gt;&lt;span class=&quot;css-1ly73wi e1tej78p0&quot;&gt;Image&lt;/span&gt;&lt;img alt=&quot;Nearly six million posters featuring Mr. Glaser&amp;amp;rsquo;s psychedelic Bob Dylan design made their way into homes across the world.&quot; class=&quot;css-1m50asq&quot; src=&quot;https://static01.nyt.com/images/2020/06/28/obituaries/28Glaser-print2/merlin_157306401_6b8b24c3-e825-4808-87f4-c550cef707a1-articleLarge.jpg?quality=75&amp;amp;auto=webp&amp;amp;disable=upscale&quot; srcset=&quot;https://static01.nyt.com/images/2020/06/28/obituaries/28Glaser-print2/merlin_157306401_6b8b24c3-e825-4808-87f4-c550cef707a1-articleLarge.jpg?quality=90&amp;amp;auto=webp 600w,https://static01.nyt.com/images/2020/06/28/obituaries/28Glaser-print2/merlin_157306401_6b8b24c3-e825-4808-87f4-c550cef707a1-jumbo.jpg?quality=90&amp;amp;auto=webp 676w,https://static01.nyt.com/images/2020/06/28/obituaries/28Glaser-print2/merlin_157306401_6b8b24c3-e825-4808-87f4-c550cef707a1-superJumbo.jpg?quality=90&amp;amp;auto=webp 1352w&quot; sizes=&quot;((min-width: 600px) and (max-width: 1004px)) 84vw, (min-width: 1005px) 60vw, 100vw&quot; decoding=&quot;async&quot; itemprop=&quot;url&quot; itemid=&quot;https://static01.nyt.com/images/2020/06/28/obituaries/28Glaser-print2/merlin_157306401_6b8b24c3-e825-4808-87f4-c550cef707a1-articleLarge.jpg?quality=75&amp;amp;auto=webp&amp;amp;disable=upscale&quot;/&gt;&lt;/div&gt;
&lt;span aria-hidden=&quot;true&quot; class=&quot;css-16f3y1r e13ogyst0&quot;&gt;Nearly six million posters featuring Mr. Glaser’s psychedelic Bob Dylan design made their way into homes across the world.&lt;/span&gt;&lt;span itemprop=&quot;copyrightHolder&quot; class=&quot;css-cnj6d5 e1z0qqy90&quot;&gt;&lt;span class=&quot;css-1ly73wi e1tej78p0&quot;&gt;Credit...&lt;/span&gt;&lt;span&gt;Milton Glaser&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-53u6y8&quot;&gt;
&lt;p class=&quot;css-158dogj evys1bk0&quot;&gt;Mr. Glaser delighted in combining visual elements and stylistic motifs from far-flung sources. For a 1968 ad for Olivetti, he modified a 15th-century painting by Piero di Cosimo showing a mourning dog and inserted the Italian company’s latest portable typewriter at the feet of the dead nymph in the original artwork.&lt;/p&gt;
&lt;p class=&quot;css-158dogj evys1bk0&quot;&gt;For the Dylan poster, a promotional piece included in the 1967 album “Bob Dylan’s Greatest Hits,” he created a simple outline of the singer’s head, based on a black-and-white self-portrait silhouette by Marcel Duchamp, and added thick, wavy bands of color for the hair, forms he imported from Islamic art.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-ew4tgv&quot; aria-label=&quot;companion column&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-53u6y8&quot;&gt;
&lt;p class=&quot;css-158dogj evys1bk0&quot;&gt;Nearly six million posters made their way into homes across the world. Endlessly reproduced, the image became one of the visual signatures of the era.&lt;/p&gt;
&lt;p class=&quot;css-158dogj evys1bk0&quot;&gt;“I ♥ NY,” his logo for a 1977 campaign to promote tourism in New York State, achieved even wider currency. Sketched on the back of an envelope with red crayon during a taxi ride, it was printed in black letters in a chubby typeface, with a cherry-red heart standing in for the word “love.” Almost immediately, the logo became an instantly recognized symbol of New York City, as recognizable as the Empire State Building or the Statue of Liberty.&lt;/p&gt;
&lt;p class=&quot;css-158dogj evys1bk0&quot;&gt;“I’m flabbergasted by what happened to this little, simple nothing of an idea,” &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.villagevoice.com/2011/11/23/milton-glaser-on-new-yorkers-for-better-or-worse-youre-here-and-doomed-to-be-here/&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Mr. Glaser told The Village Voice&lt;/a&gt; in 2011.&lt;/p&gt;
&lt;p class=&quot;css-158dogj evys1bk0&quot;&gt;After the terrorist attacks of Sept. 11, 2001, T-shirts emblazoned with the logo sold in the thousands, as visitors to the city seized on it as a way of expressing solidarity. Mr. Glaser designed a modified version — “I ♥ NY More Than Ever,” with a dark bruise on the heart — which was distributed as a poster throughout the city and reproduced on the front and back pages of The Daily News on Sept. 19.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-ew4tgv&quot; aria-label=&quot;companion column&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-79elbk&quot; data-testid=&quot;photoviewer-wrapper&quot;&gt;

&lt;div data-testid=&quot;photoviewer-children&quot; class=&quot;css-1a48zt4 ehw59r15&quot;&gt;

&lt;span itemprop=&quot;copyrightHolder&quot; class=&quot;css-cnj6d5 e1z0qqy90&quot;&gt;&lt;span class=&quot;css-1ly73wi e1tej78p0&quot;&gt;Credit...&lt;/span&gt;&lt;span&gt;Milton Glaser&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-53u6y8&quot;&gt;
&lt;p class=&quot;css-158dogj evys1bk0&quot;&gt;Milton Glaser was born on June 26, 1929, in the Bronx, to Eugene and Eleanor (Bergman) Glaser, immigrants from Hungary. His father owned a dry-cleaning and tailoring shop; his mother was a homemaker.&lt;/p&gt;
&lt;p class=&quot;css-158dogj evys1bk0&quot;&gt;When Milton was a young boy, an older cousin drew a bird on the side of a paper bag to amuse him. “Suddenly, I almost fainted with the realization that you could create life with a pencil,” &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.inc.com/magazine/201410/kris-frieswick/inc.-35th-anniversary-milton-glaser-cynthia-rowley-discuss-design.html&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;he told Inc. magazine&lt;/a&gt; in 2014. “And at that moment, I decided that’s how I was going to spend my life.”&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-ew4tgv&quot; aria-label=&quot;companion column&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-53u6y8&quot;&gt;
&lt;p class=&quot;css-158dogj evys1bk0&quot;&gt;He took drawing classes with Raphael and Moses Soyer, the social realist artists, before enrolling in the High School of Music &amp;amp; Art in Manhattan (now the Fiorello H. LaGuardia High School of Music &amp;amp; Art and Performing Arts). After twice failing the entrance exam for Pratt Institute, he worked at a package-design company before being accepted by the Cooper Union for the Advancement of Science and Art.&lt;/p&gt;
&lt;p class=&quot;css-158dogj evys1bk0&quot;&gt;While at the Cooper Union, he and three classmates — Seymour Chwast, Edward Sorel and Reynold Ruffins — rented part of a loft in Greenwich Village and created a company, Design Plus. They completed one project: cork place mats with a silk-screened design, which they sold to Wanamaker’s department store.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-ew4tgv&quot; aria-label=&quot;companion column&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-79elbk&quot; data-testid=&quot;photoviewer-wrapper&quot;&gt;

&lt;div data-testid=&quot;photoviewer-children&quot; class=&quot;css-1a48zt4 ehw59r15&quot;&gt;

&lt;span aria-hidden=&quot;true&quot; class=&quot;css-16f3y1r e13ogyst0&quot;&gt;Mr. Glaser in 1974. He said he was “flabbergasted” by the success of his New York logo, which became an instantly recognized symbol.&lt;/span&gt;&lt;span itemprop=&quot;copyrightHolder&quot; class=&quot;css-cnj6d5 e1z0qqy90&quot;&gt;&lt;span class=&quot;css-1ly73wi e1tej78p0&quot;&gt;Credit...&lt;/span&gt;&lt;span&gt;Milton Glaser Studio&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-53u6y8&quot;&gt;
&lt;p class=&quot;css-158dogj evys1bk0&quot;&gt;After graduating from the Cooper Union in 1951 and working in the promotion department at Vogue magazine, Mr. Glaser won a Fulbright scholarship to the Academy of Fine Arts in Bologna, Italy, where he studied etching with the still-life painter Giorgio Morandi and, in the time-honored way, drew from plaster casts. The experience left him a fervent believer in the discipline of drawing and an enemy of found images and collage in design work.&lt;/p&gt;
&lt;p class=&quot;css-158dogj evys1bk0&quot;&gt;“A designer who must rely on cutouts and rearranging to create effects, who cannot achieve the specific image or idea he wants by drawing, is in trouble,” he told the magazine Graphis in 1960.&lt;/p&gt;
&lt;p class=&quot;css-158dogj evys1bk0&quot;&gt;Returning to New York, Mr. Glaser resumed his partnership with his former classmates, who had created the Push Pin Almanack to advertise their work and allow them to experiment. When they founded &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;http://www.pushpininc.com/about/pushpin/&quot; title=&quot;Push Pin website&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Push Pin Studios&lt;/a&gt; in 1954, Mr. Glaser was named its president. The studio quickly became recognized for its bright colors, surreal juxtapositions and exaggerated, flattened forms, seen in book jackets (Mr. Glaser designed all the covers for the &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.penguinrandomhouse.com/series/BS7/shakespeare-signet-classic&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Signet Classic Shakespeare series&lt;/a&gt;), magazine illustrations, record covers, television commercials and typography.&lt;/p&gt;
&lt;p class=&quot;css-158dogj evys1bk0&quot;&gt;He married Shirley Girton, his replacement at the package-design company that first hired him, in 1957. The couple collaborated on the children’s books “If Apples Had Teeth” (1960), “The Alphazeds” (2003) and “The Big Race” (2005). They lived in Manhattan and Woodstock, N.Y.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-ew4tgv&quot; aria-label=&quot;companion column&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-53u6y8&quot;&gt;
&lt;p class=&quot;css-158dogj evys1bk0&quot;&gt;Mr. Glaser, whom Newsweek once called “one of the few geniuses in the image-making trade,” was widely credited with creating the pudgy, cartoony style known as “Yellow Submarine” art, popularized by the 1968 animated Beatles film but practiced at Push Pin since the late 1950s.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-ew4tgv&quot; aria-label=&quot;companion column&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-79elbk&quot; data-testid=&quot;photoviewer-wrapper&quot;&gt;

&lt;div data-testid=&quot;photoviewer-children&quot; class=&quot;css-1a48zt4 ehw59r15&quot;&gt;

&lt;span aria-hidden=&quot;true&quot; class=&quot;css-16f3y1r e13ogyst0&quot;&gt;Mr. Glaser, left, in around 1970 with Clay Felker at New York magazine, which they founded in 1968.&lt;/span&gt;&lt;span itemprop=&quot;copyrightHolder&quot; class=&quot;css-cnj6d5 e1z0qqy90&quot;&gt;&lt;span class=&quot;css-1ly73wi e1tej78p0&quot;&gt;Credit...&lt;/span&gt;&lt;span&gt;Cosmos Andrew Sarchiapone, via Archives of American Art, Smithsonian Institution&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-53u6y8&quot;&gt;
&lt;p class=&quot;css-158dogj evys1bk0&quot;&gt;Mr. Glaser joined forces with the editor &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/2008/07/02/business/media/02felker.html&quot; title=&quot;&quot;&gt;Clay Felker&lt;/a&gt; in 1968 to found New York magazine, where he was president and design director until 1977, imposing a visual format that still largely survives. With his friend Jerome Snyder, the art director of Scientific American, he wrote a budget-dining column, “The Underground Gourmet,” for The New York Herald Tribune and, later, New York magazine. The column spawned a guidebook of the same name in 1966 and “The Underground Gourmet Cookbook” in 1975.&lt;/p&gt;
&lt;p class=&quot;css-158dogj evys1bk0&quot;&gt;Mr. Glaser started his own design firm, Milton Glaser Inc., in 1974. A year later he left Push Pin, just as he was being given his own show at the Museum of Modern Art.&lt;/p&gt;
&lt;p class=&quot;css-158dogj evys1bk0&quot;&gt;“At a certain point we were accepted, and once that happens, everything becomes less interesting,” he said in an interview for “Graphic Design in America: A Visual Language History,” an exhibition at the Walker Art Center in Minneapolis in 1989.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-ew4tgv&quot; aria-label=&quot;companion column&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-79elbk&quot; data-testid=&quot;photoviewer-wrapper&quot;&gt;

&lt;div data-testid=&quot;photoviewer-children&quot; class=&quot;css-1a48zt4 ehw59r15&quot;&gt;

&lt;span aria-hidden=&quot;true&quot; class=&quot;css-16f3y1r e13ogyst0&quot;&gt;Mr. Glaser designed more than 400 posters in his career, including this one for the prize-winning play “Angels in America.”&lt;/span&gt;&lt;span itemprop=&quot;copyrightHolder&quot; class=&quot;css-cnj6d5 e1z0qqy90&quot;&gt;&lt;span class=&quot;css-1ly73wi e1tej78p0&quot;&gt;Credit...&lt;/span&gt;&lt;span&gt;Milton Glaser&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-53u6y8&quot;&gt;
&lt;p class=&quot;css-158dogj evys1bk0&quot;&gt;He was hired by the British tycoon &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/1997/07/20/world/sir-james-goldsmith-financier-dies-at-64.html#:~:text=New%20York%20Times%20subscribers*%20enjoy,journalism%2C%20as%20it%20originally%20appeared.&amp;amp;text=Sir%20James%2C%20who%20had%20battled,Spain%2C%20the%20spokesman%20said%20today.&quot; title=&quot;&quot;&gt;James Goldsmith&lt;/a&gt; in 1978 to redesign the interiors, exteriors and packaging of the Grand Union chain of supermarkets, which Mr. Goldsmith had just acquired. Mr. Glaser designed several projects for the restaurateur Joe Baum, most memorably the Big Kitchen food court on the ground-floor concourse of the World Trade Center, the 1990s redesign of Windows on the World there and the Rainbow Room in Rockefeller Center.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-ew4tgv&quot; aria-label=&quot;companion column&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-53u6y8&quot;&gt;
&lt;p class=&quot;css-158dogj evys1bk0&quot;&gt;In 1983, with Walter Bernard, Mr. Glaser formed WBMG, a publication design firm that revamped dozens of newspapers and magazines in the United States and abroad, including The Washington Post and O Globo in Brazil. He and Mr. Bernard later collaborated on a history of their design work, “Mag Men: 50 Years of Making Magazines,” which was published in December.&lt;/p&gt;
&lt;p class=&quot;css-158dogj evys1bk0&quot;&gt;He managed to stay current. In the late 1980s he designed the AIDS logo for the World Health Organization and &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;http://www.miltonglaser.com/the-work/85/brooklyn-brewery-identity/&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;the logo and packaging for Brooklyn Brewery&lt;/a&gt;, using a capital B inspired by the old Brooklyn Dodgers. He designed a logo for “Angels in America,” Tony Kushner’s Pulitzer Prize-winning play, and posters for Vespa’s 50th anniversary in 1996 and for the final season of the television series &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;http://www.miltonglaser.com/the-work/1038/mad-men-amc-mad-men-amc-animation/&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;“Mad Men”&lt;/a&gt; in 2014.&lt;/p&gt;
&lt;p class=&quot;css-158dogj evys1bk0&quot;&gt;Mr. Glaser, whose other books include “The Milton Glaser Poster Book” (1977), “Art Is Work” (2000) and “Drawing Is Thinking” (2008), taught for many years at the School of Visual Arts in Manhattan. He was the subject of the 2008 documentary film “Milton Glaser: To Inform and Delight.”&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-ew4tgv&quot; aria-label=&quot;companion column&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-79elbk&quot; data-testid=&quot;photoviewer-wrapper&quot;&gt;

&lt;div data-testid=&quot;photoviewer-children&quot; class=&quot;css-1a48zt4 ehw59r15&quot;&gt;

&lt;span aria-hidden=&quot;true&quot; class=&quot;css-16f3y1r e13ogyst0&quot;&gt;Mr. Glaser in 2014, the year he designed a poster for the final season of the television series “Mad Men.”&lt;/span&gt;&lt;span itemprop=&quot;copyrightHolder&quot; class=&quot;css-cnj6d5 e1z0qqy90&quot;&gt;&lt;span class=&quot;css-1ly73wi e1tej78p0&quot;&gt;Credit...&lt;/span&gt;&lt;span&gt;Catalina Kulczar&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-53u6y8&quot;&gt;
&lt;p class=&quot;css-158dogj evys1bk0&quot;&gt;In 2004 he received a lifetime achievement award from the Cooper-Hewitt National Design Museum (now the Cooper Hewitt, Smithsonian Design Museum), and in 2009 he became the first graphic designer to receive the National Medal of Arts.&lt;/p&gt;
&lt;p class=&quot;css-158dogj evys1bk0&quot;&gt;“I’m a person who deals with visual material whatever it is — architecture, an object, a set of plates, wallpaper — right now I’m doing T-shirts,” he told Aileen Kwun and Bryn Smith for their book “Twenty Over Eighty: Conversations on a Lifetime in Architecture and Design” (2016). “I know a lot about the way things look, and as a consequence, I try to see how much of that world I can embrace.”&lt;/p&gt;
&lt;p class=&quot;css-pncxxs etfikam0&quot;&gt;Jenny Gross contributed reporting.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-ew4tgv&quot; aria-label=&quot;companion column&quot;/&gt;&lt;/div&gt;
</description>
<pubDate>Sat, 27 Jun 2020 03:17:22 +0000</pubDate>
<dc:creator>wallflower</dc:creator>
<og:url>https://www.nytimes.com/2020/06/26/obituaries/milton-glaser-dead.html</og:url>
<og:type>article</og:type>
<og:title>Milton Glaser, Master Designer of ‘I ♥ NY’ Logo, Is Dead at 91</og:title>
<og:image>https://static01.nyt.com/images/2020/06/28/obituaries/28Glaser-print1/00Glaser1-facebookJumbo.jpg</og:image>
<og:description>He was also a founder of New York magazine, created a memorable Bob Dylan poster and produced designs for everything from supermarkets to restaurants to “Mad Men.”</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.nytimes.com/2020/06/26/obituaries/milton-glaser-dead.html</dc:identifier>
</item>
<item>
<title>Examining ARM vs. x86 Memory Models with Rust</title>
<link>https://www.nickwilcox.com/blog/arm_vs_x86_memory_model/</link>
<guid isPermaLink="true" >https://www.nickwilcox.com/blog/arm_vs_x86_memory_model/</guid>
<description>&lt;p&gt;With Apple’s recent announcement that they are moving away from Intel X86 CPU’s to their own ARM CPU’s for future laptops and desktops I thought it would be a good time to take a look at the some differences that can affect systems programmers working in Rust.&lt;/p&gt;&lt;p&gt;One of the key areas where ARM CPU’s differ from X86 is their memory model. This article will take a look at what a memory model is and how it can cause code to be correct on one CPU but cause race conditions on another.&lt;/p&gt;
&lt;h2 id=&quot;memory-models&quot;&gt;Memory Models&lt;/h2&gt;
&lt;p&gt;The way loads and stores to memory interact between multiple threads on a specific CPU is called that architecture’s Memory Model.&lt;/p&gt;
&lt;p&gt;Depending on the memory model of the CPU, multiple writes by one thread may become visible to another thread in a different order to the one they were issued in.&lt;/p&gt;
&lt;p&gt;The same is true of a thread issuing multiple reads. A thread issuing multiple reads may receive “snapshots” of global state that represent points in time ordered differently to the order of issue.&lt;/p&gt;
&lt;p&gt;Modern hardware needs this flexibility to be able to maximize the throughput of memory operations. While CPU clock rates and core counts have been increasing with each new CPU iteration, memory bandwidth has struggled to keep up. Moving data from memory to operate on is often the bottle neck in the performance of applications.&lt;/p&gt;
&lt;p&gt;If you’ve never written multi-threaded code, or only done so using higher level synchronization primitives such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::sync::Mutex&lt;/code&gt;, you’ve probably never been exposed to the details of the memory model. This is because the CPU, despite whatever reordering it’s memory model allows it to perform, always presents a consistent view of memory to the current thread.&lt;/p&gt;
&lt;p&gt;If we look at the below snippet of code that writes to memory and then reads the same memory straight back, we will always get the expected value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;58&lt;/code&gt; back when we read. There is never the case that we’d read some stale value from memory.&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unsafe&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read_after_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u32_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;u32_ptr&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.write_volatile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;58&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u32_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u32_ptr&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.read_volatile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;the value is {}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u32_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;I’m using volatile operations because if I used normal pointer operations the compiler is smart enough to skip the memory read and just prints the value &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;58&lt;/code&gt;. Volatile operations stop the compiler from reordering or skipping our memory operation. However they have no affect on hardware.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Once we introduce multiple threads, we’re now exposed to the fact that the CPU may be reordering our memory operations.&lt;/p&gt;
&lt;p&gt;We can examine the snippet below in a multi-threaded context:&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot; readability=&quot;9&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unsafe&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u32_ptr_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u32_ptr_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;u32_ptr_1&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.write_volatile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;58&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;u32_ptr_2&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.write_volatile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unsafe&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u32_ptr_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u32_ptr_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u32_ptr_1&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.read_volatile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u32_ptr_2&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.read_volatile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If we initialize the contents of both pointers to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;, and then run each function in a different thread, we can list the possible outcomes for the reader. We know that there is no synchronization, but based on our experience with single threaded code we think the possible return values are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(0, 0)&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(58, 0)&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(58, 42)&lt;/code&gt;. But the possibility of hardware reordering of memory writes affecting multi-threads means that there is a fourth option &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(0, 42)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You might think there are more possibilities due to the lack of synchronization. But all hardware memory models guarantee that aligned loads and store up to the native word size are atomic (u32 or a 32-bit CPU, u64 on a 64-bit CPU). If we changed one of our writes to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0xFFFF_FFFF&lt;/code&gt;, the read will only ever see the old value or the new value. It will never see a partial value like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0xFFFF_0000&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If the details of the CPU’s memory model are hidden away when using regular memory accesses, it seems like we would have no way to control it in multi-threaded programs where it affects program correctness.&lt;/p&gt;
&lt;p&gt;Luckily Rust provides as with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::sync::atomic&lt;/code&gt; module containing types that gives us the control we need. We use these types to specify exactly the memory ordering requirements our code needs. We trade performance for correctness. We place restrictions on what order the hardware can perform memory operations, taking away any bandwidth optimizations the hardware would want to perform.&lt;/p&gt;
&lt;p&gt;When working with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;atomic&lt;/code&gt; module, we don’t worry about the actual memory models of individual CPU architectures. Instead the operation of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;atomic&lt;/code&gt; module works on an abstract memory model that’s CPU agnostic. Once we’ve expressed our requirements on the loads and stores using this Rust memory model, the compiler does the job of mapping to the memory model of the target CPU.&lt;/p&gt;
&lt;p&gt;The requirements we specify on each operation takes the form of what reordering we want to allow (or deny) on the operation. The orderings form a hierarchy, with each level placing more restrictions the CPU. For example &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ordering::Relaxed&lt;/code&gt; means the CPU is free to perform any reordering it wants. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ordering::Release&lt;/code&gt; means that a store can only complete after all proceeding stores have finished.&lt;/p&gt;
&lt;p&gt;Let’s look at how atomic memory writes are actually compiled, compared to a regular write.&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot; readability=&quot;9&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;sync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;atomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unsafe&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shared_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shared_ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;58&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unsafe&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_atomic_relaxed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shared_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AtomicU32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;shared_ptr&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;58&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Ordering&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Relaxed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unsafe&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_atomic_release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shared_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AtomicU32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;shared_ptr&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;58&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Ordering&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unsafe&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_atomic_consistent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shared_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AtomicU32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;shared_ptr&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;58&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Ordering&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SeqCst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If we look at the &lt;a href=&quot;https://godbolt.org/z/uVQM8T&quot;&gt;X86 assembly&lt;/a&gt; for the above code, we see the first three functions produce identical code. It’s not until the stricter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SeqCst&lt;/code&gt; ordering that we get a different instruction being produced.&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot; readability=&quot;9.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;example:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;test_write:&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;kt&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rdi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;58&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;ret&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;example:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;test_atomic_relaxed:&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;kt&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rdi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;58&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;ret&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;example:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;test_atomic_release:&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;kt&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rdi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;58&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;ret&lt;/span&gt;
        
&lt;span class=&quot;nl&quot;&gt;example:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;test_atomic_consistent:&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;58&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;xchg&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rdi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;ret&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The first two orderings use the &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MOV&lt;/code&gt;&lt;/strong&gt; (&lt;strong&gt;MOV&lt;/strong&gt;e) instruction to write the value to memory. Only the strictest ordering produces a different instruction, &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;XCHG&lt;/code&gt;&lt;/strong&gt; (atomic e&lt;strong&gt;XCH&lt;/strong&gt;an&lt;strong&gt;G&lt;/strong&gt;), to a raw pointer write.&lt;/p&gt;
&lt;p&gt;We can compare that to the &lt;a href=&quot;https://godbolt.org/z/wWQo8P&quot;&gt;ARM assembly&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot; readability=&quot;11&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;example:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;test_write:&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;nv&quot;&gt;w8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;58&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;str&lt;/span&gt;     &lt;span class=&quot;nv&quot;&gt;w8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;ret&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;example:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;test_atomic_relaxed:&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;nv&quot;&gt;w8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;58&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;str&lt;/span&gt;     &lt;span class=&quot;nv&quot;&gt;w8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;ret&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;example:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;test_atomic_release:&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;nv&quot;&gt;w8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;58&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;stlr&lt;/span&gt;    &lt;span class=&quot;nv&quot;&gt;w8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;ret&lt;/span&gt;
        
&lt;span class=&quot;nl&quot;&gt;example:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;test_atomic_consistent:&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;nv&quot;&gt;w8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;58&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;stlr&lt;/span&gt;    &lt;span class=&quot;nv&quot;&gt;w8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;ret&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In contrast we can see there is a difference once we hit the release ordering requirement. The raw pointer and relaxed atomic store use &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STR&lt;/code&gt;&lt;/strong&gt; (&lt;strong&gt;ST&lt;/strong&gt;ore &lt;strong&gt;R&lt;/strong&gt;egister) while the release and sequential ordering uses the instruction &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STLR&lt;/code&gt;&lt;/strong&gt; (&lt;strong&gt;ST&lt;/strong&gt;ore with re&lt;strong&gt;L&lt;/strong&gt;ease &lt;strong&gt;R&lt;/strong&gt;egister). &lt;em&gt;The &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MOV&lt;/code&gt;&lt;/strong&gt; instruction is this disassembly is moving the constant &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;58&lt;/code&gt; into a register, it’s not a memory operation.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We should be able to see the risk here. The mapping between the theoretical Rust memory model and the X86 memory model is more forgiving to programmer error. It’s possible for us to write code that is wrong with respect to the abstract memory model, but still have it produce the correct assembly code and work correctly on some CPU’s.&lt;/p&gt;
&lt;h2 id=&quot;writing-a-multi-threaded-program-using-atomic-operations&quot;&gt;Writing a Multi-Threaded Program using Atomic Operations&lt;/h2&gt;
&lt;p&gt;The program we’ll be exploring builds upon the concept of storing a pointer value being atomic across threads. One thread is going to perform some work using a mutable object it owns. Once it’s finished that work it’s going to publish that work as an immutable shared reference, using an atomic pointer write to both signal the work is complete and allow reading threads to use the data.&lt;/p&gt;
&lt;h2 id=&quot;the-x86-only-implementation&quot;&gt;The X86 Only Implementation&lt;/h2&gt;
&lt;p&gt;If we really want to test how forgiving the X86’s memory model is, we can write multi-threaded code that skips any use of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::sync::atomic&lt;/code&gt; module. I want to stress this is not something you should ever actually consider doing. In fact this code is probably undefined behavior. This is an learning exercise only.&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot; readability=&quot;11.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;18&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SynchronisedSum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;shared&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UnsafeCell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;samples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SynchronisedSum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;samples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;samples&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MAX&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;shared&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;UnsafeCell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()),&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;samples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// do work on data this thread owns&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.samples&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;c&quot;&gt;// publish to other threads&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shared_ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.shared&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;unsafe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;shared_ptr&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.write_volatile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.as_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;forget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calculate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected_sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;            
            &lt;span class=&quot;c&quot;&gt;// check if the work has been published yet&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shared_ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.shared&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data_ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unsafe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shared_ptr&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.read_volatile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data_ptr&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.is_null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;// the data is now accessible by multiple threads, treat it as an immutable reference.&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unsafe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_raw_parts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.samples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.samples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.rev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

                &lt;span class=&quot;c&quot;&gt;// did we access the data we expected?&lt;/span&gt;
                &lt;span class=&quot;nd&quot;&gt;assert_eq!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected_sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The function that calculates the sum of the array starts by executing a loop that reads the value of the shared pointer. Because of the atomic store guarantee we know that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read_volatile()&lt;/code&gt; will only ever return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; or a pointer to our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;u32&lt;/code&gt; slice. We simply keep looping until the generate thread has finished and published it’s work. Once it’s published we can read it and calculate the sum of all elements.&lt;/p&gt;
&lt;h2 id=&quot;testing-the-code&quot;&gt;Testing the Code&lt;/h2&gt;
&lt;p&gt;As a simple test we’re going to run two threads simultaneously, one to generate the values and another to calculate the sum. Both threads exit after performing their work and we’ll wait for both of them to finish using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;join&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot; readability=&quot;8&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print_arch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10_000&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum_generate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Arc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;SynchronisedSum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;512&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum_calculate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Arc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum_generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calculate_thread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;spawn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;move&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sum_calculate&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.calculate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;130816&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;nn&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_millis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generate_thread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;spawn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;move&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sum_generate&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;calculate_thread&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;format!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;iteration {} failed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;generate_thread&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;all iterations passed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If I run the test on an Intel CPU I get:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot; readability=&quot;31&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;running on x86_64
all iterations passed
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If I run it on an ARM CPU with two cores I get:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot; readability=&quot;33.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;running on aarch64
thread '&amp;lt;unnamed&amp;gt;' panicked at 'assertion failed: `(left == right)`
  left: `122824`,
 right: `130816`', src\main.rs:45:17
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
thread 'main' panicked at 'iteration 35 failed: Any', src\main.rs:128:9
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The x86 processor was able to run the test successfully all 10,000 times, but the ARM processor failed on the 35th attempt.&lt;/p&gt;
&lt;h2 id=&quot;what-went-wrong&quot;&gt;What Went Wrong&lt;/h2&gt;
&lt;p&gt;Correct functioning of our pattern requires that all the “work” we’re doing is in the correct state in memory, before we perform the final write to the shared pointer to publish it to other threads.&lt;/p&gt;
&lt;p&gt;Where the memory model of ARM differs from X86 is that ARM CPU’s will re-order writes relative to other writes, whereas X86 will not. So the calculate thread can see a non-null pointer and start reading values from the slice before they’ve been written.&lt;/p&gt;
&lt;p&gt;For most of the memory operations in our program we want to give the CPU the freedom to re-arrange operations to maximize performance. We only want to specify the minimal constraints necessary to ensure correctness.&lt;/p&gt;
&lt;p&gt;In the case of our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;generate&lt;/code&gt; function we want the values in the slice to be written to memory in whatever order gives us the most speed. But all writes must be complete before we write our value to the shared pointer.&lt;/p&gt;
&lt;p&gt;The opposite is true on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;calculate&lt;/code&gt;. We have a requirement the values we read from the slice memory are from at least the same point in time as value of the shared pointer. Although those instructions won’t be issued until the read of the shared pointer has completed, we need the make sure that we’re not getting values from a stale cache.&lt;/p&gt;
&lt;h2 id=&quot;the-correct-version&quot;&gt;The Correct Version&lt;/h2&gt;
&lt;p&gt;In order to ensure correctness of our code the write to the shared pointer must have release ordering, and because of the read order requirements in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;calculate&lt;/code&gt; we use acquire ordering.&lt;/p&gt;
&lt;p&gt;Our initialization of the data doesn’t change, neither does our sum code, we want to give the CPU the freedom to perform that however is most efficient.&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot; readability=&quot;11.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;18&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SynchronisedSumFixed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;shared&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AtomicPtr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;samples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SynchronisedSumFixed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;samples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;samples&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MAX&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;shared&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;AtomicPtr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;null_mut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()),&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;samples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// do work on data this thread owns&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.samples&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;c&quot;&gt;// publish (aka release) this data to other threads&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.shared&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.as_mut_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Ordering&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;forget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calculate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected_sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data_ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.shared&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Ordering&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Acquire&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;c&quot;&gt;// when the pointer is non null we have safely acquired a reference to the global data&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data_ptr&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.is_null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unsafe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_raw_parts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.samples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.samples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.rev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;nd&quot;&gt;assert_eq!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected_sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If we run the updated version using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AtomicPtr&amp;lt;u32&amp;gt;&lt;/code&gt; on our ARM cpu we get&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot; readability=&quot;31&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;running on aarch64
all iterations passed
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&quot;choice-of-ordering-matters&quot;&gt;Choice of Ordering Matters&lt;/h2&gt;
&lt;p&gt;Using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;atomic&lt;/code&gt; module still requires care when working across multiple CPU’s. As we saw from looking at the X86 vs ARM assembly outputs, if we replace &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ordering::Release&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ordering::Relaxed&lt;/code&gt; on our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;store&lt;/code&gt; we’d be back to a version that worked correctly on x86 but failed on ARM. It’s especially required working with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AtomicPtr&lt;/code&gt; to avoid undefined behavior when eventually accessing the value pointed at.&lt;/p&gt;
&lt;h2 id=&quot;further-reading&quot;&gt;Further Reading&lt;/h2&gt;
&lt;p&gt;This is just a brief introduction to memory models, hopefully it’s clear to someone unfamiliar with the topic.&lt;/p&gt;
&lt;p&gt;I think my first introduction to lock-free programming was this &lt;a href=&quot;https://docs.microsoft.com/en-au/windows/win32/dxtecharts/lockless-programming?redirectedfrom=MSDN&quot;&gt;article&lt;/a&gt;. It may not seem relevant because the details cover C++, the PowerPC CPU in the Xbox360, and Windows APIs. But it’s still a good explanation of the principles. Also this paragraphs from the opening still hold ups:&lt;/p&gt;
&lt;blockquote readability=&quot;13&quot;&gt;
&lt;p&gt;Lockless programming is a valid technique for multithreaded programming, but it should not be used lightly. Before using it you must understand the complexities, and you should measure carefully to make sure that it is actually giving you the gains that you expect. In many cases, there are simpler and faster solutions, such as sharing data less frequently, which should be used instead.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Hopefully we’ve learnt about a new aspect of systems programming that will become increasingly important as ARM chips become more common. Ensuring correctness of atomic code has never been easy but it gets harder when working across different architectures with varying memory models.&lt;/p&gt;
&lt;h2 id=&quot;sources&quot;&gt;Sources&lt;/h2&gt;
&lt;p&gt;All the source code for this article can be found &lt;a href=&quot;https://github.com/nickwilcox/blog_memory_model&quot;&gt;on github&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;discussion&quot;&gt;Discussion&lt;/h3&gt;
&lt;p&gt;Link to the &lt;a href=&quot;https://www.reddit.com/r/rust/comments/hgkgg2/examining_arm_vs_x86_memory_models_with_rust/&quot;&gt;discussion on Reddit&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 27 Jun 2020 02:26:45 +0000</pubDate>
<dc:creator>redbluemonkey</dc:creator>
<og:type>article</og:type>
<og:title>Examining ARM vs X86 Memory Models with Rust</og:title>
<og:url>https://www.nickwilcox.com/blog/arm_vs_x86_memory_model/</og:url>
<og:description>With Apple’s recent announcement that they are moving away from Intel X86 CPU’s to their own ARM CPU’s for future laptops and desktops I thought it would be a good time to take a look at the some differences that can affect systems programmers working in Rust.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.nickwilcox.com/blog/arm_vs_x86_memory_model/</dc:identifier>
</item>
<item>
<title>Show HN: A Reddit reader that looks like the frontpage of a print newspaper</title>
<link>https://unim.press/#dataisbeautiful</link>
<guid isPermaLink="true" >https://unim.press/#dataisbeautiful</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://unim.press/#dataisbeautiful&quot;&gt;https://unim.press/#dataisbeautiful&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=23658721&quot;&gt;https://news.ycombinator.com/item?id=23658721&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 524&lt;/p&gt;
&lt;p&gt;# Comments: 113&lt;/p&gt;
</description>
<pubDate>Sat, 27 Jun 2020 01:12:37 +0000</pubDate>
<dc:creator>thesephist</dc:creator>
<og:url>https://unim.press</og:url>
<og:title>Unim.Press: read Reddit on a newspaper</og:title>
<og:description>Unim.Press is a Reddit reader in the style of a certain classic metropolitan newspaper</og:description>
<og:image>https://unim.press/img/screenshot.jpg</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>https://unim.press/</dc:identifier>
</item>
</channel>
</rss>