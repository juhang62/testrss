<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Launch HN: Prometheus (YC W19) – Remove CO2 from Air and Turn It into Gasoline</title>
<link>https://news.ycombinator.com/item?id=19842240</link>
<guid isPermaLink="true" >https://news.ycombinator.com/item?id=19842240</guid>
<description>&lt;td colspan=&quot;2&quot;/&gt;&lt;td readability=&quot;65.173162583519&quot;&gt;Hi HN! I’m Rob, Founder of Prometheus. We’re removing CO2 from the air and turning it gasoline, diesel, and jet fuel. Since we use zero-carbon electricity from sources like solar and wind to make our fuel, there are no net CO2 emissions when you use it.
&lt;p&gt;An article about us came up on HN recently and people seemed interested (&lt;a href=&quot;https://news.ycombinator.com/item?id=19792412&quot; rel=&quot;nofollow&quot;&gt;https://news.ycombinator.com/item?id=19792412&lt;/a&gt;), so we thought it would be good to try to answer some of the questions we saw there and try to dive in some more to any questions that follow!&lt;/p&gt;
&lt;p&gt;The only inputs to make the fuel are CO2 and water (both from the air) and electricity. The only outputs are fuel and oxygen. One way to think about it is that making fuel is reverse combustion. The process isn’t super efficient (we expect 50-60% overall efficiency at maturity), but it turns out that doesn’t matter as long as the electricity is zero carbon and low cost. If the cost of our equipment is also low, then we believe we can not only make zero carbon fuel, but actually compete on price with fossil fuel.&lt;/p&gt;
&lt;p&gt;We’re not the first to make fuel from the air - in fact Google, Audi, Carbon Engineering, Global Thermostat, Climeworks, and labs at universities and national labs have all done it before us. What no one has been able to do so far is do it at a low enough cost to compete with fossil fuel.&lt;/p&gt;
&lt;p&gt;The thing that’s new about what we’re doing is that we have gotten rid of all the thermal processes normally used, and instead use a process that uses only electricity (no natural gas, etc) and does it at room temperature. This is a big deal for both capital cost and for being truly carbon zero. We can use inexpensive materials, which keeps our cost low, and can start up and shut down quickly, which allows us to run intermittently, matching the intermittent nature of many renewable energy sources. We can also only run when the power is at the price we want.&lt;/p&gt;
&lt;p&gt;Digging in to some more details, we absorb CO2 and water vapor from the air into an aqueous electrolyte. We then react the CO2 in the water with a copper catalyst to directly make alcohols like ethanol, butanol, propanol, etc. Both of these things have been done by many others and the science is known. Normally at this point one would have to use a thermal process (distillation) to get the fuel out of the water, and this is expensive and makes the economics really hard to get right. We don’t have to do this step thermally though, because we have a carbon nanotube membrane that replaces it, extracting the alcohols from water in a single step at room temperature. This makes a huge difference in cost. The last step is that we up-convert the alcohols to gasoline, diesel, and jet fuel. This last step is also well known and we can actually buy this step from others.&lt;/p&gt;
&lt;p&gt;The carbon nanotube membrane that makes this all work is the product of 6 years at my previous startup, Mattershift. I was developing it for desalination and water purification. About 3 years ago I realized it could do this job, but it wasn’t clear that a startup could raise money for such an ambitious effort, especially one linked to a political issue (unfortunately) like climate change. When I saw the YC request for startups in carbon removal, I knew that the timing was right, and I founded Prometheus to do it.&lt;/p&gt;
&lt;p&gt;Please let me know if you have more questions or feedback. I’ll do my best to answer any questions, but please excuse if I’m not able to go too far into details like our piping and instrumentation design, or other really specific things we wouldn’t want to help competitors with.&lt;/p&gt;
&lt;p&gt;Thanks!&lt;/p&gt;
&lt;/td&gt;
</description>
<pubDate>Mon, 06 May 2019 18:21:58 +0000</pubDate>
<dc:creator>rmcginnis</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://news.ycombinator.com/item?id=19842240</dc:identifier>
</item>
<item>
<title>.NET 5</title>
<link>https://devblogs.microsoft.com/dotnet/introducing-net-5/</link>
<guid isPermaLink="true" >https://devblogs.microsoft.com/dotnet/introducing-net-5/</guid>
<description>&lt;div class=&quot;row justify-content-center&quot;&gt;
&lt;div class=&quot;col-md-4&quot;&gt;
&lt;div&gt;&lt;img src=&quot;https://secure.gravatar.com/avatar/37f91ebe219df737566a4dc7cdd53b68?s=58&amp;amp;d=mm&amp;amp;r=g&quot; width=&quot;58&quot; height=&quot;58&quot; alt=&quot;Avatar&quot; class=&quot;avatar avatar-58 wp-user-avatar wp-user-avatar-58 photo avatar-default&quot;/&gt;&lt;p&gt;Richard&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;entry-meta&quot;&gt;
&lt;p&gt;May 6th, 2019&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Today, we’re announcing that the next release after &lt;a href=&quot;https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-preview-5/&quot;&gt;.NET Core 3.0&lt;/a&gt; will be .NET 5. This will be the next big release in the .NET family.&lt;/p&gt;
&lt;p&gt;There will be just one .NET going forward, and you will be able to use it to target Windows, Linux, macOS, iOS, Android, tvOS, watchOS and WebAssembly and more.&lt;/p&gt;
&lt;p&gt;We will introduce new .NET APIs, runtime capabilities and language features as part of .NET 5.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2019/05/dotnet5_platform.png&quot;&gt;&lt;img class=&quot;alignnone wp-image-22975 size-full&quot; src=&quot;https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2019/05/dotnet5_platform.png&quot; alt=&quot;&quot; width=&quot;1837&quot; height=&quot;979&quot; srcset=&quot;https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2019/05/dotnet5_platform.png 1837w, https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2019/05/dotnet5_platform-300x160.png 300w, https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2019/05/dotnet5_platform-768x409.png 768w, https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2019/05/dotnet5_platform-1024x546.png 1024w&quot; sizes=&quot;(max-width: 1837px) 100vw, 1837px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;From the inception of the .NET Core project, we’ve added around fifty thousand .NET Framework APIs to the platform. .NET Core 3.0 closes much of the remaining capability gap with .NET Framework 4.8, enabling Windows Forms, WPF and Entity Framework 6. .NET 5 builds on this work, taking &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/core/&quot; rel=&quot;nofollow&quot;&gt;.NET Core&lt;/a&gt; and the best of &lt;a href=&quot;https://www.mono-project.com/&quot; rel=&quot;nofollow&quot;&gt;Mono&lt;/a&gt; to create a single platform that you can use for all your modern .NET code.&lt;/p&gt;
&lt;p&gt;We intend to release .NET 5 in November 2020, with the first preview available in the first half of 2020. It will be supported with future updates to Visual Studio 2019, Visual Studio for Mac and Visual Studio Code.&lt;/p&gt;
&lt;h2&gt;.NET 5 = .NET Core vNext&lt;/h2&gt;
&lt;p&gt;.NET 5 is the next step forward with .NET Core. The project aims to improve .NET in a few key ways:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Produce a single .NET runtime and framework that can be used everywhere and that has uniform runtime behaviors and developer experiences.&lt;/li&gt;
&lt;li&gt;Expand the capabilities of .NET by taking the best of .NET Core, .NET Framework, Xamarin and Mono.&lt;/li&gt;
&lt;li&gt;Build that product out of a single code-base that developers (Microsoft and the community) can work on and expand together and that improves all scenarios.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;This new project and direction are a game-changer for .NET. With .NET 5, your code and project files will look and feel the same no matter which type of app you’re building. You’ll have access to the same runtime, API and language capabilities with each app. This includes new &lt;a href=&quot;https://devblogs.microsoft.com/dotnet/performance-improvements-in-net-core-2-1/&quot; rel=&quot;nofollow&quot;&gt;performance improvements&lt;/a&gt; that get committed to corefx, practically daily.&lt;/p&gt;
&lt;p&gt;Everything you love about .NET Core will continue to exist:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Open source and community-oriented on GitHub.&lt;/li&gt;
&lt;li&gt;Cross-platform implementation.&lt;/li&gt;
&lt;li&gt;Support for leveraging platform-specific capabilities, such as Windows Forms and WPF on Windows and the native bindings to each native platform from Xamarin.&lt;/li&gt;
&lt;li&gt;High performance.&lt;/li&gt;
&lt;li&gt;Side-by-side installation.&lt;/li&gt;
&lt;li&gt;Small project files (SDK-style).&lt;/li&gt;
&lt;li&gt;Capable command-line interface (CLI).&lt;/li&gt;
&lt;li&gt;Visual Studio, Visual Studio for Mac, and Visual Studio Code integration.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Here’s what will be new:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;You will have more choice on runtime experiences (more on that below).&lt;/li&gt;
&lt;li&gt;Java interoperability will be available on all platforms.&lt;/li&gt;
&lt;li&gt;Objective-C and Swift interoperability will be supported on multiple operating systems.&lt;/li&gt;
&lt;li&gt;CoreFX will be extended to support static compilation of .NET (ahead-of-time – AOT), smaller footprints and support for more operating systems.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;We will ship .NET Core 3.0 this September, .NET 5 in November 2020, and then we intend to ship a major version of .NET once a year, every November:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2019/05/dotnet_schedule.png&quot;&gt;&lt;img class=&quot;alignnone wp-image-22976 size-full&quot; src=&quot;https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2019/05/dotnet_schedule.png&quot; alt=&quot;&quot; width=&quot;1837&quot; height=&quot;1015&quot; srcset=&quot;https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2019/05/dotnet_schedule.png 1837w, https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2019/05/dotnet_schedule-300x166.png 300w, https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2019/05/dotnet_schedule-768x424.png 768w, https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2019/05/dotnet_schedule-1024x566.png 1024w&quot; sizes=&quot;(max-width: 1837px) 100vw, 1837px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We’re skipping the version 4 because it would confuse users that are familiar with the .NET Framework, which has been using the 4.x series for a long time. Additionally, we wanted to clearly communicate that .NET 5 is the future for the .NET platform.&lt;/p&gt;
&lt;p&gt;We are also taking the opportunity to simplify naming. We thought that if there is only one .NET going forward, we don’t need a clarifying term like “Core”. The shorter name is a simplification and also communicates that .NET 5 has uniform capabilities and behaviors. Feel free to continue to use the “.NET Core” name if you prefer it.&lt;/p&gt;
&lt;h2&gt;Runtime experiences&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mono/mono&quot;&gt;Mono&lt;/a&gt; is the original cross-platform implementation of .NET. It started out as an open-source alternative to .NET Framework and transitioned to targeting mobile devices as iOS and Android devices became popular. Mono is the runtime used as part of Xamarin.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr&quot;&gt;CoreCLR&lt;/a&gt; is the runtime used as part of .NET Core. It has been primarily targeted at supporting cloud applications, including the largest services at Microsoft, and now is also being used for Windows desktop, IoT and machine learning applications.&lt;/p&gt;
&lt;p&gt;Taken together, the .NET Core and Mono runtimes have a lot of similarities (they are both .NET runtimes after all) but also valuable unique capabilities. It makes sense to make it possible to pick the runtime experience you want. We’re in the process of making CoreCLR and Mono drop-in replacements for one another. We will make it as simple as a build switch to choose between the different runtime options.&lt;/p&gt;
&lt;p&gt;The following sections describe the primary pivots we are planning for .NET 5. They provide a clear view on how we plan to evolve the two runtimes individually, and also together.&lt;/p&gt;
&lt;h3&gt;High throughput and high productivity&lt;/h3&gt;
&lt;p&gt;From the very beginning, .NET has relied on a &lt;a href=&quot;https://en.wikipedia.org/wiki/Just-in-time_compilation&quot; rel=&quot;nofollow&quot;&gt;just-in-time compiler (JIT)&lt;/a&gt; to translate &lt;a href=&quot;https://en.wikipedia.org/wiki/Common_Intermediate_Language&quot; rel=&quot;nofollow&quot;&gt;Intermediate Language (IL) code&lt;/a&gt; to optimized machine code. Since that time, we’ve built an industry-leading JIT-based managed runtime that is capable of very high throughput and also enabled developer experiences that make programming fast and easy.&lt;/p&gt;
&lt;p&gt;JITs are well suited for long-running cloud and client scenarios. They are able to generate code that targets a specific machine configuration, including specific CPU instructions. A JIT can also &lt;a href=&quot;https://devblogs.microsoft.com/dotnet/tiered-compilation-preview-in-net-core-2-1/&quot; rel=&quot;nofollow&quot;&gt;re-generate methods at runtime&lt;/a&gt;, a technique used to JIT quickly while still having the option to produce a highly-tuned version of the code if this becomes a frequently used method.&lt;/p&gt;
&lt;p&gt;Our efforts to make ASP.NET Core run faster on the &lt;a href=&quot;https://www.techempower.com/benchmarks/&quot; rel=&quot;nofollow&quot;&gt;TechEmpower benchmarks&lt;/a&gt; is a good example of the power of JIT and our investments in CoreCLR. Our efforts to &lt;a href=&quot;https://devblogs.microsoft.com/dotnet/using-net-and-docker-together-dockercon-2019-update/&quot; rel=&quot;nofollow&quot;&gt;harden .NET Core for containers&lt;/a&gt; also demonstrates the runtime’s ability to dynamically adapt to constrained environments.&lt;/p&gt;
&lt;p&gt;Developer tools are another good example where JIT shines, such as with the &lt;code&gt;dotnet watch&lt;/code&gt; tool or edit and continue. Tools often require compiling and loading code multiple times in a single process without restarting and need to do it very quickly.&lt;/p&gt;
&lt;p&gt;Developers using .NET Core or .NET Framework have primarily relied on JIT. As a result, this experience should seem familiar.&lt;/p&gt;
&lt;p&gt;The default experience for most .NET 5 workloads will be using the JIT-based CoreCLR runtime. The two notable exceptions are iOS and client-side Blazor (web assembly) since both require ahead-of-time (AOT) native compilation.&lt;/p&gt;
&lt;h3&gt;Fast startup, low footprint, and lower memory usage&lt;/h3&gt;
&lt;p&gt;The Mono Project has spent much of its effort focused on mobile and gaming consoles. A key capability and outcome of that project is an AOT compiler for .NET, based on the industry-leading &lt;a href=&quot;http://llvm.org/&quot; rel=&quot;nofollow&quot;&gt;LLVM compiler project&lt;/a&gt;. The Mono AOT compiler enables .NET code to be built into a single native code executable that can run on a machine, much like C++ code. AOT-compiled apps can run efficiently in small places, and trades throughput for startup if needed.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://blazor.net&quot; rel=&quot;nofollow&quot;&gt;Blazor project&lt;/a&gt; is already using the Mono AOT. It will be one of the first projects to transition to .NET 5. We are using it as one of the scenarios to prove out this plan.&lt;/p&gt;
&lt;p&gt;There are two types of AOT solutions:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;solutions that require 100% AOT compilation.&lt;/li&gt;
&lt;li&gt;solutions where most code is AOT-compiled but where a JIT or interpreter is available and used for code patterns that are not friendly to AOT (like generics).&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The Mono AOT supports both cases. The first type of AOT is required by Apple for iOS and some game consoles, typically for security reasons. The second is the preferred choice since it offers the benefits of AOT without any of its drawbacks.&lt;/p&gt;
&lt;p&gt;.NET Native is the AOT compiler we use for Windows UWP applications and is an example of the first type of AOT listed above. With that particular implementation, we limited the .NET APIs and capabilities that you can use. We learned from that experience that AOT solutions need to cover the full spectrum of .NET APIs and patterns.&lt;/p&gt;
&lt;p&gt;AOT compilation will remain required for iOS, web assembly and some game consoles. We will make AOT compilation an option for applications that are more appliance-like, that require fast startup and/or low footprint.&lt;/p&gt;
&lt;h3&gt;Fundamentals and overlapping experiences&lt;/h3&gt;
&lt;p&gt;It is critical that we continue to move forward as an overall platform with startup, throughput, memory use, reliability, and diagnostics. At the same time, it also makes sense to focus our efforts. We’ll invest more in throughput and reliability in CoreCLR while we invest more in startup and size reduction with the Mono AOT compiler. We think that these are good pairings. Throughput and reliability go together as do startup and size reduction.&lt;/p&gt;
&lt;p&gt;While there are some characteristics where it makes sense to make different investments, there are others that do not.&lt;/p&gt;
&lt;p&gt;Diagnostics capabilities need to be the same across .NET 5, for both functional and performance diagnostics. It is also important to support the same chips and operating systems (with the exception of iOS and web assembly).&lt;/p&gt;
&lt;p&gt;We will continue to optimize .NET 5 for each workload and scenario, for whatever makes sense. There will be even greater emphasis on optimizations, particular where multiple workloads have overlapping needs.&lt;/p&gt;
&lt;p&gt;All .NET 5 applications will use the &lt;a href=&quot;https://github.com/dotnet/corefx&quot;&gt;CoreFX framework&lt;/a&gt;. We will ensure that CoreFX works well in the places it is not used today, which is primarily the Xamarin and client-side Blazor workloads.&lt;br/&gt;All .NET 5 applications will be buildable with the &lt;a href=&quot;https://github.com/dotnet/cli&quot;&gt;.NET CLI&lt;/a&gt;, ensuring that you have common command-line tooling across projects.&lt;/p&gt;
&lt;p&gt;C# will move forward in lock-step with .NET 5. Developers writing .NET 5 apps will have access to the latest C# version and features.&lt;/p&gt;
&lt;h2&gt;The birth of the project&lt;/h2&gt;
&lt;p&gt;We met as a technical team in December 2018 in Boston to kick off this project. Design leaders from .NET teams (Mono/Xamarin and .NET Core) and also from &lt;a href=&quot;https://unity.com/&quot; rel=&quot;nofollow&quot;&gt;Unity&lt;/a&gt; presented on various technical capabilities and architectural direction.&lt;/p&gt;
&lt;p&gt;We are now moving forward on this project as a single team with one set of deliverables. Since December, we have made a lot of progress on a few projects:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Defined a minimal layer that defines the runtime &amp;lt;-&amp;gt; managed code layer, with the goal making &amp;gt;99% of CoreFX common code.&lt;/li&gt;
&lt;li&gt;MonoVM can now use CoreFX and its class libraries.&lt;/li&gt;
&lt;li&gt;Run all CoreFX tests on MonoVM using the CoreFX implementation.&lt;/li&gt;
&lt;li&gt;Run ASP.NET Core 3.0 apps with MonoVM.&lt;/li&gt;
&lt;li&gt;Run MonoDevelop and then Visual Studio for Mac on CoreCLR.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Moving to a single .NET implementation raises important questions. What will the target framework be? Will NuGet package compatibility rules be the same? Which workloads should be supported out-of-the-box by the .NET 5 SDK? How does writing code for a specific architecture work? Do we still need .NET Standard? We are working through these issues now and will soon be sharing design docs for you to read and give feedback on.&lt;/p&gt;
&lt;h2&gt;Closing&lt;/h2&gt;
&lt;p&gt;The .NET 5 project is an important and exciting new direction for .NET. You will see .NET become simpler but also have broader and more expansive capability and utility. All new development and feature capabilities will be part of .NET 5, including new C# versions.&lt;/p&gt;
&lt;p&gt;We see a bright future ahead in which you can use the same .NET APIs and languages to target a broad range of application types, operating systems, and chip architectures. It will be easy to make changes to your build configuration to build your applications differently, in Visual Studio, Visual Studio for Mac, Visual Studio Code, Azure DevOps or at the command line.&lt;/p&gt;
&lt;p&gt;See: &lt;a href=&quot;https://news.ycombinator.com/item?id=19840763&quot;&gt;.NET 5 on Hacker News&lt;/a&gt;&lt;/p&gt;


&lt;div class=&quot;authorinfoarea&quot;&gt;
&lt;div&gt;&lt;img src=&quot;https://secure.gravatar.com/avatar/37f91ebe219df737566a4dc7cdd53b68?s=96&amp;amp;d=mm&amp;amp;r=g&quot; width=&quot;96&quot; height=&quot;96&quot; alt=&quot;Avatar&quot; class=&quot;avatar avatar-96 wp-user-avatar wp-user-avatar-96 photo avatar-default&quot;/&gt;&lt;/div&gt;

&lt;/div&gt;
</description>
<pubDate>Mon, 06 May 2019 16:14:18 +0000</pubDate>
<dc:creator>benaadams</dc:creator>
<og:type>article</og:type>
<og:title>Introducing .NET 5 | .NET Blog</og:title>
<og:description>Today, we’re announcing that the next release after .NET Core 3.0 will be .NET 5. This will be the next big release in the .NET family. There will be just one .NET going forward, and you will be able to use it to target Windows,</og:description>
<og:url>https://devblogs.microsoft.com/dotnet/introducing-net-5/</og:url>
<og:image>https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2019/02/swimlane-cross-platform.png</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://devblogs.microsoft.com/dotnet/introducing-net-5/</dc:identifier>
</item>
<item>
<title>Windows gets a new terminal</title>
<link>https://techcrunch.com/2019/05/06/windows-gets-a-new-terminal/</link>
<guid isPermaLink="true" >https://techcrunch.com/2019/05/06/windows-gets-a-new-terminal/</guid>
<description>&lt;p id=&quot;speakable-summary&quot;&gt;Windows 10 is getting &lt;a href=&quot;https://aka.ms/build2019terminalannounce&quot;&gt;a new terminal&lt;/a&gt; for command-line users, Microsoft &lt;a href=&quot;https://blogs.windows.com/&quot;&gt;announced&lt;/a&gt; at its Build developer conference today.&lt;/p&gt;
&lt;p&gt;The new so-called “Windows Terminal” will launch in mid-June and promises to be a major update of the existing Windows Command Prompt and PowerShell experience. Indeed, it seems like the Terminal will essentially become the default environment for PowerShell, Command Prompt and Windows Subsystem for Linux users going forward.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://techcrunch.com/wp-content/uploads/2019/05/Screen-Shot-2019-05-03-at-5.58.24-PM.png&quot;&gt;&lt;img class=&quot;breakout aligncenter size-full wp-image-1822258&quot; src=&quot;https://techcrunch.com/wp-content/uploads/2019/05/Screen-Shot-2019-05-03-at-5.58.24-PM.png&quot; alt=&quot;&quot; width=&quot;1024&quot; height=&quot;665&quot; srcset=&quot;https://techcrunch.com/wp-content/uploads/2019/05/Screen-Shot-2019-05-03-at-5.58.24-PM.png 1522w, https://techcrunch.com/wp-content/uploads/2019/05/Screen-Shot-2019-05-03-at-5.58.24-PM.png?resize=150,97 150w, https://techcrunch.com/wp-content/uploads/2019/05/Screen-Shot-2019-05-03-at-5.58.24-PM.png?resize=300,195 300w, https://techcrunch.com/wp-content/uploads/2019/05/Screen-Shot-2019-05-03-at-5.58.24-PM.png?resize=768,499 768w, https://techcrunch.com/wp-content/uploads/2019/05/Screen-Shot-2019-05-03-at-5.58.24-PM.png?resize=680,441 680w, https://techcrunch.com/wp-content/uploads/2019/05/Screen-Shot-2019-05-03-at-5.58.24-PM.png?resize=50,32 50w&quot; sizes=&quot;(max-width: 1024px) 100vw, 1024px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The new terminal will feature faster GPU-accelerated text rending and “emoji-rich” fonts, because everything these days needs to support emojis, and those will sure help lighten up the command-line user experience. More importantly, though, the Windows Terminal will also support shortcuts, tabs, tear-away windows and theming, as well as extensions. It also will natively support Unicode and East Asian fonts.&lt;/p&gt;
&lt;p&gt;The idea here, &lt;a class=&quot;crunchbase-link&quot; href=&quot;https://crunchbase.com/organization/microsoft&quot; target=&quot;_blank&quot; data-type=&quot;organization&quot; data-entity=&quot;microsoft&quot;&gt;Microsoft&lt;/a&gt; says, is to “elevate the command-line user experience on Windows.”&lt;/p&gt;
&lt;p&gt;The first preview of the new Windows Terminal is now available.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://techcrunch.com/tag/ms-build-2019/&quot;&gt;&lt;img src=&quot;https://techcrunch.com/wp-content/uploads/2019/05/msft-build-2019-banner.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 06 May 2019 15:46:05 +0000</pubDate>
<dc:creator>MikusR</dc:creator>
<og:title>Windows gets a new terminal – TechCrunch</og:title>
<og:description>Windows 10 is getting a new terminal for command-line users, Microsoft announced at its Build developer conference today. The new so-called “Windows Terminal” will launch in mid-June and promises to be a major update of the existing Windows Command Prompt and PowerShell experience. Inde…</og:description>
<og:image>https://techcrunch.com/wp-content/uploads/2019/05/GettyImages-985008060.jpg?w=600</og:image>
<og:url>http://social.techcrunch.com/2019/05/06/windows-gets-a-new-terminal/</og:url>
<og:type>article</og:type>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://techcrunch.com/2019/05/06/windows-gets-a-new-terminal/</dc:identifier>
</item>
<item>
<title>Remote-Powered Developer Tools</title>
<link>https://devblogs.microsoft.com/visualstudio/intelligent-productivity-and-collaboration-from-anywhere/</link>
<guid isPermaLink="true" >https://devblogs.microsoft.com/visualstudio/intelligent-productivity-and-collaboration-from-anywhere/</guid>
<description>&lt;div class=&quot;row justify-content-center&quot;&gt;
&lt;div class=&quot;col-md-4&quot;&gt;
&lt;div&gt;&lt;img src=&quot;https://secure.gravatar.com/avatar/a06537ce9fec73a32185e77e7d48c6da?s=58&amp;amp;d=mm&amp;amp;r=g&quot; width=&quot;58&quot; height=&quot;58&quot; alt=&quot;Avatar&quot; class=&quot;avatar avatar-58 wp-user-avatar wp-user-avatar-58 photo avatar-default&quot;/&gt;&lt;p&gt;Jonathan&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;entry-meta&quot;&gt;
&lt;p&gt;May 6th, 2019&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Developers today are encountering an overwhelming amount of complexity due to the growing emphasis on time-to-market, and a broader variety of technologies being used than ever before (e.g. polyglot apps, microservices). Additionally, teams are &lt;a href=&quot;https://stripe.com/blog/remote-hub&quot;&gt;becoming more geographically distributed&lt;/a&gt;, which increases the need for efficient collaboration in order to maintain knowledge transfer within agile environments.&lt;/p&gt;
&lt;p&gt;Over the past couple of years, we’ve spoken with thousands of developers, and learned that addressing these fundamental challenges required a new set of capabilities in your development tools and processes. As a result, our focus has been to significantly enhance individual productivity, improve team collaboration, and radically embrace workplace flexibility. To date, we’ve made a ton of progress (and are still iterating!) on the first two capabilities, thanks to feedback from the developer community:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://visualstudio.microsoft.com/services/intellicode/&quot;&gt;Visual Studio IntelliCode&lt;/a&gt; helps enhance &lt;strong&gt;individual productivity&lt;/strong&gt; by instilling intelligence into the IDE. It does this by making things like auto-completion smarter, based on an understanding of how APIs are used across thousands of open-source GitHub repositories.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://aka.ms/vsls&quot;&gt;Visual Studio Live Share&lt;/a&gt; facilitates &lt;strong&gt;real-time collaboration&lt;/strong&gt; by enabling developers to edit and debug together, from the comfort of their favorite tools.&lt;/li&gt;
&lt;li&gt;We also have a &lt;a href=&quot;https://code.visualstudio.com/blogs/2018/12/04/rich-navigation&quot;&gt;rich code navigation experience&lt;/a&gt; to improve &lt;strong&gt;asynchronous collaboration&lt;/strong&gt;, and enable developers to deeply review PRs via multi-repo, cloud-based language services.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Today, we’re excited to share an early look of three new capabilities that are in &lt;a href=&quot;https://aka.ms/vsfutures-signup&quot;&gt;private preview&lt;/a&gt;, and will enable developers to &lt;strong&gt;work from anywhere,&lt;/strong&gt; and &lt;strong&gt;on any device&lt;/strong&gt;, while &lt;strong&gt;virtually eliminating the amount of setup needed to start productively coding.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;Remote-Powered Developer Tools&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;After we released Visual Studio Live Share, we immediately heard interest in an adjacent scenario: individual remote development. In fact, this had been the #1 &lt;a href=&quot;https://github.com/MicrosoftDocs/live-share/issues/74&quot;&gt;feature request on GitHub&lt;/a&gt; for Visual Studio Live Share for over a year. Being able to develop against remote machines has numerous benefits, such as working on a different OS than the deployment target of your application, being able to leverage higher-end hardware, and having multi-machine portability. Today, many developers want to do remote development, but aren’t necessarily satisfied with the experience of using SSH + Vim or RDP/VNC.&lt;/p&gt;
&lt;p&gt;Last week, the Visual Studio Code team released the &lt;a href=&quot;https://aka.ms/vscode-remote/blog&quot;&gt;Remote Development extensions&lt;/a&gt; (for Visual Studio Code Insiders) to enable connecting your local tools to a WSL, Docker container, or SSH environment, while &lt;strong&gt;retaining the full-fidelity, editing experience&lt;/strong&gt; in Visual Studio Code (e.g. extensions, themes, debugging). Today, we’re excited to share an early look at &lt;strong&gt;&lt;em&gt;Visual Studio&lt;/em&gt; Remote Development&lt;/strong&gt;, which will enable Visual Studio users to achieve the same benefits, and go beyond the limits of their local dev machines. We’re starting with C# and C++, and look forward to working with the community to define the experience. Sign up for the &lt;a href=&quot;https://aka.ms/vsfutures-signup&quot;&gt;private preview&lt;/a&gt; to get future updates.&lt;/p&gt;


&lt;h2&gt;&lt;em&gt;&lt;span&gt;Developing a C++ app without any local tools installed&lt;/span&gt;&lt;/em&gt;&lt;/h2&gt;

&lt;h2&gt;&lt;strong&gt;Cloud-Hosted Development Environments&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Having remote-capable tools unblocks a ton of developer scenarios, but on their own, they still require you to manually manage machines. We’ve heard loud-and-clear that developers are spending too much time setting up their developer environments, and that it can get in the way of onboarding new team members or enabling you to quickly move between tasks. To simplify this, we’re announcing the &lt;a href=&quot;http://aka.ms/vsfutures-signup&quot;&gt;private preview&lt;/a&gt; of a capability that can provision fully-managed cloud-hosted development environments on-demand.&lt;/p&gt;
&lt;p&gt;When you need to work on a new project, pick up a new task, or review a PR, you can simply spin up a cloud-based environment, and let the service take care of configuring it correctly. This allows you to spend more time coding, and little-to-no time installing dependencies. You can then connect to these environments using Visual Studio or Visual Studio Code (or both!) which ensures you can use the right tool for the job, and maximize your personal productivity, no matter where you are.&lt;/p&gt;


&lt;h2&gt;&lt;span&gt;&lt;em&gt;Creating a new cloud-hosted development environment directly within Visual Studio Code&lt;/em&gt;&lt;/span&gt;&lt;/h2&gt;


&lt;h2&gt;&lt;em&gt;&lt;span&gt;Connecting to an existing environment and debugging it remotely&lt;/span&gt;&lt;/em&gt;&lt;/h2&gt;

&lt;h2&gt;&lt;strong&gt;Browser-Based Web Companion&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Developers are highly opinionated about their editor, and commonly spend countless hours customizing them. As a result, you’d want &lt;a href=&quot;https://code.visualstudio.com/blogs/2019/05/02/remote-development&quot;&gt;remote development&lt;/a&gt; and collaboration capabilities directly within your existing tools, where you spend the bulk of your time working. However, in some scenarios, it can actually be more convenient to perform a task in the browser, such as making a quick edit on-the-go, reviewing a PR, or joining a teammate’s Live Share session. To address this, we’re excited to share an early look at &lt;strong&gt;Visual Studio Online&lt;/strong&gt;, a new web-based companion editor that compliments the Visual Studio family, and ensures you can work effectively from any device.&lt;/p&gt;
&lt;p&gt;In the future, you will be able to navigate to &lt;a href=&quot;https://online.visualstudio.com&quot;&gt;https://online.visualstudio.com&lt;/a&gt; and access any of your remote environments. Because Visual Studio Online is based on Visual Studio Code, it will feel immediately familiar, and benefits from the rich ecosystem of extensions you already know and love – while supporting both the Visual Studio Code workspaces, as well as Visual Studio’s projects and solutions. Additionally, it will support IntelliCode and Live Share out-of-the-box, which ensures it provides the rich collaboration and productivity features developers need.&lt;/p&gt;


&lt;h2&gt;&lt;span&gt;&lt;em&gt;&lt;em&gt;Editing a web application in the browser via Visual Studio Online&lt;/em&gt;&lt;/em&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;h2&gt;&lt;strong&gt;We Need Your Feedback!&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;We’re excited to share this progress, gather feedback, and learn how we can continue to improve team-based productivity moving forward. We believe that the combination of these experiences can address the needs of modern teams, and ensure you can achieve a high level of productivity, collaboration, and workplace flexibility. If you’re interested in getting your hands on early bits and chatting with our team, you can sign-up for the private preview &lt;a href=&quot;http://aka.ms/vsfutures-signup&quot;&gt;here&lt;/a&gt;. We look forward to hearing from you and sharing more updates in the near future!&lt;/p&gt;
&lt;div class=&quot;row justify-content-center&quot;&gt;&lt;a class=&quot;cta_button_link&quot; href=&quot;https://aka.ms/vsfutures-signup&quot; target=&quot;_blank&quot;&gt;Sign up now for the private preview!&lt;/a&gt;&lt;/div&gt;

&lt;div class=&quot;authorinfoarea&quot;&gt;
&lt;div&gt;&lt;img src=&quot;https://secure.gravatar.com/avatar/a06537ce9fec73a32185e77e7d48c6da?s=96&amp;amp;d=mm&amp;amp;r=g&quot; width=&quot;96&quot; height=&quot;96&quot; alt=&quot;Avatar&quot; class=&quot;avatar avatar-96 wp-user-avatar wp-user-avatar-96 photo avatar-default&quot;/&gt;&lt;/div&gt;

&lt;/div&gt;
</description>
<pubDate>Mon, 06 May 2019 15:40:36 +0000</pubDate>
<dc:creator>pavanagrawal123</dc:creator>
<og:type>article</og:type>
<og:title>Intelligent Productivity and Collaboration, from Anywhere | The Visual Studio Blog</og:title>
<og:description>Developers today are encountering an overwhelming amount of complexity due to the growing emphasis on time-to-market, and a broader variety of technologies being used than ever before (e.g. polyglot apps, microservices). Additionally, teams are becoming more geographically distributed, which increases the need for efficient collaboration in order to maintain knowledge transfer within agile environments.</og:description>
<og:url>https://devblogs.microsoft.com/visualstudio/intelligent-productivity-and-collaboration-from-anywhere/</og:url>
<og:image>https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2019/05/liveshare-768x466.gif</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://devblogs.microsoft.com/visualstudio/intelligent-productivity-and-collaboration-from-anywhere/</dc:identifier>
</item>
<item>
<title>A final proposal for Rust await syntax</title>
<link>https://boats.gitlab.io/blog/post/await-decision/</link>
<guid isPermaLink="true" >https://boats.gitlab.io/blog/post/await-decision/</guid>
<description>&lt;p&gt;This is an announcement regarding the resolution of the syntax for the await operator in Rust. This is one of the last major unresolved questions blocking the stabilization of the async/await feature, a feature which will enable many more people to write non-blocking network services in Rust. This post contains information about the timeline for the final decision, a proposal from the language team which is the most likely syntax to be adopted, and the justification for this decision.&lt;/p&gt;&lt;p&gt;In brief: we intend to make a final decision on &lt;strong&gt;May 23&lt;/strong&gt;, and we currently favor adopting the “dot await” postfix syntax. All of this is elaborated further in this document.&lt;/p&gt;

&lt;p&gt;We hope to achieve a timeline of stabilizing what we call the “minimum viable product” (MVP) of async/await in the 1.37 release of Rust. This release will happen on August 15th, and the beta for the release will be cut on July 4th. This means we have until roughly the end of June (2 months) to land a stabilization PR in order to hit this target.&lt;/p&gt;
&lt;p&gt;There’s a fair amount of work needed to stabilize even the MVP of async/await. There are still &lt;a href=&quot;https://github.com/rust-lang/rust/issues?q=is%3Aopen+is%3Aissue+label%3AAsyncAwait-Blocking&quot;&gt;implementation issues that we consider blocking on the MVP&lt;/a&gt;, and we need to develop clear documentation - not only about how to use the feature, but about setting expecations regarding the current status of the feature and its long term development. More on this is forthcoming.&lt;/p&gt;
&lt;p&gt;However, the big outstanding issue blocking stabilization which is the responsibility of the language design team to resolve is the syntax of the await operator. This post contains a proposal which the language team found consensus on in the last meeting, as well as its justification and its most viable alternative.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;We will make a final decision in the May 23 meeting of the language design team.&lt;/strong&gt; Until then we will do our best to actively engage with the community discussion of this proposal and its justification, and are open to hearing counterproposals.&lt;/p&gt;
&lt;p&gt;I want to add, however, that the amount of feedback regarding syntax for the await operator has been overwhelming. It has also devolved into a situation in which many commenters propose to reverse previous decisions about the design of async/await on which we have already established firm consensus, or otherwise introduced possibilities we have considered and ruled out of scope for now. This has been a major learning experience for us: one of the major goals of the &lt;a href=&quot;https://internals.rust-lang.org/t/lang-team-meta-working-group/9989&quot;&gt;“meta” working group&lt;/a&gt; will be to improve the way groups working on long-term design projects communicate the status of the design with everyone else.&lt;/p&gt;
&lt;p&gt;In the meantime, this document hopes to explain well the decision that we’ve reached on the specific question of the await operator’s syntax and why. I firmly hope that everyone will extend to us good faith that we have considered this decision at length and very seriously, and have discussed and thought about all options.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The lang team proposes to add the await operator to Rust using this syntax:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;expression.await
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This is what’s called the “dot await” syntax: a postfix operator formed by the combination of a period and the await keyword. We will not include any other syntax for the await operator.&lt;/p&gt;

&lt;h2 id=&quot;a-postfix-keyword-operator&quot;&gt;A postfix keyword operator&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://paper.dropbox.com/doc/Await-Syntax-Write-Up--AcIbhZ1tPTCloXb2fmFpBTt~Ag-t9NlOSeI4RQ8AINsaSSyJ&quot;&gt;Our previous summary of the discussion&lt;/a&gt; focused most of our attention on the prefix vs postfix question. In resolving this question, there was a strong majority in the language team that preferred postfix syntax. To be concrete: I am the only member of the language team that prefers a prefix syntax. The primary argument in favor of postfix was its better composability with methods and the ? operator. It was also clear that the discussion had reached a standstill; the arguments had all been made. For this reason, it seemed obvious to all of us (including me) that adopting a postfix syntax was the best way to ship the feature.&lt;/p&gt;
&lt;p&gt;Having chosen a postfix syntax, this becomes the problem: because we also have consensus that the operator should include the string “await,” this becomes the first postfix keyword operator in Rust. We need to decide what the syntax for this sort of production will be - not only the await operator, but also any future similar operators. We believe the best choice for this kind of construct is a period character joined with a non-contextual keyword. Hence, we propose to introduce the await operator using the “dot await” syntax.&lt;/p&gt;
&lt;h2 id=&quot;about-method-like-and-macro-like-syntax&quot;&gt;About method-like and macro-like syntax&lt;/h2&gt;
&lt;p&gt;More popular in the community discussions than dot await has been two other alternatives: one in which the await operator mimics a method call, and one in which the await operator mimics a macro. These two syntaxes share a weakness which led us to prefer dot await: the await operator &lt;strong&gt;is not&lt;/strong&gt; and &lt;strong&gt;cannot be&lt;/strong&gt; either a method or a macro.&lt;/p&gt;
&lt;p&gt;Await is not a method because it yields control in the same way that &lt;code&gt;?&lt;/code&gt; is not a method. Though users have repeatedly asked why there is not an “Await trait” that defines the await method, the reality is that there is no way to define the await operator as a method. The user defineable part of the await operator is controlled by &lt;strong&gt;the Future trait&lt;/strong&gt;, which defines what happens when the await operator polls the future. This is analogous to the way that the user defineable part of the &lt;code&gt;?&lt;/code&gt; operator is controlled by the Try trait, which does not impact the control flow aspect of the operator.&lt;/p&gt;
&lt;p&gt;The situation with macro-like syntax is a little more nuanced for a few reasons. First, macros &lt;em&gt;can&lt;/em&gt; influence control flow. A lot has been made of the similarity to the evolution from &lt;code&gt;try!&lt;/code&gt; to &lt;code&gt;?&lt;/code&gt;. However, macros can only influence control flow by expanding to code that the user could have written themselves - the try macro was defined in the standard library and expanded to code using the &lt;code&gt;return&lt;/code&gt; operator. In the long term, await cannot be defined as a macro in this way because the form of yielding it represents cannot be expressed by the user in the surface syntax. Therefore, await is not a macro.&lt;/p&gt;
&lt;p&gt;This is confused by the odd (and frankly hacky) history and status quo of the await operator. Async/await was original implemented out of tree in the &lt;a href=&quot;https://github.com/alexcrichton/futures-await&quot;&gt;futures-async-await crate&lt;/a&gt;. This crate defines async/await as a macro on top of the unstable generators feature, expanding to a function that returns a generator and uses the &lt;code&gt;yield&lt;/code&gt; operator internally. And now that async/await is built into the compiler, await still &lt;em&gt;is&lt;/em&gt; a macro, expanding to yield. This is incorrect and is one of the main implementation blockers before we can stabilize async/await. It leads to bad diagnostics and “leaks”, allowing code to compile which certainly must not be allowed, such as:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;#![feature(async_await, generators)]

// This function compiles with an unreachable code warning, but yield is not
// supposed to be allowed outside of generators.
pub async fn bad() {
    yield panic!();
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;(As a side note, the decision to have async/await as first class syntax instead of continuing the crate which built it on top of generators was made with good reason and after seriously considering the design space. First class syntax makes it much easier to provide first class diagnostics, and making async/await and generators separate, orthogonal features makes it much easier to solve the problem of defining Streams. This decision was made more than a year ago and is not open for reconsideration at this phase of the design.)&lt;/p&gt;
&lt;p&gt;So, the weirdness of our current situation notwithstanding, the await operator will not be implemented as a macro. There is yet another wrinkle. Rust defines several so-called “compiler built-ins” which are accessed using syntax that looks like macros even though they are not macros. It is reasonable to argue, then, that the await operator could be treated as a compiler built-in. However, await has very little in common with these compiler built-ins and it does not seem appropriate to treat it as one of these. Compiler built-ins tend to fall into two categories:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Most compiler built-ins are isolated features that are sort of like “breaking the fourth wall” and give access to information about the program or compilation itself: for example, the &lt;code&gt;line!()&lt;/code&gt; built-in gives you the current line number in the source code file.&lt;/li&gt;
&lt;li&gt;A small number of built-ins introduce domain-specific languages that would be invalid Rust outside of that built-in. This refers to &lt;code&gt;format_args!&lt;/code&gt; and &lt;code&gt;macro_rules!&lt;/code&gt;. These are implemented this way for historical reasons: in theory, &lt;code&gt;format_args&lt;/code&gt; could be implemented today as a procedural macro provided by std, and &lt;code&gt;macro_rules!&lt;/code&gt; is a legacy system we intend to deprecate and replace with the &lt;code&gt;macro&lt;/code&gt; keyword.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Await is neither of these. It is a fundamental control flow operator that must be paired with the async keyword and interacts with the rest of the function as a whole. It would not make sense to decide the await operator functions as a compiler built-in.&lt;/p&gt;
&lt;p&gt;Some have suggested that the &lt;code&gt;!&lt;/code&gt; should be interpreted as indicating any sort of control flow, not only macros. But this seems suspect: the vast majority of macros do not perform any control flow, and none of the built in control flow constructs use the &lt;code&gt;!&lt;/code&gt; character.&lt;/p&gt;
&lt;h2 id=&quot;keyword-and-field-accesses&quot;&gt;”.keyword” and field accesses&lt;/h2&gt;
&lt;p&gt;The counterargument can be made, of course, that the dot keyword syntax conflicts with field access. The await operator is also not a field access. There are a few things which separate the dot keyword syntax from the “method” or “postfix macro” syntax which make us more comfortable with this.&lt;/p&gt;
&lt;p&gt;First, its hard to ignore that dot await is a strict subset of the characters used in all of these products. Its very easy to build a mental model of the period operator as simply the introduction of all of these various postfix syntaxes: field accesses, methods, and certain keyword operators like the await operation. (In this model, even the ? operator can be thought of as a modification on the period construct.)&lt;/p&gt;
&lt;p&gt;There is also the fact that a user who knows anything about the semantics of the await operator will quickly realize that its not possible that await is &lt;em&gt;actually&lt;/em&gt; a field access. In contrast, you need to know a lot about the semantics of Rust to understand that await cannot be implemented as either a method or a macro. That is to say, a user who is initially confused about the relationship between this construct and field accesses will come more quickly to understand that this is a built-in construct different from field access than they would be if we used methods or macros.&lt;/p&gt;
&lt;p&gt;We also believe that there is a good amount of mitigation of the problem of having an initial confusion about whether this operator is a field access. First, by using a reserved keyword, it will be differentiated by any syntax highlighting system. Users are very likely to understand that this is different from a field access on first witnessing the syntax if it is highlighted. Even if not using highlighting, many users will be familiar with languages using an async/await syntax; while those languages will probably have a different syntax for the await operator, they will still recognize the await keyword as indicating something unusual is happening.&lt;/p&gt;
&lt;h2 id=&quot;space-await-the-most-viable-alternative&quot;&gt;Space await: the most viable alternative&lt;/h2&gt;
&lt;p&gt;However, we do recognize the confusion with the existing field access construct as the most serious downside of the dot await syntax. For that reason, we did consider using a syntax which does not have any potential for confusion with an existing construct.&lt;/p&gt;
&lt;p&gt;We consider the most viable of these syntaxes the space await syntax. Other choices (like “&lt;code&gt;expression@await&lt;/code&gt;” or “&lt;code&gt;expression#await&lt;/code&gt;”) suffer from too much from the “line noise” problem and we strongly prefer to avoid introducing new meanings to punctuation characters for this purpose. For that reason, we discussed &lt;code&gt;expression await&lt;/code&gt; as the primarily alternative to &lt;code&gt;expression.await&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;However, we still did not find strong support for this alternative over the dot await notation. It has some serious downsides of its own, which we found to be more bothersome than the possibility of confusion that dot await introduces:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;It does not visually group well, making it seem like await and anything attached to it are a separate expression from the preceding subexpression.&lt;/li&gt;
&lt;li&gt;Postfix space expressions can cause problems with compiler recovery when the user omits a necessary semicolon (that is, they can result in the compiler giving much less helpful error messages); we’d like to avoid them without a compelling motivation.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;In particular, some members of the language team are excited about a potential future extensions in which some “expression-oriented” keywords (that is, those that evaluate to something other than &lt;code&gt;!&lt;/code&gt; or &lt;code&gt;()&lt;/code&gt;) can all be called in a “method-like” fashion. In this world, the dot await operation would be generalized so that await were a “normal” prefix keyword, but the dot combination applied to several such keywords, most importantly match:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;foo.bar(..).baz(..).match {
    Variant1 =&amp;gt; { ... }
    Variant2(quux) =&amp;gt; { ... }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This does not work very well with the space-based syntax, particularly for the compiler recovery reasons.&lt;/p&gt;

&lt;p&gt;I hope in reading this that users recognize that we found every potential syntax for the await operator to have non-trivial downsides. Ultimately, the decision was a weighing of the downsides and their mitiations, and trying to find the least bad option. I hope everyone can understand that we do not claim the dot await operator is a completely perfect solution, only that we reached consensus that it was, in our appraisal, &lt;em&gt;the least imperfect&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;We’ll continue to solicit and consider feedback until the May 23 meeting. It’s possible that new arguments will be presented in this time that will seriously change the calculus and cause a different outcome, but users should be realistic about the amount of consideration this question has already received and how likely it is that truly novel information will be introduced at this phase. This specific question - the await operator syntax - has been the most discussed decision the lang team has ever made, with more than 1000 comments in total already. Thanks again to everyone who participated in these discussions!&lt;/p&gt;
&lt;p&gt;Even if you might have prefered a different outcome on this question, I hope you will remember the bigger picture. Shipping an async/await syntax in Rust will enable a huge number of users and potential users to write highly efficient network services using Rust, a memory safe language. The impact of shipping this feature for our project is enormous, and also (if I might be a little immodest about Rust for a moment) significant for the software industry as a whole. This is the important thing to focus our attention on.&lt;/p&gt;
</description>
<pubDate>Mon, 06 May 2019 15:07:04 +0000</pubDate>
<dc:creator>gaogao</dc:creator>
<og:title>A final proposal for await syntax</og:title>
<og:description>This is an announcement regarding the resolution of the syntax for the await operator in Rust. This is one of the last major unresolved questions blocking the stabilization of the async/await feature, a feature which will enable many more people to write non-blocking network services in Rust. This post contains information about the timeline for the final decision, a proposal from the language team which is the most likely syntax to be adopted, and the justification for this decision.</og:description>
<og:url>https://boats.gitlab.io/blog/post/await-decision/</og:url>
<og:type>website</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://boats.gitlab.io/blog/post/await-decision/</dc:identifier>
</item>
<item>
<title>Rolling your own servers with Kubernetes</title>
<link>https://gravitational.com/blog/aws_vs_colocation/</link>
<guid isPermaLink="true" >https://gravitational.com/blog/aws_vs_colocation/</guid>
<description>&lt;time datetime=&quot;May 5, 2019&quot; class=&quot;blog-author&quot;&gt;May 5, 2019 by Ev Kontsevoy&lt;/time&gt;&lt;h3 id=&quot;why-leave-aws&quot;&gt;Why leave AWS?&lt;/h3&gt;
&lt;p&gt;In this three-part blog series, we’ll try to address some of the fears and uncertainties faced by organizations who had successfully started their projects on public clouds, like AWS, but for one reason or another found themselves needing to replicate their cloud environment from scratch, starting with an empty rack in their own enterprise server room or a colocation facility.&lt;/p&gt;
&lt;p&gt;If you are reading this, perhaps you already know &lt;em&gt;why it makes sense in your case&lt;/em&gt;. If you are just curious, as makers of open source tools for &lt;a href=&quot;https://gravitational.com/gravity&quot;&gt;Kubernetes application packaging&lt;/a&gt; and &lt;a href=&quot;https://gravitational.com/teleport&quot;&gt;server access management&lt;/a&gt;, here is what we have heard from users of our software:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;It can be dramatically cheaper, especially for predictable workloads.&lt;/li&gt;
&lt;li&gt;Regulations: sometimes you have to run software modified for countries it runs in (or even in certain states!)&lt;/li&gt;
&lt;li&gt;Need to use specialized hardware.&lt;/li&gt;
&lt;li&gt;Latency: sometimes your software &lt;strong&gt;must&lt;/strong&gt; be deployed 5ms away from the data it’s processing and there isn’t an AWS region nearby.&lt;/li&gt;
&lt;li&gt;The data center belongs to your customer and they want your software to run there.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;There are myriad other reasons. The colocation market is still growing, after all, so let’s get the question “why” out of the way and focus on “how”.&lt;/p&gt;
&lt;p&gt;Rolling your own servers can be a daunting proposition, especially for younger technologists who are used to bootstrapping formidable server fleets with an API key, not with their bare hands covered in a mixture of blood, sweat and a server rail grease. However, it can be done with sizable cost, performance and compliance benefits – and Kubernetes (aka, K8s) can be your secret weapon!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gravitational.com/blog/images/2019/racks.jpg&quot; alt=&quot;server racks&quot; title=&quot;server room&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&quot;... Sometimes I feel nobody gives me no warning&lt;br/&gt;Find my head is always up in the clouds in a dream world&lt;br/&gt;It's not easy, living on my own...&quot;&lt;br/&gt;- &lt;strong&gt;Freddie Mercury&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;why-kubernetes&quot;&gt;Why Kubernetes?&lt;/h3&gt;
&lt;p&gt;We can all agree that our industry is prone to hype and sometimes we feel the pressure of adopting a new technology simply because our peers and competitors do. Before diving into challenges of adopting Kubernetes, let’s remind ourselves of why someone should (or should not) bother.&lt;/p&gt;
&lt;p&gt;The primary benefit of K8s is to increase infrastructure utilization through the efficient sharing of computing resources across multiple processes. As your organization adopts more workloads of varying performance envelopes, the art of bin packing hundreds of &lt;a href=&quot;https://gravitational.com/blog/microservices-containers-kubernetes/&quot;&gt;micro-services&lt;/a&gt; across available computing resources becomes more and more critical. Kubernetes is the master of dynamically allocating computing resources to fill the demand. This allows users to define infrastructure requirements for their applications using code, and shortens the time to production significantly relative to trying to manually “bin pack” your micro-services into a static hardware cabinet.&lt;/p&gt;
&lt;p&gt;In other words, in addition to dynamic resource scheduling, &lt;strong&gt;Kubernetes allows users to realize many of the cloud benefits while running on bare metal servers&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&quot;should-you-roll-your-own-servers&quot;&gt;Should you roll your own servers?&lt;/h3&gt;
&lt;p&gt;If you are not certain, the answer is most likely “no”. The staggering growth of AWS happened for a reason. Software-defined and globally distributed infrastructure which allows users to pay only for the resources they are using on a per-second basis is incredible. (If you are a typical SaaS provider that is entertaining the idea of managing your own servers, &lt;a href=&quot;https://about.gitlab.com/2017/03/02/why-we-are-not-leaving-the-cloud/&quot;&gt;Gitlab’s exploration into going off the cloud&lt;/a&gt; is a good overview of how they came to the determination it was not the right choice for them.)&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This post is for those who either don’t have the luxury of using a cloud provider or who have reached the conclusion that the benefits of colo outweigh the costs of using a cloud provider.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The number one piece of advice is to hire someone who has done this before. If you do that you probably (hopefully) don’t need this blog post. However, this post may help you hire that person or may help you evaluate what’s involved.&lt;/p&gt;
&lt;p&gt;As mentioned above, a reason for expanding beyond public clouds includes wanting a better cost/performance ratio that can be realized by having complete control over the infrastructure tuning.&lt;/p&gt;
&lt;p&gt;One example of such tuning can be the need to run a large amount of mostly idle instances of a cloud application, perhaps as POCs for customers or sales demos. &lt;strong&gt;A physical server with 20 real cores can run a hundred VMs with their own virtual vCPUs&lt;/strong&gt; (and you can over-provision RAM too!)&lt;/p&gt;
&lt;p&gt;This is a blog post, not a book, so let’s keep it focused and make a few assumptions about our mini-datacenter to limit the scope:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;A single server rack with up to 42 physical servers.&lt;/li&gt;
&lt;li&gt;Located in a single data center.&lt;/li&gt;
&lt;li&gt;We’ll use a simple network without hardware redundancy (more about this later).&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;colocation-and-hardware&quot;&gt;Colocation and Hardware&lt;/h3&gt;
&lt;p&gt;If you are rolling your own hardware, you need a place to put your machines. You generally don’t want them next to you unless you have really good noise-cancelling headphones and/or you need a strong heater. Companies who rent “pieces of data centers” are called colocation facilities and the “pieces” they rent are called server cabinets (or racks). Cabinets usually have individual locks, but if additional physical security is required, you may request a “cage” i.e. a separate room with its own lock which will host all of your server cabinets.&lt;/p&gt;
&lt;p&gt;There are several form factors for server cabinets to be aware of. It is easier to get started with a standard &lt;a href=&quot;https://en.wikipedia.org/wiki/19-inch_rack&quot;&gt;19-inch cabinet&lt;/a&gt; and your local colo facility will likely have that to offer. If you are going to become a datacenter nerd, you will eventually discover the &lt;a href=&quot;https://www.opencompute.org/&quot;&gt;OpenCompute project&lt;/a&gt; (OCP), which have different dimensions. That’s a sexy subject on its own and it probably deserves a separate blog post.&lt;/p&gt;
&lt;p&gt;A rack is divided into logical units of vertical space called a “U”. Most data center racks have a height of 42Us. This means they can hold up to 42 of 1U servers. However, you’ll probably need some Us for the network gear as well.&lt;/p&gt;
&lt;p&gt;There are many factors to consider when picking server hardware. Due to the recent price drops for flash memory and the resurgence of AMD as a viable competitor to Intel, we now have access to incredible performance concentrated in a small amount of space. Here’s an example of a system you can have:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;2 CPUs of up to 32 cores each.&lt;/li&gt;
&lt;li&gt;Up to 2TB of error-correcting ECC RAM running at 2666Mhz.&lt;/li&gt;
&lt;li&gt;4+ NVMe SSDs and 8 or more SATA SSDs.&lt;/li&gt;
&lt;li&gt;At least 2 10G network cards.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Even for our limited deployment, we can easily provision over a thousand physical CPU cores and 40+ terabytes of RAM in a single cabinet! Efficiently managing this amount of processing power is impossible by hand. That is where private cloud software, or Kubernetes in our case, comes in handy.&lt;/p&gt;
&lt;p&gt;The hardware above is quite vanilla. But as we mentioned above, some companies use colocation to take advantage of specialized hardware such as FPGAs, GPUs or even consumer-grade CPUs because they offer much higher single thread performance, often at the expense of not having ECC memory support or limited I/O throughput.&lt;/p&gt;
&lt;h3 id=&quot;redundancy&quot;&gt;Redundancy&lt;/h3&gt;
&lt;p&gt;An important topic probably worth touching on is designing for failure. Which things need redundancy? Is that achieved in hardware (HW) or in software (SW)? The trend is generally to move away from achieving HA via HW and instead using SW. K8s will move containers around if a server fails, so servers don’t need HW redundancy (e.g. HA power or HA network interface controllers).&lt;/p&gt;
&lt;p&gt;Although, you need to leave sufficient cluster capacity. Even if each server doesn’t need HA power, you may want to straddle servers in the cluster and put &lt;sup&gt;1&lt;/sup&gt;⁄&lt;sub&gt;2&lt;/sub&gt; on circuit A and &lt;sup&gt;1&lt;/sup&gt;⁄&lt;sub&gt;2&lt;/sub&gt; on circuit B, provided those have upstream power failure isolation from the colo provider (this is somewhat of a poor man’s availability zone).&lt;/p&gt;
&lt;p&gt;To limit the scope of this article, let’s assume that we do no need separate availability zones in your setup, but it’s worth mentioning that &lt;strong&gt;the level of desired redundancy is an huge factor in the cost!&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;now-let-s-talk-about-money&quot;&gt;Now, let’s talk about money.&lt;/h3&gt;
&lt;p&gt;When you call a colocation company for a price quote, the most common first question they’ll ask will be: “how much power do you need?” The colo industry is basically reselling electricity at a premium. Your answer needs to be in amps (A), where:&lt;/p&gt;
&lt;center&gt;&lt;strong&gt;A = power (W) / voltage (V)&lt;/strong&gt;&lt;/center&gt;
&lt;pre&gt;

&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;i.e. a single server consuming 300w will need 2.5 amps at 120 volts. The power is usually sold on a per-cabinet basis, i.e. if you bought a 15amp cabinet, it means you can only fit six servers into one. Power is all they care about and it is not uncommon to receive a fixed-price quote for pre-provisioned electricity regardless of how much bandwidth you’d consume. &lt;strong&gt;A “starter pack” 15amp cabinet with a gigabit connection can be rented for as little as $400 per month.&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The prices will vary, but the number one question you probably have is: “is it cheaper than AWS?” The only answer I am comfortable saying is “it depends.” If you already have the skills to manage the infrastructure and your servers will be well-utilized most of the time, then the DIY route will be cheaper. But if your workloads are highly variable, you may find yourself massively over-provisioning and paying for resources that are idle most of the time. Another major expense of DIY is having to hire a team of SREs to keep your databases and other infrastructure software running smoothly.&lt;/p&gt;
&lt;p&gt;Before concluding that &lt;strong&gt;colocation is vastly cheaper&lt;/strong&gt;, please bear in mind that AWS also offers unique billing models not available in DIY deployments, namely spot instances and reserved instances. Spot instances allow you to run workloads that can tolerate interruption (e.g. non-time sensitive batch processing jobs) at a significant discount (50-80%). AWS lets you bid a lower price for EC2 instances and when AWS demand necessitates more capacity, they reclaim your spot instances with a few minutes notice. Reserved instances are meant to mimic purchasing your own physical servers which typically have a 3 year life / amortization. You make a commitment to run a particular EC2 instance for 1 or 3 years in exchange for 30-70% discount. Convertible reserved instances are even more flexible and let you exchange your commitments over time as you EC2 instance needs change. Just remember that managing reserved instances can be very difficult and you can actually end up paying more than on-demand rates if you aren’t careful.&lt;/p&gt;
&lt;p&gt;Before leaving AWS strictly because of cost-related concerns, we recommend checking out vendors who do &lt;a href=&quot;https://www.prosperops.com/how-it-works/&quot;&gt;automated reserved instance management&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;next&quot;&gt;Next…&lt;/h3&gt;
&lt;p&gt;So far, we have covered:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Yes, people still (in 2019!) build their own environments in colocation (and even leave public clouds like AWS behind). Plenty of our customers do.&lt;/li&gt;
&lt;li&gt;Kubernetes is a reasonable and much more lightweight alternative to virtualization in order to build “cloudy” environments on bare metal servers.&lt;/li&gt;
&lt;li&gt;The costs can be much lower… or much higher!&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;In the next chapter, we’ll cover building a bare metal network to run Kubernetes, among other things.&lt;/p&gt;
&lt;p&gt;Stay tuned!&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;em&gt;Thanks to Aaron Sullivan and Erik Carlin for reading the draft of this post and providing valuable suggestions&lt;/em&gt;.&lt;/p&gt;
&lt;a class=&quot;tag&quot; href=&quot;https://gravitational.com/tags/kubernetes/&quot;&gt;kubernetes&lt;/a&gt;

&lt;div class=&quot;blog-cta blog-article&quot; readability=&quot;34&quot;&gt;
&lt;h3&gt;Want to stay informed?&lt;/h3&gt;
&lt;p&gt;Subscribe to our weekly newsletter for the latest articles, industry changes, and products updates.&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;blog-follow-cta&quot;&gt;
&lt;h3&gt;Connect with US&lt;/h3&gt;

&lt;/div&gt;
</description>
<pubDate>Mon, 06 May 2019 15:01:24 +0000</pubDate>
<dc:creator>old-gregg</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://gravitational.com/blog/aws_vs_colocation/</dc:identifier>
</item>
<item>
<title>Go-perfbook: best practices for writing high-performance Go code</title>
<link>https://github.com/dgryski/go-perfbook</link>
<guid isPermaLink="true" >https://github.com/dgryski/go-perfbook</guid>
<description>&lt;div class=&quot;Box-body&quot;&gt;
&lt;article class=&quot;markdown-body entry-content p-5&quot; itemprop=&quot;text&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.buymeacoffee.com/dgryski&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/031fc5a134cdca5ae3460822aba371e63f794233/68747470733a2f2f7777772e6275796d6561636f666665652e636f6d2f6173736574732f696d672f637573746f6d5f696d616765732f6f72616e67655f696d672e706e67&quot; alt=&quot;Buy Me A Coffee&quot; data-canonical-src=&quot;https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This document outlines best practices for writing high-performance Go code.&lt;/p&gt;
&lt;p&gt;The first sections cover writing optimized code in any language. The later sections cover Go-specific techniques.&lt;/p&gt;
&lt;h3&gt;Multiple Language Versions&lt;/h3&gt;
&lt;h3&gt;Table of Contents&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/dgryski/go-perfbook/blob/master/performance.md#writing-and-optimizing-go-code&quot;&gt;Writing and Optimizing Go code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dgryski/go-perfbook/blob/master/performance.md#how-to-optimize&quot;&gt;How to Optimize&lt;/a&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/dgryski/go-perfbook/blob/master/performance.md#optimization-workflow&quot;&gt;Optimization Workflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dgryski/go-perfbook/blob/master/performance.md#concrete-optimization-tips&quot;&gt;Concrete Optimization Tips&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dgryski/go-perfbook/blob/master/performance.md#data-changes&quot;&gt;Data Changes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dgryski/go-perfbook/blob/master/performance.md#algorithmic-changes&quot;&gt;Algorithmic Changes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dgryski/go-perfbook/blob/master/performance.md#benchmark-inputs&quot;&gt;Benchmark Inputs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dgryski/go-perfbook/blob/master/performance.md#program-tuning&quot;&gt;Program Tuning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dgryski/go-perfbook/blob/master/performance.md#optimization-workflow-summary&quot;&gt;Optimization Workflow Summary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dgryski/go-perfbook/blob/master/performance.md#garbage-collection&quot;&gt;Garbage Collection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dgryski/go-perfbook/blob/master/performance.md#runtime-and-compiler&quot;&gt;Runtime and Compiler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dgryski/go-perfbook/blob/master/performance.md#unsafe&quot;&gt;Unsafe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dgryski/go-perfbook/blob/master/performance.md#common-gotchas-with-the-standard-library&quot;&gt;Common gotchas with the standard library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dgryski/go-perfbook/blob/master/performance.md#alternate-implementations&quot;&gt;Alternate Implementations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dgryski/go-perfbook/blob/master/performance.md#cgo&quot;&gt;CGO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dgryski/go-perfbook/blob/master/performance.md#advanced-techniques&quot;&gt;Advanced Techniques&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dgryski/go-perfbook/blob/master/performance.md#assembly&quot;&gt;Assembly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dgryski/go-perfbook/blob/master/performance.md#optimizing-an-entire-service&quot;&gt;Optimizing an Entire Service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dgryski/go-perfbook/blob/master/performance.md#tooling&quot;&gt;Tooling&lt;/a&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/dgryski/go-perfbook/blob/master/performance.md#introductory-profiling&quot;&gt;Profiling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dgryski/go-perfbook/blob/master/performance.md#tracer&quot;&gt;Tracer&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Appendix
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/dgryski/go-perfbook/blob/master/performance.md#appendix-implementing-research-papers&quot;&gt;Implementing Research Papers&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h3&gt;Contributing&lt;/h3&gt;
&lt;p&gt;This is a work-in-progress book in Go performance.&lt;/p&gt;
&lt;p&gt;There are different ways to contribute:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;add to or summarizes the resources in TODO&lt;/li&gt;
&lt;li&gt;add bullet points or new topics to be covered&lt;/li&gt;
&lt;li&gt;write prose and flesh out the sections in the book&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Eventually sample programs to optimize and exercises will be needed (maybe).&lt;/p&gt;
&lt;p&gt;Coordination will be done in the #performance channel on the Gophers slack.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;
</description>
<pubDate>Mon, 06 May 2019 13:13:00 +0000</pubDate>
<dc:creator>ingve</dc:creator>
<og:image>https://avatars0.githubusercontent.com/u/970862?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>dgryski/go-perfbook</og:title>
<og:url>https://github.com/dgryski/go-perfbook</og:url>
<og:description>Thoughts on Go performance optimization. Contribute to dgryski/go-perfbook development by creating an account on GitHub.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/dgryski/go-perfbook</dc:identifier>
</item>
<item>
<title>Up to one million species are on the verge of extinction, U.N. panel says</title>
<link>https://www.washingtonpost.com/climate-environment/2019/05/06/one-million-species-face-extinction-un-panel-says-humans-will-suffer-result/</link>
<guid isPermaLink="true" >https://www.washingtonpost.com/climate-environment/2019/05/06/one-million-species-face-extinction-un-panel-says-humans-will-suffer-result/</guid>
<description>&lt;div data-elm-loc=&quot;0&quot; class=&quot;inline-content inline-video&quot;&gt;

&lt;/div&gt;&lt;div class=&quot;author-sig-line-wrapper&quot;&gt;
&lt;div class=&quot;author-sig-line&quot;&gt;
&lt;div class=&quot;author-byline&quot;&gt;
&lt;div class=&quot;author-wrapper&quot; data-authorname=&quot;Darryl Fears&quot;&gt;

&lt;div class=&quot;author-hover-card&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;author-headshot&quot;&gt;&lt;a href=&quot;https://www.washingtonpost.com/people/darryl-fears/&quot;&gt;&lt;img class=&quot;unprocessed _1-to-1 placeholder&quot; src=&quot;https://www.washingtonpost.com/resizer/yAFxThroW-CI5t-yu8Q6FsF7kHI=/1x1/www.washingtonpost.com/pb/resources/img/spacer.gif&quot; data-hi-res-src=&quot;https://www.washingtonpost.com/resizer/2zOLUILCi24ZjAWUcw9mACKuHKM=/90x90/s3.amazonaws.com/arc-authors/washpost/547ec2aa-3493-4544-904e-90ac644fd47d.png&quot; data-low-res-src=&quot;https://www.washingtonpost.com/resizer/Y9IhppOT88Ng-DvxrU7EtZD_9n0=/29x29/s3.amazonaws.com/arc-authors/washpost/547ec2aa-3493-4544-904e-90ac644fd47d.png&quot; data-raw-src=&quot;https://s3.amazonaws.com/arc-authors/washpost/547ec2aa-3493-4544-904e-90ac644fd47d.png&quot; data-threshold=&quot;29&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;a class=&quot;author-name&quot; href=&quot;https://www.washingtonpost.com/people/darryl-fears/&quot;&gt;Darryl Fears&lt;/a&gt;
&lt;div class=&quot;author-bio&quot;&gt;Reporter focusing on the Chesapeake Bay and issues affecting wildlife&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;span class=&quot;author-timestamp&quot; itemprop=&quot;datePublished&quot; content=&quot;2019-05-06T09:45-500&quot;&gt;May 6 at 9:45 AM&lt;/span&gt;&lt;/div&gt;
&lt;p data-elm-loc=&quot;1&quot;&gt;One million plant and animal species are on the verge of extinction, with alarming implications for human survival, according to a United Nations report released Monday.&lt;/p&gt;
&lt;p data-elm-loc=&quot;2&quot;&gt;The landmark report by &lt;a href=&quot;https://www.ipbes.net/global-assessment-experts&quot; target=&quot;_blank&quot;&gt;seven lead co-authors&lt;/a&gt; from universities across the world goes further than previous studies by directly linking the loss of species to human activity. It also shows how those losses are undermining food and water security, as well as human health.&lt;/p&gt;
&lt;p data-elm-loc=&quot;3&quot;&gt;More plants and animals are threatened with extinction now than any other period in human history, it concludes. Nature’s current rate of decline is unparalleled, and the accelerating rate of extinctions “means grave impacts on people around the world are now &lt;a href=&quot;http://likely.it&quot; target=&quot;_blank&quot;&gt;likely,&quot;&lt;/a&gt; it says.&lt;/p&gt;
&lt;p data-elm-loc=&quot;4&quot;&gt;In a prepared statement, Robert Watson, a British chemist who served as the panel’s chairman, said the decline in biodiversity is eroding “the foundations of our economies, livelihoods, food security, health and quality of life worldwide.”&lt;/p&gt;
&lt;p data-elm-loc=&quot;5&quot;&gt;Nearly 150 authors from 50 nations worked for three years to compile the report by the Intergovernmental Science-Policy Platform on Biodiversity and Ecosystem Services — a panel with 132 &lt;a href=&quot;https://www.ipbes.net/members&quot; target=&quot;_blank&quot;&gt;member nations&lt;/a&gt;, including the United States. Representatives of each member nation signed off on the findings.&lt;/p&gt;
&lt;p data-elm-loc=&quot;6&quot; class=&quot;interstitial-link&quot;&gt;&lt;em&gt;[&lt;a href=&quot;https://www.washingtonpost.com/context/ipbes-global-report-species-extinction-rate-is-accelerating/f724e478-da85-4e89-83f9-f663c496f08c/?utm_term=.1ad6accd84ec&quot;&gt;Read the U.N. report: Species extinction is accelerating&lt;/a&gt;]&lt;/em&gt;&lt;/p&gt;
&lt;div data-elm-loc=&quot;7&quot; class=&quot;inline-content inline-photo inline-photo-normal&quot;&gt; &lt;img class=&quot;unprocessed _3-to-2 placeholder&quot; src=&quot;https://www.washingtonpost.com/resizer/TXJKur-cQ3m4AF9lqk_kkjfemkk=/3x2/www.washingtonpost.com/pb/resources/img/spacer.gif&quot; data-hi-res-src=&quot;https://www.washingtonpost.com/resizer/Cslkz5UQEdoClXD5Xkhg_gqV3vc=/1484x0/arc-anglerfish-washpost-prod-washpost.s3.amazonaws.com/public/TNYE5KTGBEI6TJUYFKHYBDE47M.jpg&quot; data-low-res-src=&quot;https://www.washingtonpost.com/resizer/SBSo78PaEmcgEMHz45y3vz_3e1I=/480x0/arc-anglerfish-washpost-prod-washpost.s3.amazonaws.com/public/TNYE5KTGBEI6TJUYFKHYBDE47M.jpg&quot; data-raw-src=&quot;https://arc-anglerfish-washpost-prod-washpost.s3.amazonaws.com/public/TNYE5KTGBEI6TJUYFKHYBDE47M.jpg&quot; data-threshold=&quot;480&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;pb-caption&quot;&gt;Moe Flannery of the California Academy of Sciences inspected a dead gray whale in Tiburon, Calif., last month, one of seven whales that have washed up on the shores of the San Francisco Bay and along the coast in recent weeks. (Justin Sullivan/Getty Images)&lt;/span&gt;&lt;/div&gt;
&lt;p data-elm-loc=&quot;8&quot;&gt;The authors urge the world’s governments to address the global decline of biodiversity together with human-caused climate change. The warming climate is a major driver that is exacerbating the effects of overfishing, widespread pesticide use, pollution and urban expansion into the natural world.&lt;/p&gt;
&lt;p data-elm-loc=&quot;9&quot;&gt;For example, ocean ecosystems are degrading as temperatures rise toward 2 degrees Celsius — 3.6 degrees Fahrenheit — above preindustrial levels, the study warns. Coral reefs lost to warming and acidifying oceans could cause a collapse in commercial and indigenous fisheries, affecting billions of coastal residents who rely on seafood for protein.&lt;/p&gt;
&lt;p data-elm-loc=&quot;10&quot;&gt;“Once you get to basically 2 degrees Celsius, the models show that only 1 percent can survive,” Watson said. “Let’s be quite candid. We’re not on the pathway to 2 degrees Celsius. We’re on a pathway to 3, 3 ½ degrees Celsius. The coral system is truly in trouble.”&lt;/p&gt;
&lt;p data-elm-loc=&quot;11&quot;&gt;The report emphasizes the effects humans have on animals that are key to their own survival. Pesticides sprayed by farmers kill pollinators such as bees and other insects will likely to have a devastating effect on crops. Homeowners contribute to the problem by purchasing “bug zappers” that target mosquitoes but also eliminate key pollinators such as butterflies and moths, as well as common flies that some animals rely on for food.&lt;/p&gt;
&lt;p data-elm-loc=&quot;12&quot;&gt;Global trade has introduced invasive species to countries with devastating effects, such as crop-destroying stink bugs and tree-killing emerald ash borer in the United States. Travelers exploring forests in other countries have returned home with microbes that cause diseases lethal to animals, such as the &lt;a href=&quot;https://www.washingtonpost.com/news/energy-environment/wp/2017/03/23/a-merciless-bat-killing-fungus-is-on-the-move-again-now-its-in-texas/?utm_term=.0f6d2824bad7&quot; target=&quot;_blank&quot;&gt;white nose fungus&lt;/a&gt; that is killing millions of bats whose immune systems have not adapted to fight it.&lt;/p&gt;
&lt;div data-elm-loc=&quot;13&quot; class=&quot;inline-content inline-video&quot;&gt;

&lt;/div&gt;
&lt;p data-elm-loc=&quot;14&quot;&gt;“The most important thing isn’t necessarily that we’re losing . . . 1 million species — although that’s important, don’t misunderstand me,” Watson said during a teleconference Sunday. “The bigger issue is the way it will affect human well-being, as we’ve said many times — food, water, energy, human health.&lt;/p&gt;
&lt;p data-elm-loc=&quot;15&quot;&gt;“We care about nature, but we care about human well-being,” Watson said. “We need to link it to human well-being; that’s the crucial thing. Otherwise we’re going to look like a bunch of tree-huggers.”&lt;/p&gt;
&lt;p data-elm-loc=&quot;16&quot;&gt;The report has a positive spin, saying that “it is not too late to make a difference.” But that difference requires more than 100 developing and nondeveloped nations to work together to bring about change.&lt;/p&gt;
&lt;p data-elm-loc=&quot;17&quot;&gt;Nations that signed off on the study’s findings acknowledged that opposition from rich people invested in the status quo is expected.&lt;/p&gt;
&lt;p data-elm-loc=&quot;18&quot;&gt;“Since 1992, we’ve been telling the world we have a problem,” Watson said. “Now what’s different? It’s much worse today than it was in 1992. We’ve wasted all of the time . . . the last 25 years.” However, he said, “we have a much better understanding of the links between climate change, biodiversity, and food security and water security.”&lt;/p&gt;
&lt;p data-elm-loc=&quot;19&quot;&gt;The report’s authors noted that the world’s population has tripled since 1950 and that urban areas worldwide have doubled since 1992. By mid-century, the world’s population is expected to approach 9 billion.&lt;/p&gt;
&lt;p data-elm-loc=&quot;20&quot;&gt;The resulting pressure on natural resources has been enormous. Seventy-five percent of the land environment and well more than half the marine environment have been altered by humans.&lt;/p&gt;
&lt;p data-elm-loc=&quot;21&quot;&gt;On land, “more than a third of the world’s land surface and nearly 75 percent of freshwater resources are now devoted to crop or livestock production,” the report says. Farms that cut into forests that trap carbon have expanded exponentially, increasing crop production by 300 percent since 1970.&lt;/p&gt;
&lt;p data-elm-loc=&quot;22&quot;&gt;At sea, a third of marine fish stocks were being harvested at unsustainable levels in 2015. “Sixty percent were maximally sustainably fished,” meaning they were being pushed to the verge of collapse.&lt;/p&gt;
&lt;div data-elm-loc=&quot;23&quot; class=&quot;inline-content inline-photo inline-photo-normal&quot;&gt; &lt;img class=&quot;unprocessed _3-to-2 placeholder&quot; src=&quot;https://www.washingtonpost.com/resizer/TXJKur-cQ3m4AF9lqk_kkjfemkk=/3x2/www.washingtonpost.com/pb/resources/img/spacer.gif&quot; data-hi-res-src=&quot;https://www.washingtonpost.com/resizer/AL54Gl_Yrzr4jFgo9WPruV4ajE4=/1484x0/arc-anglerfish-washpost-prod-washpost.s3.amazonaws.com/public/FHLFA5CAKEI6TBNNO6PPAX6Z3A.jpg&quot; data-low-res-src=&quot;https://www.washingtonpost.com/resizer/RztV3575MvW6RlrAWysHMulc9-c=/480x0/arc-anglerfish-washpost-prod-washpost.s3.amazonaws.com/public/FHLFA5CAKEI6TBNNO6PPAX6Z3A.jpg&quot; data-raw-src=&quot;https://arc-anglerfish-washpost-prod-washpost.s3.amazonaws.com/public/FHLFA5CAKEI6TBNNO6PPAX6Z3A.jpg&quot; data-threshold=&quot;480&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;pb-caption&quot;&gt;Onlookers stand before paper mache replicas of the critically endangered porpoise known as the vaquita during an event in front of the Mexico’s National Palace in Mexico City. (Rebecca Blackwell/AP)&lt;/span&gt;&lt;/div&gt;
&lt;p data-elm-loc=&quot;24&quot;&gt;Humans extract 60 billion tons from nature each year to satisfy demands worldwide for crops, fish, minerals and other goods, the authors said. They concluded that the harvest is unsustainable.&lt;/p&gt;
&lt;p data-elm-loc=&quot;25&quot;&gt;The U.N. report followed a study in January that predicted a bug massacre — 40 percent of all known species face extinction, including beetles, flies, moths, butterflies and bees, the result of habitat loss and pesticides, according to a recent study.&lt;/p&gt;
&lt;p data-elm-loc=&quot;26&quot;&gt;The United States is hardly immune to the loss of biodiversity. In recent weeks, the federal government moved to protect a declining group of Bryde’s whales in the Gulf of Mexico with an endangered listing because fewer than 100, and possibly as few as 45, are estimated to exist.&lt;/p&gt;
&lt;p data-elm-loc=&quot;27&quot;&gt;In January, wild reindeer were &lt;a href=&quot;https://www.washingtonpost.com/science/2019/03/22/americas-reindeer-have-quietly-gone-extinct-lower/?utm_term=.ad0d4fb4d1bc&quot; target=&quot;_blank&quot;&gt;declared extinct&lt;/a&gt; in the Lower 48 states. Wildlife managers in British Columbia caught the last female in a herd of caribou that once migrated between the Pacific Northwest and Canada and stuck her in a pen because “that animal was not going to survive,” an official said.&lt;/p&gt;
&lt;p data-elm-loc=&quot;28&quot;&gt;Meanwhile, a doomsday count on the tiny &lt;a href=&quot;https://www.washingtonpost.com/news/animalia/wp/2016/09/30/the-world-is-making-a-last-push-to-save-its-cutest-porpoise-from-extinction-it-probably-wont-work/?utm_term=.430ddbf35671&quot; target=&quot;_blank&quot;&gt;vaquita porpoise&lt;/a&gt; in the Gulf of California is nearing zero. As Mexican fisherman continue to poach shrimp and fish consumed in the United States, vaquitas occasionally show up dead in their fishing nets.&lt;/p&gt;
&lt;p data-elm-loc=&quot;29&quot;&gt;In Antarctica, the second-largest group of emperor penguins, the tallest of all penguins, has not produced offspring for three years, assuring a catastrophic drop in their numbers.&lt;/p&gt;
&lt;p data-elm-loc=&quot;30&quot;&gt;The U.N. report “means that nature is collapsing around us, and it’s a real wake-up call to humanity,” said Andrew Wetzler, managing director of the nature program for the Natural Resources Defense Council, a conservation group.&lt;/p&gt;
&lt;p data-elm-loc=&quot;31&quot;&gt;Oceana senior adviser Philip Chou called the report a beacon for more action to address a crisis.&lt;/p&gt;
&lt;p data-elm-loc=&quot;32&quot;&gt;“We are seeing alarming increases in the deaths of fish, marine mammals and turtles ingesting plastics,” Chou said. “These plastics break apart in the ocean into microscopic particles [that are] consumed by fish, fish we now eat.”&lt;/p&gt;
</description>
<pubDate>Mon, 06 May 2019 10:45:50 +0000</pubDate>
<dc:creator>uptown</dc:creator>
<og:type>article</og:type>
<og:url>https://www.washingtonpost.com/climate-environment/2019/05/06/one-million-species-face-extinction-un-panel-says-humans-will-suffer-result/</og:url>
<og:image>https://www.washingtonpost.com/resizer/Cslkz5UQEdoClXD5Xkhg_gqV3vc=/1484x0/arc-anglerfish-washpost-prod-washpost.s3.amazonaws.com/public/TNYE5KTGBEI6TJUYFKHYBDE47M.jpg</og:image>
<og:title>One million species face extinction, U.N. report says. And humans will suffer as a result.</og:title>
<og:description>Reversing the trend will require nations to jointly confront the loss of biodiversity, along with climate change, the report says.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.washingtonpost.com/climate-environment/2019/05/06/one-million-species-face-extinction-un-panel-says-humans-will-suffer-result/?noredirect=on</dc:identifier>
</item>
<item>
<title>Clear is better than clever [pdf]</title>
<link>https://dave.cheney.net/paste/clear-is-better-than-clever.pdf</link>
<guid isPermaLink="true" >https://dave.cheney.net/paste/clear-is-better-than-clever.pdf</guid>
<description>&lt;a href=&quot;https://dave.cheney.net/paste/clear-is-better-than-clever.pdf&quot;&gt;Download PDF&lt;/a&gt;</description>
<pubDate>Mon, 06 May 2019 09:41:40 +0000</pubDate>
<dc:creator>ngaut</dc:creator>
<og:type>article</og:type>
<og:url>https://www.washingtonpost.com/climate-environment/2019/05/06/one-million-species-face-extinction-un-panel-says-humans-will-suffer-result/</og:url>
<og:image>https://www.washingtonpost.com/resizer/Cslkz5UQEdoClXD5Xkhg_gqV3vc=/1484x0/arc-anglerfish-washpost-prod-washpost.s3.amazonaws.com/public/TNYE5KTGBEI6TJUYFKHYBDE47M.jpg</og:image>
<og:title>One million species face extinction, U.N. report says. And humans will suffer as a result.</og:title>
<og:description>Reversing the trend will require nations to jointly confront the loss of biodiversity, along with climate change, the report says.</og:description>
<dc:language>en</dc:language>
<dc:format>application/pdf</dc:format>
<dc:identifier>https://dave.cheney.net/paste/clear-is-better-than-clever.pdf</dc:identifier>
</item>
<item>
<title>Tetris clone written in Zig running on WebGL and WebAssembly</title>
<link>https://raulgrell.github.io/tetris/</link>
<guid isPermaLink="true" >https://raulgrell.github.io/tetris/</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://raulgrell.github.io/tetris/&quot;&gt;https://raulgrell.github.io/tetris/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=19836922&quot;&gt;https://news.ycombinator.com/item?id=19836922&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 207&lt;/p&gt;
&lt;p&gt;# Comments: 68&lt;/p&gt;
</description>
<pubDate>Mon, 06 May 2019 04:42:18 +0000</pubDate>
<dc:creator>Hoppetosse</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://raulgrell.github.io/tetris/</dc:identifier>
</item>
</channel>
</rss>