<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Amazon disallows pointing out paid reviews</title>
<link>http://blog.kevmod.com/2020/12/amazon-disallows-pointing-out-paid-reviews/</link>
<guid isPermaLink="true" >http://blog.kevmod.com/2020/12/amazon-disallows-pointing-out-paid-reviews/</guid>
<description>&lt;p&gt;I recently bought a webcam from Amazon (late to the party, I know), and when it came it was fine but not amazing.&lt;/p&gt;
&lt;p&gt;When I went through the packaging I saw a little card saying &quot;send us a screenshot of your 5-star review and we'll give you a $10 Amazon gift card&quot;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://blog.kevmod.com/wp-content/uploads/2020/12/IMG_16902.jpg&quot; alt=&quot;$10 for 5-star reviews&quot; width=&quot;400&quot;/&gt;&lt;/p&gt;
&lt;p&gt;I thought that other Amazon shoppers would want to know that this was happening and that the reviews were less trustworthy, so I wrote up a review and submitted it to Amazon.&lt;/p&gt;
&lt;p&gt;Yesterday I got a notification that my review was rejected. I heard of Amazon being ham-fisted about this stuff but it was still shocking that it would happen to me:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://blog.kevmod.com/wp-content/uploads/2020/12/screenshot.png&quot; alt=&quot;Amazon review rejection&quot;/&gt;&lt;/p&gt;
&lt;p&gt;I assume they rejected this due to the first rule, &quot;Feedback on the seller ... should be provided [elsewhere]&quot;. I could understand this being a good policy in some cases, but here they're using it to justify silencing talk about reviews. I suppose we don't know whether they disallow positive comments about other reviews, but I would guess that that never happens.&lt;/p&gt;
&lt;p&gt;I remember that I used to use Amazon ratings as the main driver behind my purchases, so it's sad to see the review system become less helpful over time. It's extra sad that Amazon would rather try to hide the issue and not improve it.&lt;/p&gt;
&lt;p&gt;Update:&lt;br/&gt;My premise was that the reviews section should be helpful for making purchasing decisions. Some people (including Amazon) are saying that the reviews should be about the product, which is coherent but I would argue makes them less useful. For example I feel quite helped when a review for chocolate mentions that the chocolate arrived melted -- this is not a review about the product intrinsically, but is still very helpful for deciding whether or not to buy the item. Similarly, as a purchaser I would want to see a warning that there may be paid reviews for the product, and I was very surprised to learn that Amazon disallows such warnings.&lt;/p&gt;
&lt;p&gt;Update 2:&lt;br/&gt;I submitted feedback through the link they requested, and here's the result:&lt;/p&gt;
&lt;p&gt;https://www.amazon.com/sp?_encoding=UTF8&amp;amp;asin=B087NN41JH&amp;amp;isAmazonFulfilled=1&amp;amp;ref_=olp_merch_name_1&amp;amp;seller=AD5F1I5PAE5XB&lt;/p&gt;
&lt;p&gt;I don't think this serves either goal of educating future purchasers or changing the sellers behavior.&lt;/p&gt;
&lt;p&gt;Update 3:&lt;br/&gt;I've chatted with an Amazon rep on the issue, and to their credit they seemed to take it seriously and &quot;noted the report violation against the seller&quot;. They said to expect an update in 2-3 business days, though it's not clear what sort of update it will be.&lt;/p&gt;


</description>
<pubDate>Thu, 17 Dec 2020 19:39:17 +0000</pubDate>
<dc:creator>kmod</dc:creator>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://blog.kevmod.com/2020/12/amazon-disallows-pointing-out-paid-reviews/</dc:identifier>
</item>
<item>
<title>Sick of spending time on Auth, we built an open source &amp;#039;Stripe for Auth&amp;#039;</title>
<link>https://news.ycombinator.com/item?id=25458033</link>
<guid isPermaLink="true" >https://news.ycombinator.com/item?id=25458033</guid>
<description>We (my cofounder and I) have built several startups previously and spent an unnecessary amount of effort on auth. This led us to build an open source alternative to Auth0 and AWS Cognito, that’s called SuperTokens. We’ve spoken to 100s of developers and startups to understand the pain points with current services and we hope you find this useful!
&lt;p&gt;Why did we build this? To be able to control our user data and have it stored in our own database. Have certain customisations that other identity providers do not offer We couldn’t afford to pay It took too long to understand the documentation of alternate service providers&lt;/p&gt;&lt;p&gt;How are we any easier? We think that Auth0, Firebase etc are great services but auth is complex. There are many different use cases for different types of apps. Since services have to cater to each of these, they tend to become complex in their implementation (due to no fault of their own).&lt;/p&gt;
&lt;p&gt;SuperTokens takes a modular approach - making it possible to pick only the features you need for your use case. This means you need not worry about complications associated with other features (eg: SSO and OAuth if you don’t need it) and this in turn makes it easier to implement and manage SuperTokens.&lt;/p&gt;
&lt;p&gt;We are still early in the journey and working hard on building more functionality.&lt;/p&gt;
&lt;p&gt;Please see our website: &lt;a href=&quot;https://supertokens.io/&quot; rel=&quot;nofollow&quot;&gt;https://supertokens.io/&lt;/a&gt; Our GitHub: &lt;a href=&quot;https://github.com/supertokens/supertokens-core&quot; rel=&quot;nofollow&quot;&gt;https://github.com/supertokens/supertokens-core&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Do let us know what you think - specifically whether you would consider SuperTokens for your app. Why or why not? What can we change or offer?&lt;/p&gt;
&lt;p&gt;PS: We did a &quot;Launch HN&quot; post earlier when our product was only for securely managing session tokens (&lt;a href=&quot;https://news.ycombinator.com/item?id=24306572&quot; rel=&quot;nofollow&quot;&gt;https://news.ycombinator.com/item?id=24306572&lt;/a&gt;). We realized we need to build more of the auth stack (signup / signin, social login etc) and hence we're excited to announce that we've built basic login functionality.&lt;/p&gt;
</description>
<pubDate>Thu, 17 Dec 2020 17:48:56 +0000</pubDate>
<dc:creator>advaitruia</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://news.ycombinator.com/item?id=25458033</dc:identifier>
</item>
<item>
<title>No Cookie for You</title>
<link>https://github.blog/2020-12-17-no-cookie-for-you/</link>
<guid isPermaLink="true" >https://github.blog/2020-12-17-no-cookie-for-you/</guid>
<description>&lt;div class=&quot;post-featured mb-3 mb-md-9 pb-0 pb-md-4&quot;&gt;
&lt;div class=&quot;post-featured__image&quot;&gt;&lt;img width=&quot;2400&quot; height=&quot;1260&quot; src=&quot;https://github.blog/wp-content/uploads/2020/12/github-no-cookie.png?fit=2400%2C1260&quot; class=&quot;attachment-full size-full wp-post-image&quot; alt=&quot;&quot; loading=&quot;lazy&quot; srcset=&quot;https://github.blog/wp-content/uploads/2020/12/github-no-cookie.png?w=2400 2400w, https://github.blog/wp-content/uploads/2020/12/github-no-cookie.png?w=300 300w, https://github.blog/wp-content/uploads/2020/12/github-no-cookie.png?w=768 768w, https://github.blog/wp-content/uploads/2020/12/github-no-cookie.png?w=1024 1024w, https://github.blog/wp-content/uploads/2020/12/github-no-cookie.png?w=1536 1536w, https://github.blog/wp-content/uploads/2020/12/github-no-cookie.png?w=2048 2048w&quot; sizes=&quot;(max-width: 2400px) 100vw, 2400px&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;post__content markdown-body col-12 col-md-10 mb-2 mb-md-4&quot; readability=&quot;64.449541284404&quot;&gt;
&lt;p&gt;Good news: we removed all cookie banners from GitHub! 🎉&lt;/p&gt;
&lt;p&gt;No one likes cookie banners. But cookie banners are everywhere. So how did we pull this off?&lt;/p&gt;
&lt;p&gt;Well, EU law requires you to use cookie banners if your website contains cookies that are not required for it to work. Common examples of such cookies are those used by third-party analytics, tracking, and advertising services. These services collect information about people’s behavior across the web, store it in their databases, and can use it to serve personalized ads.&lt;/p&gt;
&lt;p&gt;At GitHub, we want to protect developer privacy, and we find cookie banners quite irritating, so we decided to look for a solution. After a brief search, we found one: just don’t use any non-essential cookies. Pretty simple, really. 🤔&lt;/p&gt;
&lt;p&gt;So, we have removed all non-essential cookies from GitHub, and visiting our website does not send any information to third-party analytics services. (And of course GitHub still does not use any cookies to display ads, or track you across other sites.)&lt;/p&gt;
&lt;p&gt;We are also committing that going forward, we will only use cookies that are required for us to serve GitHub.com. GitHub has had a long history of prioritizing developer privacy, often going above and beyond any legal requirement, including &lt;a href=&quot;https://docs.github.com/en/free-pro-team@latest/github/site-policy/github-privacy-statement#githubs-global-privacy-practices&quot;&gt;extending EU privacy protections to all users&lt;/a&gt; regardless of location. Developers should not have to sacrifice their privacy to collaborate on GitHub.&lt;/p&gt;
&lt;p&gt;That’s all. Have a nice day!&lt;/p&gt;

&lt;/div&gt;
</description>
<pubDate>Thu, 17 Dec 2020 17:01:21 +0000</pubDate>
<dc:creator>todsacerdoti</dc:creator>
<og:type>article</og:type>
<og:title>No cookie for you - The GitHub Blog</og:title>
<og:description>Good news: we removed all cookie banners from GitHub! 🎉 No one likes cookie banners. But cookie banners are everywhere. So how did we pull this off? Well, EU law requires you to use cookie</og:description>
<og:url>https://github.blog/2020-12-17-no-cookie-for-you/</og:url>
<og:image>https://github.blog/wp-content/uploads/2020/12/github-no-cookie.png?fit=2400%2C1260</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.blog/2020-12-17-no-cookie-for-you/</dc:identifier>
</item>
<item>
<title>Stripe’s payments APIs: the first ten years</title>
<link>https://stripe.com/blog/payment-api-design</link>
<guid isPermaLink="true" >https://stripe.com/blog/payment-api-design</guid>
<description>&lt;p class=&quot;BlogBodyParagraph&quot;&gt;A few years ago, Bloomberg Businessweek published a feature story on Stripe. Four words spanned the center of the cover: “seven lines of code,” suggesting that’s all it took for a business to power payments on Stripe. The assertion was bold—and became a theme and meme for us.&lt;/p&gt;&lt;p class=&quot;BlogBodyParagraph&quot;&gt;To this day, it’s not entirely clear which seven lines the article referenced. The prevailing theory is that it’s the roughly seven lines of &lt;a class=&quot; Link&quot; href=&quot;https://en.wikipedia.org/wiki/CURL&quot; data-js-controller=&quot;AnalyticsButton&quot; data-analytics-category=&quot;Links&quot; data-analytics-action=&quot;Clicked&quot; data-analytics-label=&quot;&quot;&gt;curl&lt;/a&gt; it took to create a &lt;code class=&quot;InlineCode&quot;&gt;Charge&lt;/code&gt;. In 2011, the code snippet featured on our landing page was nine lines long. But remove the optional &lt;code class=&quot;InlineCode&quot;&gt;description&lt;/code&gt; and &lt;code class=&quot;InlineCode&quot;&gt;card[cvc]&lt;/code&gt;, and there’s visually seven lines:&lt;/p&gt;
&lt;div class=&quot; Card Card--border BlogBodyImageCard&quot;&gt;&lt;img class=&quot;BlogBodyImageCard__image&quot; alt=&quot;blog-payment-api-design-screenshot&quot; src=&quot;https://images.ctfassets.net/fzn2n1nzq965/1JsPYqJYkXUxkJdad9vgyb/0b82718b4481a21006a9b7c03176f9ed/blog-payment-api-design-screenshot.jpg?w=1620&amp;amp;q=80&quot; loading=&quot;lazy&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot; CopyBody CopyBody--variantDetail CopyBody--anchored BlogBodyImage__caption&quot; readability=&quot;17.350515463918&quot;&gt;A partial screenshot of &lt;a class=&quot; Link&quot; href=&quot;https://stripe.com&quot; data-js-controller=&quot;AnalyticsButton&quot; data-analytics-category=&quot;Links&quot; data-analytics-action=&quot;Clicked&quot; data-analytics-label=&quot;Related content&quot;&gt;Stripe.com&lt;/a&gt;, circa 2011. Courtesy of &lt;a class=&quot; Link&quot; href=&quot;https://archive.org/web/&quot; data-js-controller=&quot;AnalyticsButton&quot; data-analytics-category=&quot;Links&quot; data-analytics-action=&quot;Clicked&quot; data-analytics-label=&quot;Related content&quot;&gt;the Internet Archive Wayback Machine&lt;/a&gt;.&lt;/div&gt;
&lt;p class=&quot;BlogBodyParagraph&quot;&gt;However, a search for &lt;em&gt;the&lt;/em&gt; seven lines of code ultimately misses the point: the ability to open up a terminal, run this curl snippet, then &lt;em&gt;immediately&lt;/em&gt; see a successful credit card payment &lt;em&gt;felt like&lt;/em&gt; seven lines of code. It’s unlikely that a developer believed a production-ready payments integration involved literally only seven lines of code. But taking something as complex as credit card processing and reducing the integration to only a few lines of code that, when run, immediately returns a successful &lt;code class=&quot;InlineCode&quot;&gt;Charge&lt;/code&gt; object is really quite magical.  &lt;/p&gt;
&lt;p class=&quot;BlogBodyParagraph&quot;&gt;Abstracting away the complexity of payments has driven the evolution of our APIs over the last decade. This post provides the context, inflection points, and conceptual frameworks behind our API design. It’s the extreme exception that our approach to APIs makes the cover of a business magazine. This post shares a bit more of how we’ve grown around and beyond those seven lines.&lt;/p&gt;
&lt;h2 class=&quot;BlogBodyTitle&quot;&gt;A condensed history of Stripe’s payments APIs&lt;/h2&gt;
&lt;p class=&quot;BlogBodyParagraph&quot;&gt;Successful products tend to organically expand over time, resulting in product debt. Similar to tech debt, product debt accumulates gradually, making the product harder to understand for users and change for product teams. For API products, it’s particularly tempting to accrue product debt because it’s hard to get your users to fundamentally restructure their integration; it’s much easier to get them to add a parameter or two to their existing API requests.&lt;/p&gt;
&lt;p class=&quot;BlogBodyParagraph&quot;&gt;In retrospect, we see clearly how our APIs have evolved—and which decisions were pivotal in shaping them. Here are the milestones that defined our payments APIs and led to the &lt;a class=&quot; Link&quot; href=&quot;https://stripe.com/docs/payments/payment-intents&quot; data-js-controller=&quot;AnalyticsButton&quot; data-analytics-category=&quot;Links&quot; data-analytics-action=&quot;Clicked&quot; data-analytics-label=&quot;&quot;&gt;PaymentIntents API&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class=&quot;BlogBodyTitle&quot;&gt;Supporting card payments in the US (2011-2015)&lt;/h3&gt;
&lt;p class=&quot;BlogBodyParagraph&quot;&gt;We first launched the Stripe API in the US, where credit cards were—and still are—the predominant payment method. The “seven lines of code” largely sufficed, but reality was only a &lt;em&gt;tiny&lt;/em&gt; bit more complicated. We also created &lt;a class=&quot; Link&quot; href=&quot;https://stripe.com/docs/js&quot; data-js-controller=&quot;AnalyticsButton&quot; data-analytics-category=&quot;Links&quot; data-analytics-action=&quot;Clicked&quot; data-analytics-label=&quot;&quot;&gt;Stripe.js&lt;/a&gt;, a JavaScript library to collect card payment details from the browser and securely store them with Stripe, represented as a &lt;code class=&quot;InlineCode&quot;&gt;Token&lt;/code&gt; which can later be used to create a &lt;code class=&quot;InlineCode&quot;&gt;Charge&lt;/code&gt;. This helped users avoid tedious PCI compliance requirements.&lt;/p&gt;
&lt;div class=&quot; Card Card--border BlogBodyImageCard&quot;&gt;&lt;img class=&quot;BlogBodyImageCard__image&quot; alt=&quot;payment api diagram 1&quot; src=&quot;https://images.ctfassets.net/fzn2n1nzq965/2j8SDXejxWo8NLLJUMXWTU/11dd0feb6f857bda81888520a408a87b/blog-payment-api-design-diagram-1.svg?w=1620&amp;amp;q=80&quot; loading=&quot;lazy&quot;/&gt;&lt;/div&gt;
&lt;p&gt;A &lt;code class=&quot;InlineCode&quot;&gt;Token&lt;/code&gt; is created client-side and sent to the server. A &lt;code class=&quot;InlineCode&quot;&gt;Charge&lt;/code&gt; is then created server-side using that &lt;code class=&quot;InlineCode&quot;&gt;Token&lt;/code&gt;.&lt;/p&gt;
&lt;p class=&quot;BlogBodyParagraph&quot;&gt;This payment flow follows a very common pattern in traditional web applications. The JavaScript client uses a publishable API key to create a &lt;code class=&quot;InlineCode&quot;&gt;Token&lt;/code&gt; and sends both to the server when customers submit the payment form (along with other form data about the order). The server synchronously creates a &lt;code class=&quot;InlineCode&quot;&gt;Charge&lt;/code&gt; using that &lt;code class=&quot;InlineCode&quot;&gt;Token&lt;/code&gt; and a secret API key; orders can optionally be fulfilled based on the outcome of the payment.&lt;/p&gt;
&lt;p class=&quot;BlogBodyParagraph&quot;&gt;The &lt;code class=&quot;InlineCode&quot;&gt;Charge&lt;/code&gt; and the &lt;code class=&quot;InlineCode&quot;&gt;Token&lt;/code&gt; became foundational concepts in our API.&lt;/p&gt;
&lt;h3 class=&quot;BlogBodyTitle&quot;&gt;Adding ACH and Bitcoin (2015)&lt;/h3&gt;
&lt;p class=&quot;BlogBodyParagraph&quot;&gt;When we first created &lt;code class=&quot;InlineCode&quot;&gt;Charges&lt;/code&gt; and &lt;code class=&quot;InlineCode&quot;&gt;Tokens&lt;/code&gt;, they only supported credit card payments. As we expanded to more countries and types of users, we needed to add more payment methods to the API. In 2015, we added:&lt;/p&gt;
&lt;ul class=&quot;BlogBodyList&quot;&gt;&lt;li class=&quot;BlogBodyList__item&quot;&gt;&lt;strong&gt;ACH debit&lt;/strong&gt;, a common payment method in the US since the 1970s. ACH is used when moving money between US bank accounts, and supports both crediting and debiting bank accounts.&lt;/li&gt;
&lt;li class=&quot;BlogBodyList__item&quot;&gt;&lt;strong&gt;Bitcoin&lt;/strong&gt;, which was just gaining mindshare in the early 2010s. An increasing number of businesses were experimenting with accepting Bitcoin as a payment method.&lt;/li&gt;
&lt;/ul&gt;&lt;p class=&quot;BlogBodyParagraph&quot;&gt;We describe payments as “finalized” when a user has sufficient confidence the funds are guaranteed. (Of course, even finalized payments can be reversed later due to fraud or subsequent refunds.) In most cases, upon finalization, users release shipment of goods. While payments processed on card networks are initiated by the merchant and can be immediately finalized, these two payment methods are quite different from cards. Payments processed on the ACH network are finalized &lt;em&gt;days&lt;/em&gt; later. With Bitcoin, customers (rather than the merchant) determine &lt;em&gt;when&lt;/em&gt; a Bitcoin transaction is created. Like ACH payments, Bitcoin payments are also not finalized immediately. While the merchant will know that the customer has created the Bitcoin transaction once it is picked up by a block, it still requires 6 blocks—or about an hour—to finalize the transaction.&lt;/p&gt;
&lt;section class=&quot;BlogBodyRow&quot; readability=&quot;29&quot;&gt;&lt;div class=&quot;Table__trackContainer&quot;&gt;
&lt;div class=&quot;Table__track&quot; data-js-target=&quot;Table.track&quot;&gt;
&lt;table class=&quot;Table__table&quot;&gt;&lt;thead class=&quot;Table__head&quot;&gt;&lt;tr class=&quot;TableRow&quot;&gt;


&lt;/tr&gt;&lt;/thead&gt;&lt;tbody class=&quot; TableBody&quot;&gt;&lt;tr class=&quot;TableRow&quot;&gt;
&lt;td class=&quot; TableCell&quot;&gt;
&lt;section class=&quot; List List--inline&quot;/&gt;&lt;/td&gt;
&lt;td class=&quot; TableCell&quot;&gt;
&lt;section class=&quot; List List--inline&quot;&gt;&lt;ul class=&quot;List__list&quot;&gt;&lt;li class=&quot; List__item ListItem&quot;&gt;ACH debit (days) &lt;span class=&quot; Badge Badge--accented&quot;&gt;New&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/section&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;TableRow&quot;&gt;
&lt;td class=&quot; TableCell TableCell--empty&quot;/&gt;
&lt;td class=&quot; TableCell&quot;&gt;
&lt;section class=&quot; List List--inline&quot;&gt;&lt;ul class=&quot;List__list&quot;&gt;&lt;li class=&quot; List__item ListItem&quot;&gt;Bitcoin (hours) &lt;span class=&quot; Badge Badge--accented&quot;&gt;New&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/section&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The Charges API supported cards, ACH debit, and Bitcoin as payment methods.&lt;/p&gt;
&lt;/section&gt;&lt;p class=&quot;BlogBodyParagraph&quot;&gt;Each of these first three payment methods differ in how the payment is initiated and when funds are guaranteed. This made the task of creating APIs that abstract over their differences quite challenging.&lt;/p&gt;
&lt;p class=&quot;BlogBodyParagraph&quot;&gt;Here’s what we did:&lt;/p&gt;
&lt;p class=&quot;BlogBodyParagraph&quot;&gt;&lt;strong&gt;ACH debit&lt;/strong&gt;. Since card payments and ACH debit payments both require only static information from the customer (i.e., card number or bank account number), we expanded the &lt;code class=&quot;InlineCode&quot;&gt;Token&lt;/code&gt; resource to represent both card details and bank account details. A user still created a &lt;code class=&quot;InlineCode&quot;&gt;Charge&lt;/code&gt; from either type of &lt;code class=&quot;InlineCode&quot;&gt;Token&lt;/code&gt;, but we added a &lt;code class=&quot;InlineCode&quot;&gt;pending&lt;/code&gt; state to the &lt;code class=&quot;InlineCode&quot;&gt;Charge&lt;/code&gt; to represent that an ACH debit &lt;code class=&quot;InlineCode&quot;&gt;Charge&lt;/code&gt; isn’t immediately finalized and could still fail. Users ran their order fulfillment logic days later, when they received a webhook indicating that the &lt;code class=&quot;InlineCode&quot;&gt;Charge&lt;/code&gt; had succeeded.&lt;/p&gt;
&lt;div class=&quot; Card Card--border BlogBodyImageCard&quot;&gt;&lt;img class=&quot;BlogBodyImageCard__image&quot; alt=&quot;payment api diagram 2&quot; src=&quot;https://images.ctfassets.net/fzn2n1nzq965/5VTVb3TiijxvacXCH448Ez/52fb8a7983b0d905020c02de9f41fca3/blog-payment-api-design-diagram-2.svg?w=1620&amp;amp;q=80&quot; loading=&quot;lazy&quot;/&gt;&lt;/div&gt;
&lt;p&gt;A new &lt;code class=&quot;InlineCode&quot;&gt;pending&lt;/code&gt; state was added to the &lt;code class=&quot;InlineCode&quot;&gt;Charge&lt;/code&gt; to represent payments that finalize asynchronously.&lt;/p&gt;
&lt;p class=&quot;BlogBodyParagraph&quot;&gt;&lt;strong&gt;Bitcoin&lt;/strong&gt;. As Bitcoin didn’t fit into our abstractions, we had to introduce a new &lt;code class=&quot;InlineCode&quot;&gt;BitcoinReceiver&lt;/code&gt; API to facilitate the client-side action we needed the customer to take in the payment flow. Particular to Stripe, a “receiver” was a temporary receptacle for funds. It had a very simple state machine that described the status of the receiver: a boolean, &lt;code class=&quot;InlineCode&quot;&gt;filled&lt;/code&gt;, that was either true or false. Once the receiver was filled, the user could create a &lt;code class=&quot;InlineCode&quot;&gt;Charge&lt;/code&gt; using that &lt;code class=&quot;InlineCode&quot;&gt;BitcoinReceiver&lt;/code&gt; object instead of a &lt;code class=&quot;InlineCode&quot;&gt;Token&lt;/code&gt; object. This would virtually move the funds from the receiver to the user’s balance. If a user didn’t create the &lt;code class=&quot;InlineCode&quot;&gt;Charge&lt;/code&gt; within a certain time frame, the money in the receiver would be refunded to the customer. Like ACH debit Charges, Bitcoin Charges started in the &lt;code class=&quot;InlineCode&quot;&gt;pending&lt;/code&gt; state and succeeded asynchronously.&lt;/p&gt;
&lt;div class=&quot; Card Card--border BlogBodyImageCard&quot;&gt;&lt;img class=&quot;BlogBodyImageCard__image&quot; alt=&quot;payment api diagram 3&quot; src=&quot;https://images.ctfassets.net/fzn2n1nzq965/3kK3WIGoad1cKe6dO3jzfn/77bba6e27074d92bde891c2f5cd20cce/blog-payment-api-design-diagram-3.svg?w=1620&amp;amp;q=80&quot; loading=&quot;lazy&quot;/&gt;&lt;/div&gt;
&lt;p&gt;We introduced the BitcoinReceiver resource to represent that the customer needed to take an action to complete the payment.&lt;/p&gt;
&lt;p class=&quot;BlogBodyParagraph&quot;&gt;With ACH debit and Bitcoin, the integration grew more complex. It now involved dealing with asynchronous payment finalization, and in Bitcoin’s case, it involved managing two state machines to complete payment: &lt;code class=&quot;InlineCode&quot;&gt;BitcoinReceiver&lt;/code&gt; on the client and &lt;code class=&quot;InlineCode&quot;&gt;Charge&lt;/code&gt; on the server.&lt;/p&gt;
&lt;h3 class=&quot;BlogBodyTitle&quot;&gt;Seeking a simpler payments API (2015 - 2017)&lt;/h3&gt;
&lt;p class=&quot;BlogBodyParagraph&quot;&gt;Over the next two years, we added more payment methods. Most of them were more like Bitcoin than cards—they required customer action to initiate a payment. We discovered that it wouldn’t be developer-friendly to introduce a brand new &lt;code class=&quot;InlineCode&quot;&gt;BitcoinReceiver&lt;/code&gt;-like resource for each of these—it would simply introduce too many new Stripe-specific concepts to reason about in the API. We aspired to design a simpler payments API and began exploring how to unify these payment methods on one integration path: the &lt;a class=&quot; Link&quot; href=&quot;https://stripe.com/docs/sources&quot; data-js-controller=&quot;AnalyticsButton&quot; data-analytics-category=&quot;Links&quot; data-analytics-action=&quot;Clicked&quot; data-analytics-label=&quot;&quot;&gt;Sources API&lt;/a&gt;.&lt;/p&gt;
&lt;section class=&quot;BlogBodyRow&quot; readability=&quot;28&quot;&gt;&lt;div class=&quot;Table__trackContainer&quot;&gt;
&lt;div class=&quot;Table__track&quot; data-js-target=&quot;Table.track&quot;&gt;
&lt;table class=&quot;Table__table&quot;&gt;&lt;thead class=&quot;Table__head&quot;&gt;&lt;tr class=&quot;TableRow&quot;&gt;


&lt;/tr&gt;&lt;/thead&gt;&lt;tbody class=&quot; TableBody&quot; readability=&quot;28.5&quot;&gt;&lt;tr class=&quot;TableRow&quot; readability=&quot;2&quot;&gt;
&lt;td class=&quot; TableCell&quot;&gt;Cards&lt;/td&gt;
&lt;td class=&quot; TableCell&quot;&gt;
&lt;section class=&quot; List List--inline&quot;&gt;&lt;ul class=&quot;List__list&quot;&gt;&lt;li class=&quot; List__item ListItem&quot;&gt;ACH debit&lt;/li&gt;
&lt;li class=&quot; List__item ListItem&quot;&gt;SEPA direct debit &lt;span class=&quot; Badge Badge--accented&quot;&gt;New&lt;/span&gt;&lt;/li&gt;
&lt;li class=&quot; List__item ListItem&quot;&gt;Bacs debit &lt;span class=&quot; Badge Badge--accented&quot;&gt;New&lt;/span&gt;&lt;/li&gt;
&lt;li class=&quot; List__item ListItem&quot;&gt;BECS debit &lt;span class=&quot; Badge Badge--accented&quot;&gt;New&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/section&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;TableRow&quot; readability=&quot;5&quot;&gt;
&lt;td class=&quot; TableCell&quot;&gt;
&lt;section class=&quot; List List--inline&quot;&gt;&lt;ul class=&quot;List__list&quot;&gt;&lt;li class=&quot; List__item ListItem&quot;&gt;iDEAL &lt;span class=&quot; Badge Badge--accented&quot;&gt;New&lt;/span&gt;&lt;/li&gt;
&lt;li class=&quot; List__item ListItem&quot;&gt;Alipay &lt;span class=&quot; Badge Badge--accented&quot;&gt;New&lt;/span&gt;&lt;/li&gt;
&lt;li class=&quot; List__item ListItem&quot;&gt;giropay &lt;span class=&quot; Badge Badge--accented&quot;&gt;New&lt;/span&gt;&lt;/li&gt;
&lt;li class=&quot; List__item ListItem&quot;&gt;Bancontact &lt;span class=&quot; Badge Badge--accented&quot;&gt;New&lt;/span&gt;&lt;/li&gt;
&lt;li class=&quot; List__item ListItem&quot;&gt;WeChat Pay &lt;span class=&quot; Badge Badge--accented&quot;&gt;New&lt;/span&gt;&lt;/li&gt;
&lt;li class=&quot; List__item ListItem&quot;&gt;Przelewy24 &lt;span class=&quot; Badge Badge--accented&quot;&gt;New&lt;/span&gt;&lt;/li&gt;
&lt;li class=&quot; List__item ListItem&quot;&gt;Cards with 3D Secure &lt;span class=&quot; Badge Badge--accented&quot;&gt;New&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/section&gt;&lt;/td&gt;
&lt;td class=&quot; TableCell&quot;&gt;
&lt;section class=&quot; List List--inline&quot;&gt;&lt;ul class=&quot;List__list&quot;&gt;&lt;li class=&quot; List__item ListItem&quot;&gt;Bitcoin&lt;/li&gt;
&lt;li class=&quot; List__item ListItem&quot;&gt;Sofort &lt;span class=&quot; Badge Badge--accented&quot;&gt;New&lt;/span&gt;&lt;/li&gt;
&lt;li class=&quot; List__item ListItem&quot;&gt;Multibanco &lt;span class=&quot; Badge Badge--accented&quot;&gt;New&lt;/span&gt;&lt;/li&gt;
&lt;li class=&quot; List__item ListItem&quot;&gt;Paper checks &lt;span class=&quot; Badge Badge--accented&quot;&gt;New&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/section&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The Sources API was designed to be a single client-side API that could represent multiple payment methods.&lt;/p&gt;
&lt;/section&gt;&lt;p class=&quot;BlogBodyParagraph&quot;&gt;We combined the two client-side abstractions we’d previously designed (&lt;code class=&quot;InlineCode&quot;&gt;Tokens&lt;/code&gt; and &lt;code class=&quot;InlineCode&quot;&gt;BitcoinReceivers&lt;/code&gt;) into a client-driven state machine called a Source. Upon creation, a Source could be immediately &lt;code class=&quot;InlineCode&quot;&gt;chargeable&lt;/code&gt; (e.g., for card payments) or &lt;code class=&quot;InlineCode&quot;&gt;pending&lt;/code&gt; (e.g., for payment methods that require customer action). The server-side integration remained a single HTTP request that used a secret key to create a &lt;code class=&quot;InlineCode&quot;&gt;Charge&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot; Card Card--border BlogBodyImageCard&quot;&gt;&lt;img class=&quot;BlogBodyImageCard__image&quot; alt=&quot;payment api diagram 4&quot; src=&quot;https://images.ctfassets.net/fzn2n1nzq965/5bRjv50JsgJNsIsvTLh6qh/1f3ff5d37673934544fd63e2b893fe83/blog-payment-api-design-diagram-4.svg?w=1620&amp;amp;q=80&quot; loading=&quot;lazy&quot;/&gt;&lt;/div&gt;
&lt;p&gt;We combined the functionality of &lt;code class=&quot;InlineCode&quot;&gt;Tokens&lt;/code&gt; and receivers into a single client-side API: &lt;code class=&quot;InlineCode&quot;&gt;Sources&lt;/code&gt;.&lt;/p&gt;
&lt;p class=&quot;BlogBodyParagraph&quot;&gt;The payment flow for every payment method relied on the same two API abstractions: a &lt;code class=&quot;InlineCode&quot;&gt;Source&lt;/code&gt; and a &lt;code class=&quot;InlineCode&quot;&gt;Charge&lt;/code&gt;. This seems conceptually simple at first glance, as it resembled a card integration in the U.S. However, once we understood how this flow integrated into users’ applications, we discovered many rough edges.&lt;/p&gt;
&lt;p class=&quot;BlogBodyParagraph&quot;&gt;For example, when users added a payment method that doesn’t finalize immediately, they could no longer fulfill their customers’ orders immediately after the &lt;code class=&quot;InlineCode&quot;&gt;Charge&lt;/code&gt; was created. Instead, they’d have to wait until the &lt;code class=&quot;InlineCode&quot;&gt;Charge&lt;/code&gt; transitioned to &lt;code class=&quot;InlineCode&quot;&gt;succeeded&lt;/code&gt; before shipping goods. This usually involved adding a webhook integration that listens for &lt;code class=&quot;InlineCode&quot;&gt;charge.succeeded&lt;/code&gt; and moving fulfillment logic there.&lt;/p&gt;
&lt;p class=&quot;BlogBodyParagraph&quot;&gt;&lt;code class=&quot;InlineCode&quot;&gt;Sources&lt;/code&gt; and &lt;code class=&quot;InlineCode&quot;&gt;Charges&lt;/code&gt; were still more complex for other payment methods—and integration issues could lead to lost revenue. For example, with &lt;a class=&quot; Link&quot; href=&quot;https://stripe.com/payments/payment-methods-guide#ideal&quot; data-js-controller=&quot;AnalyticsButton&quot; data-analytics-category=&quot;Links&quot; data-analytics-action=&quot;Clicked&quot; data-analytics-label=&quot;&quot;&gt;iDEAL&lt;/a&gt;, the predominant payment method in the Netherlands, the customer initiates the payment after they’re redirected to their bank’s website or mobile app. If the client-side application creates a &lt;code class=&quot;InlineCode&quot;&gt;Source&lt;/code&gt; and the browser then loses connectivity with the server, the next request to create a &lt;code class=&quot;InlineCode&quot;&gt;Charge&lt;/code&gt; wouldn’t make it through, even though the customer believes they paid. (The browser could lose connectivity for any number of reasons: the customer closes their tab after they pay on their bank’s site, the payment method requires a redirect that the customer never returns from, or the customer has a flaky internet connection.) Because the server never created a &lt;code class=&quot;InlineCode&quot;&gt;Charge&lt;/code&gt;, we’d refund the money associated with the &lt;code class=&quot;InlineCode&quot;&gt;Source&lt;/code&gt; after a few hours. This is a conversion nightmare. &lt;/p&gt;
&lt;p class=&quot;BlogBodyParagraph&quot;&gt;To reduce the chance of this occurring, we recommended that users either poll the Stripe API from their server until the &lt;code class=&quot;InlineCode&quot;&gt;Source&lt;/code&gt; became &lt;code class=&quot;InlineCode&quot;&gt;chargeable&lt;/code&gt; or listen for the &lt;code class=&quot;InlineCode&quot;&gt;source.chargeable&lt;/code&gt; webhook event to create the &lt;code class=&quot;InlineCode&quot;&gt;Charge&lt;/code&gt;. But, if a user’s payment application goes down and they use &lt;code class=&quot;InlineCode&quot;&gt;Sources&lt;/code&gt; and &lt;code class=&quot;InlineCode&quot;&gt;Charges&lt;/code&gt;, these webhooks aren’t delivered and the server won’t create the &lt;code class=&quot;InlineCode&quot;&gt;Charge&lt;/code&gt;. We’ll return the customer’s money and users have to get them back on their site to pay again. Even if the user implements and maintains this best practice correctly, there’s still complexity around the different possible states of &lt;code class=&quot;InlineCode&quot;&gt;Sources&lt;/code&gt; and &lt;code class=&quot;InlineCode&quot;&gt;Charges&lt;/code&gt; and the paths and requirements for different payment method types.&lt;/p&gt;
&lt;div class=&quot; Card Card--border BlogBodyImageCard&quot;&gt;&lt;img class=&quot;BlogBodyImageCard__image&quot; alt=&quot;payment api diagram 5&quot; src=&quot;https://images.ctfassets.net/fzn2n1nzq965/6Nh62gERMh3czS6Flqluhv/0ae6a8c4f606b1265b0121085e051ff3/blog-payment-api-design-diagram-5.svg?w=1620&amp;amp;q=80&quot; loading=&quot;lazy&quot;/&gt;&lt;/div&gt;
&lt;p&gt;There are many ways to actually create a &lt;code class=&quot;InlineCode&quot;&gt;Charge&lt;/code&gt; from the &lt;code class=&quot;InlineCode&quot;&gt;Source&lt;/code&gt;, depending on the payment method.&lt;/p&gt;
&lt;p class=&quot;BlogBodyParagraph&quot;&gt;Some &lt;code class=&quot;InlineCode&quot;&gt;Sources&lt;/code&gt;—like cards and bank accounts—are &lt;em&gt;synchronously chargeable&lt;/em&gt; and can be charged immediately on the server after the payment form is submitted, while others are &lt;em&gt;asynchronous&lt;/em&gt; and can only be charged hours or days later. Users often built parallel integrations using both synchronous HTTP requests and event-driven webhook handlers to support each type. This means users now have multiple places where they’re creating a &lt;code class=&quot;InlineCode&quot;&gt;Charge&lt;/code&gt; and fulfilling their order. The code branching factor deepens for payment methods like OXXO, where the customer prints out a physical voucher and brings it to an OXXO store to pay for it in cash. Money is paid entirely out-of-band, making our best practice recommendation of listening for the &lt;code class=&quot;InlineCode&quot;&gt;source.chargeable&lt;/code&gt; webhook event absolutely &lt;em&gt;required&lt;/em&gt; for these payment methods. Finally, users must track both the Charge ID and Source ID for each order. If two &lt;code class=&quot;InlineCode&quot;&gt;Sources&lt;/code&gt; become chargeable for the same order (e.g., the customer decides to switch their payment method mid-payment) they can ensure they don’t double-charge for the order. &lt;/p&gt;
&lt;p class=&quot;BlogBodyParagraph&quot;&gt;This effort demands more bookkeeping and conceptual understanding from developers than “seven lines of code” did. Our users &lt;em&gt;needed&lt;/em&gt; to grok all of these edge cases in order to build a functioning Stripe integration. Imagine the confusion caused by reasoning about these two state machines, with varying definitions of each state depending on the payment method! Developers must manage the success, failure, and pending states of two state machines—whose states may differ across different payment methods—in order to complete a single payment.&lt;/p&gt;
&lt;div class=&quot; Card Card--border BlogBodyImageCard&quot;&gt;&lt;img class=&quot;BlogBodyImageCard__image&quot; alt=&quot;payment api diagram 7&quot; src=&quot;https://images.ctfassets.net/fzn2n1nzq965/5zsyfzmwdB1PDT1anDwN3Y/6808ffa72600242ac1b7287a0a0201b5/blog-payment-api-design-diagram-7.svg?w=2160&amp;amp;q=80&quot; loading=&quot;lazy&quot;/&gt;&lt;/div&gt;
&lt;p&gt;Users must manage two different state machines that span client and server to complete a payment.&lt;/p&gt;
&lt;p class=&quot;BlogBodyParagraph&quot;&gt;Let’s refer back to the table of payment methods. You may notice that cards are the only payment method in the top left quadrant: they finalize immediately and don’t require customer action to complete a payment. This means we built support for new payment methods on top of a set of abstractions that were designed for the simplest payment method of them all: cards. Naturally, abstractions designed for cards were not going to be great at representing these more complex payment flows.&lt;/p&gt;
&lt;section class=&quot;BlogBodyRow&quot; readability=&quot;27&quot;&gt;&lt;div class=&quot;Table__trackContainer&quot;&gt;
&lt;div class=&quot;Table__track&quot; data-js-target=&quot;Table.track&quot;&gt;
&lt;table class=&quot;Table__table&quot;&gt;&lt;thead class=&quot;Table__head&quot;&gt;&lt;tr class=&quot;TableRow&quot;&gt;


&lt;/tr&gt;&lt;/thead&gt;&lt;tbody class=&quot; TableBody&quot; readability=&quot;28&quot;&gt;&lt;tr class=&quot;TableRow&quot; readability=&quot;2&quot;&gt;
&lt;td class=&quot; TableCell&quot;&gt;
&lt;section class=&quot; List List--inline&quot;/&gt;&lt;/td&gt;
&lt;td class=&quot; TableCell&quot;&gt;
&lt;section class=&quot; List List--inline&quot;&gt;&lt;ul class=&quot;List__list&quot;&gt;&lt;li class=&quot; List__item ListItem&quot;&gt;ACH debit&lt;/li&gt;
&lt;li class=&quot; List__item ListItem&quot;&gt;SEPA direct debit&lt;/li&gt;
&lt;li class=&quot; List__item ListItem&quot;&gt;Bacs debit&lt;/li&gt;
&lt;li class=&quot; List__item ListItem&quot;&gt;BECS debit&lt;/li&gt;
&lt;/ul&gt;&lt;/section&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;TableRow&quot; readability=&quot;4&quot;&gt;
&lt;td class=&quot; TableCell&quot;&gt;
&lt;section class=&quot; List List--inline&quot;&gt;&lt;ul class=&quot;List__list&quot;&gt;&lt;li class=&quot; List__item ListItem&quot;&gt;iDEAL&lt;/li&gt;
&lt;li class=&quot; List__item ListItem&quot;&gt;Alipay&lt;/li&gt;
&lt;li class=&quot; List__item ListItem&quot;&gt;giropay&lt;/li&gt;
&lt;li class=&quot; List__item ListItem&quot;&gt;Bancontact&lt;/li&gt;
&lt;li class=&quot; List__item ListItem&quot;&gt;WeChat Pay&lt;/li&gt;
&lt;li class=&quot; List__item ListItem&quot;&gt;Przelewy24&lt;/li&gt;
&lt;li class=&quot; List__item ListItem&quot;&gt;Cards with 3D Secure&lt;/li&gt;
&lt;/ul&gt;&lt;/section&gt;&lt;/td&gt;
&lt;td class=&quot; TableCell&quot;&gt;
&lt;section class=&quot; List List--inline&quot;&gt;&lt;ul class=&quot;List__list&quot;&gt;&lt;li class=&quot; List__item ListItem&quot;&gt;Bitcoin&lt;/li&gt;
&lt;li class=&quot; List__item ListItem&quot;&gt;Sofort&lt;/li&gt;
&lt;li class=&quot; List__item ListItem&quot;&gt;Multibanco&lt;/li&gt;
&lt;li class=&quot; List__item ListItem&quot;&gt;Paper checks&lt;/li&gt;
&lt;/ul&gt;&lt;/section&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Global payment methods aren’t different; cards are!&lt;/p&gt;
&lt;/section&gt;&lt;p class=&quot;BlogBodyParagraph&quot;&gt;Introducing additional states and expanding on the definition of resources that were created for a specific, narrow use case resulted in a confusing integration and an overloaded set of API abstractions. It’s as if we were trying to build a spaceship by adding parts to a car until it had the functionality of a spaceship: a difficult &lt;em&gt;and&lt;/em&gt; likely doomed proposition. &lt;code class=&quot;InlineCode&quot;&gt;Charges&lt;/code&gt; and &lt;code class=&quot;InlineCode&quot;&gt;Tokens&lt;/code&gt; were foundational in the API because they were the first APIs we had, not because they were the right abstraction for global payments. We needed to fundamentally rethink our payments abstractions.&lt;/p&gt;
&lt;h3 class=&quot;BlogBodyTitle&quot;&gt;Designing a unified payments API (&lt;em&gt;late 2017 - early 2018)&lt;/em&gt;&lt;/h3&gt;
&lt;p class=&quot;BlogBodyParagraph&quot;&gt;We were able to start designing the APIs we wanted when we set aside further changes to &lt;code class=&quot;InlineCode&quot;&gt;Sources&lt;/code&gt; and &lt;code class=&quot;InlineCode&quot;&gt;Charges&lt;/code&gt;. It was much easier &lt;em&gt;because&lt;/em&gt; we had a chance to learn from users over the years, and deeply understood the issues they encountered with our existing integration paths. We also accumulated payments domain expertise, having had years of experience iterating on our APIs. Taken together, our API design had a better chance to not repeat past mistakes.&lt;/p&gt;
&lt;p class=&quot;BlogBodyParagraph&quot;&gt;We locked ourselves in a conference room for three months with the goal of designing a truly unified payments API. If successful, a developer would only need to understand a few basic concepts in order to build a payments integration. Even if they hadn’t heard of the payment method, they should be able to just add a few parameters to a few specific points in their integration. To enable this, the states and guarantees of our APIs had to be extremely predictable and consistent. There shouldn’t be an array of caveats and exceptions scattered throughout our docs.&lt;/p&gt;
&lt;p class=&quot;BlogBodyParagraph&quot;&gt;A team of five people—four engineers and a PM—walked through every payment method we supported and we could imagine supporting in the future. We iterated on an API design that would be able to model all of them. We ignored all existing abstractions and thought about the problem from first principles.&lt;/p&gt;
&lt;div class=&quot; Card BlogBodyImageCard&quot;&gt;&lt;img class=&quot;BlogBodyImageCard__image&quot; alt=&quot;Payments API conference room&quot; src=&quot;https://images.ctfassets.net/fzn2n1nzq965/4WlAlU7c8e3D7UQc77IZUJ/b19d1fd213e98603c2381ddc1dcf298b/Lynx.jpg?w=1080&amp;amp;q=80&quot; loading=&quot;lazy&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot; Card BlogBodyImageCard&quot;&gt;&lt;img class=&quot;BlogBodyImageCard__image&quot; alt=&quot;Payments API conference room&quot; src=&quot;https://images.ctfassets.net/fzn2n1nzq965/5OGtU5Q4l2NqPD93SBgVnr/42fe34d0933b70559ea489aff202a3e7/Whiteboard.jpg?w=1080&amp;amp;q=80&quot; loading=&quot;lazy&quot;/&gt;&lt;/div&gt;
&lt;p&gt;We did early work on our unified payments API in a conference room named Lynx.&lt;/p&gt;
&lt;p class=&quot;BlogBodyParagraph&quot;&gt;It’s hard to remember now exactly what happened each day, but some rules and routines really helped us:&lt;/p&gt;
&lt;ul class=&quot;BlogBodyList&quot;&gt;&lt;li class=&quot;BlogBodyList__item&quot;&gt;&lt;strong&gt;Close laptops&lt;/strong&gt;. When working together in the same room, we found the fastest way to be fully present and attentive was to close our computers. When we did, we felt more listened to and could more clearly and easily explain our reasoning to each other. &lt;/li&gt;
&lt;li class=&quot;BlogBodyList__item&quot;&gt;&lt;strong&gt;Pace your questions&lt;/strong&gt;. Start each session with a set of questions you want to answer. Write down any new questions that arise in a working session for the &lt;em&gt;next&lt;/em&gt; session. Try to avoid discussing them in the moment. In the time between sessions, you’ll get some distance from those questions, collect new information, and meditate more on the topic. End each session with clear answers and questions to explore in the next session.&lt;/li&gt;
&lt;li class=&quot;BlogBodyList__item&quot;&gt;&lt;strong&gt;Use colors and shapes&lt;/strong&gt;. Early on, lean on simple representations for complex, nascent concepts, rather than try to give them concrete names. We exhausted the available set of marker colors and drew many shapes on the whiteboard. This tack helped us avoid anchoring on specific definitions for the concepts that we were trying to shape—and helped us avoid naming bikesheds prematurely.&lt;/li&gt;
&lt;li class=&quot;BlogBodyList__item&quot;&gt;&lt;strong&gt;Focus on enabling real user integrations.&lt;/strong&gt; In API design, it’s common to get caught up with pursuing perfect invariants, airtight theories, or intellectually pure solutions, but none of that is useful if it doesn’t enable a real user integration. One of our primary design tools was writing hypothetical integration guides to validate our concepts and to make sure we didn’t introduce old or new pits of failure. We wrote these for every payment method we could list—and even for some payment methods we made up, like sending cash via carrier pigeon.&lt;/li&gt;
&lt;li class=&quot;BlogBodyList__item&quot;&gt;&lt;strong&gt;Question&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;every&lt;/em&gt;&lt;/strong&gt; &lt;strong&gt;assumption underpinning existing APIs&lt;/strong&gt;. We specifically designed the first API to make card payments extremely easy, and it grew relatively organically from there. We needed to reason from first principles at every turn. Looking back, we probably could have done it even more.&lt;/li&gt;
&lt;li class=&quot;BlogBodyList__item&quot;&gt;&lt;strong&gt;Invite domain experts as guests.&lt;/strong&gt; Import know-how for discussions with a specific topic in mind. Elevate the conversation with expertise. &lt;/li&gt;
&lt;li class=&quot;BlogBodyList__item&quot;&gt;&lt;strong&gt;Make decisions quickly knowing you might change your mind.&lt;/strong&gt; New observations or data would either further reinforce our initial decision or lead us to make a better choice. In every case, it was more efficient to make &lt;em&gt;a&lt;/em&gt; decision early and avoid stasis, even if we later reversed that decision. &lt;/li&gt;
&lt;/ul&gt;&lt;blockquote class=&quot;BlogBodyTherequote&quot; readability=&quot;32&quot;&gt;
&lt;p&gt;We frequently felt like we were brute-forcing the problem space, but the enemy of any large design project is not making decisions quickly enough because no option feels perfect.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 class=&quot;BlogBodyTitle&quot;&gt;Introducing PaymentIntents and PaymentMethods (2018)&lt;/h3&gt;
&lt;p class=&quot;BlogBodyParagraph&quot;&gt;We ended up with two new concepts: &lt;a class=&quot; Link&quot; href=&quot;https://stripe.com/docs/payments/payment-intents&quot; data-js-controller=&quot;AnalyticsButton&quot; data-analytics-category=&quot;Links&quot; data-analytics-action=&quot;Clicked&quot; data-analytics-label=&quot;&quot;&gt;PaymentIntents&lt;/a&gt; and &lt;a class=&quot; Link&quot; href=&quot;https://stripe.com/docs/payments/payment-methods&quot; data-js-controller=&quot;AnalyticsButton&quot; data-analytics-category=&quot;Links&quot; data-analytics-action=&quot;Clicked&quot; data-analytics-label=&quot;&quot;&gt;PaymentMethods&lt;/a&gt;. By packaging these two concepts, we finally managed to create a single integration for all payment methods. &lt;/p&gt;
&lt;p class=&quot;BlogBodyParagraph&quot;&gt;&lt;strong&gt;PaymentMethods&lt;/strong&gt;, like the original &lt;code class=&quot;InlineCode&quot;&gt;Tokens&lt;/code&gt;, represent static information about the payment method that the customer wants to use. It includes the payment scheme and the credentials needed to move money, like card information or the customer’s name or email. For some methods, like Alipay, only the payment method name is required because the payment method itself handles collecting further information after you redirect to their site. Unlike a &lt;code class=&quot;InlineCode&quot;&gt;Source&lt;/code&gt;, there is no state or data specific to the particular transaction captured on a PaymentMethod object—you can think of it as an object that specifies &lt;em&gt;how&lt;/em&gt; to process a payment.&lt;/p&gt;
&lt;p class=&quot;BlogBodyParagraph&quot;&gt;&lt;strong&gt;PaymentIntents&lt;/strong&gt;, on the other hand, capture transaction-specific data such as how much to charge and is the stateful object that tracks the customer’s attempt to pay with various payment methods. Combine a PaymentMethod (the “how”) and a PaymentIntent (the “what”) and payment can be attempted. If one payment attempt fails, the customer can try again with a different PaymentMethod.&lt;/p&gt;
&lt;p class=&quot;BlogBodyParagraph&quot;&gt;A PaymentIntent has the &lt;a class=&quot; Link&quot; href=&quot;https://stripe.com/docs/payments/intents&quot; data-js-controller=&quot;AnalyticsButton&quot; data-analytics-category=&quot;Links&quot; data-analytics-action=&quot;Clicked&quot; data-analytics-label=&quot;&quot;&gt;following states&lt;/a&gt;, summarized quickly here: &lt;/p&gt;
&lt;ul class=&quot;BlogBodyList&quot;&gt;&lt;li class=&quot;BlogBodyList__item&quot;&gt;&lt;strong&gt;requires_payment_method:&lt;/strong&gt; Specify the PaymentMethod to use.&lt;/li&gt;
&lt;li class=&quot;BlogBodyList__item&quot;&gt;&lt;strong&gt;requires_confirmation:&lt;/strong&gt; “Confirm” basically means “make money go!” Sometimes you want to pause between collecting payment method details and actually making the money go, and this (optional) state makes that possible.&lt;/li&gt;
&lt;li class=&quot;BlogBodyList__item&quot;&gt;&lt;strong&gt;requires_action:&lt;/strong&gt; Please perform the specified action. This can be anything from a generic &lt;code class=&quot;InlineCode&quot;&gt;redirect_to_url&lt;/code&gt; (self-explanatory) to a very payment-method-specific action like &lt;code class=&quot;InlineCode&quot;&gt;oxxo_display_details&lt;/code&gt;, which provides information for you to generate an OXXO voucher. &lt;/li&gt;
&lt;li class=&quot;BlogBodyList__item&quot;&gt;&lt;strong&gt;processing:&lt;/strong&gt; You’re waiting on us to process the payment.&lt;/li&gt;
&lt;li class=&quot;BlogBodyList__item&quot;&gt;&lt;strong&gt;succeeded:&lt;/strong&gt; The payment has been finalized. Funds are guaranteed.&lt;/li&gt;
&lt;li class=&quot;BlogBodyList__item&quot;&gt;&lt;strong&gt;failed:&lt;/strong&gt; There’s no failed state because if a single payment attempt fails, the PaymentIntent goes back to the &lt;code class=&quot;InlineCode&quot;&gt;requires_payment_method&lt;/code&gt; state so that the customer can try again with a different payment method. This is convenient because the same object created server-side can be used repeatedly on the client.&lt;/li&gt;
&lt;/ul&gt;&lt;p class=&quot;BlogBodyParagraph&quot;&gt;With &lt;code class=&quot;InlineCode&quot;&gt;Charges&lt;/code&gt; and &lt;code class=&quot;InlineCode&quot;&gt;Sources&lt;/code&gt;, a “best practice” payments integration for cards, iDEAL, and ACH debit required managing two webhook handlers (one that is time-sensitive and in the critical path to collecting money correctly), dealing with three different times a &lt;code class=&quot;InlineCode&quot;&gt;Charge&lt;/code&gt; could succeed, handling two paths to failure, and dealing with two stateful objects. &lt;/p&gt;
&lt;p class=&quot;BlogBodyParagraph&quot;&gt;With PaymentIntents and PaymentMethods, the integration is the same across all payment method types: start by creating a PaymentIntent on your server for the amount and currency to collect for an order. Pass the secret embedded on the PaymentIntent to the client. Collect the customer’s preferred payment method and confirm the PaymentIntent using the secret and payment method information. The PaymentIntent instructs what to do next when it’s in the &lt;code class=&quot;InlineCode&quot;&gt;requires_action&lt;/code&gt; state. Actions are standardized and predictable per payment method; for example, the &lt;a class=&quot; Link&quot; href=&quot;https://stripe.com/docs/payments/3d-secure&quot; data-js-controller=&quot;AnalyticsButton&quot; data-analytics-category=&quot;Links&quot; data-analytics-action=&quot;Clicked&quot; data-analytics-label=&quot;&quot;&gt;3D Secure&lt;/a&gt; authentication flow is managed via a set of actions. Lastly, listen for the &lt;code class=&quot;InlineCode&quot;&gt;payment_intent.succeeded&lt;/code&gt; webhook or wait for the PaymentIntent to enter the &lt;code class=&quot;InlineCode&quot;&gt;succeeded&lt;/code&gt; state to know when funds are guaranteed and when to fulfill a customer’s order. This is wholly managed by one predictable state machine. Importantly for conversion, the sole webhook handler that users must implement isn’t in the critical path to collecting money.&lt;/p&gt;
&lt;div class=&quot; Card Card--border BlogBodyImageCard&quot;&gt;&lt;img class=&quot;BlogBodyImageCard__image&quot; alt=&quot;payment api diagram 6&quot; src=&quot;https://images.ctfassets.net/fzn2n1nzq965/2af2zmYeLzsjMFtT157WpT/e3dbd0b5ad4295c9bd4b083edf7918bf/blog-payment-api-design-diagram-6.svg?w=1620&amp;amp;q=80&quot; loading=&quot;lazy&quot;/&gt;&lt;/div&gt;
&lt;p&gt;A PaymentIntents integration.&lt;/p&gt;
&lt;h3 class=&quot;BlogBodyTitle&quot;&gt;Launching PaymentIntents and PaymentMethods (&lt;em&gt;2018 - 2020)&lt;/em&gt;&lt;/h3&gt;
&lt;p class=&quot;BlogBodyParagraph&quot;&gt;The design of a set of APIs that would work across all payment methods globally with a single integration was the hard but fun part. The implementation of a beta, production-ready version of the API was also relatively straightforward. But launching a new API that replaces a foundational, established API doesn’t stop at just writing the code to spec—rolling out this change took &lt;em&gt;almost two years&lt;/em&gt;.&lt;/p&gt;
&lt;h4 class=&quot;BlogBodyTitle&quot;&gt;Connecting the design to reality&lt;/h4&gt;
&lt;p class=&quot;BlogBodyParagraph&quot;&gt;Introducing a new set of abstractions to an existing public API is much harder than updating internal interfaces. No matter the size of the company, sufficient tenacity and planning can drive teams to upgrade their dependencies. However, for an API &lt;em&gt;product&lt;/em&gt;, there’s no forcing developers to migrate, nor breaking their integration. &lt;/p&gt;
&lt;blockquote class=&quot;BlogBodyTherequote&quot; readability=&quot;30&quot;&gt;
&lt;p&gt;A great API product stays out of the developer’s way for as long as possible.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;BlogBodyParagraph&quot;&gt;If it is possible to make small changes to an existing API to accommodate new use cases, try that first so developers don’t have to rewrite their integration. In our case, we already knew from experience that just adding more parameters and states to the existing API resources wasn’t working. Even if the resource had the same name, the payment flow would look completely different.&lt;/p&gt;
&lt;p class=&quot;BlogBodyParagraph&quot;&gt;That said, the alternative—building new, entirely independent APIs which required developers to migrate everything at once—also felt daunting. After talking to many users, we identified common patterns in their integrations. One integration &lt;em&gt;created&lt;/em&gt; Stripe objects in the payment flow. Other integrations &lt;em&gt;consumed&lt;/em&gt; Stripe objects for analytics, support, or reporting—potentially syncing these objects to their own database. For some users, these integrations were even owned by different teams. Given a core feature of Stripe’s APIs is that developers don’t have to touch their integration for years, we had to figure out a way to motivate users to migrate their payment flow. One way to do this was to make sure that any changes to the payment flow don’t break their other integrations.&lt;/p&gt;
&lt;p class=&quot;BlogBodyParagraph&quot;&gt;To accomplish this, we decided to layer over the legacy APIs and create a &lt;code class=&quot;InlineCode&quot;&gt;Charge&lt;/code&gt; object for each payment attempted by the PaymentIntent. This way, users could migrate their payment flow to the PaymentIntents API while their analytics and reporting integrations still chugged along on an unchanged &lt;code class=&quot;InlineCode&quot;&gt;Charge&lt;/code&gt; resource. (This is also a good reason to not just reuse the &lt;code class=&quot;InlineCode&quot;&gt;Charge&lt;/code&gt; abstraction with changes to conceptually behave more like PaymentIntents. Lots of users and extensions make assumptions about what a &lt;code class=&quot;InlineCode&quot;&gt;Charge&lt;/code&gt; means, and changing its state machine drastically would break those assumptions.)&lt;/p&gt;
&lt;p class=&quot;BlogBodyParagraph&quot;&gt;We didn’t like how cluttered the &lt;code class=&quot;InlineCode&quot;&gt;Charge&lt;/code&gt; resource had become over the last seven years, so this was not ideal. Between 2011 and 2018, the &lt;code class=&quot;InlineCode&quot;&gt;Charge&lt;/code&gt; resource grew from having 11 properties to 36 properties and &lt;code class=&quot;InlineCode&quot;&gt;Charge&lt;/code&gt; creation grew from accepting 5 parameters to 14 parameters! To make sure we don’t make the problem worse as we add more payment methods, we introduced &lt;a class=&quot; Link&quot; href=&quot;https://stripe.com/docs/api/charges/object#charge_object-payment_method_details&quot; data-js-controller=&quot;AnalyticsButton&quot; data-analytics-category=&quot;Links&quot; data-analytics-action=&quot;Clicked&quot; data-analytics-label=&quot;&quot;&gt;payment_method_details&lt;/a&gt;, a polymorphic, typed hash on the &lt;code class=&quot;InlineCode&quot;&gt;Charge&lt;/code&gt; that contains payment-method-specific data. This approach helps us keep the top-level &lt;code class=&quot;InlineCode&quot;&gt;Charge&lt;/code&gt; resource simple, while making payment data easy to find and identify for details such as a partner reference ID or a payment-method-specific verification status:&lt;/p&gt;
&lt;div class=&quot;BlogBodyCodeSnippet&quot;&gt;
&lt;div class=&quot; Card BlogBodyCodeSnippet__card theme--Dark&quot;&gt;
&lt;div class=&quot; Card&quot; readability=&quot;8.5&quot;&gt;
&lt;div class=&quot; CodeEditor CodeEditor--focused CodeEditor--autosize&quot; aria-hidden=&quot;true&quot; data-js-controller=&quot;CodeEditor&quot; data-js-language-mode=&quot;java&quot; readability=&quot;12&quot;&gt;
&lt;p&gt;{ payment_method_details: { type: PaymentMethodType, [PaymentMethodType]: { // Payment-method-specific details about the transaction. // For cards, maybe it’s the CVC verification information. // For OXXO, maybe it’s the voucher information. } } }&lt;/p&gt;
&lt;pre class=&quot;CodeSyntax CodeEditor__editor&quot;&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code class=&quot;CodeEditor__scrollContainer&quot; data-js-target=&quot;CodeEditor.scrollContainer&quot;&gt;&lt;span class=&quot;CodeEditorLineNumbers__number&quot; data-js-target=&quot;CodeEditorLineNumbers.firstLineNumber&quot;&gt;~&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 &lt;span class=&quot;CodeEditor__typingArea&quot;&gt;
        
      &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;BlogBodyParagraph&quot;&gt;Over time, we’ve standardized this design pattern and have applied it to other resources in the API.&lt;/p&gt;
&lt;p class=&quot;BlogBodyParagraph&quot;&gt;Layering over the Charges API is just one example of a design compromise we had to make for the sake of migration. There were many other smaller challenges, but ultimately they all had &lt;em&gt;some&lt;/em&gt; least-bad solution we could pursue, so it wasn’t too dire. The &lt;em&gt;hardest&lt;/em&gt; part of realizing the PaymentIntent migration was not a technical challenge, but a perception challenge: The new APIs didn’t feel like “seven lines of code” anymore.&lt;/p&gt;
&lt;h2 class=&quot;BlogBodyTitle&quot;&gt;Keep it simple, Stripe&lt;/h2&gt;
&lt;p class=&quot;BlogBodyParagraph&quot;&gt;In normalizing the API across all payment methods, card payments became more complicated to integrate by introducing webhook events and by flipping the order of the client and server requests in the payment flow. These choices are not intuitive for those familiar with card payments, nor are they easy to implement for developers building traditional web applications.&lt;/p&gt;
&lt;div class=&quot; Card Card--border BlogBodyImageCard&quot;&gt;&lt;img class=&quot;BlogBodyImageCard__image&quot; alt=&quot;blog-payment-api-design-diagram-before-after&quot; src=&quot;https://images.ctfassets.net/fzn2n1nzq965/3NKrSlR0DG2pl8HWsYSYzL/16cfe8b71d327c55731d17ab87ff51dc/blog-payment-api-design-diagram-8.svg?w=541&amp;amp;q=80&quot; loading=&quot;lazy&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot; Card Card--border BlogBodyImageCard&quot;&gt;&lt;img class=&quot;BlogBodyImageCard__image&quot; alt=&quot;blog-payment-api-design-diagram-before-after&quot; src=&quot;https://images.ctfassets.net/fzn2n1nzq965/5crhjobhd0CWPeDQQY3tvM/cf6d51342f9d38fb15bf18d36c1cb4e2/blog-payment-api-design-diagram-9.svg?w=541&amp;amp;q=80&quot; loading=&quot;lazy&quot;/&gt;&lt;/div&gt;
&lt;p&gt;Compared to a simple card payments integration on Charges, a PaymentIntents integration requires flipping the client and server API calls and dealing with a webhook.&lt;/p&gt;
&lt;p class=&quot;BlogBodyParagraph&quot;&gt;This change to card payments was a challenge for one of our most important types of users: the &lt;a class=&quot; Link&quot; href=&quot;https://increment.com/apis/api-design-for-eager-discering-developers/&quot; data-js-controller=&quot;AnalyticsButton&quot; data-analytics-category=&quot;Links&quot; data-analytics-action=&quot;Clicked&quot; data-analytics-label=&quot;&quot;&gt;eager developer&lt;/a&gt; at a startup who wants to get up and running with card payments as soon as possible. Before, their seven lines of code pasted in a terminal would result in a successful charge. This new payment flow relies on asynchronous events, so the magic becomes much less tangible.&lt;/p&gt;
&lt;p class=&quot;BlogBodyParagraph&quot;&gt;PaymentIntents is also objectively a harder integration for users who &lt;em&gt;only&lt;/em&gt; care about accepting card payments in the US and Canada. We flipped the order of the client and server calls, which is difficult for traditional web applications to handle, and webhooks are often more than a little bit annoying to set up, test, and debug. (We later developed the &lt;a class=&quot; Link&quot; href=&quot;https://stripe.com/docs/stripe-cli&quot; data-js-controller=&quot;AnalyticsButton&quot; data-analytics-category=&quot;Links&quot; data-analytics-action=&quot;Clicked&quot; data-analytics-label=&quot;&quot;&gt;Stripe CLI&lt;/a&gt; to make developing with webhooks simpler for users.)&lt;/p&gt;
&lt;p class=&quot;BlogBodyParagraph&quot;&gt;The power-to-effort curve looks different between the Charges integration and the new PaymentIntents integration. Each incremental PaymentMethod is cheap to add to a PaymentIntents integration. However, speed is key for startups who want to get started quickly. With &lt;code class=&quot;InlineCode&quot;&gt;Charges&lt;/code&gt;, getting cards running was intuitive and low-effort—a compelling combination for startups.&lt;/p&gt;
&lt;div class=&quot; Card Card--border BlogBodyImageCard&quot;&gt;&lt;img class=&quot;BlogBodyImageCard__image&quot; alt=&quot;payment api design graph 1&quot; src=&quot;https://images.ctfassets.net/fzn2n1nzq965/4NEQq9HdzDUDftRf07WGsj/f3ba617d1827e0fa1687b4a5eb3b9464/blog-payment-api-design-graph-1.svg?w=1620&amp;amp;q=80&quot; loading=&quot;lazy&quot;/&gt;&lt;/div&gt;
&lt;p&gt;A PaymentIntents integration requires more effort up front, but each incremental payment method requires little incremental work to understand and add. On the other hand, a Charges integration is very low-effort for cards in the US and Canada, but becomes tedious and unpredictable for each subsequent payment method.&lt;/p&gt;
&lt;p class=&quot;BlogBodyParagraph&quot;&gt;Our first attempt at launching PaymentIntents without overwhelming existing users was to show both the PaymentIntents and Charges integration guides in our documentation, switching which one we showed first depending on the user’s location. The idea was that &lt;em&gt;most&lt;/em&gt; users in the US did not need these non-card payment methods, and thus would feel overwhelmed by the idea of payments as a state machine. In reality, this branching between two completely different integrations was &lt;em&gt;tremendously&lt;/em&gt; confusing. &lt;/p&gt;
&lt;p class=&quot;BlogBodyParagraph&quot;&gt;Many US businesses &lt;em&gt;do&lt;/em&gt; want to go global, and folks aren’t always coding from the locale of the business they want to run. If a developer for a EU-based business ended up following the Charges integration guide, they’d eventually realize that they would have to start from scratch. This happened a few times, and was always a costly and painful experience. It was not user-centric thinking to assuage our own worries about this big API change by recommending two incompatible integration paths.&lt;/p&gt;
&lt;p class=&quot;BlogBodyParagraph&quot;&gt;Our ultimate solution to this problem was to add a &lt;em&gt;convenient&lt;/em&gt; &lt;em&gt;packaging&lt;/em&gt; of the API that caters to the hypothetical user that would turn away from our APIs if they had to use webhooks up front. We called the default integration the “global payments integration” and named the new integration “&lt;a class=&quot; Link&quot; href=&quot;https://stripe.com/docs/payments/without-card-authentication&quot; data-js-controller=&quot;AnalyticsButton&quot; data-analytics-category=&quot;Links&quot; data-analytics-action=&quot;Clicked&quot; data-analytics-label=&quot;&quot;&gt;card payments without bank authentication&lt;/a&gt;.” We put the implications of this integration front and center in the documentation: with this simpler flow, you won’t be able to easily add new payment methods.&lt;/p&gt;
&lt;p class=&quot;BlogBodyParagraph&quot;&gt;The way this conceptual packaging actually manifests in the API is a special parameter called &lt;code class=&quot;InlineCode&quot;&gt;error_on_requires_action&lt;/code&gt;. This parameter tells the PaymentIntent to error if further action is required to complete the payment. A user who wants a simple payment flow like &lt;code class=&quot;InlineCode&quot;&gt;Charges&lt;/code&gt; won’t be able handle any actions required by the PaymentIntent state machine.&lt;/p&gt;
&lt;div class=&quot;BlogBodyCodeSnippet&quot;&gt;
&lt;div class=&quot; Card BlogBodyCodeSnippet__card theme--Dark&quot;&gt;
&lt;div class=&quot; Card&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot; CodeEditor CodeEditor--focused CodeEditor--autosize&quot; aria-hidden=&quot;true&quot; data-js-controller=&quot;CodeEditor&quot; data-js-language-mode=&quot;bash&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;# Our packaging made PaymentIntents seven lines of code. curl https://api.stripe.com/v1/payment_intents \ -u sk_test_xxx: \ -d amount=1099 \ -d currency=usd \ -d confirm=true \ -d payment_method=&quot;{{PAYMENT_METHOD_ID}}&quot; \ -d error_on_requires_action=true&lt;/p&gt;
&lt;pre class=&quot;CodeSyntax CodeEditor__editor&quot;&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code class=&quot;CodeEditor__scrollContainer&quot; data-js-target=&quot;CodeEditor.scrollContainer&quot;&gt;&lt;span class=&quot;CodeEditorLineNumbers__number&quot; data-js-target=&quot;CodeEditorLineNumbers.firstLineNumber&quot;&gt;~&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 &lt;span class=&quot;CodeEditor__typingArea&quot;&gt;
        
      &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;BlogBodyParagraph&quot;&gt;The parameter name makes it &lt;em&gt;very&lt;/em&gt; clear what users are choosing. Additionally, this approach allows us to easily track how often users choose this integration path, which would not be possible if we’d just recommended that U.S. users &lt;em&gt;ignore&lt;/em&gt; PaymentIntent states they couldn’t handle. Someday that eager developer will have the time to build out a webhooks integration or will need to add a new payment method. When that day comes, it’s clear what they need to do: remove the parameter from the integration to start handling the &lt;code class=&quot;InlineCode&quot;&gt;requires_action&lt;/code&gt; state. Developers using this &lt;em&gt;packaging&lt;/em&gt; of PaymentIntents don’t have to change the core resources at play, even when they upgrade to the global integration.&lt;/p&gt;
&lt;div class=&quot; Card Card--border BlogBodyImageCard&quot;&gt;&lt;img class=&quot;BlogBodyImageCard__image&quot; alt=&quot;payment api design graph 2&quot; src=&quot;https://images.ctfassets.net/fzn2n1nzq965/4HEjlPnd8KeOsjMpvQq5Mf/8bebf45089160bb36f32b250395d54c4/blog-payment-api-design-graph-2.svg?w=1620&amp;amp;q=80&quot; loading=&quot;lazy&quot;/&gt;&lt;/div&gt;
&lt;p&gt;Our simple packaging of PaymentIntents for U.S. and Canadian card payments requires the same amount of effort to integrate as &lt;code class=&quot;InlineCode&quot;&gt;Charges&lt;/code&gt;.&lt;/p&gt;
&lt;p class=&quot;BlogBodyParagraph&quot;&gt;With this packaging, we were able to provide a low-effort integration similar to &lt;code class=&quot;InlineCode&quot;&gt;Charges&lt;/code&gt; for users who had no interest in doing a global-payments-ready integration up front.&lt;/p&gt;
&lt;blockquote class=&quot;BlogBodyTherequote&quot; readability=&quot;30&quot;&gt;
&lt;p&gt;Keeping things simple doesn’t just mean reducing the number of resources or parameters.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;BlogBodyParagraph&quot;&gt;Two overloaded API abstractions are not simpler and are definitely not more flexible and powerful than three or four clearly-defined abstractions. Keeping things simple means making sure your APIs are consistent and predictable—and that you’re creating the right packages to gradually reveal the power of your API as your users need it. It also means not underestimating your user. It’s tempting to abstract away too much in service of “keeping things simple,” but users will often quickly discover that they need more control.&lt;/p&gt;
&lt;h2 class=&quot;BlogBodyTitle&quot;&gt;An API product is more than just the API&lt;/h2&gt;
&lt;p class=&quot;BlogBodyParagraph&quot;&gt;There has—and will always be—many lines of code propping up the vaunted “seven lines of code.” It’s reliably the case with APIs. They don’t happen without a lot of work that isn’t designing or building the actual API. Much of the effort required is unglamorous and tedious, like tracking down every piece of documentation, support article, and canned response that references the old APIs, reaching out to folks who have made community content and asking them to update it, and planning and recording many tutorials for users and user-facing teams.&lt;/p&gt;
&lt;p class=&quot;BlogBodyParagraph&quot;&gt;There’s also the teams that appear on the periphery, but are instrumental in the success of APIs. There’s the &lt;a class=&quot; Link&quot; href=&quot;https://stripe.com/docs/payments/integration-builder&quot; data-js-controller=&quot;AnalyticsButton&quot; data-analytics-category=&quot;Links&quot; data-analytics-action=&quot;Clicked&quot; data-analytics-label=&quot;&quot;&gt;documentation&lt;/a&gt; and developer products that supplement the integration experience. &lt;a class=&quot; Link&quot; href=&quot;https://stripe.com/docs/stripe-cli&quot; data-js-controller=&quot;AnalyticsButton&quot; data-analytics-category=&quot;Links&quot; data-analytics-action=&quot;Clicked&quot; data-analytics-label=&quot;&quot;&gt;Stripe CLI&lt;/a&gt;’s launch made webhooks much less daunting. A redesign of the information architecture of our documentation made relevant guides easier to find. &lt;a class=&quot; Link&quot; href=&quot;https://github.com/stripe-samples&quot; data-js-controller=&quot;AnalyticsButton&quot; data-analytics-category=&quot;Links&quot; data-analytics-action=&quot;Clicked&quot; data-analytics-label=&quot;&quot;&gt;Stripe Samples&lt;/a&gt; allows developers who prefer to learn by example rather than prose to just start with some working code. A redesign of the payments view in the Stripe Dashboard allows developers to more easily debug and understand the PaymentIntent state machine.&lt;/p&gt;
&lt;p class=&quot;BlogBodyParagraph&quot;&gt;The care, choices, and effort of Stripes past and present from across the company contributed to our most recent two-year effort to design and launch our new payments APIs. The more we grow, the more we realize that we must continue to build and rebuild deliberately and thoughtfully. These are still early days. &lt;a class=&quot; Link&quot; href=&quot;https://stripe.com/jobs/search?t=engineering&quot; data-js-controller=&quot;AnalyticsButton&quot; data-analytics-category=&quot;Links&quot; data-analytics-action=&quot;Clicked&quot; data-analytics-label=&quot;&quot;&gt;Come join us&lt;/a&gt;.&lt;/p&gt;
</description>
<pubDate>Thu, 17 Dec 2020 14:04:21 +0000</pubDate>
<dc:creator>dguo</dc:creator>
<og:title>Stripe’s payments APIs: the first ten years</og:title>
<og:description>Abstracting away the complexity of payments has driven the evolution of our APIs over the last decade. This post provides the context, inflection points, and conceptual frameworks behind our API design.</og:description>
<dc:language>en-us</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://stripe.com/blog/payment-api-design</dc:identifier>
</item>
<item>
<title>SEC charges Robinhood $65M for misleading customers about revenue sources</title>
<link>https://www.sec.gov/news/press-release/2020-321</link>
<guid isPermaLink="true" >https://www.sec.gov/news/press-release/2020-321</guid>
<description>&lt;p&gt;Washington D.C., Dec. 17, 2020 —&lt;/p&gt;&lt;div readability=&quot;98&quot;&gt;
&lt;p&gt;The Securities and Exchange Commission today charged Robinhood Financial LLC for repeated misstatements that failed to disclose the firm’s receipt of payments from trading firms for routing customer orders to them, and with failing to satisfy its duty to seek the best reasonably available terms to execute customer orders.  Robinhood agreed to pay $65 million to settle the charges.&lt;/p&gt;
&lt;p&gt;According to the SEC’s order, between 2015 and late 2018, Robinhood made misleading statements and omissions in customer communications, including in FAQ pages on its website, about its largest revenue source when describing how it made money – namely, payments from trading firms in exchange for Robinhood sending its customer orders to those firms for execution, also known as “payment for order flow.”  As the SEC’s order finds, one of Robinhood’s selling points to customers was that trading was “commission free,” but due in large part to its unusually high payment for order flow rates, Robinhood customers’ orders were executed at prices that were inferior to other brokers’ prices.  Despite this, according to the SEC’s order, Robinhood falsely claimed in a website FAQ between October 2018 and June 2019 that its execution quality matched or beat that of its competitors.  The order finds that Robinhood provided inferior trade prices that in aggregate deprived customers of $34.1 million even after taking into account the savings from not paying a commission.  Robinhood made these false and misleading statements during the time in which it was growing rapidly.&lt;/p&gt;
&lt;p&gt;“Robinhood provided misleading information to customers about the true costs of choosing to trade with the firm,” said Stephanie Avakian, Director of the SEC’s Enforcement Division.  “Brokerage firms cannot mislead customers about order execution quality.”&lt;/p&gt;
&lt;p&gt;“Robinhood failed to seek to obtain the best reasonably available terms when executing customers’ orders, causing customers to lose tens of millions of dollars,” said Joseph Sansone, Chief of the SEC Enforcement Division’s Market Abuse Unit.  “Today’s action sends a clear message that the Commission will not allow brokers to ignore their obligations to customers.”&lt;/p&gt;
&lt;p&gt;“There are many new companies seeking to harness the power of technology to provide alternative ways for people to invest their money,” added Erin E. Schneider, Director of the SEC’s San Francisco Regional Office.  “But innovation does not negate responsibility under the federal securities laws.”&lt;/p&gt;
&lt;p&gt;Without admitting or denying the SEC’s findings, Robinhood agreed to a cease-and-desist order prohibiting it from violating the antifraud provisions of the Securities Act of 1933 and the recordkeeping provisions of the Securities Exchange Act of 1934, censuring it, and requiring it to pay a $65 million civil penalty.  Robinhood also agreed to retain an independent consultant to review its policies and procedures relating to customer communications, payment for order flow, and best execution of customer orders, and to ensure that Robinhood is effectively following those policies and procedures.&lt;/p&gt;
&lt;p&gt;The SEC’s investigation was conducted by Jonathan Warner and Ainsley Kerr of the Market Abuse Unit and Matthew Meyerhofer, Victor Hong, and Andrew Hefty of the San Francisco Regional Office.  The case was supervised by Steven Buchholz and Mr. Sansone of the Market Abuse Unit and Monique C. Winkler of the San Francisco Regional Office.  Examinations of Robinhood conducted by Michael Marren, Catherine Cotey, Michael Wells, David Kinsella, and John Broderson of the SEC’s Chicago Regional Office and Jerry Schoenborn, Shanti Radkar, Marcus Chan, and Stephanie Wilson of the SEC’s San Francisco Regional Office contributed to the investigation.  The SEC also acknowledges the assistance of the Financial Industry Regulatory Authority.&lt;/p&gt;
&lt;/div&gt;</description>
<pubDate>Thu, 17 Dec 2020 14:02:58 +0000</pubDate>
<dc:creator>ericliuche</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.sec.gov/news/press-release/2020-321</dc:identifier>
</item>
<item>
<title>Cloudflare Pages: the best way to build JAMstack websites</title>
<link>https://blog.cloudflare.com/cloudflare-pages/</link>
<guid isPermaLink="true" >https://blog.cloudflare.com/cloudflare-pages/</guid>
<description>&lt;img src=&quot;https://blog.cloudflare.com/content/images/2020/12/Cloudflare-Pages.png&quot; class=&quot;kg-image&quot; alt=&quot;Introducing Cloudflare Pages: the best way to build JAMstack websites&quot;/&gt;&lt;p&gt;Across multiple cultures around the world, this time of year is a time of celebration and sharing of gifts with the people we care the most about. In that spirit, we thought we'd take this time to give back to the developer community that has been so supportive of Cloudflare for the last 10 years.&lt;/p&gt;&lt;p&gt;Today, we’re excited to announce &lt;a href=&quot;https://pages.cloudflare.com&quot;&gt;Cloudflare Pages&lt;/a&gt;: a fast, secure and free way to build and host your &lt;a href=&quot;https://www.cloudflare.com/learning/performance/what-is-jamstack/&quot;&gt;JAMstack sites&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;today-the-path-from-an-idea-to-a-website-is-paved-with-good-intentions&quot;&gt;Today, the path from an idea to a website is paved with good intentions&lt;/h2&gt;
&lt;p&gt;Websites are the way we express ourselves on the web. It doesn’t matter if you’re a hobbyist with a blog, or the largest of corporations with millions of customers — if you want to reach people outside the confines of &lt;s&gt;140&lt;/s&gt; 280 characters, the web is the place to be.&lt;/p&gt;
&lt;p&gt;As a frontend developer, it’s your responsibility to bring this expression to life. And make no mistake — with so many frontend frameworks, tooling, and static site generators at your disposal — it’s a great time to be in your line of work.&lt;/p&gt;
&lt;p&gt;That is, of course, right up until the point when you’re ready to show your work off to the world. That’s when things can start to get a little hairy.&lt;/p&gt;
&lt;p&gt;At this point, continuing to keep things local rather than committing to source starts to become… irresponsible. But then: how do you quickly iterate and maintain momentum? As you change things, you need to make sure those changes don’t get lost — saving them to source control — while keeping in sync with what’s currently deployed to production.&lt;/p&gt;
&lt;p&gt;There are no great solutions.&lt;/p&gt;
&lt;p&gt;If you’re in a larger organization, you might have a DevOps organization devoted to exactly that: automating deployments using Continuous Integration (CI) tooling.&lt;/p&gt;
&lt;p&gt;Most CI tooling, however, is quite cumbersome, and for good reason — to allow organizations to customize their automation, regardless of their stack and setup. But for the purpose of developing a website, it can still feel like an unnecessary and frustrating diversion on the road to delivering your web project. Configuring a .yaml file, adding and removing commands, waiting minutes for each build to run, and praying to the CI gods at each one that these are the right commands. Hopelessly rerunning the same build over and over, and expecting a different result.  &lt;/p&gt;
&lt;p&gt;Often, hours are lost. The process stands in the way of you and doing your best work.&lt;/p&gt;
&lt;h2 id=&quot;cloudflare-pages-letting-frontend-devs-do-what-they-do-best&quot;&gt;Cloudflare Pages: letting frontend devs do what they do best&lt;/h2&gt;
&lt;p&gt;We think there’s a better way.&lt;/p&gt;
&lt;p&gt;With Cloudflare Pages, we set out to simplify every step along the journey by tying deployment to your existing development workflow.&lt;/p&gt;
&lt;h3 id=&quot;seamless-git-integration-with-builds-built-in&quot;&gt;Seamless Git integration, with builds built-in&lt;/h3&gt;
&lt;p&gt;With Cloudflare Pages, all you have to do is select your repo, and tell us which framework you’re using. We’ll take care of chanting CI incantations on your behalf, while you keep doing what you were already doing: &lt;code&gt;git commit&lt;/code&gt; and &lt;code&gt;git push&lt;/code&gt; your changes — we’ll build and deploy them for you.&lt;/p&gt;
&lt;p&gt;As the project grows, so do the stakes, and the number of collaborators.&lt;/p&gt;
&lt;p&gt;For a site in production, changes need to be reviewed thoroughly. As the reviewer, looking at the code, and skimming for red flags only gets you so far. To thoroughly review, you have to commit or &lt;code&gt;git stash&lt;/code&gt; your changes, pull down locally, get it running to make sure it actually works — looking at code alone won’t catch everything!&lt;/p&gt;
&lt;p&gt;The other developers on the team are not the only stakeholders. There are designers, marketers, PMs who want to provide feedback before the changes go out.&lt;/p&gt;
&lt;h3 id=&quot;unique-preview-urls&quot;&gt;Unique preview URLs&lt;/h3&gt;
&lt;p&gt;With Cloudflare Pages, each commit gets its own unique URL. Preview URLs make it easier to get meaningful code reviews without the overhead of pulling down the branch. They also make it easier to get feedback from PMs, designers and marketers on the latest iteration, bridging the gap between mocks and code.&lt;/p&gt;
&lt;h3 id=&quot;infinite-staging&quot;&gt;Infinite staging&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;“Does anyone mind if I take over staging?”&lt;/em&gt; might also sound like a familiar question. With Cloudflare Pages, each feature branch will have its own dedicated consistent alias, allowing you to have a consistent URL for the latest changes.&lt;/p&gt;
&lt;p&gt;With Preview and Production environments, all feature branches and preview links will be built with preview variables, so you can experiment without impacting production data.&lt;/p&gt;
&lt;p&gt;When you’re ready to deploy to production, we’ll redeploy to production for you with the updated production environment variables.&lt;/p&gt;
&lt;h3 id=&quot;collaboration-for-all&quot;&gt;Collaboration for all&lt;/h3&gt;
&lt;p&gt;Collaboration is the key to building amazing websites and products — the more the merrier! As a security company, we definitely don’t want you sharing password and credentials. Which is why we provide multi user access for free for unlimited users — invite all your friends, on us!&lt;/p&gt;
&lt;h3 id=&quot;modern-sites-with-modern-standards&quot;&gt;Modern sites with modern standards&lt;/h3&gt;
&lt;p&gt;We all know premature optimization is a cardinal sin, but once your project is in front of customers you want to have the best performance possible. If it’s successful, you also want it to be available!&lt;/p&gt;
&lt;p&gt;Today, this is time you have to spend optimizing performance (chasing those 100 lighthouse scores), and scaling, from a few to millions of users.&lt;/p&gt;
&lt;p&gt;Luckily, we happen to know a thing or two about running a global network of 200 data centers though, so we’ve got you covered.&lt;/p&gt;
&lt;p&gt;With Pages, your site is deployed directly to our edge, milliseconds away from customers, and at global scale.&lt;/p&gt;
&lt;p&gt;The latest web standards are fun to read about on Hacker News but not fun to implement yourself. With Cloudflare Pages, we’ll do the heavy lifting to keep you ahead of the curve: IPv6, HTTP/3, TLS 1.3, all the latest image formats.&lt;/p&gt;
&lt;h2 id=&quot;oh-and-one-more-thing&quot;&gt;Oh, and one more thing&lt;/h2&gt;
&lt;p&gt;We’re really excited for developers and their teams to use Cloudflare Pages to collaborate on the best static sites together. There’s just one thing that didn’t sit quite right with us: why stop at static sites?&lt;/p&gt;
&lt;p&gt;What if we could make building &lt;em&gt;full-blown, dynamic applications just as easy&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;Although APIs are a core part of the JAMstack, today that refers primarily to the robust API economy developers have access to. And while that’s great, it’s not always enough. If you want to build your own APIs, and store user or application data, you need more than third party APIs. What to do, though?&lt;/p&gt;
&lt;p&gt;Well, this is the point at which it’s mighty helpful we’ve already built a global serverless platform: &lt;a href=&quot;https://workers.cloudflare.com/&quot;&gt;Cloudflare Workers&lt;/a&gt;. Workers allows frontend developers to easily write scalable backends to their applications in the same language as the frontend, JavaScript.&lt;/p&gt;
&lt;p&gt;Over the coming months, we’ll be working on integrating Workers and Pages into a seamless experience. It’ll work the exact same way Pages does: just write your code, git push, and we’ll deploy it for you. The only difference is, it won’t just be your frontend, it’ll be your backend, too. And just to be clear: this is not just for stateless functions. With Workers KV and Durable Objects, we see a huge opportunity to really enable any web application to be built on this platform.&lt;/p&gt;
&lt;p&gt;We’re super excited about the future of Pages, and how with the power of Cloudflare Workers behind it, it represents a bold vision for how new applications are going to be built on the web.&lt;/p&gt;
&lt;p&gt;But you know the thing about gifts? They’re no good without someone to receive them. We’d love for you to &lt;a href=&quot;https://www.cloudflare.com/pages-jamstack-platform-beta-sign-up/&quot;&gt;sign up for our beta&lt;/a&gt; and try out &lt;a href=&quot;https://pages.cloudflare.com/&quot;&gt;Cloudflare Pages&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id=&quot;ps-we-re-hiring-&quot;&gt;PS: we’re hiring!&lt;/h2&gt;
&lt;p&gt;Want to help us shape the future of development on the web? &lt;a href=&quot;https://www.cloudflare.com/careers/&quot;&gt;Join our team&lt;/a&gt;.&lt;/p&gt;
</description>
<pubDate>Thu, 17 Dec 2020 14:00:14 +0000</pubDate>
<dc:creator>adspedia</dc:creator>
<og:type>article</og:type>
<og:title>Introducing Cloudflare Pages: the best way to build JAMstack websites</og:title>
<og:description>Across multiple cultures around the world, this time of year is a time of celebration and sharing of gifts with the people we care the most about.</og:description>
<og:url>https://blog.cloudflare.com/cloudflare-pages/</og:url>
<og:image>https://blog.cloudflare.com/content/images/2020/12/facebook-link-image-18.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.cloudflare.com/cloudflare-pages/</dc:identifier>
</item>
<item>
<title>Zstandard v1.4.7</title>
<link>https://github.com/facebook/zstd/releases/tag/v1.4.7</link>
<guid isPermaLink="true" >https://github.com/facebook/zstd/releases/tag/v1.4.7</guid>
<description>&lt;p&gt;&lt;code&gt;v1.4.7&lt;/code&gt; unleashes several months of improvements across many axis, from performance to various fixes, to new capabilities, of which a few are highlighted below. It’s a recommended upgrade.&lt;/p&gt;
&lt;p&gt;(Note: if you ever wondered what happened to &lt;code&gt;v1.4.6&lt;/code&gt;, it’s an internal release number reserved for synchronization with Linux Kernel)&lt;/p&gt;
&lt;h2&gt;Improved &lt;code&gt;--long&lt;/code&gt; mode&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;--long&lt;/code&gt; mode makes it possible to analyze vast quantities of data in reasonable time and memory budget. The &lt;code&gt;--long&lt;/code&gt; mode algorithm runs on top of the regular match finder, and both contribute to the final compressed outcome.&lt;br/&gt;However, the fact that these 2 stages were working independently resulted in minor discrepancies at highest compression levels, where the cost of each decision must be carefully monitored. For this reason, in situations where the input is not a good fit for &lt;code&gt;--long&lt;/code&gt; mode (no large repetition at long distance), enabling it &lt;em&gt;could&lt;/em&gt; reduce compression performance, even if by very little, compared to not enabling it (at high compression levels). This situation made it more difficult to &quot;just always enable&quot; the &lt;code&gt;--long&lt;/code&gt; mode by default.&lt;br/&gt;This is fixed in this version. For compression levels 16 and up, usage of &lt;code&gt;--long&lt;/code&gt; will now never regress compared to compression without &lt;code&gt;--long&lt;/code&gt;. This property made it possible to ramp up &lt;code&gt;--long&lt;/code&gt; mode contribution to the compression mix, improving its effectiveness.&lt;/p&gt;
&lt;p&gt;The compression ratio improvements are most notable when &lt;code&gt;--long&lt;/code&gt; mode is actually useful. In particular, &lt;code&gt;--patch-from&lt;/code&gt; (which implicitly relies on &lt;code&gt;--long&lt;/code&gt;) shows excellent gains from the improvements. We present some brief results &lt;a href=&quot;https://github.com/facebook/zstd/wiki/Zstandard-as-a-patching-engine&quot;&gt;here&lt;/a&gt; (tested on Macbook Pro 16“, i9).&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://user-images.githubusercontent.com/750081/102455532-a05dbd00-3ff4-11eb-9abf-f997d6958f11.png&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/750081/102455532-a05dbd00-3ff4-11eb-9abf-f997d6958f11.png&quot; alt=&quot;long_v145_v147&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Since &lt;code&gt;--long&lt;/code&gt; mode is now always beneficial at high compression levels, it’s now automatically enabled for any window size &amp;gt;= 128MB and up.&lt;/p&gt;
&lt;h2&gt;Faster decompression of small blocks&lt;/h2&gt;
&lt;p&gt;This release includes optimizations that significantly speed up decompression of small blocks and small data. The decompression speed gains will vary based on the block size according to the table below:&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Block Size&lt;/th&gt;
&lt;th&gt;Decompression Speed Improvement&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1 KB&lt;/td&gt;
&lt;td&gt;~+30%&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2 KB&lt;/td&gt;
&lt;td&gt;~+30%&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4 KB&lt;/td&gt;
&lt;td&gt;~+25%&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;8 KB&lt;/td&gt;
&lt;td&gt;~+15%&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;16 KB&lt;/td&gt;
&lt;td&gt;~+10%&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;32 KB&lt;/td&gt;
&lt;td&gt;~+5%&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;These optimizations come from improving the process of reading the block header, and building the Huffman and FSE decoding tables. &lt;code&gt;zstd&lt;/code&gt;’s default block size is 128 KB, and at this block size the time spent decompressing the data dominates the time spent reading the block header and building the decoding tables. But, as blocks become smaller, the cost of reading the block header and building decoding tables becomes more prominent.&lt;/p&gt;
&lt;h2&gt;CLI improvements&lt;/h2&gt;
&lt;p&gt;The CLI received several noticeable upgrades with this version.&lt;br/&gt;To begin with, &lt;code&gt;zstd&lt;/code&gt; can accept a new parameter through environment variable, &lt;code&gt;ZSTD_NBTHREADS&lt;/code&gt; . It’s useful when &lt;code&gt;zstd&lt;/code&gt; is called behind an application (&lt;code&gt;tar&lt;/code&gt;, or a python script for example). Also, users which prefer multithreaded compression by default can now set a desired nb of threads with their environment. This setting can still be overridden on demand via command line.&lt;br/&gt;A new command &lt;code&gt;--output-dir-mirror&lt;/code&gt; makes it possible to compress a directory containing subdirectories (typically with &lt;code&gt;-r&lt;/code&gt; command) producing one compressed file per source file, and reproduce the arborescence into a selected destination directory.&lt;br/&gt;There are other various improvements, such as more accurate warning and error messages, full equivalence between conventions &lt;code&gt;--long-command=FILE&lt;/code&gt; and &lt;code&gt;--long-command FILE&lt;/code&gt;, fixed confusion risks between &lt;code&gt;stdin&lt;/code&gt; and user prompt, or between console output and status message, as well as a new short execution summary when processing multiple files, cumulatively contributing to a nicer command line experience.&lt;/p&gt;
&lt;h2&gt;New experimental features&lt;/h2&gt;
&lt;h3&gt;Shared Thread Pool&lt;/h3&gt;
&lt;p&gt;By default, each compression context can be set to use a maximum nb of threads.&lt;br/&gt;In complex scenarios, there might be multiple compression contexts, working in parallel, and each using some nb of threads. In such cases, it might be desirable to control the &lt;em&gt;total&lt;/em&gt; nb of threads used by &lt;em&gt;all&lt;/em&gt; these compression contexts altogether.&lt;/p&gt;
&lt;p&gt;This is now possible, by making all these compression contexts share the same threadpool. This capability is expressed thanks to a new advanced compression parameter, &lt;code&gt;ZSTD_CCtx_refThreadPool()&lt;/code&gt;, contributed by &lt;a class=&quot;user-mention&quot; data-hovercard-type=&quot;user&quot; data-hovercard-url=&quot;/users/marxin/hovercard&quot; data-octo-click=&quot;hovercard-link-click&quot; data-octo-dimensions=&quot;link_type:self&quot; href=&quot;https://github.com/marxin&quot;&gt;@marxin&lt;/a&gt;. See its &lt;a href=&quot;https://github.com/facebook/zstd/blob/v1.4.7/lib/zstd.h#L1501&quot;&gt;documentation&lt;/a&gt; for more details.&lt;/p&gt;
&lt;h3&gt;Faster Dictionary Compression&lt;/h3&gt;
&lt;p&gt;This release introduces a new experimental dictionary compression algorithm, applicable to mid-range compression levels, employing strategies such as &lt;code&gt;ZSTD_greedy&lt;/code&gt;, &lt;code&gt;ZSTD_lazy&lt;/code&gt;, and &lt;code&gt;ZSTD_lazy2&lt;/code&gt;. This new algorithm can be triggered by selecting the compression parameter &lt;code&gt;ZSTD_c_enableDedicatedDictSearch&lt;/code&gt; during &lt;code&gt;ZSTD_CDict&lt;/code&gt; creation (experimental section).&lt;/p&gt;
&lt;p&gt;Benchmarks show the new algorithm providing significant compression speed gains :&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Level&lt;/th&gt;
&lt;th&gt;Hot Dict&lt;/th&gt;
&lt;th&gt;Cold Dict&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;~+17%&lt;/td&gt;
&lt;td&gt;~+30%&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;~+12%&lt;/td&gt;
&lt;td&gt;~+45%&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;~+13%&lt;/td&gt;
&lt;td&gt;~+40%&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;~+16%&lt;/td&gt;
&lt;td&gt;~+50%&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;~+19%&lt;/td&gt;
&lt;td&gt;~+65%&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;~+24%&lt;/td&gt;
&lt;td&gt;~+70%&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;We hope it will help making mid-levels compression more attractive for dictionary scenarios. See &lt;a href=&quot;https://github.com/facebook/zstd/blob/9f8b180/lib/zstd.h#L1663-L1717&quot;&gt;the documentation&lt;/a&gt; for more details. Feedback is welcome!&lt;/p&gt;
&lt;h3&gt;New Sequence Ingestion API&lt;/h3&gt;
&lt;p&gt;We introduce a new entry point, &lt;code&gt;ZSTD_compressSequences()&lt;/code&gt;, which makes it possible for users to define their own sequences, by whatever mechanism they prefer, and present them to this new entry point, which will generate a single &lt;code&gt;zstd&lt;/code&gt;-compressed frame, based on provided sequences.&lt;/p&gt;
&lt;p&gt;So for example, users can now feed to the function an array of externally generated &lt;code&gt;ZSTD_Sequence&lt;/code&gt;:&lt;br/&gt;&lt;code&gt;[(offset: 5, matchLength: 4, litLength: 10), (offset: 7, matchLength: 6, litLength: 3), ...]&lt;/code&gt; and the function will output a zstd compressed frame based on these sequences.&lt;/p&gt;
&lt;p&gt;This experimental API has currently several limitations (and its relevant params exist in the “experimental” section). Notably, this API currently ignores any repeat offsets provided, instead always recalculating them on the fly. Additionally, there is no way to forcibly specify existence of certain zstd features, such as RLE or raw blocks.&lt;br/&gt;If you are interested in this new entry point, please refer to &lt;code&gt;zstd.h&lt;/code&gt; for more detailed usage instructions.&lt;/p&gt;
&lt;h2&gt;Changelog&lt;/h2&gt;
&lt;p&gt;There are many other features and improvements in this release, and since we can’t highlight them all, they are listed below:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;perf: stronger &lt;code&gt;--long&lt;/code&gt; mode at high compression levels, by &lt;a class=&quot;user-mention&quot; data-hovercard-type=&quot;user&quot; data-hovercard-url=&quot;/users/senhuang42/hovercard&quot; data-octo-click=&quot;hovercard-link-click&quot; data-octo-dimensions=&quot;link_type:self&quot; href=&quot;https://github.com/senhuang42&quot;&gt;@senhuang42&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;perf: stronger &lt;code&gt;--patch-from&lt;/code&gt; at high compression levels, thanks to &lt;code&gt;--long&lt;/code&gt; improvements&lt;/li&gt;
&lt;li&gt;perf: faster decompression speed for small blocks, by &lt;a class=&quot;user-mention&quot; data-hovercard-type=&quot;user&quot; data-hovercard-url=&quot;/users/terrelln/hovercard&quot; data-octo-click=&quot;hovercard-link-click&quot; data-octo-dimensions=&quot;link_type:self&quot; href=&quot;https://github.com/terrelln&quot;&gt;@terrelln&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;perf: faster dictionary compression at medium compression levels, by &lt;a class=&quot;user-mention&quot; data-hovercard-type=&quot;user&quot; data-hovercard-url=&quot;/users/felixhandte/hovercard&quot; data-octo-click=&quot;hovercard-link-click&quot; data-octo-dimensions=&quot;link_type:self&quot; href=&quot;https://github.com/felixhandte&quot;&gt;@felixhandte&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;perf: small speed &amp;amp; memory usage improvements for &lt;code&gt;ZSTD_compress2()&lt;/code&gt;, by &lt;a class=&quot;user-mention&quot; data-hovercard-type=&quot;user&quot; data-hovercard-url=&quot;/users/terrelln/hovercard&quot; data-octo-click=&quot;hovercard-link-click&quot; data-octo-dimensions=&quot;link_type:self&quot; href=&quot;https://github.com/terrelln&quot;&gt;@terrelln&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;perf: minor generic decompression speed improvements, by &lt;a class=&quot;user-mention&quot; data-hovercard-type=&quot;user&quot; data-hovercard-url=&quot;/users/helloguo/hovercard&quot; data-octo-click=&quot;hovercard-link-click&quot; data-octo-dimensions=&quot;link_type:self&quot; href=&quot;https://github.com/helloguo&quot;&gt;@helloguo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;perf: improved fast compression speeds with Visual Studio, by &lt;a class=&quot;user-mention&quot; data-hovercard-type=&quot;user&quot; data-hovercard-url=&quot;/users/animalize/hovercard&quot; data-octo-click=&quot;hovercard-link-click&quot; data-octo-dimensions=&quot;link_type:self&quot; href=&quot;https://github.com/animalize&quot;&gt;@animalize&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;cli : Set nb of threads with environment variable &lt;code&gt;ZSTD_NBTHREADS&lt;/code&gt;, by &lt;a class=&quot;user-mention&quot; data-hovercard-type=&quot;user&quot; data-hovercard-url=&quot;/users/senhuang42/hovercard&quot; data-octo-click=&quot;hovercard-link-click&quot; data-octo-dimensions=&quot;link_type:self&quot; href=&quot;https://github.com/senhuang42&quot;&gt;@senhuang42&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;cli : new &lt;code&gt;--output-dir-mirror DIR&lt;/code&gt; command, by &lt;a class=&quot;user-mention&quot; data-hovercard-type=&quot;user&quot; data-hovercard-url=&quot;/users/xxie24/hovercard&quot; data-octo-click=&quot;hovercard-link-click&quot; data-octo-dimensions=&quot;link_type:self&quot; href=&quot;https://github.com/xxie24&quot;&gt;@xxie24&lt;/a&gt; (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load title&quot; data-id=&quot;644038051&quot; data-permission-text=&quot;Title is private&quot; data-url=&quot;https://github.com/facebook/zstd/issues/2219&quot; data-hovercard-type=&quot;pull_request&quot; data-hovercard-url=&quot;/facebook/zstd/pull/2219/hovercard&quot; href=&quot;https://github.com/facebook/zstd/pull/2219&quot;&gt;#2219&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;cli : accept decompressing files with &lt;code&gt;*.zstd&lt;/code&gt; suffix&lt;/li&gt;
&lt;li&gt;cli : &lt;code&gt;--patch-from&lt;/code&gt; can compress &lt;code&gt;stdin&lt;/code&gt; when used with &lt;code&gt;--stream-size&lt;/code&gt;, by &lt;a class=&quot;user-mention&quot; data-hovercard-type=&quot;user&quot; data-hovercard-url=&quot;/users/bimbashrestha/hovercard&quot; data-octo-click=&quot;hovercard-link-click&quot; data-octo-dimensions=&quot;link_type:self&quot; href=&quot;https://github.com/bimbashrestha&quot;&gt;@bimbashrestha&lt;/a&gt; (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load title&quot; data-id=&quot;641394979&quot; data-permission-text=&quot;Title is private&quot; data-url=&quot;https://github.com/facebook/zstd/issues/2206&quot; data-hovercard-type=&quot;pull_request&quot; data-hovercard-url=&quot;/facebook/zstd/pull/2206/hovercard&quot; href=&quot;https://github.com/facebook/zstd/pull/2206&quot;&gt;#2206&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;cli : provide a condensed summary by default when processing multiple files&lt;/li&gt;
&lt;li&gt;cli : fix : &lt;code&gt;stdin&lt;/code&gt; input can no longer be confused with user prompt&lt;/li&gt;
&lt;li&gt;cli : fix : console output no longer mixes &lt;code&gt;stdout&lt;/code&gt; and status messages&lt;/li&gt;
&lt;li&gt;cli : improve accuracy of several error messages&lt;/li&gt;
&lt;li&gt;api : new sequence ingestion API, by &lt;a class=&quot;user-mention&quot; data-hovercard-type=&quot;user&quot; data-hovercard-url=&quot;/users/senhuang42/hovercard&quot; data-octo-click=&quot;hovercard-link-click&quot; data-octo-dimensions=&quot;link_type:self&quot; href=&quot;https://github.com/senhuang42&quot;&gt;@senhuang42&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;api : shared thread pool: control total nb of threads used by multiple compression jobs, by &lt;a class=&quot;user-mention&quot; data-hovercard-type=&quot;user&quot; data-hovercard-url=&quot;/users/marxin/hovercard&quot; data-octo-click=&quot;hovercard-link-click&quot; data-octo-dimensions=&quot;link_type:self&quot; href=&quot;https://github.com/marxin&quot;&gt;@marxin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;api : new &lt;code&gt;ZSTD_getDictID_fromCDict()&lt;/code&gt;, by &lt;a class=&quot;user-mention&quot; data-hovercard-type=&quot;user&quot; data-hovercard-url=&quot;/users/LuAPi/hovercard&quot; data-octo-click=&quot;hovercard-link-click&quot; data-octo-dimensions=&quot;link_type:self&quot; href=&quot;https://github.com/LuAPi&quot;&gt;@LuAPi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;api : zlibWrapper only uses public API, and is compatible with dynamic library, by &lt;a class=&quot;user-mention&quot; data-hovercard-type=&quot;user&quot; data-hovercard-url=&quot;/users/terrelln/hovercard&quot; data-octo-click=&quot;hovercard-link-click&quot; data-octo-dimensions=&quot;link_type:self&quot; href=&quot;https://github.com/terrelln&quot;&gt;@terrelln&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;api : fix : multithreaded compression has predictable output even in special cases (see &lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load title&quot; data-id=&quot;708592724&quot; data-permission-text=&quot;Title is private&quot; data-url=&quot;https://github.com/facebook/zstd/issues/2327&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/facebook/zstd/issues/2327/hovercard&quot; href=&quot;https://github.com/facebook/zstd/issues/2327&quot;&gt;#2327&lt;/a&gt;) (issue not present on cli)&lt;/li&gt;
&lt;li&gt;api : fix : dictionary compression correctly respects dictionary compression level (see &lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load title&quot; data-id=&quot;698289707&quot; data-permission-text=&quot;Title is private&quot; data-url=&quot;https://github.com/facebook/zstd/issues/2303&quot; data-hovercard-type=&quot;pull_request&quot; data-hovercard-url=&quot;/facebook/zstd/pull/2303/hovercard&quot; href=&quot;https://github.com/facebook/zstd/pull/2303&quot;&gt;#2303&lt;/a&gt;) (issue not present on cli)&lt;/li&gt;
&lt;li&gt;api : fix : return &lt;code&gt;dstSize_tooSmall&lt;/code&gt; error whenever appropriate&lt;/li&gt;
&lt;li&gt;api : fix : &lt;code&gt;ZSTD_initCStream_advanced()&lt;/code&gt; with static allocation and no dictionary&lt;/li&gt;
&lt;li&gt;build: fix cmake script when employing path including spaces, by &lt;a class=&quot;user-mention&quot; data-hovercard-type=&quot;user&quot; data-hovercard-url=&quot;/users/terrelln/hovercard&quot; data-octo-click=&quot;hovercard-link-click&quot; data-octo-dimensions=&quot;link_type:self&quot; href=&quot;https://github.com/terrelln&quot;&gt;@terrelln&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;build: new &lt;code&gt;ZSTD_NO_INTRINSICS&lt;/code&gt; macro to avoid explicit intrinsics&lt;/li&gt;
&lt;li&gt;build: new &lt;code&gt;STATIC_BMI2&lt;/code&gt; macro for compile time detection of BMI2 on MSVC, by &lt;a class=&quot;user-mention&quot; data-hovercard-type=&quot;user&quot; data-hovercard-url=&quot;/users/Niadb/hovercard&quot; data-octo-click=&quot;hovercard-link-click&quot; data-octo-dimensions=&quot;link_type:self&quot; href=&quot;https://github.com/Niadb&quot;&gt;@Niadb&lt;/a&gt; (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load title&quot; data-id=&quot;666902300&quot; data-permission-text=&quot;Title is private&quot; data-url=&quot;https://github.com/facebook/zstd/issues/2258&quot; data-hovercard-type=&quot;pull_request&quot; data-hovercard-url=&quot;/facebook/zstd/pull/2258/hovercard&quot; href=&quot;https://github.com/facebook/zstd/pull/2258&quot;&gt;#2258&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;build: improved compile-time detection of aarch64/neon platforms, by &lt;a class=&quot;user-mention&quot; data-hovercard-type=&quot;user&quot; data-hovercard-url=&quot;/users/bsdimp/hovercard&quot; data-octo-click=&quot;hovercard-link-click&quot; data-octo-dimensions=&quot;link_type:self&quot; href=&quot;https://github.com/bsdimp&quot;&gt;@bsdimp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;build: Fix building on AIX 5.1, by &lt;a class=&quot;user-mention&quot; data-hovercard-type=&quot;user&quot; data-hovercard-url=&quot;/users/likema/hovercard&quot; data-octo-click=&quot;hovercard-link-click&quot; data-octo-dimensions=&quot;link_type:self&quot; href=&quot;https://github.com/likema&quot;&gt;@likema&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;build: compile paramgrill with cmake on Windows, requested by &lt;a class=&quot;user-mention&quot; data-hovercard-type=&quot;user&quot; data-hovercard-url=&quot;/users/mirh/hovercard&quot; data-octo-click=&quot;hovercard-link-click&quot; data-octo-dimensions=&quot;link_type:self&quot; href=&quot;https://github.com/mirh&quot;&gt;@mirh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;build: install pkg-config file with CMake and MinGW, by &lt;a class=&quot;user-mention&quot; data-hovercard-type=&quot;user&quot; data-hovercard-url=&quot;/users/tonytheodore/hovercard&quot; data-octo-click=&quot;hovercard-link-click&quot; data-octo-dimensions=&quot;link_type:self&quot; href=&quot;https://github.com/tonytheodore&quot;&gt;@tonytheodore&lt;/a&gt; (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load title&quot; data-id=&quot;629000795&quot; data-permission-text=&quot;Title is private&quot; data-url=&quot;https://github.com/facebook/zstd/issues/2183&quot; data-hovercard-type=&quot;pull_request&quot; data-hovercard-url=&quot;/facebook/zstd/pull/2183/hovercard&quot; href=&quot;https://github.com/facebook/zstd/pull/2183&quot;&gt;#2183&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;build: Install DLL with CMake on Windows, by &lt;a class=&quot;user-mention&quot; data-hovercard-type=&quot;organization&quot; data-hovercard-url=&quot;/orgs/BioDataAnalysis/hovercard&quot; href=&quot;https://github.com/BioDataAnalysis&quot;&gt;@BioDataAnalysis&lt;/a&gt; (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load title&quot; data-id=&quot;647325646&quot; data-permission-text=&quot;Title is private&quot; data-url=&quot;https://github.com/facebook/zstd/issues/2221&quot; data-hovercard-type=&quot;pull_request&quot; data-hovercard-url=&quot;/facebook/zstd/pull/2221/hovercard&quot; href=&quot;https://github.com/facebook/zstd/pull/2221&quot;&gt;#2221&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;build: fix : cli compilation with uclibc&lt;/li&gt;
&lt;li&gt;misc: Improve single file library and include dictBuilder, by &lt;a class=&quot;user-mention&quot; data-hovercard-type=&quot;user&quot; data-hovercard-url=&quot;/users/cwoffenden/hovercard&quot; data-octo-click=&quot;hovercard-link-click&quot; data-octo-dimensions=&quot;link_type:self&quot; href=&quot;https://github.com/cwoffenden&quot;&gt;@cwoffenden&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;misc: Fix single file library compilation with Emscripten, by &lt;a class=&quot;user-mention&quot; data-hovercard-type=&quot;user&quot; data-hovercard-url=&quot;/users/yoshihitoh/hovercard&quot; data-octo-click=&quot;hovercard-link-click&quot; data-octo-dimensions=&quot;link_type:self&quot; href=&quot;https://github.com/yoshihitoh&quot;&gt;@yoshihitoh&lt;/a&gt; (&lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load title&quot; data-id=&quot;651070120&quot; data-permission-text=&quot;Title is private&quot; data-url=&quot;https://github.com/facebook/zstd/issues/2227&quot; data-hovercard-type=&quot;pull_request&quot; data-hovercard-url=&quot;/facebook/zstd/pull/2227/hovercard&quot; href=&quot;https://github.com/facebook/zstd/pull/2227&quot;&gt;#2227&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;misc: Add freestanding translation script in &lt;code&gt;contrib/freestanding_lib&lt;/code&gt;, by &lt;a class=&quot;user-mention&quot; data-hovercard-type=&quot;user&quot; data-hovercard-url=&quot;/users/terrelln/hovercard&quot; data-octo-click=&quot;hovercard-link-click&quot; data-octo-dimensions=&quot;link_type:self&quot; href=&quot;https://github.com/terrelln&quot;&gt;@terrelln&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;doc : clarify repcode updates in format specification, by &lt;a class=&quot;user-mention&quot; data-hovercard-type=&quot;user&quot; data-hovercard-url=&quot;/users/felixhandte/hovercard&quot; data-octo-click=&quot;hovercard-link-click&quot; data-octo-dimensions=&quot;link_type:self&quot; href=&quot;https://github.com/felixhandte&quot;&gt;@felixhandte&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Thu, 17 Dec 2020 13:22:45 +0000</pubDate>
<dc:creator>varbhat</dc:creator>
<og:image>https://avatars0.githubusercontent.com/u/69631?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>Release Zstandard v1.4.7 · facebook/zstd</og:title>
<og:url>/facebook/zstd/releases/tag/v1.4.7</og:url>
<og:description>v1.4.7 unleashes several months of improvements across many axis, from performance to various fixes, to new capabilities, of which a few are highlighted below. It’s a recommended upgrade. (Note: if...</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/facebook/zstd/releases/tag/v1.4.7</dc:identifier>
</item>
<item>
<title>51% of 4M Docker images have critical vulnerabilities</title>
<link>https://thechief.io/c/news/51-4-million-docker-images-have-critical-vulnerabilities/</link>
<guid isPermaLink="true" >https://thechief.io/c/news/51-4-million-docker-images-have-critical-vulnerabilities/</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://thechief.io/c/news/51-4-million-docker-images-have-critical-vulnerabilities/&quot;&gt;https://thechief.io/c/news/51-4-million-docker-images-have-critical-vulnerabilities/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=25454207&quot;&gt;https://news.ycombinator.com/item?id=25454207&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 315&lt;/p&gt;
&lt;p&gt;# Comments: 160&lt;/p&gt;
</description>
<pubDate>Thu, 17 Dec 2020 10:09:16 +0000</pubDate>
<dc:creator>AnnieNma</dc:creator>
<dc:identifier>https://thechief.io/c/news/51-4-million-docker-images-have-critical-vulnerabilities/</dc:identifier>
</item>
<item>
<title>Facebook Takes Out Newspaper Ads to Attack Apple&amp;#039;s Strengthening iOS Privacy</title>
<link>https://daringfireball.net/linked/2020/12/16/facebook-full-page-ad</link>
<guid isPermaLink="true" >https://daringfireball.net/linked/2020/12/16/facebook-full-page-ad</guid>
<description>&lt;p&gt;Hartley Charlton, writing for MacRumors:&lt;/p&gt;
&lt;blockquote readability=&quot;27&quot;&gt;
&lt;p&gt;The ads are running in the New York Times, Wall Street Journal, and Washington Post, feature the headline “We’re standing up to Apple for small businesses everywhere.”&lt;/p&gt;
&lt;p&gt;Earlier this year, Apple introduced a number of privacy changes that curb the ability of companies like Facebook to gather data on users and target adverts. In iOS 14, Apple has made the “Identifier for Advertisers,” used by Facebook and its advertising partners for ad targeting, an opt-in feature, providing more transparency for users who would prefer not to be tracked in apps and on websites. The update simply asks users if they want to agree to ad tracking or prevent cross-app and cross-site tracking to provide targeted ads.&lt;/p&gt;
&lt;p&gt;iOS 14 also has a prominent “Tracking” section in the Privacy portion of the Settings app, where users can disable the option for apps to track them altogether. Even if this feature is toggled off, apps must still ask permission to track users across apps and websites owned by other companies, which is a blow to the silent ad-related tracking that has been going on behind the scenes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And people say Facebook has hurt the newspaper advertising industry. They’re helping!&lt;/p&gt;
&lt;p&gt;A full-page newspaper print ad for issue messaging has always had a weird target audience. Most full-page newspaper ads are trying to reach most of the people who read the paper. Full-page issue messaging ads are about reaching very specific demographics in a conspicuous way. But in today’s world, it’s kind of transparent whom Facebook is targeting here: old white politicians.&lt;/p&gt;
&lt;p&gt;I think it’s pretty clear what Facebook wants: they want mobile app privacy to go back to the Wild West days of a decade ago, when apps could get away with whatever was technically possible, with all data hoovering invisible to users. They can get that on iOS only two ways: (a) if Apple changes its mind, or (b) if governments around the world force Apple’s hand, by declaring that Apple’s actions in the name of privacy are in fact the abuse of some made-up monopoly. Option (a) is not going to happen, so Facebook is going all-in on (b).&lt;/p&gt;
&lt;p&gt;Here’s the thing. Apple isn’t blocking the ability for Facebook to personalize ads, in any way. Apple is just providing &lt;em&gt;users&lt;/em&gt; with control over their own privacy. Users can easily choose to keep providing Facebook (and anyone else) with all the information they want. Or they can choose not to.&lt;/p&gt;
&lt;p&gt;Facebook sees Apple providing users with awareness of and control over their online privacy as Apple taking away from Facebook access to something that they believe they rightfully should have free and unfettered access to. This is no different than telemarketers feeling like you’re doing them wrong when you add your phone number to a do-not-call list.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://daringfireball.net/2020/09/online_privacy_real_world_privacy&quot;&gt;I’ll repeat what I wrote in September&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;Just because there is now a multi-billion-dollar industry based on the abject betrayal of our privacy doesn’t mean the sociopaths who built it have any right whatsoever to continue getting away with it. They talk in circles but their argument boils down to entitlement: they think our privacy is theirs for the taking because they’ve been getting away with taking it without our knowledge, and it is valuable. No action Apple can take against the tracking industry is too strong.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Also worth pointing out: the apostrophe in the Facebook newspaper ad’s headline is wrong. A big old dumb quote mark.&lt;/p&gt;
&lt;p class=&quot;smallprint&quot;&gt;★ &lt;em&gt;Wednesday, 16 December 2020&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 17 Dec 2020 07:48:39 +0000</pubDate>
<dc:creator>laktak</dc:creator>
<og:title>Facebook Takes Out Full-Page Newspaper Ads to Attack Apple’s Changes Strengthening iOS Privacy</og:title>
<og:url>https://daringfireball.net/linked/2020/12/16/facebook-full-page-ad</og:url>
<og:description>Link to: https://www.macrumors.com/2020/12/16/facebook-takes-out-full-page-ads-to-attack-apple/</og:description>
<og:image>https://daringfireball.net/graphics/df-square-1024.png</og:image>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://daringfireball.net/linked/2020/12/16/facebook-full-page-ad</dc:identifier>
</item>
<item>
<title>Transmits AM radio on computers without radio transmitting hardware</title>
<link>https://github.com/fulldecent/system-bus-radio</link>
<guid isPermaLink="true" >https://github.com/fulldecent/system-bus-radio</guid>
<description>&lt;p&gt;This program transmits radio on computers / phones without radio transmitting hardware.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;🍷 Project tip jar: &lt;a href=&quot;https://amazon.com/hz/wishlist/ls/EE78A23EEGQB&quot; rel=&quot;nofollow&quot;&gt;https://amazon.com/hz/wishlist/ls/EE78A23EEGQB&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Why?&lt;/h2&gt;
&lt;p&gt;Some computers are intentionally disconnected from the rest of the world. This includes having their internet, wireless, bluetooth, USB, external file storage and audio capabilities removed. This is called &quot;air gapping&quot;. Even in such a situation, this program can transmit radio.&lt;/p&gt;
&lt;p&gt;Publicly available documents already discuss exfiltration from secured systems using various electromagnetic radiations. This is documented in the TEMPEST guidelines published by the US National Security Agency and the US Department of Defense. This project simply adds to that discussion.&lt;/p&gt;
&lt;h2&gt;How to use it&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;NEW:&lt;/strong&gt; Try it without compiling anything, click here: &lt;a href=&quot;http://fulldecent.github.io/system-bus-radio/&quot; rel=&quot;nofollow&quot;&gt;http://fulldecent.github.io/system-bus-radio/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Enter the &lt;code&gt;Using _mm_stream_si128&lt;/code&gt; folder and compile using &lt;code&gt;make&lt;/code&gt;. (There are also other flavors you can &lt;code&gt;make&lt;/code&gt; and try in different folders!)&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;make
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Run this using a 2015 model MacBook Air. Then use a Sony STR-K670P radio receiver with the included antenna and tune it to 1580 kHz on AM.&lt;/p&gt;
&lt;p&gt;You should hear the &quot;Mary Had a Little Lamb&quot; tune playing repeatedly. Other equipment and tuning may work as well. On the equipment above, the author has achieved clear transmission over two meters of open air or one meter through drywall. Different results will be achievable with different equipment.&lt;/p&gt;
&lt;p&gt;Are you using an antenna? At the beginning, the author placed the antenna directly on top of the number 4 key and that worked best (on any AM frequency). It was a round antenna. Then once they knew it worked they moved the antenna back. Moving it back reduced the number of frequencies that it worked on, and eventually only that one (1580 kHz) worked. Different hardware will certainly have different frequency response. Here are some results that have been sent in by readers. Please mail &lt;a href=&quot;mailto:github.com@phor.net&quot;&gt;github.com@phor.net&lt;/a&gt; with your results (including makes and models of all equipment involved) or &lt;a href=&quot;https://github.com/fulldecent/system-bus-radio/edit/master/TEST-DATA.tsv&quot;&gt;edit this file directly&lt;/a&gt; and create a pull request.&lt;/p&gt;
&lt;h2&gt;Technical Explanation&lt;/h2&gt;
&lt;p&gt;This program runs instructions on the computer that cause electromagnetic radiation. The emissions are of a broad frequency range. To be accepted by the radio, those frequencies must:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Be emitted by the computer processor and other subsystems&lt;/li&gt;
&lt;li&gt;Escape the computer shielding&lt;/li&gt;
&lt;li&gt;Pass through the air or other obstructions&lt;/li&gt;
&lt;li&gt;Be accepted by the antenna&lt;/li&gt;
&lt;li&gt;Be selected by the receiver&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;By trial and error, the above frequency was found to be ideal for that equipment. If somebody would like to send a SDR that is capable of receiving 100 kHz and up then other frequencies could be tested.&lt;/p&gt;
&lt;p&gt;The actual emissions are caused by the &lt;code&gt;_mm_stream_si128&lt;/code&gt; instruction that writes through to a memory address. Inspiration for using this instruction was provided in:&lt;/p&gt;
&lt;blockquote readability=&quot;17.354085603113&quot;&gt;
&lt;p&gt;Guri, M., Kachlon, A., Hasson, O., Kedma, G., Mirsky, Y. and Elovici, Y., 2015. GSMem: data exfiltration from air-gapped computers over GSM frequencies. In 24th USENIX Security Symposium (USENIX Security 15) (pp. 849-864).&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.usenix.org/node/190937&quot; rel=&quot;nofollow&quot;&gt;https://www.usenix.org/node/190937&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Please note that replacing &lt;code&gt;_mm_stream_si128&lt;/code&gt; with a simple &lt;code&gt;x++;&lt;/code&gt; will work too. The author's experience has been that &lt;code&gt;_mm_stream_si128&lt;/code&gt; produces a stronger signal. There may be other ideas that work even better, and it would be nice to improve this method to be more portable (not require SSE extensions).&lt;/p&gt;
&lt;p&gt;The program uses square wave modulation, which is depicted below:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;|&amp;lt;--------------------TIME--------------------&amp;gt;|
|                                              |
|‾|_|‾|_|‾|_____________|‾|_|‾|_|‾|_____________
|                       |   |   |
|&amp;lt;------SIGNAL---------&amp;gt;|   |   |
                            |   |
                            |&amp;lt;-&amp;gt;| CARRIER
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Notes on high precision time APIs:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Get current time
&lt;/li&gt;
&lt;li&gt;Sleep
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Press coverage&lt;/p&gt;
</description>
<pubDate>Thu, 17 Dec 2020 04:23:54 +0000</pubDate>
<dc:creator>known</dc:creator>
<og:image>https://avatars2.githubusercontent.com/u/382183?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>fulldecent/system-bus-radio</og:title>
<og:url>https://github.com/fulldecent/system-bus-radio</og:url>
<og:description>Transmits AM radio on computers without radio transmitting hardware. - fulldecent/system-bus-radio</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/fulldecent/system-bus-radio</dc:identifier>
</item>
</channel>
</rss>