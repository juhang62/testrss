<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Using Firefox for a faster, calmer and distraction-free internet</title>
<link>https://marko.fyi/firefox/</link>
<guid isPermaLink="true" >https://marko.fyi/firefox/</guid>
<description>&lt;p class=&quot;has-drop-cap has-large-font-size&quot;&gt;We’re living in the Google Chrome browser dominance age (&lt;a rel=&quot;noreferrer noopener&quot; aria-label=&quot;65% (opens in a new tab)&quot; href=&quot;https://gs.statcounter.com/browser-market-share&quot; target=&quot;_blank&quot;&gt;65%&lt;/a&gt; of the market share worldwide) but for the first time in a few years, Chrome has some very serious competition.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.mozilla.org/en-US/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot; aria-label=&quot; (opens in a new tab)&quot;&gt;Firefox&lt;/a&gt; is an open-source browser made by a non-profit organization named Mozilla. &lt;a rel=&quot;noreferrer noopener&quot; aria-label=&quot;The mission (opens in a new tab)&quot; href=&quot;https://www.mozilla.org/en-US/about/manifesto/&quot; target=&quot;_blank&quot;&gt;The mission&lt;/a&gt; of the Mozilla Foundation is to help build a healthier, more open and accessible internet.&lt;/p&gt;
&lt;h3 id=&quot;0-use-firefox-for-a-better-internet-experience-&quot;&gt;Use Firefox For A Better Internet Experience&lt;/h3&gt;
&lt;p&gt;Over the last year Firefox has got a lot faster and more resource friendly.&lt;/p&gt;
&lt;p&gt;The team behind it has made some ethical and people friendly decisions that make the web more private, much faster and distraction free for everyone.&lt;/p&gt;
&lt;p&gt;Using Firefox gives you peace of mind and keeps you away from the advertising companies constantly following you around, profiling you and tempting you to purchase their products.&lt;/p&gt;
&lt;p&gt;Firefox currently stands at 4% of the browser market share worldwide and that’s a shame. Many more people would find great value in using it.&lt;/p&gt;
&lt;p&gt;You can simply install Firefox and start surfing right away, but here’s a brief look at some of the Firefox features you can explore.&lt;/p&gt;
&lt;nav class=&quot;tinytoc tiny_toc&quot;&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://marko.fyi/firefox/#1-the-look-and-feel&quot;&gt;The Look And Feel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://marko.fyi/firefox/#2-default-search-engine&quot;&gt;Default Search Engine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://marko.fyi/firefox/#5-advertising-and-tracking&quot;&gt;Advertising And Tracking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://marko.fyi/firefox/#6-the-reader-view&quot;&gt;The Reader View&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://marko.fyi/firefox/#7-hidden-preferences-in-the-configuration-editor&quot;&gt;Hidden Preferences In The Configuration Editor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://marko.fyi/firefox/#8-theres-so-much-more-in-the-world-of-firefox&quot;&gt;There's So Much More In The World Of Firefox&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/nav&gt;&lt;h2 id=&quot;1-the-look-and-feel&quot;&gt;The Look And Feel&lt;/h2&gt;
&lt;p&gt;When I install Firefox, the first thing I do is to use the &lt;strong&gt;Customize Firefox&lt;/strong&gt; section. Many interesting options in there let you make Firefox look and feel the way you want to.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://marko.fyi/wp-content/uploads/customize-firefox.png&quot; alt=&quot;&quot; class=&quot;wp-image-165&quot; srcset=&quot;https://marko.fyi/wp-content/uploads/customize-firefox.png 464w, https://marko.fyi/wp-content/uploads/customize-firefox-161x300.png 161w&quot; sizes=&quot;(max-width: 464px) 100vw, 464px&quot;/&gt;&lt;/p&gt;

&lt;p&gt;I remove everything from the toolbar. I hide the title bar, menu bar and bookmarks bar. I select a dark theme and put the density at compact. This gives me a nice, clean and minimal browser.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://marko.fyi/wp-content/uploads/firefox-density-themes.png&quot; alt=&quot;&quot; class=&quot;wp-image-167&quot; srcset=&quot;https://marko.fyi/wp-content/uploads/firefox-density-themes.png 781w, https://marko.fyi/wp-content/uploads/firefox-density-themes-300x88.png 300w, https://marko.fyi/wp-content/uploads/firefox-density-themes-768x226.png 768w&quot; sizes=&quot;(max-width: 781px) 100vw, 781px&quot;/&gt;&lt;/p&gt;
Density, themes and title bar
&lt;p&gt;In &lt;strong&gt;Preferences -&amp;gt; Home&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://marko.fyi/wp-content/uploads/firefox-home-preferences.png&quot; alt=&quot;&quot; class=&quot;wp-image-131&quot; srcset=&quot;https://marko.fyi/wp-content/uploads/firefox-home-preferences.png 700w, https://marko.fyi/wp-content/uploads/firefox-home-preferences-300x171.png 300w&quot; sizes=&quot;(max-width: 700px) 100vw, 700px&quot;/&gt;&lt;/p&gt;
Firefox home preference
&lt;p&gt;I untick everything in this section with the result being a nice blank, dark home page and new tab page.&lt;/p&gt;
&lt;p&gt;You can tick on “&lt;strong&gt;Web Search&lt;/strong&gt;” if you prefer a minimalist home page with a nice Firefox logo and a search box like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://marko.fyi/wp-content/uploads/minimalist-firefox-front-page.png&quot; alt=&quot;Minimalist home page with a nice Firefox logo and a search box&quot; class=&quot;wp-image-121&quot; srcset=&quot;https://marko.fyi/wp-content/uploads/minimalist-firefox-front-page.png 1922w, https://marko.fyi/wp-content/uploads/minimalist-firefox-front-page-300x164.png 300w, https://marko.fyi/wp-content/uploads/minimalist-firefox-front-page-768x419.png 768w, https://marko.fyi/wp-content/uploads/minimalist-firefox-front-page-1024x559.png 1024w, https://marko.fyi/wp-content/uploads/minimalist-firefox-front-page-1200x655.png 1200w&quot; sizes=&quot;(max-width: 1922px) 100vw, 1922px&quot;/&gt;&lt;/p&gt;
Minimalist home page with a nice Firefox logo and a search box
&lt;h2 id=&quot;2-default-search-engine&quot;&gt;Default Search Engine&lt;/h2&gt;
&lt;p&gt;In &lt;strong&gt;Preferences -&amp;gt; Search -&amp;gt; Default Search Engine&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://marko.fyi/wp-content/uploads/firefox-default-search-engine.png&quot; alt=&quot;&quot; class=&quot;wp-image-146&quot; srcset=&quot;https://marko.fyi/wp-content/uploads/firefox-default-search-engine.png 669w, https://marko.fyi/wp-content/uploads/firefox-default-search-engine-300x168.png 300w&quot; sizes=&quot;(max-width: 669px) 100vw, 669px&quot;/&gt;&lt;/p&gt;
Default search engine
&lt;p&gt;Select a more human friendly search engine. &lt;a rel=&quot;noreferrer noopener&quot; aria-label=&quot;DuckDuckGo (opens in a new tab)&quot; href=&quot;https://duckduckgo.com/&quot; target=&quot;_blank&quot;&gt;DuckDuckGo&lt;/a&gt; is the best option from all the default choices.&lt;/p&gt;
&lt;h3 id=&quot;3-want-to-use-a-search-engine-not-on-the-default-list--&quot;&gt;Want To Use A Search Engine Not On The Default List?&lt;/h3&gt;
&lt;p&gt;In &lt;strong&gt;Preferences -&amp;gt; Search -&amp;gt; Search Bar&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://marko.fyi/wp-content/uploads/firefox-search-bar.png&quot; alt=&quot;&quot; class=&quot;wp-image-137&quot; srcset=&quot;https://marko.fyi/wp-content/uploads/firefox-search-bar.png 702w, https://marko.fyi/wp-content/uploads/firefox-search-bar-300x106.png 300w&quot; sizes=&quot;(max-width: 702px) 100vw, 702px&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Select “&lt;strong&gt;Add search bar in toolbar&lt;/strong&gt;“.&lt;/p&gt;
&lt;div class=&quot;wp-block-image&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://marko.fyi/wp-content/uploads/firefox-add-new-search-engine.png&quot; alt=&quot;&quot; class=&quot;wp-image-139&quot; srcset=&quot;https://marko.fyi/wp-content/uploads/firefox-add-new-search-engine.png 384w, https://marko.fyi/wp-content/uploads/firefox-add-new-search-engine-300x165.png 300w&quot; sizes=&quot;(max-width: 384px) 100vw, 384px&quot;/&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p class=&quot;has-regular-font-size&quot;&gt;Then visit the search engine you’d like to use as the default. Click on the search box on the right-hand side of your toolbar and select “&lt;strong&gt;Add&lt;/strong&gt;” to add it.&lt;/p&gt;
&lt;p&gt;Now go back to your Search Preferences and select the newly added search engine as your new default.&lt;/p&gt;
&lt;p&gt;You can now also remove the search bar from the toolbar if you wish.&lt;/p&gt;
&lt;h3 id=&quot;4-three-ethical-and-human-friendly-search-engines&quot;&gt;Three Ethical And Human Friendly Search Engines&lt;/h3&gt;
&lt;p&gt;Want more options for good Google alternatives? These are three that I like:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;a rel=&quot;noreferrer noopener&quot; aria-label=&quot;StartPage.com (opens in a new tab)&quot; href=&quot;https://www.startpage.com/&quot; target=&quot;_blank&quot;&gt;StartPage.com&lt;/a&gt; – Gives you exact same search results as Google but without all that tracking and profiling.&lt;/li&gt;
&lt;li&gt;&lt;a rel=&quot;noreferrer noopener&quot; aria-label=&quot;Qwant.com (opens in a new tab)&quot; href=&quot;https://www.qwant.com/&quot; target=&quot;_blank&quot;&gt;Qwant.com&lt;/a&gt; – A private search engine with similar philosophy to DuckDuckGo but based in France, Europe.&lt;/li&gt;
&lt;li&gt;&lt;a rel=&quot;noreferrer noopener&quot; aria-label=&quot;Ecosia.org (opens in a new tab)&quot; href=&quot;https://www.ecosia.org/&quot; target=&quot;_blank&quot;&gt;Ecosia.org&lt;/a&gt; – They plant trees for each search that you make.&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;5-advertising-and-tracking&quot;&gt;Advertising And Tracking&lt;/h2&gt;
&lt;p&gt;In &lt;strong&gt;Preferences -&amp;gt; Privacy &amp;amp; Security -&amp;gt; &lt;a rel=&quot;noreferrer noopener&quot; aria-label=&quot;Enhanced Tracking Protection (opens in a new tab)&quot; href=&quot;https://support.mozilla.org/en-US/kb/enhanced-tracking-protection-firefox-desktop&quot; target=&quot;_blank&quot;&gt;Enhanced Tracking Protection&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://marko.fyi/wp-content/uploads/firefox-enhanced-tracking-protection.png&quot; alt=&quot;&quot; class=&quot;wp-image-147&quot; srcset=&quot;https://marko.fyi/wp-content/uploads/firefox-enhanced-tracking-protection.png 702w, https://marko.fyi/wp-content/uploads/firefox-enhanced-tracking-protection-259x300.png 259w&quot; sizes=&quot;(max-width: 702px) 100vw, 702px&quot;/&gt;&lt;/p&gt;
Enhanced Tracking Protection set to custom
&lt;p&gt;Choose “&lt;strong&gt;Strict&lt;/strong&gt;” or go “&lt;strong&gt;Custom&lt;/strong&gt;” to make it even stricter.&lt;/p&gt;
&lt;p&gt;In “&lt;strong&gt;Cookies&lt;/strong&gt;” block “&lt;strong&gt;All third-party cookies&lt;/strong&gt;” and in “&lt;strong&gt;Tracking Content&lt;/strong&gt;” select “&lt;strong&gt;All Windows&lt;/strong&gt;“. Tick “&lt;strong&gt;Cryptominers&lt;/strong&gt;” and “&lt;strong&gt;Fingerprinters&lt;/strong&gt;” too.&lt;/p&gt;
&lt;p&gt;This way I am a bit safer from all the trackers. All the third-party trackers and cookies are blocked automatically. As a side effect of this, pretty much all the intrusive advertising is blocked.&lt;/p&gt;
&lt;p&gt;Some ads that are served from the first party, that are not personalized and that have no tracking are visible. Examples are ads on DuckDuckGo, Twitter and Reddit.&lt;/p&gt;
&lt;p&gt;If you want to block all the ads (and do even more content blocking) you’ll need an ad blocker such as &lt;a rel=&quot;noreferrer noopener&quot; aria-label=&quot;uBlock Origin (opens in a new tab)&quot; href=&quot;https://addons.mozilla.org/en-US/firefox/addon/ublock-origin/&quot; target=&quot;_blank&quot;&gt;uBlock Origin&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I’m happy to be exposed to contextual and text based ads without tracking, personalization and surveillance so plain Firefox without any extensions works well.&lt;/p&gt;
&lt;h3 id=&quot;6-so-what-difference-does-all-this-tracking-protection-make-&quot;&gt;So what difference does all this tracking protection make?&lt;/h3&gt;
&lt;p&gt;Big difference.&lt;/p&gt;
&lt;p&gt;On a typical Wired.com article, Firefox blocks four &lt;strong&gt;social media trackers&lt;/strong&gt; from Facebook, Twitter and Linkedin.&lt;/p&gt;
&lt;p&gt;In addition, it also blocks 24 pieces of &lt;strong&gt;tracking content&lt;/strong&gt; from companies such as Hotjar and Amazon.&lt;/p&gt;
&lt;p&gt;And last but not least, it blocks eight &lt;strong&gt;third-party cookies&lt;/strong&gt; from companies such as Google and Snapchat.&lt;/p&gt;
&lt;p&gt;That’s more than 35 blocks on every page load.&lt;/p&gt;
&lt;p&gt;Firefox actually ends up blocking majority of the data Wired tries to load but all the content still looks the same as it would look without any of the blocks.&lt;/p&gt;
&lt;p&gt;And Wired still gets to place some non-intrusive advertising such as them promoting the option to subscribe to the magazine.&lt;/p&gt;
&lt;p&gt;In &lt;strong&gt;Preferences -&amp;gt; Privacy &amp;amp; Security -&amp;gt; Cookies and Site Data&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://marko.fyi/wp-content/uploads/firefox-cookie-site-data.png&quot; alt=&quot;&quot; class=&quot;wp-image-148&quot; srcset=&quot;https://marko.fyi/wp-content/uploads/firefox-cookie-site-data.png 879w, https://marko.fyi/wp-content/uploads/firefox-cookie-site-data-300x77.png 300w, https://marko.fyi/wp-content/uploads/firefox-cookie-site-data-768x197.png 768w&quot; sizes=&quot;(max-width: 879px) 100vw, 879px&quot;/&gt;&lt;/p&gt;
Cookies and site data
&lt;p&gt;I tick “&lt;strong&gt;Delete cookies and site data when Firefox is closed&lt;/strong&gt;” while I use “&lt;strong&gt;Manage Permissions&lt;/strong&gt;” to allow cookies from websites I want to stay logged into not to be deleted.&lt;/p&gt;
&lt;p&gt;In &lt;strong&gt;Preferences -&amp;gt; Privacy &amp;amp; Security -&amp;gt; Logins and Passwords&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://marko.fyi/wp-content/uploads/firefox-logins-passwords.png&quot; alt=&quot;&quot; class=&quot;wp-image-149&quot; srcset=&quot;https://marko.fyi/wp-content/uploads/firefox-logins-passwords.png 884w, https://marko.fyi/wp-content/uploads/firefox-logins-passwords-300x107.png 300w, https://marko.fyi/wp-content/uploads/firefox-logins-passwords-768x275.png 768w&quot; sizes=&quot;(max-width: 884px) 100vw, 884px&quot;/&gt;&lt;/p&gt;
Logins and passwords
&lt;p&gt;I recommend you enable everything here. Especially if you’re not using a password manager.&lt;/p&gt;
&lt;p&gt;Firefox will not only save all your passwords, but it will also auto-fill them, it will generate strong passwords for you when signing up for new accounts and even alert you in case websites you visit have been breached.&lt;/p&gt;
&lt;p&gt;In &lt;strong&gt;Preferences -&amp;gt; Privacy &amp;amp; Security -&amp;gt; Permissions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://marko.fyi/wp-content/uploads/firefox-permissions.png&quot; alt=&quot;&quot; class=&quot;wp-image-150&quot; srcset=&quot;https://marko.fyi/wp-content/uploads/firefox-permissions.png 855w, https://marko.fyi/wp-content/uploads/firefox-permissions-300x155.png 300w, https://marko.fyi/wp-content/uploads/firefox-permissions-768x398.png 768w&quot; sizes=&quot;(max-width: 855px) 100vw, 855px&quot;/&gt;&lt;/p&gt;
Firefox permissions
&lt;p&gt;I block new requests asking for access to things such as “&lt;strong&gt;Notifications&lt;/strong&gt;“, “&lt;strong&gt;Location&lt;/strong&gt;” and “&lt;strong&gt;Autoplay&lt;/strong&gt;” of video and audio.&lt;/p&gt;
&lt;p&gt;Simply click on the “&lt;strong&gt;Settings&lt;/strong&gt;” button next to the different items and select “&lt;strong&gt;Block new requests asking to access&lt;/strong&gt;“.&lt;/p&gt;
&lt;p&gt;The web is so much calmer without all those prompts asking you to enable or allow this and that.&lt;/p&gt;
&lt;p&gt;I manually enable it for specific sites that I really need or want to.&lt;/p&gt;
&lt;h2 id=&quot;6-the-reader-view&quot;&gt;The Reader View&lt;/h2&gt;
&lt;p&gt;I love the &lt;a rel=&quot;noreferrer noopener&quot; aria-label=&quot;Firefox Reader View (opens in a new tab)&quot; href=&quot;https://support.mozilla.org/en-US/kb/firefox-reader-view-clutter-free-web-pages&quot; target=&quot;_blank&quot;&gt;Firefox Reader View&lt;/a&gt;. A “&lt;strong&gt;Reader View&lt;/strong&gt;” icon will show on the right-hand side of your toolbar on available sites. It looks like this:&lt;/p&gt;
&lt;div class=&quot;wp-block-image&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://marko.fyi/wp-content/uploads/firefox-reader-view-icon.png&quot; alt=&quot;&quot; class=&quot;wp-image-151&quot;/&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Reader View basically strips away all the distractions such as buttons, ads and other website elements. It gives you pure content and content only.&lt;/p&gt;
&lt;p&gt;You can even change the default layout of the Reader View by choosing a light or dark mode, changing the font and the font size.&lt;/p&gt;
&lt;p&gt;Here’s how a typical &lt;strong&gt;The New York Times&lt;/strong&gt; article looks with the Reader View off and on:&lt;/p&gt;
&lt;ul class=&quot;wp-block-gallery alignwide columns-2&quot;&gt;&lt;li class=&quot;blocks-gallery-item&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://marko.fyi/wp-content/uploads/firefox-reader-view-before-1024x559.png&quot; alt=&quot;&quot; data-id=&quot;128&quot; data-link=&quot;https://marko.fyi/firefox/firefox-reader-view-before/&quot; class=&quot;wp-image-128&quot; srcset=&quot;https://marko.fyi/wp-content/uploads/firefox-reader-view-before-1024x559.png 1024w, https://marko.fyi/wp-content/uploads/firefox-reader-view-before-300x164.png 300w, https://marko.fyi/wp-content/uploads/firefox-reader-view-before-768x419.png 768w, https://marko.fyi/wp-content/uploads/firefox-reader-view-before-1200x655.png 1200w&quot; sizes=&quot;(max-width: 1024px) 100vw, 1024px&quot;/&gt;&lt;/p&gt;
Reader View off&lt;/li&gt;
&lt;li class=&quot;blocks-gallery-item&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://marko.fyi/wp-content/uploads/firefox-reader-view-after-1024x559.png&quot; alt=&quot;&quot; data-id=&quot;127&quot; data-link=&quot;https://marko.fyi/firefox/firefox-reader-view-after/&quot; class=&quot;wp-image-127&quot; srcset=&quot;https://marko.fyi/wp-content/uploads/firefox-reader-view-after-1024x559.png 1024w, https://marko.fyi/wp-content/uploads/firefox-reader-view-after-300x164.png 300w, https://marko.fyi/wp-content/uploads/firefox-reader-view-after-768x419.png 768w, https://marko.fyi/wp-content/uploads/firefox-reader-view-after-1200x655.png 1200w&quot; sizes=&quot;(max-width: 1024px) 100vw, 1024px&quot;/&gt;&lt;/p&gt;
Reader View on&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;7-hidden-preferences-in-the-configuration-editor&quot;&gt;Hidden Preferences In The Configuration Editor&lt;/h2&gt;
&lt;p&gt;Type &lt;strong&gt;about:config&lt;/strong&gt; in the address bar to visit the &lt;strong&gt;Configuration Editor&lt;/strong&gt; which is full of hidden Firefox preferences aimed at advanced users.&lt;/p&gt;
&lt;p&gt;Click on “&lt;strong&gt;I accept the risk!&lt;/strong&gt;” button on the humorous “&lt;strong&gt;This might void your warranty!&lt;/strong&gt;” warning message.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://marko.fyi/wp-content/uploads/firefox-about-config-warning.png&quot; alt=&quot;&quot; class=&quot;wp-image-153&quot; srcset=&quot;https://marko.fyi/wp-content/uploads/firefox-about-config-warning.png 966w, https://marko.fyi/wp-content/uploads/firefox-about-config-warning-300x107.png 300w, https://marko.fyi/wp-content/uploads/firefox-about-config-warning-768x273.png 768w&quot; sizes=&quot;(max-width: 966px) 100vw, 966px&quot;/&gt;&lt;/p&gt;
About:config warning message
&lt;p&gt;Search for “&lt;strong&gt;privacy.firstparty.isolate&lt;/strong&gt;” and set its value to “&lt;strong&gt;true&lt;/strong&gt;“.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://marko.fyi/wp-content/uploads/firefox-about-config-firstparty-isolate-1024x202.png&quot; alt=&quot;&quot; class=&quot;wp-image-154&quot; srcset=&quot;https://marko.fyi/wp-content/uploads/firefox-about-config-firstparty-isolate-1024x202.png 1024w, https://marko.fyi/wp-content/uploads/firefox-about-config-firstparty-isolate-300x59.png 300w, https://marko.fyi/wp-content/uploads/firefox-about-config-firstparty-isolate-768x151.png 768w, https://marko.fyi/wp-content/uploads/firefox-about-config-firstparty-isolate.png 1141w&quot; sizes=&quot;(max-width: 1024px) 100vw, 1024px&quot;/&gt;&lt;/p&gt;
First-Party Isolation
&lt;p&gt;&lt;strong&gt;First-Party Isolation&lt;/strong&gt; is a great feature and I expect it to make it into default settings in the near future.&lt;/p&gt;
&lt;p&gt;This feature restricts cookies, cache and other site data so it can only be accessed by the first party domain name.&lt;/p&gt;
&lt;p&gt;This stops advertising companies from being able to follow and track your behavior across the different sites that you visit.&lt;/p&gt;
&lt;h2 id=&quot;8-theres-so-much-more-in-the-world-of-firefox&quot;&gt;There’s So Much More In The World Of Firefox&lt;/h2&gt;
&lt;p&gt;This was meant as a brief beginner introduction to what Firefox offers out of the box and using the in-built preferences.&lt;/p&gt;
&lt;p&gt;Firefox features many other options such as &lt;a rel=&quot;noreferrer noopener&quot; aria-label=&quot;Containers (opens in a new tab)&quot; href=&quot;https://support.mozilla.org/en-US/kb/containers&quot; target=&quot;_blank&quot;&gt;containers&lt;/a&gt;, &lt;a rel=&quot;noreferrer noopener&quot; aria-label=&quot;themes (opens in a new tab)&quot; href=&quot;https://addons.mozilla.org/en-US/firefox/themes/&quot; target=&quot;_blank&quot;&gt;themes&lt;/a&gt; and thousands of &lt;a rel=&quot;noreferrer noopener&quot; aria-label=&quot;add-ons (opens in a new tab)&quot; href=&quot;https://addons.mozilla.org/en-US/firefox/&quot; target=&quot;_blank&quot;&gt;extensions&lt;/a&gt; that you can enable to add any feature that you may wish for.&lt;/p&gt;
&lt;p&gt;This is something you can start to explore as you get more used to Firefox and more comfortable within the Firefox environment.&lt;/p&gt;
&lt;p&gt;Give &lt;a href=&quot;https://www.mozilla.org/en-US/firefox/new/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot; aria-label=&quot;Firefox (opens in a new tab)&quot;&gt;Firefox&lt;/a&gt; a chance now and enjoy a more open, private and human-centric web experience!&lt;/p&gt;
</description>
<pubDate>Sun, 10 Nov 2019 10:58:30 +0000</pubDate>
<dc:creator>markosaric</dc:creator>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://marko.fyi/firefox/</dc:identifier>
</item>
<item>
<title>We are making Sandboxie a free tool, with plans to transition it to open source</title>
<link>https://www.sandboxie.com/</link>
<guid isPermaLink="true" >https://www.sandboxie.com/</guid>
<description>&lt;h3&gt;&lt;strong&gt;IMPORTANT INFORMATION REGARDING SANDBOXIE VERSIONS&lt;/strong&gt;&lt;/h3&gt;
&lt;div readability=&quot;32&quot;&gt;

&lt;p&gt;&lt;strong&gt;Sophos is excited to announce that we are making Sandboxie a free tool, with plans to transition it to an open source tool.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This new evolution of Sandboxie is one we are enthusiastic about, but that does not mean this was an easy decision to make. Sandboxie has never been a significant component of Sophos’ business, and we have been exploring options for its future for a while.&lt;/p&gt;
&lt;p&gt;Frankly, the easiest and least costly decision for Sophos would have been to simply end of life Sandboxie. However, we love the technology too much to see it fade away. More importantly, we love the Sandboxie community too much to do that. The Sandboxie user base represents some of the most passionate, forward thinking, and knowledgeable members of the security community and we didn’t want to let you down.&lt;/p&gt;
&lt;p&gt;After thoughtful consideration we decided that the best way to keep Sandboxie going was to give it back to its users – transitioning it to an open source tool. We will release more information about the open source project as we continue to work on the details.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Until the open source transition is completed we have decided to make all restricted features of Sandboxie completely free.&lt;/strong&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;dl&gt;&lt;dd&gt;To download the latest version of Sandboxie (Win 7, 8.1 and 10 only, this will NOT work on XP) &lt;a href=&quot;https://www.sandboxie.com/DownloadSandboxie&quot;&gt;Click here&lt;/a&gt;&lt;/dd&gt;
&lt;dd&gt;Please, feel free to join our &lt;a href=&quot;https://community.sophos.com/products/sandboxie/f/sandboxie-forum/112376/sandboxie-status-update-what-happened-to-the-sandboxie-site-and-forums&quot;&gt;Forums&lt;/a&gt; for updates.&lt;/dd&gt;
&lt;/dl&gt;&lt;hr /&gt;&lt;h3&gt;Sandboxie now supports Windows 10. &lt;a href=&quot;https://www.sandboxie.com/SandboxieInstall.exe&quot;&gt;Click here&lt;/a&gt; to download it.&lt;/h3&gt;
&lt;hr /&gt;&lt;hr /&gt;&lt;h3&gt;What We Do&lt;/h3&gt;
&lt;p&gt;Sandboxie uses isolation technology to separate programs from your underlying operating system preventing unwanted changes from happening to your personal data, programs and applications that rest safely on your hard drive.&lt;/p&gt;
&lt;hr /&gt;&lt;h3&gt;Web Browsing&lt;/h3&gt;
&lt;p&gt;Secure your favorite web browser and block malicious software, viruses, ransom-ware and zero day threats by isolating such attacks in the Sandbox; leaving your system protected&lt;/p&gt;
&lt;hr /&gt;&lt;h3&gt;Email&lt;/h3&gt;
&lt;p&gt;Run your favorite email program in Sandboxie so you never have to worry about suspicious attachments or spear phishing attacks&lt;/p&gt;
&lt;hr /&gt;&lt;h3&gt;Data Protection&lt;/h3&gt;
&lt;p&gt;Sandboxie prevents internet websites and programs from modifying your personal data (i.e. My Documents), files &amp;amp; folders on your system&lt;/p&gt;
&lt;hr /&gt;&lt;h3&gt;Application Testing&lt;/h3&gt;
&lt;p&gt;Safely test and try new programs and applications within Sandboxie and prevent unauthorized changes to your underlying system that may occur&lt;/p&gt;
&lt;hr /&gt;&lt;h3&gt;Sandboxie Supports&lt;/h3&gt;
&lt;dl&gt;&lt;dd&gt;Windows 7 through 10&lt;/dd&gt;
&lt;dd&gt;Legacy Operating Systems such as Windows XP&lt;/dd&gt;
&lt;dd&gt;Available in both 32 and 64 bit versions&lt;/dd&gt;
&lt;dd&gt;All major web browsers; Chrome; FireFox; CyberFox; Opera; IE 6-11 &amp;amp; more&lt;/dd&gt;
&lt;dd&gt;Microsoft office Suite, PDF and Multimedia files&lt;/dd&gt;
&lt;dd&gt;Constantly stay updated with the latest version updates for free&lt;/dd&gt;
&lt;dd&gt;Requires less than 6mb of hard drive space with simple installation&lt;/dd&gt;
&lt;/dl&gt;</description>
<pubDate>Sun, 10 Nov 2019 03:13:09 +0000</pubDate>
<dc:creator>tech234a</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.sandboxie.com/</dc:identifier>
</item>
<item>
<title>Audio Processing for Dummies</title>
<link>http://adventures.michaelfbryan.com/posts/audio-processing-for-dummies/</link>
<guid isPermaLink="true" >http://adventures.michaelfbryan.com/posts/audio-processing-for-dummies/</guid>
<description>&lt;p&gt;In my spare time I’m an emergency services volunteer, and one of the tasks our unit has is to run the radio network and keep track of what’s happening. This can be a pretty stressful job, especially when there’s lots of radio traffic, and it’s not unusual to miss words or entire transmissions.&lt;/p&gt;
&lt;p&gt;To help with a personal project that could make the job easier I’d like to implement a basic component of audio processing, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Noise_gate&quot;&gt;Noise Gate&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The basic idea is to scan through an audio stream and split it into individual clips based on volume, similar to the algorithm mentioned &lt;a href=&quot;https://rust-audio.discourse.group/t/splitting-an-audio-stream-based-on-volume-silence/171?u=michael-f-bryan&quot;&gt;on this Rust Audio discourse thread&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;notices note&quot; readability=&quot;9.5217391304348&quot;&gt;
&lt;p&gt;The code written in this article is available &lt;a href=&quot;https://github.com/Michael-F-Bryan/noise-gate&quot;&gt;on GitHub&lt;/a&gt;. Feel free to browse through and steal code or inspiration. It’s also been published as a crate &lt;a href=&quot;http://adventures.michaelfbryan.com/posts/audio-processing-for-dummies/crates.io/crates/noise-gate&quot;&gt;on crates.io&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you found this useful or spotted a bug, let me know on the blog’s &lt;a href=&quot;https://github.com/Michael-F-Bryan/adventures.michaelfbryan.com&quot;&gt;issue tracker&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;what-even-is-audio&quot;&gt;What Even Is Audio?&lt;/h2&gt;
&lt;p&gt;We’ve all consumed audio media at some point, but have you ever stopped and wondered how it works under the hood?&lt;/p&gt;
&lt;p&gt;At its core, audio works by rapidly reading the volume level (a “sample”), typically 44,100 times per second (44.1 kHz is called the &lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)#Sampling_rate&quot;&gt;&lt;em&gt;Sample Rate&lt;/em&gt;&lt;/a&gt;). These samples are then encoded using &lt;a href=&quot;https://en.wikipedia.org/wiki/Pulse-code_modulation&quot;&gt;&lt;em&gt;Pulse Code Modulation&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;According to Wikipedia:&lt;/p&gt;
&lt;blockquote readability=&quot;12&quot;&gt;
&lt;p&gt;Pulse-code modulation (PCM) is a method used to digitally represent sampled analog signals. It is the standard form of digital audio in computers, compact discs, digital telephony and other digital audio applications. In a PCM stream, the amplitude of the analog signal is sampled regularly at uniform intervals, and each sample is quantized to the nearest value within a range of digital steps.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;notices tip&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;If it helps, a sample can be thought of as how far a speaker/microphone’s membrane is deflected at a particular point in time.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;It’s not uncommon to record multiple audio tracks at a time, for example imagine multiple microphones were used to provide a sense of direction/perspective (see &lt;a href=&quot;https://en.wikipedia.org/wiki/Sound_localization&quot;&gt;Sound Localisation&lt;/a&gt; for more). These multiple tracks are usually referred to as &lt;em&gt;Channels&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; In Rust lingo, you can think of an audio stream as:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;type&lt;/span&gt; &lt;span&gt;AudioStream&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Vec&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;Frame&lt;span&gt;&amp;gt;&lt;/span&gt;;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;type&lt;/span&gt; &lt;span&gt;Frame&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;[Sample;&lt;span&gt; &lt;/span&gt;N];&lt;span&gt; &lt;/span&gt;&lt;span&gt;// where `N` is the number of channels in the stream
&lt;/span&gt;&lt;span&gt;type&lt;/span&gt; &lt;span&gt;Sample&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;i16&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;f32&lt;/span&gt;;&lt;span&gt;
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The audio formats you are used to (MP3, WAV, OGG) are just different ways to store an &lt;code&gt;AudioStream&lt;/code&gt; on disk, along with some metadata describing the audio (artist, year, etc.), typically using tricks like compression or &lt;a href=&quot;https://en.wikipedia.org/wiki/Delta_encoding&quot;&gt;Delta Encoding&lt;/a&gt; to make the resulting file as small as possible.&lt;/p&gt;
&lt;p&gt;If you’re wondering why compression is important, these are the numbers for a simple uncompressed audio stream with:&lt;/p&gt;
&lt;p&gt;… That’s a lot of data!&lt;/p&gt;
&lt;h2 id=&quot;finding-sample-data&quot;&gt;Finding Sample Data&lt;/h2&gt;
&lt;p&gt;If we want to implement a noise gate we’re going to need some sample clips to test it on.&lt;/p&gt;
&lt;p&gt;I’ve found the Air Traffic Controller recordings from &lt;a href=&quot;https://www.liveatc.net/recordings.php&quot;&gt;LiveATC.net&lt;/a&gt; are reasonably similar to my target, with the added bonus that they’re publicly available.&lt;/p&gt;
&lt;p&gt;One example:&lt;/p&gt;
&lt;p&gt;Your browser does not support the audio tag.&lt;/p&gt;
&lt;p&gt;Our end goal is to create a library that can break audio streams up into chunks based on volume without caring where the audio originally came from (MP3 file, microphone, another function, etc.). We’ll start by using &lt;a href=&quot;https://en.wikipedia.org/wiki/WAV&quot;&gt;the WAV format&lt;/a&gt; because it’s simple and a really good crate (&lt;a href=&quot;https://crates.io/crates/hound&quot;&gt;hound&lt;/a&gt;) already exists for working with WAV files.&lt;/p&gt;
&lt;p&gt;You can download the sample clip and convert it to WAV using &lt;code&gt;ffmpeg&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;$ mkdir -p tests/data
$ curl &quot;https://forums.liveatc.net/index.php?action=dlattach;topic=15455.0;attach=10441&quot; &amp;gt; a-turtle-of-an-issue.mp3
$ ffmpeg -i a-turtle-of-an-issue.mp3 -ac 1 a-turtle-of-an-issue.wav&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;implementing-the-noise-gate-algorithm&quot;&gt;Implementing the Noise Gate Algorithm&lt;/h2&gt;
&lt;p&gt;For now, our &lt;em&gt;Noise Gate&lt;/em&gt; will have two knobs for tweaking its behaviour:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;open_threshold&lt;/code&gt; - the (absolute) noise value above which the gate should open&lt;/li&gt;
&lt;li&gt;&lt;code&gt;release_time&lt;/code&gt; - how long to hold the gate open after dropping below the &lt;code&gt;open_threshold&lt;/code&gt;. This will manifest itself as the gate being in a sort of half-open state for the next &lt;code&gt;release_time&lt;/code&gt; samples, where new samples above the &lt;code&gt;open_threshold&lt;/code&gt; will re-open the gate.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The awesome thing about this algorithm is that it can be represented using a simple state machine.&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;// src/lib.rs
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;enum&lt;/span&gt; &lt;span&gt;State&lt;/span&gt;&lt;span&gt; &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;Open,&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;Closing&lt;span&gt; &lt;/span&gt;{&lt;span&gt; &lt;/span&gt;remaining_samples: &lt;span&gt;usize&lt;/span&gt; },&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;Closed,&lt;span&gt;
&lt;/span&gt;}&lt;span&gt;
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Our state machine diagram looks roughly like this:&lt;/p&gt;
&lt;p&gt;graph TD; linkStyle default interpolate basis; Open[Open]; Closing(Closing); Open-- below threshold --&amp;gt;Closing; Open-- above threshold --&amp;gt;Open; Closing-- above threshold --&amp;gt;Open; Closing-- remaining_samples = 0 --&amp;gt;Closed; Closing-- remaining_samples &amp;gt; 0 --&amp;gt;Closing; Closed-- above threshold --&amp;gt;Open; Closed-- below threshold --&amp;gt;Closed;&lt;/p&gt;
&lt;p&gt;We’ll be using some abstractions, namely &lt;a href=&quot;https://docs.rs/sample/latest/sample/frame/trait.Frame.html&quot;&gt;&lt;code&gt;Frame&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.rs/sample/latest/sample/trait.Sample.html&quot;&gt;&lt;code&gt;Sample&lt;/code&gt;&lt;/a&gt; from the &lt;a href=&quot;https://crates.io/crates/sample&quot;&gt;&lt;code&gt;sample&lt;/code&gt; crate&lt;/a&gt;, to make the &lt;em&gt;Noise Gate&lt;/em&gt; work with multiple channels and any type of audio input.&lt;/p&gt;
&lt;p&gt;Let’s define a helper which will take a &lt;code&gt;Frame&lt;/code&gt; of audio input and tell us whether all audio channels are below a certain threshold.&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;13&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;// src/lib.rs
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;use&lt;/span&gt;&lt;span&gt; &lt;/span&gt;sample::{Frame,&lt;span&gt; &lt;/span&gt;SignedSample};&lt;span&gt;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;fn&lt;/span&gt; &lt;span&gt;below_threshold&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;F&lt;span&gt;&amp;gt;&lt;/span&gt;(frame: &lt;span&gt;F&lt;/span&gt;,&lt;span&gt; &lt;/span&gt;threshold: &lt;span&gt;F&lt;/span&gt;::Sample)&lt;span&gt; &lt;/span&gt;-&amp;gt; &lt;span&gt;bool&lt;/span&gt;
&lt;span&gt;where&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;F: &lt;span&gt;Frame&lt;/span&gt;,&lt;span&gt;
&lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;threshold&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;abs(threshold.to_signed_sample());&lt;span&gt;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;frame&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;.channels()&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;.map(&lt;span&gt;|&lt;/span&gt;sample&lt;span&gt;|&lt;/span&gt;&lt;span&gt; &lt;/span&gt;sample.to_signed_sample())&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;.map(abs)&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;.all(&lt;span&gt;|&lt;/span&gt;sample&lt;span&gt;|&lt;/span&gt;&lt;span&gt; &lt;/span&gt;sample&lt;span&gt; &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;threshold)&lt;span&gt;
&lt;/span&gt;}&lt;span&gt;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;fn&lt;/span&gt; &lt;span&gt;abs&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;S: &lt;span&gt;SignedSample&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;(sample: &lt;span&gt;S&lt;/span&gt;)&lt;span&gt; &lt;/span&gt;-&amp;gt; &lt;span&gt;S&lt;/span&gt;&lt;span&gt; &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;zero&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;S::equilibrium();&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; &lt;/span&gt;sample&lt;span&gt; &lt;/span&gt;&lt;span&gt;&amp;gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;zero&lt;span&gt; &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;sample&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;}&lt;span&gt; &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;sample&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;}&lt;span&gt;
&lt;/span&gt;}&lt;span&gt;
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;State&lt;/code&gt; transitions are done using one big &lt;code&gt;match&lt;/code&gt; statement and are almost a direct translation of the previous state machine diagram.&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;19&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;// src/lib.rs
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;fn&lt;/span&gt; &lt;span&gt;next_state&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;F: &lt;span&gt;Frame&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;(&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;state: &lt;span&gt;State&lt;/span&gt;,&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;frame: &lt;span&gt;F&lt;/span&gt;,&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;open_threshold: &lt;span&gt;F&lt;/span&gt;::Sample,&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;release_time: &lt;span&gt;usize&lt;/span&gt;,&lt;span&gt;
&lt;/span&gt;)&lt;span&gt; &lt;/span&gt;-&amp;gt; &lt;span&gt;State&lt;/span&gt;&lt;span&gt; &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;match&lt;/span&gt;&lt;span&gt; &lt;/span&gt;state&lt;span&gt; &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;State::Open&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; &lt;/span&gt;below_threshold(frame,&lt;span&gt; &lt;/span&gt;open_threshold)&lt;span&gt; &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;                &lt;/span&gt;State::Closing&lt;span&gt; &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;                    &lt;/span&gt;remaining_samples: &lt;span&gt;release_time&lt;/span&gt;,&lt;span&gt;
&lt;/span&gt;&lt;span&gt;                &lt;/span&gt;}&lt;span&gt;
&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;}&lt;span&gt; &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;                &lt;/span&gt;State::Open&lt;span&gt;
&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;}&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;}&lt;span&gt;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;State::Closing&lt;span&gt; &lt;/span&gt;{&lt;span&gt; &lt;/span&gt;remaining_samples&lt;span&gt; &lt;/span&gt;}&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; &lt;/span&gt;below_threshold(frame,&lt;span&gt; &lt;/span&gt;open_threshold)&lt;span&gt; &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; &lt;/span&gt;remaining_samples&lt;span&gt; &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt; &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;                    &lt;/span&gt;State::Closed&lt;span&gt;
&lt;/span&gt;&lt;span&gt;                &lt;/span&gt;}&lt;span&gt; &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;                    &lt;/span&gt;State::Closing&lt;span&gt; &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;                        &lt;/span&gt;remaining_samples: &lt;span&gt;remaining_samples&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;
&lt;/span&gt;&lt;span&gt;                    &lt;/span&gt;}&lt;span&gt;
&lt;/span&gt;&lt;span&gt;                &lt;/span&gt;}&lt;span&gt;
&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;}&lt;span&gt; &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;                &lt;/span&gt;State::Open&lt;span&gt;
&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;}&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;}&lt;span&gt;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;State::Closed&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; &lt;/span&gt;below_threshold(frame,&lt;span&gt; &lt;/span&gt;open_threshold)&lt;span&gt; &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;                &lt;/span&gt;State::Closed&lt;span&gt;
&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;}&lt;span&gt; &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;                &lt;/span&gt;State::Open&lt;span&gt;
&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;}&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;}&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;}&lt;span&gt;
&lt;/span&gt;}&lt;span&gt;
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There’s a bit more rightward drift here than I’d like, but the function itself is quite self-contained and readable enough.&lt;/p&gt;
&lt;p&gt;That said, as a sanity check it’s a good idea to write some tests exercising each state machine transition.&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;17&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;// src/lib.rs
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;#[cfg(test)]&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;mod&lt;/span&gt; &lt;span&gt;tests&lt;/span&gt;&lt;span&gt; &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;use&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;::&lt;span&gt;*&lt;/span&gt;;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; &lt;/span&gt;OPEN_THRESHOLD: &lt;span&gt;i16&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;100&lt;/span&gt;;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; &lt;/span&gt;RELEASE_TIME: &lt;span&gt;usize&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;test_state_transition&lt;span&gt;!&lt;/span&gt;(open_to_open: &lt;span&gt;State&lt;/span&gt;::Open,&lt;span&gt; &lt;/span&gt;&lt;span&gt;101&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;State::Open);&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;test_state_transition&lt;span&gt;!&lt;/span&gt;(open_to_closing: &lt;span&gt;State&lt;/span&gt;::Open,&lt;span&gt; &lt;/span&gt;&lt;span&gt;40&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;State::Closing&lt;span&gt; &lt;/span&gt;{&lt;span&gt; &lt;/span&gt;remaining_samples: &lt;span&gt;RELEASE_TIME&lt;/span&gt;&lt;span&gt; &lt;/span&gt;});&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;test_state_transition&lt;span&gt;!&lt;/span&gt;(closing_to_closed: &lt;span&gt;State&lt;/span&gt;::Closing&lt;span&gt; &lt;/span&gt;{&lt;span&gt; &lt;/span&gt;remaining_samples: &lt;span&gt;0&lt;/span&gt;&lt;span&gt; &lt;/span&gt;},&lt;span&gt; &lt;/span&gt;&lt;span&gt;40&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;State::Closed);&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;test_state_transition&lt;span&gt;!&lt;/span&gt;(closing_to_closing: &lt;span&gt;State&lt;/span&gt;::Closing&lt;span&gt; &lt;/span&gt;{&lt;span&gt; &lt;/span&gt;remaining_samples: &lt;span&gt;1&lt;/span&gt;&lt;span&gt; &lt;/span&gt;},&lt;span&gt; &lt;/span&gt;&lt;span&gt;40&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;State::Closing&lt;span&gt; &lt;/span&gt;{&lt;span&gt; &lt;/span&gt;remaining_samples: &lt;span&gt;0&lt;/span&gt;&lt;span&gt; &lt;/span&gt;});&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;test_state_transition&lt;span&gt;!&lt;/span&gt;(reopen_when_closing: &lt;span&gt;State&lt;/span&gt;::Closing&lt;span&gt; &lt;/span&gt;{&lt;span&gt; &lt;/span&gt;remaining_samples: &lt;span&gt;1&lt;/span&gt;&lt;span&gt; &lt;/span&gt;},&lt;span&gt; &lt;/span&gt;&lt;span&gt;101&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;State::Open);&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;test_state_transition&lt;span&gt;!&lt;/span&gt;(closed_to_closed: &lt;span&gt;State&lt;/span&gt;::Closed,&lt;span&gt; &lt;/span&gt;&lt;span&gt;40&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;State::Closed);&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;test_state_transition&lt;span&gt;!&lt;/span&gt;(closed_to_open: &lt;span&gt;State&lt;/span&gt;::Closed,&lt;span&gt; &lt;/span&gt;&lt;span&gt;101&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;State::Open);&lt;span&gt;
&lt;/span&gt;}&lt;span&gt;
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;notices tip&quot; readability=&quot;19.5&quot;&gt;
&lt;p&gt;When writing these sorts of tests you’ll probably want to minimise boilerplate by pulling the testing code out into a macro. That way you just need to write to case being tested, inputs, and expected outputs, and the macro will do the rest.&lt;/p&gt;
&lt;p&gt;This is the definition for &lt;code&gt;test_state_transition!()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;16&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;macro_rules&lt;span&gt;!&lt;/span&gt;&lt;span&gt; &lt;/span&gt;test_state_transition&lt;span&gt; &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;(&lt;span&gt;$name&lt;/span&gt;:&lt;span&gt;ident&lt;/span&gt;,&lt;span&gt; &lt;/span&gt;&lt;span&gt;$from&lt;/span&gt;:&lt;span&gt;expr&lt;/span&gt;,&lt;span&gt; &lt;/span&gt;&lt;span&gt;$sample&lt;/span&gt;:&lt;span&gt;expr&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;$expected&lt;/span&gt;:&lt;span&gt;expr&lt;/span&gt;)&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;#[test]&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;fn&lt;/span&gt; &lt;span&gt;$name&lt;/span&gt;()&lt;span&gt; &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;start: &lt;span&gt;State&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;$from&lt;/span&gt;;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;expected: &lt;span&gt;State&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;$expected&lt;/span&gt;;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;frame: [&lt;span&gt;i16&lt;/span&gt;;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;]&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;[&lt;span&gt;$sample&lt;/span&gt;];&lt;span&gt;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;got&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;next_state(start,&lt;span&gt; &lt;/span&gt;frame,&lt;span&gt; &lt;/span&gt;OPEN_THRESHOLD,&lt;span&gt; &lt;/span&gt;RELEASE_TIME);&lt;span&gt;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;assert_eq&lt;span&gt;!&lt;/span&gt;(got,&lt;span&gt; &lt;/span&gt;expected);&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;}&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;};&lt;span&gt;
&lt;/span&gt;}&lt;span&gt;
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;To implement the &lt;em&gt;Noise Gate&lt;/em&gt;, we’ll wrap our state and configuration into a single &lt;code&gt;NoiseGate&lt;/code&gt; struct.&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;19&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;// src/lib.rs
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;pub&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;struct&lt;/span&gt; &lt;span&gt;NoiseGate&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;S&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;/// The volume level at which the gate will open (begin recording).
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;pub&lt;/span&gt;&lt;span&gt; &lt;/span&gt;open_threshold: &lt;span&gt;S&lt;/span&gt;,&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;/// The amount of time (in samples) the gate takes to go from open to fully
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;/// closed.
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;pub&lt;/span&gt;&lt;span&gt; &lt;/span&gt;release_time: &lt;span&gt;usize&lt;/span&gt;,&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;state: &lt;span&gt;State&lt;/span&gt;,&lt;span&gt;
&lt;/span&gt;}&lt;span&gt;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;impl&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;S&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;NoiseGate&lt;span&gt;&amp;lt;&lt;/span&gt;S&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;/// Create a new [`NoiseGate`].
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;pub&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;fn&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;(open_threshold: &lt;span&gt;S&lt;/span&gt;,&lt;span&gt; &lt;/span&gt;release_time: &lt;span&gt;usize&lt;/span&gt;)&lt;span&gt; &lt;/span&gt;-&amp;gt; &lt;span&gt;Self&lt;/span&gt;&lt;span&gt; &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;NoiseGate&lt;span&gt; &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;open_threshold,&lt;span&gt;
&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;release_time,&lt;span&gt;
&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;state: &lt;span&gt;State&lt;/span&gt;::Closed,&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;}&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;}&lt;span&gt;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;/// Is the gate currently passing samples through to the [`Sink`]?
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;pub&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;fn&lt;/span&gt; &lt;span&gt;is_open&lt;/span&gt;(&lt;span&gt;&amp;amp;&lt;/span&gt;self)&lt;span&gt; &lt;/span&gt;-&amp;gt; &lt;span&gt;bool&lt;/span&gt; {&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;match&lt;/span&gt;&lt;span&gt; &lt;/span&gt;self.state&lt;span&gt; &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;State::Open&lt;span&gt; &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; &lt;/span&gt;State::Closing&lt;span&gt; &lt;/span&gt;{&lt;span&gt; &lt;/span&gt;..&lt;span&gt; &lt;/span&gt;}&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;,&lt;span&gt;
&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;State::Closed&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;,&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;}&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;}&lt;span&gt;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;/// Is the gate currently ignoring silence?
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;pub&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;fn&lt;/span&gt; &lt;span&gt;is_closed&lt;/span&gt;(&lt;span&gt;&amp;amp;&lt;/span&gt;self)&lt;span&gt; &lt;/span&gt;-&amp;gt; &lt;span&gt;bool&lt;/span&gt; {&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;!&lt;/span&gt;self.is_open()&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;}&lt;span&gt;
&lt;/span&gt;}&lt;span&gt;
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We’ll need to declare a &lt;code&gt;Sink&lt;/code&gt; trait that can be implemented by consumers of our &lt;em&gt;Noise Gate&lt;/em&gt; in the next step.&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;12&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;// src/lib.rs
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;pub&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;trait&lt;/span&gt;&lt;span&gt; &lt;/span&gt;Sink&lt;span&gt;&amp;lt;&lt;/span&gt;F&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;/// Add a frame to the current recording, starting a new recording if
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;/// necessary.
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;fn&lt;/span&gt; &lt;span&gt;record&lt;/span&gt;(&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;mut&lt;/span&gt;&lt;span&gt; &lt;/span&gt;self,&lt;span&gt; &lt;/span&gt;frame: &lt;span&gt;F&lt;/span&gt;);&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;/// Reached the end of the samples, do necessary cleanup (e.g. flush to disk).
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;fn&lt;/span&gt; &lt;span&gt;end_of_transmission&lt;/span&gt;(&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;mut&lt;/span&gt;&lt;span&gt; &lt;/span&gt;self);&lt;span&gt;
&lt;/span&gt;}&lt;span&gt;
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Processing frames is just a case of iterating over each frame, updating the state, and checking whether we need to pass the frame through to the &lt;code&gt;Sink&lt;/code&gt; or detect an &lt;code&gt;end_of_transmission&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;18&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;// src/lib.rs
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;impl&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;S: &lt;span&gt;Sample&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;NoiseGate&lt;span&gt;&amp;lt;&lt;/span&gt;S&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;pub&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;fn&lt;/span&gt; &lt;span&gt;process_frames&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;K,&lt;span&gt; &lt;/span&gt;F&lt;span&gt;&amp;gt;&lt;/span&gt;(&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;mut&lt;/span&gt;&lt;span&gt; &lt;/span&gt;self,&lt;span&gt; &lt;/span&gt;frames: &lt;span&gt;&amp;amp;&lt;/span&gt;[F],&lt;span&gt; &lt;/span&gt;sink: &lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;mut&lt;/span&gt;&lt;span&gt; &lt;/span&gt;K)&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;where&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;F: &lt;span&gt;Frame&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;Sample&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;S&lt;span&gt;&amp;gt;&lt;/span&gt;,&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;K: &lt;span&gt;Sink&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;F&lt;span&gt;&amp;gt;&lt;/span&gt;,&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;frame&lt;span&gt; &lt;/span&gt;&lt;span&gt;in&lt;/span&gt;&lt;span&gt; &lt;/span&gt;frames&lt;span&gt; &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;previously_open&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;self.is_open();&lt;span&gt;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;self.state&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;next_state(self.state,&lt;span&gt; &lt;/span&gt;frame,&lt;span&gt; &lt;/span&gt;self.open_threshold,&lt;span&gt; &lt;/span&gt;self.release_time);&lt;span&gt;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; &lt;/span&gt;self.is_open()&lt;span&gt; &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;                &lt;/span&gt;sink.record(frame);&lt;span&gt;
&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;}&lt;span&gt; &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; &lt;/span&gt;previously_open&lt;span&gt; &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;                &lt;/span&gt;&lt;span&gt;// the gate was previously open and has just closed
&lt;/span&gt;&lt;span&gt;                &lt;/span&gt;sink.end_of_transmission();&lt;span&gt;
&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;}&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;}&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;}&lt;span&gt;
&lt;/span&gt;}&lt;span&gt;
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;measuring-performance&quot;&gt;Measuring Performance&lt;/h2&gt;
&lt;p&gt;If we want to use the &lt;code&gt;NoiseGate&lt;/code&gt; in realtime applications we’ll need to make sure it can handle typical sample rates.&lt;/p&gt;
&lt;p&gt;I don’t expect our algorithm to add much in terms of a performance overhead, but it’s always a good idea to check.&lt;/p&gt;
&lt;p&gt;The gold standard for benchmarking in Rust is &lt;a href=&quot;https://github.com/bheisler/criterion.rs&quot;&gt;criterion&lt;/a&gt;, so let’s add that as a dev dependency.&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;# Cargo.toml&lt;/span&gt;

[dev&lt;span&gt;-&lt;/span&gt;dependencies]
criterion = &lt;span&gt;&quot;0.3&quot;&lt;/span&gt;

[[bench]]
name = &lt;span&gt;&quot;throughput&quot;&lt;/span&gt;
harness = &lt;span&gt;false&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We’ll need a &lt;code&gt;Sink&lt;/code&gt; implementation which will add as little overhead as possible without being completely optimised out by the compiler.&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;12&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;// benches/throughput.rs
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;struct&lt;/span&gt; &lt;span&gt;Counter&lt;/span&gt;&lt;span&gt; &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;samples: &lt;span&gt;usize&lt;/span&gt;,&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;chunks: &lt;span&gt;usize&lt;/span&gt;,&lt;span&gt;
&lt;/span&gt;}&lt;span&gt;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;impl&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;F&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;Sink&lt;span&gt;&amp;lt;&lt;/span&gt;F&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; &lt;/span&gt;Counter&lt;span&gt; &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;fn&lt;/span&gt; &lt;span&gt;record&lt;/span&gt;(&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;mut&lt;/span&gt;&lt;span&gt; &lt;/span&gt;self,&lt;span&gt; &lt;/span&gt;_: &lt;span&gt;F&lt;/span&gt;)&lt;span&gt; &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;self.samples&lt;span&gt; &lt;/span&gt;&lt;span&gt;+=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;criterion::black_box(&lt;span&gt;1&lt;/span&gt;);&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;}&lt;span&gt;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;fn&lt;/span&gt; &lt;span&gt;end_of_transmission&lt;/span&gt;(&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;mut&lt;/span&gt;&lt;span&gt; &lt;/span&gt;self)&lt;span&gt; &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;self.chunks&lt;span&gt; &lt;/span&gt;&lt;span&gt;+=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;criterion::black_box(&lt;span&gt;1&lt;/span&gt;);&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;}&lt;span&gt;
&lt;/span&gt;}&lt;span&gt;
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We’ve already downloaded a handful of example WAV files to the &lt;code&gt;data/&lt;/code&gt; directory, so we can register a new benchmark group (a group of related benchmarks which should be graphed together) and register a benchmark for every WAV file in the &lt;code&gt;data/&lt;/code&gt; directory.&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;13&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;// benches/throughput.rs
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; &lt;/span&gt;DATA_DIR: &lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;str&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;concat&lt;span&gt;!&lt;/span&gt;(env&lt;span&gt;!&lt;/span&gt;(&lt;span&gt;&quot;CARGO_MANIFEST_DIR&quot;&lt;/span&gt;),&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;/data/&quot;&lt;/span&gt;);&lt;span&gt;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;fn&lt;/span&gt; &lt;span&gt;bench_throughput&lt;/span&gt;(c: &lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;mut&lt;/span&gt;&lt;span&gt; &lt;/span&gt;Criterion)&lt;span&gt; &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;mut&lt;/span&gt;&lt;span&gt; &lt;/span&gt;group&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;c.benchmark_group(&lt;span&gt;&quot;throughput&quot;&lt;/span&gt;);&lt;span&gt;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; &lt;/span&gt;entry&lt;span&gt; &lt;/span&gt;&lt;span&gt;in&lt;/span&gt;&lt;span&gt; &lt;/span&gt;fs::read_dir(DATA_DIR).unwrap()&lt;span&gt; &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;entry&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;entry.unwrap();&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;path&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;entry.path();&lt;span&gt;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; &lt;/span&gt;path.is_file()&lt;span&gt; &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;name&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;path.file_stem().unwrap().to_str().unwrap();&lt;span&gt;
&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;add_benchmark(&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;mut&lt;/span&gt;&lt;span&gt; &lt;/span&gt;group,&lt;span&gt; &lt;/span&gt;name,&lt;span&gt; &lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;path);&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;}&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;}&lt;span&gt;
&lt;/span&gt;}&lt;span&gt;
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The setup work for each WAV file benchmark is non-trivial, so we’ve pulled it out into its own function. To set things up we’ll use &lt;a href=&quot;https://crates.io/crates/hound&quot;&gt;&lt;code&gt;hound&lt;/code&gt;&lt;/a&gt; to read the entire audio clip into a &lt;code&gt;Vec&amp;lt;[i16; 1]&amp;gt;&lt;/code&gt; in memory and guess a reasonable &lt;code&gt;release_time&lt;/code&gt; and &lt;code&gt;noise_threshold&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then it’s just a case of telling the &lt;code&gt;BenchmarkGroup&lt;/code&gt; how many samples we’re working with (throughput) and processing the frames.&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;23&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;// benches/throughput.rs
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;fn&lt;/span&gt; &lt;span&gt;add_benchmark&lt;/span&gt;(&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;group: &lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;mut&lt;/span&gt;&lt;span&gt; &lt;/span&gt;BenchmarkGroup&lt;span&gt;&amp;lt;&lt;/span&gt;WallTime&lt;span&gt;&amp;gt;&lt;/span&gt;,&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;name: &lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;str&lt;/span&gt;,&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;path: &lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;Path&lt;/span&gt;,&lt;span&gt;
&lt;/span&gt;)&lt;span&gt; &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;reader&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;WavReader::open(path).unwrap();&lt;span&gt;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;desc&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;reader.spec();&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;assert_eq&lt;span&gt;!&lt;/span&gt;(desc.channels,&lt;span&gt; &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;,&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;We've hard-coded frames to be [i16; 1]&quot;&lt;/span&gt;);&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;release_time&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt; &lt;/span&gt;desc.sample_rate&lt;span&gt; &lt;/span&gt;&lt;span&gt;as&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;usize&lt;/span&gt;;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;samples&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;reader&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;.into_samples::&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;i16&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;()&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;.map(&lt;span&gt;|&lt;/span&gt;s&lt;span&gt;|&lt;/span&gt;&lt;span&gt; &lt;/span&gt;[s.unwrap()])&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;.collect::&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Vec&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;_&lt;span&gt;&amp;gt;&amp;gt;&lt;/span&gt;();&lt;span&gt;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;noise_threshold&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;average(&lt;span&gt;&amp;amp;&lt;/span&gt;samples);&lt;span&gt;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;group&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;.throughput(Throughput::Elements(samples.len()&lt;span&gt; &lt;/span&gt;&lt;span&gt;as&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;u64&lt;/span&gt;))&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;.bench_function(name,&lt;span&gt; &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;b&lt;span&gt;|&lt;/span&gt;&lt;span&gt; &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;b.iter(&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;                &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;mut&lt;/span&gt;&lt;span&gt; &lt;/span&gt;counter&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;Counter::default();&lt;span&gt;
&lt;/span&gt;&lt;span&gt;                &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;mut&lt;/span&gt;&lt;span&gt; &lt;/span&gt;gate&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;NoiseGate::new(noise_threshold,&lt;span&gt; &lt;/span&gt;release_time);&lt;span&gt;
&lt;/span&gt;&lt;span&gt;                &lt;/span&gt;gate.process_frames(&lt;span&gt;&amp;amp;&lt;/span&gt;samples,&lt;span&gt; &lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;mut&lt;/span&gt;&lt;span&gt; &lt;/span&gt;counter);&lt;span&gt;
&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;});&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;});&lt;span&gt;
&lt;/span&gt;}&lt;span&gt;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;/// A fancy way to add up all the channels in all the frames and get the average
&lt;/span&gt;&lt;span&gt;/// sample value.
&lt;/span&gt;&lt;span&gt;fn&lt;/span&gt; &lt;span&gt;average&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;F&lt;span&gt;&amp;gt;&lt;/span&gt;(samples: &lt;span&gt;&amp;amp;&lt;/span&gt;[F])&lt;span&gt; &lt;/span&gt;-&amp;gt; &lt;span&gt;F&lt;/span&gt;::Sample&lt;span&gt;
&lt;/span&gt;&lt;span&gt;where&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;F: &lt;span&gt;Frame&lt;/span&gt;,&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;F::Sample: &lt;span&gt;FromSample&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f32&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;,&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;F::Sample: &lt;span&gt;ToSample&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f32&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;,&lt;span&gt;
&lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;sum: &lt;span&gt;f32&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;samples.iter().fold(&lt;span&gt;0.0&lt;/span&gt;,&lt;span&gt; &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;sum,&lt;span&gt; &lt;/span&gt;frame&lt;span&gt;|&lt;/span&gt;&lt;span&gt; &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;sum&lt;span&gt; &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; &lt;/span&gt;frame.channels().map(&lt;span&gt;|&lt;/span&gt;s&lt;span&gt;|&lt;/span&gt;&lt;span&gt; &lt;/span&gt;s.to_sample()).sum::&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;f32&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;()&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;});&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;(sum&lt;span&gt; &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt; &lt;/span&gt;samples.len()&lt;span&gt; &lt;/span&gt;&lt;span&gt;as&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;f32&lt;/span&gt;).round().to_sample()&lt;span&gt;
&lt;/span&gt;}&lt;span&gt;
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, we need to invoke a couple macros to register the &lt;code&gt;&quot;throughput&quot;&lt;/code&gt; benchmark group and create a &lt;code&gt;main&lt;/code&gt; function (remember when declaring the &lt;code&gt;[[bench]]&lt;/code&gt; table we told &lt;code&gt;rustc&lt;/code&gt; not to write &lt;code&gt;main()&lt;/code&gt; for us with &lt;code&gt;harness = false&lt;/code&gt;).&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;// benches/throughput.rs
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;criterion_group&lt;span&gt;!&lt;/span&gt;(benches,&lt;span&gt; &lt;/span&gt;bench_throughput);&lt;span&gt;
&lt;/span&gt;criterion_main&lt;span&gt;!&lt;/span&gt;(benches);&lt;span&gt;
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These are the WAV files I’ve downloaded to the &lt;code&gt;data/&lt;/code&gt; directory:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;26&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;$ ls -l data 
.rw-r--r-- 1.6M michael 27 Oct 21:21 a-turtle-of-an-issue.wav
.rw-r--r-- 4.2M michael 27 Oct 21:17 KBDL-B17-Tribute-20191005.wav
.rw-r--r-- 7.6M michael 27 Oct 21:17 N11379_KSCK.wav
.rw-r--r--  12M michael 27 Oct 21:26 tornado-warning-ground.wav
$ file data/*
data/a-turtle-of-an-issue.wav:      RIFF (little-endian) data, WAVE audio, Microsoft PCM, 16 bit, mono 22050 Hz
data/KBDL-B17-Tribute-20191005.wav: RIFF (little-endian) data, WAVE audio, Microsoft PCM, 16 bit, mono 24000 Hz
data/N11379_KSCK.wav:               RIFF (little-endian) data, WAVE audio, Microsoft PCM, 16 bit, mono 22050 Hz
data/tornado-warning-ground.wav:    RIFF (little-endian) data, WAVE audio, Microsoft PCM, 16 bit, mono 44100 Hz&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now let’s run the benchmarks.&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;$ cargo bench
     Running target/release/deps/throughput-dbdb305fc8a0e002
Benchmarking throughput/a-turtle-of-an-issue: Warming up for 3.0000 s
Warning: Unable to complete 100 samples in 5.0s. You may wish to increase target time to 37.5s or reduce sample count to 20
throughput/a-turtle-of-an-issue                                                                             
                        time:   [7.0509 ms 7.1617 ms 7.2892 ms]
                        thrpt:  [113.14 Melem/s 115.15 Melem/s 116.96 Melem/s]
                 change:
                        time:   [-6.5194% -3.2691% -0.1646%] (p = 0.07 &amp;gt; 0.05)
                        thrpt:  [+0.1648% +3.3796% +6.9740%]
                        No change in performance detected.
Found 9 outliers among 100 measurements (9.00%)
  8 (8.00%) high mild
  1 (1.00%) high severe

...&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you’ve got &lt;code&gt;gnuplot&lt;/code&gt; installed, this also generates &lt;a href=&quot;http://adventures.michaelfbryan.com/criterion/report/index.html&quot;&gt;a report&lt;/a&gt; under &lt;code&gt;target/criterion&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;On my machine the report says our &lt;code&gt;NoiseFilter&lt;/code&gt; can process 103.47 million samples per second. This is about 2000 times faster than we need, so it gives us hope that the &lt;em&gt;algorithm&lt;/em&gt; won’t add any unnecessary overhead… Of course that just moves the bottleneck from &lt;code&gt;NoiseFilter&lt;/code&gt; to the caller’s &lt;code&gt;Sink&lt;/code&gt; implementation.&lt;/p&gt;
&lt;h2 id=&quot;experimenting-with-our-sample-data&quot;&gt;Experimenting With Our Sample Data&lt;/h2&gt;
&lt;p&gt;We’re now at the point where we have a fully implemented &lt;em&gt;Noise Gate&lt;/em&gt;. Let’s create an example program for splitting WAV files and see what happens when we point it at our sample data!&lt;/p&gt;
&lt;p&gt;Even though it’s an example, we should probably implement proper command-line argument handling to make experimentation easier. By far the easiest way to do this is with &lt;a href=&quot;https://crates.io/crates/structopt&quot;&gt;the structopt crate&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;28&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;// examples/wav-splitter.rs
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;#[derive(Debug, Clone, StructOpt)]&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;pub&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;struct&lt;/span&gt; &lt;span&gt;Args&lt;/span&gt;&lt;span&gt; &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;#[structopt(help = &lt;/span&gt;&lt;span&gt;&quot;The WAV file to read&quot;&lt;/span&gt;&lt;span&gt;)]&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;pub&lt;/span&gt;&lt;span&gt; &lt;/span&gt;input_file: &lt;span&gt;PathBuf&lt;/span&gt;,&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;#[structopt(short = &lt;/span&gt;&lt;span&gt;&quot;t&quot;&lt;/span&gt;&lt;span&gt;, long = &lt;/span&gt;&lt;span&gt;&quot;threshold&quot;&lt;/span&gt;&lt;span&gt;, help = &lt;/span&gt;&lt;span&gt;&quot;The noise threshold&quot;&lt;/span&gt;&lt;span&gt;)]&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;pub&lt;/span&gt;&lt;span&gt; &lt;/span&gt;noise_threshold: &lt;span&gt;i16&lt;/span&gt;,&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;#[structopt(
&lt;/span&gt;&lt;span&gt;        short = &lt;/span&gt;&lt;span&gt;&quot;r&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;        long = &lt;/span&gt;&lt;span&gt;&quot;release-time&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;        help = &lt;/span&gt;&lt;span&gt;&quot;The release time in seconds&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;        default_value = &lt;/span&gt;&lt;span&gt;&quot;0.25&quot;&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    )]&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;pub&lt;/span&gt;&lt;span&gt; &lt;/span&gt;release_time: &lt;span&gt;f32&lt;/span&gt;,&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;#[structopt(
&lt;/span&gt;&lt;span&gt;        short = &lt;/span&gt;&lt;span&gt;&quot;o&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;        long = &lt;/span&gt;&lt;span&gt;&quot;output-dir&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;        help = &lt;/span&gt;&lt;span&gt;&quot;Where to write the split files&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;        default_value = &lt;/span&gt;&lt;span&gt;&quot;.&quot;&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    )]&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;pub&lt;/span&gt;&lt;span&gt; &lt;/span&gt;output_dir: &lt;span&gt;PathBuf&lt;/span&gt;,&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;#[structopt(
&lt;/span&gt;&lt;span&gt;        short = &lt;/span&gt;&lt;span&gt;&quot;p&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;        long = &lt;/span&gt;&lt;span&gt;&quot;prefix&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;        help = &lt;/span&gt;&lt;span&gt;&quot;A prefix to insert before each clip&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;        default_value = &lt;/span&gt;&lt;span&gt;&quot;clip_&quot;&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    )]&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;pub&lt;/span&gt;&lt;span&gt; &lt;/span&gt;prefix: &lt;span&gt;String&lt;/span&gt;,&lt;span&gt;
&lt;/span&gt;}&lt;span&gt;
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we’ll need a &lt;code&gt;Sink&lt;/code&gt; type. The general idea is every time the &lt;code&gt;record()&lt;/code&gt; method is called we’ll write another frame to a cached &lt;code&gt;hound::WavWriter&lt;/code&gt;. If the &lt;code&gt;WavWriter&lt;/code&gt; doesn’t exist we’ll need to create a new one which writes to a file named like &lt;code&gt;output_dir/clip_1.wav&lt;/code&gt;. An &lt;code&gt;end_of_transmission()&lt;/code&gt; tells us to &lt;code&gt;finalize()&lt;/code&gt; the &lt;code&gt;WavWriter&lt;/code&gt; and remove it from our cache.&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;28&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;// examples/wav-splitter.rs
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;pub&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;struct&lt;/span&gt; &lt;span&gt;Sink&lt;/span&gt;&lt;span&gt; &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;output_dir: &lt;span&gt;PathBuf&lt;/span&gt;,&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;clip_number: &lt;span&gt;usize&lt;/span&gt;,&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;prefix: &lt;span&gt;String&lt;/span&gt;,&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;spec: &lt;span&gt;WavSpec&lt;/span&gt;,&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;writer: &lt;span&gt;Option&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;WavWriter&lt;span&gt;&amp;lt;&lt;/span&gt;BufWriter&lt;span&gt;&amp;lt;&lt;/span&gt;File&lt;span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;,&lt;span&gt;
&lt;/span&gt;}&lt;span&gt;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;impl&lt;/span&gt;&lt;span&gt; &lt;/span&gt;Sink&lt;span&gt; &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;pub&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;fn&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;(output_dir: &lt;span&gt;PathBuf&lt;/span&gt;,&lt;span&gt; &lt;/span&gt;prefix: &lt;span&gt;String&lt;/span&gt;,&lt;span&gt; &lt;/span&gt;spec: &lt;span&gt;WavSpec&lt;/span&gt;)&lt;span&gt; &lt;/span&gt;-&amp;gt; &lt;span&gt;Self&lt;/span&gt;&lt;span&gt; &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;Sink&lt;span&gt; &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;output_dir,&lt;span&gt;
&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;prefix,&lt;span&gt;
&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;spec,&lt;span&gt;
&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;clip_number: &lt;span&gt;0&lt;/span&gt;,&lt;span&gt;
&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;writer: &lt;span&gt;None&lt;/span&gt;,&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;}&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;}&lt;span&gt;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;fn&lt;/span&gt; &lt;span&gt;get_writer&lt;/span&gt;(&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;mut&lt;/span&gt;&lt;span&gt; &lt;/span&gt;self)&lt;span&gt; &lt;/span&gt;-&amp;gt; &lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;mut&lt;/span&gt;&lt;span&gt; &lt;/span&gt;WavWriter&lt;span&gt;&amp;lt;&lt;/span&gt;BufWriter&lt;span&gt;&amp;lt;&lt;/span&gt;File&lt;span&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; &lt;/span&gt;self.writer.is_none()&lt;span&gt; &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;filename&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;self&lt;span&gt;
&lt;/span&gt;&lt;span&gt;                &lt;/span&gt;.output_dir&lt;span&gt;
&lt;/span&gt;&lt;span&gt;                &lt;/span&gt;.join(format&lt;span&gt;!&lt;/span&gt;(&lt;span&gt;&quot;{}{}.wav&quot;&lt;/span&gt;,&lt;span&gt; &lt;/span&gt;self.prefix,&lt;span&gt; &lt;/span&gt;self.clip_number));&lt;span&gt;
&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;self.clip_number&lt;span&gt; &lt;/span&gt;&lt;span&gt;+=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;self.writer&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Some&lt;/span&gt;(WavWriter::create(filename,&lt;span&gt; &lt;/span&gt;self.spec).unwrap());&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;}&lt;span&gt;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;self.writer.as_mut().unwrap()&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;}&lt;span&gt;
&lt;/span&gt;}&lt;span&gt;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;impl&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;F&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;noise_gate::Sink&lt;span&gt;&amp;lt;&lt;/span&gt;F&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; &lt;/span&gt;Sink&lt;span&gt;
&lt;/span&gt;&lt;span&gt;where&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;F: &lt;span&gt;Frame&lt;/span&gt;,&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;F::Sample: &lt;span&gt;hound&lt;/span&gt;::Sample,&lt;span&gt;
&lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;fn&lt;/span&gt; &lt;span&gt;record&lt;/span&gt;(&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;mut&lt;/span&gt;&lt;span&gt; &lt;/span&gt;self,&lt;span&gt; &lt;/span&gt;frame: &lt;span&gt;F&lt;/span&gt;)&lt;span&gt; &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;writer&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;self.get_writer();&lt;span&gt;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; &lt;/span&gt;channel&lt;span&gt; &lt;/span&gt;&lt;span&gt;in&lt;/span&gt;&lt;span&gt; &lt;/span&gt;frame.channels()&lt;span&gt; &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;writer.write_sample(channel).unwrap();&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;}&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;}&lt;span&gt;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;fn&lt;/span&gt; &lt;span&gt;end_of_transmission&lt;/span&gt;(&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;mut&lt;/span&gt;&lt;span&gt; &lt;/span&gt;self)&lt;span&gt; &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Some&lt;/span&gt;(writer)&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;self.writer.take()&lt;span&gt; &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;writer.finalize().unwrap();&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;}&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;}&lt;span&gt;
&lt;/span&gt;}&lt;span&gt;
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From there the &lt;code&gt;main&lt;/code&gt; function is quite simple. It parses some arguments, reads the WAV file into memory, then throws it at our &lt;code&gt;NoiseGate&lt;/code&gt; so the &lt;code&gt;Sink&lt;/code&gt; can write the clips to the &lt;code&gt;output/&lt;/code&gt; directory.&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;16&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;// examples/wav-splitter.rs
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;fn&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;()&lt;span&gt; &lt;/span&gt;-&amp;gt; &lt;span&gt;Result&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;(),&lt;span&gt; &lt;/span&gt;&lt;span&gt;Box&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;dyn&lt;span&gt; &lt;/span&gt;Error&lt;span&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;args&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;Args::from_args();&lt;span&gt;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;reader&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;WavReader::open(&lt;span&gt;&amp;amp;&lt;/span&gt;args.input_file)&lt;span&gt;?&lt;/span&gt;;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;header&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;reader.spec();&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;samples&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;reader&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;.into_samples::&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;i16&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;()&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;.map(&lt;span&gt;|&lt;/span&gt;result&lt;span&gt;|&lt;/span&gt;&lt;span&gt; &lt;/span&gt;result.map(&lt;span&gt;|&lt;/span&gt;sample&lt;span&gt;|&lt;/span&gt;&lt;span&gt; &lt;/span&gt;[sample]))&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;.collect::&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Result&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Vec&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;_&lt;span&gt;&amp;gt;&lt;/span&gt;,&lt;span&gt; &lt;/span&gt;_&lt;span&gt;&amp;gt;&amp;gt;&lt;/span&gt;()&lt;span&gt;?&lt;/span&gt;;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;release_time&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;(header.sample_rate&lt;span&gt; &lt;/span&gt;&lt;span&gt;as&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;f32&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt; &lt;/span&gt;args.release_time).round();&lt;span&gt;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;fs::create_dir_all(&lt;span&gt;&amp;amp;&lt;/span&gt;args.output_dir)&lt;span&gt;?&lt;/span&gt;;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;mut&lt;/span&gt;&lt;span&gt; &lt;/span&gt;sink&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;Sink::new(args.output_dir,&lt;span&gt; &lt;/span&gt;args.prefix,&lt;span&gt; &lt;/span&gt;header);&lt;span&gt;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;mut&lt;/span&gt;&lt;span&gt; &lt;/span&gt;gate&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;NoiseGate::new(args.noise_threshold,&lt;span&gt; &lt;/span&gt;release_time&lt;span&gt; &lt;/span&gt;&lt;span&gt;as&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;usize&lt;/span&gt;);&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;gate.process_frames(&lt;span&gt;&amp;amp;&lt;/span&gt;samples,&lt;span&gt; &lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;mut&lt;/span&gt;&lt;span&gt; &lt;/span&gt;sink);&lt;span&gt;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;Ok&lt;/span&gt;(())&lt;span&gt;
&lt;/span&gt;}&lt;span&gt;
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let’s take this for a test-run.&lt;/p&gt;
&lt;p&gt;The original clip:&lt;/p&gt;
&lt;p&gt;Your browser does not support the audio tag.&lt;/p&gt;
&lt;p&gt;Now let’s split it into pieces with our &lt;code&gt;wav-splitter&lt;/code&gt; program. At this point I don’t really know what values of &lt;code&gt;noise_threshold&lt;/code&gt; or &lt;code&gt;release_time&lt;/code&gt; are acceptible for this audio, but I figure &lt;code&gt;50&lt;/code&gt; and &lt;code&gt;0.3s&lt;/code&gt; should be usable?&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;$ ./target/release/examples/wav-splitter -o output --threshold 50 --release-time 0.3 data/N11379_KSCK.wav
$ ls output   
clip_0.wav clip_3.wav clip_6.wav clip_9.wav clip_12.wav clip_15.wav
clip_18.wav clip_21.wav clip_1.wav clip_4.wav clip_7.wav clip_10.wav
clip_13.wav clip_16.wav clip_19.wav clip_22.wav clip_2.wav clip_5.wav
clip_8.wav clip_11.wav clip_14.wav clip_17.wav clip_20.wav&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Wow it actually worked on the first try. Now that’s something you don’t see every day.&lt;/p&gt;
</description>
<pubDate>Sun, 10 Nov 2019 02:27:30 +0000</pubDate>
<dc:creator>gkbrk</dc:creator>
<og:title>Audio Processing for Dummies</og:title>
<og:description>In my spare time I’m an emergency services volunteer, and one of the tasks our unit has is to run the radio network and keep track of what’s happening. This can be a pretty stressful job, especially when there’s lots of radio traffic, and it’s not unusual to miss words or entire transmissions. To help with a personal project that could make the job easier I’d like to implement a basic component of audio processing, the Noise Gate.</og:description>
<og:type>article</og:type>
<og:url>http://adventures.michaelfbryan.com/posts/audio-processing-for-dummies/</og:url>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://adventures.michaelfbryan.com/posts/audio-processing-for-dummies/</dc:identifier>
</item>
<item>
<title>Andrej Karpathy talks about how Tesla&amp;#039;s NNs are structured and trained [video]</title>
<link>https://www.youtube.com/watch?v=oBklltKXtDE</link>
<guid isPermaLink="true" >https://www.youtube.com/watch?v=oBklltKXtDE</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://www.youtube.com/watch?v=oBklltKXtDE&quot;&gt;https://www.youtube.com/watch?v=oBklltKXtDE&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=21495685&quot;&gt;https://news.ycombinator.com/item?id=21495685&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 366&lt;/p&gt;
&lt;p&gt;# Comments: 219&lt;/p&gt;
</description>
<pubDate>Sun, 10 Nov 2019 01:08:54 +0000</pubDate>
<dc:creator>ojn</dc:creator>
<og:url>https://www.youtube.com/watch?v=oBklltKXtDE</og:url>
<og:title>PyTorch at Tesla - Andrej Karpathy, Tesla</og:title>
<og:image>https://i.ytimg.com/vi/oBklltKXtDE/maxresdefault.jpg</og:image>
<og:description>Hear from Andrej Karpathy on how Tesla is using PyTorch to develop full self-driving capabilities for its vehicles, including AutoPilot and Smart Summon.</og:description>
<og:type>video.other</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.youtube.com/watch?v=oBklltKXtDE</dc:identifier>
</item>
<item>
<title>Why the Boeing 737 will never take the place of the 757</title>
<link>https://thepointsguy.com/news/737-never-replace-757/</link>
<guid isPermaLink="true" >https://thepointsguy.com/news/737-never-replace-757/</guid>
<description>&lt;p&gt;I’m depressed. I’m depressed because the word on the street is that Boeing will &lt;em&gt;not&lt;/em&gt; be moving forward with its so-called “new midsize airplane,” or NMA, also known as the 797. That’s the rumor, at any rate.&lt;/p&gt;
&lt;p&gt;If built, the 797 would bridge the range and capacity gap between the narrowbody 737 family and the much larger 787 and 777 families — a slot occupied by the now-geriatric 757 and 767. The concept was formally unveiled at the Paris Air Show two years ago, and the planemaker has been mulling it over ever since. The uncertainty around the project has become a simmering backstory to the ongoing 737 MAX saga.&lt;/p&gt;
&lt;p&gt;The two are not unrelated.&lt;/p&gt;
&lt;p&gt;Back about 15 years ago, Boeing had a decision to make. Its popular 757 was getting long in the tooth. Orders were drying up and the company would need to develop a replacement. This wouldn’t be easy, because the 757 was, and still is, a very special machine. I may be biased, since I fly it, but you might undoubtedly call it the most versatile jetliner Boeing has ever built. It’s a medium-capacity, high-performing plane able to turn a profit on both short and longer-haul routes — domestic or international, across the Mississippi or across the North Atlantic. And along the way it meets every operational challenge. Short runway? Stiff headwinds? Full payload? No problem. With 180 passengers, the plane can safely depart from a short runway, climb directly to cruise altitude, and fly clear across the country or the ocean. Nothing else can do that. And it’s a great-&lt;em&gt;looking&lt;/em&gt; plane to boot.&lt;/p&gt;
&lt;img class=&quot;lazyautosizes wp-image-827284 size-full lazyload lazyload size-full&quot; alt=&quot;A 757-200 taking off in Atlanta in 2014 (Photo by Alberto Riva/TPG)&quot; data-sizes=&quot;auto&quot; data-src=&quot;https://i0.wp.com/thepointsguy.com/wp-content/uploads/2019/11/1_300_4407.jpg?fit=2048%2C2048px&amp;amp;ssl=1&quot; data-srcset=&quot;https://i0.wp.com/thepointsguy.com/wp-content/uploads/2019/11/1_300_4407.jpg?fit=2048%2C2048px&amp;amp;ssl=1 2048w&quot; src=&quot;https://i0.wp.com/thepointsguy.com/wp-content/uploads/2019/11/1_300_4407.jpg?fit=2048%2C2048px&amp;amp;quality=1#038;ssl=1&quot;/&gt;A 757-200 taking off in Atlanta in 2014 (Photo by Alberto Riva/TPG)
&lt;p&gt;Essentially three options were on the table. The first was to come up with a plane from scratch — a brand-new jetliner of roughly the 757’s size and capabilities. A second, less expensive option would be to equip the existing airframe with new engines, modern avionics and other upgrades — a 757-X, if you will. Option three would be to abandon the 757 template altogether and, instead, turn to the company’s favorite cash cow, the 737, and somehow push it, squeeze it, force it, into the role of the 757.&lt;/p&gt;
&lt;p&gt;Although Boeing hasn’t — at least not yet — officially abandoned the idea of new airplane, it is option three, if only by default, that seems to have won. Production of the 757 ceased for good in 2004, and the 737 remains Boeing’s only single-aisle replacement option. Need a 180-ish seater? If you’re buying from Boeing, it’s a 737 or nothing: the -800, the -900, or the beleaguered MAX.&lt;/p&gt;
&lt;p&gt;None of these, however, can do what the 757 does. The 737’s range allows U.S. coast-to-coast and limited transatlantic city pairings, but anything further is out of the question. And what it can do, it doesn’t do particularly well. On longer routes it’s often payload and/or altitude restricted, meaning it can’t take off with a full load or needs to stick to lower altitudes. And for a jet of its size it uses huge amounts of runway with startlingly high takeoff and landing speeds.&lt;/p&gt;
&lt;p&gt;I was jammed into the cockpit jumpseat — more of a jump-bench, actually — on an American Airlines 737-800 not long ago, flying from Los Angeles to Boston. Man, if we didn’t need every foot of LAX’s runway 25R, at last getting off the ground at a nearly supersonic 165 knots. What would it be like on the westbound leg, I wondered — a longer flight, from a shorter runway, in the face of winter headwinds?&lt;/p&gt;
&lt;p&gt;By contrast, I recently piloted a 757 from Boston to San Francisco. At flaps 20, we lifted off at a docile 130 knots from Logan’s stubby, 7,000-foot runway 09, with nearly half the runway still remaining! With every seat full and seven hours’ worth of fuel, we climbed directly to 36,000 feet and flew all the way to California. &lt;em&gt;That’s&lt;/em&gt; performance. A 737 cannot come close to that.&lt;/p&gt;
&lt;p&gt;In the 737, Boeing took what essentially was a regional jet — the original 737-100 first flew in 1967, and was intended to carry a hundred or so passengers on flights of around 400 miles — and has pushed, pushed, and pushed the plane into roles it was never intended for. Bigger and bigger engines, fancier avionics, MCAS. Five decades and 10 variants later, the MAX is a monsterized hybrid of a thing — a plane that wants, and needs to be something that it’s not: all muscle and power and advanced technology, jammed into the framework of a 50-year-old design.&lt;/p&gt;
&lt;p&gt;From the other side of the Atlantic, meanwhile, the Airbus line features a similar gap. The A310 died away a long time ago, and size-wise there’s nothing between the A320 family and the long-haul A330.&lt;/p&gt;
&lt;p&gt;Or is there? The biggest Airbus narrow-body is the A321 — a stretched-out version of the basic A320. Two upcoming variants, the A321LR (long range), and the A321XLR (extra long-range), are about to hit the market. With two-class seating for around 200 passengers and a range of almost 5,000 nautical miles, these aircraft have enormous potential. JetBlue is among airlines planning to use the LR on routes across the pond, serving Western Europe from New York and Boston.&lt;/p&gt;
&lt;p&gt;Whether you’re an airline CEO, a pilot, or a passenger, there’s a lot to like about the A320 family generally, certainly when matched against the 737. It requires less runway, for one, and uses tamer takeoff and landing speeds. On the inside it’s quieter and more spacious. A few weeks ago I rode aboard a 737 for the first time in a while. I normally find myself on an A320 or A321, and I was startled at how uncomfortable the 737 was in comparison. I had a window seat about a third of the way down, and the narrower cross-section meant my shoulder was pressed into the sidewall the entire time, forcing me to sit at an angle. And the noise. The 737 is a &lt;em&gt;loud&lt;/em&gt; airplane. On a two, three, or four-hour trip such comfort levels are acceptable. But six? How about a seven-hour nonstop from Gatwick or Shannon?&lt;/p&gt;
&lt;p&gt;And if you think it’s noisy in the cabin, you should hear the cockpit, where the sound of the onrushing air must push 100 decibels. Loud and tight, with barely enough room for the crew’s hand luggage. It’s interesting how both the A320 and the 737 families have roughly the same exterior dimensions, yet somehow the A320’s cockpit is three times roomier and five times quieter. How can that be? Well, look closely at the nose section of the 737. Do you recognize that? The old-fashioned flight deck windows, the shapes of the radome and fuselage? It’s the 707.  Unchanged in over 60 years.&lt;/p&gt;
&lt;img class=&quot;wp-image-827422 size-full lazyautosizes lazyload lazyload size-full&quot; alt=&quot;(Original Caption) Photograph of boeing 707 made for qantas, the Australian overseas airline. Filed 1965.&quot; data-sizes=&quot;auto&quot; data-src=&quot;https://i0.wp.com/thepointsguy.com/wp-content/uploads/2019/11/GettyImages-515497634.jpg?fit=2048%2C2048px&amp;amp;quality=1#038;ssl=1&quot; data-srcset=&quot;https://i0.wp.com/thepointsguy.com/wp-content/uploads/2019/11/GettyImages-515497634.jpg?fit=2048%2C2048px&amp;amp;quality=1#038;ssl=1 2048w&quot; src=&quot;https://i0.wp.com/thepointsguy.com/wp-content/uploads/2019/11/GettyImages-515497634.jpg?fit=2048%2C2048px&amp;amp;quality=1#038;quality=1#038;ssl=1&quot;/&gt;A Boeing 707 in a 1965 file photo (Getty Images)
&lt;p&gt;While we’re at it, take a MAX and put it next to an old 737-100 from the late ’60s. It’s at once the same and yet completely different. You can virtually see the airplane straining, stretching, reaching — trying so hard to become something else. And therein is the problem. Boeing desires the commonality, the simpler training footprint and all the good things that the 737 family offers. But it also wants a plane that can take 200 people across the ocean. What it’s finding out is that perhaps, after all, they cannot be the same thing. You can only reinvent so many times.&lt;/p&gt;
&lt;img class=&quot;wp-image-827348 size-full lazyautosizes lazyload lazyload size-full&quot; alt=&quot;This Lufthansa Airlines Boeing 737-100, seen here on February 26, 1968, was later sold to China. (Photo by © Museum of Flight/CORBIS/Corbis via Getty Images)&quot; data-sizes=&quot;auto&quot; data-src=&quot;https://i2.wp.com/thepointsguy.com/wp-content/uploads/2019/11/GettyImages-612585860.jpg?fit=2048%2C2048px&amp;amp;quality=1#038;ssl=1&quot; data-srcset=&quot;https://i2.wp.com/thepointsguy.com/wp-content/uploads/2019/11/GettyImages-612585860.jpg?fit=2048%2C2048px&amp;amp;quality=1#038;ssl=1 2048w&quot; src=&quot;https://i2.wp.com/thepointsguy.com/wp-content/uploads/2019/11/GettyImages-612585860.jpg?fit=2048%2C2048px&amp;amp;quality=1#038;quality=1#038;ssl=1&quot;/&gt;A Boeing 737-100 in 1968 (Photo by © Museum of Flight/CORBIS/Corbis via Getty Images) &lt;img class=&quot;wp-image-827349 size-full lazyautosizes lazyload lazyload size-full&quot; alt=&quot;SEATTLE, WA - APRIL 13: A Boeing 737 MAX 9 taxis following its first flight at Boeing Field on April 13, 2017 in Seattle, Washington. According to Boeing the new plane consumes 20% less fuel per passenger than typical aircraft. (Photo by Stephen Brashear/Getty Images)&quot; data-sizes=&quot;auto&quot; data-src=&quot;https://i2.wp.com/thepointsguy.com/wp-content/uploads/2019/11/GettyImages-668234256.jpg?fit=2048%2C2048px&amp;amp;quality=1#038;ssl=1&quot; data-srcset=&quot;https://i2.wp.com/thepointsguy.com/wp-content/uploads/2019/11/GettyImages-668234256.jpg?fit=2048%2C2048px&amp;amp;quality=1#038;ssl=1 2048w&quot; src=&quot;https://i2.wp.com/thepointsguy.com/wp-content/uploads/2019/11/GettyImages-668234256.jpg?fit=2048%2C2048px&amp;amp;quality=1#038;quality=1#038;ssl=1&quot;/&gt;The Boeing 737 MAX 9 in 2017 (Photo by Stephen Brashear/Getty Images)
&lt;p&gt;Indeed the A321LR will be the closest thing out there to a 757. Comfort-wise it’ll be equal, if not superior, with almost the range, almost the capacity, and almost the muscle. Sure, those are a lot of important almosts. Eventually, however, the last 757 will be put to pasture, and when that happens, the lack of a 797 all but assures the A321’s domination of the mid-market niche.&lt;/p&gt;
&lt;p&gt;Until that day, U.S. carriers continue holding on to their 757s. Hundreds remain in service on trunk routes and transcons. American, United and Delta fly 757s from their East Coast gateways on eight-hour services to Western Europe, Scandinavia, even Africa. Of course, you’ll also see it on 60-minute segments into Kansas City, Cleveland, Tucson and Tampa. Nothing can match it across such a wide swath of markets, with little or no concerns as to weather, payload or runway length.&lt;/p&gt;
&lt;p&gt;As to its relunctance in committing to the 797, Boeing says that the sales potential for such a plane, estimated at anywhere from 300 to 1,000 units, is possibly too limited. As a point of comparison, the company claims that it won’t break even on its 787 program until at least 1,500 aircraft have been delivered. If true, that’s a sad testament to how expensive it has become to develop new aircraft. If 1,000 airplanes can’t justify a new line, what can?&lt;/p&gt;
&lt;p&gt;Still, it seems that filling such a niche should be well within the technical expertise, and certainly the imagination, of the world’s largest and most prolific plane-maker. Wouldn’t the 797 borrow much of the 787’s architecture, and thus be cheaper to produce? And isn’t this the same company that, 50 years ago, created the 747, an airplane more than double the size of any existing plane, taking it from a napkin drawing to an actual, in-the-air prototype in less than &lt;em&gt;two years&lt;/em&gt;! Forgive me for looking at this romantically, but what happened to that sprit and vision?&lt;/p&gt;
&lt;p&gt;And if Boeing &lt;em&gt;does&lt;/em&gt; press ahead with the 797, will they build the right plane? Preliminary renderings of the NMA from 2017 show us a jetliner seating between 220 and 270 passengers, with a composite fuselage and wings, and a range of around 5,000 nautical miles. Is it just me, or is this much too big? I like the twin-aisle idea; two aisles make for faster boarding and deplaning, and give the cabin a roomier feel overall. But, otherwise, how is this not just a 787 with a shorter range? A 757 replacement should be a plane that &lt;em&gt;tops out&lt;/em&gt; at around 220 passengers, not one that &lt;em&gt;starts&lt;/em&gt; there.&lt;/p&gt;
&lt;p&gt;“It strikes me that the airplane Boeing &lt;em&gt;ought&lt;/em&gt; to be putting out there is one that already exists, at least as a template,” I wrote on my website about a year ago. I was talking about the 767, Boeing’s venerable quasi-widebody that dates to the early 1980s. Although a passenger version hasn’t been ordered in years, the jet remains in production as a freighter and as a military midair refueler. Why not upgrade it, I asked in my article, with new engines, a new cockpit, and overhauled internal systems? Is that not a better option, especially considering the limited market that Boeing sees, than spending billions on an all-new airframe? “Call it the 767-X,” I wrote.&lt;/p&gt;
&lt;img class=&quot;wp-image-827269 size-full lazyautosizes lazyload lazyload size-full&quot; alt=&quot;A Boeing 767-200B prototype jet flies near Mount Rainier. Washington, 1980s. (Photo by © Museum of Flight/CORBIS/Corbis via Getty Images)&quot; data-sizes=&quot;auto&quot; data-src=&quot;https://i0.wp.com/thepointsguy.com/wp-content/uploads/2019/11/GettyImages-612585888.jpg?fit=2048%2C2048px&amp;amp;quality=1#038;ssl=1&quot; data-srcset=&quot;https://i0.wp.com/thepointsguy.com/wp-content/uploads/2019/11/GettyImages-612585888.jpg?fit=2048%2C2048px&amp;amp;quality=1#038;ssl=1 2048w&quot; src=&quot;https://i0.wp.com/thepointsguy.com/wp-content/uploads/2019/11/GettyImages-612585888.jpg?fit=2048%2C2048px&amp;amp;quality=1#038;quality=1#038;ssl=1&quot;/&gt;The Boeing 767-200 prototype flies near Mount Rainier. Washington, in the 1980s. (Photo by © Museum of Flight/CORBIS/Corbis via Getty Images)
&lt;p&gt;Well, in October Boeing released a proposal for a 767 derivative called, guess what, the 767-X.&lt;/p&gt;
&lt;p&gt;However, the 767 I had in mind as a baseline was the original -200. The -200, which debuted in 1982, is a long-since obsolete aircraft that, by today’s standards, would be laughably uneconomical. In terms of size, range, and capacity, however, it’d be just about perfect. Imagine a modernized, re-engined version delivering twin-aisle comfort for 180-200 people, containerized luggage and cargo, and all the range and unbeatable brawn of the 757. What’s not to like?&lt;/p&gt;
&lt;p&gt;Boeing, though, says the -X would build not on the platform of the -200, but on that of the -400, and would be aimed at the cargo market. The -400, which sold very poorly, has seats for around 250 people. Again, this is too big. In any case, Boeing eyes the 767-X chiefly as a freighter, not a passenger carrier.&lt;/p&gt;
&lt;p&gt;Which leaves us… where?&lt;/p&gt;
&lt;p&gt;While Boeing makes up its mind, the 737 MAX drama continues at center stage. And here’s the part we hate to ask but need to: Why did the MAX need to exist in the first place?&lt;/p&gt;
&lt;p&gt;What if, back in 2004, Boeing had gone ahead with the 797 in lieu of yet bigger and heavier 737s? And were the MAX tragedies, on some deep-down level, an inevitable result of Boeing’s decades-long obsession with its 737 — its determination to keep the production line going, variant after variant, seemingly forever? Where in the blame pie does poor corporate strategy and stubborness fall?&lt;/p&gt;
&lt;p&gt;There’s a place for the 737 and always will be. I just don’t know if that place is as far and wide as Boeing would like it to be. And although you won’t see it any reports, but what happened in Africa and Indonesia is, maybe, fate’s way of telling Boeing that the time has come to move on.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Patrick Smith is an airline pilot and the host of &lt;a href=&quot;http://www.askthepilot.com&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;askthepilot.com&lt;/a&gt;. His book &lt;a href=&quot;http://www.askthepilot.com/cockpitconfidential&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Cockpit Confidential&lt;/a&gt; is a New York Times bestseller.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Featured photo by JT Genter/TPG&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 10 Nov 2019 00:21:35 +0000</pubDate>
<dc:creator>smacktoward</dc:creator>
<og:description>I’m depressed. I’m depressed because the word on the street is that Boeing will not be moving forward with its so-called “new midsize airplane,” or NMA, also known as the 797. That’s the rumor, at any rate. If built, the 797 would bridge the range and capacity gap between the narrowbody 737 family and the …</og:description>
<og:image>https://i1.wp.com/thepointsguy.com/wp-content/uploads/2019/10/20191028_DFW-Airport_American-Airlines-737-800-at-DFW_JTGenter.jpg?fit=1600%2C1067px&amp;ssl=1</og:image>
<og:title>Why the Boeing 737 will never take the place of the 757</og:title>
<og:type>article</og:type>
<og:url>https://thepointsguy.com/news/737-never-replace-757/</og:url>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://thepointsguy.com/news/737-never-replace-757/</dc:identifier>
</item>
<item>
<title>Rust 2020: GUI and Community</title>
<link>https://raphlinus.github.io/rust/druid/2019/10/31/rust-2020.html</link>
<guid isPermaLink="true" >https://raphlinus.github.io/rust/druid/2019/10/31/rust-2020.html</guid>
<description>&lt;p&gt;In response to the &lt;a href=&quot;https://blog.rust-lang.org/2019/10/29/A-call-for-blogs-2020.html&quot;&gt;call for blogs about the vision for Rust for 2020&lt;/a&gt;, I’m going to write about GUI. I believe the time is right for a native GUI toolkit written in Rust, and that such a thing would fill a very important niche. There is a demand for performance (which, to me, includes startup time, RAM footprint, and binary size), and Rust is in the best position to deliver on that.&lt;/p&gt;
&lt;p&gt;I’ve been interested in writing GUI applications in Rust for a very long time. I started &lt;a href=&quot;https://github.com/xi-editor/xi-editor&quot;&gt;xi-editor&lt;/a&gt; 3.5 years ago, under the assumption that it wouldn’t be practical to write the GUI layers &lt;em&gt;in&lt;/em&gt; Rust, but that interprocess RPC would be a reasonable way to glue a “core” to GUI front-ends. My explorations have led me to question both assumptions: RPC adds a lot of system complexity, and I also believe that we &lt;em&gt;can&lt;/em&gt; write the GUI in Rust. In fact, the &lt;a href=&quot;https://github.com/xi-editor/druid&quot;&gt;druid&lt;/a&gt; repo has a Git history that’s evolved directly from an experimental Windows front-end for xi-editor.&lt;/p&gt;
&lt;h2 id=&quot;we-dont-yet-know-what-to-build&quot;&gt;We don’t yet know what to build&lt;/h2&gt;
&lt;p&gt;There are many opinions on the best way to write GUI code, and Rust adds its own complications. Rust makes certain idioms easy, but does not adapt well to the traditional object oriented model of the world, which at heart is a big wad of shared mutable state, where interacting objects all have references to each other.&lt;/p&gt;
&lt;p&gt;Even within the object-oriented world, there’s nothing like a consensus, though there are many successful examples. The trend is moving from classical OO approaches (including various permutations of model and view, as explained in the &lt;a href=&quot;https://acko.net/blog/model-view-catharsis/&quot;&gt;Model-View-Catharsis&lt;/a&gt; essay) to a more reactive approach, which is more declarative. But there is great diversity among reactive approaches as well, including pure Functional Reactive Programming, &lt;a href=&quot;https://guide.elm-lang.org/architecture/&quot;&gt;The Elm Architecture&lt;/a&gt;, which is &lt;a href=&quot;https://elm-lang.org/news/farewell-to-frp&quot;&gt;no longer based on FRP&lt;/a&gt;, and various other adaptations. (Yaron Minsky’s &lt;a href=&quot;https://blog.janestreet.com/breaking-down-frp/&quot;&gt;Breaking down FRP&lt;/a&gt; is a good overview of theoretical approaches, while Dan Abramov’s &lt;a href=&quot;https://overreacted.io/react-as-a-ui-runtime/&quot;&gt;React as a UI Runtime&lt;/a&gt; is an excellent dive into React, including the motivation for its newer emphasis on Hooks).&lt;/p&gt;
&lt;p&gt;Even these two major categories don’t quite cover the space. In game circles, various forms of immediate mode GUI are popular, as they promise a more declarative UI style and cut through a lot of complexity. The best example is &lt;a href=&quot;https://github.com/ocornut/imgui&quot;&gt;Dear ImGui&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A major new inspiration is SwiftUI, which takes inspiration from reactive approaches, but is its own thing. It relies heavily on support from the Swift language such as &lt;a href=&quot;https://mecid.github.io/2019/06/12/understanding-property-wrappers-in-swiftui/&quot;&gt;property wrappers&lt;/a&gt;, which to me come across as “magic.” I’d also like to mention &lt;a href=&quot;https://sinusoid.es/lager/&quot;&gt;Lager&lt;/a&gt;, which has some similarity of goals with SwiftUI, but is based on C++, and relies much more heavily on immutable data structures (likely a better fit for Rust than the reference-heavy Bindings and such of SwiftUI).&lt;/p&gt;
&lt;p&gt;At a lower level, there is almost as much diversity of opinion about rendering technologies. Should rendering be based on the traditional 2D graphics model, or expressed more in GPU-centric concepts. To what extent should it adopt technology from the Web, such as the use of CSS to describe styles?&lt;/p&gt;
&lt;p&gt;Basically, &lt;em&gt;all&lt;/em&gt; of the above choices can lead to working GUI. But some choices will yield better results at lower cost, while others will be plagued by tedious, errorprone code, pernicious performance problems, or difficulty expressing that ever so important final bit of UX polish. A big company could throw a dart and pick an architecture, pouring in resources until it was good enough, but to be viable as community-driven GUI we have to make smarter choices. And the best basis for those choices is to try a bunch of things and see what works. I believe druid is a credible choice, and to the extent that it fails, those failures will be &lt;em&gt;interesting&lt;/em&gt; to the broader Rust GUI effort.&lt;/p&gt;
&lt;p&gt;This thinking drives the roadmap for druid itself. For the next few months at least, the primary focus is building a single app: &lt;a href=&quot;https://github.com/linebender/runebender&quot;&gt;Runebender&lt;/a&gt;, a font editor. Since building a GUI toolkit is such an ambitious effort, deliberately reducing scope is one way to get a better chance of success. Of course, I don’t want to discourage experimentation, but the message should be clear: the closer your app’s needs are to Runebender’s, the better chance druid will meet those needs any time soon.&lt;/p&gt;
&lt;p&gt;Runebender is generously supported financially by Google Fonts, for which I am very grateful, as it makes it more of a serious and professional project. It is still very early days for the functionality of the app, but I am hopeful it will grow into a productive and creative tool (and I plan to spend a fair amount of time in it as a user, creating new fonts). The funding covers one other full timer, Colin Rofls, who’s doing the bulk of the implementation on Runebender and a ton on druid as well. We’ve been working together a long time, as he’s also been one of the main people on xi-editor.&lt;/p&gt;
&lt;h2 id=&quot;community&quot;&gt;Community&lt;/h2&gt;
&lt;p&gt;I agree with &lt;a href=&quot;https://blog.hwc.io/posts/rust-2020/&quot;&gt;hwc’s post&lt;/a&gt; that we need to focus on community, and feel it’s particularly important for nurturing a viable GUI toolkit. Here are some thoughts on that.&lt;/p&gt;
&lt;p&gt;First, use a general positive tone of support. I think this has been characteristic of the Rust community, but I want to emphasize it. Because we don’t know quite what to build, all of the Rust GUI efforts can provide valuable lessons. The projects should try to learn from each other and share common infrastructure when possible. Criticism should be constructive and not be based in simply different opinions or tastes, or in impatience. Building a true Rust GUI is an ambitious, multi-year effort. None of the Rust GUI crates are good enough to use for production now, but hopefully in time we will get there.&lt;/p&gt;
&lt;p&gt;Second, find good discussion forums. I value /r/rust as a common gathering ground for the Rust community, but am less impressed with it as a place to share deeper knowledge or facilitate decision making. It’s definitely one of the best subreddits, and Reddit is definitely one of the best chan-style discussion boards, but I still aspire to something better, or at least better suited to the actual needs of open source projects. (For a top-notch exploration into those needs, see Evan Czaplicki’s &lt;a href=&quot;https://devonzuegel.com/post/the-hard-parts-of-open-source-by-evan-czaplicki&quot;&gt;The Hard Parts of Open Source&lt;/a&gt;.) Not being satisfied with any of the existing discussion spaces is one reason I started &lt;a href=&quot;https://xi.zulipchat.com/&quot;&gt;the xi Zulip&lt;/a&gt;. That is &lt;em&gt;the&lt;/em&gt; community space for druid, apps we’re building in druid, and infrastructure. People working on other GUI toolkits are welcome there, and I think there’s scope for interesting discussions and tending of common resources. In addition, blogs continue to be the best place for longer-form explorations of deeper topics. I’ve not been writing as much here as part of a deliberate attempt to manage my priorities and energy, but in 2020 I plan to make explicit space for it.&lt;/p&gt;
&lt;p&gt;Third, don’t forget the value of in-person interactions. It’s easy to imagine that all important business takes place on the Internet, but that’s not true. I’m fortunate to be in the Bay Area, and have been enjoying Rust meetups as well as regular coffee dates with Rust people here. Also conferences and my trip to Europe, where I spent some time with (among others) Rik Arends, creator of makepad. These meetings are more important to my understanding of what’s going on in Rust GUI space than online interactions.&lt;/p&gt;
&lt;p&gt;Fourth, there’s a lot of scope to expand on existing efforts like &lt;a href=&quot;https://areweguiyet.com/&quot;&gt;areweguiyet&lt;/a&gt;. Sadly, the incentives of the modern Internet don’t support such journalistic efforts well. But there’s so much more that could be done here, including comparisons and progress reports on the various GUI efforts, performance evaluation of different rendering approaches, etc. I personally plan to write about such topics, but of course advocating druid. Having a neutral, well-informed perspective would be an &lt;em&gt;amazing&lt;/em&gt; resource for the community, and I am sad there is not more of this sort of thing.&lt;/p&gt;
&lt;p&gt;Fifth, seek out mentoring relationships, both as mentor and mentee. Jane Lusby gave a talk on &lt;a href=&quot;https://yaah.dev/getting-involved&quot;&gt;Navigating The Rust OSS Community&lt;/a&gt;, emphasizing the importance of mentoring. A significant fraction of my workweek is mentoring people in the various projects related to Runebender and druid. Also, we’ve done (as the xi organization) &lt;a href=&quot;https://summerofcode.withgoogle.com/&quot;&gt;Google Summer of Code&lt;/a&gt; the last two years, and hope to scale that back up in 2020. If you’re a student who’s a candidate for GSoC, now’s not a bad time to start planning.&lt;/p&gt;
&lt;p&gt;I’m consciously trying to grow druid as a community effort, and so far the results have been very encouraging. The Linux port (now merged to master!) was done by a team of contributors (Steven Van Bael, Andrea Cognolato, and Rasmus Thomsen), and much of the work on individual widgets is now being done by the community as well, thanks in part to a recent &lt;a href=&quot;https://pauljmiller.com/posts/druid-widget-tutorial.html&quot;&gt;tutorial&lt;/a&gt; by Paul Miller. As of now, there are a total of 25 &lt;a href=&quot;https://github.com/xi-editor/druid/graphs/contributors&quot;&gt;contributors&lt;/a&gt;, and I want to thank all of them for their work.&lt;/p&gt;
&lt;h2 id=&quot;rust-language-support&quot;&gt;Rust language support&lt;/h2&gt;
&lt;p&gt;For the most part, this vision doesn’t really depend on much from the Rust language. Of course, when developing GUI, iteration cycles are important, so improvements in compile time are also welcome. Better support for hot-reloading is likely to pay off as well. Web is one of the targets for GUI (very experimental still in druid), so building out the wasm infrastructure is also great.&lt;/p&gt;
&lt;p&gt;But generally this is about libraries and ecosystem, not the language or the compiler. It is an open question whether the Rust community can sustain an effort as ambitious as building a GUI toolkit. I hope and believe it can, and am happy to be a significant part of my time and energy in 2020 trying to make that happen.&lt;/p&gt;
&lt;p&gt;Discuss on &lt;a href=&quot;https://www.reddit.com/r/rust/comments/dpurlj/rust_2020_gui_and_community/&quot;&gt;/r/reddit&lt;/a&gt;.&lt;/p&gt;
</description>
<pubDate>Sat, 09 Nov 2019 23:46:07 +0000</pubDate>
<dc:creator>justin66</dc:creator>
<og:title>Rust 2020: GUI and community</og:title>
<og:description>In response to the call for blogs about the vision for Rust for 2020, I’m going to write about GUI. I believe the time is right for a native GUI toolkit written in Rust, and that such a thing would fill a very important niche. There is a demand for performance (which, to me, includes startup time, RAM footprint, and binary size), and Rust is in the best position to deliver on that.</og:description>
<og:url>https://raphlinus.github.io/rust/druid/2019/10/31/rust-2020.html</og:url>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://raphlinus.github.io/rust/druid/2019/10/31/rust-2020.html</dc:identifier>
</item>
<item>
<title>Fast Markov chains in ~20 lines of sh, grep, cut and Awk</title>
<link>https://0x0f0f0f.github.io/posts/2019/11/really-fast-markov-chains-in-~20-lines-of-sh-grep-cut-and-awk/</link>
<guid isPermaLink="true" >https://0x0f0f0f.github.io/posts/2019/11/really-fast-markov-chains-in-~20-lines-of-sh-grep-cut-and-awk/</guid>
<description>&lt;p&gt;Some days ago, driven by boredom, I implemented my own Markov chains in Haskell by following this great &lt;a href=&quot;https://dschrempf.github.io/coding/2018-02-10-markov-chains-in-haskell/&quot; target=&quot;_blank&quot;&gt;tutorial&lt;/a&gt;. Markov chains can be a way of implementing really fun “dumb” group chat bots, that can generate new random messages that sound realistic based on the previous history of the chat. From Wikipedia:&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;A Markov chain is a stochastic model describing a sequence of possible events in which the probability of each event depends only on the state attained in the previous event.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here’s a &lt;a href=&quot;http://setosa.io/ev/markov-chains/&quot; target=&quot;_blank&quot;&gt;great article&lt;/a&gt; introducing the concept of Markov chains. In the case of a group chat bot, each state (or node of the graph) is one of the words that was previously sent in the messages, and each probability of transition towards another state (word) is based on the frequency of the first word (transition’s source state) being followed by the second one (the transition’s destination state).&lt;/p&gt;
&lt;p&gt;After coding a simple Markov chain on words in Haskell, I’ve noticed that it was really slow and resource intensive even on a few thousand of messages. This was because the model was calculated by summing the frequency of word pairs and it was kept in memory inside of a &lt;code&gt;Data.Map&lt;/code&gt; structure.&lt;/p&gt;
&lt;p&gt;Although the Haskell implementation can get much faster if optimized, my friend &lt;a href=&quot;https://github.com/Francesco149&quot; target=&quot;_blank&quot;&gt;Francesco&lt;/a&gt; showed me his amazing implementation of Markov chains on words made &lt;strong&gt;in plain sh and awk&lt;/strong&gt;, in ~20 lines of code.&lt;/p&gt;
&lt;h3 id=&quot;markov-sh-https-github-com-francesco149-markov-sh&quot;&gt;&lt;a href=&quot;https://github.com/Francesco149/markov.sh&quot; target=&quot;_blank&quot;&gt;markov.sh&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;His project is split in 2 programs. The first one, &lt;code&gt;mrkfeed.awk&lt;/code&gt; is a really simple &lt;code&gt;awk&lt;/code&gt; program that separates words on a line into pairs of words, separated line by line.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-awk&quot;&gt;#!/usr/bin/awk -f

{
  for (i = 1; i &amp;lt; NF; i++) {
    print $i,$(i+1)
  }
  print $i
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;For example, let’s take this simple chat log (referred to as &lt;code&gt;chatlog.txt&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;hello everybody
hi people
hello people
how are you
how are things going
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The first step is creating a model for the Markov chain. Here’s what will be into the model file when we run &lt;code&gt;./mrkfeed.awk &amp;lt; chatlog.txt &amp;gt;&amp;gt; model.mrkdb&lt;/code&gt;, (piped into &lt;code&gt;sort&lt;/code&gt; for readability)&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;are things
are you
everybody
going
hello everybody
hello people
hi people
how are
how are
people
people
things going
you
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The next step is generating a new random message with &lt;code&gt;./mrkwords.sh model.mrkdb 50 | tr '\n' ' ' &amp;amp;&amp;amp; echo&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;At first, &lt;code&gt;mrkwords.sh&lt;/code&gt; will pick a random line from the model and pick the first word of the pair as the first word of our output message. After this, it will filter the model to find what word pairs start with the first word it picked. Let’s say it picked the word &lt;code&gt;hello&lt;/code&gt; as the first word of the message. It will then randomly choose the second word of the message from the second element of a pair in the model that starts with the first word it chose. In this case, since it picked &lt;code&gt;hello&lt;/code&gt; as the first word, it may pick one between &lt;code&gt;everybody&lt;/code&gt; and &lt;code&gt;people&lt;/code&gt; as the next word. It then repeats this process by passing the last word it chose as the word to choose in the next iteration. It may be even easier to understand in terms of code than in plain words.&lt;/p&gt;
&lt;p&gt;The presence of duplicate lines in the model is what gives it the power of weighed probability, perfectly modeling the process of random extraction, making the generated models real Markov chains. Doing this with plain unix tools makes &lt;code&gt;markov.sh&lt;/code&gt; incredibly fast, because it is sacrificing disk space by storing duplicates in exchange for a huge improvement in the complexity of the computations. Although Markov chains are often considered complex, this small shell program shines in showing the real underlying simplicity.&lt;/p&gt;
&lt;p&gt;Here’s a commented version of &lt;code&gt;./mrkwords.sh&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;#!/bin/sh

# choose the first argument as the model file or try to open '.mrkdb'
file=&quot;${1:-~/.mrkdb}&quot;

# $n is the maximum number of remaining words (iterations)
# it is the 2nd argument of this program
n=&quot;${2:-1}&quot;

# if present, use $key (3rd argument) to find pairs starting
# with it in the model, you may use this to force a
# word as the first word of the message
key=&quot;$3&quot;

# if $key is set print it
[ ! -z &quot;$key&quot; ] &amp;amp;&amp;amp; echo &quot;$key&quot;

# the max remaining number of words cannot be equal or less to 0
[ &quot;$n&quot; -le 0 ] &amp;amp;&amp;amp; exit

# if key is not set, set the chosen word to the first element
# of a random pair in the model
if [ -z &quot;$key&quot; ]; then
  word=$(shuf -n 1 &amp;lt; &quot;$file&quot; | cut -d' ' -f1)

# otherwise (key is set)
else
    # step 1, filter the model to find lines containing $key
    # step 2, use awk to get only the lines in the model
    # beginning with $key (the first element of the pairs)
    # step 3, after filtering out the model, pick the second element of
    # a random pair and set it as the value of the variable $word
  word=$(grep -Fw &quot;$key&quot; &amp;lt; &quot;$file&quot; |
    awk -v key=&quot;$key&quot; '$1 == key { print $0 }' |
    shuf -n 1 | awk '{ print $2 }') || exit

    # if $word is empty then exit this iteration
    # this may also mean that the randomized step picked
    # a line in the model containing only the first element
    # (signaling the end of the process)
  [ -z &quot;$word&quot; ] &amp;amp;&amp;amp; exit
fi

# the real magic happens here. this last step is similar
# to a recursive function call in most programming languages
# it runs this program again, with $n decremented by 1
# and with the chosen $word as the next iteration's $key
exec &quot;$0&quot; &quot;$file&quot; &quot;$(( n - 1 ))&quot; &quot;$word&quot;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;In this example it generates a random fortune, modeled from the &lt;code&gt;goedel&lt;/code&gt; fortunes contained in the famous &lt;code&gt;fortune-mod&lt;/code&gt; package.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;# remove the % delimiter in the fortune file and save it as a .txt
sed -e '/^%$/d' &amp;lt; /usr/share/fortunes/goedel &amp;gt;&amp;gt; goedel.txt
# generate the model
./mrkfeed.awk &amp;lt; goedel.txt &amp;gt;&amp;gt; goedelmodel.mrkdb
# get a random fortune!
./mrkwords.sh goedelmodel.mrkdb 50 | tr '\n' ' '
the dimensionality of computerized fortune-tellers!
# again!
./mrkwords.sh goedelmodel.mrkdb 50 | tr '\n' ' '
the thoughts of metalanguage are still free.
# again!
./mrkwords.sh goedelmodel.mrkdb 50 | tr '\n' ' '
# let's change the model by using all fortunes this time
./mrkwords.sh fortunesmodel.mrkdb 50 | tr '\n' ' '
low taste, and goin' insane,
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;markov.sh&lt;/code&gt; is extremely fast, even on relatively large data sets (millions of lines).&lt;/p&gt;
</description>
<pubDate>Sat, 09 Nov 2019 19:37:40 +0000</pubDate>
<dc:creator>0x0f0f0f</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://0x0f0f0f.github.io/posts/2019/11/really-fast-markov-chains-in-~20-lines-of-sh-grep-cut-and-awk/</dc:identifier>
</item>
<item>
<title>The FCC Has Fined Robocallers $208M, Collected $6,790</title>
<link>https://www.wsj.com/articles/the-fcc-has-fined-robocallers-208-million-its-collected-6-790-11553770803?mod=rsswn</link>
<guid isPermaLink="true" >https://www.wsj.com/articles/the-fcc-has-fined-robocallers-208-million-its-collected-6-790-11553770803?mod=rsswn</guid>
<description>&lt;div class=&quot;is-lead-inset&quot;&gt;
      &lt;div data-layout=&quot;header&amp;#10;              &quot; data-layout-mobile=&quot;&quot; class=&quot;&amp;#10;        media-object&amp;#10;        type-InsetMediaIllustration&amp;#10;          header&amp;#10;    scope-web|mobileapps&amp;#10;  article__inset&amp;#10;        article__inset--type-InsetMediaIllustration&amp;#10;          article__inset--header&amp;#10;    article__inset--lead&amp;#10;  &quot;&gt;
      
      
          
    &lt;figure class=&quot;media-object-image enlarge-image renoImageFormat- img-header article__inset__image&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;div data-mobile-ratio=&quot;66.66666666666666%&quot; data-layout-ratio=&quot;66.66666666666666%&quot; data-subtype=&quot;photo&quot; class=&quot;image-container  responsive-media article__inset__image__image&quot;&gt;
    
        &lt;img srcset=&quot;https://images.wsj.net/im-63149?width=140&amp;amp;size=1.5 140w,&amp;#10;https://images.wsj.net/im-63149?width=540&amp;amp;size=1.5 540w,&amp;#10;https://images.wsj.net/im-63149?width=620&amp;amp;size=1.5 620w,&amp;#10;https://images.wsj.net/im-63149?width=700&amp;amp;size=1.5 700w,&amp;#10;https://images.wsj.net/im-63149?width=860&amp;amp;size=1.5 860w,&amp;#10;https://images.wsj.net/im-63149?width=1260&amp;amp;size=1.5 1260w&quot; sizes=&quot;(max-width: 140px) 100px,&amp;#10;(max-width: 540px) 500px,&amp;#10;(max-width: 620px) 580px,&amp;#10;(max-width: 700px) 660px,&amp;#10;(max-width: 860px) 820px,&amp;#10;1260px&quot; src=&quot;https://images.wsj.net/im-63149?width=620&amp;amp;size=1.5&quot; data-enlarge=&quot;https://images.wsj.net/im-63149?width=1260&amp;amp;size=1.5&quot; alt=&quot;&quot; title=&quot;Large wireless carriers are currently working on a call-verification system that regulators and executives say...&quot;/&gt;&lt;/div&gt;

    
      &lt;figcaption class=&quot;wsj-article-caption article__inset__image__caption&quot; itemprop=&quot;caption&quot;&gt;&lt;span class=&quot;wsj-article-caption-content&quot;&gt;Large wireless carriers are currently working on a call-verification system that regulators and executives say will help consumers identify legitimate calls.&lt;/span&gt;
      &lt;span class=&quot;wsj-article-credit article__inset__image__caption__credit&quot; itemprop=&quot;creator&quot;&gt;
            &lt;span class=&quot;wsj-article-credit-tag&quot;&gt;
              Photo: 
            &lt;/span&gt;
        andreu dalmau/epa/Shutterstock
          &lt;/span&gt;
  &lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt; 
    &lt;/div&gt;

  &lt;div class=&quot;clearfix byline-wrap&quot;&gt;


      
      &lt;div class=&quot;byline article__byline&quot;&gt;
      
      
          &lt;span&gt;By&lt;/span&gt;
              &lt;div class=&quot;author mobile-scrim hasMenu&quot; data-scrim=&quot;{&amp;quot;type&amp;quot;:&amp;quot;author&amp;quot;,&amp;quot;header&amp;quot;:&amp;quot;Sarah Krouse&amp;quot;,&amp;quot;subhead&amp;quot;:&amp;quot;The Wall Street Journal&amp;quot;,&amp;quot;list&amp;quot;:[{&amp;quot;type&amp;quot;:&amp;quot;link&amp;quot;,&amp;quot;icon&amp;quot;:&amp;quot;bio&amp;quot;,&amp;quot;url&amp;quot;:&amp;quot;https://www.wsj.com/news/author/8102&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;Biography&amp;quot;},{&amp;quot;type&amp;quot;:&amp;quot;link&amp;quot;,&amp;quot;icon&amp;quot;:&amp;quot;twitter&amp;quot;,&amp;quot;url&amp;quot;:&amp;quot;https://twitter.com/bysarahkrouse&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;@bysarahkrouse&amp;quot;},{&amp;quot;type&amp;quot;:&amp;quot;link&amp;quot;,&amp;quot;icon&amp;quot;:&amp;quot;facebook&amp;quot;,&amp;quot;url&amp;quot;:&amp;quot;https://facebook.com/&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;&amp;quot;},{&amp;quot;type&amp;quot;:&amp;quot;link&amp;quot;,&amp;quot;icon&amp;quot;:&amp;quot;email&amp;quot;,&amp;quot;url&amp;quot;:&amp;quot;mailto:sarah.krouse@wsj.com&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;sarah.krouse@wsj.com&amp;quot;}]}&quot;&gt;
                  &lt;span class=&quot;name&quot; itemprop=&quot;name&quot;&gt;Sarah Krouse&lt;/span&gt;
                  &lt;/div&gt;

      &lt;/div&gt;
      
        &lt;time class=&quot;timestamp article__timestamp flexbox__flex--1&quot;&gt;
          March 28, 2019 7:00 am ET
        &lt;/time&gt;&lt;/div&gt;

  

  &lt;div class=&quot;article-content &quot;&gt;

       &lt;p&gt;America’s telecommunications watchdogs have levied hefty financial penalties against illegal robocallers and demanded that bad actors repay millions to their victims. But years later, little money has been collected. &lt;/p&gt; &lt;p&gt;Since 2015, the Federal Communications Commission has ordered violators of the Telephone Consumer Protection Act, a law governing telemarketing and robodialing, to pay $208.4 million. That sum includes so-called forfeiture orders in cases involving robocalling, Do Not Call Registry and telephone solicitation violations.&lt;/p&gt;




      &lt;div class=&quot;paywall&quot;&gt;




       &lt;p&gt;So far, the government has collected $6,790 of that amount, according to records obtained by The Wall Street Journal through a Freedom of Information Act request.&lt;/p&gt; &lt;p&gt;The total amount of money secured by the Federal Trade Commission through court judgments in cases involving civil penalties for robocalls or National Do Not Call Registry-related violations, plus the sum requested for consumer redress in fraud-related cases, is $1.5 billion since 2004. It has collected $121 million of that total, said 




      Ian Barlow, 




       coordinator of the agency’s Do Not Call program, or about 8%. The agency operates the National Do Not Call Registry and regulates telemarketing. &lt;/p&gt; &lt;p&gt;“That number stands on its own. We’re proud of it; we think our enforcement program is pretty strong,” Mr. Barlow said.&lt;/p&gt; 





      &lt;div data-layout=&quot;wrap&amp;#10;              &quot; data-layout-mobile=&quot;&quot; class=&quot;&amp;#10;        media-object&amp;#10;        type-InsetDynamic&amp;#10;          wrap&amp;#10;    scope-web|mobileapps&amp;#10;  article__inset&amp;#10;        article__inset--type-InsetDynamic&amp;#10;          article__inset--wrap&amp;#10;  &quot;&gt;
      
      
      
      
      
      
      
      
      
      
      
      
        &lt;div class=&quot;dynamic-inset-container article__inset__dynamic&quot;&gt;
            
&lt;/div&gt;

      
      
      
      
      
      
      
      
      
      
      
      
      
      &lt;/div&gt; 



       &lt;p&gt;An FCC spokesman said his agency lacks the authority to enforce the forfeiture orders it issues and has passed all unpaid penalties to the Justice Department, which has the power to collect the fines. Many of the spoofers and robocallers the agency tries to punish are individuals and small operations, he added, which means they are at times unable to pay the full penalties.&lt;/p&gt; &lt;p&gt;“Fines serve to penalize bad conduct and deter future misconduct,” the FCC spokesman said. A spokeswoman for the Justice Department, which can settle or drop cases, declined to comment. &lt;/p&gt; &lt;p&gt;The dearth of financial penalties collected by the U.S. government for violations of telemarketing and auto-dialing rules shows the limits the sister regulators face in &lt;a href=&quot;https://www.wsj.com/articles/stop-robocalling-me-i-didnt-11546261200?mod=article_inline&quot; class=&quot;icon none&quot;&gt;putting a stop&lt;/a&gt; to illegal robocalls. It also shows why the threat of large fines can fail to deter bad actors.&lt;/p&gt; &lt;p&gt;“It’s great that we have these laws; it’s great that we have public enforcement, but because there are so many calls and so many callers, the public enforcement is a joke,” said 




      Margot Saunders, 




       senior counsel at consumer advocacy group National Consumer Law Center. “It doesn’t even make a dent.”&lt;/p&gt; 





      &lt;div data-layout=&quot;header&amp;#10;              &quot; data-layout-mobile=&quot;&quot; class=&quot;&amp;#10;        media-object&amp;#10;        type-InsetMediaVideo&amp;#10;          header&amp;#10;    scope-web|mobileapps&amp;#10;  article__inset&amp;#10;        article__inset--type-InsetMediaVideo&amp;#10;          article__inset--header&amp;#10;  &quot;&gt;
      
      
      
          &lt;figure class=&quot;media-object-video article__inset__video media-object-video--standard&quot;&gt;
  
    &lt;figcaption class=&quot;wsj-article-caption article__inset__video__caption&quot;&gt;
          Robocalls—those pre-recorded, unwanted phone calls—are at a record high. WSJ’s Joanna Stern explains how you can fight back against them, and why it matters. Photo: Drew Evans/The Wall Street Journal. (Originally published June 28, 2016)
        &lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt; 



       &lt;p&gt;There were 26.3 billion &lt;a href=&quot;https://www.wsj.com/articles/everyone-loathes-robocalls-some-people-try-to-get-even-11545321458?mod=article_inline&quot; class=&quot;icon none&quot;&gt;unwanted robocalls&lt;/a&gt; made to U.S. mobile phones in 2018, by one measure from robocall-blocking app Hiya. Another company that offers such services, YouMail Inc., puts the number of unwanted and illegal robocalls made in the U.S. last year even higher, at nearly 48 billion. &lt;/p&gt; &lt;p&gt; 






            &lt;a href=&quot;https://quotes.wsj.com/T&quot;&gt;AT&amp;amp;T&lt;/a&gt;&lt;span class=&quot;company-name-type&quot;&gt; Inc.&lt;/span&gt;


       and other large wireless carriers are currently working to implement a call-verification system by the end of the year that regulators and telecom industry executives say will help consumers identify legitimate calls. That system won’t block calls, but will signal that the caller has the right to use a given number and that it hasn’t been spoofed. &lt;/p&gt; &lt;p&gt;The FCC and FTC say there are challenges to collecting penalties for robocall-related wrongdoing. Small illegal operations can quickly close up shop and change their names, enforcement officials say. Some are based overseas, making it &lt;a href=&quot;https://www.wsj.com/articles/why-robocallers-win-even-if-you-dont-answer-1528104600?mod=article_inline&quot; class=&quot;icon none&quot;&gt;difficult to identify or seize assets&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;Fines are “a deterrent on legitimate companies that have real assets in the U.S.,” said 




      Daniel Delnero, 




       a senior attorney at Squire Patton Boggs in Atlanta that advises companies on consumer class-action suits related to the Telephone Consumer Protection Act. &lt;/p&gt; &lt;p&gt;For a spam caller or overseas operator, “that’s really just pushing for Social Security numbers or bank account information—it’s less of a deterrent, because they don’t really have anything that could be collected anyway,” Mr. Delnero said. &lt;/p&gt; 





      &lt;div data-layout=&quot;wrap&amp;#10;              &quot; data-layout-mobile=&quot;inline&quot; class=&quot;&amp;#10;        media-object&amp;#10;        type-InsetNewsletterSignup&amp;#10;          wrap&amp;#10;    scope-web|mobileapps&amp;#10;  article__inset&amp;#10;        article__inset--type-InsetNewsletterSignup&amp;#10;          article__inset--wrap&amp;#10;  &quot;&gt;
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
          &lt;div class=&quot;strap-container&quot;&gt;
      &lt;h4 class=&quot;strap&quot; itemprop=&quot;description&quot;&gt;Newsletter Sign-up&lt;/h4&gt;
    &lt;/div&gt;
    

      
      
      &lt;/div&gt; 



       &lt;p&gt;In many FTC cases involving civil penalties, the agency secures judgments for large fines and settles for a smaller sum, contingent upon the accused person or company being transparent about their assets, Mr. Barlow said. Congress requires the agency to consider an individual’s ability to pay. &lt;/p&gt; &lt;p&gt;In the 2017 case of a “recidivist robocaller” that placed illegal robocalls for nearly a decade, for example, two defendants faced civil penalties of $2.7 million in a California suit filed by the FTC. They were each ultimately ordered to pay $225,000 or less, if their financial disclosures were complete and accurate. &lt;/p&gt; &lt;p&gt; 




      Ajit Pai, 




       chairman of the FCC since January 2017, said in an interview on robocalls earlier this month that in the past, few financial penalties have been collected, but that he is working to change that. It is “important to &lt;a href=&quot;https://www.wsj.com/podcasts/instant-message/20-tesla-got-a-brand-new-car/6603b252-8c58-4caf-a7a0-25fee391b3ec?mod=article_inline&quot; class=&quot;icon none&quot;&gt;send a signal&lt;/a&gt; to other would-be robocallers that you’re not going to be able to get away with it,” Mr. Pai said. &lt;/p&gt; &lt;p&gt;Still, none of the $202 million demanded in what the FCC calls forfeiture orders against alleged rulebreakers during Mr. Pai’s tenure has been collected. &lt;/p&gt; &lt;p&gt;The agency in May 2018, for example, fined a Florida-based company and its top executive $120 million for making 100 million illegal robocalls during a three-month period in 2016. Agency records as of late December indicate that no funds had been collected.&lt;/p&gt; &lt;p&gt; &lt;strong&gt;Write to &lt;/strong&gt;Sarah Krouse at &lt;a href=&quot;mailto:sarah.krouse@wsj.com&quot; target=&quot;_blank&quot; class=&quot;icon &quot;&gt;sarah.krouse@wsj.com&lt;/a&gt;&lt;/p&gt;






      &lt;/div&gt;



  
  &lt;p&gt;Copyright ©2019 Dow Jones &amp;amp; Company, Inc. All Rights Reserved. 87990cbe856818d5eddac44c7b1cdeb8&lt;/p&gt;
  
  &lt;/div&gt;


</description>
<pubDate>Sat, 09 Nov 2019 17:27:39 +0000</pubDate>
<dc:creator>simonebrunozzi</dc:creator>
<og:title>The FCC Has Fined Robocallers $208 Million. It’s Collected $6,790. </og:title>
<og:description>Telecommunications regulators have levied hefty financial penalties against illegal robocallers and demanded that bad actors repay millions to their victims. But years later, little money has been collected.</og:description>
<og:url>https://www.wsj.com/articles/the-fcc-has-fined-robocallers-208-million-its-collected-6-790-11553770803</og:url>
<og:image>https://images.wsj.net/im-63149/social</og:image>
<og:type>article</og:type>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.wsj.com/articles/the-fcc-has-fined-robocallers-208-million-its-collected-6-790-11553770803?mod=rsswn</dc:identifier>
</item>
<item>
<title>German solar and wind are triple the cost of French nuclear, last half as long</title>
<link>https://www.nextbigfuture.com/2019/11/france-spent-less-on-nuclear-to-get-about-double-what-germany-gets-from-renewables.html</link>
<guid isPermaLink="true" >https://www.nextbigfuture.com/2019/11/france-spent-less-on-nuclear-to-get-about-double-what-germany-gets-from-renewables.html</guid>
<description>&lt;div class=&quot;thecontent&quot;&gt;
&lt;p&gt;France’s nuclear energy spending was 60% of what Germany spent on renewables. France gets about 400 Terawatt hour per year from nuclear but Germany gets 226 Terawatt-hours each year. 45 Terawatt-hours of Germany’s renewable power comes from burning biomass which generates air pollution.&lt;/p&gt;
&lt;p&gt;Germany’s solar farms will have to be rebuilt every 15-25 years. The wind farms will need to be rebuilt every 20-25 years. Nuclear plants can last 40-80+ years. This means that it guaranteed that the solar and wind farms will have to be rebuilt in 15-25 years. The maintenance costs will increase as wind turbines or solar panels are replaced. The old turbines and solar panels will need to be replaced.&lt;/p&gt;
&lt;p&gt;France completed construction on 76% of its current 58 reactors at an inflation-adjusted cost of $330 billion (€290 billion). The complete buildout of the 58 reactors was less €400 billion. Germany has spent about €500 billion over the last 20 years to get to 35% renewables. 7% of this is burning biomass. France gets almost double the TWh from nuclear than Germany gets from renewables (solar, wind, biomass, hydro). France has gotten about 400 TWh per year from nuclear while all of Germany’s renewables (solar, wind and biomass) amounts to about 220 TWh.&lt;/p&gt;
&lt;div id=&quot;div-gpt-ad-1485706247381-5&quot;/&gt;
&lt;p&gt;China has a more recent buildup of nuclear energy. China has spent less than $150 billion from 2000 to 2019 to develop 300 Terawatt-hours per year of nuclear energy.&lt;/p&gt;
&lt;p&gt;France’s cost was $1 billion to build each terawatt hour per year of clean energy.&lt;br/&gt;Germany’s cost is $2.5 billion to build each terawatt hour per year of relatively clean energy. The 180 TWh per year of solar and wind is clean but the biomass is not. It generates air pollution. France’s electricity is 41% cheaper for its citizen’s than Germany. Germans now pay 30 euro cents per kwh. the French pay 18 euro cents per kwh. This was an extra €24 billion per year. 22 years of extra cost is another $500 billion. This is triple the cost of France and does not include the rebuild of solar and wind over the 50+ year during of the nuclear reactors.&lt;br/&gt;China’s cost is $0.5 billion per terawatt hour per year of clean energy. China’s nuclear buildout is over 5 times cheaper than Germany’s.&lt;/p&gt;
&lt;p&gt;From 2006 to 2017, Germany increased the cost of electricity for households by 50%. (&lt;a href=&quot;http://www.oecd-nea.org/ndd/pubs/2019/7299-system-costs.pdf&quot;&gt;per an OECD report&lt;/a&gt;) French electricity costs are just 59% of German electricity prices. France produces one-tenth the carbon pollution from electricity compared to Germany.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.nextbigfuture.com/wp-content/uploads/2019/11/germanyenergy.jpg&quot; alt=&quot;&quot; width=&quot;960&quot; height=&quot;678&quot; class=&quot;alignnone size-full wp-image-160997&quot; srcset=&quot;https://www.nextbigfuture.com/wp-content/uploads/2019/11/germanyenergy.jpg 960w, https://www.nextbigfuture.com/wp-content/uploads/2019/11/germanyenergy-300x212.jpg 300w, https://www.nextbigfuture.com/wp-content/uploads/2019/11/germanyenergy-768x542.jpg 768w&quot; sizes=&quot;(max-width: 960px) 100vw, 960px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Germany would need 50% more nuclear energy than France to completely replace all other power generation. This would cost €600 billion if Germany could match France’s build from the 1980s. Costs and safety regulations have increased even though France’s nuclear power has operated without incident for over 30 years. 80 nuclear reactors would now cost €1600 billion euros for Germany. This would still be cheaper than the estimated costs for the solar and wind buildout that is underway.&lt;/p&gt;
&lt;p&gt;Over the past five years alone, the Energiewende has cost Germany €32 billion ($36 billion) annually, and opposition to renewables is growing in the German countryside. This was €160 billion to get 70 Terawatt-hours per year. The same portion of France’s spending on nuclear wold be 200 Terawatt-hours per year.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.forbes.com/sites/michaelshellenberger/2019/05/06/the-reason-renewables-cant-power-modern-civilization-is-because-they-were-never-meant-to/#79a6d86ea2b9&quot;&gt;Der Spiegel cites a recent estimate that it would cost Germany “€3.4 trillion&lt;/a&gt; ($3.8 trillion),” or seven times more than it spent from 2000 to 2019, to increase solar and wind three to five-fold by 2050.&lt;/p&gt;
&lt;p&gt;Germany needs to add 7,700 new kilometers of transmission lines to move the renewable power from solar and wind farms but only 8% have been built. Large-scale electricity storage remains inefficient and expensive.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.nextbigfuture.com/2018/09/frances-nuclear-clean-energy-is-over-three-times-faster-and-cheaper-than-germanys-solar-and-wind.html&quot;&gt;Germany is 2% of the world carbon dioxide emissions.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.nextbigfuture.com/wp-content/uploads/2018/09/Screen-Shot-2018-09-05-at-2.56.47-PM-min.png&quot; alt=&quot;&quot; width=&quot;946&quot; height=&quot;672&quot; class=&quot;alignnone size-full wp-image-148835&quot; srcset=&quot;https://www.nextbigfuture.com/wp-content/uploads/2018/09/Screen-Shot-2018-09-05-at-2.56.47-PM-min.png 946w, https://www.nextbigfuture.com/wp-content/uploads/2018/09/Screen-Shot-2018-09-05-at-2.56.47-PM-min-300x213.png 300w, https://www.nextbigfuture.com/wp-content/uploads/2018/09/Screen-Shot-2018-09-05-at-2.56.47-PM-min-768x546.png 768w&quot; sizes=&quot;(max-width: 946px) 100vw, 946px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.nextbigfuture.com/wp-content/uploads/2018/09/Screen-Shot-2018-09-05-at-2.56.55-PM-min.png&quot; alt=&quot;&quot; width=&quot;702&quot; height=&quot;736&quot; class=&quot;alignnone size-full wp-image-148836&quot; srcset=&quot;https://www.nextbigfuture.com/wp-content/uploads/2018/09/Screen-Shot-2018-09-05-at-2.56.55-PM-min.png 702w, https://www.nextbigfuture.com/wp-content/uploads/2018/09/Screen-Shot-2018-09-05-at-2.56.55-PM-min-286x300.png 286w&quot; sizes=&quot;(max-width: 702px) 100vw, 702px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.nextbigfuture.com/wp-content/uploads/2018/09/Screen-Shot-2018-09-05-at-2.57.10-PM-min.png&quot; alt=&quot;&quot; width=&quot;1432&quot; height=&quot;758&quot; class=&quot;alignnone size-full wp-image-148837&quot; srcset=&quot;https://www.nextbigfuture.com/wp-content/uploads/2018/09/Screen-Shot-2018-09-05-at-2.57.10-PM-min.png 1432w, https://www.nextbigfuture.com/wp-content/uploads/2018/09/Screen-Shot-2018-09-05-at-2.57.10-PM-min-300x159.png 300w, https://www.nextbigfuture.com/wp-content/uploads/2018/09/Screen-Shot-2018-09-05-at-2.57.10-PM-min-768x407.png 768w, https://www.nextbigfuture.com/wp-content/uploads/2018/09/Screen-Shot-2018-09-05-at-2.57.10-PM-min-1024x542.png 1024w&quot; sizes=&quot;(max-width: 1432px) 100vw, 1432px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.nextbigfuture.com/wp-content/uploads/2018/09/Screen-Shot-2018-09-05-at-2.57.29-PM-min.png&quot; alt=&quot;&quot; width=&quot;1312&quot; height=&quot;786&quot; class=&quot;alignnone size-full wp-image-148838&quot; srcset=&quot;https://www.nextbigfuture.com/wp-content/uploads/2018/09/Screen-Shot-2018-09-05-at-2.57.29-PM-min.png 1312w, https://www.nextbigfuture.com/wp-content/uploads/2018/09/Screen-Shot-2018-09-05-at-2.57.29-PM-min-300x180.png 300w, https://www.nextbigfuture.com/wp-content/uploads/2018/09/Screen-Shot-2018-09-05-at-2.57.29-PM-min-768x460.png 768w, https://www.nextbigfuture.com/wp-content/uploads/2018/09/Screen-Shot-2018-09-05-at-2.57.29-PM-min-1024x613.png 1024w&quot; sizes=&quot;(max-width: 1312px) 100vw, 1312px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.nextbigfuture.com/wp-content/uploads/2018/09/Screen-Shot-2018-09-05-at-2.58.06-PM-min.png&quot; alt=&quot;&quot; width=&quot;1446&quot; height=&quot;744&quot; class=&quot;alignnone size-full wp-image-148839&quot; srcset=&quot;https://www.nextbigfuture.com/wp-content/uploads/2018/09/Screen-Shot-2018-09-05-at-2.58.06-PM-min.png 1446w, https://www.nextbigfuture.com/wp-content/uploads/2018/09/Screen-Shot-2018-09-05-at-2.58.06-PM-min-300x154.png 300w, https://www.nextbigfuture.com/wp-content/uploads/2018/09/Screen-Shot-2018-09-05-at-2.58.06-PM-min-768x395.png 768w, https://www.nextbigfuture.com/wp-content/uploads/2018/09/Screen-Shot-2018-09-05-at-2.58.06-PM-min-1024x527.png 1024w&quot; sizes=&quot;(max-width: 1446px) 100vw, 1446px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.nextbigfuture.com/wp-content/uploads/2018/09/Screen-Shot-2018-09-05-at-2.58.33-PM-min.png&quot; alt=&quot;&quot; width=&quot;678&quot; height=&quot;712&quot; class=&quot;alignnone size-full wp-image-148840&quot; srcset=&quot;https://www.nextbigfuture.com/wp-content/uploads/2018/09/Screen-Shot-2018-09-05-at-2.58.33-PM-min.png 678w, https://www.nextbigfuture.com/wp-content/uploads/2018/09/Screen-Shot-2018-09-05-at-2.58.33-PM-min-286x300.png 286w&quot; sizes=&quot;(max-width: 678px) 100vw, 678px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.nextbigfuture.com/wp-content/uploads/2018/09/Screen-Shot-2018-09-05-at-3.31.20-PM-min.png&quot; alt=&quot;&quot; width=&quot;1372&quot; height=&quot;844&quot; class=&quot;alignnone size-full wp-image-148841&quot; srcset=&quot;https://www.nextbigfuture.com/wp-content/uploads/2018/09/Screen-Shot-2018-09-05-at-3.31.20-PM-min.png 1372w, https://www.nextbigfuture.com/wp-content/uploads/2018/09/Screen-Shot-2018-09-05-at-3.31.20-PM-min-300x185.png 300w, https://www.nextbigfuture.com/wp-content/uploads/2018/09/Screen-Shot-2018-09-05-at-3.31.20-PM-min-768x472.png 768w, https://www.nextbigfuture.com/wp-content/uploads/2018/09/Screen-Shot-2018-09-05-at-3.31.20-PM-min-1024x630.png 1024w&quot; sizes=&quot;(max-width: 1372px) 100vw, 1372px&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;Looking Solar Panel Costs Does Not Cost the Energy Transformation Correctly&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://archive.is/0bVPq&quot;&gt;People do not understand energy&lt;/a&gt; or the benefits and risks that relate to energy.&lt;/p&gt;
&lt;p&gt;John Gorman was the chief executive of the Canadian Solar Industries Association but now he is a nuclear energy advocate. John indicates that nuclear energy is vital to solving the energy issues related to climate change.&lt;/p&gt;
&lt;p&gt;An overly optimistic view of renewables has affected major decisions about other energy sources, particularly nuclear. The global focus on renewables has caused existing nuclear plants to be retired early and has stalled investment in new projects. It’s given people a false sense of security that we don’t need nuclear any more when nothing could be further from the truth.&lt;/p&gt;
&lt;p&gt;What’s worse, because wind and solar are variable (they produce electricity only when the wind blows or the sun shines), they must be paired with other energy sources to support demand, and these are almost always fossil fuels. In the absence of enough nuclear energy, renewables are effectively prolonging the life of coal and gas plants that can produce power around the clock.&lt;/p&gt;
&lt;p&gt;Nuclear is the only proven technology that has decarbonized the economies of entire countries, including France and Sweden.&lt;/p&gt;

&lt;div class=&quot;saboxplugin-wrap&quot; itemtype=&quot;http://schema.org/Person&quot; itemscope=&quot;&quot; itemprop=&quot;author&quot;&gt;
&lt;div class=&quot;saboxplugin-gravatar&quot;&gt;&lt;img src=&quot;https://www.nextbigfuture.com/wp-content/uploads/2019/08/Brian-Wang-sm.jpg&quot; alt=&quot;&quot; itemprop=&quot;image&quot;/&gt;&lt;/div&gt;

&lt;div class=&quot;saboxplugin-desc&quot;&gt;
&lt;div itemprop=&quot;description&quot;&gt;
&lt;div&gt;
&lt;div&gt;&lt;span class=&quot;m_-1314055728224676323gmail-m_-3302250748775571318gmail-m_5146529092537774861gmail-il&quot;&gt;&lt;span class=&quot;m_-1314055728224676323gmail-m_-3302250748775571318gmail-il&quot;&gt;Brian&lt;/span&gt;&lt;/span&gt; Wang is a prolific business-oriented writer of emerging and disruptive technologies. He is known for insightful articles that combine business and technical analysis that catches the attention of the general public and is also useful for those in the industries. He is the sole author and writer of &lt;a href=&quot;http://nextbigfuture.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; data-saferedirecturl=&quot;https://www.google.com/url?q=http://nextbigfuture.com/&amp;amp;source=gmail&amp;amp;ust=1567012841943000&amp;amp;usg=AFQjCNGQCGD6OuBnqAN8Hdmi5QsnCMenHA&quot;&gt;&lt;span class=&quot;m_-1314055728224676323gmail-m_-3302250748775571318gmail-m_5146529092537774861gmail-m_861966289979837293gmail-il&quot;&gt;&lt;span class=&quot;m_-1314055728224676323gmail-m_-3302250748775571318gmail-m_5146529092537774861gmail-il&quot;&gt;nextbigfuture&lt;/span&gt;&lt;/span&gt;.com&lt;/a&gt;, the top online science blog. He is also involved in angel investing and raising funds for breakthrough technology startup companies.&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;m_-1314055728224676323gmail-m_-3302250748775571318gmail-il&quot;&gt;He gave the recent keynote presentation at Monte Jade event with a talk entitled the Future for You. &lt;/span&gt; He gave an annual update on molecular nanotechnology at Singularity University on nanotechnology, gave a TEDX talk on energy, and advises USC ASTE 527 (advanced space projects program). He has been interviewed for radio, professional organizations. podcasts and corporate events. He was recently interviewed by the radio program Steel on Steel on satellites and high altitude balloons that will track all movement in many parts of the USA.&lt;/div&gt;
&lt;div&gt;He fundraises for various high impact technology companies and has worked in computer technology, insurance, healthcare and with corporate finance.&lt;/div&gt;
&lt;div&gt;He has substantial familiarity with a broad range of breakthrough technologies like age reversal and antiaging, quantum computers, artificial intelligence, ocean tech,  agtech, nuclear fission, advanced nuclear fission, space propulsion, satellites, imaging, molecular nanotechnology, biotechnology, medicine, blockchain, crypto and many other areas.&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;/div&gt;


&lt;/div&gt;
&lt;p class=&quot;navigation&quot;&gt;Read next: &lt;a href=&quot;https://www.nextbigfuture.com/2019/11/fukushima-had-less-radiation-outside-the-plant-than-kerela-background-radiation-levels.html&quot; rel=&quot;next&quot;&gt;Fukushima Had Less Radiation Outside the Plant than Kerela Background Radiation Levels&lt;/a&gt; »&lt;br/&gt;« &lt;a href=&quot;https://www.nextbigfuture.com/2019/11/morgan-stanley-models-spacex-value-at-120-billion-with-starlink.html&quot; rel=&quot;prev&quot;&gt;Morgan Stanley Models SpaceX Value at $120+ Billion With Starlink&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 09 Nov 2019 16:55:27 +0000</pubDate>
<dc:creator>garyclarke27</dc:creator>
<og:image>https://www.nextbigfuture.com/wp-content/uploads/2019/06/solarvnuclear.jpg</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.nextbigfuture.com/2019/11/france-spent-less-on-nuclear-to-get-about-double-what-germany-gets-from-renewables.html</dc:identifier>
</item>
<item>
<title>Time Series Prediction – A short introduction for pragmatists</title>
<link>https://www.liip.ch/en/blog/time-series-prediction-a-short-comparison-of-best-practices</link>
<guid isPermaLink="true" >https://www.liip.ch/en/blog/time-series-prediction-a-short-comparison-of-best-practices</guid>
<description>&lt;div class=&quot;text-lead&quot; readability=&quot;33&quot;&gt;
&lt;p&gt;Are you trying to predict time series but don't know where to start? This blog post will provide a comparison of the most prominent techniques and show you how to implement them.&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;Business Problem&lt;/h2&gt;
&lt;p&gt;Time Series prediction can be used in a number of business areas. You can think of a number of areas and questions. For example&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Marketing/Sales: How are our sales numbers going to be in Q4?&lt;/li&gt;
&lt;li&gt;Health: Do we need more beds in the hospital next year?&lt;/li&gt;
&lt;li&gt;Sports: When is the outdoor pool temperature finally going to reach 21°C this year?&lt;/li&gt;
&lt;li&gt;Sales: Will we sell enough watches this year to make the target we have set?&lt;/li&gt;
&lt;li&gt;Energy: What will the energy consumption of this household be tomorrow?&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Generally, a prediction problem involves using past observations to predict or forecast one or more possible future observations. The goal is to guess about what might happen in the future. Knowing the future can impact our decisions today so we have a great interest in predicting it. So in this blog article I want to show you a couple of techniques that you might try and provide you with a couple of tools that you can try right away.&lt;/p&gt;
&lt;p&gt;This blog post was heavily inspired by the book &lt;a href=&quot;https://machinelearningmastery.com/deep-learning-for-time-series-forecasting/&quot;&gt;“Deep Learning for Time Series Forecasting - Predict the Future with MLPs, CNNs and LSTMs in Python”&lt;/a&gt; from Jason Brownlee who did an excellent job summarizing all of the approaches and methods in one big 700 pages book. If you feel you want to deep dive into time series prediction make sure give it a try.&lt;/p&gt;
&lt;h2&gt;Challenges&lt;/h2&gt;
&lt;p&gt;Generally when predicting time series there are a number of challenges that are specific for this set of problems:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;In a time series, the observations for an input variable depend upon one another. For example, the observation at time t is dependent upon the observation at t−1; t−1 may depend on t−2, and so on. We call such variables endogenous because it is affected by other variables in the system and the output variable depends on it. Although time series might also have exogenous variables (variables that are not influenced by other variables) it's usually these endogenous property of variables that distinguishes them from other problems.&lt;/li&gt;
&lt;li&gt;Time series may have obvious patterns, such as a trend or seasonal cycles.&lt;/li&gt;
&lt;li&gt;Sometimes we just want to predict the next time step, but sometimes we might even want to predict multiple steps, which makes our prediction harder.&lt;/li&gt;
&lt;li&gt;Additionally some models age well over time, thus meaning they are “static” and have not to be updated, while others are dynamic, e.g. you have to retrain your model every week.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;To make things even harder sometimes we have contiguous data, meaning that we have uniform observations over time, but more often than not we have discontinuous data, where the observations are not uniform over time and so needs additional preparation.&lt;/p&gt;
&lt;h3&gt;Choosing a framework to work with&lt;/h3&gt;
&lt;p&gt;Generally there are a number of different approaches to predicting time series, some of them are able to reflect the number of different challenges while others are not. Thus it totally depends on your problem what the right choice is. Let's dive in.&lt;/p&gt;
&lt;p&gt;Usually you already have your dataset (a database, csv, etc..) and you know what needs to be forecasted and maybe you even have a clue how to evaluate a model that you have built. The fastest and most secure way forward from my experience is to start with easy models and make your way up to the more complex ones, in order to figure out if you are making any progress. So we will be following &lt;a href=&quot;https://en.wikipedia.org/wiki/Occam%27s_razor&quot;&gt;occam's razor&lt;/a&gt; which says: one should select the solution with the fewest assumptions.&lt;/p&gt;
&lt;p&gt;So our progression in this blog post will look like the following:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Make a simple baseline e.g. average the data&lt;/li&gt;
&lt;li&gt;Try autoregression e.g. SARIMA models (Seasonal Autoregressive Integrated Moving Average Models)&lt;/li&gt;
&lt;li&gt;Try exponential smoothing e.g. smooth the s*** out of the data, but this time use explicitly exponential functions not linear&lt;/li&gt;
&lt;li&gt;Try a simple neural network&lt;/li&gt;
&lt;li&gt;Try deep learning CNN, LSTM, etc..&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Now you are probably reading this because you want to know how number 5 works, but more often than not you really don’t need a deep learning model, often just having number 1 through 3 gives you enough precision to support your business.&lt;/p&gt;
&lt;p&gt;Of course if precision is your big goal then trying the complicated models may be worth your time, otherwise not. We will cover all techniques except for number 5, which we will cover explicitly in the next blog post of this series.&lt;/p&gt;
&lt;p&gt;Yet, let me first present you with a couple of useful concepts that help us train, test, tune and evaluate our models. I will only cover here the simplest way aka predicting the next step in time series. So for example if you have daily data, this means we just look one day ahead. If you predict multiple days ahead you will need slightly different ways to test the data, but the rough idea stays the same.&lt;/p&gt;
&lt;h3&gt;How to train our models?&lt;/h3&gt;
&lt;p&gt;Generally in machine learning we split the data into train and test in order to see how well our model performs, but time series data is kind of special because it has an ordering. Thus we have to write a split function that maintains this ordering while taking a number of ordered observations. So we are not splitting our data by random but instead we leave the ordering and just take chunks of data for training and testing.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# split the train and test data, maintaining the order
def train_test_split(data, n_test):
    return data[:-n_test], data[-n_test:]&lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;How to test our models?&lt;/h3&gt;
&lt;p&gt;After having fitted the model (see below) we want to make a forecast for the given history, then compare the prediction to the actual value that was going to come next. For this we can use the root mean squared error, which is a pretty standard way of measuring errors in machine learning.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# measure the root mean squared error
def measure_rmse(actual, predicted):
    return sqrt(mean_squared_error(actual, predicted))&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;So to test how our model works not just for one data point but the whole points contained in the test data, we have to split our model multiple times, each time adding one datapoint to the training data and seeing what the model will predict. This way of constantly splitting the data and looking ahead is called walk forward validation.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# walk forward validation in a step by step manner
def walk_forward_validation(data, n_test):
    predictions = list()
    train, test = train_test_split(data, n_test)
    model = model_fit(train)
    history = [x for x in train] #seed history with training data
      # walk forward
    for i in range(len(test)):
        # fit model and make forecast for history
        yhat = model_predict(model, history)
        predictions.append(yhat) #store the forecast
        history.append(test[i]) #add it to history for next loop
    # estimate error
    error = measure_rmse(test, predictions)
    print(' &amp;gt; %.3f' % error)&lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;How to tune our models?&lt;/h3&gt;
&lt;p&gt;Since the methods that we will try depend heavily on a number of hyperparameters (e.g. how many seasons does a year have, do we want to average over the last 3,4,5 or 10 data points, …) we cannot know which hyperparameters are going to give us the best result. For this one way of approaching the problem can be to simply try all of the combinations and see which ones work best on the test data. This is also called a grid search.&lt;/p&gt;
&lt;p&gt;A simple example would be: for the average baseline model try averaging over the last 1,2,3, … all values in the dataset and see which n returns the best results. So here we have one hyperparameter. In other models we might have to tweak multiple parameters to find which combination works best.&lt;/p&gt;
&lt;h2&gt;Lets predict something!&lt;/h2&gt;
&lt;p&gt;To see how well our models do we can test them on 4 different datasets.&lt;/p&gt;
&lt;h3&gt;Female births in California in 1959&lt;/h3&gt;
&lt;img alt=&quot;&quot; src=&quot;https://liip.rokka.io/www_inarticle_3/380a1d/baby.jpg&quot;/&gt;&lt;p&gt;The first dataset has almost no “trend” - which means that the numbers are roughly not going up or down over a longer period. In our case the dataset is called &lt;a href=&quot;https://www.kaggle.com/dougcresswell/daily-total-female-births-in-california-1959&quot;&gt;“female births in California in 1959”&lt;/a&gt;. Regarding the business case, we can easily think how it would be good to know the next years numbers in order to know if we need more staff, or more beds, so we don’t run out of capacity and can offer a good service. One step is one day in this dataset.&lt;/p&gt;
&lt;img alt=&quot;&quot; src=&quot;https://liip.rokka.io/www_inarticle_3/fe63ae/female.png&quot;/&gt;&lt;h3&gt;Shampoo sales over a three year period&lt;/h3&gt;
&lt;img alt=&quot;&quot; src=&quot;https://liip.rokka.io/www_inarticle_3/f10392/shampoo.png&quot;/&gt;&lt;p&gt;The second dataset has a “trend”. Its called &lt;a href=&quot;https://www.kaggle.com/guangningyu/sales-of-shampoo&quot;&gt;https://www.kaggle.com/guangningyu/sales-of-shampoo&lt;/a&gt; sales of shampoo over a three year period. We can clearly see that this company is selling more and more shampoo each year, so they better should know ahead how much they are going to sell next year in order to be able to plan ahead nicely. One step is one month.&lt;/p&gt;
&lt;img alt=&quot;&quot; src=&quot;https://liip.rokka.io/www_inarticle_3/16110f/shampoo.jpg&quot;/&gt;&lt;h3&gt;Average monthly temperature over three years&lt;/h3&gt;
&lt;img alt=&quot;&quot; src=&quot;https://liip.rokka.io/www_inarticle_3/427371/temperature.jpg&quot;/&gt;&lt;p&gt;The third dataset has no trend but a new thing called seasonality. It is called &lt;a href=&quot;https://github.com/jbrownlee/Datasets/blob/master/monthly-mean-temp.csv&quot;&gt;monthly average temperature over three years&lt;/a&gt;. Here we can roughly say we don’t see an average rise in temperature, but it seems to fluctuate a lot during the year in a regular way aka. it's hot in the summer and cold in the winter - what a surprise :). We might think of a business case where an ice cream factory needs to know when it needs to ramp up their production in order to not run out of stock. One step is one month.&lt;/p&gt;
&lt;img alt=&quot;&quot; src=&quot;https://liip.rokka.io/www_inarticle_3/f34c5e/temp.jpg&quot;/&gt;&lt;h3&gt;Car sales in quebec in the 60ties&lt;/h3&gt;
&lt;img alt=&quot;&quot; src=&quot;https://liip.rokka.io/www_inarticle_3/ce074b/cars.jpg&quot;/&gt;&lt;p&gt;The fourth dataset has seasonality and a trend. Its called &lt;a href=&quot;https://data.world/perceptron/monthly-car-sales-quebec-1960&quot;&gt;monthly car sales in quebec in the 60ties&lt;/a&gt;. We see that although on average the number of car sales is going up over the years, the sales also depend a lot on the season of the year. It seems that people love to buy their cars in spring and autumn. One step is one month.&lt;/p&gt;
&lt;img alt=&quot;&quot; src=&quot;https://liip.rokka.io/www_inarticle_3/b0166c/cars.jpg&quot;/&gt;&lt;p&gt;After having introduced the datasets let us dive into the methods.&lt;/p&gt;
&lt;h2&gt;1. Baseline average&lt;/h2&gt;
&lt;p&gt;One of the simplest things that we can try is to take the n-last value from the data and simply do a median or mean on this subset. Depending on the n we are either taking into consideration a long or short history.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# use mean or median to predict the future
def average_forecast(history, config):
    n, avg_type = config
    if avg_type is 'mean':
        return mean(history[-n:])
    return median(history[-n:])&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Although this model looks a bit “stupid” it might do the job well for data where there is a lot of noise, are where we want to put a strong emphasis only on the last values. So how does it do on our datasets? Let's have a look: The brown line is the history that we trained it on, the blue line is the “future” and the orange line is the prediction of our model.&lt;/p&gt;
&lt;p&gt;Female births: It got the best results, aka it got the lowest RMSE of 6.37, when it was looking back on the last 192 days and used a mean to average the history. Although our prediction does not model all the peaks of the data, at least it seems to get that the data doesn’t change much, so it predicts the same value every time.&lt;/p&gt;
&lt;img alt=&quot;&quot; src=&quot;https://liip.rokka.io/www_inarticle_3/9cd247/famale-births-average.jpg&quot;/&gt;&lt;p&gt;Shampoo sales: Here we got the best results looking back at the last 2 months, using a median and our RMSE was 113. Our model seems to somehow doing ok, it simply sticks to rather new data and is able to keep up with the trend somehow.&lt;/p&gt;
&lt;img alt=&quot;&quot; src=&quot;https://liip.rokka.io/www_inarticle_3/4edec8/shampoo-average.jpg&quot;/&gt;&lt;p&gt;Temperature: Here we got the best results looking back 1 months using a median strategy. Our RMSE was 5.14. We see that our average strategy seems to be lagging behind the actual data and it is.&lt;/p&gt;
&lt;img alt=&quot;&quot; src=&quot;https://liip.rokka.io/www_inarticle_3/66e592/temp-average.jpg&quot;/&gt;&lt;p&gt;Car Sales: Here we got the best results looking back 1 months using a median strategy. The RMSE was 3647. We see that somehow our average strategy simply relies on sticking to the present. Another good result is also obtained with a mean of 14 days, resulting in a RMSE of 4085.&lt;/p&gt;
&lt;img alt=&quot;&quot; src=&quot;https://liip.rokka.io/www_inarticle_3/8057c0/cars-average.jpg&quot;/&gt;&lt;h2&gt;2. SARIMA models&lt;/h2&gt;
&lt;p&gt;The next family of models we are going to look at are the SARIMA (Seasonal Autoregressive Integrated Moving Average) models. You can very easily use them because they come in the form of a library that can be imported directly from statsmodels. It has basically three different parameter-types:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Order: A tuple p, d, and q parameters for the modeling of the trend. They control the order of the autoregression, of the difference and of the moving average.&lt;/li&gt;
&lt;li&gt;Seasonal order: A tuple of p,d, q, and m parameters for the modeling the seasonality. These also control the order of the seasonal autoregression, seasonal difference, seasonal moving average and the number of steps that contribute towards one seasonal period.&lt;/li&gt;
&lt;li&gt;Trend: A parameter for controlling a model of the deterministic trend. It can either be ‘n’, ‘c’,‘t’, and ‘ct’ for: no trend, constant, linear, and constant with linear trend, respectively.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;If we know enough about the problem we might specify them correctly or we can just try to grid-search them. We will just do this as we did for the average models. We see below that we can supply these parameters fit the model and then use it to predict the results for the next step.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# A simple way to use SARIMAX from statsmodels
def sarima_forecast(history, order, sorder, trend):
    model = SARIMAX(history, order=order, seasonal_order=sorder, trend=trend,
      enforce_stationarity=False, enforce_invertibility=False)
    # fit model
    model_fit = model.fit(disp=False)
    # make one step forecast
    yhat = model_fit.predict(len(history), len(history))
    return yhat[0]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;So how does this model do on our data?&lt;/p&gt;
&lt;p&gt;Female births: It seems to have picked up a small pattern in the data, with a RMSE of 6,16 so it actually improved on the baseline method.&lt;/p&gt;
&lt;img alt=&quot;&quot; src=&quot;https://liip.rokka.io/www_inarticle_3/0c15df/famale-births-sarima.jpg&quot;/&gt;&lt;p&gt;Shampoo sales: For the shampoo sales we see that the model picked up the trend very nicely. The best parameters resulted in a RMSE of 62.8 so a big improvement against the baseline of 113 in the average model.&lt;/p&gt;
&lt;img alt=&quot;&quot; src=&quot;https://liip.rokka.io/www_inarticle_3/1eb929/shampoo-sarima.jpg&quot;/&gt;&lt;p&gt;Temperature: Here we see an almost perfect fit in the data, notice how nicely the orange (predicted) curve matches the blue (actual data) one. This results in a RMSE of 2.27 so a big improvement on the 5.14 of the baseline model.&lt;/p&gt;
&lt;img alt=&quot;&quot; src=&quot;https://liip.rokka.io/www_inarticle_3/70e447/temp-sarima.jpg&quot;/&gt;&lt;p&gt;Car sales: Here we see nicely how the best fitting SARIMA model picked up the trend and seasonality. This results in a RMSE of 2600 vs the 3647 in the baseline model. So quite an improvement.&lt;/p&gt;
&lt;img alt=&quot;&quot; src=&quot;https://liip.rokka.io/www_inarticle_3/5d7635/cars-sarima.jpg&quot;/&gt;&lt;p&gt;We see that the family of SARIMA models is very capable to model different types of time series, each time hugely improving on the baseline of simply going with an average. Let’s find out if the exponential smoothing can improve on this.&lt;/p&gt;
&lt;h2&gt;3. Exponential Smoothing or Winter-Holt models&lt;/h2&gt;
&lt;p&gt;Exponential smoothing models are a time series forecasting method for univariate data. While in the SARIMA models the prediction is simply a weighted linear sum of recent past observations, in exponential smoothing the model explicitly uses an exponentially decreasing weight for past observations. Specifically, past observations are weighted with a geometrically decreasing ratio.&lt;/p&gt;
&lt;p&gt;There are basically three types of exponential smoothing time series forecasting methods. A simple method that assumes no systematic structure, an upgrade that explicitly handles trends, and the most advanced method that has additionally support for seasonality. We will use the most advanced model in our forecast.&lt;br/&gt;The implementation from statsmodels already has an optimizer that automatically tunes these &lt;a href=&quot;https://en.wikipedia.org/wiki/Exponential_smoothing&quot;&gt;hyperparameters&lt;/a&gt; for us: the smoothing coefficient for the level (alpha), the smoothing coefficient for the trend (beta), the smoothing coefficient for the seasonal component (gamma) and the coefficient for the damped trend (phi).&lt;/p&gt;
&lt;p&gt;Yet we need to grid search these parameters:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;trend (t): The type of trend component, as either add for additive or mul for multiplicative. It can also be set to None.&lt;/li&gt;
&lt;li&gt;damped(d): Whether or not the trend component should be damped, either True or False.&lt;/li&gt;
&lt;li&gt;seasonality(s): The type of seasonal component, as either add for additive or mul for multiplicative. It can be turned off with None.&lt;/li&gt;
&lt;li&gt;seasonal periods (p): The number of time steps in a seasonal period, e.g. 12 for 12 months in a yearly seasonal structure.&lt;/li&gt;
&lt;li&gt;boxcox(b): Whether or not to perform a power transform of the series.&lt;/li&gt;
&lt;li&gt;Remove bias(r): If the bias/trend should be removed from the data&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# Exponential smoothing with statsmodels
def exp_smoothing_forecast(history, t,d,s,p,b,r):
    history = array(history)
    model = ExponentialSmoothing(history, trend=t, damped=d, seasonal=s, seasonal_periods=p)
    # fit model
    model_fit = model.fit(optimized=True, use_boxcox=b, remove_bias=r)
    # make one step forecast
    yhat = model_fit.predict(len(history), len(history))
    return yhat[0]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;So how does this family of models do on our data?&lt;/p&gt;
&lt;p&gt;Female-births: Well here we are rather closer to the solution that the average baseline offered us. Apparently the models didn’t pick up on the fluctuations, which results in a RMSE of 6,74 which is the worst of all models so far.&lt;/p&gt;
&lt;img alt=&quot;&quot; src=&quot;https://liip.rokka.io/www_inarticle_3/625c96/famale-births-exp.jpg&quot;/&gt;&lt;p&gt;Shampoo sales: Here the prediction looks better although I feel like it has a certain lag. This can be taken care of with additional modeling but with an RMSE of 97 we are a little bit better than the average model but worse than the SARIMA model.&lt;/p&gt;
&lt;img alt=&quot;&quot; src=&quot;https://liip.rokka.io/www_inarticle_3/9dc02d/shampoo-exp.jpg&quot;/&gt;&lt;p&gt;Temperature: Here we got quite a mediocre fit to the data. The RMSE of 4.57 is much worse than the 2.45 of the SARIMA models and only slightly better than the baseline.&lt;/p&gt;
&lt;img alt=&quot;&quot; src=&quot;https://liip.rokka.io/www_inarticle_3/288d8f/temp-exp.jpg&quot;/&gt;&lt;p&gt;Car sales: The fit to the care sales looks pretty good although we also have this “lag” problem here. With a RMSE of 3635 we are quite a bit worse than the SARIMA solutions.&lt;/p&gt;
&lt;img alt=&quot;&quot; src=&quot;https://liip.rokka.io/www_inarticle_3/314a76/cars-exp.jpg&quot;/&gt;&lt;h3&gt;Little Mid-Resume&lt;/h3&gt;
&lt;p&gt;Based on our little experiments so far we see that the average models seem not to be so bad in comparison to the much more complicated models. Yet the Winter-Holt models seem to do worse than the SARIMA models, which have shown a very good performance, given that they had so little training data (e.g. often only less than 100 data points).&lt;/p&gt;
&lt;h2&gt;4. Neural networks&lt;/h2&gt;
&lt;p&gt;Before we can try different methods, we have to re-shape our data a little bit to make it work with normal machine learning methods.&lt;/p&gt;
&lt;h3&gt;Time series as a supervised learning problem&lt;/h3&gt;
&lt;p&gt;While we can use special methods that work on time-series data only we can also re-frame time series as a simple supervised learning problem. We go from representing the data like this:&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;time&lt;/th&gt;
&lt;th&gt;measure&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;110&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;108&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;115&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;120&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;To this:&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;X&lt;/th&gt;
&lt;th&gt;y&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;110&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;110&lt;/td&gt;
&lt;td&gt;108&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;108&lt;/td&gt;
&lt;td&gt;115&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;115&lt;/td&gt;
&lt;td&gt;120&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;120&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;Doing this is called a window approach or a lag method. The number of previous states is the window size or lag, so in our example above 1. The benefit is that now we can work with any linear or nonlinear standard ml method giving us more flexibility in our toolkit. In code it looks like this - using the pandas shift method we can copy and shift the data next to each other.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# Transforming time-series to a supervised problem
def series_to_supervised(data, n_in, n_out=1):
    df = DataFrame(data)
    cols = list()
    # input sequence (t-n, ... t-1)
    for i in range(n_in, 0, -1):
        cols.append(df.shift(i))
    # forecast sequence (t, t+1, ... t+n)
    for i in range(0, n_out):
        cols.append(df.shift(-i))
    # put it all together
    agg = concat(cols, axis=1)
    # drop rows with NaN values
    agg.dropna(inplace=True)
    return agg.values&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;So for our example of car sales this method would produce the following results:&lt;/p&gt;
&lt;img alt=&quot;&quot; src=&quot;https://liip.rokka.io/www_inarticle_3/9e70bb/shift.jpg&quot;/&gt;&lt;p&gt;Now we can write the forecast using a simple neural network with keras.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# Fit a NN model
def neural_network_forecast(history, n_input,n_nodes,n_epochs,n_batch):
    data = series_to_supervised(history, n_input)   # prepare data
    train_x, train_y = data[:, :-1], data[:, -1] # first col input, last pred
    # define model
    model = Sequential()
    model.add(Dense(n_nodes, activation='relu', input_dim=n_input))
    model.add(Dense(1))
    model.compile(loss='mse', optimizer='adam')
    # fit
    model_fit = model.fit(train_x, train_y, epochs=n_epochs, batch_size=n_batch, verbose=0)
    x_input = array(history[-n_input:]).reshape(1, n_input)
    # make one step forecast
    yhat = model.predict(x_input, verbose=0)
    return yhat[0]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;We are basically doing the same as above, with the added step that we transform the data in the way described above. The neural network is modeled with keras where we have one Dense layer that takes the input that is connected to one dense layer that is the output of our model. We can experiment with the number of data points that we look at at the same time (e.g. 12/24) the number of nodes that our network has (e.g. 50/100/500…), number of epochs (e.g. 100) and the batch size (e.g 100).&lt;/p&gt;
&lt;h2&gt;So how does it do on our data?&lt;/h2&gt;
&lt;p&gt;Female Births: We see that the model picked up quite a bit of the fluctuations, giving us a RMSE of 6.7 . Yet this is not better than the baseline and the SARIMA models.&lt;/p&gt;
&lt;img alt=&quot;&quot; src=&quot;https://liip.rokka.io/www_inarticle_3/632cfa/pred-births-nn.jpg&quot;/&gt;&lt;p&gt;Shampoo sales: We did quite bad on the shampoo sales. We got a RMSE of 115, so not even an improvement against the baseline and much worse than the SARIMA (RMSE 62) models and somewhere similar than the Winter Holt models (RMSE 97)&lt;/p&gt;
&lt;img alt=&quot;&quot; src=&quot;https://liip.rokka.io/www_inarticle_3/e709d1/pred-shampoo-nn.jpg&quot;/&gt;&lt;p&gt;Temperature: With a RMSE of 2.20 we have even managed to beat the results of the SARIMA models (2.27) which is a nice surprise!&lt;/p&gt;
&lt;img alt=&quot;&quot; src=&quot;https://liip.rokka.io/www_inarticle_3/4f17bc/pred-temp-nn.jpg&quot;/&gt;&lt;p&gt;Car sales: With a RMSE of 2091 we did excellent modeling a trend and seasonality. We have outperformed the SARIMA models (RMSE 2600) by quite a bit.&lt;/p&gt;
&lt;img alt=&quot;&quot; src=&quot;https://liip.rokka.io/www_inarticle_3/2e16f4/pred-cars-nn.jpg&quot;/&gt;&lt;p&gt;So there you have it, apparently our very simple neural network wasn’t best in all categories, but it managed to give us a great performance for the temperature seasonal time series and the trend+seasonal time series when modeling the car sales.&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Given our little contest we can draw the following table below. We see that SARIMA ant the simple neural network gave us the best results for our small examples. This should not lead you to the conclusion that you should only use these methods and forget the rest, but instead, that it's worth trying them all. We might for example notice that a simple average does pretty well sometimes (e.g. for the female births) and that it might not be worth it to add that much complexity in order to improve just a few percent.&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th/&gt;
&lt;th&gt;No-Trend&lt;/th&gt;
&lt;th&gt;Trend&lt;/th&gt;
&lt;th&gt;Seasonality&lt;/th&gt;
&lt;th&gt;Trend+Seasonality&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Dataset / Method&lt;/td&gt;
&lt;td&gt;Female births&lt;/td&gt;
&lt;td&gt;Shampoo Sales&lt;/td&gt;
&lt;td&gt;Temperature&lt;/td&gt;
&lt;td&gt;Car Sales&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Average&lt;/td&gt;
&lt;td&gt;6,37&lt;/td&gt;
&lt;td&gt;113,15&lt;/td&gt;
&lt;td&gt;5,14&lt;/td&gt;
&lt;td&gt;3647&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;SARIMA&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;6.16 (WINNER)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;62.83 (WINNER)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;2,27&lt;/td&gt;
&lt;td&gt;2600&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Holt-Winters&lt;/td&gt;
&lt;td&gt;6,74&lt;/td&gt;
&lt;td&gt;97&lt;/td&gt;
&lt;td&gt;4,57&lt;/td&gt;
&lt;td&gt;3635&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Simple Neural-Network&lt;/td&gt;
&lt;td&gt;6,7&lt;/td&gt;
&lt;td&gt;115&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;2.20 (WINNER)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;2091 (WINNER)&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;Aaaand one more thing - If you are still here, it seems I might as well share with you one secret that will make your life easier when working with time series. There is a very nice library called &lt;a href=&quot;https://facebook.github.io/prophet/&quot;&gt;Prophet&lt;/a&gt; out there, that makes predicting time series an almost effortless endeavour. Apparently the engineers at Facebook were tired to reinvent the wheel every time they “just” needed to predict some data into the future. So they’ve built their own open source tool.&lt;/p&gt;
&lt;p&gt;“Prophet is a procedure for forecasting time series data based on an additive model where non-linear trends are fit with yearly, weekly, and daily seasonality, plus holiday effects. It works best with time series that have strong seasonal effects and several seasons of historical data. Prophet is robust to missing data and shifts in the trend, and typically handles outliers well.”&lt;/p&gt;
&lt;p&gt;Let me show you how it works. First you need to whip the data a little bit into shape, by giving it the right column names and types and then you are basically ready to go.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# A few simple preprocessing steps
series = pd.read_csv('monthly-car-sales.csv', header=0, index_col=None)
series['ds']  = pd.to_datetime(series['Month'])
series[['y']] = series[['Sales']].astype(float)
series = series[[&quot;ds&quot;,&quot;y&quot;]]
series.head()&lt;/code&gt;
&lt;/pre&gt;
&lt;img alt=&quot;&quot; src=&quot;https://liip.rokka.io/www_inarticle_3/e2ea12/headwide.jpg&quot;/&gt;&lt;p&gt;Then you supply it with the most important parameters: which is the number of periods it should predict and what the frequency of your data is (e.g. months) . You select a seasonality mode and can also add different seasonalities for weeks, months, etc… and then fit the data.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# A simple prediction
m = Prophet(mcmc_samples=500,seasonality_mode='multiplicative').fit(series);
future = m.make_future_dataframe(periods=48,freq='M')
forecast = m.predict(future)
forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The outcome is a model that can predict your data not only one step into the future but multiple. Of course each step will have more uncertainty in it. We can as well do this with our methods above, I am just saying that with prophet it already comes in the box, which is a nice thing. So how does a prediction look like? Let's have a look at the car sales.&lt;/p&gt;
&lt;p&gt;Below you see a standard output from prophet, where it shows us the data points in black and the prediction in blue. It even shows us the rising uncertainty in the future (light blue)&lt;/p&gt;
&lt;img alt=&quot;&quot; src=&quot;https://liip.rokka.io/www_inarticle_3/e72490/prophet.jpg&quot;/&gt;&lt;p&gt;We also get the trend and seasonal components right out of the box, where we can investigate that car sales happen mostly around spring and autumn, but less in the hot summer days.&lt;/p&gt;
&lt;img alt=&quot;&quot; src=&quot;https://liip.rokka.io/www_inarticle_3/7673a1/components.jpg&quot;/&gt;&lt;h3&gt;So how does it do vs the other methods?&lt;/h3&gt;
&lt;p&gt;We will even be a bit unfair and just see how well the multi-step predictions of prophet match up with the one-step predictions we have used before.&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th/&gt;
&lt;th&gt;No-Trend&lt;/th&gt;
&lt;th&gt;Trend&lt;/th&gt;
&lt;th&gt;Seasonality&lt;/th&gt;
&lt;th&gt;Trend+Seasonality&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Dataset / Method&lt;/td&gt;
&lt;td&gt;Female births&lt;/td&gt;
&lt;td&gt;Shampoo Sales&lt;/td&gt;
&lt;td&gt;Temperature&lt;/td&gt;
&lt;td&gt;Car Sales&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Best Method&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;6.16 (SARIMA)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;62.83 (SARIMA)&lt;/td&gt;
&lt;td&gt;2.2 (Neural Network)&lt;/td&gt;
&lt;td&gt;2091 (Neural Network)&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Prophet&lt;/td&gt;
&lt;td&gt;6,64&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;37,67&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;1,91&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;1382&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;It turns out Prophet has beaten almost all of our simple methods by quite a bit. So should we always just use prohphet and forget the rest? Well it still depends. If you need something where you quickly get a prediction then use prophet. If you need to have influence over the method or want to have a prediction more sophisticated than our simple examples then you should invest the time into modeling it yourself.&lt;/p&gt;
&lt;p&gt;Also when it comes to a multivariate prediction you might be better of using your own method although prophet might also work using the &lt;a href=&quot;https://www.analyticsvidhya.com/blog/2018/09/multivariate-time-series-guide-forecasting-modeling-python-codes/&quot;&gt;VAR method&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;So what’s the lesson here? Maybe we have a couple:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;If you want to predict time series, start simple and a simple method might just be enough.&lt;/li&gt;
&lt;li&gt;If you add complexity, then measure if it was worth it.&lt;/li&gt;
&lt;li&gt;When working with more complex methods, you can gridsearch the solution although it is rather costly.&lt;/li&gt;
&lt;li&gt;You have multiple options on which methods to use, including more recent machine learning methods like deep learning.&lt;/li&gt;
&lt;li&gt;If you need something out of the box, for a simple univariate time series libraries like prophet might be just right to do the job.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;That's it folks! You can find the code that was used to generate these time series prediction as usual in our &lt;a href=&quot;https://github.com/plotti/timeseries_demo&quot;&gt;GitHub repo&lt;/a&gt;.&lt;/p&gt;
</description>
<pubDate>Sat, 09 Nov 2019 16:25:00 +0000</pubDate>
<dc:creator>makaimc</dc:creator>
<og:title>Time Series Prediction - A short introduction for pragmatists · Blog · Liip</og:title>
<og:type>article</og:type>
<og:url>https://www.liip.ch/en/blog/time-series-prediction-a-short-comparison-of-best-practices</og:url>
<og:image>https://liip.rokka.io/www_socialmedia_3/609ed2/collage.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.liip.ch/en/blog/time-series-prediction-a-short-comparison-of-best-practices</dc:identifier>
</item>
</channel>
</rss>