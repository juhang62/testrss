<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Amazon DocumentDB, with MongoDB compatibility</title>
<link>https://aws.amazon.com/documentdb/</link>
<guid isPermaLink="true" >https://aws.amazon.com/documentdb/</guid>
<description>&lt;h2 id=&quot;Use_cases&quot; class=&quot;lb-txt-bold lb-txt-28 lb-h2 lb-title&quot;&gt;Use cases&lt;/h2&gt;
&lt;h3 id=&quot;Migrate_your_on-premises_MongoDB_workloads_to_the_cloud&quot; class=&quot;lb-txt-bold lb-txt-none lb-txt-18 lb-h3 lb-title&quot;&gt;Migrate your on-premises MongoDB workloads to the cloud&lt;/h3&gt;
&lt;div class=&quot;lb-rtxt&quot; readability=&quot;18&quot;&gt;
&lt;p&gt;Self-managing MongoDB databases is difficult, time-consuming, and expensive. With Amazon DocumentDB, you can set up, secure, and scale MongoDB-compatible databases in the cloud without worrying about manually setting up and securing database clusters, running cluster management software, configuring backups, and monitoring production workloads.&lt;br/&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;&lt;img alt=&quot;Product-Page-Diagram_Chimera_Database-migration&quot; title=&quot;Product-Page-Diagram_Chimera_Database-migration&quot; src=&quot;https://d1.awsstatic.com/r2018/h/Chimera/Product-Page-Diagram_Chimera_Database-migration.9b711de1b5be05ef91e4246ece9a29abe39aa62b.png&quot;/&gt;&lt;/div&gt;
&lt;h3 id=&quot;Mobile_and_web_applications&quot; class=&quot;lb-txt-bold lb-txt-none lb-txt-18 lb-h3 lb-title&quot;&gt;Mobile and web applications&lt;/h3&gt;
&lt;div class=&quot;lb-rtxt&quot; readability=&quot;14&quot;&gt;
&lt;p&gt;Build high-performance mobile and web applications that scale to process millions of user requests per second with millisecond latency. Amazon DocumentDB lowers your operational burden, allowing you to focus on building unique experiences for your customers. Amazon DocumentDB’s flexible document model, data types, and indexing allow you to adapt and iterate on your applications quickly, cutting down development time.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;&lt;img alt=&quot;Product-Page-Diagram_Chimera_Mobile-Web-Applications&quot; title=&quot;Product-Page-Diagram_Chimera_Mobile-Web-Applications&quot; src=&quot;https://d1.awsstatic.com/r2018/h/Chimera/Product-Page-Diagram_Chimera_Mobile-Web-Applications.5b099cff74fe76d7384d2ad35bc8653f898903be.png&quot;/&gt;&lt;/div&gt;
&lt;h3 id=&quot;Content_and_catalog_management&quot; class=&quot;lb-txt-bold lb-txt-none lb-txt-18 lb-h3 lb-title&quot;&gt;Content and catalog management&lt;/h3&gt;
&lt;div class=&quot;lb-rtxt&quot; readability=&quot;24&quot;&gt;
&lt;p&gt;Shopping sites, online publications, digital archives, point-of-sale terminals, and self-service kiosks rely on content and catalog management systems to serve their customers. These systems need fast and reliable access to user reviews, images, ratings, product information, comments, etc. With Amazon DocumentDB’s flexible document model, data types, and indexing, you can store and query content (e.g., user reviews and demo videos for shopping sites) and catalogs (e.g., inventory lists for point-of-sale terminals and financial trades for trading platforms) quickly and intuitively. &lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;&lt;img alt=&quot;Product-Page-Diagram_Chimera_product-catalog&quot; title=&quot;Product-Page-Diagram_Chimera_product-catalog&quot; src=&quot;https://d1.awsstatic.com/r2018/h/Chimera/Product-Page-Diagram_Chimera_product-catalog.8ac5caa24cdc36c3baccd003be3f0110388d6958.png&quot;/&gt;&lt;/div&gt;
&lt;h3 id=&quot;Profile_management&quot; class=&quot;lb-txt-bold lb-txt-none lb-txt-18 lb-h3 lb-title&quot;&gt;Profile management&lt;/h3&gt;
&lt;div class=&quot;lb-rtxt&quot; readability=&quot;18&quot;&gt;
&lt;p&gt;User profile management enables online transactions, user preferences, and user authentication. With the growth in users, increasingly complex user profile data, and growing user experience expectations, the demand for scalability, data flexibility, and performance too has grown. With Amazon DocumentDB’s document data model, you can manage profiles &amp;amp; preferences of millions of users &amp;amp; scale to process millions of user requests per second with millisecond latency.&lt;br/&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;&lt;img alt=&quot;Product-Page-Diagram_Chimera_profile-management&quot; title=&quot;Product-Page-Diagram_Chimera_profile-management&quot; src=&quot;https://d1.awsstatic.com/r2018/h/Chimera/Product-Page-Diagram_Chimera_profile-management.1d0ba94069586e42f138d2aad3ab5e2787c0ff61.png&quot;/&gt;&lt;/div&gt;
</description>
<pubDate>Wed, 09 Jan 2019 22:41:27 +0000</pubDate>
<dc:creator>ifcologne</dc:creator>
<og:title>Amazon DocumentDB (with MongoDB compatibility)</og:title>
<og:type>company</og:type>
<og:url>https://aws.amazon.com/documentdb/</og:url>
<og:image>https://a0.awsstatic.com/libra-css/images/logos/aws_logo_smile_1200x630.png</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://aws.amazon.com/documentdb/</dc:identifier>
</item>
<item>
<title>Thoughts on Rust, a few thousand lines in</title>
<link>https://rcoh.me/posts/thoughts-on-rust-a-few-thousand-lines-in/</link>
<guid isPermaLink="true" >https://rcoh.me/posts/thoughts-on-rust-a-few-thousand-lines-in/</guid>
<description>&lt;p&gt;To say my &lt;a href=&quot;https://rcoh.me/posts/rust-linked-list-basically-impossible&quot;&gt;first foray&lt;/a&gt; into Rust was a frustrating struggle would be an understatement. I picked a terrible first project that left me neck deep in Rust’s trickiest areas right off the bat. I was excited to try again. A few years ago I wrote &lt;a href=&quot;https://github.com/SumoLogic/sumoshell&quot;&gt;Sumoshell&lt;/a&gt;, a CLI App for log analysis. I’d wanted to improve it for a while, so porting it to Rust seemed like a nice way to kill two birds with one stone. Like Go, Rust can compile statically linked linux binaries which makes it ideal for distributing CLI apps; indeed CLI app support is a &lt;a href=&quot;https://internals.rust-lang.org/t/announcing-the-cli-working-group/6872&quot;&gt;priority&lt;/a&gt; for Rust. Before I get into the rest of the post, &lt;a href=&quot;https://github.com/rcoh/angle-grinder&quot;&gt;here’s the end result&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://rcoh.me/images/agrind-demo.gif&quot; alt=&quot;Angle grinder demo&quot;/&gt;&lt;/p&gt;
&lt;p&gt;With a few small hiccups, my second try at learning Rust was a real joy. It combines the expressiveness and type system I love from Scala with the small memory footprint and performance you get from compiling directly to a low level without a runtime. I saw a lot of pragmatism in the design of the language and the standard library, more than I’ve seen in other languages. I should caveat this with a note that I haven’t tried to write macros or use &lt;code&gt;Futures&lt;/code&gt; yet, &lt;a href=&quot;https://brandur.org/fragments/rust-brick-walls&quot;&gt;two major pain-points&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;things-that-were-awesome&quot;&gt;Things That Were Awesome&lt;/h2&gt;
&lt;p&gt;Nearly every time I’ve thought, “wow it would be great if…”, Rust has a well thought out solution that strikes just the right balance between idealism and pragmatism.&lt;/p&gt;
&lt;h3 id=&quot;great-docs&quot;&gt;Great Docs&lt;/h3&gt;
&lt;p&gt;The Rust documentation is some of the best technical writing I’ve ever read. After writing code like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;12&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;let&lt;/span&gt; parsed &lt;span&gt;=&lt;/span&gt; lang::parse_query(&lt;span&gt;&amp;amp;&lt;/span&gt;query);
&lt;span&gt;let&lt;/span&gt; query &lt;span&gt;=&lt;/span&gt; &lt;span&gt;match&lt;/span&gt; parsed {
    Ok((_input, query)) &lt;span&gt;=&amp;gt;&lt;/span&gt; query,
    Err(s) &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;return&lt;/span&gt; Result::Err(format&lt;span&gt;!&lt;/span&gt;(&lt;span&gt;&quot;Could not parse query: {:?}&quot;&lt;/span&gt;, s)),
};&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;My first thought was, “huh, I wonder if you could write a macro for that.” That quickly lead me to &lt;a href=&quot;https://doc.rust-lang.org/book/first-edition/error-handling.html&quot;&gt;this doc&lt;/a&gt; which not only perfectly answered my question (“yes, with the &lt;code&gt;try!&lt;/code&gt;/&lt;code&gt;?&lt;/code&gt; macros”) but also guided me through the progression of the best practices for handling errors in Rust.&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;let&lt;/span&gt; parsed &lt;span&gt;=&lt;/span&gt; lang::parse_query(&lt;span&gt;&amp;amp;&lt;/span&gt;query).map_err(&lt;span&gt;|&lt;/span&gt;e&lt;span&gt;|&lt;/span&gt; format&lt;span&gt;!&lt;/span&gt;(&lt;span&gt;&quot;Could not parse query: {:?}&quot;&lt;/span&gt;, e));
&lt;span&gt;let&lt;/span&gt; (_, query) &lt;span&gt;=&lt;/span&gt; parsed&lt;span&gt;?&lt;/span&gt;;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Across the board, the docs are clear, easy to read, and, in another stroke of pragmatism, there are actually &lt;a href=&quot;https://doc.rust-lang.org/stable/rustdoc/documentation-tests.html&quot;&gt;tests that all the examples compile&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Watch out for stale docs! A lot of google searches lead you to the first edition of the Rust book. It isn’t incorrect (to my knowledge), but there is sometimes a better way.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;cargo-fmt&quot;&gt;Cargo Fmt&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;cargo fmt&lt;/code&gt; is the autoformatting module built in to Rust. While it’s not quite as perfect as &lt;code&gt;go fmt&lt;/code&gt;, it’s coming along. Any language in 2018 that doesn’t have 1-true-way to be formatted is missing out.&lt;/p&gt;
&lt;h3 id=&quot;variable-shadowing-encouraged&quot;&gt;Variable shadowing encouraged&lt;/h3&gt;
&lt;p&gt;Unlike nearly every language I’ve ever used, Rust actually &lt;em&gt;encourages&lt;/em&gt; variable shadowing. I thought this was a really interesting and pragmatic design decision. It avoids code like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;val&lt;/span&gt; foo &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;...&quot;&lt;/span&gt;
&lt;span&gt;val&lt;/span&gt; fooParsed &lt;span&gt;=&lt;/span&gt; parse&lt;span&gt;(&lt;/span&gt;foo&lt;span&gt;)&lt;/span&gt;
&lt;span&gt;val&lt;/span&gt; fooEscaped &lt;span&gt;=&lt;/span&gt; escape&lt;span&gt;(&lt;/span&gt;fooParsed&lt;span&gt;)&lt;/span&gt;
&lt;span&gt;...&lt;/span&gt;
&lt;span&gt;// Whoops. Should have used fooEscaped...
&lt;/span&gt;doSomethingWith&lt;span&gt;(&lt;/span&gt;fooParsed&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I’ve seen multiple production bugs caused by someone intending to replace a value with another, only to have the old value used later.&lt;/p&gt;
&lt;p&gt;In Rust you can make the old value unusable by simply shadowing it:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;let&lt;/span&gt; foo &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;...&quot;&lt;/span&gt;;
&lt;span&gt;let&lt;/span&gt; foo &lt;span&gt;=&lt;/span&gt; parse(foo);
&lt;span&gt;let&lt;/span&gt; foo &lt;span&gt;=&lt;/span&gt; escaped(foo);
...
doSomethingWith(foo);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It turns shadowing from a frequent cause of bugs into something that prevents bugs!&lt;/p&gt;
&lt;h3 id=&quot;easing-into-ownership&quot;&gt;Easing into Ownership&lt;/h3&gt;
&lt;p&gt;Ownership is tricky, but Rust has an escape hatch: &lt;code&gt;clone()&lt;/code&gt;. If I couldn’t figure out an ownership issue after a minute or two, I could just use &lt;code&gt;.clone()&lt;/code&gt; or &lt;code&gt;.cloned()&lt;/code&gt;, punting the issue until I cared about the performance I lost cloning.&lt;/p&gt;
&lt;p&gt;Angle grinder allows you to transform your log data through a series of operators. Initially, each operator would &lt;code&gt;borrow&lt;/code&gt; the records it processed.&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;fn&lt;/span&gt; &lt;span&gt;process&lt;/span&gt;(&lt;span&gt;&amp;amp;&lt;/span&gt;self, rec: &lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;Record&lt;/span&gt;) -&amp;gt; Option&lt;span&gt;&amp;lt;&lt;/span&gt;Record&lt;span&gt;&amp;gt;&lt;/span&gt; {
    ...
    &lt;span&gt;// clone rec and make some changes...
&lt;/span&gt;}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This was fine, but I ended up doing a lot of unnecessary cloning.&lt;/p&gt;
&lt;p&gt;Later, as I began to get a better handle on what patterns worked better and gained a better understanding of ownership, I could improve things. Since each &lt;code&gt;Record&lt;/code&gt; is moving linearly through the series of operators, it actually makes more sense to have &lt;code&gt;process&lt;/code&gt; take ownership:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;fn&lt;/span&gt; &lt;span&gt;process&lt;/span&gt;(&lt;span&gt;&amp;amp;&lt;/span&gt;self, rec: &lt;span&gt;Record&lt;/span&gt;) -&amp;gt; Option&lt;span&gt;&amp;lt;&lt;/span&gt;Record&lt;span&gt;&amp;gt;&lt;/span&gt; {
    ...
    &lt;span&gt;// mutate rec, no cloning required
&lt;/span&gt;}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Punting by using &lt;code&gt;clone&lt;/code&gt; isn’t always possible, but luckily I didn’t hit those places until I understood ownership well enough ;-).&lt;/p&gt;
&lt;h3 id=&quot;expressive-abstractions&quot;&gt;Expressive Abstractions&lt;/h3&gt;
&lt;p&gt;One of my major frustrations when originally writing Sumoshell in Go was running into stack overflow answers like &lt;a href=&quot;https://stackoverflow.com/questions/21362950/golang-getting-a-slice-of-keys-from-a-map&quot;&gt;this&lt;/a&gt; (How do you get the keys out of map? Use a for-loop and append them into a list. Oy.) Probably not that annoying coming from C, but coming from Scala and Python I felt like Go was actively working against me. Needless to say, I was pleasantly surprised to find that Rust has all the functional programming paradigms I enjoyed in Scala (&lt;code&gt;map&lt;/code&gt;, &lt;code&gt;flat_map&lt;/code&gt;, &lt;code&gt;fold&lt;/code&gt;, etc.). They’re slightly less ergonomic to use:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;// In scala
&lt;/span&gt;&lt;span&gt;val&lt;/span&gt; anotherList &lt;span&gt;=&lt;/span&gt; someList&lt;span&gt;.&lt;/span&gt;map&lt;span&gt;(&lt;/span&gt;x &lt;span&gt;=&amp;gt;&lt;/span&gt; x &lt;span&gt;+&lt;/span&gt; &lt;span&gt;5&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;// In rust   
&lt;/span&gt;&lt;span&gt;let&lt;/span&gt; another: Vec&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;u64&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; some_vec.iter().map(&lt;span&gt;|&lt;/span&gt;x&lt;span&gt;|&lt;/span&gt;x &lt;span&gt;+&lt;/span&gt; &lt;span&gt;5&lt;/span&gt;).collect();
&lt;span&gt;/*            ^ type required     ^.iter() needed       ^ collect to convert  
&lt;/span&gt;&lt;span&gt;                                                          the iterator back to a collection*/&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But I appreciate the trade off. In Scala, laziness vs. nonlaziness in the standard library collections has been a footgun for years.&lt;/p&gt;
&lt;p&gt;The type system of Rust was plenty for this project, even without higher-kinded types. Scala’s type system is fine, but I frequently end up needing type classes which are a bit of a kludge in Scala. Rust brings type classes (called &lt;code&gt;Traits&lt;/code&gt; in Rust) as &lt;em&gt;the way&lt;/em&gt; of code reuse. I feel pretty strongly that the ad-hoc polymorphism offered by type classes is the best option in terms of leading people into the &lt;a href=&quot;https://blog.codinghorror.com/falling-into-the-pit-of-success/&quot;&gt;pit of success&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Compile times in Rust aren’t great – it takes about 5 seconds to compile angle grinder with 1800 lines of Rust. Incremental compilation has already landed in stable, but I haven’t noticed a big different in practice, even when I only change a couple of lines. &lt;code&gt;cargo check&lt;/code&gt; &amp;amp; &lt;code&gt;cargo watch&lt;/code&gt; are a saving grace here, but they only help when you’re iterating on compiler errors instead of test failures.&lt;/p&gt;
&lt;h2 id=&quot;things-that-might-be-awesome-in-the-future&quot;&gt;Things that might be awesome in the future&lt;/h2&gt;
&lt;p&gt;Some things were a little rougher around the edges. I’m including this section not as a criticism, but rather as a heads-up of things to watch out for new Rustaceans.&lt;/p&gt;
&lt;h3 id=&quot;crates-don-t-have-great-seo&quot;&gt;Crates Don’t Have Great SEO&lt;/h3&gt;
&lt;p&gt;TLDR: If you’re looking for a crate, search for it on &lt;a href=&quot;https://crates.io&quot;&gt;https://crates.io&lt;/a&gt;. Many great crates don’t show up Google! Another side note: A lot of great, well loved, crates don’t have a lot of Github stars.&lt;/p&gt;
&lt;p&gt;Coming from Python and Scala, where googling “Python thing I want” almost always finds you the relevant Python package, it didn’t always work that way for Rust. As an example: I was wanted to add percentile support to angle grinder. Percentiles are pretty key for most monitoring workflow – angle grinder lets you do things like:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;* | parse &quot;status_code=*] as status_code 
  | parse &quot;response_ms=*]&quot; as response_ms 
  | pct90(response_ms) by status_code
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;For angle-grinder, a streaming &amp;amp; constant memory implementation of percentile is required to avoid leaking memory. Googling &lt;code&gt;Rust percentile&lt;/code&gt; gives you a few options, but none of them are great. I actually ended up finding a much better crate &lt;a href=&quot;https://crates.io/crates/quantiles&quot;&gt;quantiles&lt;/a&gt; when I searched for &lt;a href=&quot;http://ieeexplore.ieee.org/document/1410103/?tp=&amp;amp;arnumber=1410103&amp;amp;url=http:%2F%2Fieeexplore.ieee.org%2Fxpls%2Fabs_all.jsp%3Farnumber%3D1410103&quot;&gt;CKMS&lt;/a&gt;, a popular streaming percentile algorithm. But if I had just &lt;a href=&quot;https://crates.io/search?q=percentile&quot;&gt;searched crates.io&lt;/a&gt;, I would have found it right away.&lt;/p&gt;
&lt;h3 id=&quot;macro-errors-are-the-worst&quot;&gt;Macro errors are the worst.&lt;/h3&gt;
&lt;p&gt;Angle grinder is essentially an extremely simple functional programming language wrapped in a pretty CLI app. So, naturally, it needs to parse the aforementioned programing language. Being familiar with parser-combinator style parsing from Scala, I decided to use &lt;a href=&quot;https://github.com/geal/nom&quot;&gt;Nom&lt;/a&gt;, a similar library for Rust. Nom is based on macros. This is great when it allows you to write a lot less code. But it’s less nice when you forget an &lt;code&gt;&amp;gt;&lt;/code&gt; and get an error like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;13&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;error: &lt;span&gt;no&lt;/span&gt; rules expected the token &lt;span&gt;`&lt;/span&gt;i1&lt;span&gt;`&lt;/span&gt;
  &lt;span&gt;-&lt;/span&gt;-&amp;gt; &lt;span&gt;src&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;lang.rs:&lt;span&gt;95&lt;/span&gt;:&lt;span&gt;1&lt;/span&gt;
   &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;95&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; &lt;span&gt;/&lt;/span&gt; named&lt;span&gt;!&lt;/span&gt;(json&lt;span&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span&gt;str&lt;/span&gt;, InlineOperator&lt;span&gt;&amp;gt;&lt;/span&gt;, ws&lt;span&gt;!&lt;/span&gt;(do_parse&lt;span&gt;!&lt;/span&gt;(
&lt;span&gt;96&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;     tag&lt;span&gt;!&lt;/span&gt;(&lt;span&gt;&quot;json&quot;&lt;/span&gt;) &lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;97&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;     from_column_opt: &lt;span&gt;opt&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;(preceded&lt;span&gt;!&lt;/span&gt;(tag&lt;span&gt;!&lt;/span&gt;(&lt;span&gt;&quot;from&quot;&lt;/span&gt;), ident)) &lt;span&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;98&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;     (InlineOperator::Json { input_column: &lt;span&gt;from_column_opt&lt;/span&gt;.map(&lt;span&gt;|&lt;/span&gt;s&lt;span&gt;|&lt;/span&gt;s.to_string()) })
&lt;span&gt;99&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; )));
   &lt;span&gt;|&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;____&lt;span&gt;^&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once you’re familiar with a library, this isn’t a big problem. However, error messages like &lt;code&gt;no rules expected token `i1`&lt;/code&gt; make for a really nasty learning curve. I’m not sure what the right answer here is. Scala’s macros have this problem when you’re writing them, but once they’re written, you don’t typically get internal compile errors because of how expansion works.&lt;/p&gt;
&lt;h3 id=&quot;you-can-t-sort-floats&quot;&gt;You Can’t Sort Floats&lt;/h3&gt;
&lt;p&gt;Rust attempts, as much as possible, to avoid surprising behavior. Here is some surprising Python behavior:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;21&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; sorted([&lt;span&gt;3&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;, float(&lt;span&gt;'NaN'&lt;/span&gt;), &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;])
[&lt;span&gt;3&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;, nan, &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;]
&lt;span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; sorted([&lt;span&gt;3&lt;/span&gt;,&lt;span&gt;4&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;])
[&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;]&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In order to prevent this in Rust, it simply doesn’t define &lt;code&gt;Ord&lt;/code&gt; for floats:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[derive(PartialOrd, Ord)]&lt;/span&gt;
&lt;span&gt;struct&lt;/span&gt; &lt;span&gt;FloatHolder&lt;/span&gt; {
    f float64
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;error[E0277]: &lt;span&gt;the&lt;/span&gt; &lt;span&gt;trait&lt;/span&gt; bound &lt;span&gt;`&lt;/span&gt;&lt;span&gt;f64&lt;/span&gt;: &lt;span&gt;std&lt;/span&gt;::cmp::Ord&lt;span&gt;`&lt;/span&gt; is not satisfied
   &lt;span&gt;-&lt;/span&gt;-&amp;gt; &lt;span&gt;src&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;operator.rs:&lt;span&gt;376&lt;/span&gt;:&lt;span&gt;5&lt;/span&gt;
    &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;376&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;     f: &lt;span&gt;f64&lt;/span&gt;
    &lt;span&gt;|&lt;/span&gt;     &lt;span&gt;^^^^^^&lt;/span&gt; the &lt;span&gt;trait&lt;/span&gt; &lt;span&gt;`&lt;/span&gt;std::cmp::Ord&lt;span&gt;`&lt;/span&gt; is not implemented &lt;span&gt;for&lt;/span&gt; &lt;span&gt;`&lt;/span&gt;&lt;span&gt;f64&lt;/span&gt;&lt;span&gt;`&lt;/span&gt;
    &lt;span&gt;|&lt;/span&gt;
    &lt;span&gt;=&lt;/span&gt; note: &lt;span&gt;required&lt;/span&gt; by &lt;span&gt;`&lt;/span&gt;std::cmp::Ord::cmp&lt;span&gt;`&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I admit I was of two minds on this. Initially, it was infuriating, mostly because my specific use-case at the time didn’t enable me to use the escape hatch suggested on the internet, &lt;code&gt;partial_cmp(...).unwrap_or(Ordering::Less)&lt;/code&gt;. But I think this is a better choice than Python’s surprising behavior. I’m looking forward to progress being made on &lt;a href=&quot;https://github.com/rust-lang/rfcs/issues/1249&quot;&gt;#1249&lt;/a&gt;, which proposes adding wrapper types that implement an IEEE complete order on floats. At the end of the day, though, this is the kind of property that can make it frustrating when first getting to know a language.&lt;/p&gt;
&lt;h2 id=&quot;parting-thoughts&quot;&gt;Parting Thoughts&lt;/h2&gt;
&lt;p&gt;At the end of the day, I really enjoyed writing &lt;a href=&quot;https://github.com/rcoh/angle-grinder&quot;&gt;angle grinder&lt;/a&gt; in Rust, significantly more so than when I first wrote &lt;code&gt;Sumoshell&lt;/code&gt; as a project to learn Go. I just spent more time solving coding problems than I spent solving language problems. When I first wrote it in Go, I spent a lot of time surprised and confused by Go’s behavior. I’m not sure I’d pick it for writing a web service just yet. The posts I’ve read about people’s experience seemed to contain a lot more pain than I really want to experience. But for a writing non-trivial CLI apps, I think it’s going to be my go-to choice going forward.&lt;/p&gt;
&lt;hr/&gt;
Want to get emailed about new blog posts?

I post about once every few weeks on topics like &lt;a href=&quot;https://rcoh.me/tags/databases&quot;&gt;databases&lt;/a&gt;, &lt;a href=&quot;https://rcoh.me/tags/language-internals&quot;&gt;language internals&lt;/a&gt; and &lt;a href=&quot;https://rcoh.me/tags/algorithms&quot;&gt;algorithms&lt;/a&gt;, and recently, &lt;a href=&quot;https://rcoh.me/tags/deep-learning&quot;&gt;deep learning&lt;/a&gt;.
&lt;hr/&gt;
Do you want to hire me? I’m available for engagements from 1 week to a few months. &lt;a href=&quot;https://rcoh.me/hire-me&quot;&gt;Hire me!&lt;/a&gt;

</description>
<pubDate>Wed, 09 Jan 2019 20:06:16 +0000</pubDate>
<dc:creator>airstrike</dc:creator>
<og:title>Thoughts on Rust, a few thousand lines in</og:title>
<og:description>To say my first foray into Rust was a frustrating struggle would be an understatement. I picked a terrible first project that left me neck deep in Rust’s trickiest areas right off the bat. I was excited to try again. A few years ago I wrote Sumoshell, a CLI App for log analysis. I’d wanted to improve it for a while, so porting it to Rust seemed like a nice way to kill two birds with one stone.</og:description>
<og:type>article</og:type>
<og:url>https://rcoh.me/posts/thoughts-on-rust-a-few-thousand-lines-in/</og:url>
<dc:language>en-us</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://rcoh.me/posts/thoughts-on-rust-a-few-thousand-lines-in/</dc:identifier>
</item>
<item>
<title>Show HN: I taught my little brother JS, and he made this videogame in a week</title>
<link>https://s-poony.github.io/Ultra-Square-Catcher-USC-/jeuvideo.html</link>
<guid isPermaLink="true" >https://s-poony.github.io/Ultra-Square-Catcher-USC-/jeuvideo.html</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://s-poony.github.io/Ultra-Square-Catcher-USC-/jeuvideo.html&quot;&gt;https://s-poony.github.io/Ultra-Square-Catcher-USC-/jeuvideo.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=18866500&quot;&gt;https://news.ycombinator.com/item?id=18866500&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 867&lt;/p&gt;
&lt;p&gt;# Comments: 225&lt;/p&gt;
</description>
<pubDate>Wed, 09 Jan 2019 17:13:59 +0000</pubDate>
<dc:creator>lovasoa</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://s-poony.github.io/Ultra-Square-Catcher-USC-/jeuvideo.html</dc:identifier>
</item>
<item>
<title>Penguin travels every year to visit man who rescued him (2016)</title>
<link>https://www.cbc.ca/news/trending/dindim-o-lindo-pinguim-1.3487668</link>
<guid isPermaLink="true" >https://www.cbc.ca/news/trending/dindim-o-lindo-pinguim-1.3487668</guid>
<description>&lt;p&gt;&lt;span&gt;Ever since a 71-year-old Brazilian man rescued a struggling penguin, he's been receiving regular visits from his feathered friend.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Joao Pereira de Souza, a retired bricklayer, lives on Proveta, a fishing village just off the coast of Rio de Janeiro. In 2011, he spotted a starving Magellanic penguin drenched in oil on the beach near his house. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Naming the penguin Dindim, Pereira de Souza fed him every day until he was strong enough to leave, &lt;a href=&quot;https://www.facebook.com/ciencias.fsa/videos/1039393452790200/&quot;&gt;according to a video from the University of Rio de Janeiro&lt;/a&gt;. But the penguin refused to go.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Pereira de Souza decided to row a boat out into the water and drop Dindim off to encourage him to swim home.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;But when he rowed back to shore, he found the penguin waiting for him at his shanty.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&quot;He stayed with me for 11 months and then, just after he changed his coat with new feathers, he disappeared,&quot; Pereira de Souza told &lt;a href=&quot;http://gshow.globo.com/Bastidores/noticia/2016/03/pinguim-curioso-se-apaixona-por-camera-nos-bastidores-do-domingao-do-faustao-assista.html&quot;&gt;TV Globo, a Brazilian TV network.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Magellanic penguins regularly swim thousands of kilometres a year to breeding spots on the coast of Argentina and Chile. From time to time, penguins show up in warmer Brazilian waters, according to the Wall Street Journal.&lt;/p&gt;
&lt;p&gt;Many of Pereira de Souza's friends thought that when Dindim finally left, that was it for the human-bird friendship.&lt;/p&gt;
&lt;p&gt;But a few months later, Dindim returned and found Pereira de Souza. He visits for about four months, a ritual kept for the last five years. &lt;/p&gt;
&lt;p&gt;&quot;He arrives in June and leaves to go home in February, and every year he becomes more affectionate, as he appears even happier to see me,&quot; &lt;a href=&quot;http://gshow.globo.com/Bastidores/noticia/2016/03/pinguim-curioso-se-apaixona-por-camera-nos-bastidores-do-domingao-do-faustao-assista.html&quot;&gt;Pereira de Souza told TV Globo.&lt;/a&gt;&lt;/p&gt;
&lt;div&gt;
&lt;div class=&quot;placeholder&quot;&gt;

&lt;span&gt;&lt;img alt=&quot;&quot; src=&quot;https://i.cbc.ca/1.3487812.1457729032!/fileImage/httpImage/image.PNG_gen/derivatives/original_780/penguin-dindim.PNG&quot; class=&quot;loaded largeImage&quot;/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;span&gt;&lt;span class=&quot;leadimage-caption&quot;&gt;Dindim makes his way from Patagonia back to de Souza's beach in Proveta, off the coast of Rio de Janeiro.  (University of Rio de Janeiro)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;De Souza appears to be the only person who can get near Dindim. If others try, he pecks them or waddles away.&lt;/p&gt;
&lt;p&gt;&quot;I think the penguin believes Joao is part of his family and probably a penguin as well,&quot; &lt;a href=&quot;http://www.independent.co.uk/news/world/americas/meet-dindim-the-penguin-who-returns-to-his-human-soulmate-every-year-a6917621.html&quot;&gt;biologist Joao Paulo Krajewski said to the Independent.&lt;/a&gt; &quot;When he sees him he wags his tail like a dog and honks with delight.&quot;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span class=&quot;youtube&quot;&gt;&lt;iframe src=&quot;https://www.youtube.com/embed/6McB0jhPWqs&quot; frameborder=&quot;no&quot; title=&quot;YouTube content&quot; allowfullscreen=&quot;&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Krajewski helped report the segment for TV Globo, and said that they caught Dindim on his fifth trip out to see Pereira de Souza.&lt;/p&gt;
&lt;p&gt;&quot;It's really impressive, the love the two of them have,&quot; &lt;a href=&quot;http://gshow.globo.com/Bastidores/noticia/2016/03/pinguim-curioso-se-apaixona-por-camera-nos-bastidores-do-domingao-do-faustao-assista.html&quot;&gt;Krajewski said in the segment on the TV Globo show.&lt;/a&gt;&lt;/p&gt;
&lt;div&gt;
&lt;div class=&quot;placeholder&quot;&gt;

&lt;span&gt;&lt;img alt=&quot;&quot; src=&quot;https://i.cbc.ca/1.3487778.1457728486!/fileImage/httpImage/image.PNG_gen/derivatives/original_780/patagonia.PNG&quot; class=&quot;loaded largeImage&quot;/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;span&gt;&lt;span class=&quot;leadimage-caption&quot;&gt;Magellanic penguins breed along the coast of Patagonia. (Wikimedia)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;It's technically illegal to have a wild animal as a pet in Brazil, as officials want to ensure vulnerable creatures don't get separated from their families and that they can be reintroduced into the wild after injury. &lt;/p&gt;
&lt;p&gt;The Independent also reported that there's been concern over how climate change could be forcing these penguins farther north into the warmer Brazilian waters. &lt;/p&gt;
&lt;p&gt;It's unlikely that Dindim is going all the way back to his home territory in Patagonia, since he spends the time he'd usually be breeding and moulting with Pereira de Souza, &lt;a href=&quot;https://www.facebook.com/joaopaulo.krajewski/posts/1008600529225514&quot;&gt;Krajewski said in a Facebook post.&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;He believes that Dindim now interprets Proveta as his home, and imprinted on the 71-year-old, whom Dindim sees as a partner. For reasons like these, most professionals try to avoid this circumstance.&lt;/p&gt;
&lt;p&gt;&quot;This isolated case in Brazil certainly allowed Dindim to live and was the best this humble and kind man could do for the penguin,&quot; &lt;a href=&quot;https://www.facebook.com/joaopaulo.krajewski/posts/1008600529225514&quot;&gt;he wrote&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&quot;I love the penguin like it's my own child,&quot; said Pereira de Souza to Globo TV. &quot;And I believe the penguin loves me.&quot;&lt;/p&gt;
</description>
<pubDate>Wed, 09 Jan 2019 16:12:09 +0000</pubDate>
<dc:creator>colinprince</dc:creator>
<og:url>https://www.cbc.ca/news/trending/dindim-o-lindo-pinguim-1.3487668</og:url>
<og:title>Long-distance love brings penguin to man who rescued him every year | CBC News</og:title>
<og:image>https://i.cbc.ca/1.3487755.1457727991!/fileImage/httpImage/image.PNG_gen/derivatives/16x9_620/joao-and-dindim.PNG</og:image>
<og:description>Ever since a 71-year-old Brazilian man rescued this penguin, he's regularly travelled to his beach visit the man.</og:description>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cbc.ca/news/trending/dindim-o-lindo-pinguim-1.3487668</dc:identifier>
</item>
<item>
<title>Show HN: Top PDFs Posted to Hacker News in 2018</title>
<link>https://getpolarized.io/2019/01/08/top-pdfs-of-2018-hackernews.html</link>
<guid isPermaLink="true" >https://getpolarized.io/2019/01/08/top-pdfs-of-2018-hackernews.html</guid>
<description>&lt;img class=&quot;img-fluid&quot; src=&quot;https://getpolarized.io/assets/images/openbook.png&quot;/&gt;&lt;p&gt;Hacker News is a GREAT source of tech news but one of the things I really like about it is when insanely smart people post actual PDFs they've found.&lt;/p&gt;
&lt;p&gt;In the past I've seen PDFs from text books, brilliant original research and even old trusted technical books from the 80s and 90s.&lt;/p&gt;
&lt;p&gt;So I figured it would be interesting to compute the top PDFs from 2018.&lt;/p&gt;
&lt;p&gt;At &lt;a href=&quot;http://www.datastreamer.io/&quot;&gt;Datastreamer&lt;/a&gt; (my company when not working on &lt;a href=&quot;https://getpolarized.io&quot;&gt;Polar&lt;/a&gt;) we have nearly a petabyte of web data to play with. We provide data indexing services for companies &lt;strong&gt;serious&lt;/strong&gt; indexing web data (think search engines).&lt;/p&gt;
&lt;p&gt;Turns out we have 12 copies of Hacker News for every day of 2018.&lt;/p&gt;
&lt;h2&gt;How it's calculated&lt;/h2&gt;
&lt;p&gt;So I threw some code together to quickly parse out the top links. I actually thought they would be helpful for users of Polar so I decided to share with class.&lt;/p&gt;
&lt;p&gt;This is computed by taking any link to a PDF file that was on the front page at least once in a 24 hour period.&lt;/p&gt;
&lt;h2&gt;The List!&lt;/h2&gt;
&lt;p&gt;Without further ado, here's the full list of the top PDFs from Hacker News in 2018.&lt;/p&gt;
&lt;p&gt;Also, if you need a tool to manage your PDFs which supports annotation and highlighting you should really take a look at &lt;a href=&quot;https://getpolarized.io&quot;&gt;Polar&lt;/a&gt;. It's Open Source, cross platform, and designed for people passionate about reading, education, and research.&lt;/p&gt;
















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































</description>
<pubDate>Wed, 09 Jan 2019 15:43:35 +0000</pubDate>
<dc:creator>burtonator</dc:creator>
<og:title>Over 500 Top PDFs posted to Hacker News in 2018</og:title>
<og:description>A powerful document manager for Mac, Windows, and Linux for managing web content, books, and notes and supports tagging, annotation, highlighting and keeps track of your reading progress.</og:description>
<og:url>https://getpolarized.io/2019/01/08/top-pdfs-of-2018-hackernews.html</og:url>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://getpolarized.io/2019/01/08/top-pdfs-of-2018-hackernews.html</dc:identifier>
</item>
<item>
<title>Despite promises, cell carriers are still selling your real-time location data</title>
<link>https://techcrunch.com/2019/01/09/us-cell-carriers-still-selling-your-location-data/</link>
<guid isPermaLink="true" >https://techcrunch.com/2019/01/09/us-cell-carriers-still-selling-your-location-data/</guid>
<description>&lt;p id=&quot;speakable-summary&quot;&gt;Last year, four of the largest U.S. cell carriers were caught selling and sending real-time location data of their customers to shady companies that sold it on to big spenders, who would use the data to track anyone “within seconds” for whatever reason they wanted.&lt;/p&gt;
&lt;p&gt;At first, little-known company &lt;a class=&quot;crunchbase-link&quot; href=&quot;https://crunchbase.com/organization/loc-aid&quot; target=&quot;_blank&quot; data-type=&quot;organization&quot; data-entity=&quot;loc-aid&quot;&gt;LocationSmart&lt;/a&gt; was obtaining (&lt;a href=&quot;https://techcrunch.com/2018/05/17/locationsmart-didnt-just-sell-mobile-phone-locations-it-leaked-them/&quot;&gt;and leaking&lt;/a&gt;) real-time location data from AT&amp;amp;T, Verizon, T-Mobile and Sprint and selling access through another company, 3Cinteractive, to Securus, a prison technology company, which tracked phone owners without asking for their permission. This game of telephone with people’s private information was discovered, and the cell carriers, &lt;a href=&quot;https://www.zdnet.com/article/us-cell-carriers-selling-access-to-real-time-location-data/&quot;&gt;facing heavy rebuke&lt;/a&gt; from Sen. Ron Wyden, a privacy-minded lawmaker, buckled under the public pressure and said they’d stop selling and sharing customers’ locations.&lt;/p&gt;
&lt;p&gt;And that would’ve been that — until it wasn’t.&lt;/p&gt;
&lt;p&gt;Now, &lt;a href=&quot;https://motherboard.vice.com/en_us/article/nepxbz/i-gave-a-bounty-hunter-300-dollars-located-phone-microbilt-zumigo-tmobile&quot;&gt;new reporting by Motherboard&lt;/a&gt; shows that while LocationSmart faced the brunt of the criticism, few focused on the other big player in the location-tracking business, Zumigo. A payment of $300 and a phone number was enough for a bounty hunter to &lt;a href=&quot;https://motherboard.vice.com/en_us/article/nepxbz/i-gave-a-bounty-hunter-300-dollars-located-phone-microbilt-zumigo-tmobile&quot;&gt;track down the participating reporter&lt;/a&gt; by obtaining his location using Zumigo’s location data, which was continuing to pay for access from most of the carriers.&lt;/p&gt;
&lt;p&gt;Worse, &lt;a class=&quot;crunchbase-link&quot; href=&quot;https://crunchbase.com/organization/zumigo&quot; target=&quot;_blank&quot; data-type=&quot;organization&quot; data-entity=&quot;zumigo&quot;&gt;Zumigo&lt;/a&gt; sold that data on — like LocationSmart did with Securus — to other companies, like Microbilt, a Georgia-based credit reporting company, which in turn sells that data on to other firms that want that data. In this case, it was a bail bond company, whose bounty hunter was paid by Motherboard to track down the reporter — with his permission.&lt;/p&gt;
&lt;p&gt;Everyone seemed to drop the ball. Microbilt said the bounty hunter shouldn’t have used the location data to track the Motherboard reporter. Zumigo said it didn’t mind location data ending up in the hands of the bounty hunter, but still cut Microbilt’s access.&lt;/p&gt;
&lt;p&gt;But nobody quite dropped the ball like the carriers, which said they would not to share location data again.&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;crunchbase-link&quot; href=&quot;https://crunchbase.com/organization/t-mobile&quot; target=&quot;_blank&quot; data-type=&quot;organization&quot; data-entity=&quot;t-mobile&quot;&gt;T-Mobile,&lt;/a&gt; at the center of the latest location-selling revelations for passing the reporter’s location to the bounty hunter, said last year in the midst of the Securus scandal that it “reviewed” its real-time location data sharing program and found appropriate controls in place. To appease even the skeptical, T-Mobile chief executive John Legere &lt;a href=&quot;https://twitter.com/JohnLegere/status/1009168217586061313&quot;&gt;tweeted at the time&lt;/a&gt; that he “personally evaluated the issue” and promised that the company “will not sell customer location data to shady middlemen.”&lt;/p&gt;
&lt;p&gt;It’s hard to see how that isn’t, in hindsight, a downright lie.&lt;/p&gt;
&lt;div class=&quot;embed breakout&quot; readability=&quot;7.2167182662539&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-width=&quot;550&quot; data-dnt=&quot;true&quot; readability=&quot;8.8204334365325&quot;&gt;
&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Sounds like word hasn’t gotten to you, &lt;a href=&quot;https://twitter.com/RonWyden?ref_src=twsrc%5Etfw&quot;&gt;@ronwyden&lt;/a&gt;. I’ve personally evaluated this issue &amp;amp; have pledged that &lt;a href=&quot;https://twitter.com/TMobile?ref_src=twsrc%5Etfw&quot;&gt;@tmobile&lt;/a&gt; will not sell customer location data to shady middlemen. Your consumer advocacy is admirable &amp;amp; we remain committed to consumer privacy. &lt;a href=&quot;https://t.co/UPx3Xjhwog&quot;&gt;https://t.co/UPx3Xjhwog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— &lt;a class=&quot;crunchbase-link&quot; href=&quot;https://crunchbase.com/person/john-legere&quot; target=&quot;_blank&quot; data-type=&quot;person&quot; data-entity=&quot;john-legere&quot;&gt;John Legere&lt;/a&gt; (@JohnLegere) &lt;a href=&quot;https://twitter.com/JohnLegere/status/1009168217586061313?ref_src=twsrc%5Etfw&quot;&gt;June 19, 2018&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;This time around, T-Mobile said it “does not have a direct relationship” with Microbilt but admitted one with Zumigo, which, given the story and the similarities to last year’s Securus scandal, could be considered one of many “shady middlemen” still obtaining location data from cell carriers.&lt;/p&gt;
&lt;p&gt;Legere later &lt;a href=&quot;https://twitter.com/JohnLegere/status/1082824623740248065&quot;&gt;said in a tweet&lt;/a&gt; late Wednesday that the company “is completely ending” its relationships with location aggregators in March, almost a year after the company was first implicated in the first location-sharing scandal.&lt;/p&gt;
&lt;p&gt;It wasn’t just T-Mobile. Other carriers were also still selling and sharing their customers’ data.&lt;/p&gt;
&lt;p&gt;AT&amp;amp;T said &lt;a href=&quot;https://www.wyden.senate.gov/imo/media/doc/at&amp;amp;t%20letter%20to%20RW%206.15.pdf&quot;&gt;in last year’s letter&lt;/a&gt; it would “protect customer data” and “shut down” Securus’ access to its real-time store of customer location data. Most saw that as a swift move to prevent third-parties accessing customer location data. Now, AT&amp;amp;T seemed to renege on that year-ago pledge, saying it will “only permit the sharing of location” in limited cases, including when required by law.&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;crunchbase-link&quot; href=&quot;https://crunchbase.com/organization/sprint-nextel&quot; target=&quot;_blank&quot; data-type=&quot;organization&quot; data-entity=&quot;sprint-nextel&quot;&gt;Sprint&lt;/a&gt; didn’t say what its relationship was with either Zumigo or Microbilt, but once again — like last year — cited &lt;a href=&quot;https://www.zdnet.com/article/us-cell-carriers-selling-access-to-real-time-location-data/&quot;&gt;its privacy policy&lt;/a&gt; as its catch-all to sell and share customer location data. Yet Sprint, like its fellow carriers AT&amp;amp;T and T-Mobile, which pledged to stop selling location data, clearly didn’t complete its “process of terminating its current contracts with data aggregators to whom we provide location data” as it promised in a letter a year ago.&lt;/p&gt;
&lt;p&gt;Verizon, the parent company of TechCrunch, wasn’t explicitly cleared from sharing location data with third-parties in Motherboard’s report — only that the bounty hunter refused to search for a Verizon number. (We’ve asked Verizon if it wants to clarify its position — so far, we’ve had nothing back.)&lt;/p&gt;
&lt;p&gt;In &lt;a href=&quot;https://www.wyden.senate.gov/imo/media/doc/Verizon%20Response%20to%20Sen%20Wyden%2006_15_18.pdf&quot;&gt;a letter sent last year&lt;/a&gt; when the Securus scandal blew up, Verizon said it would “take steps to stop” sharing data with two firms — Zumigo and LocationSmart, an intermediary that passed on obtained location data to Securus. But that doesn’t mean it’s off the hook. It was still sharing location data with anyone who wanted to pay in the first place, putting its customers at risk from hackers, stalkers — or worse.&lt;/p&gt;
&lt;p&gt;Wyden. who tweeted about the story, said carriers selling customer location data “is a nightmare for national security and the personal safety of anyone with a phone.” And yet there’s no way to opt out — shy of a legislative fix — given that two-thirds of the U.S. population aren’t going to switch to a carrier that doesn’t sell your location data.&lt;/p&gt;
&lt;p&gt;It turns out, you really can’t trust your cell carrier. Who knew?&lt;/p&gt;

</description>
<pubDate>Wed, 09 Jan 2019 15:32:13 +0000</pubDate>
<dc:creator>jbegley</dc:creator>
<og:title>Despite promises to stop, US cell carriers are still selling your real-time phone location data</og:title>
<og:description>Last year, four of the largest U.S. cell carriers were caught selling and sending real-time location data of their customers to shady companies that sold it on to big spenders, who would use the data to track anyone “within seconds” for whatever reason they wanted. At first, little-know…</og:description>
<og:image>https://techcrunch.com/wp-content/uploads/2019/01/tracking-phones.gif?w=622</og:image>
<og:url>http://social.techcrunch.com/2019/01/09/us-cell-carriers-still-selling-your-location-data/</og:url>
<og:type>article</og:type>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://techcrunch.com/2019/01/09/us-cell-carriers-still-selling-your-location-data/</dc:identifier>
</item>
<item>
<title>The State of Software Security in 2019</title>
<link>https://noncombatant.org/2019/01/06/state-of-security-2019/</link>
<guid isPermaLink="true" >https://noncombatant.org/2019/01/06/state-of-security-2019/</guid>
<description>&lt;nav&gt;&lt;a href=&quot;https://noncombatant.org/&quot;&gt;Noncombatant&lt;/a&gt; 😚 &lt;a href=&quot;https://noncombatant.org/about/&quot;&gt;About&lt;/a&gt; 🤓 &lt;a href=&quot;https://noncombatant.org/publications/&quot;&gt;Other Writing&lt;/a&gt; 🧐 &lt;a href=&quot;https://instagram.com/fugueish&quot;&gt;Instagram&lt;/a&gt; 📸 &lt;a href=&quot;https://noncombatant.bandcamp.com/&quot;&gt;Bandcamp&lt;/a&gt; 🎵&lt;/nav&gt;
&lt;p&gt;&lt;strong&gt;...And What To Do About It&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;time&gt;6 Jan 2019&lt;/time&gt;&lt;/p&gt;

&lt;p&gt;My goal in this post is to skim my observations on the state of software design and development over the past year, and to try to find a meaningful way forward for myself for 2019. My perspective is limited by the fact that I have worked exclusively in client-side software security for the past 7.5 years. Still, I think there are broad trends visible even to me, and some clear signs about where we need to go as an industry.&lt;/p&gt;
&lt;p&gt;I hope that this post is useful to a variety of security people: not just engineers, but also UX designers and researchers, project/product/program managers, people and business managers, and operations. In any case, all paths to success require the help of all those kinds of people. This post is even more of a link-fest than usual; I hope that’s useful.&lt;/p&gt;
&lt;p&gt;The high-order bit in much of the below is complexity. Hardware, software, platforms, and ecosystems are often way too complex, and a whole lot of our security, privacy, and abuse problems stem from that.&lt;/p&gt;
&lt;h2&gt;The Good&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/__apf__/status/1072199572628299776&quot;&gt;Encrypting the web is going swimmingly&lt;/a&gt;! Also, &lt;a href=&quot;https://blog.chromium.org/2018/05/evolving-chromes-security-indicators.html&quot;&gt;marking non-secure web origins as non-secure, and marking secure origins as neutral&lt;/a&gt;, is moving right along. It’s amazing and wonderful that we’ve improved so much so quickly, and it gives me hope for other huge efforts (see below). Thanks as always to &lt;a href=&quot;https://letsencrypt.org/donate/&quot;&gt;Let’s Encrypt&lt;/a&gt;, and to the other browsers who are moving in a similar direction!&lt;/p&gt;
&lt;p&gt;Although &lt;a href=&quot;https://en.wikipedia.org/wiki/Memory_corruption&quot;&gt;memory corruption&lt;/a&gt; vulnerabilities remain prevalent, iOS, Chrome OS, and Chrome are existence proofs that, with good effort in design (privilege reduction) and unreasonably high effort in implementation (actually making privilege reduction work, &lt;a href=&quot;https://github.com/google/oss-fuzz/blob/master/docs/clusterfuzz.md&quot;&gt;bug hunting&lt;/a&gt;, bug fixing, and rapid deployment of bug fixes), it is &lt;strong&gt;just barely&lt;/strong&gt; possible to significantly raise the cost of exploiting memory corruption vulnerabilities for projects implemented in unsafe languages. Against modern targets, exploiting memory corruption is nowhere near as easy as it was in the 1990s or the 2000s.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://9to5mac.com/2018/01/19/ios-11-adoption-65-percent/&quot;&gt;iOS continues to have excellent update adoption&lt;/a&gt; (&lt;a href=&quot;https://david-smith.org/iosversionstats/&quot;&gt;see also&lt;/a&gt;), even though it’s voluntary — a sign that people perceive the value of the updates. It’s unlikely people are making their choice on the basis of security per se, of course. But &lt;a href=&quot;https://twitter.com/mattblaze/status/1081384425416470528&quot;&gt;security and privacy are key parts of iOS’ value proposition&lt;/a&gt;, and I do think at least some customers perceive them.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.github.com/2018-11-15-state-of-the-octoverse-top-programming-languages/&quot;&gt;Memory-safe programming languages dominate the landscape&lt;/a&gt;. Additionally, the fastest-growing languages are memory-safe. Some popular languages are even type-safe. (Some might consider type safety a mere bonus, but to me, &lt;a href=&quot;http://lucacardelli.name/Papers/TypefulProg.pdf&quot;&gt;typefulness&lt;/a&gt; is a crucial building block for reliable and safe software.) There is even good news in systems software, previously the unchallenged and most undeserved domain of unsafety: Go is big there, and Rust is boopin’ right along (see e.g. &lt;a href=&quot;https://servo.org/&quot;&gt;Servo&lt;/a&gt;, &lt;a href=&quot;https://chromium.googlesource.com/chromiumos/platform/crosvm/&quot;&gt;CrOS VM&lt;/a&gt;, &lt;a href=&quot;https://github.com/xi-editor/xi-editor&quot;&gt;the Xi editor&lt;/a&gt;, &lt;a href=&quot;https://fuchsia.googlesource.com/docs/+/d4f9b980f18fc6722b06abb693240b29abbbc9fc/rust_quickstart.md&quot;&gt;parts of Fuchsia&lt;/a&gt;). Although we mourn &lt;a href=&quot;https://en.wikipedia.org/wiki/Midori_(operating_system)&quot;&gt;Midori&lt;/a&gt;, it can still teach us &lt;a href=&quot;http://joeduffyblog.com/2015/11/03/blogging-about-midori/&quot;&gt;broadly applicable, deep lessons&lt;/a&gt;. (See especially &lt;a href=&quot;http://joeduffyblog.com/2015/11/03/a-tale-of-three-safeties/&quot;&gt;A Tale Of Three Safeties&lt;/a&gt; and &lt;a href=&quot;http://joeduffyblog.com/2016/02/07/the-error-model/&quot;&gt;The Error Model&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;Memory tagging, a new (and &lt;a href=&quot;https://en.wikipedia.org/wiki/Tagged_architecture&quot;&gt;old&lt;/a&gt;) feature of hardware can help with memory safety problems. &lt;a href=&quot;https://llvm.org/devmtg/2018-10/slides/Serebryany-Stepanov-Tsyrklevich-Memory-Tagging-Slides-LLVM-2018.pdf&quot;&gt;People are working on making it happen on modern systems&lt;/a&gt; (&lt;a href=&quot;https://arxiv.org/pdf/1802.09517.pdf&quot;&gt;paper&lt;/a&gt;). I don’t think it’s a replacement for fixing bugs in as systemic a way as possible (ideally, in the source language), but it has great potential to increase safety.&lt;/p&gt;
&lt;p&gt;Static checkers — compilers — and dynamic checkers (e.g. &lt;a href=&quot;https://clang.llvm.org/docs/AddressSanitizer.html&quot;&gt;Address Sanitizer&lt;/a&gt; and the rest of the LLVM sanitizers) have advanced very far in the past 20 years. What was once bleeding-edge research now comes for free with off-the-shelf compilers. This is fantastic! (Start with &lt;code&gt;-Wall -Werror&lt;/code&gt; in Clang or GCC, but I like to use &lt;code&gt;-Weverything -Werror&lt;/code&gt;, with a few exceptions like &lt;code&gt;-Wno-padded&lt;/code&gt;. Really.)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.chromium.org/2018/10/trustworthy-chrome-extensions-by-default.html&quot;&gt;Chrome is making some structural improvements to the extensions platform&lt;/a&gt;, which should reduce &lt;a href=&quot;https://www.wired.com/story/chrome-extension-malware/&quot;&gt;some of the worst abuses we see in that ecosystem&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Parts of the software industry are having &lt;a href=&quot;https://www.amazon.com/World-Technology-Massey-Lectures-Revised/dp/088784636X&quot;&gt;an ethical and moral awakening&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;You don’t have to agree with all those positions to find it good news that our generation of engineers is growing beyond the “I could build it, so I did; what are consequences?” mentality. &lt;a href=&quot;https://en.wikipedia.org/wiki/Computer_Professionals_for_Social_Responsibility&quot;&gt;Previous generations had to make very similar choices&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;(I do happen to agree with all those positions, and I will not work on machines designed for war or police, nor on Big Brotherly, censored search engines. And I support the efforts for equality and fair treatment for everyone. The Walkout was a good day, but it was just a beginning. There’s a long way to go.)&lt;/p&gt;
&lt;p&gt;The increasing awareness and adoption of &lt;a href=&quot;https://en.wikipedia.org/wiki/Universal_2nd_Factor&quot;&gt;Universal 2nd Factor authentication&lt;/a&gt; is great news. (U2F has been standardized as &lt;a href=&quot;https://www.w3.org/TR/webauthn/&quot;&gt;WebAuthn&lt;/a&gt;, which is considerably more complex than most security people would like. Expect bugs to come of that...) The high degree of phishing resistance it offers is at least as important as the protections HTTPS provides. Phishing and account take-over have consistently been 1 of our biggest problems, and WebAuthn can put a big dent in them. You can use it now with Google, Facebook, Twitter, Dropbox, login.gov, and others.&lt;/p&gt;
&lt;h2&gt;The Bad&lt;/h2&gt;
&lt;p&gt;C++ continues to be untenably complex and wildly unsafe:&lt;/p&gt;
&lt;p&gt;I can’t possibly select and link to a list of the infinite bug reports whose root causes are memory unsafety. A fun exercise is to skim through a good source of vulnerability write-ups (&lt;a href=&quot;https://googleprojectzero.blogspot.com/&quot;&gt;the Project Zero blog&lt;/a&gt; is one of my favorites), and count how many of the bugs are even in the application domain at all.&lt;/p&gt;
&lt;p&gt;(Of course, if you find that there are more memory safety bugs than application-domain bugs or other bugs, that could just as well be due to the researchers’ biases. But I think we can all agree that memory corruption bugs simply should not exist at all, yet are numerous and often exploitable.)&lt;/p&gt;
&lt;p&gt;Designing a language that achieves all of memory safety, high performance, and good usability remains very hard. The Rust compiler notices and rejects safety bugs that C and C++ compilers don’t notice/can’t notice/purposefully accept. 🤪🔨 That is to Rust’s credit, but &lt;a href=&quot;https://rcoh.me/posts/rust-linked-list-basically-impossible/&quot;&gt;this discipline can be extremely difficult to learn&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Among the programming language research community’s goals is proving programs safe. Gradually and increasingly, that work trickles down into real languages that people can really use to ship real software. &lt;a href=&quot;https://www.imperialviolet.org/2014/09/07/provers.html&quot;&gt;The difficulty of using academic tools&lt;/a&gt; is partly a natural consequence of their small audience, but some of the difficulty is unavoidable: proof of safety means &lt;strong&gt;proof&lt;/strong&gt;, that difficult thing that people get PhDs for. Ultimately, the software engineering community is going to have to commit to meeting this standard, gradually and increasingly.&lt;/p&gt;
&lt;p&gt;Obviously, 2018 was the year everyone became aware of &lt;a href=&quot;https://meltdownattack.com/&quot;&gt;Spectre &amp;amp; Meltdown&lt;/a&gt;, &lt;a href=&quot;https://foreshadowattack.eu/&quot;&gt;Foreshadow&lt;/a&gt;, &lt;a href=&quot;https://www.intel.com/content/www/us/en/architecture-and-technology/l1tf.html&quot;&gt;L1TF&lt;/a&gt;, and the idea of micro-architectural &lt;a href=&quot;https://pdfs.semanticscholar.org/2209/42809262c17b6631c0f6536c91aaf7756857.pdf&quot;&gt;side-channels generally&lt;/a&gt;. Shared resources abound, unfortunately. Of course, other show-stopper security problems (typically due to &lt;a href=&quot;https://people.kth.se/~maguire/DEGREE-PROJECT-REPORTS/100402-Vassilios_Ververis-with-cover.pdf&quot;&gt;monstrous complexity&lt;/a&gt;) have been known for a long time (&lt;a href=&quot;https://www.ssi.gouv.fr/archive/fr/sciences/fichiers/lti/cansecwest2006-duflot.pdf&quot;&gt;see also&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/System_Management_Mode#Problems&quot;&gt;see also&lt;/a&gt;). Although those links refer mostly to Intel Architecture systems, there’s no reason to think that (e.g.) ARM is inherently safer. In particular, the micro-architectural side-channel problems are the natural result of designing for maximum performance — which almost every chip designer is trying to do, because that’s what almost every customer wants.&lt;/p&gt;
&lt;h2&gt;The Ugly&lt;/h2&gt;
&lt;p&gt;Abuse (the malicious use of legitimate functionality) affects more people’s lives in more ways than does the exploitation of bugs. Although hacking can have a surprising influence, such as in the form of political fallout or mass data breaches, the reasons your friends and family are sad are much more prosaic — and harder to solve:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.theguardian.com/technology/2018/nov/05/energy-cost-of-mining-bitcoin-more-than-twice-that-of-copper-or-gold&quot;&gt;Proof-of-work continues not to work&lt;/a&gt; 😵, &lt;a href=&quot;https://www.cl.cam.ac.uk/~rnc1/proofwork.pdf&quot;&gt;as foretold by prophecy&lt;/a&gt; 😑. The coming decades are going to bring increasing climate, uh, ‘challenges’, and all computing systems are going to have to prove their worth relative to the sum of &lt;strong&gt;all&lt;/strong&gt; their costs — including carbon and e-waste. We won’t be able to laugh those off as externalities any longer. Proof-of-work systems will continue to be unable to show sufficient value for the cost, and may even be the wedge for regulation (if they don’t starve themselves or crash first).&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://infrequently.org/2018/09/the-developer-experience-bait-and-switch/&quot;&gt;The web performance crisis&lt;/a&gt; (see also &lt;a href=&quot;https://idlewords.com/talks/website_obesity.htm&quot;&gt;a hotter take&lt;/a&gt; 🥵) is a similar situation: hugely wasteful, but not (yet...?) self-limiting. In the past I’ve had to argue that &lt;a href=&quot;https://conferences.oreilly.com/web2expo/webexsf2009/public/schedule/speaker/1016&quot;&gt;security is affordable&lt;/a&gt; even given performance constraints. It was possible to get both performance and security then, by reducing obvious bloat and enabling less-obvious optimizations, and it’s possible now. The root cause then was the same as it is now: too many developers don’t use the same client systems as their userbase does, and they don’t know what network, memory, and CPU costs they are incurring. Previously, those costs were hard to see. Now, they are definitely not: every browser has a very good Dev Tools console, and there is no excuse for not using it.&lt;/p&gt;
&lt;p&gt;Dependency slurping systems like NPM, CPAN, &lt;code&gt;go get&lt;/code&gt;, and so on continue to freak me out. They might potentially be more dangerous than manual dependency management, despite the huge risks of that practice, precisely because they make it ‘easy’ to grow your project’s dependency graph — and hence the number of individuals and organizations that you implicitly trust. (And &lt;a href=&quot;https://www.theregister.co.uk/2018/11/26/npm_repo_bitcoin_stealer/&quot;&gt;their trustworthiness can suddenly change for the worse&lt;/a&gt;.) When there are significant gaps in a language’s standard library, third-party developers will eagerly fill those gaps with new dependencies for you to (not always knowingly) inherit. There is &lt;a href=&quot;https://github.com/tc39/proposal-javascript-standard-library/issues/19&quot;&gt;an effort underway to fill gaps in JavaScript’s standard library&lt;/a&gt;, which I strongly support for this reason.&lt;/p&gt;
&lt;p&gt;Social media continues to amplify the worst in people, and &lt;a href=&quot;https://www.nytimes.com/2018/11/29/technology/george-soros-facebook-sheryl-sandberg.html&quot;&gt;some executives of social media companies continue to be part of the problem&lt;/a&gt;. Dealing with the toxicity and abuse of social media is a long-term, multi-pronged effort, but 1 thing that we can immediately do as engineers, PMs, designers, and managers is to push back on ‘engagement’ as the primary or only metric for ‘success’. It’s game-able and heavily gamed, and does not remotely capture the real experiences of real people on social media. People’s experiences are often &lt;a href=&quot;http://seriouspony.com/trouble-at-the-koolaid-point/&quot;&gt;profoundly awful&lt;/a&gt;, and we as software developers are responsible for dealing with the consequences of what we’ve built. Are we empowering people to learn and grow, or are we amplifying the fuckery of Nazis and Chekists? Clinging to &lt;a href=&quot;https://www.eff.org/deeplinks/2018/04/platform-censorship-wont-fix-internet&quot;&gt;a simplistic view of free speech&lt;/a&gt; is not going to get us out of having to answer that question.&lt;/p&gt;
&lt;h2&gt;The Future&lt;/h2&gt;
&lt;p&gt;Unfortunately for me, I want to work on all of these problems. I had a good fun time in 2018 working on defense at a low-level (&lt;a href=&quot;https://noncombatant.org/2018/07/19/application-principals/&quot;&gt;just one of many adventures&lt;/a&gt;), and there’s still plenty of work to be done there. (There’s lots of ambient privilege still crying out to be reduced!) It has been rewarding to play my small part in helping get HTTPS where it needs to be.&lt;/p&gt;
&lt;p&gt;And unfortunately, the problems that I find the most vexing — the abuse category generally — are not in my area of greatest expertise. My heart is really in the language problem: meaningful interfaces, ergonomic and safe libraries, memory safety, and type safety. But it’s the abuse that makes my heart sick.&lt;/p&gt;
&lt;p&gt;Still, I see people really shipping software improvements that seemed impossible 20 or 10 or 5 years ago. We really are making progress. Here’s what I want to see in 2019:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Throwing away the idea of using ‘engagement’ as the sole or primary metric.&lt;/li&gt;
&lt;li&gt;Socializing policy thinking in the engineering community. It’s time to put on our grown-up clothes. The stuff we do matters (otherwise we wouldn’t do it, right?), and that means we need to think about and deal with the consequences.&lt;/li&gt;
&lt;li&gt;Affordances to improve web performance across the board: a larger JavaScript standard library; performance improvements in frameworks; improvements in tooling; client-side interventions and budgets.&lt;/li&gt;
&lt;li&gt;Eroding the idea that memory-unsafety is acceptable, and shipping more software in safe languages that would previously have been written in an unsafe language. This includes not so much straight-up rewrites of existing applications (&lt;a href=&quot;https://www.joelonsoftware.com/2000/04/06/things-you-should-never-do-part-i/&quot;&gt;which Joel says is bad&lt;/a&gt;); mostly, I see piecemeal, in-place rewrites of components (like Servo), and also new applications in well-established categories (like Xi and CrosVM). New applications also give us a chance to re-think old designs, as Xi notably does (with its cross-platform, client/server, multiple-front-end design).&lt;/li&gt;
&lt;li&gt;Socializing the value of simplicity, and throwing away complexity, at all levels: UX, languages, libraries, frameworks. In particular, nobody should start a new project in C++.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Smart people are already hard at work on all these things! We can get the industry closer to where it needs to be, and serve people better. Tomorrow is Monday...&lt;/p&gt;
&lt;p&gt;Thanks to Alex Gaynor, Emily Schechter, Emily Stark, Eric Mill, Kate Conger, Stephan Somogyi, and Tom Ptacek for feedback and encouragement. Errors, omissions, and confusions are still mine, of course. You might also like &lt;a href=&quot;https://alexgaynor.net/2019/jan/06/security-wish-list-2019/&quot;&gt;Alex’ security wishlist for 2019&lt;/a&gt;.&lt;/p&gt;
&lt;hr/&gt;&lt;footer readability=&quot;3.3846153846154&quot;&gt;&lt;p&gt;No comments, &lt;a href=&quot;mailto:chris@noncombatant.org&quot;&gt;but you can email me&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Noncombatant.org by &lt;a xmlns:cc=&quot;http://creativecommons.org/ns#&quot; href=&quot;https://noncombatant.org/about/&quot; property=&quot;cc:attributionName&quot; rel=&quot;cc:attributionURL&quot;&gt;Chris Palmer&lt;/a&gt; is in the Creative Commons, under the terms of the &lt;a rel=&quot;license&quot; href=&quot;https://creativecommons.org/licenses/by-nc-sa/4.0/&quot;&gt;Attribution-NonCommercial-ShareAlike 4.0 International License&lt;/a&gt;.&lt;/p&gt;
&lt;/footer&gt;</description>
<pubDate>Wed, 09 Jan 2019 15:30:37 +0000</pubDate>
<dc:creator>zdw</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://noncombatant.org/2019/01/06/state-of-security-2019/</dc:identifier>
</item>
<item>
<title>Hexyl: A command-line hex viewer</title>
<link>https://github.com/sharkdp/hexyl</link>
<guid isPermaLink="true" >https://github.com/sharkdp/hexyl</guid>
<description>&lt;div class=&quot;Box-body p-6&quot;&gt;
&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://github.com/sharkdp/hexyl/blob/master/doc/logo.svg&quot;&gt;&lt;img src=&quot;https://github.com/sharkdp/hexyl/raw/master/doc/logo.svg?sanitize=true&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/sharkdp/hexyl&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/15ebe68cfcc462be420007ac1099cb638c67bac7/68747470733a2f2f7472617669732d63692e6f72672f736861726b64702f686578796c2e7376673f6272616e63683d6d6173746572&quot; alt=&quot;Build Status&quot; data-canonical-src=&quot;https://travis-ci.org/sharkdp/hexyl.svg?branch=master&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://crates.io/crates/hexyl&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/aae3d9d91d2e9e5bc5bbea26f22d43564ee6a3d1/68747470733a2f2f696d672e736869656c64732e696f2f6372617465732f6c2f686578796c2e7376673f636f6c6f72423d323262613463&quot; alt=&quot;&quot; data-canonical-src=&quot;https://img.shields.io/crates/l/hexyl.svg?colorB=22ba4c&quot;/&gt;&lt;/a&gt; &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/fae17fbf39554becbfa73e6dce79207d0338052b/68747470733a2f2f696d672e736869656c64732e696f2f6372617465732f762f686578796c2e7376673f636f6c6f72423d303061613838&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/fae17fbf39554becbfa73e6dce79207d0338052b/68747470733a2f2f696d672e736869656c64732e696f2f6372617465732f762f686578796c2e7376673f636f6c6f72423d303061613838&quot; alt=&quot;&quot; data-canonical-src=&quot;https://img.shields.io/crates/v/hexyl.svg?colorB=00aa88&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;hexyl&lt;/code&gt; is a simple hex viewer for the terminal. It uses a colored output to distinguish different categories of bytes (NULL bytes, printable ASCII characters, ASCII whitespace characters, other ASCII characters and non-ASCII).&lt;/p&gt;
&lt;h2&gt;Preview&lt;/h2&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/1f71ee7031e1962b23f21c8cc89cb837e1201238/68747470733a2f2f692e696d6775722e636f6d2f4d574f3975534c2e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/1f71ee7031e1962b23f21c8cc89cb837e1201238/68747470733a2f2f692e696d6775722e636f6d2f4d574f3975534c2e706e67&quot; alt=&quot;&quot; data-canonical-src=&quot;https://i.imgur.com/MWO9uSL.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/2c7114d1b3159fc91e6c1e289e23b79d1186c6d5/68747470733a2f2f692e696d6775722e636f6d2f447037576e637a2e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/2c7114d1b3159fc91e6c1e289e23b79d1186c6d5/68747470733a2f2f692e696d6775722e636f6d2f447037576e637a2e706e67&quot; alt=&quot;&quot; data-canonical-src=&quot;https://i.imgur.com/Dp7Wncz.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/20e20737ad5a2c7d068fb37f218471974fefe84f/68747470733a2f2f692e696d6775722e636f6d2f6c6e33546e69492e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/20e20737ad5a2c7d068fb37f218471974fefe84f/68747470733a2f2f692e696d6775722e636f6d2f6c6e33546e69492e706e67&quot; alt=&quot;&quot; data-canonical-src=&quot;https://i.imgur.com/ln3TniI.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/a348b36e6e0a6fa9eb2e09429729f2d842602850/68747470733a2f2f692e696d6775722e636f6d2f66386e6d3867362e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/a348b36e6e0a6fa9eb2e09429729f2d842602850/68747470733a2f2f692e696d6775722e636f6d2f66386e6d3867362e706e67&quot; alt=&quot;&quot; data-canonical-src=&quot;https://i.imgur.com/f8nm8g6.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;h3&gt;On Debian-based systems&lt;/h3&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
wget &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;https://github.com/sharkdp/hexyl/releases/download/v0.3.1/hexyl_0.3.1_amd64.deb&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
sudo dpkg -i hexyl_0.3.1_amd64.deb
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;On Arch Linux&lt;/h3&gt;
&lt;p&gt;You can install &lt;code&gt;hexyl&lt;/code&gt; from &lt;a href=&quot;https://aur.archlinux.org/packages/hexyl/&quot; rel=&quot;nofollow&quot;&gt;this AUR package&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;yay -S hexyl
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;On macOS&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;brew install hexyl
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;On FreeBSD&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;pkg install hexyl
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;On other distributions&lt;/h3&gt;
&lt;p&gt;Check out the &lt;a href=&quot;https://github.com/sharkdp/hexyl/releases&quot;&gt;release page&lt;/a&gt; for binary builds.&lt;/p&gt;
&lt;h3&gt;On Windows&lt;/h3&gt;
&lt;p&gt;For now, you will have to install from source via &lt;code&gt;cargo&lt;/code&gt; (see below). Make sure that you use a terminal that supports ANSI escape sequences (like PowerShell on Windows 10).&lt;/p&gt;
&lt;h3&gt;Via cargo&lt;/h3&gt;
&lt;p&gt;If you have Rust 1.29 or higher, you can install &lt;code&gt;hexyl&lt;/code&gt; from source via &lt;code&gt;cargo&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;cargo install hexyl
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;License&lt;/h2&gt;
&lt;p&gt;Licensed under either of&lt;/p&gt;
&lt;p&gt;at your option.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;
</description>
<pubDate>Wed, 09 Jan 2019 15:15:16 +0000</pubDate>
<dc:creator>okanesen</dc:creator>
<og:image>https://avatars2.githubusercontent.com/u/4209276?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>sharkdp/hexyl</og:title>
<og:url>https://github.com/sharkdp/hexyl</og:url>
<og:description>A command-line hex viewer. Contribute to sharkdp/hexyl development by creating an account on GitHub.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/sharkdp/hexyl</dc:identifier>
</item>
<item>
<title>The Painful Price of Becoming Jackie Chan</title>
<link>https://newrepublic.com/article/152848/painful-price-becoming-jackie-chan</link>
<guid isPermaLink="true" >https://newrepublic.com/article/152848/painful-price-becoming-jackie-chan</guid>
<description>&lt;div class=&quot;sidebar-and-content-body&quot; data-reactid=&quot;.1dw9t1dhery.2.1.0.0.$0.1.0&quot;&gt;

&lt;div class=&quot;content-body&quot; data-reactid=&quot;.1dw9t1dhery.2.1.0.0.$0.1.0.1&quot;&gt;
&lt;div class=&quot;article-text-wrap&quot;&gt;
&lt;div class=&quot;article-text-grid&quot;&gt;
&lt;p&gt;&lt;span&gt;There are many ways to tell the story of Jackie Chan. He is the heir to Charlie Chaplin and Buster Keaton, the comic grace of his movements leaving audiences in laughing wonder. He’s also the heir to Bruce Lee: If Lee broke old stereotypes about the Asian man being frail and craven, then Chan reinvented him once more, offering across dozens of movies a consistent character who was almost childlike in his cheerfulness, known as much for his winking smile as for the fury of his fists. Before 1995’s&lt;/span&gt; &lt;em&gt;Rumble in the Bronx&lt;/em&gt; &lt;span&gt;made him a household name in America, he was a filmmaker’s filmmaker, his elaborate fight sequences and death-enticing stunts the objects of devoted study by Steven Spielberg and James Cameron. And he helped bring martial arts into the Hollywood mainstream, so that nearly every American action hero, from Jason Bourne to the Black Panther, now boasts elements of karate or jujitsu in their repertoire of ass-kicking skills. The transfer was symbolically completed in 1999’s&lt;/span&gt; &lt;em&gt;The Matrix&lt;/em&gt;&lt;span&gt;, when Keanu Reeves, having downloaded a fighting program to his brain, opens his eyes and reverently whispers, “I know kung fu.”&lt;/span&gt;&lt;/p&gt;
&lt;aside id=&quot;recirc-0&quot; class=&quot;recirc-most-popular pull-right pull-small hide&quot;/&gt;&lt;p&gt;These aspects of the Chan legend are all present in his new memoir, &lt;em&gt;Never Grow Up&lt;/em&gt;, as the threads of an unlikely rags-to-riches story. The child of a cook and a maid—a “servant’s kid,” as he was derisively called—he rose from virtually nothing to become the most famous Chinese entertainer on earth. In the book’s introduction, his world-straddling triumph is represented by the lifetime achievement Oscar that he received in 2016, the only time it has ever been bestowed on a Chinese filmmaker. (The book’s jacket features him holding the golden statue with his eyes closed, as if he is saying a prayer to it.) And like all rags-to-riches stories—whether it’s Daddy Warbucks rescuing little orphan Annie, or an Indian slumdog becoming a millionaire—Chan’s is ultimately a tale about the place where he was born and raised and first made his mark: Hong Kong, which over the course of his lifetime went from being the last significant outpost of the British Empire to an ambiguous outlier of an ascendant China.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Never Grow Up&lt;/em&gt;, in mostly inadvertent ways, thus offers another way of telling Jackie Chan’s story. It’s about colonialism, capitalism, and the myths we construct to justify living under both.&lt;/p&gt;
&lt;hr class=&quot;section-break&quot;/&gt;&lt;p&gt;When Chan was born in 1954, Hong Kong was fast becoming a haven for Chinese escaping communist rule on the mainland. This tiny city-state, some 400 square miles in total, had historically served as a foothold for European merchants seeking to gain access to the Chinese market, as the historian Jan Morris recounts in her book &lt;em&gt;Hong Kong&lt;/em&gt;. After Mao and his gang took over in 1949, however, Western trade with China was shut off and Hong Kong became its own focal point, a center for both finance and industry, ultimately transforming into a mighty symbol of capitalism’s wealth-creating power on the very doorstep of the world’s most populous communist nation. As China suffered through famine and political upheaval and one miserable five-year-plan after another, Hong Kong sprouted an endless number of skyscrapers, which seemed to cast long, mocking shadows over its massive neighbor.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;article-text-wrap&quot;&gt;
&lt;div class=&quot;article-text-grid&quot;&gt;&lt;img src=&quot;https://images.newrepublic.com/b9ed3473369d173ea1185cdd75987f189f315ba0.jpeg?w=596&quot; data-serialized=&quot;{&amp;quot;id&amp;quot;:&amp;quot;d3df6cde-c85f-4136-8dde-b855e1b50ad1&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;b9ed3473369d173ea1185cdd75987f189f315ba0&amp;quot;,&amp;quot;width&amp;quot;:596,&amp;quot;height&amp;quot;:900,&amp;quot;format&amp;quot;:&amp;quot;JPEG&amp;quot;,&amp;quot;isAnimated&amp;quot;:false,&amp;quot;baseUrl&amp;quot;:&amp;quot;//images.newrepublic.com/&amp;quot;,&amp;quot;src&amp;quot;:&amp;quot;//images.newrepublic.com/b9ed3473369d173ea1185cdd75987f189f315ba0.jpeg&amp;quot;,&amp;quot;meta&amp;quot;:{}}&quot; width=&quot;596&quot;/&gt;&lt;span class=&quot;caption-text&quot;&gt;NEVER GROW UP by Jackie Chan (with Zhu Mo)&lt;/span&gt;&lt;span class=&quot;credit&quot;&gt;Gallery Books, 352 pp., $26.00&lt;/span&gt;
&lt;p&gt;Chan’s parents, fleeing political persecution and seeking work, were among the emigrant laborers who formed the backbone of the Hong Kong economy in the immediate postwar decades. The Chans landed in Victoria Peak, a posh neighborhood high in the hills that is home to the wealthy and foreign diplomats. (It is now best known as a tourist site where one can take in Hong Kong’s famous topography from above, a bristling bowl of concrete and glass poised on the edge of the harbor.) Hong Kong was so important to the Chans that it was embedded in the name they gave their only son: Chan Kong-Sang, which means “born in Hong Kong.”&lt;/p&gt;
&lt;p&gt;The British operated with a light touch in Hong Kong, at least compared to a place like New Delhi, which both administratively and culturally bore the deep imprint of empire. But Chan was nevertheless familiar with the racial dynamics of colonialism. His parents worked at the French consulate, “except we didn’t have a magnificent house that faced the street,” he writes. “Our home was run-down, small, and stuck in the back. The folks at the consulate treated us well, but from the very beginning, we existed in two different worlds.” He became enamored with a girl named Sophie, the “very beautiful” daughter of the French consul, and would stand up to boys who teased her, at one point thrashing the child of a French official. Chan’s father, terrified that he might lose his job, beat the young Chan with a belt, locked him in a shed for hours, then forced him to apologize to the boy and his family.&lt;/p&gt;

&lt;img src=&quot;https://images.newrepublic.com/cd99c6dadecc661a94724a7c152c511034ee81d3.jpeg?w=800&quot; data-serialized=&quot;{&amp;quot;id&amp;quot;:&amp;quot;26dadffe-33af-4c7e-94e8-981c55747b5f&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;cd99c6dadecc661a94724a7c152c511034ee81d3&amp;quot;,&amp;quot;width&amp;quot;:1800,&amp;quot;height&amp;quot;:1033,&amp;quot;format&amp;quot;:&amp;quot;JPEG&amp;quot;,&amp;quot;isAnimated&amp;quot;:false,&amp;quot;baseUrl&amp;quot;:&amp;quot;//images.newrepublic.com/&amp;quot;,&amp;quot;src&amp;quot;:&amp;quot;//images.newrepublic.com/cd99c6dadecc661a94724a7c152c511034ee81d3.jpeg&amp;quot;,&amp;quot;meta&amp;quot;:{}}&quot; width=&quot;800&quot;/&gt;&lt;span class=&quot;caption-text&quot;&gt;Jackie Chan in “The Legend of Drunken Master,” 1994&lt;/span&gt; &lt;span class=&quot;credit&quot;&gt;Photofest&lt;/span&gt;
&lt;p&gt;What impact these experiences had on Chan is hard to discern, since every episode in this memoir, even the most traumatic, is told with Chan’s indefatigable merriness, which as the book goes on starts to feel like a protective mechanism, a carapace of cheer. There is, too, an overarching sense of the phenomenal success that is to come, which casts a backwards glow even on those moments when Chan was at his lowest, cowering by the garbage bags in that lonely shed. Each trial is a stepping stone to the super-stardom that will legitimize everything that came before, rather than an examination of the ways in which being poor and Chinese in a colonial city in the 1950s might have messed a person up.&lt;/p&gt;
&lt;hr class=&quot;section-break&quot;/&gt;&lt;p&gt;&lt;span&gt;This blind spot is particularly apparent when Chan writes of the crucial formative experience in his life: When he was seven years old, his parents pulled him out of school and enrolled him at the China Drama Academy, which churned out performers for Peking operas and other entertainments. The Chans, who soon after would leave Hong Kong to pursue work in Australia, signed a ten-year contract with the academy, essentially consigning their son to a life of indentured servitude.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;For ten years, Chan trained all day long, from 5 a.m. to 11 p.m., with breaks for lunch and dinner. Along with the other boys, he slept on a thin mat, on a carpet encrusted with sweat, spit, and piss. When he misbehaved, he was beaten with canes; when he fell ill, he was told to suck it up and keep practicing his kung fu. He received almost no education, not even in the basics of reading, writing, and arithmetic, and when he first became rich he had trouble signing his own name on credit card receipts. (His memoir is “co-written” with a publicist.) He was, in effect, a walking slab of meat to be trotted out whenever a Peking opera production needed a singer or dancer or acrobat. And when he began seeking work on movie sets in his teens, his master would take a 90 percent cut of his pay.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;article-text-wrap&quot;&gt;
&lt;div class=&quot;article-text-grid&quot;&gt;
&lt;p&gt;Chan was enmeshed in the vast underclass of the great Hong Kong economy, which to this day is jam-packed with underpaid laborers from around the world who live stacked on top of each other in dismal apartments the size of coffins. And yet the predominant sense in this memoir is that the obvious inequities of the China Drama Academy particularly and Hong Kong more broadly were outweighed by the amazing opportunities they afforded to a nobody like Chan Kong-Sang. He describes those ten years as his “decade of darkness,” but, he adds, “It was in those ten years that I became Jackie Chan.”&lt;/p&gt;
&lt;p&gt;In other words, what to my mind reads like a brutal account of exploitation and abuse is meant to be &lt;em&gt;inspirational&lt;/em&gt;, a testament not only to Chan’s personal fortitude, but also to a certain ethic. Indeed, in Chan’s case, the myth of the self-made man, predicated on hard work and sacrifice, is taken to its extreme, for the thing he willingly sacrifices over and over again, year in and year out, is his body. The China Drama Academy primarily contributed to Chan’s success in three ways: It facilitated lifelong friendships with fellow entertainers, like Sammo Hung, who in the early days got him jobs, then went on to co-star in some of his most famous movies; it prepared him for stuntwork and trained him in martial arts, which were his calling cards in Hong Kong’s down-and-dirty film industry; and it turned his body into an instrument that could withstand ungodly amounts of pain.&lt;/p&gt;
&lt;p&gt;One of his first breaks came when a director demanded a perilous stunt—a tumbling leap from a high balcony—without a wire to catch the stuntman if it went awry. The stunt coordinator refused to let any of his men perform it. Then Chan volunteered, breaking what amounted to an ad hoc labor strike. “What’s the matter with you?” the coordinator asked. “Are you tired of living?” Chan, of course, pulled off the stunt—twice—establishing his reputation as a daredevil. As he started to star in his own films, culminating in his 1978 breakthrough &lt;em&gt;Drunken Master&lt;/em&gt;, original stuntwork became one of his defining traits, alongside his comedic mien. “I always perform my own stunts,” he promises to readers, “no matter how dangerous.” And with that came scores of injuries, which were then showed to audiences after the movie was over, in a highlight reel as the credits rolled. These injuries included a disastrous fall during the filming of &lt;em&gt;Armour of God&lt;/em&gt; (1986) that nearly killed him.&lt;/p&gt;
&lt;p&gt;In his memoir, Chan proudly recounts the body parts he has shattered over the course of his career: nose, jaw, ankle, cranium. “My leg sometimes gets dislocated when I’m showering,” he writes of the toll his work has taken on him. “I need my assistant to help me click it back in.” This is presented as evidence of his dedication to the craft. It is also what makes him exceptional—not his brilliance or his smile or any other quality, but an almost masochistic willingness to risk his life for the camera. Those highlight reels, full of impossible leaps from the tops of buildings and other brushes with death, became the hallmark of his movies, more memorable than their plots or characters. By the time &lt;em&gt;Rumble in the Bronx&lt;/em&gt; came around in the 1990s, Chan’s antics represented the awesome possibilities of what a human being could do on screen, soon to be surpassed by the hypnotic fireworks of CGI. But read as a Hong Kong success story, it leaves the unfortunate impression that the only way to make it in this town was to literally almost kill yourself with work.&lt;/p&gt;
&lt;div class=&quot;video-wrapper&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/zcuhsEl1rqc&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/div&gt;
&lt;hr class=&quot;section-break&quot;/&gt;&lt;p&gt;It is a shame that Chan is unable to evoke in his writing the joyful magic of a Jackie Chan fight scene. The combatants often work in an improbably tight space, with a few props that either shift position or are smashed to pieces, so that the space changes in surprising ways, as if some unexpected dimension of reality is continually unfolding before your eyes.&lt;/p&gt;
&lt;p&gt;It is a shame, too, that Chan does not say much about his filmmaking style. His Hong Kong, for example, is not that of John Woo (who pioneered the gritty, hardboiled aesthetic of action movies much imitated by Quentin Tarantino) or Wong Kar Wai (all sharp angles and reflections and harsh light, where even the raindrops are lambent with neon). It is something plainer, more straightforward, a bit ugly even: milky-gray sky, drab office interiors, identical white apartment blocks rising from the green hills with the regularity of a picket fence. The principal charm of this aesthetic, like a yellowing photograph, comes from age, dating Hong Kong to a specific moment in the 1980s and early 1990s, when it was at its peak and looking toward the 1997 handover to China with equal measures of hope and trepidation.&lt;/p&gt;
&lt;p&gt;The reader is left not with a reminder of Jackie Chan’s genius, but with the rather sad story of his very successful life. It is an old colonial tale, the hapless provincial who becomes worldly, though in Chan’s case he doesn’t evolve beyond being a clownish parvenu. He writes about it with his usual high spirits: “How did it feel to go from being flat broke to being a millionaire, practically overnight? To go from being an uneducated loser to being a famous star? It was fantastic!” He drinks all the time. He totals expensive cars and buys new ones. He spends millions of dollars on fancy watches, chases beautiful women, and licenses a Jackie Chan brand of Australian wines. After he stars in &lt;em&gt;Rush Hour&lt;/em&gt; with Chris Tucker in 1998, he becomes a bona fide star in America, producing a series of comic-action movies in his middle to old age that make him richer and more famous still.&lt;/p&gt;
&lt;img src=&quot;https://images.newrepublic.com/d3eb0c806b1fb6fff5dfce23ab3c3a9b5df6a5ad.jpeg?w=800&quot; data-serialized=&quot;{&amp;quot;id&amp;quot;:&amp;quot;7039bb5f-b8c1-4785-b834-91624c30f6f1&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;d3eb0c806b1fb6fff5dfce23ab3c3a9b5df6a5ad&amp;quot;,&amp;quot;width&amp;quot;:1666,&amp;quot;height&amp;quot;:1097,&amp;quot;format&amp;quot;:&amp;quot;JPEG&amp;quot;,&amp;quot;isAnimated&amp;quot;:false,&amp;quot;baseUrl&amp;quot;:&amp;quot;//images.newrepublic.com/&amp;quot;,&amp;quot;src&amp;quot;:&amp;quot;//images.newrepublic.com/d3eb0c806b1fb6fff5dfce23ab3c3a9b5df6a5ad.jpeg&amp;quot;,&amp;quot;meta&amp;quot;:{}}&quot; width=&quot;800&quot;/&gt;&lt;span class=&quot;caption-text&quot;&gt;Jackie Chan as Chief Inspector Lee and Chris Tucker as Detective James Carter in 1998’s “Rush Hour.”&lt;/span&gt;&lt;span class=&quot;credit&quot;&gt;Photofest&lt;/span&gt;
&lt;p&gt;He marries and has a child—named Jaycee, after his own initials J.C.—but he hardly ever sees his family because he is constantly working. (He also has a child out of wedlock though this only warrants an offhand sentence.) He is at his most self-aware when discussing his workaholism. “When I was young, people looked down on me,” he writes. “As a young adult, I lived in poverty. When I finally found success, I was driven to give the world one good film after another, to show everyone what I was worth.” He is rich beyond his wildest dreams, but is unable to shed the poor young man he once was, a person desperate for work and afraid of the abyss that could open up at his feet at any moment. His poverty is a wound that never quite heals.&lt;/p&gt;
&lt;hr class=&quot;section-break&quot;/&gt;&lt;p&gt;&lt;span&gt;Those searing experiences have not translated into a sympathetic politics. As Hong Kong was absorbed by China, and as the mainland’s own cities came to rival Hong Kong for wealth and power, it held on to the one trait that truly made it a British colony, which is that it was not a democracy. It would appear that Chan would like to keep it that way, viewing Hong Kong’s democratic movement as a blemish on its reputation for frictionless commerce and order. “Hong Kong has become a city of protest,” he&lt;/span&gt; &lt;a href=&quot;http://shanghaiist.com/2012/12/13/someone_tell_jackie_chan_to_stop_ta/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;complained&lt;/a&gt; &lt;span&gt;in 2012. “People scold China’s leaders, or anything else they like, and protest against everything.” In 2009 he said, “I don’t know whether it is better to have freedom or to have no freedom. With too much freedom, it can get very chaotic. It could end up like in Taiwan.” He added, “Chinese people need to be controlled, otherwise they will do whatever they want.” Indeed, China’s authoritarian-capitalist model, with its billion-plus consumers looking to spend time at the movies, suits Chan very well. He has moved his base of operations to Beijing and become a kind of&lt;/span&gt; &lt;a href=&quot;http://www.chinafile.com/jackie-chan-young-master-comes-age&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;soft-power ambassador&lt;/a&gt; &lt;span&gt;for the Communist Party. He has made&lt;/span&gt; &lt;a href=&quot;https://www.washingtonpost.com/goingoutguide/movies/chinese-zodiac-movie-review-jackie-chans-last-major-action-picture/2013/10/24/58e55690-3cb4-11e3-a94f-b58017bfee6c_story.html?utm_term=.2b92f69992ba&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;nationalist-inflected movies&lt;/a&gt; &lt;span&gt;with a mainland production company.&lt;/span&gt;&lt;/p&gt;
&lt;img src=&quot;https://images.newrepublic.com/fceed94480d9bbc60c38b78bd9d7ada484485db0.jpeg?w=800&quot; data-serialized=&quot;{&amp;quot;id&amp;quot;:&amp;quot;e033c428-88bd-4823-977e-2f8c7fe44774&amp;quot;,&amp;quot;hash&amp;quot;:&amp;quot;fceed94480d9bbc60c38b78bd9d7ada484485db0&amp;quot;,&amp;quot;width&amp;quot;:1800,&amp;quot;height&amp;quot;:1181,&amp;quot;format&amp;quot;:&amp;quot;JPEG&amp;quot;,&amp;quot;isAnimated&amp;quot;:false,&amp;quot;baseUrl&amp;quot;:&amp;quot;//images.newrepublic.com/&amp;quot;,&amp;quot;src&amp;quot;:&amp;quot;//images.newrepublic.com/fceed94480d9bbc60c38b78bd9d7ada484485db0.jpeg&amp;quot;,&amp;quot;meta&amp;quot;:{}}&quot; width=&quot;800&quot;/&gt;&lt;span class=&quot;caption-text&quot;&gt;In 1996 Jackie Chan climbed the Hollywood sign .&lt;/span&gt; &lt;span class=&quot;credit&quot;&gt;Julian Wasser/Hulton Archive/Getty&lt;/span&gt;
&lt;p&gt;If Chan once represented what a Hong Konger could do with a little pluck and a little luck, his relentlessly buoyant memoir offers a different message: Life is hard, so one must be harder. It is an ethos that perhaps has been there all along. &lt;em&gt;Police Story&lt;/em&gt; (1985), one of his best movies, concludes with an &lt;a href=&quot;https://www.youtube.com/watch?v=lJ2Z8pGWmmg&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;epic fight scene&lt;/a&gt; in a mega department store, that ubiquitous symbol of Hong Kong’s consumer economy. Against a backdrop of designer clothes and jewelry and electronics, Chan fights a whole gang of bad guys, sending them flying into mannequins and tumbling down escalators. There is shattered glass everywhere as bodies slam through display cases and storefronts. At one point, inexplicably, a motorcycle makes an appearance, careening through more panes of glass. When it looks like the head of the gang is about to get away, Chan leaps from the store’s top story onto a giant pole festooned with lights, sliding all the way down in a shower of electric sparks. (In his memoir he reveals he shouted the words “I die!” as he jumped.) He crashes into more glass at the bottom, and in one unbroken motion gets up and keeps fighting.&lt;/p&gt;
&lt;p&gt;It remains a breathtaking scene, combining everything audiences have come to love about Jackie Chan: athleticism, derring-do, an everyman’s goodness. But there is something disturbing about it, too, the way Chan is both destroying and being destroyed by this mall. There is blood on his face, after all. And the blood is real.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Wed, 09 Jan 2019 15:04:59 +0000</pubDate>
<dc:creator>tmitchell</dc:creator>
<og:image>https://images.newrepublic.com/582ae53e140899849416344112386ae0277bd5d2.jpeg?w=1109&amp;h=577&amp;crop=faces&amp;fit=crop&amp;fm=jpg</og:image>
<og:url>https://newrepublic.com/article/152848/painful-price-becoming-jackie-chan</og:url>
<og:type>article</og:type>
<og:description>A new memoir by the legendary kung fu star reveals what it took to become one of Hong Kong’s greatest sons.</og:description>
<og:title>The Painful Price of Becoming Jackie Chan</og:title>
<dc:language>en-us</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://newrepublic.com/article/152848/painful-price-becoming-jackie-chan</dc:identifier>
</item>
<item>
<title>Matz: We are mere mortals</title>
<link>https://twitter.com/yukihiro_matz/status/1082418360501948416</link>
<guid isPermaLink="true" >https://twitter.com/yukihiro_matz/status/1082418360501948416</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://twitter.com/yukihiro_matz/status/1082418360501948416&quot;&gt;https://twitter.com/yukihiro_matz/status/1082418360501948416&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=18864600&quot;&gt;https://news.ycombinator.com/item?id=18864600&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 291&lt;/p&gt;
&lt;p&gt;# Comments: 89&lt;/p&gt;
</description>
<pubDate>Wed, 09 Jan 2019 13:46:56 +0000</pubDate>
<dc:creator>tosh</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://mobile.twitter.com/yukihiro_matz/status/1082418360501948416</dc:identifier>
</item>
</channel>
</rss>