<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>C++ Modules Might Be Dead-On-Arrival</title>
<link>https://vector-of-bool.github.io/2019/01/27/modules-doa.html</link>
<guid isPermaLink="true" >https://vector-of-bool.github.io/2019/01/27/modules-doa.html</guid>
<description>&lt;p&gt;C++ modules are slated to be the biggest change in C++ since its inception. The design of modules has several essential goals in mind:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;strong&gt;Top-down isolation&lt;/strong&gt; - The “importer” of a module cannot affect the content of the module being imported. The state of the compiler (preprocessor) in the importing source has no bearing on the processing of the imported code.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bottom-up isolation&lt;/strong&gt; - The content of a module does not affect the state of the preprocessor in the importing code.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lateral isolation&lt;/strong&gt; - If two modules are imported by the same file, there is no “cross-talk” between them. The ordering of the import statements is insignificant.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Physical encapsulation&lt;/strong&gt; - Only entities which are explicitly declared as exported by a module will be visible to consumers. Non-exported entities within a module will not affect name lookup in other modules (barring some possible strangeness with ADL. Long story…)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Modular interfaces&lt;/strong&gt; - The current module design enforces that for any given module, the entire public interface of that module is declared in a single TU called the “module-interface unit” (MIU). The implementation of subsets of the module interface may be defined in different TUs called “partitions.”&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;If you’ve been hoping for modules for as long as many have, you’ll note that “compilation speed” is missing from this list. Nevertheless, this is one of the biggest promises of modules. The possible speedup from modules is merely a consequence of the above design aspects.&lt;/p&gt;
&lt;p&gt;This author can identify several aspects of C++ compilation that can greatly benefit from the design of modules. In order of most-to-least-obvious:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;strong&gt;Tokenization caching&lt;/strong&gt; - Because of TU isolation, tokenizing a TU can be cached when the module is later imported into another TU.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Parse-tree caching&lt;/strong&gt; - Same as above. Tokenization and parsing are some of the most expensive operations in compiling C++. In my own tests, parsing can consume up to 30% of compilation time for files with a large preprocessed output.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lazy re-generation&lt;/strong&gt; - If &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt; imports &lt;code class=&quot;highlighter-rouge&quot;&gt;bar&lt;/code&gt;, and we later make changes to the &lt;em&gt;implementation&lt;/em&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;bar&lt;/code&gt;, we may be able to omit recompilation of &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt;. Only changes to &lt;em&gt;the interface&lt;/em&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;bar&lt;/code&gt; necessitate recompilation of &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Template specialization memoization&lt;/strong&gt; - This one is a bit more subtle and may take more work to implement, but the potential speedups are &lt;em&gt;enormous&lt;/em&gt;. In short: A specialization of a class or function template appearing in the module interface unit can be cached and loaded from disk later.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Inline function codegen caching&lt;/strong&gt; - Codegen results for inline functions (including function templates and member functions of class templates) can be cached and later re-loaded by the compiler backend.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Inline function codegen elision&lt;/strong&gt; - &lt;code class=&quot;highlighter-rouge&quot;&gt;extern template&lt;/code&gt; allows the compiler to omit performing codegen for function and class templates. This is hugely beneficial for the &lt;em&gt;linker&lt;/em&gt; when it performs de-dup. Modules may allow the compiler to perform more &lt;code class=&quot;highlighter-rouge&quot;&gt;extern template&lt;/code&gt;-style optimizations implicitly.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;All in all, it’s looking pretty good, yeah?&lt;/p&gt;
&lt;p&gt;But there’s something missing. A horrible, terrible, no-good, very bad flaw.&lt;/p&gt;

&lt;p&gt;Fortran implemented a module system that bears a slight resemblance to the design proposed for C++. A few short months ago, a paper &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1300r0.pdf&quot;&gt;p1300&lt;/a&gt; was written by the SG15 group for review in San Diego. As far as I can tell, the paper was not discussed nor reviewed by any relevant eyes.&lt;/p&gt;
&lt;p&gt;The gist of it is this:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;We have module &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt; and module &lt;code class=&quot;highlighter-rouge&quot;&gt;bar&lt;/code&gt;, defined by &lt;code class=&quot;highlighter-rouge&quot;&gt;foo.cpp&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;bar.cpp&lt;/code&gt; respectively.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bar.cpp&lt;/code&gt; has an &lt;code class=&quot;highlighter-rouge&quot;&gt;import foo;&lt;/code&gt; statement.&lt;/li&gt;
&lt;li&gt;How do we make sure that &lt;code class=&quot;highlighter-rouge&quot;&gt;import foo&lt;/code&gt; will resolve when compiling &lt;code class=&quot;highlighter-rouge&quot;&gt;bar.cpp&lt;/code&gt;? The current design and implementations require there to exist what is known as the “binary module interface” (abbreviated as BMI) defined for &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt;. The BMI is a file on the filesystem that describes the exported interface of the module &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt;. I’ll call that BMI &lt;code class=&quot;highlighter-rouge&quot;&gt;foo.bmi&lt;/code&gt; for now. The extension isn’t important.&lt;/li&gt;
&lt;li&gt;Creation of &lt;code class=&quot;highlighter-rouge&quot;&gt;foo.bmi&lt;/code&gt; is a byproduct of the compilation of &lt;code class=&quot;highlighter-rouge&quot;&gt;foo.cpp&lt;/code&gt;. When compiling &lt;code class=&quot;highlighter-rouge&quot;&gt;foo.cpp&lt;/code&gt;, the compiler will emit a &lt;code class=&quot;highlighter-rouge&quot;&gt;foo.o&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;foo.bmi&lt;/code&gt;. As a consequence of this design, &lt;code class=&quot;highlighter-rouge&quot;&gt;foo.cpp&lt;/code&gt; &lt;strong&gt;must&lt;/strong&gt; be compiled &lt;em&gt;before&lt;/em&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;bar.cpp&lt;/code&gt;!&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;If alarm bells aren’t ringing already, let me discuss the way we currently work using header files:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;We have a “module” &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt; defined by &lt;code class=&quot;highlighter-rouge&quot;&gt;foo.cpp&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;foo.hpp&lt;/code&gt;, and a “module” &lt;code class=&quot;highlighter-rouge&quot;&gt;bar&lt;/code&gt; defined by &lt;code class=&quot;highlighter-rouge&quot;&gt;bar.cpp&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;bar.hpp&lt;/code&gt;. Easy to understand.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bar.cpp&lt;/code&gt; contains an &lt;code class=&quot;highlighter-rouge&quot;&gt;#include &amp;lt;foo.hpp&amp;gt;&lt;/code&gt; preprocessor statement.&lt;/li&gt;
&lt;li&gt;How do we make sure that &lt;code class=&quot;highlighter-rouge&quot;&gt;#include &amp;lt;foo.hpp&amp;gt;&lt;/code&gt; resolves when compiling &lt;code class=&quot;highlighter-rouge&quot;&gt;bar.cpp&lt;/code&gt;? It’s simple: Make sure &lt;code class=&quot;highlighter-rouge&quot;&gt;foo.hpp&lt;/code&gt; is present in a directory on the header search path list. We do not need to do any additional pre-processing.&lt;/li&gt;
&lt;li&gt;There is no ordering requirement between the compilation of the “modules” &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;bar&lt;/code&gt;. They can be processed in parallel.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Parallelization is probably the single most important aspect of increasing build performance. At this point, it isn’t even something you think about when you are optimizing your build because &lt;em&gt;it is already there&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Modules change that. The importing of a module creates a “happens-before” dependency where &lt;code class=&quot;highlighter-rouge&quot;&gt;#include&lt;/code&gt; did not. (I discuss this ordering in my &lt;a href=&quot;https://vector-of-bool.github.io/2018/12/20/build-like-ninja-1.html&quot;&gt;Building Like (a) Ninja post&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The consequences of this design were explored very recently by Rene Rivera in &lt;a href=&quot;https://bfgroup.github.io/cpp_tooling_stats/modules/modules_perf_D1441R1.html&quot;&gt;&lt;em&gt;Are modules fast?&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Spoiler alert: No. Or, more accurately: It’s subtle, but mostly &lt;em&gt;no&lt;/em&gt;. The current module implementation used in that paper is extremely primitive but is still a valuable benchmark to understand what modules may look like performance-wise. Expectedly, as hardware parallelism increases, headers’ lead over modules becomes more and more pronounced. There is also a relationship between the DAG-depth (i.e. The length of the chain of modules that &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt; each other). As this depth increases, modules grow slower and slower, while headers remain fairly constant for even “extreme” depths approaching 300).&lt;/p&gt;

&lt;p&gt;Suppose I have this source file:&lt;/p&gt;
&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greetings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iostream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greeting&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;english&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This is pretty simple. Since we import some modules, we will need to compile &lt;code class=&quot;highlighter-rouge&quot;&gt;greetings&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;std.iostream&lt;/code&gt; &lt;em&gt;before&lt;/em&gt; we can compile this file.&lt;/p&gt;
&lt;p&gt;So, let’s do that…&lt;/p&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;p&gt;Uh…&lt;/p&gt;
&lt;p&gt;How?&lt;/p&gt;
&lt;p&gt;We’ve been given a source file with two imports. That’s it. We don’t have anything else. Where is &lt;code class=&quot;highlighter-rouge&quot;&gt;greetings&lt;/code&gt; defined? We need to find a file that contains a &lt;code class=&quot;highlighter-rouge&quot;&gt;module greetings;&lt;/code&gt; statement.&lt;/p&gt;
&lt;p&gt;This file located on the other side of the galaxy, &lt;code class=&quot;highlighter-rouge&quot;&gt;talk.cpp&lt;/code&gt;, looks promising:&lt;/p&gt;
&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#ifdef FROMBULATE
#include &amp;lt;hello.h&amp;gt;
#endif
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#ifndef ABSYNTH
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greeting&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;english&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;It defines that &lt;code class=&quot;highlighter-rouge&quot;&gt;greeting::english&lt;/code&gt; function that we want. But how do we know that this is the right file? It doesn’t contain a &lt;code class=&quot;highlighter-rouge&quot;&gt;module greetings;&lt;/code&gt; line!&lt;/p&gt;
&lt;p&gt;But it does. Sometimes. It turns out when we compile with &lt;code class=&quot;highlighter-rouge&quot;&gt;-DFROMBULATE&lt;/code&gt;, then the file &lt;code class=&quot;highlighter-rouge&quot;&gt;hello.h&lt;/code&gt; is pasted into the source file. What’s in there?&lt;/p&gt;
&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#ifdef __SOME_BUILTIN_MACRO__
# define MODULE_NAME greetings
#else // Legacy module name
# define MODULE_NAME salutations
#endif
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MODULE_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Oh.&lt;/p&gt;
&lt;p&gt;Oh no.&lt;/p&gt;
&lt;p&gt;This is fine. This is fine… Don’t worry. All we need to do is… &lt;em&gt;run the preprocessor&lt;/em&gt; to check if the file comes out as &lt;code class=&quot;highlighter-rouge&quot;&gt;module salutations&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;module greetings&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is okay, but… There are 4,201 files that could define modules that can be imported, and any one of them could be &lt;code class=&quot;highlighter-rouge&quot;&gt;module greetings;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Also, we can’t use our own implementation of the preprocessor: We need to run &lt;em&gt;exactly&lt;/em&gt; the preprocessor that will be compiling this code. See that &lt;code class=&quot;highlighter-rouge&quot;&gt;__SOME_BUILTIN_MACRO__&lt;/code&gt;? We have no clue what that is. If we don’t get it &lt;em&gt;exactly&lt;/em&gt; right, the compilation will fail, or, even worse, we may &lt;em&gt;miscompile&lt;/em&gt; the file.&lt;/p&gt;
&lt;p&gt;So what can we do? We could cache the names of all the modules after preprocessing all the files, right? Well, where do we store that mapping? And what happens when we want to compile with a different compiler that results in a different mapping? What if we add new files that need to be scanned? Do we need to search every directory that contains these thousands of source files every time we build, just to check if any modules were added, removed, or renamed? On systems where process startup and/or filesystem access is not cheap, these costs will add up.&lt;/p&gt;

&lt;p&gt;These two problems are distinct but related in that I (and many others) believe that one change to the modules design will fix them both: &lt;strong&gt;Module interface unit locations must be deterministic&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;There are two alternative ideas to enforce this:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Force MIU filenames to derive from the module’s name. This mimics the design of header filenames being directly related to how they are found from an &lt;code class=&quot;highlighter-rouge&quot;&gt;#include&lt;/code&gt; directive.&lt;/li&gt;
&lt;li&gt;Provide a “manifest” or “mapping” file that describes the filepath to an MIU based on the module name. This file will need to be user-provided, or we are back in the scanning problem.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;With MIU lookup deterministic and easily defined, we can then go to the next essential step: The BMI of a module must be lazily generated.&lt;/p&gt;
&lt;p&gt;The compilation ordering between TUs will kill module adoption dead in its tracks. Even relatively shallow DAG depths are much slower than the equivalent with header files. The only answer is that TU compilation &lt;em&gt;must&lt;/em&gt; be parallelizable, even in the face of importing other TUs.&lt;/p&gt;
&lt;p&gt;In this respect, C++ would be best to mimic Python’s &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt; implementation: When a new &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt; statement is encountered, Python will first find a source file corresponding to that module, and then look for a pre-compiled version in a deterministic fashion. If the pre-compiled version already exists and is up-to-date, it will be used. If no pre-compiled version exists, the source file will be compiled and the resulting bytecode will be written to disk. The bytecode is then loaded. If two interpreter instances encounter the same un-compiled source file at the same time, they will race to write the bytecode. The race doesn’t matter, though: They will both come to the same conclusion and write the same file to disk.&lt;/p&gt;
&lt;p&gt;In order to facilitate parallel compilation of TUs in the DAG, C++ modules must be implemented in the same way. Ahead-of-time BMI compilation is a non-starter. Instead, a compiler should lazily generate the BMI when it first encounters an &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt; statement for the module in question. The build system should not concern itself with BMIs at all.&lt;/p&gt;
&lt;p&gt;All of this can only work if the location of an MIU is deterministic for the compiler.&lt;/p&gt;

&lt;p&gt;There was a recent upset on the Twitter-verse. The Pre-Kona mailing was posted on January 25th. Amongst the many papers posted you will find &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1427r0.pdf&quot;&gt;p1427, &lt;em&gt;Concerns about module toolability&lt;/em&gt;&lt;/a&gt;. Amongst its authors and contributors are names of build system and tooling engineers from around the industry. Am I appealing to authority here? Yes I am, but I feel that these are some of the most qualified people to provide feedback on module toolability.&lt;/p&gt;
&lt;p&gt;This paper was born from the concerns of many tool authors and collaborators (more than what is named on the paper itself, including myself) who have felt that their concerns about modules have been ignored for months and years.&lt;/p&gt;
&lt;p&gt;People outside of SG15 have been keen to &lt;a href=&quot;http://www.open-std.org/pipermail/tooling/2019-January/000269.html&quot;&gt;shoot down discussion&lt;/a&gt; on the issues with module toolability, claiming that SG15 does not have the necessary implementation experience to make useful statements regarding modules.&lt;/p&gt;
&lt;p&gt;SG15 has only had face-to-face meetings. The last meeting, in San Diego, was useless as the chair was absent and people were too busy getting caught up since the prior meetings to have any useful discussions. With no SG15 meetings outside of those at the official WG21 convenings, the members thereof have difficulty staying up-to-date and collaborating on work. In addition, many times that SG15 has attempted to raise issues they have been shot down as their work is considered “out-of-scope” for the C++ language.&lt;/p&gt;
&lt;p&gt;A Tweet about the pre-Kona mailings spawned discussion of C++ modules and p1427. &lt;a href=&quot;https://twitter.com/horenmar_ctu/status/1089542882783084549&quot;&gt;Questions were raised about who to trust&lt;/a&gt; regarding module toolability.&lt;/p&gt;
&lt;p&gt;This discussion culminated in an eventual call for SG15 to &lt;a href=&quot;https://twitter.com/rodgertq/status/1089580076729982976?s=19&quot;&gt;“STFU”&lt;/a&gt; unless they can provide code samples that prove the problems they outline. This is a request for code that cannot be implemented in any current compiler and cannot be implemented in any current build system. Even if these were to exist, the request is for proving a negative: A task which cannot be done empirically. As such, this request for code is a goal that cannot be met.&lt;/p&gt;
&lt;p&gt;The issues were not discussed. The issues were not disproven. No one even mentioned the problems outlined in p1427. We are told to simply &lt;a href=&quot;https://twitter.com/jfbastien/status/1089536692288024576&quot;&gt;trust some big names&lt;/a&gt; to know better than we do (an appeal to authority).&lt;/p&gt;
&lt;p&gt;People backing the current modules design have not proven that modules work at scale, yet also demand proof from SG15 that they &lt;em&gt;do not&lt;/em&gt; work at scale. Existing “modules” deployments do not use the current design, and do not use the automated module scanning that would be required for use with real build systems in the wild.&lt;/p&gt;
&lt;p&gt;If modules are merged and it turns out that they cannot be implemented in a well-performing and flexible fashion, people will not use modules. If a broken modules proposal is merged into C++, it may be irrecoverable and C++ will never see the promises of modules realized.&lt;/p&gt;
&lt;p&gt;Is it possible for the current modules proposal to be implemented successfully? I can’t answer with a definitive “no”, but me and many others feel that there are significant issues that need to be addressed.&lt;/p&gt;
&lt;p&gt;But, judging by the behavior of others, it may seem that it doesn’t matter what SG15 thinks: They are being shot down at every turn by people with very little experience in C++ tooling, and the SG15 chair is completely absent through this entire discussion. Anything SG15 does is declared “unsubstantiated” and “out-of-scope.”&lt;/p&gt;
&lt;p&gt;I was afraid to call out this behavior: I’m not keen on interpersonal conflict. Nevertheless, I’m more afraid that C++ will end up with a permanently useless modules design.&lt;/p&gt;
</description>
<pubDate>Mon, 28 Jan 2019 02:47:11 +0000</pubDate>
<dc:creator>pplonski86</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://vector-of-bool.github.io/2019/01/27/modules-doa.html</dc:identifier>
</item>
<item>
<title>Linear Algebra by Jim Hefferon – free textbook</title>
<link>http://joshua.smcvt.edu/linearalgebra/</link>
<guid isPermaLink="true" >http://joshua.smcvt.edu/linearalgebra/</guid>
<description>&lt;head&gt;&lt;title&gt;Free Linear Algebra textbook&lt;/title&gt;&lt;meta name=&quot;Keywords&quot; content=&quot;linear algebra, textbook, text, free, mathematics, free textbook, free book, open educational resources, mathematics teaching&quot;/&gt;&lt;meta http-equiv=&quot;keywords&quot; content=&quot;linear algebra, textbook, text, free, mathematics, free textbook, free book, open educational resources, mathematics teaching&quot;/&gt;&lt;/head&gt;&lt;body id=&quot;readabilityBody&quot; readability=&quot;163.53086419753&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://joshua.smcvt.edu/linearalgebra/#current_version&quot;&gt;&lt;img src=&quot;http://joshua.smcvt.edu/linearalgebra/bookcover.png&quot; align=&quot;right&quot; alt=&quot;PNG image: cover of Linear Algebra&quot; height=&quot;300&quot; border=&quot;1&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 align=&quot;left&quot;&gt;&lt;em&gt;Linear Algebra&lt;/em&gt;&lt;/h2&gt;
&lt;h3&gt;A Free text for a standard US undergraduate course&lt;/h3&gt;
&lt;h4 align=&quot;left&quot;&gt;&lt;a href=&quot;http://joshua.smcvt.edu/math/hefferon.html&quot;&gt;Jim Hefferon&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://smcvt.edu/academics/mathematics/&quot;&gt;Mathematics and Statistics Department&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://www.smcvt.edu/&quot;&gt;Saint Michael's College&lt;/a&gt; &lt;br/&gt;&lt;em id=&quot;email&quot;&gt;jhefferon&lt;/em&gt; at &lt;em&gt;smcvt.edu&lt;/em&gt;&lt;br/&gt;&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;Linear Algebra&lt;/em&gt; is a text for a first US undergraduate Linear Algebra course. You can use it as a main text, as a supplement, or for independent study.&lt;/p&gt;
&lt;p&gt;It is Free. The book, the complete answers to all exercises, classroom presentation slides, and a lab manual using &lt;em&gt;Sage&lt;/em&gt;, are all &lt;a href=&quot;http://joshua.smcvt.edu/linearalgebra/#current_version&quot;&gt;available for download&lt;/a&gt;, as well as &lt;a href=&quot;http://joshua.smcvt.edu/linearalgebra/#purchase&quot;&gt;for purchase&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;http://joshua.smcvt.edu/linearalgebra/#current_version&quot;&gt;third edition&lt;/a&gt; incorporates many suggestions sent by users, including many more beginning exercises, and a new Topic on coupled oscillators and eigenvalues.&lt;/p&gt;
&lt;h3&gt;Highlights&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Standard coverage&lt;/strong&gt;  Linear systems and Gauss's method, vector spaces, linear maps and matrices, determinants, and eigenvectors and eigenvalues.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Free&lt;/strong&gt;  The book is &lt;a href=&quot;http://joshua.smcvt.edu/linearalgebra/#license&quot;&gt;Freely available&lt;/a&gt;, including its source.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Developmental approach&lt;/strong&gt;  It covers the requisite material and proves all the results, but it does not start by assuming that students are already able at abstract work. Instead, it proceeds with a great deal of motivation, many computational examples, and exercises that range from routine verifications to a few challenges. The goal is, in the context of developing the material of an undergraduate course, to raise each student's level of mathematical maturity.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Extensive exercise sets, with worked answers to all exercises&lt;/strong&gt;  Sometimes material described on the web as a book is really lecture notes. That's fine but from notes to a book is a long way. That means things like figures and an index, but most importantly means exercises. Each subsection here has many, spanning a range of difficulty. In the Answers book each exercise is covered, completely, including proofs.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Popular&lt;/strong&gt;  Downloadable for twenty years, this book has been used in hundreds of classes at many schools as well as by thousands of individuals for independent study.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Applications&lt;/strong&gt;  Each chapter finishes with four or five short supplemental topics. These are good for reading or projects, or for small group work.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Extras&lt;/strong&gt;  There are beamer slides for classroom presentations, and there is a lab manual using &lt;em&gt;Sage&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Prerequisite&lt;/strong&gt;  One semester of calculus.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reviews.&lt;/strong&gt;  Here are some: &lt;a href=&quot;http://mathdl.maa.org/mathDL/19/?pa=reviews&amp;amp;sa=viewBook&amp;amp;bookId=72055&quot;&gt;the Mathematical Association of America review&lt;/a&gt;, &lt;a href=&quot;http://aimath.org/textbooks/approved-textbooks/hefferon/&quot;&gt;the American Institute of Mathematics&lt;/a&gt;, &lt;a href=&quot;https://open.umn.edu/opentextbooks/BookDetail.aspx?bookId=24&quot;&gt;the Open Textbook Library (includes a number of reviews)&lt;/a&gt;, &lt;a href=&quot;http://www.theassayer.org/cgi-bin/asbook.cgi?book=29&quot;&gt;one from a longstanding site for free texts&lt;/a&gt;. &lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h3 id=&quot;current_version&quot;&gt;Get &lt;em&gt;Linear Algebra&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;Here is the current version of &lt;a href=&quot;http://joshua.smcvt.edu/linearalgebra/book.pdf&quot;&gt;the text&lt;/a&gt; and the &lt;a href=&quot;http://joshua.smcvt.edu/linearalgebra/jhanswer.pdf&quot;&gt;answers to exercises&lt;/a&gt;. Save these files in the same directory so that clicking on an exercise takes you to its answer and clicking on an answer takes you to the exercise. (You need a PDF reader that supports this; one is Adobe Reader.)&lt;/p&gt;
&lt;p id=&quot;purchase&quot;&gt;You can get a paper copy, an official one, for just about the cost of media, about $22. You can click on the link to Amazon, just below. Or, you can use ISBN-13: 978-1944325039 at your favorite site. (Bookstores can buy from NACSCORP or from Ingram via LightningSource.)&lt;/p&gt;

&lt;p&gt;If you are teaching out of this text then have a look at the &lt;a href=&quot;http://joshua.smcvt.edu/linearalgebra/slides.zip&quot;&gt;beamer slides&lt;/a&gt; for classroom presentation. These are compiled from the text source, so the theorems and definitions have the exact same wording. But the slides use different examples than the text so that students see twice as many. Along with those is a &lt;a href=&quot;http://joshua.smcvt.edu/linearalgebra/slides_handout.zip&quot;&gt;version of the slides&lt;/a&gt; without the pauses, for handing out or posting in your learning management system. (Those slides omit some proofs in favor of examples; you can also get a version that includes &lt;a href=&quot;http://joshua.smcvt.edu/linearalgebra/slides_allproofs.zip&quot;&gt;all proofs&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Linear Algebra&lt;/em&gt; also has a supplemental, optional, &lt;a href=&quot;http://joshua.smcvt.edu/linearalgebra/lab.pdf&quot;&gt;lab manual&lt;/a&gt; using &lt;a href=&quot;http://www.sagemath.org&quot;&gt;&lt;em&gt;Sage&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you are into LaTeX then you may be interested that &lt;em&gt;Linear Algebra&lt;/em&gt; once again has a &lt;a href=&quot;https://gitlab.com/jim.hefferon/linear-algebra&quot;&gt;source repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Finally, if you find the book useful then you could make a contribution. This is entirely optional but you'd be surprised at the expenses a person runs into giving things away; contributions help with things like examination copies for conferences. I'll suggest $5 but for whatever you send, thank you!&lt;/p&gt;

&lt;h4 id=&quot;additional_material&quot;&gt;Additional material&lt;/h4&gt;
&lt;p&gt;Prof Harold W. Ellingsen of SUNY Potsdam has shared his &lt;a href=&quot;http://joshua.smcvt.edu/linearalgebra/MatrixArithmetic.pdf&quot;&gt;&lt;em&gt;Matrix Arithmetic&lt;/em&gt;&lt;/a&gt;, for teachers who want to cover matrix operations after the first chapter (the book covers them in the third chapter as part of linear maps). It is under a Free license, and you can get &lt;a href=&quot;http://joshua.smcvt.edu/linearalgebra/MatrixArithmetic.tex&quot;&gt;the LaTeX source&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can also &lt;a href=&quot;http://joshua.smcvt.edu/linearalgebra/problems2014.zip&quot;&gt;get the problems and their solutions&lt;/a&gt; that I assigned for take home work when I taught the class in the Fall of 2014.&lt;/p&gt;
&lt;h3 id=&quot;prior_version&quot;&gt;The prior edition of &lt;em&gt;Linear Algebra&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;The second edition of &lt;em&gt;Linear Algebra&lt;/em&gt; is still available, for someone in a legacy situation: &lt;a href=&quot;http://joshua.smcvt.edu/linearalgebra/book_ed2.pdf&quot;&gt;book&lt;/a&gt; and &lt;a href=&quot;http://joshua.smcvt.edu/linearalgebra/jhanswer_ed2.pdf&quot;&gt;answers&lt;/a&gt;. To use the hyperlinking between questions and answers, rename these files &quot;book.pdf&quot; and &quot;jhanswer.pdf&quot; and put them in the same directory,&lt;/p&gt;
&lt;hr/&gt;&lt;h3 id=&quot;license&quot;&gt;License&lt;/h3&gt;
&lt;p&gt;This text is Free. Use it under either the &lt;a href=&quot;http://www.gnu.org/copyleft/fdl.html&quot;&gt;GNU Free Documentation License&lt;/a&gt; or the &lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-sa/2.5/&quot;&gt;&lt;img alt=&quot;Creative Commons License&quot; border=&quot;0&quot; src=&quot;http://creativecommons.org/images/public/somerights20.png&quot;/&gt;&lt;/a&gt; &lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-sa/2.5/&quot;&gt;Creative Commons Attribution-ShareAlike 2.5 License&lt;/a&gt;, at your discretion.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;For bookstores:&lt;/em&gt; thank you for being concerned about my rights. I give instructors permission to make copies of this material, either electronic or paper, and give or sell those to students. But first note that for very little money you can get a paper copy from Amazon, or NACSCORP, or directly from Ingram via LightningSource, using ISBN-13: 978-1944325039.&lt;/p&gt;
&lt;p&gt;Please don't order used or unofficial copies since they can have significantly different content and pagination. With the current edition at pretty much the price of media, any savings from old versions are tiny compared to the cost of confusion, particularly confusion to me since I get contacted about already-fixed bugs. The current version says &quot;Third edition&quot; on the front cover (it also says 2017-Jan-01 at the end of the Preface).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;For instructors who want to modify the text.&lt;/em&gt; Please, feel free. But as a favor I ask that you include a statement about your modifications. That way people making reports know who to write. Putting something like this on the cover would be great: &lt;code&gt;\fbox{\parbox{0.75\textwidth}{The material in the second appendix, on induction, has been added by Professor Jones of UBU. For any reports about this material contact \url{sjones@example.com}.}}&lt;/code&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h3 id=&quot;contribute&quot;&gt;Can You Help With &lt;em&gt;Linear Algebra&lt;/em&gt;?&lt;/h3&gt;
&lt;p&gt;I am glad to hear from both teachers and students. I enjoy hearing about the experience that folks have with the book and I find suggestions helpful, especially bug reports. I save these and periodically revise.&lt;/p&gt;
&lt;p&gt;If you have something that you are able to share back then I'd be glad to take a look. For instance, I would love to have a topic on Machine Learning, or some sub-topic such as dimension reduction. Of course, I reserve the ability to choose whether to edit or include it. I gratefully acknowledge all the contributions that I use, or I can keep you anonymous.&lt;/p&gt;
&lt;p&gt;In particular, I would welcome exams or problem sets. Some instructors have questions about using a text where the answers to the exercises are downloadable. (I can't resist noting that for any widely-available text any college student can get from the Internet copies of the answers. Also, in the past I tried witholding the answers and asking class instructors to email me for copies but that left me trying to determine identity via email, which is just not practical.) Thus additional sets of exercises without answers would answer the requests of some instructors. If you could contribute your TeX or LaTeX source that'd be great because then instructors could cut and paste.&lt;/p&gt;
&lt;p&gt;I would also welcome contrbutions related to the emerging electronic tools. For instance, if you have sets of questions that are suitable for &lt;a href=&quot;http://moodle.org&quot;&gt;Moodle quizzes&lt;/a&gt; and that you could share with other users of this book then write me and we can see about making them available. The same holds for &lt;a href=&quot;http://webwork.maa.org&quot;&gt;WeBWorK&lt;/a&gt; problem sets. And, I would be glad to be able to include in the distribution a deck of &lt;a href=&quot;https://en.wikipedia.org/wiki/Anki_(software)&quot;&gt;Anki&lt;/a&gt; cards.&lt;/p&gt;
&lt;p&gt;My email is &lt;a href=&quot;http://joshua.smcvt.edu/linearalgebra/#email&quot;&gt;at the top of this page&lt;/a&gt;.&lt;/p&gt;
&lt;hr/&gt;&lt;h3 id=&quot;related&quot;&gt;Related work&lt;/h3&gt;
&lt;p&gt;I have two other texts. Both are Free. My &lt;a href=&quot;http://joshua.smcvt.edu/proofs&quot;&gt;&lt;em&gt;Introduction to Proofs&lt;/em&gt;&lt;/a&gt; is for a proofs course taught using the Inquiry-Based method (also known as the Discovery method or the Moore method). It covers elementary number theory, sets, functions, and relations. My &lt;a href=&quot;http://joshua.smcvt.edu/computation&quot;&gt;&lt;em&gt;Theory of Computation&lt;/em&gt;&lt;/a&gt; covers Turing Machines, the Halting problem, Automata, and Complexity. It is now beta, being classroom-tested, and is under active development.&lt;/p&gt;
&lt;p&gt;In addition, you may also like my &lt;a href=&quot;http://joshua.smcvt.edu/undergradmath/&quot;&gt;Cheat Sheet for LaTeX math&lt;/a&gt;, aimed at undergraduates but useful for anyone.&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;img src=&quot;http://joshua.smcvt.edu/JLC_small_test.jpg&quot; align=&quot;right&quot; alt=&quot;Picture of Joshua L. Chamberlin&quot;/&gt;&lt;/p&gt;
&lt;h4 align=&quot;left&quot;&gt;Site Information&lt;/h4&gt;
&lt;p&gt;This site &lt;a href=&quot;http://joshua.smcvt.edu&quot;&gt;Joshua&lt;/a&gt; is located in the &lt;a href=&quot;http://smcvt.edu/academics/mathematics/&quot;&gt;Mathematics Department&lt;/a&gt; of &lt;a href=&quot;http://www.smcvt.edu/&quot;&gt;Saint Michael's College&lt;/a&gt; in Colchester, Vermont USA.&lt;/p&gt;
&lt;h4&gt;Joshua runs under Linux&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;http://joshua.smcvt.edu/Linux2-matt-ericson.gif&quot; align=&quot;left&quot; alt=&quot;Powered by Linux logo&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Open Source software is a great idea. This project would not have gotten done without it.&lt;/p&gt;
&lt;p&gt;(Credit for the logo to Matt Ericson.)&lt;/p&gt;
&lt;/body&gt;</description>
<pubDate>Sun, 27 Jan 2019 19:04:53 +0000</pubDate>
<dc:creator>n-izem</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>http://joshua.smcvt.edu/linearalgebra/</dc:identifier>
</item>
<item>
<title>KABOOM in 180 lines of bare C++</title>
<link>https://github.com/ssloy/tinykaboom/wiki</link>
<guid isPermaLink="true" >https://github.com/ssloy/tinykaboom/wiki</guid>
<description>&lt;div class=&quot;markdown-body&quot;&gt;

&lt;p&gt;&lt;strong&gt;This is a software ray marching rendering. It is closely related to my &lt;a href=&quot;https://github.com/ssloy/tinyraytracer/wiki&quot;&gt;software raytracer&lt;/a&gt;. If you are looking for a software rasterizer, check the &lt;a href=&quot;https://github.com/ssloy/tinyrenderer/wiki&quot;&gt;other part of the lectures&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This article shows a trivial implementation of a ray marching, the goal is to go a little bit beyond simple spheres I rendered in my &lt;a href=&quot;https://github.com/ssloy/tinyraytracer/wiki&quot;&gt;raytracer project&lt;/a&gt;. I do not aim at getting photorealistic images, I want to have a &lt;em&gt;simple&lt;/em&gt; stuff applicable to video games.&lt;/p&gt;
&lt;p&gt;As always, we only have a bare compiler at our disposal, no third-party libraries are allowed. I don't want to bother with window managers, mouse/keyboard processing and so on. The result of our program will be a simple picture saved on the disk. I do not pursue speed/optimization at all, my goal is to show the underlying principles.&lt;/p&gt;
&lt;p&gt;So, how to draw such a picture in 180 lines of code under such restrictions?&lt;/p&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/ssloy/tinykaboom/master/out.jpg&quot;/&gt;&lt;p&gt;Here is how an animation would look like:&lt;/p&gt;
&lt;img src=&quot;https://github.com/ssloy/tinykaboom/raw/master/kaboom.gif&quot;/&gt;&lt;p&gt;Note that this code is a loose port from a shader available on &lt;a href=&quot;https://www.shadertoy.com/view/XdfGz8&quot; rel=&quot;nofollow&quot;&gt;shadertoy.com&lt;/a&gt;. The main idea is to better explain how it works.&lt;/p&gt;
&lt;p&gt;Let us split the task into simple steps. As in the raytracing article, to ease the reading flow I adopt the rule &lt;strong&gt;1 step = 1 commit&lt;/strong&gt;. This way the built-in github diff visualization tool comes extremely handy.&lt;/p&gt;

Well, for the step 0 there is no commit. Yup, that's right. The first thing you need to do is to read &lt;a href=&quot;https://github.com/ssloy/tinyraytracer/wiki&quot;&gt;the previous chapter&lt;/a&gt;, which describes the basics of ray tracing. It is very short, in fact, you can skip the reflections and refractions, but I recommend to read at least up to the diffuse lighting stage. The code is quite simple, people even launch it on microcontrollers:
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1893754/51790311-aabe0600-2193-11e9-8a06-4f7101b1af59.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

Let's draw one sphere without being obsessed with materials or lighting. For simplicity this sphere will live in the center of coordinates. I want to get such a picture: &lt;img src=&quot;https://raw.githubusercontent.com/ssloy/tinykaboom/c45987e9c4ad8594282e2af40775910b2b1c51ec/out.jpg&quot;/&gt;&lt;p&gt;The source code is available &lt;a href=&quot;https://github.com/ssloy/tinykaboom/tree/c45987e9c4ad8594282e2af40775910b2b1c51ec&quot;&gt;here&lt;/a&gt;, but it is short, so let's list it:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-c++&quot;&gt;
&lt;pre&gt;
#&lt;span class=&quot;pl-k&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;_USE_MATH_DEFINES&lt;/span&gt;
#&lt;span class=&quot;pl-k&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&amp;lt;&lt;/span&gt;cmath&lt;span class=&quot;pl-pds&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
#&lt;span class=&quot;pl-k&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&amp;lt;&lt;/span&gt;algorithm&lt;span class=&quot;pl-pds&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
#&lt;span class=&quot;pl-k&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&amp;lt;&lt;/span&gt;limits&lt;span class=&quot;pl-pds&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
#&lt;span class=&quot;pl-k&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&amp;lt;&lt;/span&gt;iostream&lt;span class=&quot;pl-pds&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
#&lt;span class=&quot;pl-k&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&amp;lt;&lt;/span&gt;fstream&lt;span class=&quot;pl-pds&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
#&lt;span class=&quot;pl-k&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&amp;lt;&lt;/span&gt;vector&lt;span class=&quot;pl-pds&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
#&lt;span class=&quot;pl-k&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;geometry.h&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;float&lt;/span&gt; sphere_radius   = &lt;span class=&quot;pl-c1&quot;&gt;1.5&lt;/span&gt;;

&lt;span class=&quot;pl-k&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;signed_distance&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; Vec3f &amp;amp;p) {
    &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; p.&lt;span class=&quot;pl-c1&quot;&gt;norm&lt;/span&gt;() - sphere_radius;
}

&lt;span class=&quot;pl-k&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;sphere_trace&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; Vec3f &amp;amp;orig, &lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; Vec3f &amp;amp;dir, Vec3f &amp;amp;pos) {
    pos = orig;
    &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;pl-c1&quot;&gt;size_t&lt;/span&gt; i=&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=&quot;pl-c1&quot;&gt;128&lt;/span&gt;; i++) {
        &lt;span class=&quot;pl-k&quot;&gt;float&lt;/span&gt; d = &lt;span class=&quot;pl-c1&quot;&gt;signed_distance&lt;/span&gt;(pos);
        &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (d &amp;lt; &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;true&lt;/span&gt;;
        pos = pos + dir*&lt;span class=&quot;pl-c1&quot;&gt;std::max&lt;/span&gt;(d*&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;1f&lt;/span&gt;, .&lt;span class=&quot;pl-c1&quot;&gt;01f&lt;/span&gt;);
    }
    &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;false&lt;/span&gt;;
}

&lt;span class=&quot;pl-k&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;main&lt;/span&gt;() {
    &lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;int&lt;/span&gt;   width    = &lt;span class=&quot;pl-c1&quot;&gt;640&lt;/span&gt;;
    &lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;int&lt;/span&gt;   height   = &lt;span class=&quot;pl-c1&quot;&gt;480&lt;/span&gt;;
    &lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;float&lt;/span&gt; fov      = M_PI/&lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;.;
    std::vector&amp;lt;Vec3f&amp;gt; &lt;span class=&quot;pl-c1&quot;&gt;framebuffer&lt;/span&gt;(width*height);

#&lt;span class=&quot;pl-k&quot;&gt;pragma&lt;/span&gt; omp parallel for
    &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;pl-c1&quot;&gt;size_t&lt;/span&gt; j = &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;; j&amp;lt;height; j++) { &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; actual rendering loop&lt;/span&gt;
        &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;pl-c1&quot;&gt;size_t&lt;/span&gt; i = &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;; i&amp;lt;width; i++) {
            &lt;span class=&quot;pl-k&quot;&gt;float&lt;/span&gt; dir_x =  (i + &lt;span class=&quot;pl-c1&quot;&gt;0.5&lt;/span&gt;) -  width/&lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;.;
            &lt;span class=&quot;pl-k&quot;&gt;float&lt;/span&gt; dir_y = -(j + &lt;span class=&quot;pl-c1&quot;&gt;0.5&lt;/span&gt;) + height/&lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;.;    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; this flips the image at the same time&lt;/span&gt;
            &lt;span class=&quot;pl-k&quot;&gt;float&lt;/span&gt; dir_z = -height/(&lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;.*&lt;span class=&quot;pl-c1&quot;&gt;tan&lt;/span&gt;(fov/&lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;.));
            Vec3f hit;
            &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;pl-c1&quot;&gt;sphere_trace&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;Vec3f&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;), &lt;span class=&quot;pl-c1&quot;&gt;Vec3f&lt;/span&gt;(dir_x, dir_y, dir_z).&lt;span class=&quot;pl-c1&quot;&gt;normalize&lt;/span&gt;(), hit)) { &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; the camera is placed to (0,0,3) and it looks along the -z axis&lt;/span&gt;
                framebuffer[i+j*width] = &lt;span class=&quot;pl-c1&quot;&gt;Vec3f&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;);
            } &lt;span class=&quot;pl-k&quot;&gt;else&lt;/span&gt; {
                framebuffer[i+j*width] = &lt;span class=&quot;pl-c1&quot;&gt;Vec3f&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;0.2&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;0.7&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;0.8&lt;/span&gt;); &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; background color&lt;/span&gt;
            }
        }
    }

    std::ofstream &lt;span class=&quot;pl-smi&quot;&gt;ofs&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;./out.ppm&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, std::ios::binary); &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; save the framebuffer to file&lt;/span&gt;
    ofs &amp;lt;&amp;lt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;P6&lt;span class=&quot;pl-cce&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &amp;lt;&amp;lt; width &amp;lt;&amp;lt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &amp;lt;&amp;lt; height &amp;lt;&amp;lt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-cce&quot;&gt;\n&lt;/span&gt;255&lt;span class=&quot;pl-cce&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;;
    &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;pl-c1&quot;&gt;size_t&lt;/span&gt; i = &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;; i &amp;lt; height*width; ++i) {
        &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;pl-c1&quot;&gt;size_t&lt;/span&gt; j = &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;; j&amp;lt;&lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;; j++) {
            ofs &amp;lt;&amp;lt; (&lt;span class=&quot;pl-k&quot;&gt;char&lt;/span&gt;)(&lt;span class=&quot;pl-c1&quot;&gt;std::max&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;std::min&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;255&lt;/span&gt;, &lt;span class=&quot;pl-k&quot;&gt;static_cast&lt;/span&gt;&amp;lt;&lt;span class=&quot;pl-k&quot;&gt;int&lt;/span&gt;&amp;gt;(&lt;span class=&quot;pl-c1&quot;&gt;255&lt;/span&gt;*framebuffer[i][j]))));
        }
    }
    ofs.&lt;span class=&quot;pl-c1&quot;&gt;close&lt;/span&gt;();

    &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The class of vectors lives in the file geometry.h, I will not describe it here: it is really a trivial manipulation of two and three-dimensional vectors (addition, subtraction, assignment, multiplication by a scalar, scalar product).&lt;/p&gt;
&lt;p&gt;So, in main() function I have two loops: the second one simply saves the picture on a disk, and the first loop iterates through all the pixels of the picture, emits a ray from the camera through this pixel, and checks whether this ray intersects with our sphere.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Attention, the main idea of the approach:&lt;/strong&gt; If in the raytracing article we solved for the intersection of the ray and a sphere analytically, now I compute it numerically. The idea is simple: the sphere has an equation of the form x^2 + y^2 + z^2 - r^2 = 0 ; but the function f(x,y,z) = x^2 + y^2 + y^2 + z^2 - r^2 is defined anywhere in the 3D space. Inside the sphere, the function f(x,y,z) takes negative values, and outside the sphere it is positive. That is, the function f(x,y,z) computes the signed distance to our sphere for each point (x,y,z). Therefore, we will simply slide along the ray until either we get bored or the function f(x,y,z) becomes negative. This is exactly what sphere_trace() does.&lt;/p&gt;

Let us implement the simplest diffuse lighting, this is the image I want to get: &lt;img src=&quot;https://raw.githubusercontent.com/ssloy/tinykaboom/ef22c62142f293cc84a15cc4a6a64882ac1b2f6e/out.jpg&quot;/&gt;&lt;p&gt;The changes are visible &lt;a href=&quot;https://github.com/ssloy/tinykaboom/commit/ef22c62142f293cc84a15cc4a6a64882ac1b2f6e&quot;&gt;in the diff tool&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For the diffuse lighting, in addition to the point of intersection, whe need to know the vector of normal to the surface at this point. I compute this normal vector by simple &lt;a href=&quot;https://en.wikipedia.org/wiki/Finite_difference&quot; rel=&quot;nofollow&quot;&gt;finite differences&lt;/a&gt; on our signed distance function:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-c++&quot;&gt;
&lt;pre&gt;
Vec3f &lt;span class=&quot;pl-en&quot;&gt;distance_field_normal&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; Vec3f &amp;amp;pos) {
    &lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;float&lt;/span&gt; eps = &lt;span class=&quot;pl-c1&quot;&gt;0.1&lt;/span&gt;;
    &lt;span class=&quot;pl-k&quot;&gt;float&lt;/span&gt; d = &lt;span class=&quot;pl-c1&quot;&gt;signed_distance&lt;/span&gt;(pos);
    &lt;span class=&quot;pl-k&quot;&gt;float&lt;/span&gt; nx = &lt;span class=&quot;pl-c1&quot;&gt;signed_distance&lt;/span&gt;(pos + &lt;span class=&quot;pl-c1&quot;&gt;Vec3f&lt;/span&gt;(eps, &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;)) - d;
    &lt;span class=&quot;pl-k&quot;&gt;float&lt;/span&gt; ny = &lt;span class=&quot;pl-c1&quot;&gt;signed_distance&lt;/span&gt;(pos + &lt;span class=&quot;pl-c1&quot;&gt;Vec3f&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;, eps, &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;)) - d;
    &lt;span class=&quot;pl-k&quot;&gt;float&lt;/span&gt; nz = &lt;span class=&quot;pl-c1&quot;&gt;signed_distance&lt;/span&gt;(pos + &lt;span class=&quot;pl-c1&quot;&gt;Vec3f&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;, eps)) - d;
    &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;Vec3f&lt;/span&gt;(nx, ny, nz).&lt;span class=&quot;pl-c1&quot;&gt;normalize&lt;/span&gt;();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Of course, since we draw a simple sphere, the normal can be obtained much easier, but this approach will serve me later.&lt;/p&gt;

Let's draw a pattern on our sphere, for example, this one: &lt;img src=&quot;https://raw.githubusercontent.com/ssloy/tinykaboom/45ea36a1568ca8e1b2f44a1ea55a792709983ef9/out.jpg&quot;/&gt;&lt;p&gt;For this rendering I only modified &lt;a href=&quot;https://github.com/ssloy/tinykaboom/commit/45ea36a1568ca8e1b2f44a1ea55a792709983ef9&quot;&gt;two lines in the code!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;How did I draw the image? Of course, I don't have any textures. I just took the function g(x,y,z) = sin(x) * sin(y) * sin(z); it is defined for each point of the 3D space. When my ray crosses the sphere at some point (x,y,z), the value of the function g(x,y,z) sets the pixel color of the sphere.&lt;/p&gt;
&lt;p&gt;By the way, note the concentric circles on the sphere - these are the artifacts of my numerical calculation of the intersection.&lt;/p&gt;

Why would I want to draw this pattern? In fact, it will help me draw a hedgehog like this: &lt;img src=&quot;https://raw.githubusercontent.com/ssloy/tinykaboom/2c9e70fcee4f09fb563e5272f349763654b1eaad/out.jpg&quot;/&gt;&lt;p&gt;Where my pattern was black, I want to make a dent on our sphere, and where it was white, on the contrary, I'll do a hump. This trick is known under the name of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Displacement_mapping&quot; rel=&quot;nofollow&quot;&gt;displacement mapping&lt;/a&gt;. To implement it, it suffices to &lt;a href=&quot;https://github.com/ssloy/tinykaboom/commit/2c9e70fcee4f09fb563e5272f349763654b1eaad&quot;&gt;modify three lines&lt;/a&gt; in the source code:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-c++&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;signed_distance&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; Vec3f &amp;amp;p) {
    Vec3f s = &lt;span class=&quot;pl-c1&quot;&gt;Vec3f&lt;/span&gt;(p).&lt;span class=&quot;pl-c1&quot;&gt;normalize&lt;/span&gt;(sphere_radius);
    &lt;span class=&quot;pl-k&quot;&gt;float&lt;/span&gt; displacement = &lt;span class=&quot;pl-c1&quot;&gt;sin&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;16&lt;/span&gt;*s.&lt;span class=&quot;pl-smi&quot;&gt;x&lt;/span&gt;)*&lt;span class=&quot;pl-c1&quot;&gt;sin&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;16&lt;/span&gt;*s.&lt;span class=&quot;pl-smi&quot;&gt;y&lt;/span&gt;)*&lt;span class=&quot;pl-c1&quot;&gt;sin&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;16&lt;/span&gt;*s.&lt;span class=&quot;pl-smi&quot;&gt;z&lt;/span&gt;)*noise_amplitude;
    &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; p.&lt;span class=&quot;pl-c1&quot;&gt;norm&lt;/span&gt;() - (sphere_radius + displacement);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In fact, I re-defined the distance to the surface, I compute it as x^2+y^2+z^2 - r^2 - sin(x)*sin(y)*sin(z). We have just drew an &lt;a href=&quot;https://en.wikipedia.org/wiki/Implicit_surface&quot; rel=&quot;nofollow&quot;&gt;implicit surface&lt;/a&gt;.&lt;/p&gt;

Why do I evaluate the product of sines only for the points lying on the sphere? Let us re-define the distance function:
&lt;div class=&quot;highlight highlight-source-c++&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;signed_distance&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; Vec3f &amp;amp;p) {
    &lt;span class=&quot;pl-k&quot;&gt;float&lt;/span&gt; displacement = &lt;span class=&quot;pl-c1&quot;&gt;sin&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;16&lt;/span&gt;*p.&lt;span class=&quot;pl-smi&quot;&gt;x&lt;/span&gt;)*&lt;span class=&quot;pl-c1&quot;&gt;sin&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;16&lt;/span&gt;*p.&lt;span class=&quot;pl-smi&quot;&gt;y&lt;/span&gt;)*&lt;span class=&quot;pl-c1&quot;&gt;sin&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;16&lt;/span&gt;*p.&lt;span class=&quot;pl-smi&quot;&gt;z&lt;/span&gt;)*noise_amplitude;
    &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; p.&lt;span class=&quot;pl-c1&quot;&gt;norm&lt;/span&gt;() - (sphere_radius + displacement);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The difference is very small, it is better visible &lt;a href=&quot;https://github.com/ssloy/tinykaboom/commit/ec1ed71b23bf398af1aade84e1a7a45afcbe57b5&quot;&gt;in the github diff&lt;/a&gt; tool. Here is the render:&lt;/p&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/ssloy/tinykaboom/ec1ed71b23bf398af1aade84e1a7a45afcbe57b5/out.jpg&quot;/&gt;&lt;p&gt;In such a way we can draw disconnected components!&lt;/p&gt;

The previous picture is already starting to resemble an explosion, but the product of sines gives a very regular pattern. I'd like to have some more &quot;torn&quot;, more &quot;random&quot; function... We will be helped by the &lt;a href=&quot;https://en.wikipedia.org/wiki/Perlin_noise&quot; rel=&quot;nofollow&quot;&gt;Perlin's noise&lt;/a&gt;. Something like this would be much better for our purposes: &lt;img src=&quot;https://camo.githubusercontent.com/9597e2847e8c399cfef43f95b37d77fdbc9ef9e6/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f656e2f652f65352f5065726c696e2e706e67&quot; data-canonical-src=&quot;https://upload.wikimedia.org/wikipedia/en/e/e5/Perlin.png&quot;/&gt;&lt;p&gt;How to generate such noise - is out of the scope of this article, but here's the main idea: you need to generate random images with different resolutions, smooth them out to get something like this set:&lt;/p&gt;
&lt;img src=&quot;https://camo.githubusercontent.com/d99b2db17dc8dba3083c09dfa1cc1c9bcc64c622/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f3830302f312a494b5759634a6d73784b674c674a49745041766758512e706e67&quot; data-canonical-src=&quot;https://cdn-images-1.medium.com/max/800/1*IKWYcJmsxKgLgJItPAvgXQ.png&quot;/&gt;&lt;p&gt;And then simply sum all of them:&lt;/p&gt;
&lt;img src=&quot;https://camo.githubusercontent.com/11169e6b64d524121b48f1190e58fa09bd6d3a5f/68747470733a2f2f6c6962726172792e6372656174697665636f772e6e65742f61727469636c65732f7a7761725f63687269732f6672616374616c5f6e6f6973652f33645f64656d6f2e6a7067&quot; data-canonical-src=&quot;https://library.creativecow.net/articles/zwar_chris/fractal_noise/3d_demo.jpg&quot;/&gt;&lt;p&gt;You can find more details &lt;a href=&quot;https://medium.com/100-days-of-algorithms/day-88-perlin-noise-96d23158a44c&quot; rel=&quot;nofollow&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://library.creativecow.net/articles/zwar_chris/fractal_noise.php&quot; rel=&quot;nofollow&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So let us add &lt;a href=&quot;https://github.com/ssloy/tinykaboom/commit/6ac4658d75cadaf095af7994572d79ceb395af9a&quot;&gt;a little bit of code&lt;/a&gt;, allowing us to generate the noise, and our render transforms magically:&lt;/p&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/ssloy/tinykaboom/6ac4658d75cadaf095af7994572d79ceb395af9a/out.jpg&quot;/&gt;&lt;p&gt;Please notice that we did not modify the actual rendering code! We have only redefined the distance to the surface, i.e. the function that &quot;crumples&quot; the sphere and &quot;tears&quot; it apart.&lt;/p&gt;

The only thing I have added in this commit, is the fire colors. Instead of uniform white color I apply colors as a function of the noise amount, &lt;a href=&quot;https://github.com/ssloy/tinykaboom/commit/585c779712baa7bdae89e6eeccdb90da12bcbf06&quot;&gt;check the modifications&lt;/a&gt;:
&lt;div class=&quot;highlight highlight-source-c++&quot;&gt;
&lt;pre&gt;
Vec3f &lt;span class=&quot;pl-en&quot;&gt;palette_fire&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;float&lt;/span&gt; d) {
    &lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; Vec3f   &lt;span class=&quot;pl-smi&quot;&gt;yellow&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;1.7&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;1.3&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;1.0&lt;/span&gt;); &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; note that the color is &quot;hot&quot;, i.e. has components &amp;gt;1&lt;/span&gt;
    &lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; Vec3f   &lt;span class=&quot;pl-smi&quot;&gt;orange&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;1.0&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;0.6&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;0.0&lt;/span&gt;);
    &lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; Vec3f      &lt;span class=&quot;pl-smi&quot;&gt;red&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;1.0&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;0.0&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;0.0&lt;/span&gt;);
    &lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; Vec3f &lt;span class=&quot;pl-smi&quot;&gt;darkgray&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;0.2&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;0.2&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;0.2&lt;/span&gt;);
    &lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; Vec3f     &lt;span class=&quot;pl-smi&quot;&gt;gray&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;0.4&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;0.4&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;0.4&lt;/span&gt;);

    &lt;span class=&quot;pl-k&quot;&gt;float&lt;/span&gt; x = &lt;span class=&quot;pl-c1&quot;&gt;std::max&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;f&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;std::min&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;f&lt;/span&gt;, d));
    &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (x&amp;lt;.&lt;span class=&quot;pl-c1&quot;&gt;25f&lt;/span&gt;)
        &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;lerp&lt;/span&gt;(gray, darkgray, x*&lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;f&lt;/span&gt;);
    &lt;span class=&quot;pl-k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (x&amp;lt;.&lt;span class=&quot;pl-c1&quot;&gt;5f&lt;/span&gt;)
        &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;lerp&lt;/span&gt;(darkgray, red, x*&lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;f&lt;/span&gt;-&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;f&lt;/span&gt;);
    &lt;span class=&quot;pl-k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (x&amp;lt;.&lt;span class=&quot;pl-c1&quot;&gt;75f&lt;/span&gt;)
        &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;lerp&lt;/span&gt;(red, orange, x*&lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;f&lt;/span&gt;-&lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;f&lt;/span&gt;);
    &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;lerp&lt;/span&gt;(orange, yellow, x*&lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;f&lt;/span&gt;-&lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;f&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The colors are defined as a simple linear ramp between five key colors. Here is the final render!&lt;/p&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/ssloy/tinykaboom/master/out.jpg&quot;/&gt;
This raytracing technique is known as the ray marching. The home assignement: take the previous &lt;a href=&quot;https://github.com/ssloy/tinyraytracer/wiki&quot;&gt;raytracer&lt;/a&gt; with blackjack and refractions, and merge it with the KABOOM! Make the KABOOM! illuminate the scene. Add transparency. KABOOM!&lt;/div&gt;
</description>
<pubDate>Sun, 27 Jan 2019 18:07:59 +0000</pubDate>
<dc:creator>haqreu</dc:creator>
<og:image>https://avatars0.githubusercontent.com/u/1029298?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>ssloy/tinykaboom</og:title>
<og:url>https://github.com/ssloy/tinykaboom</og:url>
<og:description>A brief computer graphics / rendering course. Contribute to ssloy/tinykaboom development by creating an account on GitHub.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/ssloy/tinykaboom/wiki</dc:identifier>
</item>
<item>
<title>HTTP/3: from root to tip</title>
<link>https://blog.cloudflare.com/http-3-from-root-to-tip/</link>
<guid isPermaLink="true" >https://blog.cloudflare.com/http-3-from-root-to-tip/</guid>
<description>&lt;p&gt;HTTP is the application protocol that powers the Web. It began life as the so-called HTTP/0.9 protocol in 1991, and by 1999 had evolved to HTTP/1.1, which was standardised within the IETF (Internet Engineering Task Force). HTTP/1.1 was good enough for a long time but the ever changing needs of the Web called for a better suited protocol, and HTTP/2 emerged in 2015. More recently it was announced that the IETF is intending to deliver a new version - HTTP/3. To some people this is a surprise and has caused a bit of confusion. If you don't track IETF work closely it might seem that HTTP/3 has come out of the blue. However,  we can trace its origins through a lineage of experiments and evolution of Web protocols; specifically the QUIC transport protocol.&lt;/p&gt;
&lt;p&gt;If you're not familiar with QUIC, my colleagues have done a great job of tackling different angles. John's &lt;a href=&quot;https://blog.cloudflare.com/the-quicening/&quot;&gt;blog&lt;/a&gt; describes some of the real-world annoyances of today's HTTP, Alessandro's &lt;a href=&quot;https://blog.cloudflare.com/the-road-to-quic/&quot;&gt;blog&lt;/a&gt; tackles the nitty-gritty transport layer details, and Nick's &lt;a href=&quot;https://blog.cloudflare.com/head-start-with-quic/&quot;&gt;blog&lt;/a&gt; covers how to get hands on with some testing. We've collected these and more at &lt;a href=&quot;https://cloudflare-quic.com&quot;&gt;https://cloudflare-quic.com&lt;/a&gt;. And if that tickles your fancy, be sure to check out &lt;a href=&quot;https://blog.cloudflare.com/enjoy-a-slice-of-quic-and-rust/&quot;&gt;quiche&lt;/a&gt;, our own open-source implementation of the QUIC protocol written in Rust.&lt;/p&gt;
&lt;p&gt;HTTP/3 is the HTTP application mapping to the QUIC transport layer. This name was made official in the recent draft version 17 (&lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-quic-http-17&quot;&gt;draft-ietf-quic-http-17&lt;/a&gt;), which was proposed in late October 2018, with discussion and rough consensus being formed during the IETF 103 meeting in Bangkok in November. HTTP/3 was previously known as HTTP over QUIC, which itself was previously known as HTTP/2 over QUIC. Before that we had HTTP/2 over gQUIC, and way back we had SPDY over gQUIC. The fact of the matter, however, is that HTTP/3 is just a new HTTP syntax that works on IETF QUIC, a UDP-based multiplexed and secure transport.&lt;/p&gt;
&lt;p&gt;In this blog post we'll explore the history behind some of HTTP/3's previous names and present the motivation behind the most recent name change. We'll go back to the early days of HTTP and touch on all the good work that has happened along the way. If you're keen to get the full picture you can jump to the end of the article or open this &lt;a href=&quot;https://blog.cloudflare.com/content/images/2019/01/web_timeline_large1.svg&quot; download=&quot;&quot;&gt;highly detailed SVG version&lt;/a&gt;.&lt;/p&gt;
&lt;img src=&quot;https://blog.cloudflare.com/content/images/2019/01/http3-stack.png&quot; class=&quot;kg-image&quot;/&gt;An HTTP/3 layer cake
&lt;h2 id=&quot;setting-the-scene&quot;&gt;Setting the scene&lt;/h2&gt;
&lt;p&gt;Just before we focus on HTTP, it is worth reminding ourselves that there are two protocols that share the name QUIC. As we explained &lt;a href=&quot;https://blog.cloudflare.com/the-road-to-quic/&quot;&gt;previously&lt;/a&gt;, gQUIC is commonly used to identify Google QUIC (the original protocol), and QUIC is commonly used to represent the IETF standard-in-progress version that diverges from gQUIC.&lt;/p&gt;
&lt;p&gt;Since its early days in the 90s, the web’s needs have changed. We've had new versions of HTTP and added user security in the shape of Transport Layer Security (TLS). We'll only touch on TLS in this post, our other &lt;a href=&quot;https://blog.cloudflare.com/tag/tls/&quot;&gt;blog posts&lt;/a&gt; are a great resource if you want to explore that area in more detail.&lt;/p&gt;
&lt;p&gt;To help me explain the history of HTTP and TLS, I started to collate details of protocol specifications and dates. This information is usually presented in a textual form such as a list of bullets points stating document titles, ordered by date. However, there are branching standards, each overlapping in time and a simple list cannot express the real complexity of relationships. In HTTP, there has been parallel work that refactors core protocol definitions for easier consumption, extends the protocol for new uses, and redefines how the protocol exchanges data over the Internet for performance. When you're trying to join the dots over nearly 30 years of Internet history across different branching work streams you need a visualisation. So I made one -  the Cloudflare Secure Web Timeline. (NB: Technically it is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Cladogram&quot;&gt;Cladogram&lt;/a&gt;, but the term timeline is more widely known).&lt;/p&gt;
&lt;p&gt;I have applied some artistic license when creating this, choosing to focus on the successful branches in the IETF space. Some of the things not shown include efforts in the W3 Consortium &lt;a href=&quot;https://www.w3.org/Protocols/HTTP-NG/&quot;&gt;HTTP-NG&lt;/a&gt; working group, along with some exotic ideas that their authors are keen on explaining how to pronounce:  &lt;a href=&quot;https://blog.jgc.org/2012/12/speeding-up-http-with-minimal-protocol.html&quot;&gt;HMURR (pronounced 'hammer')&lt;/a&gt; and &lt;a href=&quot;https://github.com/HTTPWorkshop/workshop2017/blob/master/talks/waka.pdf&quot;&gt;WAKA (pronounced “wah-kah”)&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;In the next few sections I'll walk this timeline to explain critical chapters in the history of HTTP. To enjoy the takeaways from this post, it helps to have an appreciation of why standardisation is beneficial, and how the IETF approaches it. Therefore we'll start with a very brief overview of that topic before returning to the timeline itself. Feel free to skip the next section if you are already familiar with the IETF.&lt;/p&gt;
&lt;h2 id=&quot;types-of-internet-standard&quot;&gt;Types of Internet standard&lt;/h2&gt;
&lt;p&gt;Generally, standards define common terms of reference, scope, constraint, applicability, and other considerations. Standards exist in many shapes and sizes, and can be informal (aka de facto) or formal (agreed/published by a Standards Defining Organisation such as IETF, ISO or MPEG). Standards are used in many fields, there is even a formal British Standard for making tea - BS 6008.&lt;/p&gt;
&lt;p&gt;The early Web used HTTP and SSL protocol definitions that were published outside the IETF, these are marked as &lt;strong&gt;red lines&lt;/strong&gt; on the Secure Web Timeline. The uptake of these protocols by clients and servers made them de facto standards.&lt;/p&gt;
&lt;p&gt;At some point, it was decided to formalise these protocols (some motivating reasons are described in a later section). Internet standards are commonly defined in the IETF, which is guided by the informal principle of &quot;rough consensus and running code&quot;. This is grounded in experience of developing and deploying things on the Internet. This is in contrast to a &quot;clean room&quot; approach of trying to develop perfect protocols in a vacuum.&lt;/p&gt;
&lt;p&gt;IETF Internet standards are commonly known as RFCs. This is a complex area to explain so I recommend reading the blog post &quot;&lt;a href=&quot;https://www.ietf.org/blog/how-read-rfc/&quot;&gt;How to Read an RFC&lt;/a&gt;&quot; by the QUIC Working Group Co-chair Mark Nottingham. A Working Group, or WG, is more or less just a mailing list.&lt;/p&gt;
&lt;p&gt;Each year the IETF hold three meetings that provide the time and facilities for all WGs to meet in person if they wish. The agenda for these weeks can become very congested, with limited time available to discuss highly technical areas in depth. To overcome this, some WGs choose to also hold interim meetings in the months between the the general IETF meetings. This can help to maintain momentum on specification development. The QUIC WG has held several interim meetings since 2017, a full list is available on their &lt;a href=&quot;https://datatracker.ietf.org/wg/quic/meetings/&quot;&gt;meeting page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;These IETF meetings also provide the opportunity for other IETF-related collections of people to meet, such as the &lt;a href=&quot;https://www.iab.org/&quot;&gt;Internet Architecture Board&lt;/a&gt; or &lt;a href=&quot;https://irtf.org/&quot;&gt;Internet Research Task Force&lt;/a&gt;. In recent years, an &lt;a href=&quot;https://www.ietf.org/how/runningcode/hackathons/&quot;&gt;IETF Hackathon&lt;/a&gt; has been held during the weekend preceding the IETF meeting. This provides an opportunity for the community to develop running code and, importantly, to carry out interoperability testing in the same room with others. This helps to find issues in specifications that can be discussed in the following days.&lt;/p&gt;
&lt;p&gt;For the purposes of this blog, the important thing to understand is that RFCs don't just spring into existence. Instead, they go through a process that usually starts with an IETF Internet Draft (I-D) format that is submitted for consideration of adoption. In the case where there is already a published specification, preparation of an I-D might just be a simple reformatting exercise. I-Ds have a 6 month active lifetime from the date of publish. To keep them active, new versions need to be published. In practice, there is not much consequence to letting an I-D elapse and it happens quite often. The documents continue to be hosted on the &lt;a href=&quot;https://datatracker.ietf.org/doc/recent&quot;&gt;IETF document’s website&lt;/a&gt; for anyone that wants to read them.&lt;/p&gt;
&lt;p&gt;I-Ds are represented on the Secure Web Timeline as &lt;strong&gt;purple lines&lt;/strong&gt;. Each one has a unique name that takes the form of &lt;em&gt;draft-{author name}-{working group}-{topic}-{version}&lt;/em&gt;. The working group field is optional, it might predict IETF WG that will work on the piece and sometimes this changes. If an I-D is adopted by the IETF, or if the I-D was initiated directly within the IETF, the name is &lt;em&gt;draft-ietf-{working group}-{topic}-{version}&lt;/em&gt;. I-Ds may branch, merge or die on the vine. The version starts at 00 and increases by 1 each time a new draft is released. For example, the 4th draft of an I-D will have the version 03. Any time that an I-D changes name, its version resets back to 00.&lt;/p&gt;
&lt;p&gt;It is important to note that anyone can submit an I-D to the IETF; you should not consider these as standards. But, if the IETF standardisation process of an I-D does reach consensus, and the final document passes review, we finally get an RFC. The name changes again at this stage. Each RFC gets a unique number e.g. &lt;a href=&quot;https://tools.ietf.org/html/rfc7230&quot;&gt;RFC 7230&lt;/a&gt;. These are represented as &lt;strong&gt;blue lines&lt;/strong&gt; on the Secure Web Timeline.&lt;/p&gt;
&lt;p&gt;RFCs are immutable documents. This means that changes to the RFC require a completely new number. Changes might be done in order to incorporate fixes for errata (editorial or technical errors that were found and reported) or simply to refactor the specification to improve layout. RFCs may &lt;strong&gt;obsolete&lt;/strong&gt; older versions (complete replacement), or just &lt;strong&gt;update&lt;/strong&gt; them (substantively change).&lt;/p&gt;
&lt;p&gt;All IETF documents are openly available on &lt;a href=&quot;http://tools.ietf.org&quot;&gt;http://tools.ietf.org&lt;/a&gt;. Personally I find the &lt;a href=&quot;https://datatracker.ietf.org&quot;&gt;IETF Datatracker&lt;/a&gt; a little more user friendly because it provides a visualisation of a documents progress from I-D to RFC.&lt;/p&gt;
&lt;p&gt;Below is an example that shows the development of &lt;a href=&quot;https://tools.ietf.org/html/rfc1945&quot;&gt;RFC 1945&lt;/a&gt; - HTTP/1.0 and it is a clear source of inspiration for the Secure Web Timeline.&lt;/p&gt;
&lt;img src=&quot;https://blog.cloudflare.com/content/images/2019/01/RFC-1945-datatracker.png&quot; class=&quot;kg-image&quot;/&gt;IETF Datatracker view of RFC 1945
&lt;p&gt;Interestingly, in the course of my work I found that the above visualisation is incorrect. It is missing &lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-http-v10-spec-05&quot;&gt;draft-ietf-http-v10-spec-05&lt;/a&gt; for some reason. Since the I-D lifetime is 6 months, there appears to be a gap before it became an RFC, whereas in reality draft 05 was still active through until August 1996.&lt;/p&gt;
&lt;h2 id=&quot;exploring-the-secure-web-timeline&quot;&gt;Exploring the Secure Web Timeline&lt;/h2&gt;
&lt;p&gt;With a small appreciation of how Internet standards documents come to fruition, we can start to walk the the Secure Web Timeline. In this section are a number of excerpt diagrams that show an important part of the timeline. Each dot represents the date that a document or capability was made available. For IETF documents, draft numbers are omitted for clarity. However, if you want to see all that detail please check out the &lt;a href=&quot;https://blog.cloudflare.com/content/images/2019/01/web_timeline_large1.svg&quot; download=&quot;&quot;&gt;complete timeline&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;HTTP began life as the so-called HTTP/0.9 protocol in 1991, and in 1994 the I-D &lt;a href=&quot;https://tools.ietf.org/html/draft-fielding-http-spec-00&quot;&gt;draft-fielding-http-spec-00&lt;/a&gt; was published. This was adopted by the IETF soon after, causing the name change to &lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-http-v10-spec-00&quot;&gt;draft-ietf-http-v10-spec-00&lt;/a&gt;. The I-D went through 6 draft versions before being published as &lt;a href=&quot;https://tools.ietf.org/html/rfc1945&quot;&gt;RFC 1945&lt;/a&gt; - HTTP/1.0 in 1996.&lt;/p&gt;
&lt;img src=&quot;https://blog.cloudflare.com/content/images/2019/01/http11-standardisation.png&quot; class=&quot;kg-image&quot;/&gt;&lt;p&gt;However, even before the HTTP/1.0 work completed, a separate activity started on HTTP/1.1. The I-D &lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-http-v11-spec-00&quot;&gt;draft-ietf-http-v11-spec-00&lt;/a&gt; was published in November 1995 and was formally published as &lt;a href=&quot;https://tools.ietf.org/html/rfc2068&quot;&gt;RFC 2068&lt;/a&gt; in 1997. The keen eyed will spot that the Secure Web Timeline doesn't quite capture that sequence of events, this is an unfortunate side effect of the tooling used to generate the visualisation. I tried to minimise such problems where possible.&lt;/p&gt;
&lt;p&gt;An HTTP/1.1 revision exercise was started in mid-1997 in the form of &lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-http-v11-spec-rev-00&quot;&gt;draft-ietf-http-v11-spec-rev-00&lt;/a&gt;. This completed in 1999 with the publication of &lt;a href=&quot;https://tools.ietf.org/html/rfc2616&quot;&gt;RFC 2616&lt;/a&gt;. Things went quiet in the IETF HTTP world until 2007. We'll come back to that shortly.&lt;/p&gt;
&lt;h2 id=&quot;a-history-of-ssl-and-tls&quot;&gt;A History of SSL and TLS&lt;/h2&gt;
&lt;img src=&quot;https://blog.cloudflare.com/content/images/2019/01/ssl-tls-standardisation.png&quot; class=&quot;kg-image&quot;/&gt;&lt;p&gt;Switching tracks to SSL. We see that the SSL 2.0 specification was released sometime around 1995, and that SSL 3.0 was released in November 1996. Interestingly, SSL 3.0 is described by &lt;a href=&quot;https://tools.ietf.org/html/rfc6101&quot;&gt;RFC 6101&lt;/a&gt;, which was released in August 2011. This sits in &lt;strong&gt;Historic&lt;/strong&gt; category, which &quot;is usually done to document ideas that were considered and discarded, or protocols that were already historic when it was decided to document them.&quot; according to the &lt;a href=&quot;https://www.ietf.org/blog/iesg-statement-designating-rfcs-historic/?primary_topic=7&amp;amp;&quot;&gt;IETF&lt;/a&gt;. In this case it is advantageous to have an IETF-owned document that describes SSL 3.0 because it can be used as a canonical reference elsewhere.&lt;/p&gt;
&lt;p&gt;Of more interest to us is how SSL inspired the development of TLS, which began life as &lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-tls-protocol-00&quot;&gt;draft-ietf-tls-protocol-00&lt;/a&gt; in November 1996. This went through 6 draft versions and was published as &lt;a href=&quot;https://tools.ietf.org/html/rfc2246&quot;&gt;RFC 2246&lt;/a&gt; - TLS 1.0 at the start of 1999.&lt;/p&gt;
&lt;p&gt;Between 1995 and 1999, the SSL and TLS protocols were used to secure HTTP communications on the Internet. This worked just fine as a de facto standard. It wasn't until January 1998 that the formal standardisation process for HTTPS was started with the publication of I-D &lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-tls-https-00&quot;&gt;draft-ietf-tls-https-00&lt;/a&gt;. That work concluded in May 2000 with the publication of &lt;a href=&quot;https://tools.ietf.org/html/rfc2616&quot;&gt;RFC 2616&lt;/a&gt; - HTTP over TLS.&lt;/p&gt;
&lt;p&gt;TLS continued to evolve between 2000 and 2007, with the standardisation of TLS 1.1 and 1.2. There was a gap of 7 years until work began on the next version of TLS, which was adopted as &lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-tls-tls13-00&quot;&gt;draft-ietf-tls-tls13-00&lt;/a&gt; in April 2014 and, after 28 drafts, completed as &lt;a href=&quot;https://tools.ietf.org/html/rfc8446&quot;&gt;RFC 8446&lt;/a&gt; - TLS 1.3 in August 2018.&lt;/p&gt;
&lt;h2 id=&quot;internet-standardisation-process&quot;&gt;Internet standardisation process&lt;/h2&gt;
&lt;p&gt;After taking a small look at the timeline, I hope you can build a sense of how the IETF works. One generalisation for the way that Internet standards take shape is that researchers or engineers design experimental protocols that suit their specific use case. They experiment with protocols, in public or private, at various levels of scale. The data helps to identify improvements or issues. The work may be published to explain the experiment, to gather wider input or to help find other implementers. Take up of this early work by others may make it a de facto standard; eventually there may be sufficient momentum that formal standardisation becomes an option.&lt;/p&gt;
&lt;p&gt;The status of a protocol can be an important consideration for organisations that may be thinking about implementing, deploying or in some way using it. A formal standardisation process can make a de facto standard more attractive because it tends to provide stability. The stewardship and guidance is provided by an organisation, such as the IETF, that reflects a wider range of experiences. However, it is worth highlighting that not all all formal standards succeed.&lt;/p&gt;
&lt;p&gt;The process of creating a final standard is almost as important as the standard itself. Taking an initial idea and inviting contribution from people with wider knowledge, experience and use cases can to help produce something that will be of more use to a wider population. However, the standardisation process is not always easy. There are pitfalls and hurdles. Sometimes the process takes so long that the output is no longer relevant.&lt;/p&gt;
&lt;p&gt;Each Standards Defining Organisation tends to have its own process that is geared around its field and participants. Explaining all of the details about how the IETF works is well beyond the scope of this blog. The IETF's &quot;&lt;a href=&quot;https://www.ietf.org/how/&quot;&gt;How we work&lt;/a&gt;&quot; page is an excellent starting point that covers many aspects. The best method to forming understanding, as usual, is to get involved yourself. This can be as easy as joining an email list or adding to discussion on a relevant GitHub repository.&lt;/p&gt;
&lt;h2 id=&quot;cloudflare-s-running-code&quot;&gt;Cloudflare's running code&lt;/h2&gt;
&lt;p&gt;Cloudflare is proud to be early an adopter of new and evolving protocols. We have a long record of adopting new standards early, such as &lt;a href=&quot;https://blog.cloudflare.com/introducing-http2/&quot;&gt;HTTP/2&lt;/a&gt;. We also test  features that are experimental or yet to be final, like &lt;a href=&quot;https://blog.cloudflare.com/introducing-tls-1-3/&quot;&gt;TLS 1.3&lt;/a&gt; and &lt;a href=&quot;https://blog.cloudflare.com/introducing-spdy/&quot;&gt;SPDY&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In relation to the IETF standardisation process, deploying this running code on real networks across a diverse body of websites helps us understand how well the protocol will work in practice. We combine our existing expertise with experimental information to help improve the running code and, where it makes sense, feedback issues or improvements to the WG that is standardising a protocol.&lt;/p&gt;
&lt;p&gt;Testing new things is not the only priority. Part of being an innovator is knowing when it is time to move forward and put older innovations in the rear view mirror. Sometimes this relates to security-oriented protocols, for example, Cloudflare &lt;a href=&quot;https://blog.cloudflare.com/sslv3-support-disabled-by-default-due-to-vulnerability/&quot;&gt;disabled SSLv3 by default&lt;/a&gt; due of the POODLE vulnerability. In other cases, protocols become superseded by a more technologically advanced one; Cloudflare &lt;a href=&quot;https://blog.cloudflare.com/deprecating-spdy/&quot;&gt;deprecated SPDY&lt;/a&gt; support in favour of HTTP/2.&lt;/p&gt;
&lt;p&gt;The introduction and deprecation of relevant protocols are represented on the Secure Web Timeline as &lt;strong&gt;orange lines&lt;/strong&gt;. Dotted vertical lines help correlate Cloudflare events to relevant IETF documents. For example, Cloudflare introduced TLS 1.3 support in September 2016, with the final document, &lt;a href=&quot;https://tools.ietf.org/html/rfc8446&quot;&gt;RFC 8446&lt;/a&gt;, being published almost two years later in August 2018.&lt;/p&gt;
&lt;img src=&quot;https://blog.cloudflare.com/content/images/2019/01/cf-events.png&quot; class=&quot;kg-image&quot;/&gt;&lt;h2 id=&quot;refactoring-in-httpbis&quot;&gt;Refactoring in HTTPbis&lt;/h2&gt;
&lt;p&gt;HTTP/1.1 is a very successful protocol and the timeline shows that there wasn't much activity in the IETF after 1999. However, the true reflection is that years of active use gave implementation experience that unearthed latent issues with &lt;a href=&quot;https://tools.ietf.org/html/rfc2616&quot;&gt;RFC 2616&lt;/a&gt;, which caused some interoperability issues. Furthermore, the protocol was extended by other RFCs like 2817 and 2818. It was decided in 2007 to kickstart a new activity to improve the HTTP protocol specification. This was called HTTPbis (where &quot;bis&quot; stems from Latin meaning &quot;two&quot;, &quot;twice&quot; or &quot;repeat&quot;) and it took the form of a new Working Group. The original &lt;a href=&quot;https://tools.ietf.org/wg/httpbis/charters?item=charter-httpbis-2007-10-23.txt&quot;&gt;charter&lt;/a&gt; does a good job of describing the problems that were trying to be solved.&lt;/p&gt;
&lt;p&gt;In short, HTTPbis decided to refactor &lt;a href=&quot;https://tools.ietf.org/html/rfc2616&quot;&gt;RFC 2616&lt;/a&gt;. It would incorporate errata fixes and buy in some aspects of other specifications that had been published in the meantime. It was decided to split the document up into parts. This resulted in 6 I-Ds published in December 2007:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;draft-ietf-httpbis-p1-messaging&lt;/li&gt;
&lt;li&gt;draft-ietf-httpbis-p2-semantics&lt;/li&gt;
&lt;li&gt;draft-ietf-httpbis-p4-conditional&lt;/li&gt;
&lt;li&gt;draft-ietf-httpbis-p5-range&lt;/li&gt;
&lt;li&gt;draft-ietf-httpbis-p6-cache&lt;/li&gt;
&lt;li&gt;draft-ietf-httpbis-p7-auth&lt;/li&gt;
&lt;/ul&gt;&lt;img src=&quot;https://blog.cloudflare.com/content/images/2019/01/http11-refactor.png&quot; class=&quot;kg-image&quot;/&gt;&lt;p&gt;The diagram shows how this work progressed through a lengthy drafting process of 7 years, with 27 draft versions being released, before final standardisation. In June 2014, the so-called RFC 723x series was released (where x ranges from 0 to 5). The Chair of the HTTPbis WG celebrated this achievement with the acclimation &quot;&lt;a href=&quot;https://www.mnot.net/blog/2014/06/07/rfc2616_is_dead&quot;&gt;RFC2616 is Dead&lt;/a&gt;&quot;. If it wasn't clear, these new documents obsoleted the older &lt;a href=&quot;https://tools.ietf.org/html/rfc2616&quot;&gt;RFC 2616&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;what-does-any-of-this-have-to-do-with-http-3&quot;&gt;What does any of this have to do with HTTP/3?&lt;/h2&gt;
&lt;p&gt;While the IETF was busy working on the RFC 723x series the world didn't stop. People continued to enhance, extend and experiment with HTTP on the Internet. Among them were Google, who had started to experiment with something called SPDY (pronounced speedy). This protocol was touted as improving the performance of web browsing, a principle use case for HTTP. At the end of 2009 SPDY v1 was announced, and it was quickly followed by SPDY v2 in 2010.&lt;/p&gt;
&lt;p&gt;I want to avoid going into the technical details of SPDY. That's a topic for another day. What is important, is to understand that SPDY took the core paradigms of HTTP and modified the interchange format slightly in order to gain improvements. With hindsight, we can see that HTTP has clearly delimited semantics and syntax. Semantics describe the concept of request and response exchanges including: methods, status codes, header fields (metadata) and bodies (payload). Syntax describe how to map semantics to bytes on the wire.&lt;/p&gt;
&lt;p&gt;HTTP/0.9, 1.0 and 1.1 share many semantics. They also share syntax in the form of character strings that are sent over TCP connections. SPDY took HTTP/1.1 semantics and changed the syntax from strings to binary. This is a really interesting topic but we will go no further down that rabbit hole today.&lt;/p&gt;
&lt;p&gt;Google's experiments with SPDY showed that there was promise in changing HTTP syntax, and value in keeping the existing HTTP semantics. For example, keeping the format of URLs to use  https:// avoided many problems that could have affected adoption.&lt;/p&gt;
&lt;p&gt;Having seen some of the positive outcomes, the IETF decided it was time to consider what HTTP/2.0 might look like. The &lt;a href=&quot;https://github.com/httpwg/wg-materials/blob/gh-pages/ietf83/HTTP2.pdf&quot;&gt;slides&lt;/a&gt; from the HTTPbis session held during IETF 83 in March 2012 show the requirements, goals and measures of success that were set out. It is also clearly states that &quot;HTTP/2.0 only signifies that the wire format isn't compatible with that of HTTP/1.x&quot;.&lt;/p&gt;
&lt;img src=&quot;https://blog.cloudflare.com/content/images/2019/01/http2-standardisation.png&quot; class=&quot;kg-image&quot;/&gt;&lt;p&gt;During that meeting the community was invited to share proposals. I-Ds that were submitted for consideration included &lt;a href=&quot;https://tools.ietf.org/html/draft-mbelshe-httpbis-spdy-00&quot;&gt;draft-mbelshe-httpbis-spdy-00&lt;/a&gt;, &lt;a href=&quot;https://tools.ietf.org/html/draft-montenegro-httpbis-speed-mobility-00&quot;&gt;draft-montenegro-httpbis-speed-mobility-00&lt;/a&gt; and &lt;a href=&quot;https://tools.ietf.org/html/draft-tarreau-httpbis-network-friendly-00&quot;&gt;draft-tarreau-httpbis-network-friendly-00&lt;/a&gt;. Ultimately, the SPDY draft was adopted and in November 2012 work began on &lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-httpbis-http2-00&quot;&gt;draft-ietf-httpbis-http2-00&lt;/a&gt;. After 18 drafts across a period of just over 2 years, &lt;a href=&quot;https://tools.ietf.org/html/rfc7540&quot;&gt;RFC 7540&lt;/a&gt; - HTTP/2 was published in 2015. During this specification period, the precise syntax of HTTP/2 diverged just enough to make HTTP/2 and SPDY incompatible.&lt;/p&gt;
&lt;p&gt;These years were a very busy period for the HTTP-related work at the IETF, with the HTTP/1.1 refactor and HTTP/2 standardisation taking place in parallel. This is in stark contrast to the many years of quiet in the early 2000s. Be sure to check out the full timeline to really appreciate the amount of work that took place.&lt;/p&gt;
&lt;p&gt;Although HTTP/2 was in the process of being standardised, there was still benefit to be had from using and experimenting with SPDY. Cloudflare &lt;a href=&quot;https://blog.cloudflare.com/spdy-now-one-click-simple-for-any-website/&quot;&gt;introduced support for SPDY&lt;/a&gt; in August 2012 and only deprecated it in February 2018 when our statistics showed that less than 4% of Web clients continued to want SPDY. Meanwhile, we &lt;a href=&quot;https://blog.cloudflare.com/introducing-http2/&quot;&gt;introduced HTTP/2&lt;/a&gt; support in December 2015, not long after the RFC was published, when our analysis indicated that a meaningful proportion of Web clients could take advantage of it.&lt;/p&gt;
&lt;p&gt;Web client support of the SPDY and HTTP/2 protocols preferred the secure option of using TLS. The introduction of &lt;a href=&quot;https://blog.cloudflare.com/introducing-universal-ssl/&quot;&gt;Universal SSL&lt;/a&gt; in September 2014 helped ensure that all websites signed up to Cloudflare were able to take advantage of these new protocols as we introduced them.&lt;/p&gt;
&lt;h3 id=&quot;gquic&quot;&gt;gQUIC&lt;/h3&gt;
&lt;p&gt;Google continued to experiment between 2012 and 2015 they released SPDY v3 and v3.1. They also started working on gQUIC (pronounced, at the time, as quick) and the initial public specification was made available in early 2012.&lt;/p&gt;
&lt;p&gt;The early versions of gQUIC made use of the SPDY v3 form of HTTP syntax. This choice made sense because HTTP/2 was not yet finished. The SPDY binary syntax was packaged into QUIC packets that could sent in UDP datagrams. This was a departure from the TCP transport that HTTP traditionally relied on. When stacked up all together this looked like:&lt;/p&gt;
&lt;img src=&quot;https://blog.cloudflare.com/content/images/2019/01/gquic-stack.png&quot; class=&quot;kg-image&quot;/&gt;SPDY over gQUIC layer cake
&lt;p&gt;gQUIC used clever tricks to achieve performance. One of these was to break the clear layering between application and transport. What this meant in practice was that gQUIC only ever supported HTTP. So much so that gQUIC, termed &quot;QUIC&quot; at the time, was synonymous with being the next candidate version of HTTP. Despite the continued changes to QUIC over the last few years, which we'll touch on momentarily, to this day, the term QUIC is understood by people to mean that initial HTTP-only variant. Unfortunately this is a regular source of confusion when discussing the protocol.&lt;/p&gt;
&lt;p&gt;gQUIC continued to experiment and eventually switched over to a syntax much closer to HTTP/2. So close in fact that most people simply called it &quot;HTTP/2 over QUIC&quot;. However, because of technical constraints there were some very subtle differences. One example relates to how the HTTP headers were serialized and exchanged. It is a minor difference but in effect means that HTTP/2 over gQUIC was incompatible with the IETF's HTTP/2.&lt;/p&gt;
&lt;p&gt;Last but not least, we always need to consider the security aspects of Internet protocols. gQUIC opted not to use TLS to provide security. Instead Google developed a different approach called QUIC Crypto. One of the interesting aspects of this was a new method for speeding up security handshakes. A client that had previously established a secure session with a server could reuse information to do a &quot;zero round-trip time&quot;, or 0-RTT, handshake. 0-RTT was later incorporated into TLS 1.3.&lt;/p&gt;
&lt;h2 id=&quot;are-we-at-the-point-where-you-can-tell-me-what-http-3-is-yet&quot;&gt;Are we at the point where you can tell me what HTTP/3 is yet?&lt;/h2&gt;
&lt;p&gt;Almost.&lt;/p&gt;
&lt;p&gt;By now you should be familiar with how standardisation works and gQUIC is not much different. There was sufficient interest that the Google specifications were written up in I-D format. In June 2015 &lt;a href=&quot;https://tools.ietf.org/html/draft-tsvwg-quic-protocol-00&quot;&gt;draft-tsvwg-quic-protocol-00&lt;/a&gt;, entitled &quot;QUIC: A UDP-based Secure and Reliable Transport for HTTP/2&quot; was submitted. Keep in mind my earlier statement that the syntax was almost-HTTP/2.&lt;/p&gt;
&lt;p&gt;Google &lt;a href=&quot;https://groups.google.com/a/chromium.org/forum/#!topic/proto-quic/otGKB4ytAyc&quot;&gt;announced&lt;/a&gt; that a Bar BoF would be held at IETF 93 in Prague. For those curious about what a &quot;Bar BoF&quot; is, please consult &lt;a href=&quot;https://tools.ietf.org/html/rfc6771&quot;&gt;RFC 6771&lt;/a&gt;. Hint: BoF stands for Birds of a Feather.&lt;/p&gt;
&lt;img src=&quot;https://blog.cloudflare.com/content/images/2019/01/quic-standardisation.png&quot; class=&quot;kg-image&quot;/&gt;&lt;p&gt;The outcome of this engagement with the IETF was, in a nutshell, that QUIC seemed to offer many advantages at the transport layer and that it should be decoupled from HTTP. The clear separation between layers should be re-introduced. Furthermore, there was a preference for returning back to a TLS-based handshake (which wasn't so bad since TLS 1.3 was underway at this stage, and it was incorporating 0-RTT handshakes).&lt;/p&gt;
&lt;p&gt;About a year later, in 2016, a new set of I-Ds were submitted:&lt;/p&gt;
&lt;p&gt;Here's where another source of confusion about HTTP and QUIC enters the fray. &lt;a href=&quot;https://tools.ietf.org/html/draft-shade-quic-http2-mapping-00&quot;&gt;draft-shade-quic-http2-mapping-00&lt;/a&gt; is entitled &quot;HTTP/2 Semantics Using The QUIC Transport Protocol&quot; and it describes itself as &quot;a mapping of HTTP/2 semantics over QUIC&quot;. However, this is a misnomer. HTTP/2 was about changing syntax while maintaining semantics. Furthermore, &quot;HTTP/2 over gQUIC&quot; was never an accurate description of the syntax either, for the reasons I outlined earlier. Hold that thought.&lt;/p&gt;
&lt;p&gt;This IETF version of QUIC was to be an entirely new transport protocol. That's a large undertaking and before diving head-first into such commitments, the IETF likes to gauge actual interest from its members. To do this, a formal &lt;a href=&quot;https://www.ietf.org/how/bofs/&quot;&gt;Birds of a Feather&lt;/a&gt; meeting was held at the IETF 96 meeting in Berlin in 2016. I was lucky enough to attend the session in person and the &lt;a href=&quot;https://datatracker.ietf.org/meeting/96/materials/slides-96-quic-0&quot;&gt;slides&lt;/a&gt; don't give it justice. The meeting was attended by hundreds, as shown by Adam Roach's &lt;a href=&quot;https://www.flickr.com/photos/adam-roach/28343796722/in/photostream/&quot;&gt;photograph&lt;/a&gt;. At the end of the session consensus was reached; QUIC would be adopted and standardised at the IETF.&lt;/p&gt;
&lt;p&gt;The first IETF QUIC I-D for mapping HTTP to QUIC, &lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-quic-http-00&quot;&gt;draft-ietf-quic-http-00&lt;/a&gt;, took the Ronseal approach and simplified its name to &quot;HTTP over QUIC&quot;. Unfortunately, it didn't finish the job completely and there were many instances of the term HTTP/2 throughout the body. Mike Bishop, the I-Ds new editor, identified this and started to fix the HTTP/2 misnomer. In the 01 draft, the description changed to &quot;a mapping of HTTP semantics over QUIC&quot;.&lt;/p&gt;
&lt;p&gt;Gradually, over time and versions, the use of the term &quot;HTTP/2&quot; decreased and the instances became mere references to parts of &lt;a href=&quot;https://tools.ietf.org/html/rfc7540&quot;&gt;RFC 7540&lt;/a&gt;. Roll forward two years to October 2018 and the I-D is now at version 16. While HTTP over QUIC bares similarity to HTTP/2 it ultimately is an independent, non-backwards compatible HTTP syntax. However, to those that don't track IETF development very closely (a very very large percentage of the Earth's population), the document name doesn't capture this difference. One of the main points of standardisation is to aid communication and interoperability. Yet a simple thing like naming is a major contributor to confusion in the community.&lt;/p&gt;
&lt;p&gt;Recall what was said in 2012, &quot;HTTP/2.0 only signifies that the wire format isn't compatible with that of HTTP/1.x&quot;. The IETF followed that existing cue. After much deliberation in the lead up to, and during, IETF 103, consensus was reached to rename &quot;HTTP over QUIC&quot; to HTTP/3. The world is now in a better place and we can move on to more important debates.&lt;/p&gt;
&lt;h2 id=&quot;but-rfc-7230-and-7231-disagree-with-your-definition-of-semantics-and-syntax-&quot;&gt;But RFC 7230 and 7231 disagree with your definition of semantics and syntax!&lt;/h2&gt;
&lt;p&gt;Sometimes document titles can be confusing. The present HTTP documents that describe syntax and semantics are:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc7230&quot;&gt;RFC 7230&lt;/a&gt; - Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc7231&quot;&gt;RFC 7231&lt;/a&gt; - Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;It is possible to read too much into these names and believe that fundamental HTTP semantics are specific for versions of HTTP i.e. HTTP/1.1. However, this is an unintended side effect of the HTTP family tree. The good news is that the HTTPbis Working Group are trying to address this. Some brave members are going through another round of document revision, as Roy Fielding put it, &quot;one more time!&quot;. This work is underway right now and is known as the HTTP Core activity (you may also have heard of this under the moniker HTTPtre or HTTPter; naming things is hard). This will condense the six drafts down to three:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;HTTP Semantics (draft-ietf-httpbis-semantics)&lt;/li&gt;
&lt;li&gt;HTTP Caching (draft-ietf-httpbis-caching)&lt;/li&gt;
&lt;li&gt;HTTP/1.1 Message Syntax and Routing (draft-ietf-httpbis-messaging)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Under this new structure, it becomes more evident that HTTP/2 and HTTP/3 are syntax definitions for the common HTTP semantics. This doesn't mean they don't have their own features beyond syntax but it should help frame discussion going forward.&lt;/p&gt;
&lt;h2 id=&quot;pulling-it-all-together&quot;&gt;Pulling it all together&lt;/h2&gt;
&lt;p&gt;This blog post has taken a shallow look at the standardisation process for HTTP in the IETF across the last three decades. Without touching on many technical details, I've tried to explain how we have ended up with HTTP/3 today. If you skipped the good bits in the middle and are looking for a one liner here it is: HTTP/3 is just a new HTTP syntax that works on IETF QUIC, a UDP-based multiplexed and secure transport. There are many interesting technical areas to explore further but that will have to wait for another day.&lt;/p&gt;
&lt;p&gt;In the course of this post, we explored important chapters in the development of HTTP and TLS but did so in isolation. We close out the blog by pulling them all together into the complete Secure Web Timeline presented below. You can use this to investigate the detailed history at your own comfort. And for the super sleuths, be sure to check out the &lt;a href=&quot;https://blog.cloudflare.com/content/images/2019/01/web_timeline_large1.svg&quot; download=&quot;&quot;&gt;full version including draft numbers&lt;/a&gt;.&lt;/p&gt;
&lt;img src=&quot;https://blog.cloudflare.com/content/images/2019/01/cf-secure-web-timeline-1.png&quot; class=&quot;kg-image&quot;/&gt;</description>
<pubDate>Sun, 27 Jan 2019 17:33:53 +0000</pubDate>
<dc:creator>jgrahamc</dc:creator>
<og:type>article</og:type>
<og:title>HTTP/3: From root to tip</og:title>
<og:description>Explore HTTP/3 from root to tip and discover the backstory of this new HTTP syntax that works on top of the IETF QUIC transport.</og:description>
<og:url>https://blog.cloudflare.com/http-3-from-root-to-tip/</og:url>
<og:image>https://blog.cloudflare.com/content/images/2019/01/layer-cake-diagram-copy-2@2x.png</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.cloudflare.com/http-3-from-root-to-tip/</dc:identifier>
</item>
<item>
<title>Outperforming everything with anything: Python? Sure, why not?</title>
<link>https://wordsandbuttons.online/outperforming_everything_with_anything.html</link>
<guid isPermaLink="true" >https://wordsandbuttons.online/outperforming_everything_with_anything.html</guid>
<description>
&lt;pre&gt;
&lt;span id=&quot;slides_recursive_1&quot;/&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span id=&quot;slides_recursive_1&quot;&gt;&lt;strong&gt;Step 1. Benchmark C source code&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;

#include &quot;stdio.h&quot;

&lt;strong&gt;extern void solve_5(double* a, double* b, double* x);&lt;/strong&gt; // fake

int main() {
    double sum_x[5] = {0., 0., 0., 0., 0.};
    for(int i = 0; i &amp;lt; 1000000; ++i) {
        double a[5*5] = {
            6.80, -6.05, -0.45,  8.32, -9.67,
           -2.11, -3.30,  2.58,  2.71, -5.14,
            5.66,  5.36, -2.70,  4.35, -7.26,
            5.97, -4.44,  0.27, -7.17,  6.08,
            8.23,  1.08,  9.04,  2.14, -6.87
        };
        double b[5] = {
            4.02,  6.19, -8.22, -7.57, -3.03,
        };
        double x[5];

        &lt;strong&gt;solve_5(a, b, x);&lt;/strong&gt; // this will get replaced later

        for(int j = 0; j &amp;lt; 5; ++j){
            sum_x[j] += x[j];
        }
    }
    printf(&quot;%f, %f, %f, %f, %f\n&quot;,
        sum_x[0], sum_x[1], sum_x[2], sum_x[3], sum_x[4]);
    return 0;
}


&lt;/pre&gt;
&lt;p&gt;&lt;span id=&quot;slides_recursive_1&quot;&gt;&lt;strong&gt;Step 2. LLVM assembly language&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;

... 27 lines before...
&lt;span&gt;; &amp;lt;label&amp;gt;:6                                       ; preds = %3
  %7 = bitcast [25 x double]* %a to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32
    (i8* %7, i8* bitcast ([25 x double]* @main.a to i8*), i32 200, i32 8, i1 false)
  %8 = bitcast [5 x double]* %b to i8*
  call void @llvm.memset.p0i8.i32(i8* %8, i8 0, i32 40, i32 8, i1 false)
  %9 = bitcast i8* %8 to [5 x double]*
  %10 = getelementptr [5 x double], [5 x double]* %9, i32 0, i32 0
  store double 4.020000e+00, double* %10
  %11 = getelementptr [5 x double], [5 x double]* %9, i32 0, i32 1
  store double 6.190000e+00, double* %11
  %12 = getelementptr [5 x double], [5 x double]* %9, i32 0, i32 2
  store double -8.220000e+00, double* %12
  %13 = getelementptr [5 x double], [5 x double]* %9, i32 0, i32 3
  store double -7.570000e+00, double* %13
  %14 = getelementptr [5 x double], [5 x double]* %9, i32 0, i32 4
  store double -3.030000e+00, double* %14
  %15 = getelementptr inbounds [25 x double], [25 x double]* %a, i32 0, i32 0
  %16 = getelementptr inbounds [5 x double], [5 x double]* %b, i32 0, i32 0
  %17 = getelementptr inbounds [5 x double], [5 x double]* %x, i32 0, i32 0
  &lt;strong&gt;call void @solve_5(double* %15, double* %16, double* %17) ; to replace&lt;/strong&gt;
  store i32 0, i32* %j, align 4
  br label &lt;strong&gt;%18 ; to update&lt;/strong&gt;

; &amp;lt;label&amp;gt;:18                                      ; preds = &lt;strong&gt;%29&lt;/strong&gt;, &lt;strong&gt;%6&lt;/strong&gt;
  &lt;strong&gt;%19&lt;/strong&gt; = load i32, i32* %j, align 4
  &lt;strong&gt;%20&lt;/strong&gt; = icmp slt i32 &lt;strong&gt;%19&lt;/strong&gt;, 5
  br i1 &lt;strong&gt;%20&lt;/strong&gt;, label &lt;strong&gt;%21&lt;/strong&gt;, label &lt;strong&gt;%32&lt;/strong&gt;&lt;/span&gt;
... 58 lines after... 
&lt;/pre&gt;

&lt;pre&gt;

... 44 lines before ...
&lt;span&gt;  %15 = getelementptr inbounds [25 x double], [25 x double]* %a, i32 0, i32 0
  %16 = getelementptr inbounds [5 x double], [5 x double]* %b, i32 0, i32 0
  %17 = getelementptr inbounds [5 x double], [5 x double]* %x, i32 0, i32 0
&lt;strong&gt;%18 = getelementptr inbounds double, double* %15, i64 6  ; generated
%19 = load double, double* %18, align 8                  ; by
%20 = getelementptr inbounds double, double* %15, i64 24 ; the
%21 = load double, double* %20, align 8                  ; Python
%22 = fmul double %19, %21                               ; script&lt;/strong&gt;

&lt;/span&gt;... 2407 more lines of auto-generated code ...&lt;span&gt;

&lt;strong&gt;%2422 = getelementptr inbounds double, double* %17, i64 3
%2423 = load double, double* %2422, align 8
%2424 = fmul double %2421, %2423
%2425 = fsub double %2419, %2424
%2426 = getelementptr inbounds double, double* %15, i64 24
%2427 = load double, double* %2426, align 8
%2428 = fdiv double %2425, %2427
%2429 = getelementptr inbounds double, double* %17, i64 4
store double %2428, double* %2429, align 8&lt;/strong&gt;

  store i32 0, i32* %j, align 4
  br label &lt;strong&gt;%2430  ; instructions updated by the same script&lt;/strong&gt;

; &lt;label&gt;:18                                      ; preds = %2441, %6
  &lt;strong&gt;%2431&lt;/strong&gt; = load i32, i32* %j, align 4
  &lt;strong&gt;%2432&lt;/strong&gt; = icmp slt i32 &lt;strong&gt;%2431&lt;/strong&gt;, 5
  br i1 &lt;strong&gt;%2432&lt;/strong&gt;, label &lt;strong&gt;%2433&lt;/strong&gt;, label &lt;strong&gt;%2444&lt;/strong&gt;
&lt;/label&gt;&lt;/span&gt;&lt;label&gt;... still 58 lines after...&lt;/label&gt;
&lt;/pre&gt;

&lt;pre&gt;

... 139 lines of assembly ...
        vmovsd  352(%esp), %xmm0        # xmm0 = mem[0],zero
        vmulsd  256(%esp), %xmm2, %xmm6
        vmovsd  .LCPI0_0, %xmm4         # xmm4 = mem[0],zero
        vmulsd  %xmm4, %xmm0, %xmm7
        vsubsd  %xmm7, %xmm6, %xmm6
        vmulsd  128(%esp), %xmm0, %xmm5 # 8-byte Folded Reload
        vmovapd %xmm0, %xmm3
        vmulsd  344(%esp), %xmm2, %xmm7
        vsubsd  %xmm5, %xmm7, %xmm1
        vmovsd  %xmm1, 128(%esp)        # 8-byte Spill
        vmulsd  280(%esp), %xmm2, %xmm7
        vmulsd  192(%esp), %xmm4, %xmm5 # 8-byte Folded Reload
        vsubsd  %xmm5, %xmm7, %xmm7
        vmovsd  %xmm7, 120(%esp)        # 8-byte Spill
        vmovsd  104(%esp), %xmm0        # 8-byte Reload

        vmulsd  %xmm6, %xmm0, %xmm5
        vmulsd  %xmm7, %xmm1, %xmm6
        vsubsd  %xmm6, %xmm5, %xmm5
        vmovsd  %xmm5, 64(%esp)         # 8-byte Spill
        vmovapd %xmm3, %xmm7
        vmulsd  88(%esp), %xmm7, %xmm3  # 8-byte Folded Reload
        vmulsd  336(%esp), %xmm2, %xmm6
        vsubsd  %xmm3, %xmm6, %xmm3
        vmulsd  %xmm0, %xmm3, %xmm3
        vmulsd  80(%esp), %xmm1, %xmm6  # 8-byte Folded Reload
        vsubsd  %xmm6, %xmm3, %xmm1
        vmovsd  %xmm1, 88(%esp)         # 8-byte Spill
... only 400 more lines of assembly ...
&lt;/pre&gt;</description>
<pubDate>Sun, 27 Jan 2019 16:38:35 +0000</pubDate>
<dc:creator>pjmlp</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://wordsandbuttons.online/outperforming_everything_with_anything.html</dc:identifier>
</item>
<item>
<title>What it’s like to pursue a dream for 30 years and fail</title>
<link>https://thehustle.co/bionic-boot/</link>
<guid isPermaLink="true" >https://thehustle.co/bionic-boot/</guid>
<description>&lt;p&gt;&lt;span&gt;For 30 years, Keahi Seymour pursued a dream.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;That dream wasn’t to play in the NFL. It wasn’t to front a rock band. It wasn’t to grace the silver screen. It wasn’t to cure cancer. It wasn’t to walk on the moon, discover Atlantis, or lead a nation.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Keahi Seymour wanted to invent a boot that enabled him to run like an ostrich. And he wanted to share it with the world.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;But this story isn’t about boots: It’s about the relentless pursuit of a vision in the face of repeated setbacks. What drives someone to stick with an idea for 30 years? To give up everything for a device that seems, to most people, inconsequential? To sacrifice hundreds of thousands of dollars in life savings, time, and opportunity cost?&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;And can something really be called a failure if the journey was self-fulfilling?&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;An idea strikes&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span&gt;Like other young lads, Seymour spent his youth in England drawing sketches of cars, hoverboards, and model planes — anything that “moved fast and looked futuristic.”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;But on a fateful day in 1987, the 12-year-old saw a TV show about kangaroos that would change the course of his life.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;“They were talking about how these hyper-fast animals store elastic energy in their Achilles tendons,” he recalls. “And I immediately thought, ‘Why can’t a human use that same spring-like energy to run faster?”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;He grabbed a piece of paper and drew out his grand vision: A 1980s running shoe with a pivot, and a lever attached to a big spring with rubber bands.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;He called it the ‘Bionic Boot.’&lt;/span&gt;&lt;/p&gt;
&lt;div id=&quot;attachment_12131&quot; class=&quot;wp-caption alignnone&quot; readability=&quot;37&quot;&gt;&lt;img class=&quot;size-full wp-image-12131&quot; src=&quot;https://thehustle.co/wp-content/uploads/2019/01/sketchesz.png&quot; alt=&quot;&quot; width=&quot;2400&quot; height=&quot;100%&quot;/&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Seymour’s first sketches of the Bionic Boot, age 12. “My mom always told me to sign, date, and save all my sketches,” he says. (Keahi Seymour)&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;Seymour was soon consumed by the idea. His “mates” recall him spending hours sketching out different iterations of the device throughout grade school. His mother fed his obsession by taking him to a Leonardo da Vinci exhibit that expounded on&lt;/span&gt; &lt;a href=&quot;https://www.nasa.gov/larc/da-vinci-s-key-to-creativity-came-straight-from-nature&quot;&gt;&lt;span&gt;drawing inspiration&lt;/span&gt;&lt;/a&gt; &lt;span&gt;from the natural world.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;“I started really deeply researching biology and nature,” says Seymour. “I found out that the ostrich was the&lt;/span&gt; &lt;a href=&quot;https://www.tswalu.com/media/blog-article/the-fastest-creature-on-two-legs&quot;&gt;&lt;span&gt;fastest&lt;/span&gt;&lt;/a&gt; &lt;span&gt;bipedal animal [it runs at 43 MPH] and started looking into its physiology, how it moved.”&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;The first build&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span&gt;At 17, Seymour was tasked with designing a technology product for a school project.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Until this point, the Bionic Boot had been more of an ethereal pipedream than a tangible device. But the project, which required students to design a physical invention from start to finish, gave Seymour his first chance to make a full-fledged prototype.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;The aim of his design was to give humans (who are&lt;/span&gt; &lt;em&gt;&lt;span&gt;plantigrade&lt;/span&gt;&lt;/em&gt;&lt;span&gt;, or flat-footed) the mechanical advantage of fast&lt;/span&gt; &lt;em&gt;&lt;span&gt;digitigrade&lt;/span&gt;&lt;/em&gt; &lt;span&gt;animals (which walk and run on their toes). He’d achieve this by raising himself a foot off the ground on a set of levers attached to 6-10 big rubber springs.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;When activated with a step, the lever would flex back behind the heel; elastic energy stored in the rubber “tendons” would recoil, catapulting him up to 4 feet off the ground, and elongating his stride to 7 feet in length.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;The first iteration wasn’t pretty. Seymour utilized a hodge-podge of equipment he found lying around: An old rollerblade boot, metal struts, and a rusty lever — all disconcertingly lashed together with a tangle of bungee cords.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Before a small crowd of curious students, he strapped them on and bounded across the school parking lot. They fell apart after a few strides.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;“Everyone was laughing,” says Seymour. “But in those few strides, I could feel the power and speed. I knew I had something special.”&lt;/span&gt;&lt;/p&gt;
&lt;div id=&quot;attachment_12132&quot; class=&quot;wp-caption alignnone&quot; readability=&quot;33&quot;&gt;&lt;img class=&quot;size-full wp-image-12132&quot; src=&quot;https://thehustle.co/wp-content/uploads/2019/01/firstproto.png&quot; alt=&quot;&quot; width=&quot;2400&quot; height=&quot;100%&quot;/&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;The very first prototype of the Bionic Boot, circa 1997 (Keahi Seymour)&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;Seymour enrolled at Coventry University to study transportation design and soon shifted his focus to designing cars. But it wasn’t long before the Bionic Boot beckoned again.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;For his final year “thesis,” he was asked to design a product that catered to “youth crazes” — something new, novel, and transportation-based.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Though Seymour’s aim with the Bionic Boot was to mimic the “experience of running fast like an animal,” he realized it could be branded as a form of environmentally-sound, all-terrain transportation. Once again, the boots became his project.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;The stakes were high. His instructors would select the best projects and submit them to a national design competition put on by the Royal Society of Arts.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;“Unfortunately, I got a failing grade,” says Seymour. “So I decided to submit it myself.”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Seymour drove to the London competition and walked into a room full of England’s design czars: Product designers from Land Rover, Aston Martin, and Lotus sat stoically at a 30-foot-long table. Snobbery filled the air.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;“I clapped my hands, and my buddy, Chris, walked out in the boots,” recalls Seymour. “All of a sudden, it was as if the designers turned to schoolchildren: They all stood up, taking pictures, marveling, murmuring.”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Miraculously, the Bionic Boot won the competition, secured a small grant of £1,125 (~$1,500 US), and picked up a little press.&lt;/span&gt;&lt;/p&gt;
&lt;div id=&quot;attachment_12133&quot; class=&quot;wp-caption alignnone&quot; readability=&quot;36&quot;&gt;&lt;img class=&quot;size-full wp-image-12133&quot; src=&quot;https://thehustle.co/wp-content/uploads/2019/01/papersBW.jpg&quot; alt=&quot;&quot; width=&quot;2400&quot; height=&quot;100%&quot;/&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;The Bionic Boot received a burst of press in England in the late ‘90s after they won a prestigious design competition put on the Royal Society of Arts (The Sunday Times, The Birmingham Post, Daily Mail)&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;College came to an end and Seymour’s friends all settled into 9 to 5 jobs with high-end car manufacturers. For a short time, he joined them, taking a role in Jaguar’s styling department. A promising future lay before him.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;But he couldn’t shake the exhilaration he’d felt bounding across the school parking lot. The Bionic Boot consumed his mind like a virus.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;So, in 1999, Seymour packed a suitcase full of shoe molds, springs, and speargun rubber, and ventured to the foggy shores of San Francisco.&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Going to California&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span&gt;At the time, California was a mecca for young entrepreneurs in the outdoors sector. After all, it was the birthplace of the first fiberglass surfboard, the first urethane skateboard wheel, the boogie board, and the mountain bike.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;San Francisco seemed to be a fertile testing ground for Seymour’s futuristic boot, and a prime location for his target customers: “Well-to-do adventure-seekers in their mid-30s who had tried every type of extreme sport and wanted something new.”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;“I’d take them out for a run around the city and people would&lt;/span&gt; &lt;em&gt;&lt;span&gt;lose&lt;/span&gt;&lt;/em&gt; &lt;span&gt;their minds,” he says. “Everywhere I went, people would say, ‘&lt;/span&gt;&lt;em&gt;&lt;span&gt;What the hell is that!&lt;/span&gt;&lt;/em&gt;&lt;span&gt;”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;The garage of a Potrero Hill apartment became his mad scientist’s lab; his bathroom became a makeshift carbon fiber oven. Everything was painstakingly made by hand with a drill, an angle grinder, and a hacksaw.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;“It looked like&lt;/span&gt; &lt;a href=&quot;https://fanbasepress.com/index.php/about/newsfeed/item/5258-back-to-back-to-the-future-doc-brown-s-garage-june-21-2015&quot;&gt;&lt;span&gt;Doc Brown’s house&lt;/span&gt;&lt;/a&gt; &lt;span&gt;from&lt;/span&gt; &lt;em&gt;&lt;span&gt;Back to the Future&lt;/span&gt;&lt;/em&gt;&lt;span&gt;,” he says.&lt;/span&gt;&lt;/p&gt;
&lt;div id=&quot;attachment_12138&quot; class=&quot;wp-caption alignnone&quot; readability=&quot;33&quot;&gt;&lt;img class=&quot;size-full wp-image-12138&quot; src=&quot;https://thehustle.co/wp-content/uploads/2019/01/worksop.jpg&quot; alt=&quot;&quot; width=&quot;2400&quot; height=&quot;100%&quot;/&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Top: Seymour in the Bionic Boot warehouse… his garage; Bottom: Mock-ups of the Bionic Boot (Keahi Seymour)&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;He sourced parts from Metal Supermarkets, a specialty store in Hayward, California that sells things like aircraft-grade&lt;/span&gt; &lt;a href=&quot;https://www.makeitfrom.com/material-properties/6061-T1-Aluminum&quot;&gt;&lt;span&gt;6061 aluminum&lt;/span&gt;&lt;/a&gt;&lt;span&gt;. He hired a lawyer and secured patents in 15 countries around the world. He spent countless nights blasting emails to companies and investors in an effort to raise funds.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Meanwhile, Seymour worked 6 nights a week at bars and nightclubs — Matrix, Infusion Lounge, The Tipsy Pig. Few people knew about his side-hustle.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;“Nobody in my life, even my girlfriend at the time, could understand my obsession,” he says. “I was completely consumed. And I knew my clock was ticking. I needed money… I need investors and partnerships.”&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;A break and a letdown&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span&gt;A year passed. 5 years. A decade. Despite his efforts, Seymour wasn’t able to convince investors that the Bionic Boot was worth taking a risk on.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;By 2014, Seymour had constructed more than 200 prototypes of his Bionic Boot. He managed to increase max speed from 15 to 25 MPH, reduce weight from 10 to 6 pounds, and achieve minor celebrity on the streets of San Francisco.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Periodically, his roommate’s grandma would come by to hassle him:&lt;/span&gt; &lt;em&gt;&lt;span&gt;“You still workin’ on those boots, Keahi?! When are they gonna start making some money?”&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;By this point, he’d invested his entire life savings — more than $200k — and tens of thousands of hours in the boots. His life, his essence, was this invention. But the payoff he’d envisioned didn’t come and he had to make a decision:&lt;/span&gt; &lt;em&gt;&lt;span&gt;“Do I keep funding the boots, or do I let them die?&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;div id=&quot;attachment_12135&quot; class=&quot;wp-caption alignnone&quot; readability=&quot;33&quot;&gt;&lt;img class=&quot;size-full wp-image-12135&quot; src=&quot;https://thehustle.co/wp-content/uploads/2019/01/protos.png&quot; alt=&quot;&quot; width=&quot;2400&quot; height=&quot;100%&quot;/&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;The evolution of the Bionic Boot: Prototypes, 2005-2014 (Keahi Seymour)&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;He decided to take his creation to the New York Maker Faire. Fortuitously, an impromptu&lt;/span&gt; &lt;a href=&quot;https://www.youtube.com/watch?v=vaPk7FFP7sg&quot;&gt;&lt;em&gt;&lt;span&gt;Make Magazine&lt;/span&gt;&lt;/em&gt;&lt;/a&gt; &lt;span&gt;interview with him was posted on YouTube and went “viral.” Overnight, his inbox was flooded with media requests.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Seymour was branded as “The World’s Fastest Man,” the “Bionic Man,” a slew of other hyperbolic monikers. He was flown around the world to appear on TV shows — Spain, France, England, Denmark. He was asked to race a train in Japan, an ostrich in Los Angeles, and an Olympic hurdler in China. He ran across Manhattan in 12 minutes.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Though the boots became a part of his personal aura and gained him international recognition, they still weren’t seen as a viable product — even with 8k emails from interested buyers.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Many parties were interested in learning more, including SRI International, DARPA, Intel, and even the US Special Operations Command (SOCOM). But this interest never translated to a partnership, grant, or investment.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;“Companies just didn’t want to take a risk on something that wasn’t proven, or that didn’t have an existing market,” he says. “Nobody wanted to be the first to take a big risk.”&lt;/span&gt;&lt;/p&gt;
&lt;div id=&quot;attachment_12136&quot; class=&quot;wp-caption alignnone&quot; readability=&quot;32&quot;&gt;&lt;img class=&quot;size-full wp-image-12136&quot; src=&quot;https://thehustle.co/wp-content/uploads/2019/01/ostrich-racez.png&quot; alt=&quot;&quot; width=&quot;2400&quot; height=&quot;100%&quot;/&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Seymour races an ostrich outside of Los Angeles (Keahi Seymour)&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;At the time, the media attention inspired a slew of knock-offs: A Korean company replicated the boots and developed partnerships with 10-15 online retailers. More egregiously, a Chinese firm nicked Seymour’s design, mass-produced the product, and sold it under the “Bionic Boot” name on Amazon.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Though he’d spent a small fortune securing international patents, Seymour didn’t have the means to fight infringements.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;The Bionic Boot, it seemed, had reached a hitch in the road.&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;The crossroads&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span&gt;Today, Seymour’s apartment is still littered with the remnants of Bionic Boot prototypes.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;“Some people work on old hot rods or bikes,” he says. “I work on my boots. That’s my passion.”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;But after nearly 30 years of dedication, he’s toying with the idea of letting his invention go. He tells me I’ve reached out to him at an interesting time in his life — a moral and emotional crossroads.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;“I’m starting to think the boots are dead in the water,” he says. “I can’t sell them. It’s my life-long passion, but I don’t know what to do at this point.”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Seymour faces another big setback: His patents are expiring in a few months, stripping him of the little leverage he has left to strike a manufacturing deal.&lt;/span&gt;&lt;/p&gt;
&lt;div id=&quot;attachment_12137&quot; class=&quot;wp-caption alignnone&quot; readability=&quot;32&quot;&gt;&lt;img class=&quot;size-full wp-image-12137&quot; src=&quot;https://thehustle.co/wp-content/uploads/2019/01/final-1.jpg&quot; alt=&quot;&quot; width=&quot;2400&quot; height=&quot;100%&quot;/&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Seymour sprints along a Bay Area trail (Keahi Seymour)&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;He’s been toying with new ideas that might be more “monetarily viable:” A carbon fiber articulated snowboard is currently “cooking” in his bathroom.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Though the Bionic Boot — the invention he’s been obsessed with since he was 12 years old — is at an impasse, he’ll never fully abandon it. The boots have been there with him through the trial and error, the tribulations, the long years of letdowns and bilked meetings. They are one and same, welded together like a steel lever.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;This weekend, somewhere in the hills of Pacifica, Seymour will bound down a rocky path with the jaunty agility of an ostrich.&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;em&gt;If you’re interested in learning more about Keahi Seymour, his boots, and/or his latest inventions, check out &lt;a href=&quot;http://www.bionicboot.com/&quot;&gt;his personal website&lt;/a&gt;. &lt;/em&gt;&lt;/div&gt;
&lt;div class=&quot;note&quot;&gt;
&lt;p&gt;
&lt;h3&gt;Share and discuss&lt;/h3&gt;
&lt;/p&gt;

&lt;br clear=&quot;all&quot;/&gt;
&lt;div readability=&quot;6.44&quot;&gt;
&lt;hr/&gt;&lt;div readability=&quot;8.28&quot;&gt;&lt;a href=&quot;https://thehustle.co/&quot; onclick=&quot;ga('send', 'event', 'nav', 'advertorial', 'ps');&quot;&gt;Sign up here&lt;/a&gt; for our daily news email to get all the non-political news you never knew you needed. All it takes is 5 minutes and BOOM, you're smarter.&lt;/div&gt;
&lt;br clear=&quot;all&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Sun, 27 Jan 2019 16:14:55 +0000</pubDate>
<dc:creator>davesailer</dc:creator>
<og:type>article</og:type>
<og:title>What it’s like to pursue a dream for 30 years — and fail</og:title>
<og:description>For every successful, hot-selling invention, there are a million others that don’t make it. But what does ‘failure’ really mean?</og:description>
<og:url>https://thehustle.co/bionic-boot/</og:url>
<og:image>https://thehustle.co/wp-content/uploads/2019/01/share-3.jpg</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://thehustle.co/bionic-boot/</dc:identifier>
</item>
<item>
<title>Future JavaScript: what is still missing?</title>
<link>http://2ality.com/2019/01/future-js.html</link>
<guid isPermaLink="true" >http://2ality.com/2019/01/future-js.html</guid>
<description>&lt;p&gt;In recent years, JavaScript has grown considerably in size. This blog post explores what’s still missing.&lt;/p&gt;
&lt;p&gt;Notes:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;I’m only listing the missing features that I find most important. Many others are useful, but there is also a risk of adding too much.&lt;/li&gt;
&lt;li&gt;My choices are subjective.&lt;/li&gt;
&lt;li&gt;Almost everything mentioned in this blog post is on TC39’s radar. That is, it also serves as a preview of a possible future JavaScript.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;For more thoughts on the first two issues, see &lt;a href=&quot;http://2ality.com/2019/01/future-js.html#language-design&quot;&gt;the section on language design&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;values&quot;&gt;Values  &lt;/h2&gt;
&lt;h3 id=&quot;comparing-objects-by-value&quot;&gt;Comparing objects by value  &lt;/h3&gt;
&lt;p&gt;At the moment, JavaScript only compares primitive values such as strings &lt;em&gt;by value&lt;/em&gt; (by looking at their contents):&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-repl&quot;&gt;&amp;gt; 'abc' === 'abc'
true
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;In contrast, objects are compared &lt;em&gt;by identity&lt;/em&gt; (an object is only strictly equal to itself):&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-repl&quot;&gt;&amp;gt; {x: 1, y: 4} === {x: 1, y: 4}
false
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;It would be nice if there were a way to create objects that are compared by value:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-repl&quot;&gt;&amp;gt; #{x: 1, y: 4} === #{x: 1, y: 4}
true
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Another possibility is to introduce a new kind of class (with the exact details to be determined):&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;@[ValueType]
&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Point&lt;/span&gt; &lt;/span&gt;{
  
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Aside: The decorator-like syntax for marking the class as a value type is based on &lt;a href=&quot;https://github.com/littledan/proposal-reserved-decorator-like-syntax&quot;&gt;a draft proposal&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;putting-objects-into-data-structures&quot;&gt;Putting objects into data structures  &lt;/h3&gt;
&lt;p&gt;As objects are compared by identity, it rarely makes sense to put them into (non-weak) ECMAScript data structures such as Maps:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; m = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Map&lt;/span&gt;();
m.set({&lt;span class=&quot;hljs-attr&quot;&gt;x&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;y&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;}, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);
m.set({&lt;span class=&quot;hljs-attr&quot;&gt;x&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;y&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;}, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);
assert.equal(m.size, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This problem can be fixed via custom value types. Alternatively, the management of Set elements and Map keys could become customizable. For example:&lt;/p&gt;
&lt;ul readability=&quot;2&quot;&gt;&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;Map via hash table: requires one operation for checking equality and another operation for creating hash codes. If you work with hash codes, you want your objects to be immutable. Otherwise, it’s too easy to break the data structure.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;Map via sorted tree: requires an operation for comparing two values, to manage the values it stores.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;large-integers&quot;&gt;Large integers  &lt;/h3&gt;
&lt;p&gt;JavaScript numbers are always 64-bit (double), which gives you 53 bits plus sign for integers. That means that beyond 53 bits, you can’t represent every number, anymore:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-repl&quot;&gt;&amp;gt; 2 ** 53
9007199254740992
&amp;gt; (2 ** 53) + 1  // can’t be represented
9007199254740992
&amp;gt; (2 ** 53) + 2
9007199254740994
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This is a considerable restriction for some use cases. There is now &lt;a href=&quot;http://2ality.com/2017/03/es-integer.html&quot;&gt;a proposal for BigInts&lt;/a&gt;, real integers whose precision grows as necessary:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-repl&quot;&gt;&amp;gt; 2n ** 53n
9007199254740992n
&amp;gt; (2n ** 53n) + 1n
9007199254740993n
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;BigInts also support &lt;em&gt;casting&lt;/em&gt;, which gives you values with a fixed number of bits:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; int64a = BigInt.asUintN(&lt;span class=&quot;hljs-number&quot;&gt;64&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12345&lt;/span&gt;n);
&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; int64b = BigInt.asUintN(&lt;span class=&quot;hljs-number&quot;&gt;64&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;67890&lt;/span&gt;n);
&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; result = BigInt.asUintN(&lt;span class=&quot;hljs-number&quot;&gt;64&lt;/span&gt;, int64a * int64b);
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;decimal-computations&quot;&gt;Decimal computations  &lt;/h3&gt;
&lt;p&gt;JavaScript’s numbers are 64-bit floating point numbers (doubles), based on the IEEE 754 standard. Given that their representation is base-2, you can get rounding errors when dealing with decimal fractions:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-repl&quot;&gt;&amp;gt; 0.1 + 0.2
0.30000000000000004
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;That is especially a problem in scientific computing and financial technology (fintech). A proposal for base-10 numbers is currently at &lt;a href=&quot;https://github.com/tc39/proposals/blob/master/stage-0-proposals.md&quot;&gt;stage 0&lt;/a&gt;. They may end up being used like this (note the suffix &lt;code&gt;m&lt;/code&gt; for decimal numbers):&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-repl&quot;&gt;&amp;gt; 0.1m + 0.2
0.3m
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;categorizing-values&quot;&gt;Categorizing values  &lt;/h3&gt;
&lt;p&gt;At the moment, categorizing values is quite cumbersome in JavaScript:&lt;/p&gt;
&lt;p&gt;It may be possible to fix this via a library (I’ll create a proof of concept, once I have time).&lt;/p&gt;
&lt;h2 id=&quot;functional-programming&quot;&gt;Functional programming  &lt;/h2&gt;
&lt;h3 id=&quot;more-expressions&quot;&gt;More expressions  &lt;/h3&gt;
&lt;p&gt;C-style languages make an unfortunate distinction between expressions and statements:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; str1 = someBool ? &lt;span class=&quot;hljs-string&quot;&gt;'yes'&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;'no'&lt;/span&gt;;


&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; str2;
&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (someBool) {
  str2 = &lt;span class=&quot;hljs-string&quot;&gt;'yes'&lt;/span&gt;;
} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
  str2 = &lt;span class=&quot;hljs-string&quot;&gt;'no'&lt;/span&gt;;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Especially in functional languages, everything is an expression. &lt;a href=&quot;https://github.com/tc39/proposal-do-expressions&quot;&gt;Do-expressions&lt;/a&gt; let you use statements in all expression contexts:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; str3 = &lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (someBool) {
    &lt;span class=&quot;hljs-string&quot;&gt;'yes'&lt;/span&gt;
  } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
    &lt;span class=&quot;hljs-string&quot;&gt;'no'&lt;/span&gt;
  }
};
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The following code is a more realistic example. Without do-expressions, you need an immediately invoked arrow function to hide the variable &lt;code&gt;result&lt;/code&gt; inside a scope:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; func = &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;(&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; result; 
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (result === &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;) {
      result = someComputation();
    }
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;
  }
})();
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;With a do-expression, you can write this code more elegantly:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; func = &lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; result;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (result === &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;) {
      result = someComputation();
    }
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;
  };
};
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;matching-a-destructuring-switch&quot;&gt;Matching: a destructuring &lt;code&gt;switch&lt;/code&gt;  &lt;/h3&gt;
&lt;p&gt;JavaScript makes it easy to work directly with objects. However, there is no built-in way of switching over cases, based on the structure of an object. That could look as follows (example from proposal):&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; resource = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; fetch(jsonService);
&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; (resource) {
  when {&lt;span class=&quot;hljs-attr&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;headers&lt;/span&gt;: {&lt;span class=&quot;hljs-string&quot;&gt;'Content-Length'&lt;/span&gt;: s}} -&amp;gt; {
    &lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;hljs-string&quot;&gt;`size is &lt;span class=&quot;hljs-subst&quot;&gt;${s}&lt;/span&gt;`&lt;/span&gt;);
  }
  when {&lt;span class=&quot;hljs-attr&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;404&lt;/span&gt;} -&amp;gt; {
    &lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;hljs-string&quot;&gt;'JSON not found'&lt;/span&gt;);
  }
  when {status} &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (status &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;400&lt;/span&gt;) -&amp;gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; RequestError(res);
  }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;As you can see, the new &lt;code&gt;case&lt;/code&gt; statement is similar to &lt;code&gt;switch&lt;/code&gt; in some ways, but uses destructuring to pick cases. This kind of functionality is useful when whenever one works with nested data structures (e.g. in compilers). &lt;a href=&quot;https://github.com/tc39/proposal-pattern-matching&quot;&gt;The proposal for pattern matching&lt;/a&gt; is currently at stage 1.&lt;/p&gt;
&lt;h3 id=&quot;pipeline-operator&quot;&gt;Pipeline operator  &lt;/h3&gt;
&lt;p&gt;There are currently &lt;a href=&quot;https://github.com/tc39/proposal-pipeline-operator&quot;&gt;two competing proposals&lt;/a&gt; for the pipeline operator. Here, we are looking at &lt;em&gt;Smart Pipelines&lt;/em&gt; (the other proposal is called &lt;em&gt;F# Pipelines&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;The basic idea of the pipeline operator is as follow. Consider the following nested function calls.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; y = h(g(f(x)));
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;However, this notation usually does not reflect how we think about the computational steps. Intuitively, we’d describe them as:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Start with the value &lt;code&gt;x&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Then apply &lt;code&gt;f()&lt;/code&gt; to it.&lt;/li&gt;
&lt;li&gt;Then apply &lt;code&gt;g()&lt;/code&gt; to the result.&lt;/li&gt;
&lt;li&gt;Then apply &lt;code&gt;h()&lt;/code&gt; to the result.&lt;/li&gt;
&lt;li&gt;Then assign the result to &lt;code&gt;y&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The pipeline operator lets us express this intuition better:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; y = x |&amp;gt; f |&amp;gt; g |&amp;gt; h;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;In other words, the following two expressions are equivalent.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;f(&lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;)
&lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt; |&amp;gt; f
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Additionally, the pipeline operator supports &lt;em&gt;partial application&lt;/em&gt; (similar to the method &lt;code&gt;.bind()&lt;/code&gt; of functions): The following two expressions are equivalent.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;123 |&amp;gt; f(#)
123 |&amp;gt; (x =&amp;gt; f(x))
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;One important benefit of the pipeline operator is that you can use functions as if they were methods – without changing any prototypes:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;import {map} from 'array-tools';
const result = arr |&amp;gt; map(#, x =&amp;gt; x * 2);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;To conclude, let’s look at a longer example (taken from the proposal and slightly edited):&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;promise
|&amp;gt; await #
|&amp;gt; # || throw new TypeError(
  `Invalid value from ${promise}`)
|&amp;gt; capitalize // function call
|&amp;gt; # + '!'
|&amp;gt; new User.Message(#)
|&amp;gt; await stream.write(#)
|&amp;gt; console.log // method call
;
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;concurrency&quot;&gt;Concurrency  &lt;/h2&gt;
&lt;p&gt;JavaScript has always had limited support for concurrency. The de-facto standard for concurrent processes is the Worker API, which is available in &lt;a href=&quot;https://caniuse.com/#feat=webworkers&quot;&gt;web browsers&lt;/a&gt; and &lt;a href=&quot;https://nodejs.org/dist/latest-v11.x/docs/api/worker_threads.html&quot;&gt;Node.js&lt;/a&gt; (without a flag in v11.7 and later).&lt;/p&gt;
&lt;p&gt;Using it from Node.js looks as follows.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; {
  Worker, isMainThread, parentPort, workerData
} = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;'worker_threads'&lt;/span&gt;);

&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (isMainThread) {
  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; worker = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Worker(__filename, {
    &lt;span class=&quot;hljs-attr&quot;&gt;workerData&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;'the-data.json'&lt;/span&gt;
  });
  worker.on(&lt;span class=&quot;hljs-string&quot;&gt;'message'&lt;/span&gt;, result =&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;.log(result));
  worker.on(&lt;span class=&quot;hljs-string&quot;&gt;'error'&lt;/span&gt;, err =&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;.error(err));
  worker.on(&lt;span class=&quot;hljs-string&quot;&gt;'exit'&lt;/span&gt;, code =&amp;gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (code !== &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {
      &lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;.error(&lt;span class=&quot;hljs-string&quot;&gt;'ERROR: '&lt;/span&gt; + code);
    }
  });
} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; {readFileSync} = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;'fs'&lt;/span&gt;);
  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; fileName = workerData;
  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; text = readFileSync(fileName, {&lt;span class=&quot;hljs-attr&quot;&gt;encoding&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;'utf8'&lt;/span&gt;});
  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; json = &lt;span class=&quot;hljs-built_in&quot;&gt;JSON&lt;/span&gt;.parse(text);
  parentPort.postMessage(json);
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Alas, Workers are relatively heavyweight – each one comes with its own realm (global variables etc.). I’d like to see a more lightweight construct in the future.&lt;/p&gt;
&lt;h2 id=&quot;standard-library&quot;&gt;Standard library  &lt;/h2&gt;
&lt;p&gt;One area where JavaScript is still clearly behind other languages is its standard library. It does make sense to keep it minimal, as external libraries are easier to evolve and adapt. However, there are a few core features that would be useful.&lt;/p&gt;
&lt;h3 id=&quot;modules-instead-of-namespace-objects&quot;&gt;Modules instead of namespace objects  &lt;/h3&gt;
&lt;p&gt;JavaScript’s standard library was created before the language had modules. Therefore, functions were put in namespace objects such as &lt;code&gt;Object&lt;/code&gt;, &lt;code&gt;Reflect&lt;/code&gt;, &lt;code&gt;Math&lt;/code&gt; and &lt;code&gt;JSON&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;Object.keys()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Reflect.ownKeys()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Math.sign()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JSON.parse()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;It would be great if this functionality could be put in modules. It would have to be accessed via special URLs, e.g. with the pseudo-protocol &lt;code&gt;std&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;
assert.deepEqual(
  &lt;span class=&quot;hljs-built_in&quot;&gt;Object&lt;/span&gt;.keys({&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}),
  [&lt;span class=&quot;hljs-string&quot;&gt;'a'&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;'b'&lt;/span&gt;]);


&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; {keys} &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;'std:object'&lt;/span&gt;;
assert.deepEqual(
  keys({&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}),
  [&lt;span class=&quot;hljs-string&quot;&gt;'a'&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;'b'&lt;/span&gt;]);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The benefits are:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;JavaScript would become more modular (which could speed up startup times and reduce memory consumption).&lt;/li&gt;
&lt;li&gt;Calling an imported function is faster than calling a function stored in an object.&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;helpers-for-iterables-sync-and-async&quot;&gt;Helpers for iterables (sync and async)  &lt;/h3&gt;
&lt;p&gt;Benefits of &lt;a href=&quot;http://exploringjs.com/impatient-js/ch_sync-iteration-use.html&quot;&gt;iterables&lt;/a&gt; include on-demand computation of values and support for many data sources. However, JavaScript currently comes with very few tools for working with iterables. For example, if you want to filter, map or reduce an iterable, you have to convert it to an Array:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; iterable = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Set&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;-2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]);
&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; filteredArray = [...iterable].filter(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt; =&amp;gt;&lt;/span&gt; x &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);
assert.deepEqual(filteredArray, [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If JavaScript had tool functions for iterables, you could filter iterables directly:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; filteredIterable = filter(iterable, x =&amp;gt; x &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);
assert.deepEqual(
  
  
  [...filteredIterable], [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;These are a few more examples of tool functions for iterables:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;
assert.equal(count(iterable), &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;);


assert.deepEqual(
  [...slice(iterable, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)],
  [&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]);



&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; [i,x] &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; zip(range(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;), iterable)) {
  &lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;.log(i, x);
}





&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Notes:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Consult Python’s &lt;a href=&quot;https://docs.python.org/3/library/itertools.html&quot;&gt;itertools&lt;/a&gt; for examples of tool functions for iterators.&lt;/li&gt;
&lt;li&gt;For JavaScript, each tool function for iterables should come in two versions: one for synchronous iterables and one for asynchronous iterables.&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;immutable-data&quot;&gt;Immutable data  &lt;/h3&gt;
&lt;p&gt;It would be nice to have more support for non-destructively transforming data. Two relevant libraries are:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/mweststrate/immer&quot;&gt;Immer&lt;/a&gt; is relatively lightweight and works with normal objects and Arrays.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/facebook/immutable-js/&quot;&gt;Immutable.js&lt;/a&gt; is more powerful and heavyweight and comes with its own data structures.&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;better-support-for-date-times&quot;&gt;Better support for date times  &lt;/h3&gt;
&lt;p&gt;JavaScript’s built-in support for date times has many quirks. That’s why the current recommendation is to use libraries for all but the most basic tasks.&lt;/p&gt;
&lt;p&gt;Thankfully, work on &lt;a href=&quot;https://github.com/tc39/proposal-temporal&quot;&gt;&lt;code&gt;temporal&lt;/code&gt;&lt;/a&gt;, a better date time API, is ongoing:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; dateTime = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; CivilDateTime(&lt;span class=&quot;hljs-number&quot;&gt;2000&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;59&lt;/span&gt;);
&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; instantInChicago = dateTime.withZone(&lt;span class=&quot;hljs-string&quot;&gt;'America/Chicago'&lt;/span&gt;);
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;features-that-may-not-be-needed&quot;&gt;Features that may not be needed  &lt;/h2&gt;
&lt;h3 id=&quot;the-pros-and-cons-of-optional-chaining&quot;&gt;The pros and cons of optional chaining  &lt;/h3&gt;
&lt;p&gt;One proposed feature that is relatively popular is &lt;a href=&quot;https://github.com/tc39/proposal-optional-chaining&quot;&gt;optional chaining&lt;/a&gt;. The following two expressions are equivalent.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;obj?.prop
(obj === &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt; || obj === &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) ? &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt; : obj.prop
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This feature is especially convenient for chains of properties:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;obj?.foo?.bar?.baz
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;However, this feature has downsides:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Deeply nested structures are more difficult to manage.&lt;/li&gt;
&lt;li&gt;Being so forgiving when accessing data hides problems that will surface much later and are then harder to debug.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;An alternative to optional chaining is to extract the information once, in a single location:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;You can either write a helper function that extracts the data.&lt;/li&gt;
&lt;li&gt;Or you can write a function whose input is deeply nested data and whose output is simpler, normalized data.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;With either approach, it is possible to perform checks and to fail early if there are problems.&lt;/p&gt;
&lt;p&gt;Further reading:&lt;/p&gt;
&lt;h3 id=&quot;do-we-need-operator-overloading&quot;&gt;Do we need operator overloading?  &lt;/h3&gt;
&lt;p&gt;Early work is currently being done for &lt;a href=&quot;https://github.com/littledan/proposal-operator-overloading/&quot;&gt;operator overloading&lt;/a&gt;, but infix function application may be enough (there currently is no proposal for it, though):&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; {BigDecimal, plus} &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;'big-decimal'&lt;/span&gt;;
&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; bd1 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; BigDecimal(&lt;span class=&quot;hljs-string&quot;&gt;'0.1'&lt;/span&gt;);
&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; bd2 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; BigDecimal(&lt;span class=&quot;hljs-string&quot;&gt;'0.2'&lt;/span&gt;);
&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; bd3 = bd1 @plus bd2; 
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The benefits of infix function application are:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;You can create operators other than those that are already supported by JavaScript.&lt;/li&gt;
&lt;li&gt;Compared to normal function application, nested expressions remain readable.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;This is an example of a nested expression:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;a @​plus b @​minus c @​times d
times(minus(plus(a, b), c), d)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Interestingly, the pipeline operator also helps with readability:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;plus(a, b)
  |&amp;gt; minus(#, c)
  |&amp;gt; times(#, d)
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;various-smaller-things&quot;&gt;Various smaller things  &lt;/h2&gt;
&lt;p&gt;These are a few things that I’m occasionally missing, but that I don’t consider as essential as what I’ve mentioned previously:&lt;/p&gt;
&lt;ul readability=&quot;23.759246575342&quot;&gt;&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;Chained exceptions: enable you to catch an error, wrap additional information around it and throw it again.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ChainedError(msg, origError)
&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;0.58904109589041&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://2ality.com/2017/07/re-template-tag.html&quot;&gt;Composable regular expressions&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;re&lt;span class=&quot;hljs-string&quot;&gt;`/^&lt;span class=&quot;hljs-subst&quot;&gt;${RE_YEAR}&lt;/span&gt;-&lt;span class=&quot;hljs-subst&quot;&gt;${RE_MONTH}&lt;/span&gt;-&lt;span class=&quot;hljs-subst&quot;&gt;${RE_DAY}&lt;/span&gt;$/u`&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;Escaping text for regular expressions (important for &lt;code&gt;.replace()&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-repl&quot;&gt;&amp;gt; const re = new RegExp(RegExp.escape(':-)'), 'ug');
&amp;gt; ':-) :-) :-)'.replace(re, '🙂')
'🙂 🙂 🙂'
&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;Array.prototype.get()&lt;/code&gt; that supports negative indices:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-repl&quot;&gt;&amp;gt; ['a', 'b'].get(-1)
'b'
&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;1.44&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/zkat/proposal-as-patterns&quot;&gt;As-patterns for matching and destructuring&lt;/a&gt; (proposal by Kat Marchán):&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;...[x, y] as args&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (args.length !== &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Error&lt;/span&gt;();
  }
  
}
&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;11&quot;&gt;
&lt;p&gt;Checking deep equality for objects (maybe: optionally parameterize with a predicate, to support custom data structures):&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;assert.equal(
  {&lt;span class=&quot;hljs-attr&quot;&gt;foo&lt;/span&gt;: [&lt;span class=&quot;hljs-string&quot;&gt;'a'&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;'b'&lt;/span&gt;]} === {&lt;span class=&quot;hljs-attr&quot;&gt;foo&lt;/span&gt;: [&lt;span class=&quot;hljs-string&quot;&gt;'a'&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;'b'&lt;/span&gt;]},
  &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);
assert.equal(
  deepEqual({&lt;span class=&quot;hljs-attr&quot;&gt;foo&lt;/span&gt;: [&lt;span class=&quot;hljs-string&quot;&gt;'a'&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;'b'&lt;/span&gt;]}, {&lt;span class=&quot;hljs-attr&quot;&gt;foo&lt;/span&gt;: [&lt;span class=&quot;hljs-string&quot;&gt;'a'&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;'b'&lt;/span&gt;]}),
  &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);
&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;6.9015544041451&quot;&gt;
&lt;p&gt;Enums: One benefit of adding enums to JavaScript is that that would close a gap with TypeScript – which already has enums. There are currently two draft proposals (which aren’t at a formal stage, yet). &lt;a href=&quot;https://github.com/rwaldron/proposal-enum-definitions&quot;&gt;One is by Rick Waldron&lt;/a&gt;, &lt;a href=&quot;https://github.com/rbuckton/proposal-enum&quot;&gt;the other one is by Ron Buckton&lt;/a&gt;. In both proposals, the simplest syntax looks like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;enum WeekendDay {
  Saturday, Sunday
}
&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; day = WeekendDay.Sunday;
&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;5.2277227722772&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/zkat/proposal-collection-literals&quot;&gt;Tagged collection literals&lt;/a&gt; (proposed – and withdrawn – by Kat Marchán): allow you to create Maps and Sets as follows:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; myMap = &lt;span class=&quot;hljs-built_in&quot;&gt;Map&lt;/span&gt;!{&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;three&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, [[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]]: &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;}
  

&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; mySet = &lt;span class=&quot;hljs-built_in&quot;&gt;Set&lt;/span&gt;![&lt;span class=&quot;hljs-string&quot;&gt;'a'&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;'b'&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;'c'&lt;/span&gt;];
  
&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;faq-future-javascript&quot;&gt;FAQ: future JavaScript  &lt;/h2&gt;
&lt;h3 id=&quot;will-javascript-ever-support-static-typing&quot;&gt;Will JavaScript ever support static typing?  &lt;/h3&gt;
&lt;p&gt;Not anytime soon! The current separation between static typing at development time (via TypeScript or Flow) and pure JavaScript at runtime, works well. So there is no immediate reason to change anything.&lt;/p&gt;
&lt;h3 id=&quot;why-cant-we-clean-up-javascript-by-removing-quirks-and-outdated-features&quot;&gt;Why can’t we clean up JavaScript, by removing quirks and outdated features?  &lt;/h3&gt;
&lt;p&gt;A key requirement for the web is to never break backward compatibility:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The downside is that the language has many legacy features.&lt;/li&gt;
&lt;li&gt;But the upsides outweigh this downside: Large code bases remain homogeneous; migrating to a new version is simple; engines remain smaller (no need to support multiple versions); etc.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;It is still possible to fix some mistakes, by introducing better versions of existing features.&lt;/p&gt;
&lt;p&gt;For more information on this topic, consult “&lt;a href=&quot;http://exploringjs.com/impatient-js/ch_history.html#backward-compatibility&quot;&gt;JavaScript for impatient programmers&lt;/a&gt;”.&lt;/p&gt;
&lt;h2 id=&quot;language-design&quot;&gt;Thoughts on language design  &lt;/h2&gt;
&lt;p&gt;As a language designer, no matter what you do, you will always make some people happy and some people sad. Therefore, the main challenge for designing future JavaScript features is not to make everyone happy, but to keep the language as consistent as possible.&lt;/p&gt;
&lt;p&gt;However, there is also disagreement on what “consistent” means. So, the best we can probably do is to establish a consistent “style”, conceived and enforced by a small group of people (up to three). That does not preclude them being advised and helped by many others, but they should set the general tone.&lt;/p&gt;
&lt;p&gt;Quoting &lt;a href=&quot;https://en.wikiquote.org/wiki/Fred_Brooks#No_Silver_Bullet_(1986)&quot;&gt;Fred Brooks&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;A little retrospection shows that although many fine, useful software systems have been designed by committees and built as part of multipart projects, those software systems that have excited passionate fans are those that are the products of &lt;strong&gt;one or a few designing minds&lt;/strong&gt;, great designers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;An important duty of these core designers would be to say “no” to features, to prevent JavaScript from becoming too big.&lt;/p&gt;
&lt;p&gt;They would also need a robust support system, as language designers tend to be exposed to considerable abuse (because people care and don’t like to hear “no”). &lt;a href=&quot;https://www.theregister.co.uk/2018/07/13/python_creator_guido_van_rossum_quits/&quot;&gt;One recent example&lt;/a&gt; is Guido van Rossum quitting his job as chief Python language designer, due to the abuse he received.&lt;/p&gt;
&lt;h3 id=&quot;other-ideas&quot;&gt;Other ideas  &lt;/h3&gt;
&lt;p&gt;These are ideas that may also help design and document JavaScript:&lt;/p&gt;
&lt;ul readability=&quot;4.3712446351931&quot;&gt;&lt;li readability=&quot;2.765625&quot;&gt;
&lt;p&gt;Creating a roadmap that describes a vision for what’s ahead for JavaScript. Such a roadmap can tell a story and connect many separate pieces into a coherent whole. The last such roadmap, that I’m aware of, is “&lt;a href=&quot;https://brendaneich.com/2011/01/harmony-of-my-dreams/&quot;&gt;Harmony Of My Dreams&lt;/a&gt;” by Brendan Eich.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;Documenting design rationales. Right now, the ECMAScript specification documents &lt;em&gt;how&lt;/em&gt; things work, but not &lt;em&gt;why&lt;/em&gt;. One example: What is the purpose of enumerability?&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;A canonical interpreter. The semi-formal parts of the specification are already almost executable. It’d be great if they could be treated and run like a programming language. (You’d probably need a convention to distinguish normative code from non-normative helper functions.)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Acknowledgement:&lt;/strong&gt; Thanks to Daniel Ehrenberg for his feedback on this blog post!&lt;/p&gt;
</description>
<pubDate>Sun, 27 Jan 2019 13:47:27 +0000</pubDate>
<dc:creator>scottfr</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>http://2ality.com/2019/01/future-js.html</dc:identifier>
</item>
<item>
<title>How Hacker News Stays Interesting</title>
<link>https://jameshfisher.com/2019/01/26/how-hacker-news-stays-interesting.html</link>
<guid isPermaLink="true" >https://jameshfisher.com/2019/01/26/how-hacker-news-stays-interesting.html</guid>
<description>&lt;p&gt;Last week I wrote &lt;a href=&quot;https://jameshfisher.com/2019/01/20/my-parents-are-flat-earthers&quot;&gt;a post called “My parents are Flat-Earthers”&lt;/a&gt;, a history of conspiracy theories in my family. &lt;a href=&quot;https://news.ycombinator.com/item?id=18951569&quot;&gt;Someone submitted it to Hacker News&lt;/a&gt;, and it sat at the top for an hour or so. Then, suddenly, the post dropped to position #26! Here, I describe how that happened, why it happened, and why it’s a good thing.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://hnrankings.info/18951569/&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://d33wubrfki0l68.cloudfront.net/d802f9cdb653dc2e8e771bdfc7d6a89042930199/b253f/assets/2019-01-26-buried/ranking.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Truly my father’s son, my first reaction to this plunge was: “it’s a conspiracy!” After calming down, I learned that you can reach the moderators at &lt;a href=&quot;mailto:hn@ycombinator.com&quot;&gt;hn@ycombinator.com&lt;/a&gt;. I received a quick reply:&lt;/p&gt;
&lt;blockquote readability=&quot;20.360995850622&quot;&gt;
&lt;p&gt;A few things happened with that post: a moderator put a penalty on it, and then a software overheated-discussion detector kicked in, and users flagged it. Those are primarily about dampening the kinds of discussion that results from articles like this one, not about the article itself.&lt;/p&gt;
&lt;p&gt;Hacker News (but probably not just HN!) reacts to speculative, exploratory content on controversial topics with all their own pent-up speculation and anecdotes, and the problem is that it just gets nasty. Religious flamewars, harsh judgements of others (including one’s own grandparents!), blame, etc. This is not the discussion by which we gratify our &lt;a href=&quot;https://news.ycombinator.com/newsguidelines.html&quot;&gt;intellectual curiosity&lt;/a&gt;, and so it gets cleared away for other threads that might.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My website doesn’t have a comments section. Reading the comments on that Hacker News post, you can appreciate why! It’s a circlejerk. Most comments were &lt;em&gt;science vs. religion&lt;/em&gt; debates, the kind that only science-types have. Others were “How do Flat-Earthers explain &lt;em&gt;X&lt;/em&gt;?”, knowing full well that no Flat-Earthers are around to answer. Many other comments were armchair psychoanalysis, without the patient present in the room. Several comments were pretty mean. “It’s really fucked up he wrote this about his parents,” or “I hope my kids have the decency not to trash me in a blog post when they’re older.” I tried hard in my post to describe my family respectfully. My parents’ ideas are wacky and get what they deserve, but I tried hard to avoid &lt;em&gt;ad hominem&lt;/em&gt;, and to show that I appreciate my relationship with them.&lt;/p&gt;
&lt;p&gt;But were these the comments that triggered the “overheated-discussion detector”? Perhaps not! The detector is said to actually fire &lt;a href=&quot;https://github.com/minimaxir/hacker-news-undocumented#flame-war-detector&quot;&gt;“when the number of comments on a submission exceeds its score”&lt;/a&gt;. With 211 comments vs. 173 points, my post was way above average. A simple algorithm which avoids any textual analysis, but isn’t this terribly ripe for abuse?&lt;/p&gt;
&lt;p&gt;I don’t think so. The overheated-discussion detector was outweighed by humans. The moderator’s reply showed he had spent time and thought, reading the post and comments before judging. Burying this post was closer to &lt;em&gt;curation&lt;/em&gt; than censorship. See the difference: unlike censorship, I received a polite explanation for it; and unlike censorship, burying is a &lt;em&gt;visible&lt;/em&gt; action, right there on the homepage! My new post was sandwiched between much older, un-buried posts, and you can frequently see such posts whenever you open the homepage:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://d33wubrfki0l68.cloudfront.net/935ec6a1d60003cffe37732082fcd66916cd9fac/13500/assets/2019-01-26-buried/buried.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;If you want to blame Facebook and YouTube for allowing the spread of wild conspiracy theories, it’s hard to also blame calmer forums like Hacker News for moderation. Thanks to moderation, when I open &lt;a href=&quot;https://news.ycombinator.com&quot;&gt;news.ycombinator.com&lt;/a&gt; right now, I’m pleased to see interesting new posts about C, Chopin, and concurrency; and no new posts about fake news, anti-vaxxers, or Flat Earth.&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://twitter.com/intent/follow?screen_name=MrJamesFisher&amp;amp;original_referer=https://jameshfisher.com/2019/01/26/how-hacker-news-stays-interesting.html&quot;&gt;Get updates on Twitter&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h3&gt;More by Jim&lt;/h3&gt;

&lt;p&gt;I wrote this because I felt like it. This post is not associated with my employer. &lt;a href=&quot;https://github.com/jameshfisher/jameshfisher.com/edit/master/_posts/2019-01-26-how-hacker-news-stays-interesting.md&quot;&gt;Found an error? Edit this page.&lt;/a&gt;&lt;/p&gt;

</description>
<pubDate>Sun, 27 Jan 2019 09:06:39 +0000</pubDate>
<dc:creator>zwischenzug</dc:creator>
<og:title>How Hacker News stays interesting</og:title>
<og:type>website</og:type>
<og:image>https://jameshfisher.com/assets/jim_512.jpg</og:image>
<og:url>https://jameshfisher.com/2019/01/26/how-hacker-news-stays-interesting.html</og:url>
<og:description>Last week I wrote a post called “My parents are Flat-Earthers”, a history of conspiracy theories in my family. Someone submitted it to Hacker News, and it sat at the top for an hour or so. Then, suddenly, the post dropped to position #26! Here, I describe how that happened, why it happened, and why it’s a good thing.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://jameshfisher.com/2019/01/26/how-hacker-news-stays-interesting.html</dc:identifier>
</item>
<item>
<title>Ten minutes a day</title>
<link>https://medium.com/@alexallain/ten-minutes-a-day-e2fa1084f924</link>
<guid isPermaLink="true" >https://medium.com/@alexallain/ten-minutes-a-day-e2fa1084f924</guid>
<description>&lt;div class=&quot;uiScale uiScale-ui--regular uiScale-caption--regular u-flexCenter u-marginVertical24 u-fontSize15 js-postMetaLockup&quot;&gt;
&lt;div class=&quot;u-flex0&quot;&gt;&lt;a class=&quot;link u-baseColor--link avatar&quot; href=&quot;https://medium.com/@alexallain?source=post_header_lockup&quot; data-action=&quot;show-user-card&quot; data-action-source=&quot;post_header_lockup&quot; data-action-value=&quot;43a8afb10604&quot; data-action-type=&quot;hover&quot; data-user-id=&quot;43a8afb10604&quot; dir=&quot;auto&quot;&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/fit/c/100/100/0*Fq4fmBqBna1tVW30.jpg&quot; class=&quot;avatar-image u-size50x50&quot; alt=&quot;Go to the profile of Alex Allain&quot;/&gt;&lt;/a&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p name=&quot;6142&quot; id=&quot;6142&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;In early 2012, I published &lt;a href=&quot;https://www.amazon.com/dp/B00F9311YC/ref=dp-kindle-redirect?_encoding=UTF8&amp;amp;btkr=1&quot; data-href=&quot;https://www.amazon.com/dp/B00F9311YC/ref=dp-kindle-redirect?_encoding=UTF8&amp;amp;btkr=1&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noreferrer nofollow noopener noopener nofollow noopener&quot; target=&quot;_blank&quot;&gt;Jumping into C++&lt;/a&gt;. According to the calendar, I wrote the book between January 2010 and January 2012, but it took me less than 200 hours of work. I know this because for most of the time I worked on the book, I kept careful track of my time spent. Between 1/4/2010 and 9/29/2011 (when I stopped keeping track), I’d worked on the book for almost exactly 156 hours and written over 70,000 words.&lt;/p&gt;
&lt;p name=&quot;b485&quot; id=&quot;b485&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;How, exactly, did I manage to write a book in this short a time? I had one simple rule: I had to work on the book for just ten minutes, every day, no excuses. Ever.&lt;/p&gt;
&lt;p name=&quot;d9cd&quot; id=&quot;d9cd&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The original reason I tracked my time, in fact, was that I wanted to motivate myself by having a streak of days, and I figured that instead of just tallying check marks, I’d write down exactly how long I spent. It worked — I never missed a day.&lt;/p&gt;
&lt;p name=&quot;4b91&quot; id=&quot;4b91&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Now, I didn’t say I &lt;em class=&quot;markup--em markup--p-em&quot;&gt;wrote&lt;/em&gt; the book every day — just that I worked on it. Some (many) days, I would work on sample code, futz with formatting, brainstorm ideas, or make edits. All I needed to do was stare at the page for ten minutes and try to do something that felt like progress.&lt;/p&gt;
&lt;p name=&quot;00b8&quot; id=&quot;00b8&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Even when I was in the zone, I really didn’t spend very long on any given day — on 499 days, I spent 15 minutes or less. There were only 5 days where I worked for more than one hour, and the most time I ever spent was 72 minutes. It definitely helped that I was sometimes able to get into a zone, but it was never the flaming hot zone &lt;a href=&quot;https://www.npr.org/templates/story/story.php?storyId=11709924&quot; data-href=&quot;https://www.npr.org/templates/story/story.php?storyId=11709924&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noreferrer nofollow noopener nofollow noopener&quot; target=&quot;_blank&quot;&gt;Jack Kerouac described in claiming to have written &lt;em class=&quot;markup--em markup--p-em&quot;&gt;On the Road&lt;/em&gt; in a 3 week blur&lt;/a&gt;.&lt;/p&gt;
&lt;p name=&quot;204a&quot; id=&quot;204a&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Instead, I got into a different kind of zone — one where the work was omnipresent, but in the background. More sous vide than flame grilled. Writing every day kept ideas top of mind. When I finished writing, I’d carry the puzzles to my commute or the shower, and I’d talk to people about them. My ideas were always nearby, making it easy to jump back in. If I’d worked for 70 minutes, every Saturday, I’m sure I’d have made far less progress. I’d have forgotten where I was every time I was ready to start.&lt;/p&gt;
&lt;p name=&quot;1d8e&quot; id=&quot;1d8e&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;On some days, despite that, I’d get stuck. On those days, I gave myself permission to make small tweaks rather than forcing myself to write reams of new words. If I had writer’s block, I didn’t beat myself up about it — today might not be a good day, so let’s use it for something I have to do anyway. There’s always tomorrow to take another crack at writing.&lt;/p&gt;
&lt;p name=&quot;e588&quot; id=&quot;e588&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;On those days, I would often review and edit dozens of pages, which kick-started my thinking by reminding me of the big picture — and of the gaps — in a way that I couldn’t when my cursor was sitting and blinking in the middle of a sentence. I rarely found myself unable to write for more than a few days or a week at a time.&lt;/p&gt;
&lt;p name=&quot;355c&quot; id=&quot;355c&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The other thing that really helped is that I didn’t allow myself to check my email until I worked on the book. It wasn’t until recently that I realized (after reading &lt;a href=&quot;http://dimitarsimeonov.com/2016/05/13/the-blinking-cursor-and-the-hot-towel&quot; data-href=&quot;http://dimitarsimeonov.com/2016/05/13/the-blinking-cursor-and-the-hot-towel&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noreferrer nofollow noopener nofollow noopener&quot; target=&quot;_blank&quot;&gt;http://dimitarsimeonov.com/2016/05/13/the-blinking-cursor-and-the-hot-towel&lt;/a&gt;) that I was really creating a habit loop — I gave myself the reward of checking my personal email in exchange for putting in the time on the book. It also tied the concept of working on the book to something very concrete; it was impossible to forget to do.&lt;/p&gt;
&lt;p name=&quot;f7e9&quot; id=&quot;f7e9&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;There were certainly times where I felt like the book was never going to come together — that it was an enormous hill that I was barely scratching. When that happened, going back over what was already there and making edits showed me just how far I’d come and inspired the next wave of work.&lt;/p&gt;
&lt;p name=&quot;1319&quot; id=&quot;1319&quot; class=&quot;graf graf--p graf-after--p graf--trailing&quot;&gt;So, what are you doing for the next ten minutes?&lt;/p&gt;
</description>
<pubDate>Sun, 27 Jan 2019 03:57:02 +0000</pubDate>
<dc:creator>alexallain</dc:creator>
<og:title>Ten minutes a day – Alex Allain – Medium</og:title>
<og:url>https://medium.com/@alexallain/ten-minutes-a-day-e2fa1084f924</og:url>
<og:description>In early 2012, I published Jumping into C++. According to the calendar, I wrote the book between January 2010 to January 2012, but it took…</og:description>
<og:type>article</og:type>
<dc:format>text/html</dc:format>
<dc:identifier>https://medium.com/@alexallain/ten-minutes-a-day-e2fa1084f924</dc:identifier>
</item>
<item>
<title>Verilog sources for Western Digital&amp;#039;s open source RISC-V core</title>
<link>https://github.com/westerndigitalcorporation/swerv_eh1</link>
<guid isPermaLink="true" >https://github.com/westerndigitalcorporation/swerv_eh1</guid>
<description>&lt;div class=&quot;Box-body p-6&quot;&gt;
&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt;
&lt;p&gt;This repository contains the SweRV core design RTL&lt;/p&gt;
&lt;h2&gt;License&lt;/h2&gt;
&lt;p&gt;By contributing to this project, you agree that your contribution is governed by &lt;a href=&quot;https://github.com/westerndigitalcorporation/swerv_eh1/blob/master/LICENSE&quot;&gt;Apache-2.0&lt;/a&gt;.&lt;br/&gt;Files under the &lt;a href=&quot;https://github.com/westerndigitalcorporation/swerv_eh1/blob/master/tools&quot;&gt;tools&lt;/a&gt; directory may be available under a different license. Please review individual file for details.&lt;/p&gt;
&lt;h2&gt;Directory Structure&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;├── configs                 # Configurations Dir
│   └── snapshots           # Where generated configuration files are created
├── design                  # Design root dir
│   ├── dbg                 #   Debugger
│   ├── dec                 #   Decode, Registers and Exceptions
│   ├── dmi                 #   DMI block
│   ├── exu                 #   EXU (ALU/MUL/DIV)
│   ├── ifu                 #   Fetch &amp;amp; Branch Prediction
│   ├── include             
│   ├── lib
│   └── lsu                 #   Load/Store
├── docs
├── tools                   # Scripts/Makefiles
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;Dependencies&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;Verilator &lt;strong&gt;(3.926 or later)&lt;/strong&gt; must be installed on the system&lt;/li&gt;
&lt;li&gt;If addding/reoving instructions, espresso must be installed (used by &lt;em&gt;tools/coredecode&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Quickstart guide&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;Clone the repository&lt;/li&gt;
&lt;li&gt;Setup RV_ROOT to point to the path in your local filesystem&lt;/li&gt;
&lt;li&gt;Determine your configuration {optional}&lt;/li&gt;
&lt;li&gt;Run make with tools/Makefile&lt;/li&gt;
&lt;/ol&gt;&lt;h3&gt;Configurations&lt;/h3&gt;
&lt;p&gt;SweRV can be configured by running the &lt;code&gt;$RV_ROOT/configs/swerv.config&lt;/code&gt; script:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;% $RV_ROOT/configs/swerv.config -h&lt;/code&gt; for detailed help options&lt;/p&gt;
&lt;p&gt;For example to build with a DCCM of size 64 :&lt;/p&gt;
&lt;p&gt;&lt;code&gt;% $RV_ROOT/configs/swerv.config -dccm_size=64&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This will update the &lt;strong&gt;default&lt;/strong&gt; snapshot in $RV_ROOT/configs/snapshots/default/ with parameters for a 64K DCCM.&lt;/p&gt;
&lt;p&gt;Add &lt;code&gt;-snapshot=dccm64&lt;/code&gt;, for example, if you wish to name your build snapshot &lt;em&gt;dccm64&lt;/em&gt; and refer to it during the build.&lt;/p&gt;
&lt;p&gt;This script derives the following consistent set of include files :&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$RV_ROOT/configs/snapshots/default
├── common_defines.vh                       # `defines for testbench or design
├── defines.h                               # #defines for C/assembly headers
├── pd_defines.vh                           # `defines for physical design
├── perl_configs.pl                         # Perl %configs hash for scripting
├── pic_ctrl_verilator_unroll.sv            # Unrolled verilog based on PIC size
├── pic_map_auto.h                          # PIC memory map based on configure size
└── whisper.json                            # JSON file for swerv-iss
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;Building a model&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;
&lt;p&gt;Set the RV_ROOT environment variable to the root of the SweRV directory structure&lt;/p&gt;
&lt;p&gt;&lt;code&gt;RV_ROOT = /path/to/swerv&lt;/code&gt;&lt;br/&gt;&lt;code&gt;export RV_ROOT&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create your configuration&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(Skip if default is sufficient)&lt;/em&gt;&lt;br/&gt;&lt;em&gt;(Name your snapshot to distinguish it from the default. Without an explicit name, it will update/override the &lt;strong&gt;default&lt;/strong&gt; snapshot)&lt;/em&gt;&lt;br/&gt;&lt;code&gt;$RV_ROOT/configs/swerv.config [configuration options..] -snapshot=mybuild&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Snapshots are placed in &lt;code&gt;$RV_ROOT/configs/snapshots/&amp;lt;snapshot name&amp;gt;/&lt;/code&gt; directory&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Build with &lt;strong&gt;verilator&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;make -f $RV_ROOT/tools/Makefile verilator [snapshot=name]&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;This will create and populate the verilator &lt;em&gt;obj_dir/&lt;/em&gt; in the current work dir.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Other targets supported&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;vcs  (Synopsys)  
irun (Cadence)  
&lt;/code&gt;
&lt;/pre&gt;&lt;/article&gt;&lt;/div&gt;
</description>
<pubDate>Sun, 27 Jan 2019 00:07:13 +0000</pubDate>
<dc:creator>obl</dc:creator>
<og:image>https://avatars3.githubusercontent.com/u/8161321?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>westerndigitalcorporation/swerv_eh1</og:title>
<og:url>https://github.com/westerndigitalcorporation/swerv_eh1</og:url>
<og:description>A directory of Western Digital’s RISC-V SweRV Cores - westerndigitalcorporation/swerv_eh1</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/westerndigitalcorporation/swerv_eh1</dc:identifier>
</item>
</channel>
</rss>