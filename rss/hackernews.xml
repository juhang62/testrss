<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>3D Wireframes Using SVG</title>
<link>https://prideout.net/blog/svg_wireframes/</link>
<guid isPermaLink="true" >https://prideout.net/blog/svg_wireframes/</guid>
<description>&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;/&gt;&lt;title&gt;3D Wireframes in SVG&lt;/title&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1&quot;/&gt;&lt;meta property=&quot;og:title&quot; content=&quot;3D Wireframes in SVG&quot;/&gt;&lt;meta property=&quot;og:type&quot; content=&quot;article&quot;/&gt;&lt;meta property=&quot;og:description&quot; content=&quot;How to use Python to generate 3D SVG.&quot;/&gt;&lt;meta property=&quot;og:url&quot; content=&quot;https://prideout.net/blog/svg_wireframes&quot;/&gt;&lt;meta property=&quot;og:image&quot; content=&quot;https://prideout.net/blog/svg_wireframes/square_icon.png&quot;/&gt;&lt;meta property=&quot;og:site_name&quot; content=&quot;The Little Grasshopper&quot;/&gt;&lt;link rel=&quot;shortcut icon&quot; href=&quot;https://prideout.net/assets/favicon.png&quot;/&gt;&lt;link href=&quot;https://fonts.googleapis.com/css?family=Alegreya&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;/&gt;&lt;link href=&quot;https://fonts.googleapis.com/css?family=Inconsolata&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;/&gt;&lt;link href=&quot;https://fonts.googleapis.com/css?family=Heebo:400,800&amp;amp;display=swap&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;/&gt;&lt;/head&gt;&lt;body id=&quot;readabilityBody&quot; readability=&quot;125.02574102964&quot;&gt;


&lt;p&gt;&lt;img class=&quot;filmstrip&quot; src=&quot;https://prideout.net/blog/svg_wireframes/filmstrip.svg&quot;/&gt;&lt;/p&gt;


&lt;p&gt;SVG is great for line art. It scales nicely for high DPI displays without using much bandwidth. However SVG was not designed for 3D, so it does not provide mechanisms for applying perspective transformation or hidden surface elimination.&lt;/p&gt;
&lt;p&gt;These limitations can be overcome for simple meshes by baking the perspective transformation, carefully ordering the paths within the SVG document, and paying attention to the winding direction of projected polygons.&lt;/p&gt;
&lt;p&gt;In this post I will show how to use Python to generate vector art as seen at the top of the page, including the fully lit 3D Möbius tube.&lt;/p&gt;
&lt;p&gt;To see the complete code that I used to generate all the SVG images on this page, go to &lt;a href=&quot;https://github.com/prideout/svg3d&quot;&gt;this GitHub repo&lt;/a&gt;.&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;First we need to define the classic ingredients that you’ll find in almost any 3D renderer: classes for a viewport, camera, mesh, and scene:&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;viewport&lt;/strong&gt; defines the rectangular region within the final image that the camera projects to. This can be left set to its default values unless the image contains multiple panels.&lt;/p&gt;
&lt;p&gt;The camera encompasses the &lt;strong&gt;view matrix&lt;/strong&gt; and the &lt;strong&gt;projection matrix&lt;/strong&gt;. We can use &lt;a href=&quot;https://github.com/adamlwgriffiths/Pyrr&quot;&gt;pyrr&lt;/a&gt; to generate these; it provides &lt;code&gt;create_look_at&lt;/code&gt; and &lt;code&gt;create_perspective_projection&lt;/code&gt; functions.&lt;/p&gt;
&lt;p&gt;The mesh has a list of &lt;strong&gt;faces&lt;/strong&gt;, a &lt;strong&gt;shader&lt;/strong&gt;, and a &lt;strong&gt;style dictionary&lt;/strong&gt; that gets applied to the SVG group that represents the mesh.&lt;/p&gt;
&lt;p&gt;Wait, a &lt;em&gt;shader&lt;/em&gt; in SVG? Well, in this context the “shader” is an optional callback function that consumes a mesh face and produces a style dictionary that gets applied to the projected polygon.&lt;/p&gt;
&lt;p&gt;The mesh also contains a three-dimensional numpy array called &lt;strong&gt;faces&lt;/strong&gt; whose shape is n⨯m⨯3 where &lt;em&gt;n&lt;/em&gt; is the number of faces and &lt;em&gt;m&lt;/em&gt; is the number of vertices per face (e.g. &lt;em&gt;m=4&lt;/em&gt; for quad meshes). The last axis has a length of 3 because the mesh consists of X Y Z coordinates.&lt;/p&gt;

&lt;p&gt;Before we get to the implementation of our SVG generator, let’s look at how we’d use the above classes to create an image that looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://prideout.net/blog/svg_wireframes/octahedron.svg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;First, we need to come up with the face data for the octahedron. Simple enough:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot; readability=&quot;0.78125&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb2-1&quot; data-line-number=&quot;1&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; octahedron():&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb2-2&quot; data-line-number=&quot;2&quot;&gt;    &lt;span class=&quot;co&quot;&gt;&quot;&quot;&quot;Construct an eight-sided polyhedron&quot;&quot;&quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb2-3&quot; data-line-number=&quot;3&quot;&gt;    f &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;  sqrt(&lt;span class=&quot;fl&quot;&gt;2.0&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;2.0&lt;/span&gt;&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb2-4&quot; data-line-number=&quot;4&quot;&gt;    verts &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; numpy.float32([ ( &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;-1&lt;/span&gt;,  &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;), (&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;f,  &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;,  f), ( f,  &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;,  f), ( f,  &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;f), (&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;f,  &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;f), ( &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;,  &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;,  &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;) ])&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb2-5&quot; data-line-number=&quot;5&quot;&gt;    triangles &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; numpy.int32([ (&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;) ])&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb2-6&quot; data-line-number=&quot;6&quot;&gt;    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; verts[triangles]&lt;/a&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above code snippet generates a 8⨯3⨯3 face array by dereferencing the vertex buffer using numpy’s “fancy indexing” feature.&lt;/p&gt;
&lt;p&gt;Next, let’s set up the scene and invoke the renderer. Note the use of the aforementioned &lt;a href=&quot;https://github.com/adamlwgriffiths/Pyrr&quot;&gt;pyrr&lt;/a&gt; module to compute proper 4x4 matrices.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot; readability=&quot;0.51745379876797&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb3-1&quot; data-line-number=&quot;1&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; pyrr&lt;/a&gt;

&lt;a class=&quot;sourceLine&quot; id=&quot;cb3-3&quot; data-line-number=&quot;3&quot;&gt;projection_matrix &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; pyrr.matrix44.create_perspective_projection(fovy&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;25&lt;/span&gt;, aspect&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, near&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;, far&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb3-4&quot; data-line-number=&quot;4&quot;&gt;view_matrix &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; pyrr.matrix44.create_look_at(eye&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[&lt;span class=&quot;dv&quot;&gt;25&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;-20&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;60&lt;/span&gt;], target&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;], up&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;])&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb3-5&quot; data-line-number=&quot;5&quot;&gt;camera &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; Camera(view_matrix, projection_matrix)&lt;/a&gt;

&lt;a class=&quot;sourceLine&quot; id=&quot;cb3-7&quot; data-line-number=&quot;7&quot;&gt;style &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;dict&lt;/span&gt;(&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb3-8&quot; data-line-number=&quot;8&quot;&gt;    fill&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'white'&lt;/span&gt;, fill_opacity&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'0.75'&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb3-9&quot; data-line-number=&quot;9&quot;&gt;    stroke&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'black'&lt;/span&gt;, stroke_linejoin&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'round'&lt;/span&gt;, stroke_width&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'0.005'&lt;/span&gt;)&lt;/a&gt;

&lt;a class=&quot;sourceLine&quot; id=&quot;cb3-11&quot; data-line-number=&quot;11&quot;&gt;mesh &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; Mesh(&lt;span class=&quot;fl&quot;&gt;15.0&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; octahedron(), style&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;style)&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb3-12&quot; data-line-number=&quot;12&quot;&gt;view &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; View(camera, Scene([mesh]))&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb3-13&quot; data-line-number=&quot;13&quot;&gt;Engine([view]).render(&lt;span class=&quot;st&quot;&gt;'octahedron.svg'&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The stroke width is very small because our renderer normally sets up a SVG &lt;code&gt;viewBox&lt;/code&gt; with width and height of 1.0, spanning the region from [-0.5, -0.5] to [+0.5, +0.5].&lt;/p&gt;
&lt;p&gt;Our implementation will use the &lt;a href=&quot;https://github.com/mozman/svgwrite&quot;&gt;svgwrite&lt;/a&gt; module, which accepts style dictionaries that map sensibly to SVG attributes. Note that we use &lt;code&gt;round&lt;/code&gt; for joining strokes, which is necessary for making a nice wireframe.&lt;/p&gt;
&lt;p&gt;The render is kicked off using the &lt;code&gt;Engine&lt;/code&gt; class, which is the only API type that we haven’t mentioned yet. This brings us to the next section…&lt;/p&gt;

&lt;p&gt;The engine is responsible for consuming a scene description and generating an SVG file. At a high level it simply iterates though the views and creates a SVG group for each mesh:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb4&quot; readability=&quot;0.53720930232558&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb4-1&quot; data-line-number=&quot;1&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; numpy&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb4-2&quot; data-line-number=&quot;2&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; svgwrite&lt;/a&gt;

&lt;a class=&quot;sourceLine&quot; id=&quot;cb4-4&quot; data-line-number=&quot;4&quot;&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Engine:&lt;/a&gt;

&lt;a class=&quot;sourceLine&quot; id=&quot;cb4-6&quot; data-line-number=&quot;6&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;, views):&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb4-7&quot; data-line-number=&quot;7&quot;&gt;        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.views &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; views&lt;/a&gt;

&lt;a class=&quot;sourceLine&quot; id=&quot;cb4-9&quot; data-line-number=&quot;9&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; render(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;, filename, size&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;512&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;512&lt;/span&gt;), viewBox&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'-0.5 -0.5 1.0 1.0'&lt;/span&gt;):&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb4-10&quot; data-line-number=&quot;10&quot;&gt;        drawing &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; svgwrite.Drawing(filename, size, viewBox&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;viewBox)&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb4-11&quot; data-line-number=&quot;11&quot;&gt;        &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; view &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.views:&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb4-12&quot; data-line-number=&quot;12&quot;&gt;            projection &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; numpy.dot(view.camera.view, view.camera.projection)&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb4-13&quot; data-line-number=&quot;13&quot;&gt;            &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; mesh &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; view.scene.meshes:&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb4-14&quot; data-line-number=&quot;14&quot;&gt;                drawing.add(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;._create_group(drawing, projection, view.viewport, mesh))&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb4-15&quot; data-line-number=&quot;15&quot;&gt;        drawing.save()&lt;/a&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note the usage of &lt;code&gt;numpy.dot&lt;/code&gt; to multiply one 4x4 matrix with another. The resulting matrix will be used to project the homogeneous coordinates onto the viewing plane.&lt;/p&gt;
&lt;p&gt;The real meat of the renderer is in the engine’s &lt;code&gt;_create_group&lt;/code&gt; method, which consumes a mesh and produces an SVG group containing a list of polygons. Some of this code is similar to the OpenGL vertex pipeline.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb5&quot; readability=&quot;1.0524691358025&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb5-1&quot; data-line-number=&quot;1&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; _create_group(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;, drawing, projection, viewport, mesh):&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb5-2&quot; data-line-number=&quot;2&quot;&gt;    faces &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; mesh.faces&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb5-3&quot; data-line-number=&quot;3&quot;&gt;    shader &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; mesh.shader &lt;span class=&quot;kw&quot;&gt;or&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;lambda&lt;/span&gt; face_index, winding: {})&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb5-4&quot; data-line-number=&quot;4&quot;&gt;    default_style &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; mesh.style &lt;span class=&quot;kw&quot;&gt;or&lt;/span&gt; {}&lt;/a&gt;

&lt;a class=&quot;sourceLine&quot; id=&quot;cb5-6&quot; data-line-number=&quot;6&quot;&gt;    &lt;span class=&quot;co&quot;&gt;# Extend each point to a vec4, then multiply by the 4x4 transformation.&lt;/span&gt;&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb5-7&quot; data-line-number=&quot;7&quot;&gt;    ones &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; numpy.ones(faces.shape[:&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; (&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;,))&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb5-8&quot; data-line-number=&quot;8&quot;&gt;    faces &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; numpy.dstack([faces, ones])&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb5-9&quot; data-line-number=&quot;9&quot;&gt;    faces &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; numpy.dot(faces, projection)&lt;/a&gt;

&lt;a class=&quot;sourceLine&quot; id=&quot;cb5-11&quot; data-line-number=&quot;11&quot;&gt;    &lt;span class=&quot;co&quot;&gt;# Divide XYZ by W, then discard W.&lt;/span&gt;&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb5-12&quot; data-line-number=&quot;12&quot;&gt;    faces[:, :, :&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;/=&lt;/span&gt; faces[:, :, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;:&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb5-13&quot; data-line-number=&quot;13&quot;&gt;    faces &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; faces[:, :, :&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;]&lt;/a&gt;

&lt;a class=&quot;sourceLine&quot; id=&quot;cb5-15&quot; data-line-number=&quot;15&quot;&gt;    &lt;span class=&quot;co&quot;&gt;# Apply the viewport transform to X and Y.&lt;/span&gt;&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb5-16&quot; data-line-number=&quot;16&quot;&gt;    faces[:, :, &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; ((faces[:, :, &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;1.0&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; viewport.dims() &lt;span class=&quot;op&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; viewport.&lt;span class=&quot;bu&quot;&gt;min&lt;/span&gt;()&lt;/a&gt;

&lt;a class=&quot;sourceLine&quot; id=&quot;cb5-18&quot; data-line-number=&quot;18&quot;&gt;    &lt;span class=&quot;co&quot;&gt;# Sort faces roughly from back to front.&lt;/span&gt;&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb5-19&quot; data-line-number=&quot;19&quot;&gt;    z_centroids &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;np.&lt;span class=&quot;bu&quot;&gt;sum&lt;/span&gt;(faces[:, :, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;], axis&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb5-20&quot; data-line-number=&quot;20&quot;&gt;    &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; face_index &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;bu&quot;&gt;len&lt;/span&gt;(z_centroids)):&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb5-21&quot; data-line-number=&quot;21&quot;&gt;        z_centroids[face_index] &lt;span class=&quot;op&quot;&gt;/=&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;len&lt;/span&gt;(faces[face_index])&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb5-22&quot; data-line-number=&quot;22&quot;&gt;    face_indices &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; np.argsort(z_centroids)&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb5-23&quot; data-line-number=&quot;23&quot;&gt;    faces &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; faces[face_indices]&lt;/a&gt;

&lt;a class=&quot;sourceLine&quot; id=&quot;cb5-25&quot; data-line-number=&quot;25&quot;&gt;    &lt;span class=&quot;co&quot;&gt;# Compute the winding direction of each polygon, determine its&lt;/span&gt;&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb5-26&quot; data-line-number=&quot;26&quot;&gt;    &lt;span class=&quot;co&quot;&gt;# style, and add it to the group. If the returned style is None,&lt;/span&gt;&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb5-27&quot; data-line-number=&quot;27&quot;&gt;    &lt;span class=&quot;co&quot;&gt;# cull away the polygon.&lt;/span&gt;&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb5-28&quot; data-line-number=&quot;28&quot;&gt;    group &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; drawing.g(&lt;span class=&quot;op&quot;&gt;**&lt;/span&gt;default_style)&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb5-29&quot; data-line-number=&quot;29&quot;&gt;    face_index &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb5-30&quot; data-line-number=&quot;30&quot;&gt;    &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; face &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; faces:&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb5-31&quot; data-line-number=&quot;31&quot;&gt;        p0, p1, p2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; face[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;], face[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;], face[&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb5-32&quot; data-line-number=&quot;32&quot;&gt;        winding &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; pyrr.vector3.cross(p1 &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; p0, p2 &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; p0)[&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb5-33&quot; data-line-number=&quot;33&quot;&gt;        style &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; shader(face_indices[face_index], winding)&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb5-34&quot; data-line-number=&quot;34&quot;&gt;        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; style &lt;span class=&quot;op&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;None&lt;/span&gt;:&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb5-35&quot; data-line-number=&quot;35&quot;&gt;            group.add(drawing.polygon(face[:,&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;], &lt;span class=&quot;op&quot;&gt;**&lt;/span&gt;style))&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb5-36&quot; data-line-number=&quot;36&quot;&gt;        face_index &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; face_index &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;/a&gt;

&lt;a class=&quot;sourceLine&quot; id=&quot;cb5-38&quot; data-line-number=&quot;38&quot;&gt;    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; group&lt;/a&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Some interesting things to note in the above implementation:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Numpy is used to perform most of the math operations en masse, such as applying the 4x4 transform to each vertex in the mesh.&lt;/li&gt;
&lt;li&gt;Faces are sorted back-to-front in a very approximate way according to the Z centroid.&lt;/li&gt;
&lt;li&gt;The face winding direction (clockwise vs counterclockwise) is determined by evaluating a cross product and passing the result (positive vs negative) to the shading function.&lt;/li&gt;
&lt;li&gt;If the shading function returns &lt;code&gt;None&lt;/code&gt;, the face is skipped. This can be used to achieve backface culling if desired.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;parametric-sphere-and-klein-bottle&quot;&gt;&lt;a href=&quot;https://prideout.net/blog/svg_wireframes/#parametric-sphere-and-klein-bottle&quot;&gt;Parametric Sphere and Klein Bottle&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img class=&quot;double&quot; src=&quot;https://prideout.net/blog/svg_wireframes/sphere_and_klein.svg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The above image was generated by evaluating parametric equations.&lt;/p&gt;
&lt;p&gt;First we define a function that consumes LOD factors (slices and stacks) and a callback function that evaluates a parametric equation. It produces a quad mesh. In abbreviated form, the function looks like this:&lt;/p&gt;

&lt;p&gt;(For the complete code, see the &lt;a href=&quot;https://github.com/prideout/svg3d&quot;&gt;GitHub repo&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;We also need to provide callback functions for the shapes of interest:&lt;/p&gt;

&lt;h3 id=&quot;parametric-sphere-with-thick-borders&quot;&gt;&lt;a href=&quot;https://prideout.net/blog/svg_wireframes/#parametric-sphere-with-thick-borders&quot;&gt;Parametric Sphere with Thick Borders&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://prideout.net/blog/svg_wireframes/parametric_sphere.svg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Note that the above wireframe has varying width. The trick is to completely avoid using stroke. Instead we vary the fill style of each face by examining the divisibility of the face index.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb8&quot; readability=&quot;0.44802867383512&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb8-1&quot; data-line-number=&quot;1&quot;&gt;slices, stacks, radius &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;64&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;64&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;12&lt;/span&gt;&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb8-2&quot; data-line-number=&quot;2&quot;&gt;faces &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; radius &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; parametric_surface(slices, stacks, sphere)&lt;/a&gt;

&lt;a class=&quot;sourceLine&quot; id=&quot;cb8-4&quot; data-line-number=&quot;4&quot;&gt;antialiasing &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;auto&quot;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;# use 'crispEdges' to fix cracks&lt;/span&gt;&lt;/a&gt;

&lt;a class=&quot;sourceLine&quot; id=&quot;cb8-6&quot; data-line-number=&quot;6&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; shader(face_index, winding):&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb8-7&quot; data-line-number=&quot;7&quot;&gt;    &lt;span class=&quot;bu&quot;&gt;slice&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;int&lt;/span&gt;(face_index &lt;span class=&quot;op&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;64&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb8-8&quot; data-line-number=&quot;8&quot;&gt;    stack &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;int&lt;/span&gt;(face_index &lt;span class=&quot;op&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;64&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb8-9&quot; data-line-number=&quot;9&quot;&gt;    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;slice&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;or&lt;/span&gt; stack &lt;span class=&quot;op&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;:&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb8-10&quot; data-line-number=&quot;10&quot;&gt;        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;dict&lt;/span&gt;(fill&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'black'&lt;/span&gt;, fill_opacity&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'1.0'&lt;/span&gt;, stroke&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'none'&lt;/span&gt;, shape_rendering&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;antialiasing)&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb8-11&quot; data-line-number=&quot;11&quot;&gt;    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;dict&lt;/span&gt;(fill&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'white'&lt;/span&gt;, fill_opacity&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'0.75'&lt;/span&gt;, stroke&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'none'&lt;/span&gt;, shape_rendering&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;antialiasing)&lt;/a&gt;

&lt;a class=&quot;sourceLine&quot; id=&quot;cb8-13&quot; data-line-number=&quot;13&quot;&gt;scene &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; Scene(Mesh(faces, shader))&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb8-14&quot; data-line-number=&quot;14&quot;&gt;Engine([View(camera, scene)]).render(&lt;span class=&quot;st&quot;&gt;'parametric_sphere.svg'&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;dashed-lines-for-hidden-faces&quot;&gt;&lt;a href=&quot;https://prideout.net/blog/svg_wireframes/#dashed-lines-for-hidden-faces&quot;&gt;Dashed Lines for Hidden Faces&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://prideout.net/blog/svg_wireframes/sphere_shell.svg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The above scene culls away some of the faces to reveal the inside of the mesh. We draw the sphere in two passes: first backfacing triangles, then frontfacing triangles.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb9&quot; readability=&quot;0.58346839546191&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb9-1&quot; data-line-number=&quot;1&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; backface_shader(face_index, winding):&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb9-2&quot; data-line-number=&quot;2&quot;&gt;    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; winding &lt;span class=&quot;op&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;None&lt;/span&gt;&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb9-3&quot; data-line-number=&quot;3&quot;&gt;    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;dict&lt;/span&gt;(&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb9-4&quot; data-line-number=&quot;4&quot;&gt;        fill&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'#7f7fff'&lt;/span&gt;, fill_opacity&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'1.0'&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb9-5&quot; data-line-number=&quot;5&quot;&gt;        stroke&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'black'&lt;/span&gt;, stroke_linejoin&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'round'&lt;/span&gt;,        &lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb9-6&quot; data-line-number=&quot;6&quot;&gt;        stroke_width&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'0.001'&lt;/span&gt;, stroke_dasharray&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'0.01'&lt;/span&gt;)&lt;/a&gt;

&lt;a class=&quot;sourceLine&quot; id=&quot;cb9-8&quot; data-line-number=&quot;8&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; frontface_shader(face_index, winding):&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb9-9&quot; data-line-number=&quot;9&quot;&gt;    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; winding &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;or&lt;/span&gt; faces[face_index][&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;0.9&lt;/span&gt;: &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;None&lt;/span&gt;&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb9-10&quot; data-line-number=&quot;10&quot;&gt;    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;dict&lt;/span&gt;(&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb9-11&quot; data-line-number=&quot;11&quot;&gt;        fill&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'#7fff7f'&lt;/span&gt;, fill_opacity&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'0.6'&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb9-12&quot; data-line-number=&quot;12&quot;&gt;        stroke&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'black'&lt;/span&gt;, stroke_linejoin&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'round'&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb9-13&quot; data-line-number=&quot;13&quot;&gt;        stroke_width&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'0.003'&lt;/span&gt;)&lt;/a&gt;

&lt;a class=&quot;sourceLine&quot; id=&quot;cb9-15&quot; data-line-number=&quot;15&quot;&gt;scene &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; svg3d.Scene()&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb9-16&quot; data-line-number=&quot;16&quot;&gt;scene.add_mesh(svg3d.Mesh(faces, backface_shader))&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb9-17&quot; data-line-number=&quot;17&quot;&gt;scene.add_mesh(svg3d.Mesh(faces, frontface_shader))&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb9-18&quot; data-line-number=&quot;18&quot;&gt;svg3d.Engine([svg3d.View(camera, scene)]).render(&lt;span class=&quot;st&quot;&gt;'sphere_shell.svg'&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;diffuse-and-specular-lighting&quot;&gt;&lt;a href=&quot;https://prideout.net/blog/svg_wireframes/#diffuse-and-specular-lighting&quot;&gt;Diffuse and Specular Lighting&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://prideout.net/blog/svg_wireframes/sphere_lighting.svg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Since the shading callback is given a face index, it can look at the original face and compute a facet normal. This allows us to generate reasonable lighting. Not exactly photorealistic but this is vector art! Here’s the shader I used for the above effect. Note that it culls away backfaces to help optimize the SVG a bit.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb10&quot; readability=&quot;0.63419483101391&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb10-1&quot; data-line-number=&quot;1&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; frontface_shader(face_index, winding):&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb10-2&quot; data-line-number=&quot;2&quot;&gt;    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; winding &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;None&lt;/span&gt;&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb10-3&quot; data-line-number=&quot;3&quot;&gt;    face &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; eyespace_faces[face_index]&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb10-4&quot; data-line-number=&quot;4&quot;&gt;    p0, p1, p2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; face[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;], face[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;], face[&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb10-5&quot; data-line-number=&quot;5&quot;&gt;    normal &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; pyrr.vector.normalize(pyrr.vector3.cross(p1 &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; p0, p2 &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; p0))&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb10-6&quot; data-line-number=&quot;6&quot;&gt;    df &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;max&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, numpy.dot(normal, LightDir))&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb10-7&quot; data-line-number=&quot;7&quot;&gt;    sf &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;pow&lt;/span&gt;(&lt;span class=&quot;bu&quot;&gt;max&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, numpy.dot(normal, Hhat)), Shininess)&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb10-8&quot; data-line-number=&quot;8&quot;&gt;    color &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; df &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; numpy.float32([&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;]) &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; sf &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; numpy.float32([&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;])&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb10-9&quot; data-line-number=&quot;9&quot;&gt;    color &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; numpy.power(color, &lt;span class=&quot;fl&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;2.2&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb10-10&quot; data-line-number=&quot;10&quot;&gt;    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;dict&lt;/span&gt;(&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb10-11&quot; data-line-number=&quot;11&quot;&gt;        fill&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;rgb(&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;color), fill_opacity&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'1.0'&lt;/span&gt;,&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb10-12&quot; data-line-number=&quot;12&quot;&gt;        stroke&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'black'&lt;/span&gt;, stroke_width&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'0.001'&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let’s wrap up with one more example of lighting:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://prideout.net/blog/svg_wireframes/mobius_tube.svg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The above shape is another parametric surface, similar to the Klein bottle and sphere. The parametric callback looks like this:&lt;/p&gt;

&lt;hr/&gt;&lt;p&gt;Thanks for reading this post! Some references:&lt;/p&gt;
&lt;/body&gt;</description>
<pubDate>Mon, 08 Jul 2019 18:04:05 +0000</pubDate>
<dc:creator>prideout</dc:creator>
<og:title>3D Wireframes in SVG</og:title>
<og:type>article</og:type>
<og:description>How to use Python to generate 3D SVG.</og:description>
<og:url>https://prideout.net/blog/svg_wireframes</og:url>
<og:image>https://prideout.net/blog/svg_wireframes/square_icon.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://prideout.net/blog/svg_wireframes/</dc:identifier>
</item>
<item>
<title>Steve Wozniak Says People Should Get Off Facebook Permanently</title>
<link>https://gizmodo.com/apple-cofounder-steve-wozniak-says-most-people-should-g-1836178238</link>
<guid isPermaLink="true" >https://gizmodo.com/apple-cofounder-steve-wozniak-says-most-people-should-g-1836178238</guid>
<description>&lt;p&gt;Apple cofounder Steve Wozniak deleted his personal Facebook account &lt;a href=&quot;https://gizmodo.com/steve-wozniak-dumps-facebook-its-brought-me-more-negat-1825101755&quot; rel=&quot;nofollow&quot; onclick=&quot;window.ga('send', 'event', 'Embedded Url', 'Internal link', 'https://gizmodo.com/steve-wozniak-dumps-facebook-its-brought-me-more-negat-1825101755', {metric25:1})&quot;&gt;last year&lt;/a&gt; and is now telling everyone else they should do the same. Woz was stopped by TMZ at Reagan National Airport in D.C. recently and warned that the lack of privacy on the platform isn’t worth it for most people, adding a warning more generally, “who knows if my cellphone is listening right now?”&lt;/p&gt;
&lt;p&gt;“There are many different kinds of people, and some the benefits of Facebook are worth the loss of privacy,” Wozniak told &lt;a href=&quot;https://www.tmz.com/2019/06/28/steve-wozniak-facebook-eavesdrop-private-conversations-warning/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; onclick=&quot;window.ga('send', 'event', 'Embedded Url', 'External link', 'https://www.tmz.com/2019/06/28/steve-wozniak-facebook-eavesdrop-private-conversations-warning/', {metric25:1})&quot;&gt;TMZ&lt;/a&gt;. “But to many like myself, my recommendation is—to most people—you should figure out a way to get off Facebook.”&lt;/p&gt;

&lt;div id=&quot;swappable-mobile-ad-container&quot; class=&quot;js_ad-mobile-dynamic swappable-mobile-ad-container js_ad-dynamic ad-mobile-dynamic movable-ad&quot;&gt;
&lt;div class=&quot;ad-unit ad-mobile&quot;&gt;
&lt;div class=&quot;ad-mobile-inner&quot;&gt;
&lt;p class=&quot;ad-label proxima&quot;&gt;&lt;small class=&quot;proxima&quot;&gt;Advertisement&lt;/small&gt;&lt;/p&gt;


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Woz said that while he’s worried about the invasions of privacy by Big Tech, he didn’t think there was anything that could be done to stop it.&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;“But, everything about you... I mean, they can measure your heartbeat with lasers now, they can listen to you with a lot of devices. Who knows if my cellphone’s listening right now. Alexa has already been in the news a lot,” Woz told TMZ.&lt;/p&gt;

&lt;p&gt;“So I worry because you’re having conversations that you think are private... You’re saying words that really shouldn’t be listened to, because you don’t expect it. But there’s almost no way to stop it,” Woz said.&lt;/p&gt;
&lt;div class=&quot;js_ad-mobile-dynamic js_ad-dynamic ad-mobile-dynamic movable-ad&quot;&gt;
&lt;div class=&quot;ad-unit ad-mobile&quot;&gt;
&lt;div class=&quot;ad-mobile-inner&quot;&gt;
&lt;p class=&quot;ad-label proxima&quot;&gt;&lt;small class=&quot;proxima&quot;&gt;Advertisement&lt;/small&gt;&lt;/p&gt;


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Wozniak originally dumped Facebook just three weeks after the Cambridge Analytica scandal broke in March of 2018. That scandal revealed that private firms were using Facebook data to help manipulate the 2016 presidential election &lt;a href=&quot;https://www.theguardian.com/uk-news/2018/mar/23/leaked-cambridge-analyticas-blueprint-for-trump-victory&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; onclick=&quot;window.ga('send', 'event', 'Embedded Url', 'External link', 'https://www.theguardian.com/uk-news/2018/mar/23/leaked-cambridge-analyticas-blueprint-for-trump-victory', {metric25:1})&quot;&gt;in favor of President Donald Trump&lt;/a&gt; by monitoring user moods and behaviors on the platform. Facebook has since been implicated in plenty of other transgressions, including being complicit in &lt;a href=&quot;https://www.nytimes.com/2018/11/06/technology/myanmar-facebook.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; onclick=&quot;window.ga('send', 'event', 'Embedded Url', 'External link', 'https://www.nytimes.com/2018/11/06/technology/myanmar-facebook.html', {metric25:1})&quot;&gt;genocide in Myanmar&lt;/a&gt; according to a report from the UN. Facebook admitted that its platform had been used to “foment division and incite offline violence.”&lt;/p&gt;
&lt;p&gt;Wozniak’s solution, which you can hear in the the entire TMZ video on &lt;a href=&quot;https://youtu.be/2XLnnLyx7nQ&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; onclick=&quot;window.ga('send', 'event', 'Embedded Url', 'External link', 'https://youtu.be/2XLnnLyx7nQ', {metric25:1})&quot;&gt;YouTube&lt;/a&gt;, is one that has admittedly been floated before: Just let everyone pay for their privacy.&lt;/p&gt;
&lt;div class=&quot;js_ad-mobile-dynamic js_ad-dynamic ad-mobile-dynamic movable-ad&quot;&gt;
&lt;div class=&quot;ad-unit ad-mobile&quot;&gt;
&lt;div class=&quot;ad-mobile-inner&quot;&gt;
&lt;p class=&quot;ad-label proxima&quot;&gt;&lt;small class=&quot;proxima&quot;&gt;Advertisement&lt;/small&gt;&lt;/p&gt;


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;“People think they have a level of privacy they don’t. Why don’t they give me a choice? Let me pay a certain amount, and you’ll keep my data more secure and private then everybody else handing it to advertisers.”&lt;/p&gt;
&lt;p&gt;Best of luck with that, Woz. Best of luck to us all, really.&lt;/p&gt;
&lt;aside class=&quot;inset--story js_inset branded-item branded-item--gizmodo&quot; onclick=&quot;window.ga('send', 'event', 'Embedded Url', 'Internal inset', 'https:\/\/paleofuture.gizmodo.com\/take-the-intelligence-test-that-thomas-edison-gave-to-j-1689489019', {metric25:1});&quot; readability=&quot;14.588888888889&quot;&gt;&lt;a href=&quot;https://paleofuture.gizmodo.com/take-the-intelligence-test-that-thomas-edison-gave-to-j-1689489019&quot; class=&quot;inset--story__thumb&quot; onclick=&quot;window.ga('send', 'event', 'Permalink page click', 'Permalink page click - inset photo');&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;lazyload&quot; data-sizes=&quot;auto&quot; src=&quot;https://i.kinja-img.com/gawker-media/image/upload/s--RxqKHqpI--/c_fill,f_auto,fl_progressive,g_center,h_77,pg_1,q_80,w_137/wfrlj30dkuodpbklnus0.jpg&quot; alt=&quot;Article preview thumbnail&quot;/&gt;&lt;/a&gt;
&lt;div class=&quot;inset--story__content&quot; readability=&quot;17.955555555556&quot;&gt;
&lt;h6 class=&quot;inset--story__headline&quot; onclick=&quot;window.ga('send', 'event', 'Permalink page click', 'Permalink page click - inset headline');&quot;&gt;&lt;a href=&quot;https://paleofuture.gizmodo.com/take-the-intelligence-test-that-thomas-edison-gave-to-j-1689489019&quot; target=&quot;_blank&quot;&gt;Take The Intelligence Test That Thomas Edison Gave to Job Seekers&lt;/a&gt;&lt;/h6&gt;
&lt;p&gt;Today tech companies are infamous for asking silly questions at job interviews. How would I move…&lt;/p&gt;
&lt;a href=&quot;https://paleofuture.gizmodo.com/take-the-intelligence-test-that-thomas-edison-gave-to-j-1689489019&quot; class=&quot;js_readmore inset--story__readmore&quot; onclick=&quot;window.ga('send', 'event', 'Permalink page click', 'Permalink page click - inset read more link');&quot; target=&quot;_blank&quot;&gt;Read more &lt;span class=&quot;js_external-text hide&quot;&gt;Read&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;
&lt;/aside&gt;

&lt;div class=&quot;js_ad-mobile-dynamic js_ad-dynamic ad-mobile-dynamic movable-ad&quot;&gt;
&lt;div class=&quot;ad-unit ad-mobile&quot;&gt;
&lt;div class=&quot;ad-mobile-inner&quot;&gt;
&lt;p class=&quot;ad-label proxima&quot;&gt;&lt;small class=&quot;proxima&quot;&gt;Advertisement&lt;/small&gt;&lt;/p&gt;


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Correction: This post originally said that TMZ talked to Woz in L.A. It was in Washington D.C. Gizmodo regrets the error.&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 08 Jul 2019 15:48:49 +0000</pubDate>
<dc:creator>realshadow</dc:creator>
<og:title>Apple Cofounder Steve Wozniak Says Most People Should Get Off Facebook Permanently</og:title>
<og:type>article</og:type>
<og:image>https://i.kinja-img.com/gawker-media/image/upload/s--SiIifh0z--/c_fill,fl_progressive,g_center,h_900,q_80,w_1600/cqq0njsqr1ardpaw1ic7.png</og:image>
<og:url>https://gizmodo.com/apple-cofounder-steve-wozniak-says-most-people-should-g-1836178238</og:url>
<og:description>Apple cofounder Steve Wozniak deleted his personal Facebook account last year and is now telling everyone else they should do the same. Woz was stopped by TMZ at Reagan National Airport in D.C. recently and warned that the lack of privacy on the platform isn’t worth it for most people, adding a warning more generally, “who knows if my cellphone is listening right now?”</og:description>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://gizmodo.com/apple-cofounder-steve-wozniak-says-most-people-should-g-1836178238</dc:identifier>
</item>
<item>
<title>More than 1k Android apps harvest data even after you deny permissions</title>
<link>https://www.cnet.com/news/more-than-1000-android-apps-harvest-your-data-even-after-you-deny-permissions/</link>
<guid isPermaLink="true" >https://www.cnet.com/news/more-than-1000-android-apps-harvest-your-data-even-after-you-deny-permissions/</guid>
<description>&lt;span class=&quot;imageContainer&quot;&gt;&lt;span&gt;&lt;img src=&quot;https://cnet3.cbsistatic.com/img/xY-5yGI38R4HIkbyaP-pa0KrMxg=/1092x0/2019/05/22/04efc719-919e-4055-a26b-2ceafea10148/android-q-privacy-and-location-settings.jpg&quot; class=&quot;&quot; alt=&quot;android-q-privacy-and-location-settings&quot; height=&quot;0&quot; width=&quot;1092&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;p&gt;&lt;span class=&quot;caption&quot;&gt;More than 1,000 Android apps have been circumventing privacy permission settings, researchers found.&lt;/span&gt;&lt;/p&gt;
&lt;span class=&quot;credit&quot;&gt;Jason Cipriani/CNET&lt;/span&gt;
&lt;p class=&quot;speakableTextP1&quot;&gt;Permissions on Android apps are intended to be gatekeepers for how much data your device gives up. If you don't want a flashlight app to be able to read through your call logs, you should be able to deny that access. But even when you say no, many apps find a way around: Researchers discovered &lt;a href=&quot;https://www.ftc.gov/system/files/documents/public_events/1415032/privacycon2019_serge_egelman.pdf&quot; target=&quot;_blank&quot; data-component=&quot;externalLink&quot; rel=&quot;noopener&quot;&gt;more than 1,000 apps that skirted restrictions&lt;/a&gt;, allowing them to gather precise geolocation data and phone identifiers behind your back.&lt;/p&gt;
&lt;p class=&quot;speakableTextP2&quot;&gt;The discovery highlights how difficult it is to stay private online, particularly if you're attached to your &lt;a href=&quot;https://www.cnet.com/topics/phones/best-phones/&quot;&gt;phones&lt;/a&gt; and &lt;a href=&quot;https://www.cnet.com/topics/mobile-apps/&quot; data-annotation=&quot;true&quot; data-component=&quot;linkTracker&quot; data-link-tracker-options=&quot;{&amp;quot;action&amp;quot;:&amp;quot;inline-annotation|Mobile Apps|CNET_CAT_TOPIC|375&amp;quot;}&quot;&gt;mobile apps&lt;/a&gt;. Tech companies have mountains of personal data on millions of people, including where they've been, who they're friends with and what they're interested in. &lt;/p&gt;
&lt;p&gt;Lawmakers are attempting to reel that in with &lt;a href=&quot;https://www.cnet.com/tags/privacy/&quot; data-annotation=&quot;true&quot; data-component=&quot;linkTracker&quot; data-link-tracker-options=&quot;{&amp;quot;action&amp;quot;:&amp;quot;inline-annotation|Privacy|CNET_TAG|296&amp;quot;}&quot;&gt;privacy&lt;/a&gt; regulation, and app permissions are supposed to control what data you give up. &lt;a href=&quot;https://www.cnet.com/news/apples-privacy-push-takes-on-all-the-creepy-ways-youre-tracked-online/&quot;&gt;Apple&lt;/a&gt; and &lt;a href=&quot;https://www.cnet.com/how-to/5-things-you-should-know-about-android-qs-privacy-settings/&quot;&gt;Google&lt;/a&gt; have released new features to improve people's privacy, but apps continue to find &lt;span class=&quot;link&quot; section=&quot;shortcodeLink&quot;&gt;&lt;a href=&quot;https://www.cnet.com/news/these-android-apps-have-been-tracking-you-even-when-you-say-stop/&quot;&gt;hidden ways to get around these protections&lt;/a&gt;&lt;/span&gt;. &lt;/p&gt;

&lt;p&gt;Researchers from the International Computer Science Institute found up to 1,325 Android apps that were gathering data from devices even after people explicitly denied them permission. Serge Egelman, director of usable security and privacy research at the ICSI, presented the study in late June at the &lt;a href=&quot;https://www.ftc.gov/news-events/audio-video/video/privacycon-2019-part-2&quot; target=&quot;_blank&quot; data-component=&quot;externalLink&quot; rel=&quot;noopener&quot;&gt;Federal Trade Commission's PrivacyCon&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;&quot;Fundamentally, consumers have very few tools and cues that they can use to reasonably control their privacy and make decisions about it,&quot; Egelman said at the conference. &quot;If app developers can just circumvent the system, then asking consumers for permission is relatively meaningless.&quot;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Read:&lt;/strong&gt; &lt;span class=&quot;link&quot; section=&quot;shortcodeLink&quot;&gt;&lt;a href=&quot;https://www.cnet.com/news/4-best-ways-to-keep-your-android-apps-from-spying-on-you/&quot;&gt;4 best ways to keep your Android apps from spying on you&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;shortcode video v2&quot; data-video-playlist=&quot;[{&amp;quot;id&amp;quot;:&amp;quot;f8e16ee0-4a67-4013-ad68-e948ae6d583d&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;Loads of Android apps are skirting privacy controls&amp;quot;,&amp;quot;description&amp;quot;:&amp;quot;From The 3:59 show: Researches found more than 1,000 apps are ignoring users\u0027 permission requests.&amp;quot;,&amp;quot;slug&amp;quot;:&amp;quot;loads-of-android-apps-are-skirting-privacy-controls&amp;quot;,&amp;quot;chapters&amp;quot;:{&amp;quot;data&amp;quot;:[],&amp;quot;paging&amp;quot;:{&amp;quot;total&amp;quot;:0,&amp;quot;limit&amp;quot;:15,&amp;quot;offset&amp;quot;:0}},&amp;quot;datePublished&amp;quot;:&amp;quot;2019-07-08 17:14:29&amp;quot;,&amp;quot;duration&amp;quot;:72,&amp;quot;mpxRefId&amp;quot;:&amp;quot;2tO0y3qDxGXRy4s8_2Ifell5bDzu091U&amp;quot;,&amp;quot;ratingVChip&amp;quot;:&amp;quot;TV-14&amp;quot;,&amp;quot;primaryTopic&amp;quot;:{&amp;quot;id&amp;quot;:&amp;quot;1c5677fd-c387-11e2-8208-0291187b029a&amp;quot;},&amp;quot;author&amp;quot;:{&amp;quot;id&amp;quot;:&amp;quot;1a5869f5-3f2f-48d8-b12e-90de4cd6e6c9&amp;quot;,&amp;quot;firstName&amp;quot;:&amp;quot;Ben Fox&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Rubin&amp;quot;},&amp;quot;primaryCollection&amp;quot;:{&amp;quot;id&amp;quot;:&amp;quot;040fa0bc-bf08-43dc-ac3d-ee7869a9fc85&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;CNET News Video&amp;quot;},&amp;quot;image&amp;quot;:{&amp;quot;path&amp;quot;:&amp;quot;https:\/\/cnet3.cbsistatic.com\/img\/vqtOrAZ-JStw0Dm66EPxEIuee7U=\/1280x720\/2019\/07\/08\/bb70966a-07f7-4555-9013-d97ef2933ffd\/screen-shot-2019-07-08-at-12-57-21-pm.png&amp;quot;},&amp;quot;thumbnail&amp;quot;:&amp;quot;https:\/\/cnet2.cbsistatic.com\/img\/VeQINRsfe3EWqbMJdkCIpocJMOs=\/194x109\/2019\/07\/08\/bb70966a-07f7-4555-9013-d97ef2933ffd\/screen-shot-2019-07-08-at-12-57-21-pm.png&amp;quot;,&amp;quot;closedCaptionPath&amp;quot;:&amp;quot;\/videos\/captions\/webvtt\/loads-of-android-apps-are-skirting-privacy-controls.vtt&amp;quot;,&amp;quot;urlPath&amp;quot;:&amp;quot;\/videos\/loads-of-android-apps-are-skirting-privacy-controls\/&amp;quot;,&amp;quot;isVertical&amp;quot;:false,&amp;quot;m3u8&amp;quot;:&amp;quot;\/videos\/manifest\/loads-of-android-apps-are-skirting-privacy-controls.m3u8&amp;quot;,&amp;quot;mp4&amp;quot;:&amp;quot;https:\/\/cnetmedia-a.akamaihd.net\/21923\/2019\/07\/08\/1564126275861\/359582android_61591_740.mp4&amp;quot;,&amp;quot;index&amp;quot;:0}]&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;embeddedVideoContainer&quot; tabindex=&quot;0&quot; aria-label=&quot;Play video Loads of Android apps are skirting privacy controls&quot; data-load-video=&quot;0&quot; data-video-id=&quot;f8e16ee0-4a67-4013-ad68-e948ae6d583d&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;videoContainer&quot;&gt;&lt;img src=&quot;https://cnet2.cbsistatic.com/img/08cThuFQND9s-UExgn8yUl2RQ5s=/196x110/2019/07/08/bb70966a-07f7-4555-9013-d97ef2933ffd/screen-shot-2019-07-08-at-12-57-21-pm.png&quot; class=&quot;photo&quot; alt=&quot;&quot; height=&quot;110&quot; width=&quot;196&quot;/&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;&lt;span class=&quot;nowPlaying&quot;&gt;Now playing:&lt;/span&gt; &lt;span class=&quot;watchThis&quot;&gt;Watch this:&lt;/span&gt;&lt;/span&gt; Loads of Android apps are skirting privacy controls&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;duration&quot;&gt;1:12&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Egelman said the researchers notified &lt;a href=&quot;https://www.cnet.com/google/&quot; data-annotation=&quot;true&quot; data-component=&quot;linkTracker&quot; data-link-tracker-options=&quot;{&amp;quot;action&amp;quot;:&amp;quot;inline-annotation|Google|CNET_TAG|508&amp;quot;}&quot;&gt;Google&lt;/a&gt; about these issues last September, as well as the FTC. Google said it would be addressing the issues in &lt;span class=&quot;link&quot; section=&quot;shortcodeLink&quot;&gt;&lt;a href=&quot;https://www.cnet.com/news/android-q-beta-4-notifications-live-caption-gestures-privacy-settings-and-other-exciting-features/&quot;&gt;Android Q&lt;/a&gt;&lt;/span&gt;, which is expected to release this year. &lt;/p&gt;
&lt;p&gt;The update will address the issue by hiding location information in photos from apps and requiring any apps that access &lt;a href=&quot;https://www.cnet.com/tags/wi-fi/&quot; data-annotation=&quot;true&quot; data-component=&quot;linkTracker&quot; data-link-tracker-options=&quot;{&amp;quot;action&amp;quot;:&amp;quot;inline-annotation|Wi-Fi|CNET_TAG|183&amp;quot;}&quot;&gt;Wi-Fi&lt;/a&gt; to also have permission for location data, according to Google. &lt;/p&gt;
&lt;p&gt;The study looked at more than 88,000 apps from the Google Play store, tracking how data transferred from the apps when they were denied permissions. The 1,325 apps that violated permissions on Android used workarounds hidden in its code that would take personal data from sources like Wi-Fi connections and metadata stored in photos. &lt;/p&gt;
&lt;p&gt;Researchers found that Shutterfly, a photo-editing app, had been gathering GPS coordinates from photos and sending that data to its own servers, even when users declined to give the app permission to access location data. &lt;/p&gt;
&lt;aside class=&quot;pullQuote&quot; readability=&quot;3&quot;&gt;Fundamentally, consumers have very few tools and cues that they can use to reasonably control their privacy and make decisions about it.
&lt;p&gt;Serge Egelman, director at the Internation Computer Science Institute&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;A Shutterfly spokeswoman said the company would only gather location data with explicit permission, despite what researchers found. &lt;/p&gt;
&lt;p&gt;&quot;Like many photo services, Shutterfly uses this data to enhance the user experience with features such as categorization and personalized product suggestions, all in accordance with Shutterfly's privacy policy as well as the Android developer agreement,&quot; the company said in a statement. &lt;/p&gt;
&lt;p&gt;Some apps were relying on other apps that were granted permission to look at personal data, piggybacking off their access to gather &lt;a href=&quot;https://www.cnet.com/how-to/find-the-imei-number-for-a-lost-or-stolen-android-device/&quot;&gt;phone identifiers like your IMEI number&lt;/a&gt;. These apps would read through unprotected files on a device's SD card and harvest data they didn't have permission to access. So if you let other apps access personal data, and they stored it in a folder on the SD card, these spying apps would be able to take that information. &lt;/p&gt;
&lt;p&gt;While there were only about 13 apps doing this, they were installed more than 17 million times, according to the researchers. This includes apps like Baidu's Hong Kong Disneyland park app, researchers said. &lt;/p&gt;
&lt;p&gt;Baidu and Disney didn't respond to requests for comment. &lt;/p&gt;
&lt;p&gt;There are 153 apps that have that capability, researchers found, including &lt;a href=&quot;https://www.cnet.com/samsung/&quot; data-annotation=&quot;true&quot; data-component=&quot;linkTracker&quot; data-link-tracker-options=&quot;{&amp;quot;action&amp;quot;:&amp;quot;inline-annotation|Samsung|CNET_TAG|585&amp;quot;}&quot;&gt;Samsung's&lt;/a&gt; Health and Browser apps, which are installed on more than 500 million devices. &lt;/p&gt;
&lt;p&gt;Samsung didn't respond to a request for comment. &lt;/p&gt;
&lt;p&gt;Other apps were gathering location data by connecting to your Wi-Fi network and figuring out the router's MAC address. They found this on apps that functioned as smart remote controls, which didn't need your location information to function. &lt;/p&gt;
&lt;p&gt;Egelman said he will be releasing details with a list of the 1,325 apps the researchers discovered when he &lt;a href=&quot;https://www.usenix.org/conference/usenixsecurity19/technical-sessions&quot; target=&quot;_blank&quot; data-component=&quot;externalLink&quot; rel=&quot;noopener&quot;&gt;presents the study at the Usenix Security conference&lt;/a&gt; in August.&lt;/p&gt;
&lt;div class=&quot;shortcode gallery&quot; section=&quot;shortcodeGallery&quot;&gt;
&lt;div data-item=&quot;image&quot; section=&quot;galleryItem.1&quot; readability=&quot;6&quot;&gt;&lt;a href=&quot;https://www.cnet.com/pictures/mozilla-privacy-advocates-announce-voting-the-creepiest-tech-gifts-of-2018/&quot;&gt;&lt;img src=&quot;https://cnet2.cbsistatic.com/img/hr5jc9btfxVlB6ZMx9dUvPnf4iE=/756x425/2018/11/14/53a44d66-1c64-488b-a86a-a91f618da21a/09-mozilla-top-creepiest-tech-gifts-holidays-2018.jpg&quot; class=&quot;&quot; alt=&quot;creepiest tech gifts of 2018&quot; height=&quot;425&quot; width=&quot;756&quot;/&gt;&lt;/a&gt;
&lt;div class=&quot;title&quot; readability=&quot;7&quot;&gt;Privacy advocates rank the creepiest tech gifts of 2018
&lt;p&gt;11 Photos&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;footer class=&quot;row&quot;&gt;

&lt;/footer&gt;</description>
<pubDate>Mon, 08 Jul 2019 15:14:26 +0000</pubDate>
<dc:creator>spacemanspiffy</dc:creator>
<og:title>More than 1,000 Android apps harvest data even after you deny permissions</og:title>
<og:description>The apps gather information such as location, even after owners explicitly say no. Google says a fix won’t come until Android Q.</og:description>
<og:image>https://cnet4.cbsistatic.com/img/DA61xE6tPYqVqCoBYMiwVE0QtME=/756x567/2019/05/22/04efc719-919e-4055-a26b-2ceafea10148/android-q-privacy-and-location-settings.jpg</og:image>
<og:type>article</og:type>
<og:url>https://www.cnet.com/news/more-than-1000-android-apps-harvest-your-data-even-after-you-deny-permissions/</og:url>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnet.com/news/more-than-1000-android-apps-harvest-your-data-even-after-you-deny-permissions/</dc:identifier>
</item>
<item>
<title>Being Bored Is Good</title>
<link>https://thewalrus.ca/why-being-bored-is-good/</link>
<guid isPermaLink="true" >https://thewalrus.ca/why-being-bored-is-good/</guid>
<description>&lt;p&gt;&lt;span class=&quot;dropcap&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;smallcaps&quot;&gt;oredom is one&lt;/span&gt; of the most common human experiences, yet it seems continually to defy complete understanding. We all know what it is to feel bored, but what exactly prompts, constitutes, or follows from the condition of boredom is far less obvious. Is boredom a function of leisure? Does boredom tangle desire or personal conditions, or both? That is, when I stare at the full refrigerator and complain that there is nothing to eat, or when I scan 100 cable channels and find nothing to watch, who or what, exactly, is to blame?&lt;/p&gt;
&lt;p&gt;A century ago, modernist poets and artists worked to illustrate the disintegrated selfhood of twentieth-century humanity, the way a coherent individuality was being torn apart by new social and political conditions such that we were left with, at best, fragments shored against our ruin. Today, the challenge is urgent in a new fashion, since our selves are deliberately scattered data fragments—Twitter feeds, Instagram posts, shopping preferences, and text trends captured by algorithms that seem to know us better than we know ourselves. What hope is there for integration and stability under such conditions?&lt;/p&gt;
&lt;p&gt;All of us, at least in the richer parts of the planet where stimulus is rich, are aware of the problem. I am sitting in front of a screen. If it is the right time of day, there is a muted baseball game showing on the nearby TV. I have my phone on the desk, which relentlessly delivers voicemail messages about daily trivia from people I know. I answer some of them. A web-browser window is open in another tab, in case I want to fact-check something without troubling my failing memory, order a book I almost forgot on Amazon, or suddenly feel like wandering down a hot-link tunnel of scant and certainly forgettable relevance to what I still call my life. I can’t settle on any one thing, let alone walk away from the light cast by the screens and into a different reality. I am troubled, restless, overstimulated. I am consuming myself as a function of the attention I bestow. I am a zombie self, a spectre, suspended in a vast framework of technology and capital allegedly meant for my comfort and entertainment. And yet, and yet…I cannot find myself here.&lt;/p&gt;
&lt;p&gt;Boredom, especially the species of it that I am going to label “neoliberal,” depends for its force on the workings of an attention economy in which we are mostly willing participants. In the form of pervasive distraction and proffered connection or communication, social media and other online mechanisms act to harvest our attention. Sites are rated for number of hits, or stickiness, while those from whom the attention is reaped congratulate themselves on likes, retweets, and high numbers of friends or followers. In all these acts, we do the attention economy’s work. But it is not the specific platform or medium that lies at the root of this eerie economy in which we are made to feed upon ourselves, turning desire and attention themselves into commodities we give away for free. Rather, it is the Interface: the complex and often invisible set of relations that conjoins individuality, longing, technology, and structural interests. Not all Interfaces are linked to screens but all are linked to selves and their desires. Our self-commodification within the attention economy makes us unwitting labourers for capital. It also makes us serial sufferers of boredom, too often addicted to means that falsely promise alleviation and bring only repetition. Here we sit, shadow selves, hollowed out from within by alienation from our own attention.&lt;/p&gt;
&lt;p&gt;New economies create new workers, new commodities, and new injustices. The social costs of the attention economy have been documented: rise in menial jobs, like packaging Amazon products, which are then systematically phased out by automation, robotics, and drones; the dominance of short-term and service jobs that have no security and no infrastructure; the so far marginal but still significant costs of inactivity and the screen-dominated life. But the central costs are perhaps less obvious. Boredom is never just the property of imagination-poor teenagers or overimaginative philosophers. When we ourselves become the product we consume, the notion of work has decisively shifted. In the past, work was recognized for its colonizing power, expanding to fill and dominate time itself such that there might exist no clear line between work hours and nonwork hours. Our current condition is worse. The Interface, leveraging boredom, makes us all into unpaid workers for the advertisers who support those apparently cost-free platforms. We ought to recall that there is no such thing as a free transaction. In this species of transaction, you pay with your individuality, freedom, and happiness.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;dropcap&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;smallcaps&quot;&gt;he psychoanalyst&lt;/span&gt; Adam Phillips begins one of his best essays, “Every adult remembers, among many things, the great ennui of childhood, and every child’s life is punctuated by spells of boredom: that state of suspended anticipation in which things are started and nothing begins, the mood of diffuse restlessness which contains that most absurd and paradoxical wish, the wish for a desire.” The wish for a desire is a nod to Tolstoy’s similarly doubled definition of boredom (“the desire for desires”). This twisted condition is not restricted to children, and though it may be judged absurd and paradoxical, it is nevertheless common and urgent. The stall of desire working against itself is the beginning, but not the end, of boredom. And thus boredom understood in terms of desire is a first clue to boredom’s special ability to initiate philosophical reflection. But there are further clues to decipher and a more complicated solution to confront concerning the mystery of consciousness.&lt;/p&gt;
&lt;p&gt;Arthur Schopenhauer is the dean of boredom studies, the first philosopher in the Western tradition to take seriously a condition that he recognized would become increasingly common. In part this was so because the material conditions of life allowed it: for a significant segment of the emergent bourgeois population, for whom the necessities of life were reliably secured, the questions of what to desire and what to do were no longer answerable in a straightforward manner. The medieval philosophers and theologians had already dissected in some detail the particular vice of &lt;em&gt;accidie&lt;/em&gt;, or melancholy torpor, which bears an affinity to boredom. But &lt;em&gt;accidie&lt;/em&gt; is shaded as a failure of spirit that might preclude the execution of one’s duty, rather than an emotional and existential condition that is the wholly rational response to one’s social and cultural condition.&lt;/p&gt;
&lt;p&gt;Erich Fromm could, in the mid-twentieth century, note that what separates humans from other creatures is not the upright posture, or tool wielding, or the ability to laugh, but rather precisely the fact that humankind is the only form of life blessed and cursed with the ability to query its own purpose. “Man is the only animal for whom his own existence is a problem which he has to solve and from which he cannot escape,” Fromm wrote in &lt;em&gt;Man for Himself&lt;/em&gt;, confronting what he regarded as the “paralysis of our productive powers” that issues from the experience of boredom as an unavoidable part of that problem. Boredom was, Fromm thought, an experience of everyday damnation. “I am convinced that boredom is one of the greatest tortures,” he wrote. “If I were to imagine Hell, it would be the place where you were continually bored.”&lt;/p&gt;
&lt;p&gt;All of this is prefigured in Schopenhauer’s groundbreaking analysis, which anticipates by more than a century the sort of dissection of comfortable industrialized social existence that Fromm represents. Human life, says Schopenhauer in &lt;em&gt;The World as Will and Representation&lt;/em&gt;, “Swings like a pendulum to and fro between pain and boredom, and these two are in fact its ultimate constituents.” Boredom is “anything but an evil to be thought of lightly: ultimately it depicts the countenance of real despair.” On one reading, a bored person is experiencing a species of psychic conflict, a &lt;em&gt;stall&lt;/em&gt;. Seeking relief from pain, the organism moves toward stimulus. But since there is no particular desire to approve or make active as against any other, the self falls into a hopeless struggle with itself that cannot resolve, because there is no evident raw material on which to apply the energy of resolution. Boredom is, at its simplest, a form of desire turned back upon itself, resulting in the inability to act in any purposeful or happy manner. The hellishness of boredom, the real despair sketched on its countenance, is in large measure a function of the banality of the condition. Why can’t I simply &lt;em&gt;want&lt;/em&gt; something? Why can’t I simply &lt;em&gt;do&lt;/em&gt; something?&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mailchi.mp/walrusmagazine/newsubscribers&quot;&gt;&lt;strong&gt;Bored? good. Sign up for our newsletter to get stories like this one straight to your inbox.&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We are likely all too familiar with the experience: confronting the shelf of books where there is nothing to read, the enforced stillness of the long car journey with nothing to divert us from the unbroken vista out the window, the time spent waiting in queues, doctor’s offices, or departure lounges, the long evenings that stretch out after one’s lonely dinner without promise of incident or hint of pleasure. Boredom often, if not always, is experienced as a kind of temporal abyss, an acute awareness of time’s passing; it is the existential variant of simple duration, deepening that mundane experience into an apparently endless waiting for nothing that suffuses and dominates consciousness. In some ways, boredom acquires the character of an addiction, especially when it is actively cultivated by social conditions that can extract a profit from sustained bouts of boredom and stimulation. There is a danger that such an experience of boredom lowers the subject’s resistance even as it raises the existential stakes. In contrast to the moments of quiet desperation described by classical authors, we might consider that the addict has it easy: even if they are powerless to solve it, at least they know what their problem is!&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;dropcap&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;smallcaps&quot;&gt;ot all boredoms&lt;/span&gt; are created equal. According to a colleague of mine—I have not been able to confirm it independently—there was once to be seen in the Berlin U-Bahn system a poster depicting a young man with a dull expression on his face, the very image of a mind gone blank. The poster bore the legend, possibly ironic, “Die Langeweile ist der Ursprung des Philosophierens” (Boredom is the wellspring of philosophizing).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Langeweile&lt;/em&gt; has, of course, a long-standing tradition in German of indicating a state of boredom with particular significance, that is not merely being enervated by a specific experience or person but descending into a state we might legitimately call existential. The question remains, though, whether this state of being is properly associated with the origin of philosophical reflection. An alternative account of “origin” here would posit deep boredom as a necessary condition for reflection not just on the twinned burden and gift of consciousness but also on the associated question of the meaning of life. Are we, when profoundly bored, especially susceptible to the large “philosophical” questions of mindedness, life, and death? Could the newfound attention economy preventing us from reaching this level of complete and utter boredom?&lt;/p&gt;
&lt;p&gt;If one is to make such a claim, one must not merely defend boredom’s status as a philosophy-inducing experience but likewise compare it with other candidates for the origin-of-philosophy status. Traditionally, these have included wonder and more direct confrontation with the prospect of death (as in Cicero’s Socratically inflected claim that “to philosophize is to learn how to die”). Can boredom vie with these canonical, and apparently more respectable, accounts of the origin of the philosophical attitude? If so, what &lt;em&gt;kind&lt;/em&gt; of boredom is in play? Is it distinct from what we might call “routine” or nonphilosophical boredom? If so, how? Further, can the philosophy-inducing species of boredom be sought out actively or does it visit us adventitiously? Are there specific mechanisms of reflection that leverage boredom into more active and explicit forms of philosophical thought?&lt;/p&gt;
&lt;p&gt;But wait. What if the boredom that induces philosophical reflection is in fact coiled within, or inextricable from, the more familiar forms of philosophical prompting? Plato has Socrates relate the hoary tale of Thales of Miletus, astronomer and natural philosopher of vast gifts, who fell down a well as he walked along gazing at the wonders of the heavens. Was he moved to look up because of the dullness of mundane life around him? Thales found much to fascinate him in the ordinary world, but he was overwhelmingly fetched by the distant mysteries of the stars and the familiar feeling—an early antecedent to Kant’s notion of the sublime—of our own insignificance in the universe around us. That feeling of sudden diminution of one’s importance is not boredom as such but nevertheless feels close to it in the way that procrastination and addiction are likewise cognate psychological states. Meaning drains from the scene, blotted out by the vastness of the real. We shrink to a tiny point, and routine thought—not to mention routine care about where I am walking—is obliterated. Wonder is usually considered uplifting, while boredom is thought enervating, but perhaps there is a closer affinity here than we usually imagine.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Adapted from&lt;/em&gt; Wish I Were Here: Boredom and the Interface &lt;em&gt;by Mark Kingwell (McGill-Queen’s University Press, 2019).&lt;/em&gt;&lt;/p&gt;

</description>
<pubDate>Mon, 08 Jul 2019 15:04:52 +0000</pubDate>
<dc:creator>apollinaire</dc:creator>
<og:title>Why Being Bored Is Good | The Walrus</og:title>
<og:type>article</og:type>
<og:url>https://thewalrus.ca/why-being-bored-is-good/</og:url>
<og:image>https://s3.amazonaws.com/walrus-assets/img/Kingwell_Boredom-740x493.jpg</og:image>
<og:description>Technology keeps us constantly stimulated. What do we lose when we no longer have nothing to do?</og:description>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://thewalrus.ca/why-being-bored-is-good/</dc:identifier>
</item>
<item>
<title>Is Ham Radio a Hobby, a Utility or Both? A Battle over Spectrum Heats Up</title>
<link>https://spectrum.ieee.org/tech-talk/telecom/wireless/is-ham-radio-a-hobby-a-utilityor-both-a-battle-over-spectrum-heats-up</link>
<guid isPermaLink="true" >https://spectrum.ieee.org/tech-talk/telecom/wireless/is-ham-radio-a-hobby-a-utilityor-both-a-battle-over-spectrum-heats-up</guid>
<description>&lt;img src=&quot;https://spectrum.ieee.org/image/MzMzMjQ1NQ.jpeg&quot; alt=&quot;Image of someone adjusting a radio transmitter&quot;/&gt; Photo: iStockphoto
&lt;section id=&quot;side-module&quot;&gt;&lt;div class=&quot;medium-top-ad&quot;&gt;
&lt;div class=&quot;ad-module&quot;&gt;
&lt;p&gt;Advertisement&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;recommended-side&quot; readability=&quot;9.5&quot;&gt;
&lt;p&gt;Editor’s Picks&lt;/p&gt;
&lt;div id=&quot;article-rec&quot; readability=&quot;39&quot;&gt;
&lt;div class=&quot;image-column&quot;&gt;&lt;img src=&quot;https://spectrum.ieee.org/image/MzEzNzM5Mw&quot; alt=&quot;Photo of NIST radio station WWVB. The transmitters are in the building. In the background are WWVB's four north towers supporting the antenna in the center.&quot;/&gt;&lt;/div&gt;
&lt;p&gt;
&lt;h4&gt;Long-Running U.S. Federal Radio Stations, Beloved by Hams, in Danger of Shutdown&lt;/h4&gt;
&lt;/p&gt;

&lt;div class=&quot;image-column&quot;&gt;&lt;img src=&quot;https://spectrum.ieee.org/image/MzMwNjM5Ng&quot; alt=&quot;Abstract illustration&quot;/&gt;&lt;/div&gt;
&lt;p&gt;
&lt;h4&gt;If DARPA Has Its Way, AI Will Rule the Wireless Spectrum&lt;/h4&gt;
&lt;/p&gt;

&lt;div class=&quot;image-column&quot;&gt;&lt;img src=&quot;https://spectrum.ieee.org/image/MjcxOTU5OQ&quot; alt=&quot;null&quot;/&gt;&lt;/div&gt;
&lt;p&gt;
&lt;h4&gt;Hands on: A Ham Radio for Makers&lt;/h4&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;&lt;p&gt;Like many amateur radio fans his age, Ron Kolarik, 71, still recalls the “pure magic” of his first ham experience nearly 60 years ago. Lately, though, encrypted messages have begun to infiltrate the amateur bands in ways that he says are antithetical to the spirit of this beloved hobby.&lt;/p&gt;&lt;p&gt;So Kolarik filed a petition, &lt;a href=&quot;https://ecfsapi.fcc.gov/file/100918881206/PETITION%20FOR%20RULEMAKING.pdf&quot; target=&quot;_blank&quot;&gt;RM-11831&lt;/a&gt; [PDF], to the U.S. Federal Communications Commission (FCC) proposing a rule change to “Reduce Interference and Add Transparency to Digital Data Communications.” And as the proposal makes its way through the FCC’s process, it has stirred up heated debate that goes straight to the heart of what ham radio is, and ought to be.&lt;/p&gt;
&lt;p&gt;The core questions: Should &lt;a href=&quot;https://spectrum.ieee.org/geek-life/hands-on/hands-on-a-ham-radio-for-makers&quot;&gt;amateur radio&lt;/a&gt;—and its precious spectrum—be protected purely as a hobby, or is it a utility that delivers data traffic? Or is it both? And who gets to decide?&lt;/p&gt;
&lt;p&gt;Since Kolarik filed his petition in late 2018, this debate has engulfed the ham world. Fierce defenders of both sides have filed passionate letters and comments to the FCC arguing their cases.&lt;/p&gt;
&lt;p&gt;On one side is Kolarik in Nebraska. In his view, it’s all rather simple: “Transparency is a core part of ham radio,” he says. “And yet, you can find tons of traffic from automatic[ally controlled digital] stations that are extremely difficult to identify, if you can identify them at all, and they cause interference.”&lt;/p&gt;
&lt;p&gt;The automatically controlled digital stations (ACDS) Kolarik refers to can serve to power services like &lt;a href=&quot;https://www.winlink.org/&quot;&gt;Winlink&lt;/a&gt;, a “global radio email” system.&lt;/p&gt;
&lt;p&gt;Overseen and operated by licensed volunteers around the globe, Winlink is funded and guided by the &lt;a href=&quot;https://arsfi.org/&quot;&gt;Amateur Radio Safety Foundation, Inc.&lt;/a&gt; (ARSFI). The service uses amateur and government radio frequencies around the globe to send email messages by radio. Users initiate the transmission through an Internet connection, or go Internet-free and use smart-network radio relays.&lt;/p&gt;
&lt;p&gt;On Winlink’s website, the service says it provides its licensed users the ability to send email with attachments, plus messages about their positions, and weather and information bulletins. Representatives of the service say it also allows users to participate in emergency and disaster relief communications.&lt;/p&gt;
&lt;p&gt;But Kolarik’s petition argues two points: First, because such messages “are not readily and freely able to be decoded,” the FCC should require all digital codes to use protocols that “can be monitored in entirety by third parties with freely available, open-source software.” Secondly, he wants the rule change to reduce the interference that he says services like Winlink can create between amateur-to-amateur stations—by relegating the often-unattended automatic stations to operate solely on narrower sub-bands.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.linkedin.com/in/loring-kutchins-690b2b43/&quot;&gt;Loring Kutchins&lt;/a&gt;, the president of ARSFI, says he believes Kolarik’s petition is “well intentioned in its basis. But the fundamental conflict is between people who believe amateur radio is about hobby, not about utility. But nowhere do the FCC rules use the word ‘hobby.’”&lt;/p&gt;
&lt;img alt=&quot;Image of Loring Kutchins holding a microphone connected to a transmitter. &quot; src=&quot;https://spectrum.ieee.org/image/MzMzMjUwMQ.png&quot;/&gt; Photo: Loring Kutchins Loring Kutchins works as a Winlink radio operator for a temporary health clinic in Kruta, Honduras. He says the International Health Service uses Winlink to communicate with a dozen teams at clinics like this one across Honduras. 
&lt;p&gt;The divide between hobbyists and utilitarians seems to come down to age, in Kutchins’ opinion.&lt;/p&gt;
&lt;p&gt;“Younger people who have come along tend to see amateur radio as a service, as it’s defined by FCC rules, which outline the purpose of amateur radio—especially as it relates to emergency operations,” he says.&lt;/p&gt;
&lt;p&gt;In short, Kutchins says, his view boils down to abiding by the FCC rules as currently written: “Why is email inappropriate for amateur radio? Why should utilitarian purposes not be part of amateur radio?”&lt;/p&gt;
&lt;p&gt;While Kolarik’s petition touches on some of those questions, an &lt;a href=&quot;https://ecfsapi.fcc.gov/file/1040322516387/FCC%20Letter%20RM%2011831%20final.pdf&quot;&gt;&lt;em&gt;ex parte&lt;/em&gt; letter&lt;/a&gt; [PDF] by professor &lt;a href=&quot;https://engineering.nyu.edu/faculty/theodore-rappaport&quot;&gt;Theodore Rappaport&lt;/a&gt;, who leads the NYU Wireless research center at &lt;a href=&quot;https://engineering.nyu.edu/&quot;&gt;NYU’s Tandon School of Engineering&lt;/a&gt;, makes particularly strong statements against services like Winlink.&lt;/p&gt;
&lt;aside class=&quot;inlay pullquote lt med&quot;&gt;“Transparency is a core part of ham radio.” &lt;span class=&quot;pq-attrib&quot;&gt;—Ron Kolarik&lt;/span&gt;&lt;/aside&gt;&lt;p&gt;Rappaport’s letter calls Kolarik’s proposed rule change vital to “safeguard the national security of the United States,” and key to attracting young people to ham radio. He also accuses services like Winlink of being used to flout various FCC rules. For example, he wrote these services are used “often by boat owners to avoid other readily available commercial means for sending private email (a violation of numerous FCC rules which explicitly prohibit bypassing other commercial means and prohibit pecuniary interest).”&lt;/p&gt;
&lt;p&gt;Kutchins, however, doesn’t think Rappaport’s passion is genuine. He fired back in his own &lt;a href=&quot;https://winlink.org/sites/default/files/ajitpaicoverletter.pdf&quot;&gt;letter&lt;/a&gt; [PDF] to the FCC: &quot;Theodore Rappaport and the opponents he informs offer an emotional, layman's conjecture in their assertions that hard-to-monitor, advanced digital protocols used in the amateur radio service will encourage crime, terrorism, and are a threat to national security,&quot; Kutchins wrote. &quot;They clearly do not know or appreciate what monitoring and inspection routinely occurs, and are thus not qualified to judge.&quot;&lt;/p&gt;
&lt;p&gt;In an interview, Kutchins says Winlink has system operators who monitor traffic for illegal activity, and though every group has bad actors, he argues that “people on Rappaport’s side have gone through and picked out anything that could be a violation, rather than use the amateur radio principle that we’re supposed to be self-regulating. We call each other out when somebody does something wrong: Inform the violator and educate how you think they have violated the rules.”&lt;/p&gt;
&lt;aside class=&quot;inlay pullquote rt med&quot;&gt;“Why is email inappropriate for amateur radio? Why should utilitarian purposes not be part of amateur radio?” &lt;span class=&quot;pq-attrib&quot;&gt;—Loring Kutchins&lt;/span&gt;&lt;/aside&gt;&lt;p&gt;Further, Kutchins says, any licensee can read any message sent through a U.S. station on amateur radio frequencies in plain text via a message viewer that is open and available online, and he adds that Winlink has a reporting program established at the FCC’s request.&lt;/p&gt;
&lt;p&gt;But Rappaport says his chief “concern is that the proliferation of illegal, effectively encrypted data will turn the hobby of ham radio into a mean-spirited, non-technical dummied-down mosh pit of signals that eventually becomes a high-frequency Internet access point in the sky.”&lt;/p&gt;
&lt;img alt=&quot;Image of NYU professor Ted Rappaport, N9NB, operating from his front porch in Riner, Virginia.&quot; src=&quot;https://spectrum.ieee.org/image/MzMzMjUxNQ.jpeg&quot;/&gt; Photo: Gordon Garrett, K1GG Ted Rappaport, a professor and wireless researcher at New York University, whose call sign is N9NB, operates a ham radio from his front porch in Riner, Virginia during the 2018 Amateur Radio Field Day.
&lt;p&gt;His fear is “that many applications and transmissions will be closed and controlled by a tiny group of individuals who do not share the vision or incentive for providing transparency of all activities—or technology—in amateur radio. How will that attract youth and help the STEM effort in America?”&lt;/p&gt;
&lt;p&gt;The battle continues in letters and comments to the FCC about the proposal. It could be months before the agency completes all of its comment periods and other processes and ultimately decides whether to codify the proposal or strike it down.&lt;/p&gt;
&lt;p&gt;In the meantime, back in Lincoln, Nebraska, Kolarik says he’s simply focused on the future of his cherished hobby. He’s heartened by young ham fans who &lt;a href=&quot;https://www.fcc.gov/ecfs/filing/106131325027415&quot;&gt;commented on the proposal&lt;/a&gt;, like 15-year-old &lt;a href=&quot;https://www.arnewsline.org/yhoty/&quot;&gt;Bryant Rascoll&lt;/a&gt;, an Extra Class amateur radio licensee in Alabama who wrote in support of RM-11831 about protecting “our precious spectrum.”&lt;/p&gt;
&lt;p&gt;“I don’t want to see amateur radio turn into essentially a smartphone for sending email—today’s kid has that and more there in his pocket,” Kolarik says. “But if they can turn on a machine and talk to someone thousands of miles away, without the worry of interference, they will feel that magic that I did too, years ago.”&lt;/p&gt;
</description>
<pubDate>Mon, 08 Jul 2019 14:44:37 +0000</pubDate>
<dc:creator>amynordrum</dc:creator>
<og:title>Is Ham Radio a Hobby, a Utility…or Both? A Battle Over Spectrum Heats Up</og:title>
<og:url>https://spectrum.ieee.org/tech-talk/telecom/wireless/is-ham-radio-a-hobby-a-utilityor-both-a-battle-over-spectrum-heats-up</og:url>
<og:description>Some think automated radio emails are mucking up the spectrum reserved for amateur radio, while others say these new offerings provide a useful service</og:description>
<og:image>https://spectrum.ieee.org/image/MzMzMjQ4OA.jpeg</og:image>
<og:type>blog-tech-talk</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://spectrum.ieee.org/tech-talk/telecom/wireless/is-ham-radio-a-hobby-a-utilityor-both-a-battle-over-spectrum-heats-up</dc:identifier>
</item>
<item>
<title>It’s Never Going to Be Perfect, So Just Get It Done</title>
<link>https://www.nytimes.com/2019/07/07/smarter-living/its-never-going-to-be-perfect-so-just-get-it-done.html</link>
<guid isPermaLink="true" >https://www.nytimes.com/2019/07/07/smarter-living/its-never-going-to-be-perfect-so-just-get-it-done.html</guid>
<description>&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-53u6y8&quot;&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;&lt;em class=&quot;css-2fg4z9 e1gzwzxm0&quot;&gt;Welcome to the Smarter Living newsletter! Every Monday,&lt;/em&gt; &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://twitter.com/timherrera&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;&lt;em class=&quot;css-2fg4z9 e1gzwzxm0&quot;&gt;Tim Herrera&lt;/em&gt;&lt;/a&gt; &lt;em class=&quot;css-2fg4z9 e1gzwzxm0&quot;&gt;emails readers with tips and advice for living a better, more fulfilling life.&lt;/em&gt; &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/newsletters/smarter-living?module=inline&quot; title=&quot;&quot;&gt;&lt;em class=&quot;css-2fg4z9 e1gzwzxm0&quot;&gt;Sign up here&lt;/em&gt;&lt;/a&gt; &lt;em class=&quot;css-2fg4z9 e1gzwzxm0&quot;&gt;to get it in your inbox.&lt;/em&gt;&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;So here’s a grand, wonderful irony: I started writing this newsletter in early June.&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;I’d come back to my meager Google Doc every few days, reworking the same few sentences, each time thinking I was finally ready to finish. But I never really made any progress — I wanted it to be &lt;em class=&quot;css-2fg4z9 e1gzwzxm0&quot;&gt;just right&lt;/em&gt;, and I fell into an editing and re-editing spiral. But, of course, &lt;em class=&quot;css-2fg4z9 e1gzwzxm0&quot;&gt;just right&lt;/em&gt; is a mirage that never materializes, and that mirage prevented me from … actually finishing this newsletter.&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;Is the prose here any better for all of that incremental faux-progress? Probably not! I wanted it to be, but I know that if I had just gotten it done when I wanted to, instead of examining every word with a microscope, I could’ve saved myself a lot of unnecessary stress (and actually hit my self-imposed deadline). And that needless obsession with perfection is kind of the whole deal: By agonizing over tiny improvements in our work — if they even are improvements — we prevent ourselves from achieving the actual goal of, you know, &lt;em class=&quot;css-2fg4z9 e1gzwzxm0&quot;&gt;doing the work&lt;/em&gt;.&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;“At some point, we must remind ourselves, any changes we make to a creation no longer make it better but just different (and sometimes worse),” Dr. Alex Lickerman &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.psychologytoday.com/us/blog/happiness-in-world/201106/why-perfect-is-the-enemy-good&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;wrote in Psychology Today&lt;/a&gt; on the topic of just getting things done. “Recognizing that inflection point — the point at which our continuing to rework our work reaches a law of diminishing returns — is one of the hardest skills to learn, but also one of the most necessary.”&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-53u6y8&quot;&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;He added that “overworking something is just as bad as failing to polish it.”&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;By now, you’re probably thinking of that quote attributed to Voltaire: “Perfect is the enemy of good.” And yes, that’s the idea. But we all know that, so what’s the way around it?&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;One solution is a take on a topic longtime readers of this newsletter will recognize: &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/2018/06/04/smarter-living/how-to-finally-just-make-a-decision.html?module=inline&quot; title=&quot;&quot;&gt;the M.F.D., or the Mostly Fine Decision&lt;/a&gt;. (Patent still pending.)&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;The M.F.D. is the minimum outcome you’re willing to accept as a consequence of a decision. It’s what you’d be perfectly fine with, rather than the outcome that would be perfect. The root of the M.F.D. lies in the difference between &lt;em class=&quot;css-2fg4z9 e1gzwzxm0&quot;&gt;maximizers&lt;/em&gt; and &lt;em class=&quot;css-2fg4z9 e1gzwzxm0&quot;&gt;satisficers&lt;/em&gt;. Maximizers relentlessly research all possible options in a scenario for fear of missing the “best” one, while satisficers make quick decisions based on less research.&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;But here’s the key: Somewhat paradoxically, &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.ncbi.nlm.nih.gov/pubmed/16466422&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;research has shown&lt;/a&gt; that satisficers are &lt;em class=&quot;css-2fg4z9 e1gzwzxm0&quot;&gt;more satisfied with their decisions&lt;/em&gt; than maximizers are.&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;In other words, just getting it done — whether that’s a decision you have to make or work you have to do — will leave you more satisfied than if you had agonized over the task in the pursuit of perfection. Even better, you’ll actually finish.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-53u6y8&quot;&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;&lt;em class=&quot;css-2fg4z9 e1gzwzxm0&quot;&gt;[Like what you’re reading?&lt;/em&gt; &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/newsletters/smarter-living?module=inline&quot; title=&quot;&quot;&gt;&lt;em class=&quot;css-2fg4z9 e1gzwzxm0&quot;&gt;Sign up here&lt;/em&gt;&lt;/a&gt; &lt;em class=&quot;css-2fg4z9 e1gzwzxm0&quot;&gt;for the Smarter Living newsletter to get stories like this (and much more!) delivered straight to your inbox every Monday morning.]&lt;/em&gt;&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;“Easier said than done,” you’re probably thinking. True. So here are two strategies that might help you out.&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;First, embrace the &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/2018/01/22/smarter-living/micro-progress.html?module=inline&quot; title=&quot;&quot;&gt;magic of micro-progress&lt;/a&gt;: Rather than looking at tasks, projects or decisions as items that must be completed, slice them into the smallest possible units of progress, then knock them out one at a time. This strategy relieves the pressure of thinking we need a perfect plan before we begin something — after all, if your first step is “open a new Google Doc for this week’s newsletter” and not “pick a perfect topic, write a perfect lede and have a perfect organization,” you either have achieved that micro-goal or you haven’t. There’s no gray area.&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;Second, reframe the way you think about the things you have to do. Focus far less on the end result, and far more on the process — this allows you to be aware of the progress you’re making, rather than obsessing over the end result of that progress. &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://jamesclear.com/repetitions&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;As the writer James Clear put it&lt;/a&gt;, “when you think about your goals, don’t just consider the outcome you want. Focus on the repetitions that lead to that place. Focus on the piles of work that come before the success. Focus on the hundreds of ceramic pots that come before the masterpiece.”&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;In the end, just do the work. It won’t be perfect, but you’ll be far happier, and it’ll be done. And done is better than perfect ¯\_(ツ)_/¯&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;How do you get around roadblocks to finish things you’ve obsessed over? Tell me on Twitter at &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://twitter.com/timherrera&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;@timherrera&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;Have a great week!&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;— Tim&lt;/p&gt;
&lt;h2 class=&quot;css-edk2dh eoo0vm40&quot; id=&quot;link-afbf7a2&quot;&gt;Best of Smarter Living&lt;/h2&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;&lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/guides/travel/how-to-pack-a-suitcase&quot; title=&quot;&quot;&gt;How to Pack a Suitcase&lt;/a&gt; Packing may seem simple, but it’s a science with rules that travelers often learn the hard way over thousands of miles on the road.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-53u6y8&quot;&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;&lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/2019/07/02/well/family/millennials-love-relationships-marriage-dating.html&quot; title=&quot;&quot;&gt;Should We All Take the Slow Road to Love?&lt;/a&gt; Millennials are going on fewer dates, having less sex and marrying later. Do they know something about love the rest of us don’t?&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;&lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/2019/06/27/well/eat/10-ways-to-lower-the-cancer-risk-of-grilling.html&quot; title=&quot;&quot;&gt;10 Ways to Lower the Cancer Risk of Grilling&lt;/a&gt; If you plan to grill often, experts suggest taking small steps to make a big difference in lowering your exposure to compounds tied to cancer.&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;&lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/2019/06/27/smarter-living/ancient-greek-philosophy-humors-work-smarter-productivity.html&quot; title=&quot;&quot;&gt;Could Ancient Greek Philosophy Help You Work Smarter and Better?&lt;/a&gt; The idea of “temperaments” or “humors” has long been debunked, but thinking in terms of broad personality types may actually help you get things done.&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;&lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/2019/07/01/smarter-living/guilty-pleasures-no-such-thing.html&quot; title=&quot;&quot;&gt;‘Guilty’ Pleasures? No Such Thing&lt;/a&gt; Go forth and read that trashy novel.&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;&lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/2019/06/26/smarter-living/5-cheap-ish-things-for-the-perfect-picnic.html&quot; title=&quot;&quot;&gt;5 Cheap(ish) Things for the Perfect Picnic&lt;/a&gt; The person who wields the corkscrew is always the hero.&lt;/p&gt;
&lt;h2 class=&quot;css-edk2dh eoo0vm40&quot; id=&quot;link-4ee490e7&quot;&gt;Tip of the Week&lt;/h2&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;&lt;em class=&quot;css-2fg4z9 e1gzwzxm0&quot;&gt;This week I’ve invited S.L. contributor&lt;/em&gt; &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://twitter.com/alanna&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;&lt;em class=&quot;css-2fg4z9 e1gzwzxm0&quot;&gt;Alanna Okun&lt;/em&gt;&lt;/a&gt; &lt;em class=&quot;css-2fg4z9 e1gzwzxm0&quot;&gt;to teach us a wonderfully simple trick to being smarter about scheduling our days.&lt;/em&gt;&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;My adult life has been reduced to a series of half-hour blocks on my Google calendar. Work meeting? Add it to the cal. Coffee date? Put some time on the cal. I even use it for friend hangs, because if I don’t, I spiral into double-bookings, flakiness and chaos.&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;What this doesn’t leave room for, clearly, is flexibility, and so I’ve started to build in a buffer. Whenever I’m able, I now schedule on the :15 of the hour — dinner at 7:45 p.m. instead of 7:30 p.m. in case one person has to wrap something up at work. Therapy at 8:15 a.m. in case the trains are throwing their usual tantrums.&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;The trick is to tell your brain (and, perhaps, your calendar) that you’re still shooting for the half-hour; you’re just giving yourself some wiggle room in case life gets in the way. It’s a small gift for all parties involved, and if someone happens to be early for being late, it’s somehow less annoying, a little sliver of found time.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;
</description>
<pubDate>Mon, 08 Jul 2019 12:37:10 +0000</pubDate>
<dc:creator>mhb</dc:creator>
<og:url>https://www.nytimes.com/2019/07/07/smarter-living/its-never-going-to-be-perfect-so-just-get-it-done.html</og:url>
<og:type>article</og:type>
<og:title>It’s Never Going to Be Perfect, So Just Get It Done</og:title>
<og:image>https://static01.nyt.com/images/2019/07/08/smarter-living/27sl_newsletter/27sl_newsletter-facebookJumbo.jpg</og:image>
<og:description>Voltaire was right.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.nytimes.com/2019/07/07/smarter-living/its-never-going-to-be-perfect-so-just-get-it-done.html</dc:identifier>
</item>
<item>
<title>Tips for reviewing code you don’t like</title>
<link>https://developers.redhat.com/blog/2019/07/08/10-tips-for-reviewing-code-you-dont-like/</link>
<guid isPermaLink="true" >https://developers.redhat.com/blog/2019/07/08/10-tips-for-reviewing-code-you-dont-like/</guid>
<description>&lt;img width=&quot;1025&quot; height=&quot;575&quot; src=&quot;https://developers.redhat.com/blog/wp-content/uploads/2019/05/RedHatDeveloper_FeaturedImage.png&quot; class=&quot;single-post-featured-img wp-post-image&quot; alt=&quot;10 tips for reviewing code you don’t like&quot; srcset=&quot;https://developers.redhat.com/blog/wp-content/uploads/2019/05/RedHatDeveloper_FeaturedImage.png 1025w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/RedHatDeveloper_FeaturedImage-300x168.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/RedHatDeveloper_FeaturedImage-768x431.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/RedHatDeveloper_FeaturedImage-1024x574.png 1024w&quot; sizes=&quot;(max-width: 1025px) 100vw, 1025px&quot;/&gt;&lt;p&gt;As a frequent contributor to open source projects (both within and beyond Red Hat), I find one of the most common time-wasters is dealing with code reviews of my submitted code that are negative or obstructive and yet essentially subjective or argumentative in nature. I see this most often when submitting to projects where the maintainer doesn’t like the change, for whatever reason. In the best case, this kind of code review strategy can lead to time wasted in pointless debates; at worst, it actively discourages contribution and diversity in a project and creates an environment that is hostile and elitist.&lt;/p&gt;
&lt;p&gt;A code review should be objective and concise and should deal in certainties whenever possible. It’s not a political or emotional argument; it’s a technical one, and the goal should always be to move forward and elevate the project and its participants.  A change submission should always be evaluated on the merits of the submission, not on one’s opinion of the submitter.&lt;span id=&quot;more-607517&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;Code review strategies&lt;/h2&gt;
&lt;p&gt;Here are several strategies to keep in mind when reviewing submissions that, for whatever reason, you (as a project maintainer) do not like:&lt;/p&gt;

&lt;h3&gt;1. Rephrase your objection as a question&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Bad: “This change will make XXX impossible.” (This is hyperbole; is it &lt;em&gt;really&lt;/em&gt; impossible?)&lt;/li&gt;
&lt;li&gt;Good: “How can we do XXX with your change?”&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;2. Avoid hyperbole&lt;/h3&gt;
&lt;p&gt;Simply state your concerns and ask questions to help get to the desired outcome.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Bad: “This change will destroy performance.”&lt;/li&gt;
&lt;li&gt;Good: “It seems like doing X might be slower than existing Y; have you measured/gathered data to show it isn’t?”&lt;/li&gt;
&lt;li&gt;Better (if you have time): “In the meantime, I am gathering data to try to verify that X is not slower than Y.”&lt;/li&gt;
&lt;li&gt;Also good: “This change changes this single loop O(n) to a doubly nested loop O(n²); won’t this affect performance?”&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;3. Keep snide comments to yourself&lt;/h3&gt;
&lt;p&gt;Some thoughts are better kept to yourself. If you can’t be civil, don’t engage.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Bad: “I think this change is bad and will ruin everything.”&lt;/li&gt;
&lt;li&gt;Bad: “Are you sure that software engineering is the right career path for you?”&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;4. Engage positively&lt;/h3&gt;
&lt;p&gt;Maybe you had a different idea about how to solve a problem? If you engage positively, you might end up discovering a solution that is better than either original option.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Bad: “This change sucks, my version is better.”&lt;/li&gt;
&lt;li&gt;Good: “I also have a similar change at this location XXX: maybe we can compare and/or combine ideas.”&lt;/li&gt;
&lt;li&gt;Also good: “I have a similar change in progress, but I chose to do X because ZZZ; why did you choose Y?”&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;5. Remember that not everybody’s experience is identical to yours&lt;/h3&gt;
&lt;p&gt;An otherwise completely competent engineer could go for years without knowing some fact that you take as common sense. It’s okay to state the obvious, as long as you aren’t patronizing or snide about it.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Bad: “Can’t you see that this is obviously wrong?”&lt;/li&gt;
&lt;li&gt;Good: “This is incorrect because it causes a null pointer exception when X is Y.”&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;6. Don’t diminish the complexity of something that’s not obvious&lt;/h3&gt;
&lt;p&gt;Remember that things that are obvious to you may not be obvious to everyone. Suggesting alternative approaches and pointing out useful examples can help get everyone on the same page.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Bad: “Why not simply frob the gnozzle?”&lt;/li&gt;
&lt;li&gt;Good: “It might be possible to frob the gnozzle, which would simplify this part (see XXX for an example).”&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;7. Be respectful&lt;/h3&gt;
&lt;p&gt;Sometimes a submission just doesn’t meet a minimum standard for quality. It’s okay to say so, but it doesn’t cost anything extra to be respectful.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Bad: “This is stupid code written by a stupid person.”&lt;/li&gt;
&lt;li&gt;Good: “Thanks for your contribution. However, it cannot be accepted in its current form; there are multiple problems (as outlined above).”&lt;/li&gt;
&lt;li&gt;Also good: “As outlined above, there are multiple problems with this submission.  Maybe we could back up a step and talk about the use cases instead?  That could help us find a path forward.”&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;8. Manage expectations (and your time)&lt;/h3&gt;
&lt;p&gt;If a submission is too large to be reasonably reviewed, it is okay to let the submitter know right away. Keep moving forward.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Bad: “I’m not merging this, it’s too big.”&lt;/li&gt;
&lt;li&gt;Also bad: Ignoring it until it goes away.&lt;/li&gt;
&lt;li&gt;Good: “Could you please break this down into smaller changes? I do not have a lot of time for code reviews and this one is just too large/complex to review in one pass.”&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;9. Say please&lt;/h3&gt;
&lt;p&gt;Just saying “please” goes a long way toward showing that you respect the submitter’s time, especially when you want something to be different due to formatting or style, which might seem to be a minor detail of the change. Examples:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;“Could you please separate the whitespace changes into another pull request?”&lt;/li&gt;
&lt;li&gt;“Could you please align these variable definitions so they’re easier to read?”&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;10. Start a conversation&lt;/h3&gt;
&lt;p&gt;If, after all this, you still don’t like something &lt;em&gt;but you’re not sure why&lt;/em&gt;, you might have to just live with it. But it’s also okay to say, “I don’t like this and I’m not sure why, can we talk about it?” It’s a reasonable thing to ask, and even though it might take a little time, it’s often worth the investment because now you have two people who are both learning (one by explaining and one by listening) rather than two people who are opposed to each other.&lt;/p&gt;
&lt;p&gt;Even skilled and experienced engineers should be able to say “I don’t understand why I don’t like this”; it’s not an invitation to attack the position of the reviewer but rather an honest quest for knowledge.&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Avoid hyperbolic or bombastic assertions, avoid argument strategies, avoid elitist or demeaning language, and avoid constructs like “obviously” and “why don’t you just…”.  Use clear, factual statements and supportive language, ask questions, and move things forward.  Remember that coworkers and contributors are human people, and their time is worthy of the same respect as yours.&lt;/p&gt;


&lt;div class=&quot;addtoany_share_save_container addtoany_content addtoany_content_bottom&quot;&gt;
&lt;div class=&quot;a2a_kit a2a_kit_size_16 addtoany_list&quot; data-a2a-url=&quot;https://developers.redhat.com/blog/2019/07/08/10-tips-for-reviewing-code-you-dont-like/&quot; data-a2a-title=&quot;10 tips for reviewing code you don’t like&quot;&gt;&lt;a class=&quot;a2a_dd addtoany_share_save addtoany_share&quot; href=&quot;https://www.addtoany.com/share&quot;&gt;&lt;img src=&quot;https://static.addtoany.com/buttons/favicon.png&quot; alt=&quot;Share&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Mon, 08 Jul 2019 12:33:46 +0000</pubDate>
<dc:creator>kesor</dc:creator>
<og:type>article</og:type>
<og:title>10 tips for reviewing code you don't like - Red Hat Developer Blog</og:title>
<og:description>Here are 10 tips to keep in mind when reviewing code submissions that, for whatever reason, you (as a project maintainer) do not like.</og:description>
<og:url>https://developers.redhat.com/blog/2019/07/08/10-tips-for-reviewing-code-you-dont-like/</og:url>
<og:image>https://developers.redhat.com/blog/wp-content/uploads/2019/05/RedHatDeveloper_FeaturedImage.png</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://developers.redhat.com/blog/2019/07/08/10-tips-for-reviewing-code-you-dont-like/</dc:identifier>
</item>
<item>
<title>Ten Years of Erlang</title>
<link>https://ferd.ca/ten-years-of-erlang.html</link>
<guid isPermaLink="true" >https://ferd.ca/ten-years-of-erlang.html</guid>
<description>&lt;span class=&quot;date&quot;&gt;2019/07/08&lt;/span&gt;&lt;h2&gt;Ten Years of Erlang&lt;/h2&gt;
&lt;p&gt;I've joined the Erlang community about 10 years ago, in the midst of its first major hype phase. Erlang, we were told, was the future of concurrency and parallelism. The easiest and fastest way to get it done, and you could get distribution for free too. Back then, things were just starting to get amazing. The virtual machine had recently gotten &lt;a href=&quot;https://en.wikipedia.org/wiki/Symmetric_multiprocessing&quot;&gt;SMP&lt;/a&gt; support, before which you needed to run multiple VMs on the same computer to truly use all CPUs.&lt;/p&gt;
&lt;p&gt;I wanted to take a bit of time to reflect over most of that decade. In this post, I'll cover a few things such as hype phases and how this related to Erlang, the &lt;em&gt;ladder of ideas&lt;/em&gt; within the language and how that can impact adoption, what changed in my ten years here, and I'll finish up with what I think Erlang still has to bring to the programming community at large.&lt;/p&gt;
&lt;h3&gt;The Hype Phase&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Hype_cycle&quot;&gt;Hype cycle&lt;/a&gt; introduces phases in the lifetime of a product or technology. It's a marketing concept, not a scientific one, but it's often felt useful to describe how things are going. The part that interests me the most is the idea of a &lt;em&gt;hype phase&lt;/em&gt;, a kind of gold rush that happens in programming communities. You probably have seen one or more of them, and they all seem to be attached to some &lt;a href=&quot;https://en.wikipedia.org/wiki/Killer_application&quot;&gt;killer app&lt;/a&gt; that forces everyone to rush in.&lt;/p&gt;
&lt;p&gt;Examples that come to mind may include Ruby on Rails and &lt;a href=&quot;https://www.youtube.com/embed/Gzj723LkRJY&quot;&gt;How to Build a Blog Engine in 15 minutes&lt;/a&gt; (&lt;em&gt;&quot;Look at all the things I'm &lt;em&gt;not&lt;/em&gt; doing!&quot;&lt;/em&gt; is still a fun sentence), or Go with Kubernetes (it was already seeing significant usage before, but really exploded then), for example. To a lesser extent, Elixir and Phoenix could fit that list as well.&lt;/p&gt;
&lt;p&gt;During a hype phase like that, an incredible influx of newcomers drop by to see what the fuss is all about. Some will stay, most will leave. Your stay might be in terms of months or years, and in rare cases where you find a home it could last decades. But the vast majority of them will be a continuous flow of serial early adopters who surf from tech to tech, sniffing the best opportunity to gain a competitive advantage by being first to use a type of framework, language, or toolkit.&lt;/p&gt;
&lt;p&gt;So the idea is, often, that what you need to do is get one true killer app, and people will come to your ecosystem. The killer app drives the rush. If you build it, they will come. If you can keep a small percentage of them active and to stay, you'll have a lively community for the foreseeable future. This is, in a weird way, reminiscent of &lt;a href=&quot;https://en.wikipedia.org/wiki/Rain_follows_the_plow&quot;&gt;&lt;em&gt;Rain follows the plow&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote title=&quot;Wikipedia&quot; readability=&quot;18&quot;&gt;
&lt;p&gt;&lt;cite&gt;God speed the plow. ... By this wonderful provision, which is only man's mastery over nature, the clouds are dispensing copious rains ... [the plow] is the instrument which separates civilization from savagery; and converts a desert into a farm or garden. ... To be more concise, Rain follows the plow.&lt;/cite&gt;&lt;/p&gt;&lt;p&gt;The basic premise of the theory was that human habitation and agriculture through homesteading effected a permanent change in the climate of arid and semi-arid regions, making these regions more humid. The theory was widely promoted in the 1870s as a justification for the settlement of the Great Plains, a region previously known as the &quot;Great American Desert&quot;. It was also used to justify the expansion of wheat growing on marginal land in South Australia during the same period.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If only we can get one big project going, then the devs will appear, and it will become self-sustaining. I believe this is patently false, mostly because Erlang has had dozens of killer apps during its biggest hype phase, and yet, the community remained small. See, for example, the following killer apps from that era:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://www.ejabberd.im/&quot;&gt;ejabberd&lt;/a&gt; (2002, first stable release in 2005): it was by far one of the most, if not the most scalable hosted chat server one could run. Ejabberd was a massive success, and to some extent still is. You will, to this day, still find StackOverflow questions about modules for it. Around 2011, it was forked into &lt;a href=&quot;https://mongooseim.readthedocs.io/en/latest/History/&quot;&gt;MongooseIM&lt;/a&gt;, and both solutions still are maintained.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://couchdb.apache.org/&quot;&gt;CouchDB&lt;/a&gt; (2005): one of the first popular databases written in Erlang following the &lt;a href=&quot;https://en.wikipedia.org/wiki/CAP_theorem&quot;&gt;CAP theorem&lt;/a&gt;, and one of the new waves of multi-master document stores at the time. While MongoDB ate most of that space, CouchDB still has spiritual children in storage engines such as &lt;a href=&quot;https://barrel-db.org/&quot;&gt;BarrelDB&lt;/a&gt;, on top of still being maintained as well.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.rabbitmq.com/&quot;&gt;RabbitMQ&lt;/a&gt; (2007): the one queue software implementation that pretty much ate the whole AMQP space. It's still on-going and relevant, and often gets debated along with &lt;a href=&quot;https://kafka.apache.org/&quot;&gt;Kafka&lt;/a&gt; when it comes to streaming workloads, although they have pretty distinct properties and use cases.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.facebook.com/notes/facebook-engineering/chat-stability-and-scalability/51412338919/&quot;&gt;Facebook chat&lt;/a&gt; (2008): the initial version of Facebook's Chat was written in Erlang. Due to a lot of internal decisions (stability, strong internal presence of C++ engineers with an established set of solutions), it was rewritten in C++ at a later time&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.whatsapp.com/&quot;&gt;WhatsApp&lt;/a&gt; (2009, bought in 2014): Once facebook got rid of Erlang for their chat system, they ended up buying WhatsApp, which famously &lt;a href=&quot;https://www.wired.com/2015/09/whatsapp-serves-900-million-users-50-engineers/&quot;&gt;needed only 50 engineers for 900 millions users&lt;/a&gt;. It is still on-going today, and in fact, WhatsApp folks have decided to get far more heavily involved in the Erlang and Elixir communities than they ever were before.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://riak.com/&quot;&gt;Riak&lt;/a&gt; (2009): One of the best examples of muscle-flexing in the distributed systems world. Riak was a really solid distributed key-value store, a Basho product that still runs in healthcare systems and other critical pieces of infrastructure. After Basho struggled financially and was forced to go bankrupt (in no small part due to &lt;a href=&quot;https://www.klgatesdelawaredocket.com/2018/09/controller-breaches-fiduciary-duties-by-coercing-onerous-financing-terms/&quot;&gt;violations of fiduciary duties&lt;/a&gt; that put the company &lt;a href=&quot;https://www.theregister.co.uk/2018/07/09/basho_damages_20m_misinformation_threats/&quot;&gt;&quot;on a greased slide to failure&quot;&lt;/a&gt;). The folks at &lt;a href=&quot;https://www.bet365.com/&quot;&gt;Bet365&lt;/a&gt; have since then bought out all the IP, gracefully opened it all up, and the database still lives on in the open source world, albeit with more limited support than in its better days.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Many of these came around the time where Joe Armstrong's book, &lt;a href=&quot;https://www.goodreads.com/book/show/808814.Programming_Erlang&quot;&gt;Programming Erlang&lt;/a&gt;, first came out. This created a kind of perfect storm for heavy adoption, and Erlang had a ton of onlookers. Even the day where &lt;a href=&quot;https://news.ycombinator.com/item?id=12502531&quot;&gt;Hacker News forced all discussions to be about the Innards of Erlang&lt;/a&gt; had a noticeable impact. Yet, few people stayed compared to how many took a look.&lt;/p&gt;
&lt;p&gt;I think now that killer apps are driven by people glutting to an initial hype phase, not the opposite. There is always a smaller, earlier phase of people sniffing out interesting tech, deciding they like it, then building something, and if that something is a killer app, then you do get an even bigger hype phase out of it. People &lt;em&gt;will&lt;/em&gt; cargo cult things, and a success story breeds more copycats. The other common thing is a phase of &quot;reinventing the world&quot;, where everyone spends their time reimplementing everything that exists, so you get a bunch of announcements about &quot;&lt;em&gt;something&lt;/em&gt; but in &lt;em&gt;language&lt;/em&gt;.&quot;&lt;/p&gt;
&lt;p&gt;But killer apps on their own are never really sufficient. One interesting consequence for these is that products like RabbitMQ and Ejabberd, for all their popularity, have communities of &lt;em&gt;users&lt;/em&gt; far larger than communities of contributors. The thousands and thousands of corporations that use their products do not necessarily participate in the Erlang community that much.&lt;/p&gt;
&lt;p&gt;Part of it is no doubt due to the idea that most of Erlang's killer apps turn out to be in specialized infrastructure: you create one high reliability black box component that everybody else can use, and if it works well enough, they never need to look inside the box. Off you go, a few dozen developers have provided the foundations to thousands of other products and services. Specialized infrastructure, by definition, is a space where you don't need a massive amount of people to have a massive impact. It's always going to have smaller contributor groups and communities than things that sit closer to the end product, such as web frameworks with uncountable web developers, or even more generalized infrastructure that makes sense to use in small-scale deployment projects where any business may find a use for it.&lt;/p&gt;
&lt;p&gt;But even without these factors, it's easy to feel like Erlang missed on a massive opportunity of capturing a larger share of the foot traffic that came through during its hype phase.&lt;/p&gt;
&lt;h3&gt;The Ladder of Ideas&lt;/h3&gt;
&lt;p&gt;I won't get into &lt;a href=&quot;https://plato.stanford.edu/entries/counterfactuals/#WhatCoun&quot;&gt;counterfactuals&lt;/a&gt; by describing what could or should have been done. Instead, I want to dig into common learning patterns I've seen in the Erlang community during my years of teaching it and writing about it. Those are also patterns I see happening &lt;em&gt;right now&lt;/em&gt; in the Elixir community, and that I feel could be signs of a similar future for it.&lt;/p&gt;
&lt;p&gt;A pet theory of mine is that a technical topic like a programming language (and its ecosystem) have multiple layers of complexity, with various concepts to go learn and discover. I first started toying with this idea in &lt;em&gt;Learn You Some Erlang&lt;/em&gt;, with a diagram I called &lt;a href=&quot;https://learnyousomeerlang.com/relups#the-ninth-circle-of-erl&quot;&gt;The Nine Circles of Erl&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now that's a tongue in cheek approach, and I don't think learning a piece of tech is endless suffering (at least, it shouldn't be). I just liked the pun. But to put it simply, there is often a more &quot;core&quot; track or sequence of topics you'd study learning the technology, creating a &quot;ladder of ideas&quot;, where more worthwhile concepts are put higher and higher, but as they are harder to reach, fewer people actually make it there.&lt;/p&gt;
&lt;img src=&quot;https://ferd.ca/static/img/erlang-ladder.png&quot; alt=&quot;Erlang ladder as an image&quot;/&gt;&lt;p&gt;In Erlang, what I would consider the ladder might look like this:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;functional programming&lt;/li&gt;
&lt;li&gt;isolated processes and concurrency&lt;/li&gt;
&lt;li&gt;reliable concurrency (links, monitors, timeouts)&lt;/li&gt;
&lt;li&gt;OTP behaviours and other system abstractions&lt;/li&gt;
&lt;li&gt;How to structure OTP systems&lt;/li&gt;
&lt;li&gt;How to build releases and handle their life cycle&lt;/li&gt;
&lt;li&gt;How to never take the system down, and how to operate it&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;If you're starting with Erlang for the first time and grabbing a beginner's book, you'll likely spend most of your first days on the first rung: getting to be friends with functional programming, immutability, recursion, and similar concepts. Sooner or later, you then get into concurrency and parallelism, processes, and message passing. Right after that, you start to learn about links and monitors, handling failures, and what makes Erlang what it is. During Erlang's big hype phase, the second and third rungs were what was sold as truly amazing to most onlookers. If you had to learn something to carry with you in all future projects, it was one of these things.&lt;/p&gt;
&lt;p&gt;Other rungs would follow up later, but only if you stuck through with the program. Particularly, OTP (rung 4) would be decried as &lt;em&gt;what it's actually all about&lt;/em&gt;. Concurrency and functional programming were nice for sure, but the general development framework represented by OTP was something truly unique that you had to stick with and use. A lot of people would play with them, find out about the nice abstractions they make, but may feel a bit confused about how to structure everything right.&lt;/p&gt;
&lt;p&gt;In fact, applications like Ejabberd had the most of their development barely breaking the 4th rung. The ecosystem at the time was a bit like the Wild West, OTP knowledge was a thing for folks who had worked at Ericsson and the most motivated self-learners. Most people would never reach the 5th rung until they had something worth putting in production and started having issues and wanted to look for a better way. The 6th rung was rare until probably 2015 or 2016, when &lt;a href=&quot;https://github.com/erlware/relx&quot;&gt;Relx&lt;/a&gt; came to make the whole experience easier. The 7th rung is almost never reached, and in fact a bunch of people feel like you should never hot upgrade a node, and that ideally you'd never SSH on there to debug it in production either.&lt;/p&gt;
&lt;p&gt;In practice, not everyone will go through all of these in the same order, and some books flip them around (&lt;a href=&quot;https://www.manning.com/books/erlang-and-otp-in-action&quot;&gt;Erlang and OTP in Action&lt;/a&gt; comes to mind). That's fine, the ladder is just for illustrative purposes.&lt;/p&gt;
&lt;p&gt;Communities tend to move in waves. Since hype phases can increase the size of a community tenfold or a hundredfold for a while, and that most people will take a curious look and then leave, most users in a community will tend to sit at the first rung and rarely make it past there. A fraction will make it a level above, and an ever shrinking fraction will make it above that one, and so on, until you have inner circles of experts at the highest levels.&lt;/p&gt;
&lt;p&gt;I think that for Erlang, the first three rungs were probably the easy ones to get into. The fourth one took a few years to develop and to be perceived as worthwhile. The fifth one is where things became extremely hard. Erlang's tooling and ecosystem was lacking. People in the Erlang community had self-selected to be those who could tolerate that barren environment, and as such were insensitive to the plight of newcomers. To keep this post short (well, long rather than absurdly long), my Erlang User Conference keynote is probably the most complete rant I have on the ecosystem:&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/Z28SDd9bXcE&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;[embedded content]&lt;/iframe&gt;
&lt;p&gt;In any case, if you're an Elixir user, you can probably see where you are on this arbitrarily-defined ladder, and you can get a feel of where factions within a community generally are located on there. A lot of folks, probably those who are fine doing Phoenix and nothing else, will rarely break above the 4th rung, and many will stick on level 3 or below for the foreseeable future. This is, in many cases, fine. It's not a judgment call, just an observation. As someone who has seen a lot of the rungs (and possibly there are still a few above my own head in this environment, like &quot;patching the VM&quot; or something), it feels like they'd be missing out on a lot, but frankly this might never prove to be useful information to them. That's fine.&lt;/p&gt;
&lt;p&gt;But all of this is to say: I think we, as a community, probably hamstrung ourselves by making it very difficult for people to go above the basic levels. Some of the lessons to be learned can't be rushed, and to some extent the blind were leading the blind because Erlang was so small that there were not enough people to share all the experience that was required. Things are easier today, and if you're getting in outside of a hype cycle, you're much more likely to be able to find good help because there are fewer people asking for it all at once.&lt;/p&gt;
&lt;p&gt;I'd like to think that were Erlang to have a second hype phase tomorrow, we'd be in a better place to welcome it than when I was riding the big wave myself. And hopefully, this experience, along with the much better collaboration between the Erlang and Elixir communities, doubles our chances of success by increasing our surface area.&lt;/p&gt;
&lt;h3&gt;What Changed&lt;/h3&gt;
&lt;p&gt;Erlang didn't stay in a glass container filled with formaldehyde, awaiting to be taken out in broad daylight. It has continuously evolved. Parts of it were due to pressures and demands from the Elixir community, who fortunately came in expecting more of their tools than Erlang users had grown accustomed to. Parts of it were also due to actual industrial needs that pushed the platform forwards, and academia just driving things forwards as they like to do.&lt;/p&gt;
&lt;p&gt;Here are a few things I can think of, that people might be glad to know changed since 2009 or earlier:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;multicore support is now good. It used to be that past 2-4 cores, things would start to hit all kinds of bottlenecks that were out of your control as an application developer. Then you could handle 12-16 cores fine. These days I'm not quite sure what the max value is, but I'm pretty sure I wrote and operated stacks that ran on more than 32 cores without a hiccup.&lt;/li&gt;
&lt;li&gt;There are line numbers in stacktraces. It's almost unthinkable to go back to the era before line numbers. Back then, &quot;write short self-descriptive functions&quot; was not just a question of design, it was a question of survival. You can now debug Erlang programs without otherworldly debugging skills, although having those never hurt.&lt;/li&gt;
&lt;li&gt;Unicode support is now acceptable. The &lt;code&gt;string&lt;/code&gt; module contains most important algorithms, and the &lt;code&gt;unicode&lt;/code&gt; module handles most conversions and normalizations fine. There are general strategies to deal with raw codepoints, UTF-8, UTF-16, and UTF-32. Locale support is still lacking, but things are now workable. Modules such as &lt;code&gt;re&lt;/code&gt; (for regular expressions) and all higher level file-handling code can also cope with Unicode fine.&lt;/li&gt;
&lt;li&gt;Maps (implemented as &lt;a href=&quot;https://en.wikipedia.org/wiki/Hash_array_mapped_trie&quot;&gt;HAMTs&lt;/a&gt;) are supported, with explicit pattern matching syntax. The type analysis done on them with Dialyzer also allows to substitute them for multiple use cases where records were previously used with a lot of pain&lt;/li&gt;
&lt;li&gt;The &lt;a href=&quot;https://learnyousomeerlang.com/time#how-things-are&quot;&gt;time handling&lt;/a&gt; mechanisms in the virtual machine are world class and do things right when it comes to dealing with time warping, various types of clocks, and so on. Timezone and formatting handling is still mostly better done with community libraries, however.&lt;/li&gt;
&lt;li&gt;High-performance tools such as &lt;a href=&quot;http://erlang.org/doc/man/atomics.html&quot;&gt;atomics&lt;/a&gt;, &lt;a href=&quot;http://erlang.org/doc/man/counters.html&quot;&gt;counters&lt;/a&gt;, and &lt;a href=&quot;http://erlang.org/doc/man/persistent_term.html&quot;&gt;persistent terms&lt;/a&gt; have been added to help improve all underlying mechanisms that power observability features and lower-level core libraries&lt;/li&gt;
&lt;li&gt;All &lt;a href=&quot;https://www.youtube.com/watch?v=U-JIzj07uQA&quot;&gt;signal handling has been made asynchronous&lt;/a&gt;, including with &lt;a href=&quot;https://github.com/erlang/otp/blob/master/erts/emulator/internal_doc/PortSignals.md&quot;&gt;ports&lt;/a&gt;, which massively reduced bottlenecks&lt;/li&gt;
&lt;li&gt;The compiler has been and is still being rewritten for higher level analysis and performance gains through &lt;a href=&quot;http://blog.erlang.org/ssa-history/&quot;&gt;SSA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Dirty schedulers with NIFs now exist and make integration with C or even Rust code simple, with both support for IO- or CPU-intensive workloads. So while the language is probably not infinitely faster even though it &lt;em&gt;is&lt;/em&gt; faster, it is easier than ever to drop down for higher performance libraries without impacting the runtime stability too much&lt;/li&gt;
&lt;li&gt;Various improvements to &lt;a href=&quot;https://github.com/erlang/otp/tree/master/erts/emulator/internal_doc&quot;&gt;memory allocation and management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Faster and more flexible live tracing and &lt;a href=&quot;http://erlang.org/doc/man/msacc.html&quot;&gt;micro-state accounting&lt;/a&gt; for correctness and performance investigations&lt;/li&gt;
&lt;li&gt;A more flexible &lt;code&gt;gen_statem&lt;/code&gt; OTP behaviour to implement finite state machines that can handle selective receives&lt;/li&gt;
&lt;li&gt;A new and improved &lt;a href=&quot;https://ferd.ca/erlang-otp-21-s-new-logger.html&quot;&gt;logging framework&lt;/a&gt;, with built-in support for structured logging&lt;/li&gt;
&lt;li&gt;A rewrite of the &lt;code&gt;crypto&lt;/code&gt; module to use NIFs instead of more complex (and often slower to update) drivers&lt;/li&gt;
&lt;li&gt;An entire rewrite of the file driver using NIFs for &lt;a href=&quot;http://blog.erlang.org/My-OTP-21-Highlights/&quot;&gt;huge performance gains&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;An ongoing rewrite of the network drivers using NIFs for similar performance gains&lt;/li&gt;
&lt;li&gt;A whole rewrite of the &lt;code&gt;ssl&lt;/code&gt; application for TLS handling. Back in my days at Heroku, we managed to make it competitive with C++ solutions in terms of latency (maybe 5% slower) and a whole lot better in terms of predictability (around 10-30x lower 99th percentiles)&lt;/li&gt;
&lt;li&gt;Major improvements to ETS performance&lt;/li&gt;
&lt;li&gt;I wrote a &lt;a href=&quot;https://erlang-in-anger.com/&quot;&gt;manual on how to operate and debug production systems&lt;/a&gt; using the Erlang VM&lt;/li&gt;
&lt;li&gt;An entirely new build tool (&lt;a href=&quot;https://www.rebar3.org/&quot;&gt;rebar3&lt;/a&gt;) that integrates with a unified &lt;a href=&quot;https://hex.pm/&quot;&gt;package manager for the Erlang ecosystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Multiple new programming languages are also available on the VM, with interchangeable library usage, including (but not limited to) Elixir, Efene, LFE, Luerl, Clojerl, and at least two languages with type inference with Gleam and Alpaca.&lt;/li&gt;
&lt;li&gt;And a whole lot more, both inside and outside the core Erlang distribution.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;If you're interested in finding more, you can just take a look at &lt;a href=&quot;https://www.erlang.org/news/tag/release&quot;&gt;the whole list of release notes&lt;/a&gt;. But in short, if the years around releases of OTP 13 to 16 were a bit slower for the OTP team at Ericsson (we're on version 22 now!), the latest investments they've made in using Erlang in their flagship products have really been visible. But even outside of Ericsson, things have been moving. The Erlang community, along with the Elixir community and contributors from other languages on the Erlang VM, have all banded together to set up &lt;a href=&quot;http://erlef.org/&quot;&gt;the Erlang Ecosystem Foundation&lt;/a&gt;, with lively working groups that now help coordinate and tackle issues regarding build and packaging tools, observability work, security, training and adoption, and more.&lt;/p&gt;
&lt;p&gt;If like me, you were part of the big initial hype phase, but unlike me, you didn't stick around because a lot of things felt unusable or too tricky, you might want to give it a second try. The ergonomics of the language and its ecosystem have improved drastically.&lt;/p&gt;
&lt;h3&gt;Where Erlang Goes&lt;/h3&gt;
&lt;p&gt;There haven't necessarily been big killer apps popping out of the ether the way they were around 2007 to 2009, but that does not mean there are no projects showing promise. Erlang is still wedged deep in infrastructure in a lot of corporations, and most of its initial killer apps are still around. We also have plenty of interesting new players as every BEAM Conf will show. I'm myself really sold on concepts such as Property-Based Testing, and Erlang and Elixir have some of the best frameworks in the world available to them. Despite all of this, signs point to the idea that we are &lt;em&gt;not&lt;/em&gt; in a hype phase right now, however.&lt;/p&gt;
&lt;p&gt;Is there going to be another hype phase? Maybe, maybe not. You could say Elixir &lt;em&gt;was&lt;/em&gt; the next hype phase. The ecosystem has enough in common that the lessons learned in one place are transferable to the other one. There are more similarities than differences between them. Maybe there's still a new renaissance to be had. I personally do not care that much about it anymore. I tend to like smaller communities so I feel good about this. Erlang does not need geometric growth for me to enjoy it, it just needs to remain sustainable.&lt;/p&gt;
&lt;p&gt;The size of the Erlang community has also never been a blocker to its worldwide impact. Erlang has been, as long as I've known it, in that situation where there are not enough jobs for the amount of Erlang developers, and not enough developers for the number of Erlang jobs around: there's a lot of both to go around, but they're not aligning right in terms of geography. Corporations and employees that open themselves to remote markets tend to do best. And where Erlang could not easily pierce the webapp market before, the whole Elixir job market is now available with a rather minimal effort to adapt.&lt;/p&gt;
&lt;p&gt;It's probably not too important, in the grand scheme of things, whether you are using a language like Erlang or not. While I do feel it's under-used and under-rated, the biggest benefit of it is not in running a system that uses it. The biggest benefit comes from learning about the fundamentals of solid system design, and internalizing its lessons in a practical context.&lt;/p&gt;
&lt;p&gt;One type of questions I heard a lot over the years have to do with finding guidance. How can I learn about designing protocols? Is there any good reading you'd recommend on building distributed systems? How can you go the extra mile to make something very robust and fault tolerant? How do I know that my design is modular and my abstractions aren't leaking? What &lt;em&gt;is&lt;/em&gt; good error handling? What's a good way to know when optimization is premature? What does it mean to make something &lt;em&gt;declarative&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;We like short and digestible solutions like cookbooks and best practices, but most real answers turn out to be a variation of &quot;I've learned over the years&quot;. I can honestly say that there has been nothing in my career that could ever compare to spending the time in the world of Erlang and absorbing the experience of its veteran community by osmosis. It's not a large community by numbers, but it's certainly rich by any other metrics. In a few years, I've gone from a junior developer to working in senior roles, speaking around the world, finding ways to teach that experience back, and I owe most of that to the community.&lt;/p&gt;
&lt;p&gt;Maybe I still can't write a blog engine in 15 minutes (and truth be told, I'm a slow developer anyway), but I have personally become a much more solid developer and systems architect in what I think was a very time-effective manner. Then again, what always spoke to me was not &lt;em&gt;using&lt;/em&gt; systems, it was &lt;em&gt;building&lt;/em&gt; them and making them work. What motivates people isn't universal anyway.&lt;/p&gt;
&lt;p&gt;I can't imagine I'd have gotten as much in any other community. These last 10 years have been amazing. What's interesting is that the Erlang community is still small and mostly untapped. This means there's plenty of opportunity to get involved with anything, get some one on one time with folks full of wisdom who are eager to share it, and to make a place for yourself.&lt;/p&gt;
</description>
<pubDate>Mon, 08 Jul 2019 12:31:31 +0000</pubDate>
<dc:creator>iamd3vil</dc:creator>
<og:url>https://ferd.ca/ten-years-of-erlang.html</og:url>
<og:type>website</og:type>
<og:title>Ten Years of Erlang</og:title>
<og:image>https://ferd.ca/static/img/erlang-ladder.png</og:image>
<og:description>For my ten years in the Erlang community, I decided to cover a few topics such as hype phases and how this related to Erlang, the ladder of ideas within the language and how that can impact adoption, what changed in my decade there, and what I think Erlang still has to bring to the programming community at large.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://ferd.ca/ten-years-of-erlang.html</dc:identifier>
</item>
<item>
<title>Open-Source Slack Alternative Mattermost Gets $50M Funding</title>
<link>https://itsfoss.com/mattermost-funding/</link>
<guid isPermaLink="true" >https://itsfoss.com/mattermost-funding/</guid>
<description>&lt;p&gt;&lt;a href=&quot;https://mattermost.com/&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Mattermost&lt;/a&gt;, which presents itself as an open source alternative to &lt;a href=&quot;https://itsfoss.com/slack-use-linux/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot; aria-label=&quot;Slack (opens in a new tab)&quot;&gt;Slack&lt;/a&gt; raised $50M in series B funding. This is definitely something to get excited for.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://slack.com&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener nofollow&quot; aria-label=&quot;Slack (opens in a new tab)&quot; class=&quot;external&quot;&gt;Slack&lt;/a&gt; is a cloud-based team collaboration software that is mainly used for internal team communication. Enterprises, startups and even open source projects worldwide use it interact with colleagues and project members. Slack is free with limited features while the paid enterprise version has premium features.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.ft.com/content/98747b36-9368-11e9-aea1-2b1d33ac3271&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener nofollow&quot; aria-label=&quot;Slack is valued at $20 billion (opens in a new tab)&quot; class=&quot;external&quot;&gt;Slack is valued at $20 billion&lt;/a&gt; in June, 2019. You can guess the kind of impact it has made in the tech industry and certainly more products are trying to compete with Slack.&lt;/p&gt;
&lt;h2&gt;$50 million for an open source project&lt;/h2&gt;
&lt;div class=&quot;wp-block-image&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://i0.wp.com/itsfoss.com/wp-content/uploads/2019/06/mattermost-wallpaper.png?resize=800%2C450&amp;amp;ssl=1&quot; alt=&quot;Mattermost Wallpaper&quot; class=&quot;wp-image-60006&quot; srcset=&quot;https://i0.wp.com/itsfoss.com/wp-content/uploads/2019/06/mattermost-wallpaper.png?w=800&amp;amp;ssl=1 800w, https://i0.wp.com/itsfoss.com/wp-content/uploads/2019/06/mattermost-wallpaper.png?resize=300%2C169&amp;amp;ssl=1 300w, https://i0.wp.com/itsfoss.com/wp-content/uploads/2019/06/mattermost-wallpaper.png?resize=768%2C432&amp;amp;ssl=1 768w&quot; sizes=&quot;(max-width: 800px) 100vw, 800px&quot; data-recalc-dims=&quot;1&quot;/&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Personally, I was not aware of Mattermost. But, when &lt;a href=&quot;https://venturebeat.com/2019/06/19/mattermost-raises-50-million-to-advance-its-open-source-slack-alternative/&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;VentureBeat&lt;/a&gt; reported the story, it made me curious. The funding was led by &lt;a href=&quot;https://www.ycombinator.com/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener nofollow&quot; aria-label=&quot;Y Combinator's (opens in a new tab)&quot; class=&quot;external&quot;&gt;Y Combinator’s&lt;/a&gt; Continuity with a new investor Battery Ventures and was joined by the existing investors – Redpoint and S28 Captial.&lt;/p&gt;

&lt;p&gt;With the &lt;a href=&quot;https://mattermost.com/blog/yc-leads-50m-series-b-in-mattermost-as-open-source-slack-alternative/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener nofollow&quot; aria-label=&quot; (opens in a new tab)&quot; class=&quot;external&quot;&gt;announcement&lt;/a&gt;, they also mentioned:&lt;/p&gt;
&lt;blockquote class=&quot;wp-block-quote&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;With today’s announcement, Mattermost becomes YC’s largest ever Series B investment, and more importantly, their largest open source investment to date.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To give you some specifics, here’s what VentureBeat mentioned:&lt;/p&gt;
&lt;blockquote class=&quot;wp-block-quote&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;The capital infusion follows a $20 million series A in February and a $3.5 million seed round in February 2017 and brings the Palo Alto, California-based company’s total raised to roughly $70 million.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you are curious about their plans, you should go through their &lt;a href=&quot;https://mattermost.com/blog/yc-leads-50m-series-b-in-mattermost-as-open-source-slack-alternative/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener nofollow&quot; aria-label=&quot; (opens in a new tab)&quot; class=&quot;external&quot;&gt;official announcement post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Even though it all sounds good, what is Mattermost? Maybe you didn’t know about it, until now. So, let us take a brief look at it:&lt;/p&gt;
&lt;h2&gt;A quick look at Mattermost&lt;/h2&gt;
&lt;div class=&quot;wp-block-image&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://i0.wp.com/itsfoss.com/wp-content/uploads/2019/06/mattermost-screenshot.jpg?fit=800%2C497&amp;amp;ssl=1&quot; alt=&quot;Mattermost Screenshot&quot; class=&quot;wp-image-59985&quot; srcset=&quot;https://i0.wp.com/itsfoss.com/wp-content/uploads/2019/06/mattermost-screenshot.jpg?w=800&amp;amp;ssl=1 800w, https://i0.wp.com/itsfoss.com/wp-content/uploads/2019/06/mattermost-screenshot.jpg?resize=300%2C186&amp;amp;ssl=1 300w, https://i0.wp.com/itsfoss.com/wp-content/uploads/2019/06/mattermost-screenshot.jpg?resize=768%2C477&amp;amp;ssl=1 768w&quot; sizes=&quot;(max-width: 800px) 100vw, 800px&quot;/&gt;&lt;/p&gt;
Mattermost&lt;/div&gt;
&lt;p&gt;As mentioned, it is an open source Slack alternative.&lt;/p&gt;
&lt;p&gt;At first glance, it almost resembles the look and feel of Slack. Well, that’s the point here – you will have an open source solution that you’re comfortable using.&lt;/p&gt;
&lt;p&gt;It even integrates with some of the popular DevOps tools like Git, Bots, and CI/CD. In addition to the functionality, it focuses on security and privacy as well.&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span class=&quot;ctaText&quot;&gt;Suggested read&lt;/span&gt;  &lt;span class=&quot;postTitle&quot;&gt;Mandrake Linux Creator Launches a New Open Source Mobile OS&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Also, similar to Slack, it supports integration with multiple apps and services.&lt;/p&gt;
&lt;p&gt;Sounds promising? I think so.&lt;/p&gt;
&lt;h3&gt;Pricing: Enterprise Edition vs Team Edition&lt;/h3&gt;
&lt;p&gt;If you want them (Mattermost) to host it (or want priority support), you should opt for the Enterprise edition. However, if you want to host it without spending a penny, you can download the &lt;a rel=&quot;noreferrer noopener nofollow&quot; aria-label=&quot; (opens in a new tab)&quot; href=&quot;https://mattermost.com/download/&quot; target=&quot;_blank&quot; class=&quot;external&quot;&gt;Team edition&lt;/a&gt; and install it on your Linux-based cloud/VPS server.&lt;/p&gt;
&lt;p&gt;Of course, we are not here to review it in-depth. However, I do want to mention that the enterprise edition is quite affordable.&lt;/p&gt;
&lt;div class=&quot;wp-block-image&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://i1.wp.com/itsfoss.com/wp-content/uploads/2019/06/mattermost-enterprise-plan.jpg?fit=800%2C325&amp;amp;ssl=1&quot; alt=&quot;Mattermost Enterprise Plan&quot; class=&quot;wp-image-59976&quot; srcset=&quot;https://i1.wp.com/itsfoss.com/wp-content/uploads/2019/06/mattermost-enterprise-plan.jpg?w=800&amp;amp;ssl=1 800w, https://i1.wp.com/itsfoss.com/wp-content/uploads/2019/06/mattermost-enterprise-plan.jpg?resize=300%2C122&amp;amp;ssl=1 300w, https://i1.wp.com/itsfoss.com/wp-content/uploads/2019/06/mattermost-enterprise-plan.jpg?resize=768%2C312&amp;amp;ssl=1 768w&quot; sizes=&quot;(max-width: 800px) 100vw, 800px&quot;/&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Wrapping Up&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Mattermost is definitely impressive. And, with a whopping $50M funding, it may become the next big thing in the open source community for users who were on the lookout for a secure and open source messaging platform with efficient team collaboration support.&lt;/p&gt;
&lt;p&gt;What do you think about this news? Is it something exciting for you? Were you already aware of Mattermost as a slack alternative?&lt;/p&gt;
&lt;p&gt;Let us know your thoughts in the comments below.&lt;/p&gt;
&lt;br/&gt;</description>
<pubDate>Mon, 08 Jul 2019 12:09:23 +0000</pubDate>
<dc:creator>wheresvic1</dc:creator>
<og:url>https://itsfoss.com/mattermost-funding/</og:url>
<og:type>article</og:type>
<og:title>Open Source Slack Alternative Mattermost Gets $50M Funding</og:title>
<og:description>In a bid to challenge the domination of Slack, open source team communication software Mattermost gets $50 million funding from the prestigious Y Combinator.</og:description>
<og:image>https://itsfoss.com/wp-content/uploads/2019/06/mattermost-wallpaper.png</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://itsfoss.com/mattermost-funding/</dc:identifier>
</item>
<item>
<title>RSA is a fragile cryptosystem</title>
<link>https://blog.trailofbits.com/2019/07/08/fuck-rsa/</link>
<guid isPermaLink="true" >https://blog.trailofbits.com/2019/07/08/fuck-rsa/</guid>
<description>&lt;p&gt;Here at Trail of Bits we review a lot of code. From major open source projects to exciting new proprietary software, we’ve seen it all. But one common denominator in all of these systems is that for some inexplicable reason people still seem to think RSA is a good cryptosystem to use. Let me save you a bit of time and money and just say outright—if you come to us with a codebase that uses RSA, you will be paying for the hour of time required for us to explain why you should stop using it.&lt;/p&gt;
&lt;p&gt;RSA is an intrinsically fragile cryptosystem containing countless foot-guns which the average software engineer cannot be expected to avoid. Weak parameters can be difficult, if not impossible, to check, and its poor performance compels developers to take risky shortcuts. Even worse, padding oracle attacks remain rampant 20 years after they were discovered. While it may be theoretically possible to implement RSA correctly, decades of devastating attacks have proven that such a feat may be unachievable in practice.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;embed-youtube&quot;&gt;&lt;iframe class=&quot;youtube-player&quot; type=&quot;text/html&quot; width=&quot;690&quot; height=&quot;389&quot; src=&quot;https://www.youtube.com/embed/lElHzac8DDI?version=3&amp;amp;rel=1&amp;amp;fs=1&amp;amp;autohide=2&amp;amp;showsearch=0&amp;amp;showinfo=1&amp;amp;iv_load_policy=1&amp;amp;wmode=transparent&quot; allowfullscreen=&quot;true&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;What is RSA again?&lt;/h2&gt;
&lt;p&gt;RSA is a public-key cryptosystem that has two primary use cases. The first is public key encryption, which lets a user, Alice, publish a public key that allows anyone to send her an encrypted message. The second use case is digital signatures, which allow Alice to “sign” a message so that anyone can verify the message hasn’t been tampered with. The convenient thing about RSA is that the signing algorithm is basically just the encryption algorithm run in reverse. Therefore for the rest of this post we’ll often refer to both as just RSA.&lt;/p&gt;
&lt;p&gt;To set up RSA, Alice needs to choose two primes &lt;code&gt;p&lt;/code&gt; and &lt;code&gt;q&lt;/code&gt; that will generate the group of integers modulo &lt;code&gt;N = pq&lt;/code&gt;. She then needs to choose a public exponent &lt;code&gt;e&lt;/code&gt; and private exponent &lt;code&gt;d&lt;/code&gt; such that &lt;code&gt;ed = 1 mod (p-1)(q-1)&lt;/code&gt;. Basically, &lt;code&gt;e&lt;/code&gt; and &lt;code&gt;d&lt;/code&gt; need to be inverses of each other.&lt;/p&gt;
&lt;p&gt;Once these parameters have been chosen, another user, Bob, can send Alice a message &lt;code&gt;M&lt;/code&gt; by computing &lt;code&gt;C = M&lt;sup&gt;e&lt;/sup&gt; (mod N)&lt;/code&gt;. Alice can then decrypt the ciphertext by computing &lt;code&gt;M = C&lt;sup&gt;d&lt;/sup&gt; (mod N)&lt;/code&gt;. Conversely, if Alice wants to sign a message &lt;code&gt;M&lt;/code&gt;, she computes &lt;code&gt;S = M&lt;sup&gt;d&lt;/sup&gt; (mod N)&lt;/code&gt;, which any user can verify was signed by her by checking &lt;code&gt;M = S&lt;sup&gt;e&lt;/sup&gt; (mod N)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;That’s the basic idea. We’ll get to padding—essential for both use cases—in a bit, but first let’s see what can go wrong during parameter selection.&lt;/p&gt;
&lt;h2&gt;Setting yourself up for failure&lt;/h2&gt;
&lt;p&gt;RSA requires developers to choose quite a few parameters during setup. Unfortunately, seemingly innocent parameter-selection methods degrade security in subtle ways. Let’s walk through each parameter choice and see what nasty surprises await those who choose poorly.&lt;/p&gt;
&lt;h3&gt;Prime Selection&lt;/h3&gt;
&lt;p&gt;RSA’s security is based off the fact that, given a (large) number N that’s the product of two primes p and q, factoring N is hard for people who don’t know p and q. Developers are responsible for choosing the primes that make up the RSA modulus. This process is extremely slow compared to key generation for other cryptographic protocols, where simply choosing some random bytes is sufficient. Therefore, instead of generating a truly random prime number, developers often attempt to generate one of a specific form. This almost always ends badly.&lt;/p&gt;
&lt;p&gt;There are many ways to choose primes in such a way that factoring N is easy. For example, p and q must be &lt;em&gt;globally&lt;/em&gt; unique. If p or q ever gets reused in another RSA moduli, then both can be easily factored using the GCD algorithm. Bad random number generators make this scenario somewhat common, and &lt;a href=&quot;https://factorable.net/weakkeys12.conference.pdf&quot;&gt;research has shown&lt;/a&gt; that roughly 1% of TLS traffic in 2012 was susceptible to such an attack. Moreover, p and q must be chosen independently. If p and q share approximately half of their upper bits, then N can be factored using &lt;a href=&quot;https://en.wikipedia.org/wiki/Fermat%27s_factorization_method&quot;&gt;Fermat’s method&lt;/a&gt;. In fact, even the choice of primality testing algorithm can have &lt;a href=&quot;https://eprint.iacr.org/2018/749&quot;&gt;security implications&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Perhaps the most widely-publicized prime selection attack is the &lt;a href=&quot;https://en.wikipedia.org/wiki/ROCA_vulnerability&quot;&gt;ROCA&lt;/a&gt; vulnerability in RSALib which affected many smartcards, trusted platform modules, and even Yubikeys. Here, key generation only used primes of a specific form to speed up computation time. Primes generated this way are trivial to detect using clever number theory tricks. Once a weak system has been recognized, the special algebraic properties of the primes allow an attacker to use &lt;a href=&quot;https://en.wikipedia.org/wiki/Coppersmith%27s_attack&quot;&gt;Coppersmith’s method&lt;/a&gt; to factor N. More concretely, that means if the person sitting next to me at work uses a smartcard granting them access to private documents, and they leave it on their desk during lunch, I can clone the smartcard and give myself access to all their sensitive files.&lt;/p&gt;
&lt;p&gt;It’s important to recognize that in none of these cases is it intuitively obvious that generating primes in such a way leads to complete system failure. Really subtle number-theoretic properties of primes have a substantial effect on the security of RSA. To expect the average developer to navigate this mathematical minefield severely undermines RSA’s safety.&lt;/p&gt;
&lt;h3&gt;Private Exponent&lt;/h3&gt;
&lt;p&gt;Since using a large private key negatively affects decryption and signing time, developers have an incentive to choose a small private exponent d, especially in low-power settings like smartcards. However, it is possible for an attacker to &lt;a href=&quot;https://en.wikipedia.org/wiki/Wiener%27s_attack&quot;&gt;recover the private key&lt;/a&gt; when d is less than the 4th root of N. Instead, developers are encouraged to choose a large d such that &lt;a href=&quot;https://en.wikipedia.org/wiki/RSA_(cryptosystem)#Using_the_Chinese_remainder_algorithm&quot;&gt;Chinese remainder theorem techniques&lt;/a&gt; can be used to speed up decryption. However, this approach’s complexity increases the probability of subtle implementation errors, which &lt;a href=&quot;https://www.cs.tau.ac.il/~tromer/courses/infosec11/Boneh%20DeMillo%20Lipton%201997%20---%20On%20the%20importance%20of%20eliminating%20errors%20in%20cryptographic%20protocols.pdf&quot;&gt;can lead to key recovery&lt;/a&gt;. In fact, one of our interns last summer &lt;a href=&quot;https://blog.trailofbits.com/2018/08/14/fault-analysis-on-rsa-signing/&quot;&gt;modelled this class of vulnerabilities&lt;/a&gt; with our symbolic execution tool &lt;a href=&quot;https://github.com/trailofbits/manticore&quot;&gt;Manticore&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://trailofbits.files.wordpress.com/2019/07/image13-1.png&quot;&gt;&lt;img data-attachment-id=&quot;98920&quot; data-permalink=&quot;https://blog.trailofbits.com/2019/07/08/fuck-rsa/image13-4/&quot; data-orig-file=&quot;https://trailofbits.files.wordpress.com/2019/07/image13-1.png&quot; data-orig-size=&quot;992,962&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;image13&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://trailofbits.files.wordpress.com/2019/07/image13-1.png?w=300&quot; data-large-file=&quot;https://trailofbits.files.wordpress.com/2019/07/image13-1.png?w=690&quot; class=&quot;aligncenter wp-image-98920&quot; src=&quot;https://trailofbits.files.wordpress.com/2019/07/image13-1.png?w=500&amp;amp;h=485&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;485&quot; srcset=&quot;https://trailofbits.files.wordpress.com/2019/07/image13-1.png?w=500&amp;amp;h=485 500w, https://trailofbits.files.wordpress.com/2019/07/image13-1.png?w=150&amp;amp;h=145 150w, https://trailofbits.files.wordpress.com/2019/07/image13-1.png?w=300&amp;amp;h=291 300w, https://trailofbits.files.wordpress.com/2019/07/image13-1.png?w=768&amp;amp;h=745 768w, https://trailofbits.files.wordpress.com/2019/07/image13-1.png 992w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;People might call me out here and point out that normally when setting up RSA you first generate a modulus, use a fixed public exponent, and then solve for the private exponent. This prevents low private exponent attacks because if you always use one of the recommended public exponents (discussed in the next section) then you’ll never wind up with a small private exponent. Unfortunately this assumes developers actually do that. In circumstances where people implement their own RSA, all bets are off in terms of using standard RSA setup procedures, and developers will frequently do strange things like choose the private exponent first and then solve for the public exponent.&lt;/p&gt;
&lt;h3&gt;Public Exponent&lt;/h3&gt;
&lt;p&gt;Just as in the private exponent case, implementers want to use small public exponents to save on encryption and verification time. It is common to use Fermat primes in this context, in particular e = 3, 17, and 65537. Despite cryptographers recommending the use of 65537, developers often choose e = 3 which introduces many vulnerabilities into the RSA cryptosystem.&lt;/p&gt;
&lt;div data-shortcode=&quot;caption&quot; id=&quot;attachment_98921&quot; class=&quot;wp-caption aligncenter&quot;&gt;&lt;a href=&quot;https://trailofbits.files.wordpress.com/2019/07/image12.png&quot;&gt;&lt;img aria-describedby=&quot;caption-attachment-98921&quot; data-attachment-id=&quot;98921&quot; data-permalink=&quot;https://blog.trailofbits.com/2019/07/08/fuck-rsa/image12-3/&quot; data-orig-file=&quot;https://trailofbits.files.wordpress.com/2019/07/image12.png&quot; data-orig-size=&quot;1660,1384&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;image12&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://trailofbits.files.wordpress.com/2019/07/image12.png?w=300&quot; data-large-file=&quot;https://trailofbits.files.wordpress.com/2019/07/image12.png?w=690&quot; class=&quot;wp-image-98921 size-large&quot; src=&quot;https://trailofbits.files.wordpress.com/2019/07/image12.png?w=690&amp;amp;h=575&quot; alt=&quot;&quot; width=&quot;690&quot; height=&quot;575&quot; srcset=&quot;https://trailofbits.files.wordpress.com/2019/07/image12.png?w=690&amp;amp;h=575 690w, https://trailofbits.files.wordpress.com/2019/07/image12.png?w=1380&amp;amp;h=1150 1380w, https://trailofbits.files.wordpress.com/2019/07/image12.png?w=150&amp;amp;h=125 150w, https://trailofbits.files.wordpress.com/2019/07/image12.png?w=300&amp;amp;h=250 300w, https://trailofbits.files.wordpress.com/2019/07/image12.png?w=768&amp;amp;h=640 768w, https://trailofbits.files.wordpress.com/2019/07/image12.png?w=1024&amp;amp;h=854 1024w&quot; sizes=&quot;(max-width: 690px) 100vw, 690px&quot;/&gt;&lt;/a&gt;
&lt;p id=&quot;caption-attachment-98921&quot; class=&quot;wp-caption-text&quot;&gt;Developers have even used e = 1, which doesn’t actually encrypt the plaintext&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;When e = 3, or a similarly small number, many things can go wrong. Low public exponents often combine with other common mistakes to either allow an attacker to decrypt specific ciphertexts or factor N. For instance, &lt;a href=&quot;https://en.wikipedia.org/wiki/Coppersmith%27s_attack#Franklin-Reiter_related-message_attack&quot;&gt;the Franklin-Reiter attack&lt;/a&gt; allows a malicious party to decrypt two messages that are related by a known, fixed distance. In other words, suppose Alice only sends “chocolate” or “vanilla” to Bob. These messages will be related by a known value and allow an attacker Eve to determine which are “chocolate” and which are “vanilla.” Some low public exponent attacks even lead to key recovery. If the public exponent is small (not just 3), an attacker who knows several bits of the secret key can recover the remaining bits and break the cryptosystem. While many of these e = 3 attacks on RSA encryption are mitigated by padding, developers who implement their own RSA fail to use padding at an alarmingly high rate.&lt;/p&gt;
&lt;p&gt;RSA signatures are equally brittle in the presence of low public exponents. In 2006, Bleichenbacher found an &lt;a href=&quot;https://www.imperialviolet.org/2014/09/26/pkcs1.html&quot;&gt;attack&lt;/a&gt; which allows attackers to forge arbitrary signatures in many RSA implementations, including the ones used by &lt;a href=&quot;https://www.imperialviolet.org/2014/09/26/pkcs1.html&quot;&gt;Firefox and Chrome&lt;/a&gt;. This means that any TLS certificate from a vulnerable implementation could be forged. This attack takes advantage of the fact that many libraries use a small public exponent and omit a simple padding verification check when processing RSA signatures. Bleichenbacher’s signature forgery attack is so simple that it is a &lt;a href=&quot;https://cryptopals.com/sets/6/challenges/42&quot;&gt;commonly used exercise&lt;/a&gt; in cryptography courses.&lt;/p&gt;
&lt;h3&gt;Parameter Selection is Hard&lt;/h3&gt;
&lt;p&gt;The common denominator in all of these parameter attacks is that the domain of possible parameter choices is much larger than that of secure parameter choices. Developers are expected to navigate this fraught selection process on their own, since all but the public exponent must be generated privately. There are no easy ways to check that the parameters are secure; instead developers need a depth of mathematical knowledge that shouldn’t be expected of non-cryptographers. While using RSA with padding may save you in the presence of bad parameters, many people still choose to use broken padding or no padding at all.&lt;/p&gt;
&lt;h2&gt;Padding oracle attacks everywhere&lt;/h2&gt;
&lt;p&gt;As we mentioned above, just using RSA out of the box doesn’t quite work. For example, the RSA scheme laid out in the introduction would produce identical ciphertexts if the same plaintext were ever encrypted more than once. This is a problem, because it would allow an adversary to infer the contents of the message from context without being able to decrypt it. This is why we need to pad messages with some random bytes. Unfortunately, the most widely used padding scheme, PKCS #1 v1.5, is often vulnerable to something called a padding oracle attack.&lt;/p&gt;
&lt;p&gt;Padding oracles are pretty complex, but the high-level idea is that adding padding to a message requires the recipient to perform an additional check–whether the message is properly padded. When the check fails, the server throws an &lt;em&gt;invalid padding&lt;/em&gt; error. That single piece of information is enough to slowly decrypt a chosen message. The process is tedious and involves manipulating the target ciphertext millions of times to isolate the changes which result in valid padding. But that one error message is all you need to eventually decrypt a chosen ciphertext. These vulnerabilities are particularly bad because attackers can use them to recover pre-master secrets for TLS sessions. For more details on the attack, check out &lt;a href=&quot;https://crypto.stackexchange.com/questions/12688/can-you-explain-bleichenbachers-cca-attack-on-pkcs1-v1-5&quot;&gt;this excellent explainer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://crypto.stackexchange.com/questions/12688/can-you-explain-bleichenbachers-cca-attack-on-pkcs1-v1-5&quot;&gt;original attack&lt;/a&gt; on PKCS #1 v1.5 was discovered way back in 1998 by Daniel Bleichenbacher. Despite being over 20 years old, this attack continues to &lt;a href=&quot;https://www.ei.ruhr-uni-bochum.de/media/nds/veroeffentlichungen/2018/08/13/sec18-felsch.pdf&quot;&gt;plague&lt;/a&gt; &lt;a href=&quot;https://www.usenix.org/system/files/conference/usenixsecurity14/sec14-paper-meyer.pdf&quot;&gt;many&lt;/a&gt; &lt;a href=&quot;https://robotattack.org/&quot;&gt;real-world&lt;/a&gt; &lt;a href=&quot;https://blog.cryptographyengineering.com/2016/03/01/attack-of-week-drown/&quot;&gt;systems&lt;/a&gt; &lt;a href=&quot;https://eprint.iacr.org/2018/1173.pdf&quot;&gt;today&lt;/a&gt;. Modern versions of this attack often involves a padding oracle slightly more complex than the one originally described by Bleichenbacher, such as server response time or performing some sort of protocol downgrade in TLS. One particularly shocking example was &lt;a href=&quot;https://robotattack.org/&quot;&gt;the ROBOT attack&lt;/a&gt;, which was so bad that a team of researchers were able to sign messages with Facebook’s and PayPal’s secret keys. Some might argue that this isn’t actually RSA’s fault – the underlying math is fine, people just messed up an important standard several decades ago. The thing is, we’ve had a standardized padding scheme with a rigorous security proof, OAEP, since 1998. But almost no one uses it. Even when they do, OAEP is notoriously difficult to implement and often is vulnerable to &lt;a href=&quot;https://research.kudelskisecurity.com/2018/04/05/breaking-rsa-oaep-with-mangers-attack/&quot;&gt;Manger’s attack&lt;/a&gt;, which is &lt;em&gt;another&lt;/em&gt; padding oracle attack that can be used to recover plaintext.&lt;/p&gt;
&lt;p&gt;The fundamental issue here is that padding is &lt;em&gt;necessary&lt;/em&gt; when using RSA, and this added complexity opens the cryptosystem up to a large attack surface. The fact that a single bit of information, whether the message was padded correctly, can have such a large impact on security makes developing secure libraries almost impossible. TLS 1.3 no longer supports RSA so we can expect to see fewer of these attacks going forward, but as long as developers continue to use RSA in their own applications there will be padding oracle attacks.&lt;/p&gt;
&lt;h2&gt;So what should you use instead?&lt;/h2&gt;
&lt;p&gt;People often prefer using RSA because they believe it’s conceptually simpler than the somewhat confusing DSA protocol or moon math elliptic curve cryptography (ECC). But while it may be easier to understand RSA intuitively, it lacks the misuse resistance of these other more complex systems.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://trailofbits.files.wordpress.com/2019/07/image14.jpg&quot;&gt;&lt;img data-attachment-id=&quot;98922&quot; data-permalink=&quot;https://blog.trailofbits.com/2019/07/08/fuck-rsa/image14-3/&quot; data-orig-file=&quot;https://trailofbits.files.wordpress.com/2019/07/image14.jpg&quot; data-orig-size=&quot;523,500&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;image14&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://trailofbits.files.wordpress.com/2019/07/image14.jpg?w=300&quot; data-large-file=&quot;https://trailofbits.files.wordpress.com/2019/07/image14.jpg?w=523&quot; class=&quot;aligncenter wp-image-98922 size-full&quot; src=&quot;https://trailofbits.files.wordpress.com/2019/07/image14.jpg?w=690&quot; alt=&quot;&quot; srcset=&quot;https://trailofbits.files.wordpress.com/2019/07/image14.jpg 523w, https://trailofbits.files.wordpress.com/2019/07/image14.jpg?w=150 150w, https://trailofbits.files.wordpress.com/2019/07/image14.jpg?w=300 300w&quot; sizes=&quot;(max-width: 523px) 100vw, 523px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;First of all, a common misconception is that ECC is super dangerous because choosing a bad curve can totally sink you. While it is true that curve choice has a major impact on security, one benefit of using ECC is that parameter selection can be done publicly. Cryptographers make all the difficult parameter choices so that developers just need to generate random bytes of data to use as keys and nonces. Developers could theoretically build an ECC implementation with terrible parameters and fail to check for things like &lt;a href=&quot;https://blog.trailofbits.com/2018/08/01/bluetooth-invalid-curve-points/&quot;&gt;invalid curve points&lt;/a&gt;, but they tend to not do this. A likely explanation is that the math behind ECC is so complicated that very few people feel confident enough to actually implement it. In other words, it intimidates people into using libraries built by cryptographers who know what they’re doing. RSA on the other hand is so simple that it can be (poorly) implemented in an hour.&lt;/p&gt;
&lt;p&gt;Second, any Diffie-Hellman based key agreement or signature scheme (including elliptic curve variants) does not require padding and therefore completely sidesteps padding oracle attacks. This is a major win considering RSA has had a very poor track record avoiding this class of vulnerabilities.&lt;/p&gt;
&lt;p&gt;Trail of Bits recommends using &lt;a href=&quot;https://en.wikipedia.org/wiki/Curve25519&quot;&gt;Curve25519&lt;/a&gt; for key exchange and digital signatures. Encryption needs to be done using a protocol called &lt;a href=&quot;https://en.wikipedia.org/wiki/Integrated_Encryption_Scheme&quot;&gt;ECIES&lt;/a&gt; which combines an elliptic curve key exchange with a symmetric encryption algorithm. Curve25519 was designed to entirely prevent some of the things that can go wrong with other curves, and is very performant. Even better, it is implemented in &lt;a href=&quot;https://libsodium.gitbook.io/doc/&quot;&gt;libsodium&lt;/a&gt;, which has &lt;a href=&quot;https://libsodium.gitbook.io/doc/public-key_cryptography/sealed_boxes&quot;&gt;easy-to-read documentation&lt;/a&gt; and is &lt;a href=&quot;https://libsodium.gitbook.io/doc/libsodium_users&quot;&gt;available for most languages&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Seriously, stop using RSA&lt;/h2&gt;
&lt;p&gt;RSA was an important milestone in the development of secure communications, but the last two decades of cryptographic research have rendered it obsolete. Elliptic curve algorithms for both key exchange and digital signatures were standardized back in 2005 and have since been integrated into intuitive and misuse-resistant libraries like libsodium. The fact that RSA is still in widespread use today indicates both a failure on the part of cryptographers for not adequately articulating the risks inherent in RSA, and also on the part of developers for overestimating their ability to deploy it successfully.&lt;/p&gt;
&lt;p&gt;The security community needs to start thinking about this as a herd-immunity problem—while some of us might be able to navigate the extraordinarily dangerous process of setting up or implementing RSA, the exceptions signal to developers that it is in some way still advisable to use RSA. Despite the many caveats and warnings on StackExchange and Github READMEs, very few people believe that they are the ones who will mess up RSA, and so they proceed with reckless abandon. Ultimately, users will pay for this. This is why we all need to agree that it is flat out unacceptable to use RSA in 2019. No exceptions.&lt;/p&gt;
&lt;div id=&quot;jp-post-flair&quot; class=&quot;sharedaddy sd-like-enabled sd-sharing-enabled&quot;&gt;
&lt;div class=&quot;sharedaddy sd-sharing-enabled&quot;&gt;
&lt;div class=&quot;robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing&quot;&gt;
&lt;h3 class=&quot;sd-title&quot;&gt;Share this:&lt;/h3&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sharedaddy sd-block sd-like jetpack-likes-widget-wrapper jetpack-likes-widget-unloaded&quot; id=&quot;like-post-wrapper-3681601-98915-5d23e71163860&quot; data-src=&quot;//widgets.wp.com/likes/index.html?ver=20190321#blog_id=3681601&amp;amp;post_id=98915&amp;amp;origin=trailofbits.wordpress.com&amp;amp;obj_id=3681601-98915-5d23e71163860&amp;amp;domain=blog.trailofbits.com&quot; data-name=&quot;like-post-frame-3681601-98915-5d23e71163860&quot;&gt;
&lt;h3 class=&quot;sd-title&quot;&gt;Like this:&lt;/h3&gt;
&lt;div class=&quot;likes-widget-placeholder post-likes-widget-placeholder&quot;&gt;&lt;span class=&quot;button&quot;&gt;&lt;span&gt;Like&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;loading&quot;&gt;Loading...&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
</description>
<pubDate>Mon, 08 Jul 2019 11:26:30 +0000</pubDate>
<dc:creator>ingve</dc:creator>
<og:type>article</og:type>
<og:title>Fuck RSA</og:title>
<og:url>https://blog.trailofbits.com/2019/07/08/fuck-rsa/</og:url>
<og:description>Here at Trail of Bits we review a lot of code. From major open source projects to exciting new proprietary software, we’ve seen it all. But one common denominator in all of these systems is that fo…</og:description>
<og:image>https://trailofbits.files.wordpress.com/2019/07/image13-1.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.trailofbits.com/2019/07/08/fuck-rsa/</dc:identifier>
</item>
</channel>
</rss>