<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Free Hotel Wifi with Python and Selenium</title>
<link>https://gkbrk.com/2018/12/free-hotel-wifi-with-python-and-selenium/</link>
<guid isPermaLink="true" >https://gkbrk.com/2018/12/free-hotel-wifi-with-python-and-selenium/</guid>
<description>&lt;p&gt;Recently I took my annual leave and decided to visit my friend during the holidays. I stayed at a hotel for a few days but to my surprise, the hotel charged money to use their wifi. In &lt;em&gt;$DEITY&lt;/em&gt;‘s year &lt;em&gt;2000 + 18&lt;/em&gt;, can you imagine?&lt;/p&gt;
&lt;p&gt;But they are not so cruel. You see, these generous people let you use the wifi for 20 minutes. &lt;em&gt;20 whole minutes.&lt;/em&gt; That’s almost half a Minecraft video.&lt;/p&gt;
&lt;p&gt;If they let each device use the internet for a limited amount of time, they must have a way of identifying each device. And a router tells devices apart is by their MAC addresses. Fortunately for us, we can change our MAC address easily.&lt;/p&gt;
&lt;h2&gt;Enter macchanger&lt;/h2&gt;
&lt;p&gt;There is a really useful command-line tool called &lt;a href=&quot;https://wiki.archlinux.org/index.php/MAC_address_spoofing#macchanger&quot;&gt;&lt;em&gt;macchanger&lt;/em&gt;&lt;/a&gt;. It lets you manually change, randomize and restore the MAC address of your devices. The idea here is randomizing our MAC regularly &lt;em&gt;(every 20 minutes)&lt;/em&gt; in order to use the free wifi over and over indefinitely.&lt;/p&gt;
&lt;p&gt;There are 3 small commands you need to run. This is needed because macchanger can’t work while your network interface is connected to the router.&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;highlight shell&quot;&gt;
&lt;code&gt;&lt;span&gt;# Bring network interface down&lt;/span&gt;
ifconfig wlp3s0 down

&lt;span&gt;# Get random MAC address&lt;/span&gt;
macchanger &lt;span&gt;-r&lt;/span&gt; wlp3s0

&lt;span&gt;# Bring the interface back up&lt;/span&gt;
ifconfig wlp3s0 up
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the commands above, &lt;em&gt;wlp3s0&lt;/em&gt; is the name of my network interface. You can find yours by running &lt;code&gt;ip a&lt;/code&gt;. If you run those commands, you can fire up your browser and you will be greeted with the page asking you to pay or try it for 20 minutes. After your time is up, you can run the commands again and keep doing it.&lt;/p&gt;
&lt;p&gt;But this is manual labor, and doing it 3 times an hour is too repetitive. Hmm. What’s a good tool to automate repetitive stuff?&lt;/p&gt;
&lt;h2&gt;Enter Selenium&lt;/h2&gt;
&lt;p&gt;First, lets get those commands out of the way. Using the &lt;em&gt;os&lt;/em&gt; module, we can run macchanger from our script.&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;highlight python&quot;&gt;
&lt;code&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;os&lt;/span&gt;

&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;'wlp3s0'&lt;/span&gt;

&lt;span&gt;os&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;system&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;f&lt;/span&gt;&lt;span&gt;'sudo ifconfig {interface} down'&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
&lt;span&gt;os&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;system&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;f&lt;/span&gt;&lt;span&gt;'sudo macchanger -r {interface}'&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
&lt;span&gt;os&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;system&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;f&lt;/span&gt;&lt;span&gt;'sudo ifconfig {interface} up'&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After these commands our computer should automatically connect to the network as a completely different device. Let’s fire up a browser and try to use the internet.&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;highlight python&quot;&gt;
&lt;code&gt;&lt;span&gt;d&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;webdriver&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Chrome&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;
&lt;span&gt;d&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'http://example.com'&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
&lt;span&gt;d&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'https://www.wifiportal.example/cp/sponsored.php'&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;em&gt;sponsored.php&lt;/em&gt; URL is where I ended up after pressing the &lt;strong&gt;Free Wifi&lt;/strong&gt; link, so the script should open the registration form for us. Let’s fill the form.&lt;/p&gt;
&lt;p&gt;In my case, all it asked for was an email address and a full name. If there are more fields, you can fill them in a similar fashion.&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;highlight python&quot;&gt;
&lt;code&gt;&lt;span&gt;num&lt;/span&gt;   &lt;span&gt;=&lt;/span&gt; &lt;span&gt;random&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;randint&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;99999&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
&lt;span&gt;email&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;f&lt;/span&gt;&lt;span&gt;'test{num}@gmail.com'&lt;/span&gt;

&lt;span&gt;d&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;find_element_by_name&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'email'&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;send_keys&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;email&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
&lt;span&gt;d&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;find_element_by_name&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'name'&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;send_keys&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'John Doe&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This should fill the form and press enter to submit it. Afterwards, the portal asked me if I wanted to subscribe to their emails or something like that. Of course, we click &lt;em&gt;Reject&lt;/em&gt; without even reading it and close the browser.&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight python&quot;&gt;
&lt;code&gt;&lt;span&gt;d&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;find_elements_by_class_name&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'reject'&lt;/span&gt;&lt;span&gt;)[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;click&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;
&lt;span&gt;d&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;close&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After this, you should have an internet connection. You can either run the script whenever you notice your connection is gone, or put it on a cron job / while loop.&lt;/p&gt;
&lt;hr/&gt;

&lt;hr/&gt;&lt;h3&gt;Comments &lt;span&gt;BETA&lt;/span&gt;&lt;/h3&gt;

&lt;br/&gt;</description>
<pubDate>Thu, 13 Dec 2018 09:24:29 +0000</pubDate>
<dc:creator>janvdberg</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://gkbrk.com/2018/12/free-hotel-wifi-with-python-and-selenium/</dc:identifier>
</item>
<item>
<title>50 CVEs in 50 Days: Fuzzing Adobe Reader</title>
<link>https://research.checkpoint.com/50-adobe-cves-in-50-days/</link>
<guid isPermaLink="true" >https://research.checkpoint.com/50-adobe-cves-in-50-days/</guid>
<description>&lt;p&gt;&lt;strong&gt;A Fuzzing Drill Hits the Motherlode&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Research By:&lt;/strong&gt; Yoav Alon, Netanel Ben-Simon&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The year 2017 was an inflection point in the vulnerability landscape. The number of new vulnerabilities reported that year was around 14,000, which is over twice the number from the year before (see table below). The probable reason for this is the increased popularity of automatic vulnerability finding tools, also known as “fuzzers”.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://research.checkpoint.com/wp-content/uploads/2018/12/fig1-1.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-20154&quot; src=&quot;https://research.checkpoint.com/wp-content/uploads/2018/12/fig1-1.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The mere existence of fuzzers is not breaking news; they’ve been around for over two decades. The news is that fuzzers have grown up. They’ve become more capable, more accessible, and overall more mature. Still, using fuzzers has somewhat of a reputation as a “dark art”, a lot of researchers don’t bother with fuzzers because they are perceived as a hassle to use.&lt;/p&gt;
&lt;p&gt;Given all the above, we found it natural to ask: Yes, more researchers are using fuzzers to find more vulnerabilities — but are *all* the researchers using fuzzers to find *all* the vulnerabilities? How many low-hanging fruits are still out there, just waiting for the first person to press the big shiny button that says ‘FUZZ’?&lt;/p&gt;
&lt;p&gt;To find out, we constructed the most vanilla experiment we could think of. We took one of the most common Windows fuzzing frameworks, WinAFL, and aimed it at Adobe Reader, which is one of the most popular software products in the world. We set a time-frame of 50 days for the entire endeavor – reverse-engineering the code, looking for potential vulnerable libraries, writing harnesses and, finally, running the fuzzer itself.&lt;/p&gt;
&lt;p&gt;The results left us flabbergasted. In those 50 days, we were able to find over 50 new vulnerabilities in Adobe Reader. On average, that’s 1 vulnerability per day — not quite the usual pace for this kind of research.&lt;/p&gt;
&lt;p&gt;In this paper, we lay out the entire story of this research. We share a novel methodology we used to increase the scope of our search, improvements that we were able to make to WinAFL, and, finally, the insights we gained along the way.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is WinAFL?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://lcamtuf.coredump.cx/afl/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;AFL&lt;/a&gt; is a coverage guided genetic fuzzer, which has a rock solid implementation and clever heuristics that have proven to be very (&lt;a href=&quot;http://lcamtuf.coredump.cx/afl/#bugs&quot;&gt;!&lt;/a&gt;) successful in finding real bugs in real software.&lt;/p&gt;
&lt;p&gt;WinAFL is a fork of AFL for Windows, created and maintained by Ivan Fratric (Google Project Zero). The Windows version uses a different style of instrumentation which enables us to target closed source binaries.&lt;/p&gt;
&lt;p&gt;We recommend reading the AFL &lt;a href=&quot;http://lcamtuf.coredump.cx/afl/technical_details.txt&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;technical paper&lt;/a&gt;, which goes into detail on how AFL works. It also points out the tool’s shortcomings and helps you debug when things go wrong.&lt;/p&gt;
&lt;p&gt;We found WinAFL to be extremely effective in finding file format bugs, especially in compressed binary formats (images / videos / archives).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Attacking Acrobat Reader DC&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The easiest place to start is the main executable, AcroRd32.exe. This is a (relatively) thin wrapper around AcroRd32.dll, which is approximately 30MB in size. AcroRd32.dll has a lot of code, some of which contains parsers for PDF objects, but a lot of it is GUI code (not the place you usually want to look for bugs).&lt;/p&gt;
&lt;p&gt;We know that WinAFL is better at binary formats, so we decided to focus our efforts and attack a specific parser. The challenge is to locate a parser and write a harness for it. We’ll explain what exactly is a harness is a bit later on.&lt;/p&gt;
&lt;p&gt;We want a binary format parser with minimal dependencies that we can load without also loading the entire Reader process.&lt;/p&gt;
&lt;p&gt;We explored the DLLs in Acrobat’s folder and found that JP2KLib.dll fits all categories:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://research.checkpoint.com/wp-content/uploads/2018/12/fig2-1.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-20155&quot; src=&quot;https://research.checkpoint.com/wp-content/uploads/2018/12/fig2-1.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JP2KLib.dll is a parser for the JPEG2000 format, which is a complex binary format (753 KB), and has exported functions which are pretty descriptive.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://research.checkpoint.com/wp-content/uploads/2018/12/fig3.jpg&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-20156&quot; src=&quot;https://research.checkpoint.com/wp-content/uploads/2018/12/fig3.jpg&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The research was conducted on the following versions:&lt;br/&gt;Acrobat Reader DC 2018.011.20038 and earlier&lt;br/&gt;JP2KLib.dll version 1.2.2.39492&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What Is a Target Function?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A &lt;a href=&quot;https://github.com/googleprojectzero/winafl#how-to-select-a-target-function&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;target function&lt;/a&gt; is a term that WinAFL uses to describe the function that is used as the entry point to the fuzzing process. The function is called in a loop for &lt;em&gt;fuzz_iterations&lt;/em&gt; times, each time mutating the input file on disk. The function must:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Open the input file, read the file, parse the input and &lt;u&gt;close&lt;/u&gt; the file.&lt;/li&gt;
&lt;li&gt;Return normally – without throwing a &lt;em&gt;C++&lt;/em&gt; exception or calling &lt;em&gt;TerminateProcess&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Finding such a function in nature is pretty uncommon. When targeting a complex software, we usually need to write a harness.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What Is a Harness?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A harness is a small program that triggers the functionality we want to fuzz. The harness includes a function which will be used as our target function. Here’s an example for a &lt;a href=&quot;https://github.com/googleprojectzero/winafl/blob/master/gdiplus.cpp&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;minimal harness&lt;/a&gt; for gdiplus from the WinAFL repository:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://research.checkpoint.com/wp-content/uploads/2018/12/fig4-1.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-20157&quot; src=&quot;https://research.checkpoint.com/wp-content/uploads/2018/12/fig4-1.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The first argument to &lt;em&gt;main&lt;/em&gt; is a path. Within the function, we call the &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/api/gdiplusheaders/nf-gdiplusheaders-image-image%28inconstwchar_inbool%29&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;em&gt;Image::Image&lt;/em&gt;&lt;/a&gt; parser, which is the API we wanted to fuzz. Notice that in error cases, we don’t terminate the process and at the end we free all resources.&lt;/p&gt;
&lt;p&gt;This process is relatively easy for documented API. We can copy a sample code or write a simple program using the documentation. But where’s the fun in that?&lt;/p&gt;
&lt;p&gt;We chose to target Adobe Reader, which is a closed sourced binary. The process of writing a harness for this type of target looks something like this:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Find the functionality we want to fuzz.&lt;/li&gt;
&lt;li&gt;Reverse-engineer it a little bit.&lt;/li&gt;
&lt;li&gt;Write a program that calls the reversed API.&lt;/li&gt;
&lt;li&gt;Repeat until we have a fully functional harness.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;In the following section, we describe in detail how we reverse-engineered JP2KLib, and wrote a working harness for it. We also share a few tips. Readers who are only interested in our fuzzing methodology can skip to the next section.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Writing a Harness for JP2KLib.dll&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Before starting to reverse-engineer JP2KLib.dll, we checked whether the library is open source or has public symbols. This is a big time saver and is more common than you might think. But in our case, we weren’t so lucky.&lt;/p&gt;
&lt;p&gt;As we wanted our harness to be as similar as possible to how Adobe Reader uses JP2KLib, the first thing we had to do is to find a PDF file that triggers the behavior we wanted to fuzz. This enables us to easily locate the relevant parts of the program.&lt;/p&gt;
&lt;p&gt;In our case, we have a large corpus of PDFs for testing our products. We &lt;em&gt;grep&lt;/em&gt;ped the string “/JPXDecode“, which is the PDF filter for JPEG2000, and used the smallest example that came up. We could also have googled for a sample file or used Acrobat Pro / Phantom PDF to generate a test case.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Pro Tip 1:&lt;/strong&gt; The reader has a sandbox, which is sometimes annoying for debugging/triaging, but this can be disabled –&lt;/em&gt; &lt;a href=&quot;https://forums.adobe.com/thread/2110951&quot;&gt;&lt;em&gt;https://forums.adobe.com/thread/2110951&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Pro Tip 2:&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;We turned on&lt;/em&gt; &lt;a href=&quot;https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/gflags-and-pageheap&quot;&gt;&lt;em&gt;PageHeap&lt;/em&gt;&lt;/a&gt; &lt;em&gt;to assist in the reverse-engineering efforts, as it helps in tracking allocation place and size.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We extracted the jp2 file from our sample, so we could use it for our harness without the PDF wrapper. This will be used as our testing input for the harness.&lt;/p&gt;
&lt;p&gt;Now that we had a minimal working example, we placed a breakpoint on the load event of JP2KLib.dll using &lt;em&gt;“sxe ld jp2klib”&lt;/em&gt;. When the breakpoint hit, we placed a breakpoint command on all exported functions of JP2KLib. The breakpoint command logs the call stack, the first few arguments, and the return value:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;bm /a jp2klib!* “.echo callstack; k L5; .echo parameters:;  dc esp L8;  .echo return value: ; pt; ”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We loaded the sample PDF and got the following output:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://research.checkpoint.com/wp-content/uploads/2018/12/fig5-1.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-20158&quot; src=&quot;https://research.checkpoint.com/wp-content/uploads/2018/12/fig5-1.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JP2KLibInitEx is the first function called after loading JP2KLib. We noticed that JP2KLibInitEx takes only one argument. Let’s examine it:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://research.checkpoint.com/wp-content/uploads/2018/12/fig6-1.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-20159&quot; src=&quot;https://research.checkpoint.com/wp-content/uploads/2018/12/fig6-1.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We can see that it’s a struct of size 0x20 and it contains pointers to functions in AcroRd32.dll. When we encounter an unknown function, we don’t rush into reversing it as we don’t know if it’s going to be used by the target code. Instead, we point each address to a unique empty function we call “nopX” (where X is a number).&lt;/p&gt;
&lt;p&gt;We now have enough information to start writing our harness skeleton:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Get input file from command line arguments.&lt;/li&gt;
&lt;li&gt;Load JP2KLib.dll.&lt;/li&gt;
&lt;li&gt;Get a pointer to JP2KLibInitEx and call it with a struct of 8 nop functions.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;a href=&quot;https://research.checkpoint.com/wp-content/uploads/2018/12/fig7-1.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-20160&quot; src=&quot;https://research.checkpoint.com/wp-content/uploads/2018/12/fig7-1.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We use LOAD_FUNC as a convenience macro. We also have a NOP(x) macro for creating nop functions.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://research.checkpoint.com/wp-content/uploads/2018/12/screent.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-20179&quot; src=&quot;https://research.checkpoint.com/wp-content/uploads/2018/12/screent.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We compile, run it with sample.jp2 – and it works!&lt;/p&gt;
&lt;p&gt;Let’s continue (“g”). We then move to the next function JP2KGetMemObjEx which doesn’t take any arguments, so we call it and save the return value.&lt;/p&gt;
&lt;p&gt;The next function JP2KDecOptCreate also doesn’t take any arguments, so we call it and save the return value. However, we notice that JP2KDecOptCreate internally calls nop4 and nop7, which means we need to implement them.&lt;/p&gt;
&lt;p&gt;Our next move is to understand what “nop4” does. We placed a breakpoint on the original function pointer to “nop4” &lt;em&gt;AcroRd32!CTJPEGDecoderRelease+0xa992&lt;/em&gt; and continued execution:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://research.checkpoint.com/wp-content/uploads/2018/12/fig8.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-20161&quot; src=&quot;https://research.checkpoint.com/wp-content/uploads/2018/12/fig8.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Which took us to:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://research.checkpoint.com/wp-content/uploads/2018/12/fig9-1.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-20162&quot; src=&quot;https://research.checkpoint.com/wp-content/uploads/2018/12/fig9-1.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And after few steps:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://research.checkpoint.com/wp-content/uploads/2018/12/fig10-1.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-20163&quot; src=&quot;https://research.checkpoint.com/wp-content/uploads/2018/12/fig10-1.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So it turns out that nop4 is a thin wrapper around malloc. We implemented it in our harness and replaced it with “nop4”. We repeated this procedure again for nop7 and found out it was &lt;em&gt;memset&lt;/em&gt;!. We looked around and saw that nop5 and nop6 and were &lt;em&gt;free&lt;/em&gt; and &lt;em&gt;memcpy&lt;/em&gt; respectively.&lt;/p&gt;
&lt;p&gt;The next function, JP2KDecOptInitToDefaults, was called with one argument. This was the return value from JP2KDecOptCreate, so we passed the value to it.&lt;/p&gt;
&lt;p&gt;The next function, JP2KImageCreate, takes no arguments, so we called it and saved the return value.&lt;/p&gt;
&lt;p&gt;Currently, our harness looks something like this:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://research.checkpoint.com/wp-content/uploads/2018/12/fig11-1.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-20164&quot; src=&quot;https://research.checkpoint.com/wp-content/uploads/2018/12/fig11-1.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The next function is JP2KImageInitDecoderEx, which takes &lt;strong&gt;&lt;u&gt;5!&lt;/u&gt;&lt;/strong&gt; arguments.&lt;/p&gt;
&lt;p&gt;We matched 3 out of 5 parameters to return values from: JP2KImageCreate, JP2KDecOptCreate and JP2KGetMemObjEx&lt;/p&gt;
&lt;p&gt;We noticed that the 3rd parameter points to a vtable. We did the same trick as before – created a struct with the same size that points to “nop” functions.&lt;br/&gt;The 2nd parameter points to another struct, only this time it doesn’t seem to contain function pointers. We decided to send the const value 0xbaaddaab.&lt;/p&gt;
&lt;p&gt;At this point the code looks like this:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://research.checkpoint.com/wp-content/uploads/2018/12/fig12-1.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-20165&quot; src=&quot;https://research.checkpoint.com/wp-content/uploads/2018/12/fig12-1.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We ran our harness and quickly arrived at nop10. We set a breakpoint in Adobe Reader on the corresponding function and got to the following call stack:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://research.checkpoint.com/wp-content/uploads/2018/12/fig13-1.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-20166&quot; src=&quot;https://research.checkpoint.com/wp-content/uploads/2018/12/fig13-1.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Looking at JP2KCodeStm::IsSeekable in IDA:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://research.checkpoint.com/wp-content/uploads/2018/12/fig14-1.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-20167&quot; src=&quot;https://research.checkpoint.com/wp-content/uploads/2018/12/fig14-1.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Looking at WinDbg, we can see that JP2KCodeStm at offset 0x24 contains our vtable and offset 0x18 contains 0xbaaddaab. We can see that JP2KCodeStm::IsSeekable calls a function from our vtable passing 0xbaaddaab as the first parameter, so it’s basically a thin wrapper around our vtable function #7.&lt;/p&gt;
&lt;p&gt;In general, every parser is a bit different but usually they consume an input stream which could be in a familiar file interface (like FILE / ifstream). More often than not, it’s some sort of a custom type that abstracts the underlying input stream (network / file / memory). So when we saw how JP2KCodeStm was used, we knew what we were looking at.&lt;/p&gt;
&lt;p&gt;Back to our case, 0xbaaddaab is the stream object and the vtable functions operate on the stream object.&lt;/p&gt;
&lt;p&gt;We moved to IDA and looked at all the other JP2KCodeStm::XXX functions.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://research.checkpoint.com/wp-content/uploads/2018/12/fig15-1.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-20168&quot; src=&quot;https://research.checkpoint.com/wp-content/uploads/2018/12/fig15-1.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;They were all very similar, so we went ahead and created our own file object, and implemented all the necessary methods. The resulting code looks like:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://research.checkpoint.com/wp-content/uploads/2018/12/fig16-1.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-20169&quot; src=&quot;https://research.checkpoint.com/wp-content/uploads/2018/12/fig16-1.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We made sure we checked the return value from JP2KImageInitDecoderEx and bailed in case of error. In our case, JP2KImageInitDecoderEx returns 0 on success. It took us a few tries to implement the stream functions correctly, but we finally got our desired return value.&lt;/p&gt;
&lt;p&gt;The next function, JP2KImageDataCreate, takes no arguments and its return value is passed to the following function JP2KImageGetMaxRes. We called them both and moved on.&lt;/p&gt;
&lt;p&gt;We got to the JP2KImageDecodeTileInterleaved function which takes &lt;strong&gt;7!&lt;/strong&gt; Arguments, of which 3 are return values from JP2KImageCreate, JP2KImageGetMaxRes, and JP2KImageDataCreate.&lt;/p&gt;
&lt;p&gt;The 2nd and 6th parameters were found to be null after xrefing and looking inside AcroRd32 in IDA.&lt;/p&gt;
&lt;p&gt;We remained with the 4th and 5th arguments. We concluded that they depend on the color depth (8/16), so we decided to fuzz with constant depth.&lt;/p&gt;
&lt;p&gt;Finally we got:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://research.checkpoint.com/wp-content/uploads/2018/12/fig17-1.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-20170&quot; src=&quot;https://research.checkpoint.com/wp-content/uploads/2018/12/fig17-1.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;At last, we called the functions JP2KImageDataDestroy, JP2KImageDestroy, and JP2KDecOptDestroy to release the objects we created and avoid memory leaks. This is critical for WinAFL when &lt;em&gt;fuzz_iterations&lt;/em&gt; are high.&lt;/p&gt;
&lt;p&gt;Done! We have a working harness!&lt;/p&gt;
&lt;p&gt;In one final tweak, we separated the initialization code – loading JP2KLib and finding the functions from the parsing code. This improves performance, as we don’t have to pay for initialization in every fuzz iteration. We called the new function “fuzzme”. We will also export “fuzzme” (you can export functions in an exe file) as it’s easier than finding the relevant offset in the binary.&lt;/p&gt;
&lt;p&gt;Anecdote: When testing our harness in WinAFL, we found out that WinAFL generates files with duplicate magic. After we dug a bit, we found that Adobe used different SEEK constants than the ones defined in libc, causing us to mix SEEK_SET and SEEK_CUR.&lt;/p&gt;
&lt;p&gt;We decided to not publicly share the harness source for obvious reasons, but researchers from the security industry who wish to get the code for learning purposes are welcome to contact Yoav Alon at &lt;a href=&quot;mailto:yoaval@checkpoint.com&quot;&gt;yoaval@checkpoint.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fuzzing Methodology&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Basic tests for the harness
&lt;ol&gt;&lt;li&gt;Stability&lt;/li&gt;
&lt;li&gt;Paths&lt;/li&gt;
&lt;li&gt;Timeouts&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Fuzzing Setup&lt;/li&gt;
&lt;li&gt;Initial corpus&lt;/li&gt;
&lt;li&gt;Initial line coverage&lt;/li&gt;
&lt;li&gt;Fuzzing loop
&lt;ol&gt;&lt;li&gt;Fuzz&lt;/li&gt;
&lt;li&gt;Check coverage / crashes&lt;/li&gt;
&lt;li&gt;cmin &amp;amp; repeat&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Triage&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;Basic Tests for the Harness&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Before starting a big fuzzing session, we do a few sanity tests to make sure we’re not just heating servers. The first thing we check is that the fuzzer is reaching new paths with our harness, meaning that the &lt;em&gt;total path&lt;/em&gt; count is steadily rising.&lt;/p&gt;
&lt;p&gt;If the path count is zero or almost zero, there are a few pitfalls we can check for:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The target function was inlined by the compiler which causes WinAFL to miss the entry to the target function and results in WinAFL termination with program abort.&lt;/li&gt;
&lt;li&gt;This could also happen if the number of arguments (-nargs) is not correct or that the calling convention is not the default.&lt;/li&gt;
&lt;li&gt;Timeouts – Sometimes the timeout is too low and causes the fuzzer to kill the harness too quickly. The solution is to raise the timeout.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;We let the fuzzer run for a few minutes and then checked the stability of the fuzzer. If the stability is low (under 80%), we try to debug the issue. The stability of the harness is important, as it affects the accuracy and performance of the fuzzer.&lt;/p&gt;
&lt;p&gt;Common pitfalls:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Check for random elements. For example, some hash table implementations use random to prevent collision, but this is really bad for coverage accuracy. We just patch the random seed to a constant value.&lt;/li&gt;
&lt;li&gt;Sometimes the software has a cache for certain global objects. We usually just do a nop run before calling the &lt;em&gt;target function&lt;/em&gt; to reduce this effect&lt;/li&gt;
&lt;li&gt;For 32-bit targets on a Windows 10 64-bit machine, the stack alignment is not always ~8 bytes. This means that sometimes &lt;em&gt;memcpy&lt;/em&gt; and other AVX optimized code will act differently and that does affect coverage. One solution is to add code in the harness to align the &lt;a href=&quot;https://github.com/googleprojectzero/winafl/issues/111#issuecomment-393149203&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;stack&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;If all the above fail, we use DynamoRIO to do instruction tracing for the harness and diff the output.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fuzzing Setup&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Our setup consists of a VM with 8-16 cores and 32 GB of RAM, running Windows 10 x64.&lt;/p&gt;
&lt;p&gt;We fuzz on a RAM disk drive using &lt;a href=&quot;https://sourceforge.net/projects/imdisk-toolkit/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ImDisk toolkit&lt;/a&gt;&lt;u&gt;.&lt;/u&gt; We discovered that with fast targets, writing test cases to disk is a performance bottleneck.&lt;/p&gt;
&lt;p&gt;We disable Windows Defender because it hurts performance and because some of the test cases generated by WinAFL were discovered by Windows Defender as a known exploit (“Exploit:Win32/CVE-2010-2889”).&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://research.checkpoint.com/wp-content/uploads/2018/12/fig18-1.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-20171&quot; src=&quot;https://research.checkpoint.com/wp-content/uploads/2018/12/fig18-1.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We disable the Windows Indexing Service for performance.&lt;/p&gt;
&lt;p&gt;We disable Windows Update because it interferes with the fuzzing efforts (restarts the machine and replaces fuzzed DLLs).&lt;/p&gt;
&lt;p&gt;We enable page heap for the harness process because it has proven to find bugs that we wouldn’t detect otherwise.&lt;/p&gt;
&lt;p&gt;We use the &lt;a href=&quot;http://lcamtuf.coredump.cx/afl/technical_details.txt&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;edge&lt;/a&gt; as the coverage type instead of the default basic block as it proved better in finding bugs, despite the fact that it’s slower than basic block mode.&lt;/p&gt;
&lt;p&gt;This is an example command for running our adobe_jp2k harness:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;afl-fuzz.exe -i R:\jp2k\in -o R:\jp2k\out -t 20000+ -D c:\DynamoRIO-Windows-7.0.0-RC1\bin32 -S Slav02 — -fuzz_iterations 10000 -coverage_module JP2KLib.dll -target_module adobe_jp2k.exe -target_method fuzzme -nargs 1 -covtype edge — adobe_jp2k.exe @@&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Initial Corpus&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Once we have a working harness, we create an initial corpus for it, usually from:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Online corpuses (&lt;a href=&quot;http://lcamtuf.coredump.cx/afl/demo/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;afl corpus&lt;/a&gt;, &lt;a href=&quot;https://github.com/uclouvain/openjpeg-data&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;openjpeg-data&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Test suites from open source projects&lt;/li&gt;
&lt;li&gt;Crawling google / duckduckgo&lt;/li&gt;
&lt;li&gt;Corpuses from our older fuzzing projects&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Corpus Minimization&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Using a big corpus of files that produce the same coverage hurts the performance of the fuzzer. AFL handles this by minimizing the corpus using afl-cmin. WinAFL has a port for the tool called winafl-cmin.py.&lt;/p&gt;
&lt;p&gt;We take all the files that we gathered and run them through winafl-cmin.py, which results in a minimal corpus.&lt;/p&gt;
&lt;p&gt;We run winafl-cmin at least two times to see if we get the same set of files. If we got two different sets, it usually means that there’s non-determinism in our harness. This is something we try to investigate, using afl-showmap or other tools.&lt;/p&gt;
&lt;p&gt;Once we finished minimizing successfully, we save the set of files as our initial corpus.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Initial Line Coverage&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Now that we have a minimal corpus, we want to take a look at our line coverage. Line coverage means which assembly instructions we actually executed. To get line coverage, we use DynamoRIO: &lt;em&gt;“[dynamoriodir]\bin32\drrun.exe -t drcov — harness.exe testcase”&lt;/em&gt;  for each test case. Next, we load the results to IDA using &lt;a href=&quot;https://github.com/gaasedelen/lighthouse&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Lighthouse&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://research.checkpoint.com/wp-content/uploads/2018/12/fig19-1.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-20172&quot; src=&quot;https://research.checkpoint.com/wp-content/uploads/2018/12/fig19-1.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We note the initial line coverage, as it helps us to evaluate how effective the fuzzing session was.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fuzzing Cycle&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The next step is pretty straight forward:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Run the fuzzers.&lt;/li&gt;
&lt;li&gt;Check coverage and crashes.&lt;/li&gt;
&lt;li&gt;Investigate coverage, cmin and repeat.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Running the fuzzers, does not require anything special. Just run the fuzzers in the configuration we listed above.&lt;/p&gt;
&lt;p&gt;We have a bot with the following features:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Status of all fuzzers (using winafl-whatsapp.py).&lt;/li&gt;
&lt;li&gt;Graph of paths over time for each fuzzer (using winafl-plot.py).&lt;/li&gt;
&lt;li&gt;Crash triage and generate report (we will talk about this in the next section).&lt;/li&gt;
&lt;li&gt;Restart dead fuzzers.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;We can’t stress enough how important it is to automate those tasks. Otherwise, fuzzing is tedious and error-prone.&lt;/p&gt;
&lt;p&gt;We check the status of the fuzzers every couple of hours and the paths over time. If we see that the graph plateaus, we try to investigate the coverage.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://research.checkpoint.com/wp-content/uploads/2018/12/fig20.jpg&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-20173&quot; src=&quot;https://research.checkpoint.com/wp-content/uploads/2018/12/fig20.jpg&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We copy all the queues of all the fuzzers and run them through cmin and look at the results in IDA. We look for functions that are relatively large and have very small coverage. We try to understand what functionality is related to this function and proactively find samples that will trigger this functionality. In JP2K, this wasn’t very helpful but in other targets, especially text formats, this phase is a big win!&lt;/p&gt;
&lt;p&gt;This stage is very important; in one case, we added a single sample and after a few hours of fuzzing it contributed 1.5% line coverage and we discovered 3 new security bugs.&lt;/p&gt;
&lt;p&gt;We then repeated the cycle until we ran out of time or we didn’t see any coverage improvement. This usually means we must either change the target or try to improve the harness.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Triage&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Once we have a set of test cases that causes a crash, we manually examined the crashes and each crashing input. We quickly changed strategy, as we had a lot of duplicates. We started using &lt;a href=&quot;https://github.com/SkyLined/BugId&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BugId&lt;/a&gt; to automatically find duplicates and minimize the set to only unique crashes. We used our bot for that.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://research.checkpoint.com/wp-content/uploads/2018/12/fig21-1.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-20174&quot; src=&quot;https://research.checkpoint.com/wp-content/uploads/2018/12/fig21-1.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What We Found&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This strategy eventually allowed us to find 53 critical bugs in Adobe Reader and Adobe Pro.&lt;/p&gt;
&lt;p&gt;We repeated this process for different parsers such as images, stream decoders and xslt module, which resulted in the following list of CVEs:&lt;/p&gt;
&lt;p&gtlt;/p&gt;

&lt;p&gt;One of the bugs we found in jp2k was actually reported to Adobe just a short while before we found it, as it seems it was already discovered &lt;a href=&quot;https://www.welivesecurity.com/2018/05/15/tale-two-zero-days/&quot;&gt;being exploited in the wild&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Of course, Adobe Reader is sandboxed, and Reader Protected Mode greatly increases the complexity of turning an exploitable crash inside the sandbox into system compromise, which usually requires another PE exploit, as was used in the mentioned in-the-wild exploit.&lt;/p&gt;
&lt;p&gt;We love WinAFL and hope to see it used more.&lt;/p&gt;
&lt;p&gt;While using WinAFL, we encountered a number of bugs / missing features. We added support for those new features and upstreamed the patches. These include adding support for App verifier in Windows 10, CPU affinity for workers, fixed a few bugs and added some GUI features.&lt;/p&gt;

&lt;p&gt;You can view the commits here:&lt;/p&gt;
&lt;p&gt;Netanel’s commits – &lt;a href=&quot;https://github.com/googleprojectzero/winafl/commits?author=netanel01&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/googleprojectzero/winafl/commits?author=netanel01&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Yoava’s commits – &lt;a href=&quot;https://github.com/googleprojectzero/winafl/commits?author=yoava333&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/googleprojectzero/winafl/commits?author=yoava333&lt;/a&gt;&lt;/p&gt;




</description>
<pubDate>Thu, 13 Dec 2018 03:48:05 +0000</pubDate>
<dc:creator>myinnerbanjo</dc:creator>
<og:type>article</og:type>
<og:title>50 CVEs in 50 Days: Fuzzing Adobe Reader - Check Point Research</og:title>
<og:description>A Fuzzing Drill Hits the Motherlode Research By: Yoav Alon, Netanel Ben-Simon Introduction The year 2017 was an inflection point in the vulnerability landscape. The number of new vulnerabilities reported that year was around 14,000, which is over twice the number from the year before (see table below). The probable reason for this is the... Click to Read More</og:description>
<og:url>https://research.checkpoint.com/50-adobe-cves-in-50-days/</og:url>
<og:image>//research.checkpoint.com/wp-content/uploads/2018/12/AdobeVulnerabilities_1021x580.jpg</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://research.checkpoint.com/50-adobe-cves-in-50-days/</dc:identifier>
</item>
<item>
<title>Why should I have written ZeroMQ in C, not C++ (2012)</title>
<link>http://250bpm.com/blog:4</link>
<guid isPermaLink="true" >http://250bpm.com/blog:4</guid>
<description>&lt;div class=&quot;list-pages-box&quot; readability=&quot;4.5652173913043&quot;&gt;
&lt;div class=&quot;list-pages-item&quot; readability=&quot;4.7826086956522&quot;&gt;
&lt;p&gt;&lt;strong&gt;Previous:&lt;/strong&gt; &lt;a href=&quot;http://250bpm.com/blog:3&quot;&gt;Silicon Valley, Hollywood and Iceland as the New Superpower&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;list-pages-box&quot; readability=&quot;3.9574468085106&quot;&gt;
&lt;div class=&quot;list-pages-item&quot; readability=&quot;4.0851063829787&quot;&gt;
&lt;p&gt;&lt;strong&gt;Next:&lt;/strong&gt; &lt;a href=&quot;http://250bpm.com/blog:5&quot;&gt;Distributed Computing: The Survey Pattern&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Just to be clear from the very beginning: This is not going to be a Torvalds-ish rant against C++ from the point of view of die-hard C programmer.&lt;/p&gt;
&lt;p&gt;I've been using C++ whole my professional career and it's still my language of choice when doing most projects.&lt;/p&gt;
&lt;p&gt;Naturally, when I started ZeroMQ project back in 2007, I've opted for C++. The main reasons were:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Library of data structures and algorithms (STL) is part of the language. With C I would have to either depend on a 3rd party library or had to write basic algorithms of my own in 1970's manner.&lt;/li&gt;
&lt;li&gt;C++ enforces some basic consistency in the coding style. For example, having the implicit 'this' parameter doesn't allow to pass pointer to the object being worked on using several disparate mechanisms as it often happens to be the case with C projects. Same applies to explicit marking of member variables as private and many other features of the language.&lt;/li&gt;
&lt;li&gt;This point is actually a subset of the previous one, but it's worth of explicit mention: Implementing virtual functions in C is pretty complex and tends to be slightly different for each class which makes understanding and managing the code a pain.&lt;/li&gt;
&lt;li&gt;And finally: Everybody loves destructors being invoked automatically at the end of the block.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Now, almost 5 years later, I would like to publicly admit that using C++ was a poor choice and explain why I believe it is so.&lt;/p&gt;
&lt;p&gt;First, it's important to take into account that ZeroMQ was intended to be a piece of infrastructure with continuous uptime. It should never fail and never exhibit undefined behaviour. Thus, the error handling was of utmost importance. It had to be very explicit and unforgiving.&lt;/p&gt;
&lt;p&gt;C++ exceptions just didn't fill the bill. They are great for guaranteeing that program doesn't fail — just wrap the main function in try/catch block and you can handle all the errors in a single place.&lt;/p&gt;
&lt;p&gt;However, what's great for avoiding straightforward failures becomes a nightmare when your goal is to guarantee that no undefined behaviour happens. The decoupling between raising of the exception and handling it, that makes avoiding failures so easy in C++, makes it virtually impossible to guarantee that the program never runs info undefined behaviour.&lt;/p&gt;
&lt;p&gt;With C, the raising of the error and handling it are tightly couped and reside at the same place in the source code. This makes it easy to understand what happens if error happens:&lt;/p&gt;
&lt;div class=&quot;code&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;code&gt;int rc = fx ();
if (rc != 0)
    handle_error ();&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With C++ you just throw the error. What happens then is not at all obvious:&lt;/p&gt;
&lt;div class=&quot;code&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;code&gt;int rc = fx ();
if (rc != 0)
    throw std::exception ();&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The problem with that is that you have no idea of who and where is going to handle the exception. As long as the handling code is in the same function the error handling often remains more of less sane although not very readable:&lt;/p&gt;
&lt;div class=&quot;code&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;code&gt;try {
    ...
    int rc = fx ();
    if (rc != 0)
        throw std::exception (&quot;Error!&quot;);
    ...
catch (std::exception &amp;amp;e) {
    handle_exception ();
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, consider what happens when there are two different errors thrown in the same function:&lt;/p&gt;
&lt;div class=&quot;code&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;code&gt;class exception1 {};
class exception2 {};

try {
    ...
    if (condition1)
        throw my_exception1 ();
    ...
    if (condition2)
        throw my_exception2 ();
    ...
}
catch (my_exception1 &amp;amp;e) {
    handle_exception1 ();
}
catch (my_exception2 &amp;amp;e) {
    handle_exception2 ();
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Compare that to its C equivalent:&lt;/p&gt;
&lt;div class=&quot;code&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;code&gt;...
if (condition1)
   handle_exception1 ();
...
if (condition2)
   handle_exception2 ();
...&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It's far more readable and — as a bonus — compiler is likely to produce more efficient code.&lt;/p&gt;
&lt;p&gt;However, it doesn't end there. Consider the case when the exception is not handled in the function that raises it. In such case the handling of the error can happen anywhere, depending on where the function is called from.&lt;/p&gt;
&lt;p&gt;While the possibility to handle the exceptions differently in different contexts may seem appealing at the first sight, it quickly turns into a nightmare.&lt;/p&gt;
&lt;p&gt;As you fix individual bugs you'll find out that you are replicating almost the same error handling code in many places. Adding a new function call to the code introduces that possibility that different types of exceptions will bubble up to the calling function where there are not yet properly handled. Which means new bugs.&lt;/p&gt;
&lt;p&gt;If you don't give up on the &quot;no undefined behaviour&quot; principle, you'll have to introduce new exception types all the time to distinguish between different failure modes. However, adding a new exception type means that it can bubble up to different places. Pieces of code have to be added to all those places, otherwise you end up with undefined behaviour.&lt;/p&gt;
&lt;p&gt;At this point you may be screaming: That's what exception specifications are for!&lt;/p&gt;
&lt;p&gt;Well, the problem is that exception specifications are just a tool to handle the problem of exponential growth of the exception handling code in a more systematic manner, but it doesn't solve the problem itself. It can even be said it makes it worse as now you have to write code for the new exception types, new exception handling code *and* new exception specifications.&lt;/p&gt;
&lt;p&gt;Taking the problems described above into account I've decided to use C++ minus exceptions. That's exactly how ZeroMQ and Crossroads I/O looks like today.&lt;/p&gt;
&lt;p&gt;Unfortunately, the problems don't end up here…&lt;/p&gt;
&lt;p&gt;Consider what happens when initialisation of an object can fail. Constructors have no return values, so failure can be reported only by throwing an exception. However, I've decided not to use exceptions. So we have to go for something like this:&lt;/p&gt;
&lt;div class=&quot;code&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;code&gt;class foo
{
public:
    foo ();
    int init ();
    ...
};&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When you create an instance of the class, constructor is called (which cannot fail) and then you explicitly call init function (which can fail).&lt;/p&gt;
&lt;p&gt;This is more complex that what you would do with C:&lt;/p&gt;
&lt;div class=&quot;code&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;code&gt;struct foo
{
    ...
};

int foo_init (struct foo *self);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, the really bad thing about the C++ version of the code is what happens when developers put some actual code into the constructor instead of systematically keeping the constructors empty.&lt;/p&gt;
&lt;p&gt;If that's the case a special new object state comes into being. It's the 'semi-initialised' state when object has been constructed but init function haven't been called yet. The object (and specifically the destructor) should be modified in such a way as to decently handle the new state. Which in the end means adding new condition to every method.&lt;/p&gt;
&lt;p&gt;Now you say: But that's just a consequence of your artificial restriction of not using exceptions! If exception is thrown in a constructor, C++ runtime cleans the object as appropriate and there is no 'semi-initalised' state whatsoever!&lt;/p&gt;
&lt;p&gt;Fair enough. However, it's beside the point. If you start using exceptions you have to handle all the exception-related complexity as described in the beginning. And that is not a reasonable option for an infrastructure component with the need to be very robust in the face of failures.&lt;/p&gt;
&lt;p&gt;Moreover, even if initialisation wasn't a problem, termination definitely is. You can't really throw exceptions in the destructor. Not because of some self-imposed artificial restrictions but because if the destructor is invoked in the process or unwinding the stack and it happens to throw an exception, it crashes the entire process.&lt;/p&gt;
&lt;p&gt;Thus, if termination can fail, you need two separate functions to handle it:&lt;/p&gt;
&lt;div class=&quot;code&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;code&gt;class foo
{
public:
    ...
    int term ();
    ~foo ();
};&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we are back to the problem we've had with the initialisation: There's a new 'semi-terminated' state that we have to handle somehow, add new conditions to individual member functions etc.&lt;/p&gt;
&lt;div class=&quot;code&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
&lt;code&gt;class foo
{
public:
    foo () : state (semi_initialised)
    {
         ...
    }

    int init ()
    {
        if (state != semi_initialised)
            handle_state_error ();
        ...
        state = intitialised;
    }

    int term ()
    {
         if (state != initialised)
             handle_state_error ();
         ...
         state = semi_terminated;
    }

    ~foo ()
    {
         if (state != semi_terminated)
             handle_state_error ();
         ...
    }

    int bar ()
    {
         if (state != initialised)
             handle_state_error ();
         ...
    }
};&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Compare the above to the C implementation. There are only two states. Not initialised object/memory where all the bets are off and the structure can contain random data. And there is initialised state, where the object is fully functional. Thus, there's no need to incorporate a state machine into the object:&lt;/p&gt;
&lt;div class=&quot;code&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;code&gt;struct foo
{
    ...
};

int foo_init ()
{
    ...
}

int foo_term ()
{
    ...
}

int foo_bar ()
{
    ...
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now consider what happens when you add inheritance to the mix. C++ allows to initialise base classes as a part of derived class' constructor. Throwing an exception will destruct the parts of the object that were already successfully initialised:&lt;/p&gt;
&lt;div class=&quot;code&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;code&gt;class foo : public bar
{
public:
    foo () : bar () {}
    ...
};&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, once you introduce separate init functions, the number of states starts to grow. In addition to uninitialised, semi-initialised, initialised and semi-terminated states you encounter combinations of the states. As an example you can imagine a fully initialised base class with semi-initialised derived class.&lt;/p&gt;
&lt;p&gt;With objects like these it's almost impossible to guarantee predictable behaviour. There's a lot of different combinations of semi-initialised and semi-terminated parts of the object and given that failures that cause them are often very rare the most of the related code probably goes into the production untested.&lt;/p&gt;
&lt;p&gt;To summarise the above, I believe that requirement for fully-defined behaviour breaks the object-oriented programming model. The reasoning is not specific to C++. It applies to any object-oriented language with constructors and destructors.&lt;/p&gt;
&lt;p&gt;Consequently is seems that object-oriented languages are better suited for the environments where the need for rapid development beats the requirement for no undefined behaviour.&lt;/p&gt;
&lt;p&gt;There's no silver bullet here. The systems programming will have to live on with C.&lt;/p&gt;
&lt;p&gt;By the way, I've started experimenting with translating ZeroMQ into C lately. The code looks great!&lt;/p&gt;
&lt;p&gt;EDIT: The endeavour evolved into a new project called &lt;em&gt;nanomsg&lt;/em&gt; in the meantime. Check it &lt;a href=&quot;http://nanomsg.org&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Read &lt;a href=&quot;http://250bpm.com/blog:8&quot;&gt;part II of the article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Martin Sústrik, May 10th, 2012&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;list-pages-box&quot; readability=&quot;4.5652173913043&quot;&gt;
&lt;div class=&quot;list-pages-item&quot; readability=&quot;4.7826086956522&quot;&gt;
&lt;p&gt;&lt;strong&gt;Previous:&lt;/strong&gt; &lt;a href=&quot;http://250bpm.com/blog:3&quot;&gt;Silicon Valley, Hollywood and Iceland as the New Superpower&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;list-pages-box&quot; readability=&quot;3.9574468085106&quot;&gt;
&lt;div class=&quot;list-pages-item&quot; readability=&quot;4.0851063829787&quot;&gt;
&lt;p&gt;&lt;strong&gt;Next:&lt;/strong&gt; &lt;a href=&quot;http://250bpm.com/blog:5&quot;&gt;Distributed Computing: The Survey Pattern&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


</description>
<pubDate>Wed, 12 Dec 2018 23:40:06 +0000</pubDate>
<dc:creator>sytelus</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://250bpm.com/blog:4</dc:identifier>
</item>
<item>
<title>Puzzle-solving &amp;#039;doesn&amp;#039;t slow down mental decline in older people&amp;#039;</title>
<link>https://www.nhs.uk/news/older-people/puzzle-solving-doesnt-slow-down-mental-decline-older-people/</link>
<guid isPermaLink="true" >https://www.nhs.uk/news/older-people/puzzle-solving-doesnt-slow-down-mental-decline-older-people/</guid>
<description>&lt;p&gt;&quot;Crosswords do not prevent dementia but can make your brain sharper to start off with,&quot; reports the Mail Online.&lt;/p&gt;
&lt;p&gt;The question of whether doing puzzles and problem-solving activities can stave off mental decline in older age is often debated.&lt;/p&gt;
&lt;p&gt;This study of 498 people born in Scotland in 1936 found people who enjoyed intellectually stimulating tasks had better mental functioning at around age 64 than less intellectually active people, but that their rate of mental decline from that point was the same.&lt;/p&gt;
&lt;p&gt;Unlike most previous research, this study was able to take account of the effects of childhood intelligence, as everyone in the study had taken an intelligence test aged 11.&lt;/p&gt;
&lt;p&gt;It's still possible that those who enjoy crosswords and puzzles tend to naturally have a higher mental ability to start with. Or it could be that doing these activities over many years from an early age can help sharpen minds.&lt;/p&gt;
&lt;p&gt;So a possible message to take from this research is: if you enjoy regularly exercising your brain in this way, don't leave it until retirement age before you start. It could be that the earlier you do this, the better.&lt;/p&gt;
&lt;p&gt;There's no way to definitely prevent dementia. But we do know that what's good for the heart and circulation is also usually good for the brain.&lt;/p&gt;
&lt;p&gt;Physical exercise, a healthy diet, not smoking and not drinking too much alcohol may all help reduce the risk.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.nhs.uk/conditions/alzheimers-disease/prevention/&quot;&gt;Find out more about ways to reduce your risk of dementia&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;where-did-the-story-come-from&quot;&gt;Where did the story come from?&lt;/h2&gt;
&lt;p&gt;The researchers who carried out the study were from the University of Aberdeen, NHS Grampian and the National University of Ireland.&lt;/p&gt;
&lt;p&gt;The study was funded by the Henry Smith Charity, the Biology and Biotechnology Science Research Council, the Medical Research Council, the Wellcome Trust, the Scottish Government Health Department and Alzheimer's Research UK.&lt;/p&gt;
&lt;p&gt;It was published in the &lt;a href=&quot;https://www.nhs.uk/news/health-news-glossary#peer-review&quot;&gt;peer-reviewed&lt;/a&gt; British Medical Journal on an open access basis, so it's &lt;a href=&quot;https://www.bmj.com/content/bmj/363/bmj.k4925.full.pdf&quot;&gt;free to read online&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Most of the UK media carried reasonably balanced accounts of the study, although the Metro's assertion that &quot;People who do puzzles to try and stave off age-related mental decline may be wasting their time&quot; is a little harsh.&lt;/p&gt;
&lt;p&gt;And the stories all focused on crossword or Sudoko puzzles, but the study actually asked whether people enjoyed solving complicated problems, not whether they did puzzles.&lt;/p&gt;
&lt;h2 id=&quot;what-kind-of-research-was-this&quot;&gt;What kind of research was this?&lt;/h2&gt;
&lt;p&gt;This &lt;a href=&quot;https://www.nhs.uk/news/health-news-glossary#cohort-study&quot;&gt;cohort study&lt;/a&gt; used childhood data plus tests done over 15 years from the age of around 64 to measure mental ability in older adulthood.&lt;/p&gt;
&lt;p&gt;The researchers wanted to see if people's self-reported level of intellectual engagement (such as reading, problem-solving, thinking and being curious about the world) related to their mental ability, and to changes in mental ability as people got older.&lt;/p&gt;
&lt;p&gt;This type of study is useful for comparing how factors relate to each other, but can't prove that 1 factor (in this case, intellectual engagement) directly causes another (slower mental decline).&lt;/p&gt;
&lt;p&gt;Too many other factors may be involved, such as genetic and lifestyle factors and initial intellectual ability.&lt;/p&gt;
&lt;h2 id=&quot;what-did-the-research-involve&quot;&gt;What did the research involve?&lt;/h2&gt;
&lt;p&gt;Researchers recruited 498 Scottish adults aged around 64 who'd taken intelligence tests on the same day in 1947, when aged 11 or 12.&lt;/p&gt;
&lt;p&gt;They were asked to fill in questionnaires about their intellectual engagement, and were then tested on their reading abilities.&lt;/p&gt;
&lt;p&gt;They did 2 tests of mental ability (1 for memory and the other for information processing), which were repeated on up to 5 occasions over the next 14 years.&lt;/p&gt;
&lt;p&gt;Researchers looked for the possible effects of intellectual engagement on mental ability and changes in mental ability over time, while taking account of people's childhood abilities and education.&lt;/p&gt;
&lt;p&gt;Intellectual engagement was measured by questions asking about:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;reading – for example, whether people enjoy reading complicated novels and read 10 books or more a year&lt;/li&gt;
&lt;li&gt;abstract thinking – for example, whether people like to think deeply about things, even if they have no practical outcome&lt;/li&gt;
&lt;li&gt;problem-solving – for example, if they enjoy coming up with new solutions to complicated problems&lt;/li&gt;
&lt;li&gt;intellectual curiosity – for example, if they enjoy learning about new things in a wide range of fields&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The mental ability tests included remembering a list of words read aloud, and matching symbols with corresponding digits. The tests measure verbal memory and speed of mental processing.&lt;/p&gt;
&lt;h2 id=&quot;what-were-the-basic-results&quot;&gt;What were the basic results?&lt;/h2&gt;
&lt;p&gt;People who had higher scores on childhood intelligence tests were more likely to be intellectually engaged. Women also scored higher on mental processing and intellectual engagement than men.&lt;/p&gt;
&lt;p&gt;As expected, people's mental ability scores declined as they got older, from an average age of 64 to an average age of 78 at the end of the study.&lt;/p&gt;
&lt;p&gt;Many people also dropped out of the study. Only 96 of the 498 people recruited took part in the last round of testing.&lt;/p&gt;
&lt;p&gt;The researchers lost touch with 13 people, while 57 people died and 332 declined to take part.&lt;/p&gt;
&lt;p&gt;Intellectual engagement in the problem solving area was linked to having higher test results for mental ability, even after accounting for childhood ability and education.&lt;/p&gt;
&lt;p&gt;While intellectual engagement in other areas was also linked to higher test results, these tended to be explained by childhood ability, education or female gender.&lt;/p&gt;
&lt;p&gt;But none of the measures of intellectual engagement was linked to the speed of decline of people's mental abilities over time.&lt;/p&gt;
&lt;h2 id=&quot;how-did-the-researchers-interpret-the-results&quot;&gt;How did the researchers interpret the results?&lt;/h2&gt;
&lt;p&gt;The researchers said their study &quot;suggests that engagement adds to an individual's cognitive reserve – that is, individuals who engage in regular problem-solving activities might require greater age-related neuropathological burdens [such as damage to the brain from Alzheimer's disease] before clinical thresholds of impairment are crossed and symptoms of cognitive decline are noted&quot;.&lt;/p&gt;
&lt;p&gt;In other words, people who like problem-solving may have a similar decline in mental ability, but it takes more damage to the brain for them to reach the point at which it becomes noticeable, because they start from a higher level of functioning.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;As we live longer, many of us fear losing our mental faculties with age. The idea that we can stave off decline by doing crossword puzzles is attractive, but this study suggests it's more complicated than that.&lt;/p&gt;
&lt;p&gt;While problem-solving seems to be linked with improved mental abilities, it doesn't necessarily protect against the decline of those abilities with age.&lt;/p&gt;
&lt;p&gt;The study has a few limitations worth pointing out. The first is the problem of drop-out over time.&lt;/p&gt;
&lt;p&gt;People are more likely to agree to continued testing if they feel their intellectual abilities remain sharp, and those who have dementia may not be able to take part.&lt;/p&gt;
&lt;p&gt;This means the study may underestimate the possible protective effects of intellectual engagement, as those tested in the later phases of the study were likely to have higher intellectual engagement and higher mental abilities than those who dropped out.&lt;/p&gt;
&lt;p&gt;The study benefited from having results of childhood tests of intelligence, but we don't know how those tests may have compared with modern IQ or intelligence testing.&lt;/p&gt;
&lt;p&gt;Even if comparable, it's always going to be difficult to ensure that the analyses have completely ruled out the influence of a person's natural mental abilities from the start.&lt;/p&gt;
&lt;p&gt;Observational cohort studies can never prove that 1 factor is the main cause of another, so even if the study had found slower mental decline among people who liked problem-solving, we couldn't say for sure that puzzles were the reason for this.&lt;/p&gt;
&lt;p&gt;But the study does seem to show that life-long intellectual engagement and problem-solving is linked to higher mental functioning, so it's not the case that giving your brain a workout is a waste of time, especially if you find those activities enjoyable and fulfilling.&lt;/p&gt;
&lt;p&gt;Other ways you can try to keep your brain healthy throughout life are:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;not smoking&lt;/li&gt;
&lt;li&gt;not driking too much alcohol&lt;/li&gt;
&lt;li&gt;eating a healthy, balanced diet, including at least 5 portions of fruit and vegetables every day&lt;/li&gt;
&lt;li&gt;exercising for at least 150 minutes every week by doing moderate-intensity aerobic activity (such as cycling or fast walking), or as much as you're able to&lt;/li&gt;
&lt;li&gt;making sure your blood pressure is checked and controlled through regular health tests&lt;/li&gt;
&lt;li&gt;if you have diabetes, making sure you keep to the recommended diet and take your medication&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;author&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;Analysis by Bazian&lt;br/&gt;Edited by NHS Website&lt;/p&gt;
&lt;/div&gt;


</description>
<pubDate>Wed, 12 Dec 2018 23:37:45 +0000</pubDate>
<dc:creator>open-source-ux</dc:creator>
<og:url>https://www.nhs.uk/news/older-people/puzzle-solving-doesnt-slow-down-mental-decline-older-people/</og:url>
<og:title>Puzzle-solving 'doesn't slow mental decline in older people'</og:title>
<og:description>&quot;Crosswords do not prevent dementia but can make your brain sharper to start off with,&quot; reports the Mail Online. The question of whether doing puzzles and problem-solving activities can stave off mental decline in older age is often debated. This study of 498 people born in Scotland in 1936 found people who enjoyed intellectually stimulating tasks had better mental functioning at around age 64 than less intellectually active people, but that their rate of mental decline from that point was the same.</og:description>
<og:type>website</og:type>
<og:image>https://www.nhs.uk/static/nhsuk_behind_the_headlines/img/open-graph.b2674bec1a4b.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.nhs.uk/news/older-people/puzzle-solving-doesnt-slow-down-mental-decline-older-people/</dc:identifier>
</item>
<item>
<title>Why Use F#?</title>
<link>https://fsharpforfunandprofit.com/why-use-fsharp/</link>
<guid isPermaLink="true" >https://fsharpforfunandprofit.com/why-use-fsharp/</guid>
<description>&lt;h2&gt;&lt;img src=&quot;https://fsharpforfunandprofit.com/assets/img/glyphicons/glyphicons_280_settings.png&quot; class=&quot;bs-icon&quot;/&gt; Completeness&lt;/h2&gt;
&lt;p&gt;Although it is a functional language at heart, F# does support other styles which are not 100% pure, which makes it much easier to interact with the non-pure world of web sites, databases, other applications, and so on. In particular, F# is designed as a hybrid functional/OO language, so it can do &lt;a href=&quot;https://fsharpforfunandprofit.com/posts/completeness-anything-csharp-can-do/&quot;&gt;virtually everything that C# can do&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Of course, F# is &lt;a href=&quot;https://fsharpforfunandprofit.com/posts/completeness-seamless-dotnet-interop/&quot;&gt;part of the .NET ecosystem&lt;/a&gt;, which gives you seamless access to all the third party .NET libraries and tools. It runs on most platforms, including Linux and smart phones (via Mono).&lt;/p&gt;
&lt;p&gt;Finally, it is well integrated with Visual Studio, which means you get a great IDE with IntelliSense support, a debugger, and many plug-ins for unit tests, source control, and other development tasks. Or on Linux, you can use the MonoDevelop IDE instead.&lt;/p&gt;
</description>
<pubDate>Wed, 12 Dec 2018 23:31:29 +0000</pubDate>
<dc:creator>adgasf</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://fsharpforfunandprofit.com/why-use-fsharp/</dc:identifier>
</item>
<item>
<title>Ant Colonies Retain Memories That Outlast the Lifespans of Individuals</title>
<link>https://www.smithsonianmag.com/science-nature/ant-colonies-retain-memories-outlast-lifespans-individuals-180971022/</link>
<guid isPermaLink="true" >https://www.smithsonianmag.com/science-nature/ant-colonies-retain-memories-outlast-lifespans-individuals-180971022/</guid>
<description>&lt;div readability=&quot;152.75405026151&quot;&gt;
&lt;p&gt;Like a brain, an ant colony operates without central control. Each is a set of interacting individuals, either neurons or ants, using simple chemical interactions that in the aggregate generate their behavior. People use their brains to remember. Can ant colonies do that? This &lt;a href=&quot;http://www.academia.edu/31792682/The_Evolution_of_the_Algorithms_for_Collective_Behavior&quot; target=&quot;_blank&quot;&gt;question&lt;/a&gt; leads to another question: what is memory? For people, memory is the capacity to recall something that happened in the past. We also ask computers to reproduce past actions – the blending of the idea of the computer as brain and brain as computer has led us to take ‘memory’ to mean something like the information stored on a hard drive. We know that our memory relies on changes in how much a set of linked neurons stimulate each other; that it is reinforced somehow during sleep; and that recent and long-term memory involve different circuits of connected neurons. But there is much we still don’t know about how those neural events come together, whether there are stored representations that we use to talk about something that happened in the past, or how we can keep performing a previously learned task such as reading or riding a bicycle. &lt;/p&gt;

&lt;p&gt;Any living being can exhibit the simplest form of memory, a change due to past events. Look at a tree that has lost a branch. It remembers by how it grows around the wound, leaving traces in the pattern of the bark and the shape of the tree. You might be able to describe the last time you had the flu, or you might not. Either way, in some sense your body ‘remembers,’ because some of your cells now have different antibodies, molecular receptors, which fit that particular virus.&lt;/p&gt;
&lt;p&gt;Past events can alter the behavior of both individual ants and ant colonies. Individual carpenter ants offered a sugar treat remembered its location for a few minutes; they were likely to return to where the food had been. Another species, the Sahara Desert ant, meanders around the barren desert, searching for food. It appears that an ant of this species can remember how far it walked, or how many steps it took, since the last time it was at the nest.&lt;/p&gt;
&lt;p&gt;A red wood ant colony remembers its trail system leading to the same trees, year after year, although no single ant does. In the forests of Europe, they forage in high trees to feed on the excretions of aphids that in turn feed on the tree. Their nests are enormous mounds of pine needles situated in the same place for decades, occupied by many generations of colonies. Each ant tends to take the same trail day after day to the same tree. During the long &lt;a href=&quot;https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0202117&quot; target=&quot;_blank&quot;&gt;winter&lt;/a&gt;, the ants huddle together under the snow. The Finnish myrmecologist Rainer Rosengren &lt;a href=&quot;https://www.jstor.org/stable/23734459?seq=1#page_scan_tab_contents&quot; target=&quot;_blank&quot;&gt;showed&lt;/a&gt; that when the ants emerge in the spring, an older ant goes out with a young one along the older ant’s habitual trail. The older ant dies and the younger ant adopts that trail as its own, thus leading the colony to remember, or reproduce, the previous year’s trails.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;ld-dropcap&quot;&gt;F&lt;/span&gt;oraging in a &lt;a href=&quot;https://www.sciencedirect.com/science/article/pii/S2589004218301366&quot; target=&quot;_blank&quot;&gt;harvester&lt;/a&gt; ant colony requires some individual ant memory. The ants search for scattered seeds and do not use pheromone signals; if an ant finds a seed, there is no point recruiting others because there are not likely to be other seeds nearby. The foragers travel a trail that can extend up to 20 meters from the nest. Each ant leaves the trail and goes off on its own to search for food. It searches until it finds a seed, then goes back to the trail, maybe using the angle of the sunlight as a guide, to return to the nest, following the stream of outgoing foragers. Once back at the nest, a forager drops off its seed, and is stimulated to leave the nest by the rate at which it meets other foragers returning with food. On its next trip, it leaves the trail at about the same place to search again.&lt;/p&gt;
&lt;div class=&quot;external-associated&quot; readability=&quot;8.3424408014572&quot;&gt;
&lt;section class=&quot;article-teaser special-article&quot; readability=&quot;29.1985428051&quot;&gt;&lt;a href=&quot;https://www.amazon.com/Ant-Encounters-Interaction-Networks-Behavior/dp/0691138796?SubscriptionId=AKIAJRYWOFQSYZKJJZXA&amp;amp;tag=smithsonianco-20&amp;amp;linkCode=xm2&amp;amp;camp=2025&amp;amp;creative=165953&amp;amp;creativeASIN=0691138796&quot; class=&quot;thumbnail&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://thumbs-prod.si-cdn.com/1Ok9NXPxyVvcdCoEc0AE1JAZdAA=/fit-in/300x0/https://public-media.si-cdn.com/amazon/amazon_image_c2358a2fdbf273c2864565cece7d9184b9499946.jpg&quot; title=&quot;Ant Encounters: Interaction Networks and Colony Behavior (Primers in Complex Systems)&quot; alt=&quot;Preview thumbnail for 'Ant Encounters: Interaction Networks and Colony Behavior (Primers in Complex Systems)&quot;/&gt;&lt;/a&gt;
&lt;h3 class=&quot;headline&quot;&gt;&lt;a href=&quot;https://www.amazon.com/Ant-Encounters-Interaction-Networks-Behavior/dp/0691138796?SubscriptionId=AKIAJRYWOFQSYZKJJZXA&amp;amp;tag=smithsonianco-20&amp;amp;linkCode=xm2&amp;amp;camp=2025&amp;amp;creative=165953&amp;amp;creativeASIN=0691138796&quot; target=&quot;_blank&quot;&gt;Ant Encounters: Interaction Networks and Colony Behavior (Primers in Complex Systems)&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;How do ant colonies get anything done, when no one is in charge? An ant colony operates without a central control or hierarchy, and no ant directs another. Instead, ants decide what to do based on the rate, rhythm, and pattern of individual encounters and interactions--resulting in a dynamic network that coordinates the functions of the colony. &lt;em&gt;Ant Encounters&lt;/em&gt; provides a revealing and accessible look into ant behavior from this complex systems perspective.&lt;/p&gt;
&lt;a href=&quot;https://www.amazon.com/Ant-Encounters-Interaction-Networks-Behavior/dp/0691138796?SubscriptionId=AKIAJRYWOFQSYZKJJZXA&amp;amp;tag=smithsonianco-20&amp;amp;linkCode=xm2&amp;amp;camp=2025&amp;amp;creative=165953&amp;amp;creativeASIN=0691138796&quot; target=&quot;_blank&quot;&gt;&lt;button type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&gt;&lt;a href=&quot;https://www.amazon.com/Ant-Encounters-Interaction-Networks-Behavior/dp/0691138796?SubscriptionId=AKIAJRYWOFQSYZKJJZXA&amp;amp;tag=smithsonianco-20&amp;amp;linkCode=xm2&amp;amp;camp=2025&amp;amp;creative=165953&amp;amp;creativeASIN=0691138796&quot; target=&quot;_blank&quot;&gt;Buy&lt;/a&gt;&lt;/button&gt;&lt;/a&gt;&lt;/section&gt;&lt;/div&gt;
&lt;p&gt;Every morning, the shape of the colony’s foraging area changes, like an amoeba that expands and contracts. No individual ant remembers the colony’s current place in this pattern. On each forager’s first trip, it tends to go out beyond the rest of the other ants travelling in the same direction. The result is in effect a wave that reaches further as the day progresses. Gradually the wave recedes, as the ants making short trips to sites near the nest seem to be the last to give up.&lt;/p&gt;
&lt;p&gt;From day to day, the colony’s behavior changes, and what happens on one day affects the next. I &lt;a href=&quot;https://link.springer.com/article/10.1007/s00265-015-2045-3&quot; target=&quot;_blank&quot;&gt;conducted&lt;/a&gt; a series of perturbation experiments. I put out toothpicks that the workers had to move away, or blocked the trails so that foragers had to work harder, or created a disturbance that the patrollers tried to repel. Each experiment affected only one group of workers directly, but the activity of other groups of workers changed, because workers of one task decide whether to be active depending on their rate of brief encounters with workers of other tasks. After just a few days repeating the experiment, the colonies continued to behave as they did while they were disturbed, even after the perturbations stopped. Ants had switched tasks and positions in the nest, and so the patterns of encounter took a while to shift back to the undisturbed state. No individual ant remembered anything but, in some sense, the colony did.&lt;/p&gt;
&lt;p&gt;Colonies live for 20-30 years, the lifetime of the single queen who produces all the ants, but individual ants live at most a year. In response to perturbations, the behavior of older, larger colonies is more stable than that of younger ones. It is also more homeostatic: the larger the magnitude of the disturbance, the more likely older colonies were to focus on foraging than on responding to the hassles I had &lt;a href=&quot;https://web.stanford.edu/~dmgordon/articles/doi/10.1146-annurev-ento-011118-111923/Gordon%2010.1146annurev-ento-011118-111923%20EN64CH03_Gordon_RIA.pdf&quot; target=&quot;_blank&quot;&gt;created&lt;/a&gt;; while, the worse it got, the more the younger colonies reacted. In short, older, larger colonies grow up to act more wisely than younger smaller ones, even though the older colony does not have older, wiser ants.&lt;/p&gt;
&lt;p&gt;Ants use the rate at which they meet and smell other ants, or the chemicals deposited by other ants, to decide what to do next. A neuron uses the rate at which it is stimulated by other neurons to decide whether to fire. In both cases, memory arises from changes in how ants or neurons connect and stimulate each other. It is likely that colony behavior matures because colony size changes the rates of interaction among ants. In an older, larger colony, each ant has more ants to meet than in a younger, smaller one, and the outcome is a more stable dynamic. Perhaps colonies remember a past disturbance because it shifted the location of ants, leading to new patterns of interaction, which might even reinforce the new behavior overnight while the colony is inactive, just as our own memories are consolidated during sleep. Changes in colony behavior due to past events are not the simple sum of ant memories, just as changes in what we remember, and what we say or do, are not a simple set of transformations, neuron by neuron. Instead, your memories are like an ant colony’s: no particular neuron remembers anything although your brain does.&lt;img src=&quot;https://metrics.aeon.co/count/9a6aef26-59ef-4339-8e90-c86faba25cec.gif&quot; alt=&quot;Aeon counter – do not remove&quot; width=&quot;1&quot; height=&quot;1&quot;/&gt;&lt;/p&gt;
&lt;p&gt;This article was originally published at &lt;a href=&quot;https://aeon.co?utm_campaign=republished-article&quot; target=&quot;_blank&quot;&gt;Aeon&lt;/a&gt; and has been republished under &lt;a href=&quot;https://creativecommons.org/licenses/by-nd/4.0/&quot;&gt;Creative Commons&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Deborah M. Gordon is a professor of biology at Stanford University in California. She has written about her research for publications such as &lt;em&gt;Scientific American&lt;/em&gt; and &lt;em&gt;Wired&lt;/em&gt;. Her latest book is &lt;em&gt;&lt;a href=&quot;https://www.amazon.com/Ant-Encounters-Interaction-Networks-Behavior/dp/0691138796&quot;&gt;Ant Encounters: Interaction Networks and Colony Behavior&lt;/a&gt;&lt;/em&gt; (2010).&lt;/p&gt;
&lt;/div&gt;&lt;div readability=&quot;32&quot;&gt;
&lt;p&gt;Like this article?&lt;br/&gt;&lt;span&gt;SIGN UP&lt;/span&gt; for our newsletter&lt;/p&gt;

&lt;/div&gt;</description>
<pubDate>Wed, 12 Dec 2018 21:04:46 +0000</pubDate>
<dc:creator>bangonkeyboard</dc:creator>
<og:image>https://thumbs-prod.si-cdn.com/tv_bt3iuy3KLcev4AUDPuIJEAi4=/1072x720/filters:no_upscale():focal(700x420:701x421)/https://public-media.si-cdn.com/filer/1b/0b/1b0b4087-bb15-4f81-b9a0-b6ecac4135ef/idea_sized-170407-f-se307-0020.jpg</og:image>
<og:title>Ant Colonies Retain Memories That Outlast the Lifespans of Individuals</og:title>
<og:url>https://www.smithsonianmag.com/science-nature/ant-colonies-retain-memories-outlast-lifespans-individuals-180971022/</og:url>
<og:type>article</og:type>
<og:description>An ant colony can thrive for decades, changing its behavior based on past events even as individual ants die off every year or so</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.smithsonianmag.com/science-nature/ant-colonies-retain-memories-outlast-lifespans-individuals-180971022/</dc:identifier>
</item>
<item>
<title>Archive.org donations are currently matched by a generous supporter 2-to-1</title>
<link>https://archive.org/donate/</link>
<guid isPermaLink="true" >https://archive.org/donate/</guid>
<description>&lt;p&gt;Dear Internet Archive Community,&lt;/p&gt;
&lt;p&gt;This is it. &lt;strong class=&quot;highlight&quot;&gt;Today, a generous supporter will match your donation 2-to-1. So your $5 gift becomes $15 for the Internet Archive.&lt;/strong&gt; That’s right, for the price of a paperback, you can sustain a library the whole world trusts.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Will you chip in to keep the Internet Archive going strong?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;My dream has always been to build the library of everything and make it available to everyone.&lt;/p&gt;
&lt;p&gt;What I didn’t count on was the influences now corrupting the Web. The centralization of power. The active distortions of fact. For me, that changed the Internet Archive from a “nice to have” project to a “gotta have.”&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The world needs a better Web.&lt;br/&gt;The world &lt;em&gt;deserves&lt;/em&gt; a better Web.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We need a Web that’s reliable. That sets the record straight. We need a Web that’s on &lt;em&gt;our&lt;/em&gt; side. A Web that’s not creepy, that doesn’t spy on us. &lt;em&gt;So let’s fix the frickin’ Web!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;When I started this nonprofit 22 years ago, people called me crazy. &lt;em&gt;Collect web pages? Why? Who would want to read a book on a screen?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Did you know, this past year we’ve:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;We’ve fixed 1.5 million broken links in Wikipedia using the Wayback Machine?&lt;/li&gt;
&lt;li&gt;Journalists have cited the Internet Archive 1200+ times to set the record straight?&lt;/li&gt;
&lt;li&gt;Readers have borrowed 4 million books and downloaded 900 million texts with complete reader privacy?&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;The key is to keep improving—and to keep it free.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The Internet Archive has only 150 staff but runs one of the top websites in the world. Reader privacy is very important to us, so we never track you. We don’t accept ads. But we still need to pay for servers, staff and rent.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Internet Archive is a bargain, but we still need your help.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong class=&quot;highlight&quot;&gt;We are powered by donations averaging $45.00. If everyone reading this donated $5 now, we could end this fundraiser today.&lt;/strong&gt; It takes less than 90 seconds. I know because I’m a donor, too.&lt;/p&gt;
&lt;p&gt;If you find our site useful, please consider contributing &lt;strong&gt;$5, $25, $50&lt;/strong&gt; or whatever you can afford to keep the Internet Archive going in 2019. I promise you, it will be money well spent.&lt;/p&gt;
&lt;p&gt;Thank you.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Brewster Kahle,&lt;/em&gt;&lt;br/&gt;Founder &amp;amp; Digital Librarian&lt;/p&gt;
&lt;p class=&quot;exhortation&quot;&gt;Please make a tax-deductible donation now.&lt;br/&gt;You will receive an email confirmation that can be used for your tax records.&lt;br/&gt;The Internet Archive is a California non-profit charity that is tax-exempt under section 501c3 of the Internal Revenue Code. Federal Tax ID Number 94-3242767.&lt;/p&gt;
</description>
<pubDate>Wed, 12 Dec 2018 21:04:36 +0000</pubDate>
<dc:creator>aw3c2</dc:creator>
<og:type>website</og:type>
<og:url>https://archive.org/donate</og:url>
<og:description>Our job is getting bigger. What we learned in the last year: we need good information online. Reliable information. Websites and data that don’t disappear and can’t be changed after-the-fact.</og:description>
<og:image>https://archive.org/images/brewster_kahle-lg.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://archive.org/donate/</dc:identifier>
</item>
<item>
<title>The Onion Futures Act</title>
<link>https://en.wikipedia.org/wiki/Onion_Futures_Act</link>
<guid isPermaLink="true" >https://en.wikipedia.org/wiki/Onion_Futures_Act</guid>
<description>&lt;a class=&quot;mw-jump-link&quot; href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#mw-head&quot;&gt;Jump to navigation&lt;/a&gt;
				&lt;a class=&quot;mw-jump-link&quot; href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#p-search&quot;&gt;Jump to search&lt;/a&gt;
				&lt;div id=&quot;mw-content-text&quot; lang=&quot;en&quot; dir=&quot;ltr&quot; class=&quot;mw-content-ltr&quot;&gt;&lt;div class=&quot;mw-parser-output&quot;&gt;&lt;p&gt;The &lt;b&gt;Onion Futures Act&lt;/b&gt; is a &lt;a href=&quot;https://en.wikipedia.org/wiki/United_States&quot; title=&quot;United States&quot;&gt;United States&lt;/a&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Law&quot; title=&quot;Law&quot;&gt;law&lt;/a&gt; banning the trading of &lt;a href=&quot;https://en.wikipedia.org/wiki/Futures_contracts&quot; class=&quot;mw-redirect&quot; title=&quot;Futures contracts&quot;&gt;futures contracts&lt;/a&gt; on &lt;a href=&quot;https://en.wikipedia.org/wiki/Onion&quot; title=&quot;Onion&quot;&gt;onions&lt;/a&gt;.&lt;sup id=&quot;cite_ref-lawtext_1-0&quot; class=&quot;reference&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_note-lawtext-1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&lt;p&gt;In 1955, two onion traders, Sam Siegel and &lt;a href=&quot;https://en.wikipedia.org/wiki/Vincent_Kosuga&quot; title=&quot;Vincent Kosuga&quot;&gt;Vincent Kosuga&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Cornering_the_market&quot; title=&quot;Cornering the market&quot;&gt;cornered&lt;/a&gt; the onion futures market on the &lt;a href=&quot;https://en.wikipedia.org/wiki/Chicago_Mercantile_Exchange&quot; title=&quot;Chicago Mercantile Exchange&quot;&gt;Chicago Mercantile Exchange&lt;/a&gt;. The resulting regulatory actions led to the passing of the act on August 28, 1958. As of  2018, it remains in effect.&lt;sup id=&quot;cite_ref-lawtext_1-1&quot; class=&quot;reference&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_note-lawtext-1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;


&lt;h2&gt;&lt;span class=&quot;mw-headline&quot; id=&quot;History&quot;&gt;History&lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;span class=&quot;mw-headline&quot; id=&quot;Onion_trading&quot;&gt;Onion trading&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Onion futures trading began on the Chicago Mercantile Exchange in the mid-1940s as an attempt to replace the income lost when the butter futures contract ceased.&lt;sup id=&quot;cite_ref-TIME2_2-0&quot; class=&quot;reference&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_note-TIME2-2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt; By the mid-1950s, onions futures contracts were the most traded product on the &lt;a href=&quot;https://en.wikipedia.org/wiki/Chicago_Mercantile_Exchange&quot; title=&quot;Chicago Mercantile Exchange&quot;&gt;Chicago Mercantile Exchange&lt;/a&gt;. In 1955, they accounted for 20% of its trades.&lt;sup id=&quot;cite_ref-Greising1991p80_3-0&quot; class=&quot;reference&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_note-Greising1991p80-3&quot;&gt;[3]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span class=&quot;mw-headline&quot; id=&quot;Market_manipulation&quot;&gt;Market manipulation&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;In the fall of 1955, Siegel and Kosuga bought enough onions and onion futures so that they controlled 98 percent of the available onions in Chicago.&lt;sup id=&quot;cite_ref-Lambert2010p42_4-0&quot; class=&quot;reference&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_note-Lambert2010p42-4&quot;&gt;[4]&lt;/a&gt;&lt;/sup&gt; Millions of &lt;a href=&quot;https://en.wikipedia.org/wiki/Pound_(mass)&quot; title=&quot;Pound (mass)&quot;&gt;pounds&lt;/a&gt; (thousands of &lt;a href=&quot;https://en.wikipedia.org/wiki/Tonnes&quot; class=&quot;mw-redirect&quot; title=&quot;Tonnes&quot;&gt;tonnes&lt;/a&gt;) of onions were shipped to Chicago to cover their purchases. By late 1955, they had stored 30,000,000 pounds (14,000,000 kg) of onions in Chicago.&lt;sup id=&quot;cite_ref-Greising1991p81_5-0&quot; class=&quot;reference&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_note-Greising1991p81-5&quot;&gt;[5]&lt;/a&gt;&lt;/sup&gt; They soon changed course and convinced onion growers to begin purchasing their inventory by threatening to flood the market with onions if they did not.&lt;sup id=&quot;cite_ref-Greising1991p81_5-1&quot; class=&quot;reference&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_note-Greising1991p81-5&quot;&gt;[5]&lt;/a&gt;&lt;/sup&gt; Siegel and Kosuga told the growers that they would hold the rest of their inventory in order to support the price of onions.&lt;sup id=&quot;cite_ref-TIME_6-0&quot; class=&quot;reference&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_note-TIME-6&quot;&gt;[6]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&lt;p&gt;As the growers began buying onions, Siegel and Kosuga accumulated &lt;a href=&quot;https://en.wikipedia.org/wiki/Short_(finance)&quot; title=&quot;Short (finance)&quot;&gt;short positions&lt;/a&gt; on a large amount of onion contracts.&lt;sup id=&quot;cite_ref-Greising1991p81_5-2&quot; class=&quot;reference&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_note-Greising1991p81-5&quot;&gt;[5]&lt;/a&gt;&lt;/sup&gt; They also arranged to have their stores of onions reconditioned because they had started to spoil. They shipped them outside of Chicago to have them cleaned and then repackaged and re-shipped back to Chicago. The new shipments of onions caused many futures traders to think that there was an excess of onions and further drove down onion prices in Chicago. By the end of the onion season in March 1956, Siegel and Kosuga had flooded the markets with their onions and driven the price of 50 pounds (23 kg) of onions down to 10 cents a bag.&lt;sup id=&quot;cite_ref-Greising1991p81_5-3&quot; class=&quot;reference&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_note-Greising1991p81-5&quot;&gt;[5]&lt;/a&gt;&lt;/sup&gt; In August 1955, the same quantity of onions had been priced at $2.75 a bag.&lt;sup id=&quot;cite_ref-TIME_6-1&quot; class=&quot;reference&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_note-TIME-6&quot;&gt;[6]&lt;/a&gt;&lt;/sup&gt; So many onions were shipped to Chicago in order to depress prices that there were onion shortages in other parts of the United States.&lt;sup id=&quot;cite_ref-Markham2002_7-0&quot; class=&quot;reference&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_note-Markham2002-7&quot;&gt;[7]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&lt;p&gt;Siegel and Kosuga made millions of dollars on the transaction due to their short position on onion futures.&lt;sup id=&quot;cite_ref-Lambert2010p42_4-1&quot; class=&quot;reference&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_note-Lambert2010p42-4&quot;&gt;[4]&lt;/a&gt;&lt;/sup&gt; At one point, however, 50 pounds (23 kg) of onions were selling in Chicago for less than the bags that held them. This drove many onion farmers into bankruptcy.&lt;sup id=&quot;cite_ref-Lambert2010p42_4-2&quot; class=&quot;reference&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_note-Lambert2010p42-4&quot;&gt;[4]&lt;/a&gt;&lt;/sup&gt; A public outcry ensued among onion farmers who were left with large amounts of worthless inventory.&lt;sup id=&quot;cite_ref-Greising1991p82_8-0&quot; class=&quot;reference&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_note-Greising1991p82-8&quot;&gt;[8]&lt;/a&gt;&lt;/sup&gt; Many of the farmers had to pay to dispose of the large amounts of onions that they had purchased and grown.&lt;sup id=&quot;cite_ref-Lambert2010p43_9-0&quot; class=&quot;reference&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_note-Lambert2010p43-9&quot;&gt;[9]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span class=&quot;mw-headline&quot; id=&quot;Regulatory_action&quot;&gt;Regulatory action&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;In the aftermath of the crash, many commentators characterized Kosuga's actions as &lt;a href=&quot;https://en.wikipedia.org/wiki/Speculative_attack&quot; title=&quot;Speculative attack&quot;&gt;unprincipled gambling&lt;/a&gt;.&lt;sup id=&quot;cite_ref-Lambert2010p43_9-1&quot; class=&quot;reference&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_note-Lambert2010p43-9&quot;&gt;[9]&lt;/a&gt;&lt;/sup&gt; The abrupt change in prices gained the attention of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Commodity_Exchange_Authority&quot; title=&quot;Commodity Exchange Authority&quot;&gt;Commodity Exchange Authority&lt;/a&gt;.&lt;sup id=&quot;cite_ref-TIME_6-2&quot; class=&quot;reference&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_note-TIME-6&quot;&gt;[6]&lt;/a&gt;&lt;/sup&gt; Soon they launched an investigation and the U.S. &lt;a href=&quot;https://en.wikipedia.org/wiki/United_States_Senate_Committee_on_Agriculture,_Nutrition_and_Forestry&quot; title=&quot;United States Senate Committee on Agriculture, Nutrition and Forestry&quot;&gt;Senate Committee on Agriculture&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/United_States_House_Committee_on_Agriculture&quot; title=&quot;United States House Committee on Agriculture&quot;&gt;House Committee on Agriculture&lt;/a&gt; held hearings on the matter.&lt;/p&gt;&lt;p&gt;During the hearings, the Commodity Exchange Authority stated that it was the perishable nature of onion which made them vulnerable to price swings.&lt;sup id=&quot;cite_ref-Markham2002_7-1&quot; class=&quot;reference&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_note-Markham2002-7&quot;&gt;[7]&lt;/a&gt;&lt;/sup&gt; Then-congressman &lt;a href=&quot;https://en.wikipedia.org/wiki/Gerald_Ford&quot; title=&quot;Gerald Ford&quot;&gt;Gerald Ford&lt;/a&gt; of Michigan sponsored a bill, known as the Onion Futures Act, which banned futures trading on onions. The bill was unpopular among traders, some of whom argued that onion shortages were not a crucial issue since they were used as a condiment rather than a staple food. The president of the Chicago Mercantile Exchange, &lt;a href=&quot;https://en.wikipedia.org/wiki/E.B._Harris&quot; title=&quot;E.B. Harris&quot;&gt;E.B. Harris&lt;/a&gt;, lobbied hard against the bill. Harris described it as &quot;Burning down the barn to find a suspected rat&quot;.&lt;sup id=&quot;cite_ref-Lambert2010p43_9-2&quot; class=&quot;reference&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_note-Lambert2010p43-9&quot;&gt;[9]&lt;/a&gt;&lt;/sup&gt; The measure was passed, however, and President &lt;a href=&quot;https://en.wikipedia.org/wiki/Dwight_D._Eisenhower&quot; title=&quot;Dwight D. Eisenhower&quot;&gt;Dwight D. Eisenhower&lt;/a&gt; signed the bill in August 1958.&lt;sup id=&quot;cite_ref-Lambert2010p43_9-3&quot; class=&quot;reference&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_note-Lambert2010p43-9&quot;&gt;[9]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span class=&quot;mw-headline&quot; id=&quot;Impact&quot;&gt;Impact&lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;span class=&quot;mw-headline&quot; id=&quot;Effect_on_the_Chicago_Mercantile_Exchange&quot;&gt;Effect on the Chicago Mercantile Exchange&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;After the ban was passed, the Chicago Mercantile Exchange filed a lawsuit in federal court alleging that the ban unfairly restricted trade. After a federal judge ruled against them, they declined to appeal to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Supreme_Court_of_the_United_States&quot; title=&quot;Supreme Court of the United States&quot;&gt;Supreme Court&lt;/a&gt; and the ban stood.&lt;sup id=&quot;cite_ref-Lambert2010p44_10-0&quot; class=&quot;reference&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_note-Lambert2010p44-10&quot;&gt;[10]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&lt;p&gt;The loss of a lucrative trading product was devastating to the Chicago Mercantile Exchange. The other products that were traded, including futures contracts on eggs, turkeys, and potatoes, were not large enough to support the exchange.&lt;sup id=&quot;cite_ref-Lambert2010p44_10-1&quot; class=&quot;reference&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_note-Lambert2010p44-10&quot;&gt;[10]&lt;/a&gt;&lt;/sup&gt; This led to the emergence of new leadership who pioneered a different strategy, expanding the exchange's traded products to include futures contracts on &lt;a href=&quot;https://en.wikipedia.org/wiki/Pork_belly&quot; title=&quot;Pork belly&quot;&gt;pork bellies&lt;/a&gt; and frozen concentrate &lt;a href=&quot;https://en.wikipedia.org/wiki/Orange_juice&quot; title=&quot;Orange juice&quot;&gt;orange juice&lt;/a&gt;.&lt;sup id=&quot;cite_ref-Greising1991p80_3-1&quot; class=&quot;reference&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_note-Greising1991p80-3&quot;&gt;[3]&lt;/a&gt;&lt;/sup&gt;&lt;sup id=&quot;cite_ref-Lambert2010p48_11-0&quot; class=&quot;reference&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_note-Lambert2010p48-11&quot;&gt;[11]&lt;/a&gt;&lt;/sup&gt; These proved to be popular products and eventually restored lost popularity to the Chicago Mercantile Exchange.&lt;sup id=&quot;cite_ref-Lambert2010p53_12-0&quot; class=&quot;reference&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_note-Lambert2010p53-12&quot;&gt;[12]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span class=&quot;mw-headline&quot; id=&quot;Effect_on_price_volatility&quot;&gt;Effect on price volatility&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;The ban has provided academics with a unique opportunity to study the effect of an active &lt;a href=&quot;https://en.wikipedia.org/wiki/Futures_market&quot; class=&quot;mw-redirect&quot; title=&quot;Futures market&quot;&gt;futures market&lt;/a&gt; on commodity prices. Experts have been divided on the effect that onion futures trading has on the volatility of onion prices.
&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Holbrook_Working&quot; title=&quot;Holbrook Working&quot;&gt;Holbrook Working&lt;/a&gt; published a study in 1960 which argued that price volatility declined after the futures market for onions was introduced in the 1940s.&lt;sup id=&quot;cite_ref-13&quot; class=&quot;reference&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_note-13&quot;&gt;[13]&lt;/a&gt;&lt;/sup&gt; Working cited this study as proof of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Efficient-market_hypothesis&quot; title=&quot;Efficient-market hypothesis&quot;&gt;efficient-market hypothesis&lt;/a&gt;.&lt;sup id=&quot;cite_ref-TIME2_2-1&quot; class=&quot;reference&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_note-TIME2-2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt; In 1963, this theory was lent more support by a study published by &lt;a href=&quot;https://en.wikipedia.org/wiki/Roger_Gray_(academic)&quot; title=&quot;Roger Gray (academic)&quot;&gt;Roger Gray&lt;/a&gt;. Gray, an expert in agricultural futures markets and &lt;a href=&quot;https://en.wikipedia.org/wiki/Professor_emeritus&quot; class=&quot;mw-redirect&quot; title=&quot;Professor emeritus&quot;&gt;professor emeritus&lt;/a&gt; of economics at &lt;a href=&quot;https://en.wikipedia.org/wiki/Stanford_University&quot; title=&quot;Stanford University&quot;&gt;Stanford University&lt;/a&gt;, concluded that onion price volatility increased after the Onion Futures Act was passed.&lt;sup id=&quot;cite_ref-14&quot; class=&quot;reference&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_note-14&quot;&gt;[14]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&lt;p&gt;Aaron C. Johnson published a study in 1973 that contradicted Gray's findings. He found that onion price volatility in the 1960s was the lowest of any decade on record.&lt;sup id=&quot;cite_ref-15&quot; class=&quot;reference&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_note-15&quot;&gt;[15]&lt;/a&gt;&lt;/sup&gt; Financial journalist &lt;a href=&quot;https://en.wikipedia.org/wiki/Justin_Fox&quot; title=&quot;Justin Fox&quot;&gt;Justin Fox&lt;/a&gt; noted that even though onion prices in the 1960s might have been more stable due to better weather or advances in transportation methods: &quot;There was certainly no clear evidence from the onion fields to support the presumption that speculative markets got prices right.&quot;&lt;sup id=&quot;cite_ref-TIME2_2-2&quot; class=&quot;reference&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_note-TIME2-2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&lt;p&gt;In the 2000s, onion prices were significantly more volatile than corn or oil prices. This volatility led the son of a farmer who initially lobbied for the ban to advocate a return to onion futures trading.&lt;sup id=&quot;cite_ref-fortune_16-0&quot; class=&quot;reference&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_note-fortune-16&quot;&gt;[16]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span class=&quot;mw-headline&quot; id=&quot;See_also&quot;&gt;See also&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Title_7_of_the_United_States_Code&quot; title=&quot;Title 7 of the United States Code&quot;&gt;Title 7 of the United States Code&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;span class=&quot;mw-headline&quot; id=&quot;References&quot;&gt;References&lt;/span&gt;&lt;/h2&gt;
&lt;div class=&quot;reflist columns references-column-width&quot; style=&quot;-moz-column-width: 30em; -webkit-column-width: 30em; column-width: 30em; list-style-type: decimal;&quot;&gt;
&lt;ol class=&quot;references&quot;&gt;&lt;li id=&quot;cite_note-lawtext-1&quot;&gt;&lt;span class=&quot;mw-cite-backlink&quot;&gt;^ &lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_ref-lawtext_1-0&quot;&gt;&lt;sup&gt;&lt;i&gt;&lt;b&gt;a&lt;/b&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_ref-lawtext_1-1&quot;&gt;&lt;sup&gt;&lt;i&gt;&lt;b&gt;b&lt;/b&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; &lt;span class=&quot;reference-text&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Title_7_of_the_United_States_Code&quot; title=&quot;Title 7 of the United States Code&quot;&gt;7 U.S.C.&lt;/a&gt; &lt;a rel=&quot;nofollow&quot; class=&quot;external text&quot; href=&quot;https://www.law.cornell.edu/uscode/text/7/13-1&quot;&gt;§ 13-1&lt;/a&gt;&lt;/span&gt;
&lt;/li&gt;
&lt;li id=&quot;cite_note-TIME2-2&quot;&gt;&lt;span class=&quot;mw-cite-backlink&quot;&gt;^ &lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_ref-TIME2_2-0&quot;&gt;&lt;sup&gt;&lt;i&gt;&lt;b&gt;a&lt;/b&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_ref-TIME2_2-1&quot;&gt;&lt;sup&gt;&lt;i&gt;&lt;b&gt;b&lt;/b&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_ref-TIME2_2-2&quot;&gt;&lt;sup&gt;&lt;i&gt;&lt;b&gt;c&lt;/b&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; &lt;span class=&quot;reference-text&quot;&gt;&lt;cite class=&quot;citation news&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Justin_Fox&quot; title=&quot;Justin Fox&quot;&gt;Fox&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Justin_Fox&quot; title=&quot;Justin Fox&quot;&gt;Justin&lt;/a&gt; (July 9, 2008). &lt;a rel=&quot;nofollow&quot; class=&quot;external text&quot; href=&quot;http://curiouscapitalist.blogs.time.com/2008/07/09/what_do_onions_tell_us_about_o/&quot;&gt;&quot;What do onion prices tell us about oil prices?&quot;&lt;/a&gt;. &lt;i&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Time_(magazine)&quot; title=&quot;Time (magazine)&quot;&gt;Time&lt;/a&gt;&lt;/i&gt;&lt;span class=&quot;reference-accessdate&quot;&gt;. Retrieved &lt;span class=&quot;nowrap&quot;&gt;2011-01-03&lt;/span&gt;&lt;/span&gt;.&lt;/cite&gt;&lt;span title=&quot;ctx_ver=Z39.88-2004&amp;amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;amp;rft.genre=article&amp;amp;rft.jtitle=Time&amp;amp;rft.atitle=What+do+onion+prices+tell+us+about+oil+prices%3F&amp;amp;rft.date=2008-07-09&amp;amp;rft.aulast=Fox&amp;amp;rft.aufirst=Justin&amp;amp;rft_id=http%3A%2F%2Fcuriouscapitalist.blogs.time.com%2F2008%2F07%2F09%2Fwhat_do_onions_tell_us_about_o%2F&amp;amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AOnion+Futures+Act&quot; class=&quot;Z3988&quot;/&gt;&lt;style data-mw-deduplicate=&quot;TemplateStyles:r861714446&quot;&gt;&lt;![CDATA[.mw-parser-output cite.citation{font-style:inherit}.mw-parser-output q{quotes:&quot;\&quot;&quot;&quot;\&quot;&quot;&quot;'&quot;&quot;'&quot;}.mw-parser-output code.cs1-code{color:inherit;background:inherit;border:inherit;padding:inherit}.mw-parser-output .cs1-lock-free a{background:url(&quot;//upload.wikimedia.org/wikipedia/commons/thumb/6/65/Lock-green.svg/9px-Lock-green.svg.png&quot;)no-repeat;background-position:right .1em center}.mw-parser-output .cs1-lock-limited a,.mw-parser-output .cs1-lock-registration a{background:url(&quot;//upload.wikimedia.org/wikipedia/commons/thumb/d/d6/Lock-gray-alt-2.svg/9px-Lock-gray-alt-2.svg.png&quot;)no-repeat;background-position:right .1em center}.mw-parser-output .cs1-lock-subscription a{background:url(&quot;//upload.wikimedia.org/wikipedia/commons/thumb/a/aa/Lock-red-alt-2.svg/9px-Lock-red-alt-2.svg.png&quot;)no-repeat;background-position:right .1em center}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration{color:#555}.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration span{border-bottom:1px dotted;cursor:help}.mw-parser-output .cs1-hidden-error{display:none;font-size:100%}.mw-parser-output .cs1-visible-error{font-size:100%}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration,.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-right{padding-right:0.2em}]]&gt;&lt;/style&gt;&lt;/span&gt;
&lt;/li&gt;
&lt;li id=&quot;cite_note-Greising1991p80-3&quot;&gt;&lt;span class=&quot;mw-cite-backlink&quot;&gt;^ &lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_ref-Greising1991p80_3-0&quot;&gt;&lt;sup&gt;&lt;i&gt;&lt;b&gt;a&lt;/b&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_ref-Greising1991p80_3-1&quot;&gt;&lt;sup&gt;&lt;i&gt;&lt;b&gt;b&lt;/b&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; &lt;span class=&quot;reference-text&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#CITEREFGreisingMorse1991&quot;&gt;Greising &amp;amp; Morse 1991&lt;/a&gt;, p. 80&lt;/span&gt;
&lt;/li&gt;
&lt;li id=&quot;cite_note-Lambert2010p42-4&quot;&gt;&lt;span class=&quot;mw-cite-backlink&quot;&gt;^ &lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_ref-Lambert2010p42_4-0&quot;&gt;&lt;sup&gt;&lt;i&gt;&lt;b&gt;a&lt;/b&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_ref-Lambert2010p42_4-1&quot;&gt;&lt;sup&gt;&lt;i&gt;&lt;b&gt;b&lt;/b&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_ref-Lambert2010p42_4-2&quot;&gt;&lt;sup&gt;&lt;i&gt;&lt;b&gt;c&lt;/b&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; &lt;span class=&quot;reference-text&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#CITEREFLambert2010&quot;&gt;Lambert 2010&lt;/a&gt;, p. 42&lt;/span&gt;
&lt;/li&gt;
&lt;li id=&quot;cite_note-Greising1991p81-5&quot;&gt;&lt;span class=&quot;mw-cite-backlink&quot;&gt;^ &lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_ref-Greising1991p81_5-0&quot;&gt;&lt;sup&gt;&lt;i&gt;&lt;b&gt;a&lt;/b&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_ref-Greising1991p81_5-1&quot;&gt;&lt;sup&gt;&lt;i&gt;&lt;b&gt;b&lt;/b&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_ref-Greising1991p81_5-2&quot;&gt;&lt;sup&gt;&lt;i&gt;&lt;b&gt;c&lt;/b&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_ref-Greising1991p81_5-3&quot;&gt;&lt;sup&gt;&lt;i&gt;&lt;b&gt;d&lt;/b&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; &lt;span class=&quot;reference-text&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#CITEREFGreisingMorse1991&quot;&gt;Greising &amp;amp; Morse 1991&lt;/a&gt;, p. 81&lt;/span&gt;
&lt;/li&gt;
&lt;li id=&quot;cite_note-TIME-6&quot;&gt;&lt;span class=&quot;mw-cite-backlink&quot;&gt;^ &lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_ref-TIME_6-0&quot;&gt;&lt;sup&gt;&lt;i&gt;&lt;b&gt;a&lt;/b&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_ref-TIME_6-1&quot;&gt;&lt;sup&gt;&lt;i&gt;&lt;b&gt;b&lt;/b&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_ref-TIME_6-2&quot;&gt;&lt;sup&gt;&lt;i&gt;&lt;b&gt;c&lt;/b&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; &lt;span class=&quot;reference-text&quot;&gt;&lt;cite class=&quot;citation news&quot;&gt;Time Staff (July 2, 1956). &lt;a rel=&quot;nofollow&quot; class=&quot;external text&quot; href=&quot;http://www.time.com/time/magazine/article/0,9171,891311,00.html&quot;&gt;&quot;COMMODITIES: Odorous Onions&quot;&lt;/a&gt;. &lt;i&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Time_(magazine)&quot; title=&quot;Time (magazine)&quot;&gt;Time&lt;/a&gt;&lt;/i&gt;&lt;span class=&quot;reference-accessdate&quot;&gt;. Retrieved &lt;span class=&quot;nowrap&quot;&gt;2011-01-02&lt;/span&gt;&lt;/span&gt;.&lt;/cite&gt;&lt;span title=&quot;ctx_ver=Z39.88-2004&amp;amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;amp;rft.genre=article&amp;amp;rft.jtitle=Time&amp;amp;rft.atitle=COMMODITIES%3A+Odorous+Onions&amp;amp;rft.date=1956-07-02&amp;amp;rft.au=Time+Staff&amp;amp;rft_id=http%3A%2F%2Fwww.time.com%2Ftime%2Fmagazine%2Farticle%2F0%2C9171%2C891311%2C00.html&amp;amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AOnion+Futures+Act&quot; class=&quot;Z3988&quot;/&gt;&lt;link rel=&quot;mw-deduplicated-inline-style&quot; href=&quot;mw-data:TemplateStyles:r861714446&quot;/&gt;&lt;/span&gt;
&lt;/li&gt;
&lt;li id=&quot;cite_note-Markham2002-7&quot;&gt;&lt;span class=&quot;mw-cite-backlink&quot;&gt;^ &lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_ref-Markham2002_7-0&quot;&gt;&lt;sup&gt;&lt;i&gt;&lt;b&gt;a&lt;/b&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_ref-Markham2002_7-1&quot;&gt;&lt;sup&gt;&lt;i&gt;&lt;b&gt;b&lt;/b&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; &lt;span class=&quot;reference-text&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#CITEREFMarkham2002&quot;&gt;Markham 2002&lt;/a&gt;, p. 324&lt;/span&gt;
&lt;/li&gt;
&lt;li id=&quot;cite_note-Greising1991p82-8&quot;&gt;&lt;span class=&quot;mw-cite-backlink&quot;&gt;&lt;b&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_ref-Greising1991p82_8-0&quot;&gt;^&lt;/a&gt;&lt;/b&gt;&lt;/span&gt; &lt;span class=&quot;reference-text&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#CITEREFGreisingMorse1991&quot;&gt;Greising &amp;amp; Morse 1991&lt;/a&gt;, p. 82&lt;/span&gt;
&lt;/li&gt;
&lt;li id=&quot;cite_note-Lambert2010p43-9&quot;&gt;&lt;span class=&quot;mw-cite-backlink&quot;&gt;^ &lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_ref-Lambert2010p43_9-0&quot;&gt;&lt;sup&gt;&lt;i&gt;&lt;b&gt;a&lt;/b&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_ref-Lambert2010p43_9-1&quot;&gt;&lt;sup&gt;&lt;i&gt;&lt;b&gt;b&lt;/b&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_ref-Lambert2010p43_9-2&quot;&gt;&lt;sup&gt;&lt;i&gt;&lt;b&gt;c&lt;/b&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_ref-Lambert2010p43_9-3&quot;&gt;&lt;sup&gt;&lt;i&gt;&lt;b&gt;d&lt;/b&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; &lt;span class=&quot;reference-text&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#CITEREFLambert2010&quot;&gt;Lambert 2010&lt;/a&gt;, p. 43&lt;/span&gt;
&lt;/li&gt;
&lt;li id=&quot;cite_note-Lambert2010p44-10&quot;&gt;&lt;span class=&quot;mw-cite-backlink&quot;&gt;^ &lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_ref-Lambert2010p44_10-0&quot;&gt;&lt;sup&gt;&lt;i&gt;&lt;b&gt;a&lt;/b&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_ref-Lambert2010p44_10-1&quot;&gt;&lt;sup&gt;&lt;i&gt;&lt;b&gt;b&lt;/b&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; &lt;span class=&quot;reference-text&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#CITEREFLambert2010&quot;&gt;Lambert 2010&lt;/a&gt;, p. 44&lt;/span&gt;
&lt;/li&gt;
&lt;li id=&quot;cite_note-Lambert2010p48-11&quot;&gt;&lt;span class=&quot;mw-cite-backlink&quot;&gt;&lt;b&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_ref-Lambert2010p48_11-0&quot;&gt;^&lt;/a&gt;&lt;/b&gt;&lt;/span&gt; &lt;span class=&quot;reference-text&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#CITEREFLambert2010&quot;&gt;Lambert 2010&lt;/a&gt;, p. 48&lt;/span&gt;
&lt;/li&gt;
&lt;li id=&quot;cite_note-Lambert2010p53-12&quot;&gt;&lt;span class=&quot;mw-cite-backlink&quot;&gt;&lt;b&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_ref-Lambert2010p53_12-0&quot;&gt;^&lt;/a&gt;&lt;/b&gt;&lt;/span&gt; &lt;span class=&quot;reference-text&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#CITEREFLambert2010&quot;&gt;Lambert 2010&lt;/a&gt;, p. 53&lt;/span&gt;
&lt;/li&gt;
&lt;li id=&quot;cite_note-13&quot;&gt;&lt;span class=&quot;mw-cite-backlink&quot;&gt;&lt;b&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_ref-13&quot;&gt;^&lt;/a&gt;&lt;/b&gt;&lt;/span&gt; &lt;span class=&quot;reference-text&quot;&gt;Working, Holbrook (1960-02). &quot;Price Effects of Futures Trading.&quot; Reprinted from Food Research Institute Studies, Vol. 1, No. 1, February  1960, in Selected Writings of Holbrook Working, Anne E. Peck, ed., Chicago Board of Trade, 1977. pp. 45–71.&lt;/span&gt;
&lt;/li&gt;
&lt;li id=&quot;cite_note-14&quot;&gt;&lt;span class=&quot;mw-cite-backlink&quot;&gt;&lt;b&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_ref-14&quot;&gt;^&lt;/a&gt;&lt;/b&gt;&lt;/span&gt; &lt;span class=&quot;reference-text&quot;&gt;&lt;a rel=&quot;nofollow&quot; class=&quot;external text&quot; href=&quot;http://chla.library.cornell.edu/cgi/t/text/pageviewer-idx?c=chla;cc=chla;rgn=full%20text;idno=5033566_4125_002;didno=5033566_4125_002;node=5033566_4125_002%3A6.3;view=image;seq=0019&quot;&gt;&quot;Onion Revisited.&quot;&lt;/a&gt; Gray, Roger. Journal of Farm Economics,. Vol. 45, No. 2, May 1963.&lt;/span&gt;
&lt;/li&gt;
&lt;li id=&quot;cite_note-15&quot;&gt;&lt;span class=&quot;mw-cite-backlink&quot;&gt;&lt;b&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_ref-15&quot;&gt;^&lt;/a&gt;&lt;/b&gt;&lt;/span&gt; &lt;span class=&quot;reference-text&quot;&gt;Johnson, Aaron C. &quot;Effects of Futures Trading on Price Performance in the Cash Onion Market, 1930–1968,&quot; (excerpted from USDA, ERS, Technical Bulletin No. 1470, February  1973), in Peck (1977a), pp. 329–336.&lt;/span&gt;
&lt;/li&gt;
&lt;li id=&quot;cite_note-fortune-16&quot;&gt;&lt;span class=&quot;mw-cite-backlink&quot;&gt;&lt;b&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Onion_Futures_Act#cite_ref-fortune_16-0&quot;&gt;^&lt;/a&gt;&lt;/b&gt;&lt;/span&gt; &lt;span class=&quot;reference-text&quot;&gt;&lt;cite class=&quot;citation news&quot;&gt;Birger, Jon (June 27, 2008). &lt;a rel=&quot;nofollow&quot; class=&quot;external text&quot; href=&quot;http://archive.fortune.com/2008/06/27/news/economy/The_onion_conundrum_Birger.fortune/index.htm&quot;&gt;&quot;What onions teach us about oil prices&quot;&lt;/a&gt;. &lt;i&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Fortune_(magazine)&quot; title=&quot;Fortune (magazine)&quot;&gt;Fortune&lt;/a&gt;&lt;/i&gt;&lt;span class=&quot;reference-accessdate&quot;&gt;. Retrieved &lt;span class=&quot;nowrap&quot;&gt;2016-04-02&lt;/span&gt;&lt;/span&gt;.&lt;/cite&gt;&lt;span title=&quot;ctx_ver=Z39.88-2004&amp;amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;amp;rft.genre=article&amp;amp;rft.jtitle=Fortune&amp;amp;rft.atitle=What+onions+teach+us+about+oil+prices&amp;amp;rft.date=2008-06-27&amp;amp;rft.aulast=Birger&amp;amp;rft.aufirst=Jon&amp;amp;rft_id=http%3A%2F%2Farchive.fortune.com%2F2008%2F06%2F27%2Fnews%2Feconomy%2FThe_onion_conundrum_Birger.fortune%2Findex.htm&amp;amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AOnion+Futures+Act&quot; class=&quot;Z3988&quot;/&gt;&lt;link rel=&quot;mw-deduplicated-inline-style&quot; href=&quot;mw-data:TemplateStyles:r861714446&quot;/&gt;&lt;/span&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;h2&gt;&lt;span class=&quot;mw-headline&quot; id=&quot;Bibliography&quot;&gt;Bibliography&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;cite id=&quot;CITEREFLambert2010&quot; class=&quot;citation&quot;&gt;Lambert, Emily (2010), &lt;i&gt;The Futures: The Rise of the Speculator and the Origins of the World's Biggest Markets&lt;/i&gt;, New York: Basic Books, p. 240, &lt;a href=&quot;https://en.wikipedia.org/wiki/International_Standard_Book_Number&quot; title=&quot;International Standard Book Number&quot;&gt;ISBN&lt;/a&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Special:BookSources/978-0-465-01843-7&quot; title=&quot;Special:BookSources/978-0-465-01843-7&quot;&gt;978-0-465-01843-7&lt;/a&gt;&lt;/cite&gt;&lt;span title=&quot;ctx_ver=Z39.88-2004&amp;amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;amp;rft.genre=book&amp;amp;rft.btitle=The+Futures%3A+The+Rise+of+the+Speculator+and+the+Origins+of+the+World%27s+Biggest+Markets&amp;amp;rft.place=New+York&amp;amp;rft.pages=240&amp;amp;rft.pub=Basic+Books&amp;amp;rft.date=2010&amp;amp;rft.isbn=978-0-465-01843-7&amp;amp;rft.aulast=Lambert&amp;amp;rft.aufirst=Emily&amp;amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AOnion+Futures+Act&quot; class=&quot;Z3988&quot;/&gt;&lt;link rel=&quot;mw-deduplicated-inline-style&quot; href=&quot;mw-data:TemplateStyles:r861714446&quot;/&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;&lt;cite id=&quot;CITEREFMarkham2002&quot; class=&quot;citation&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Jerry_Markham&quot; title=&quot;Jerry Markham&quot;&gt;Markham, Jerry&lt;/a&gt; (2002), &lt;i&gt;From J.P. Morgan to the Institutional Investor (1900-1970)&lt;/i&gt;, A Financial History of the United States, Volume 2, New York: M.E. Sharpe, p. 480, &lt;a href=&quot;https://en.wikipedia.org/wiki/International_Standard_Book_Number&quot; title=&quot;International Standard Book Number&quot;&gt;ISBN&lt;/a&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Special:BookSources/978-0-7656-0730-0&quot; title=&quot;Special:BookSources/978-0-7656-0730-0&quot;&gt;978-0-7656-0730-0&lt;/a&gt;&lt;/cite&gt;&lt;span title=&quot;ctx_ver=Z39.88-2004&amp;amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;amp;rft.genre=book&amp;amp;rft.btitle=From+J.P.+Morgan+to+the+Institutional+Investor+%281900-1970%29&amp;amp;rft.place=New+York&amp;amp;rft.series=A+Financial+History+of+the+United+States&amp;amp;rft.pages=480&amp;amp;rft.pub=M.E.+Sharpe&amp;amp;rft.date=2002&amp;amp;rft.isbn=978-0-7656-0730-0&amp;amp;rft.aulast=Markham&amp;amp;rft.aufirst=Jerry&amp;amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AOnion+Futures+Act&quot; class=&quot;Z3988&quot;/&gt;&lt;link rel=&quot;mw-deduplicated-inline-style&quot; href=&quot;mw-data:TemplateStyles:r861714446&quot;/&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;&lt;cite id=&quot;CITEREFGreisingMorse1991&quot; class=&quot;citation&quot;&gt;Greising, David; Morse, Laurie (1991), &lt;i&gt;Brokers, Bagmen, and Moles: Fraud and Corruption in the Chicago Futures Markets&lt;/i&gt;, Hoboken: Wiley, p. 337, &lt;a href=&quot;https://en.wikipedia.org/wiki/International_Standard_Book_Number&quot; title=&quot;International Standard Book Number&quot;&gt;ISBN&lt;/a&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Special:BookSources/978-0-471-53057-2&quot; title=&quot;Special:BookSources/978-0-471-53057-2&quot;&gt;978-0-471-53057-2&lt;/a&gt;&lt;/cite&gt;&lt;span title=&quot;ctx_ver=Z39.88-2004&amp;amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;amp;rft.genre=book&amp;amp;rft.btitle=Brokers%2C+Bagmen%2C+and+Moles%3A+Fraud+and+Corruption+in+the+Chicago+Futures+Markets&amp;amp;rft.place=Hoboken&amp;amp;rft.pages=337&amp;amp;rft.pub=Wiley&amp;amp;rft.date=1991&amp;amp;rft.isbn=978-0-471-53057-2&amp;amp;rft.aulast=Greising&amp;amp;rft.aufirst=David&amp;amp;rft.au=Morse%2C+Laurie&amp;amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AOnion+Futures+Act&quot; class=&quot;Z3988&quot;/&gt;&lt;link rel=&quot;mw-deduplicated-inline-style&quot; href=&quot;mw-data:TemplateStyles:r861714446&quot;/&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;span class=&quot;mw-headline&quot; id=&quot;External_links&quot;&gt;External links&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;a rel=&quot;nofollow&quot; class=&quot;external text&quot; href=&quot;https://www.law.cornell.edu/uscode/text/07/13-1&quot;&gt;Text of the law&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a rel=&quot;nofollow&quot; class=&quot;external text&quot; href=&quot;http://www.cftc.gov/About/HistoryoftheCFTC/history_precftc&quot;&gt;Futures regulation before the CFTC&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div role=&quot;navigation&quot; class=&quot;navbox&quot; aria-labelledby=&quot;Authority_control_frameless_&amp;amp;#124;text-top_&amp;amp;#124;10px_&amp;amp;#124;alt=Edit_this_at_Wikidata_&amp;amp;#124;link=https&amp;amp;#58;//www.wikidata.org/wiki/Q81318&amp;amp;#124;Edit_this_at_Wikidata&quot; style=&quot;padding:3px&quot;&gt;&lt;table class=&quot;nowraplinks hlist navbox-inner&quot; style=&quot;border-spacing:0;background:transparent;color:inherit&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th id=&quot;Authority_control_frameless_&amp;amp;#124;text-top_&amp;amp;#124;10px_&amp;amp;#124;alt=Edit_this_at_Wikidata_&amp;amp;#124;link=https&amp;amp;#58;//www.wikidata.org/wiki/Q81318&amp;amp;#124;Edit_this_at_Wikidata&quot; scope=&quot;row&quot; class=&quot;navbox-group&quot; style=&quot;width:1%&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Help:Authority_control&quot; title=&quot;Help:Authority control&quot;&gt;Authority control&lt;/a&gt; &lt;a href=&quot;https://www.wikidata.org/wiki/Q81318&quot; title=&quot;Edit this at Wikidata&quot;&gt;&lt;img alt=&quot;Edit this at Wikidata&quot; src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/7/73/Blue_pencil.svg/10px-Blue_pencil.svg.png&quot; width=&quot;10&quot; height=&quot;10&quot; style=&quot;vertical-align: text-top&quot; srcset=&quot;//upload.wikimedia.org/wikipedia/commons/thumb/7/73/Blue_pencil.svg/15px-Blue_pencil.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/73/Blue_pencil.svg/20px-Blue_pencil.svg.png 2x&quot; data-file-width=&quot;600&quot; data-file-height=&quot;600&quot;/&gt;&lt;/a&gt;&lt;/th&gt;&lt;td class=&quot;navbox-list navbox-odd&quot; style=&quot;text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px&quot;&gt;&lt;div style=&quot;padding:0em 0.25em&quot;&gt;
&lt;ul&gt;&lt;li&gt;&lt;span class=&quot;nowrap&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Library_of_Congress_Control_Number&quot; title=&quot;Library of Congress Control Number&quot;&gt;LCCN&lt;/a&gt;: &lt;span class=&quot;uid&quot;&gt;&lt;a rel=&quot;nofollow&quot; class=&quot;external text&quot; href=&quot;https://id.loc.gov/authorities/names/no2017038564&quot;&gt;no2017038564&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;nowrap&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Virtual_International_Authority_File&quot; title=&quot;Virtual International Authority File&quot;&gt;VIAF&lt;/a&gt;: &lt;span class=&quot;uid&quot;&gt;&lt;a rel=&quot;nofollow&quot; class=&quot;external text&quot; href=&quot;https://viaf.org/viaf/624149198244474940003&quot;&gt;624149198244474940003&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;nowrap&quot;&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/WorldCat_Identities&quot; class=&quot;mw-redirect&quot; title=&quot;WorldCat Identities&quot;&gt;WorldCat Identities&lt;/a&gt;: &lt;a rel=&quot;nofollow&quot; class=&quot;external text&quot; href=&quot;https://www.worldcat.org/identities/containsVIAFID/624149198244474940003&quot;&gt;624149198244474940003&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;!-- 
NewPP limit report
Parsed by mw1315
Cached time: 20181213091102
Cache expiry: 1900800
Dynamic content: false
CPU time usage: 0.336 seconds
Real time usage: 0.443 seconds
Preprocessor visited node count: 1045/1000000
Preprocessor generated node count: 0/1500000
Post&amp;#8208;expand include size: 20659/2097152 bytes
Template argument size: 944/2097152 bytes
Highest expansion depth: 12/40
Expensive parser function count: 4/500
Unstrip recursion depth: 1/20
Unstrip post&amp;#8208;expand size: 20602/5000000 bytes
Number of Wikibase entities loaded: 1/400
Lua time usage: 0.170/10.000 seconds
Lua memory usage: 4.94 MB/50 MB
--&gt;
&lt;!--
Transclusion expansion time report (%,ms,calls,template)
100.00%  399.677      1 -total
 37.55%  150.068      1 Template:Reflist
 22.85%   91.321      3 Template:Cite_news
 17.36%   69.388      1 Template:Citation_needed
 15.64%   62.493      1 Template:Fix
 12.48%   49.890      1 Template:Authority_control
 11.14%   44.525      3 Template:Convert
 10.73%   42.883      2 Template:Category_handler
 10.67%   42.661      1 Template:As_of
  9.34%   37.336      1 Template:DMCA
--&gt;

&lt;!-- Saved in parser cache with key enwiki:pcache:idhash:20021187-0!canonical and timestamp 20181213091102 and revision id 873457972
 --&gt;
&lt;/div&gt;&lt;noscript&gt;&lt;img src=&quot;https://en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1&quot; alt=&quot;&quot; title=&quot;&quot; width=&quot;1&quot; height=&quot;1&quot; style=&quot;border: none; position: absolute;&quot;/&gt;&lt;/noscript&gt;&lt;/div&gt;					&lt;div class=&quot;printfooter&quot;&gt;
						Retrieved from &quot;&lt;a dir=&quot;ltr&quot; href=&quot;https://en.wikipedia.org/w/index.php?title=Onion_Futures_Act&amp;amp;oldid=873457972&quot;&gt;https://en.wikipedia.org/w/index.php?title=Onion_Futures_Act&amp;amp;oldid=873457972&lt;/a&gt;&quot;					&lt;/div&gt;
								&lt;div class=&quot;visualClear&quot;/&gt;
							</description>
<pubDate>Wed, 12 Dec 2018 20:53:41 +0000</pubDate>
<dc:creator>gkaemmer</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://en.wikipedia.org/wiki/Onion_Futures_Act</dc:identifier>
</item>
<item>
<title>Optician Sans – A free font based on the historical eye charts</title>
<link>https://optician-sans.com/</link>
<guid isPermaLink="true" >https://optician-sans.com/</guid>
<description></description>
<pubDate>Wed, 12 Dec 2018 17:08:37 +0000</pubDate>
<dc:creator>dcschelt</dc:creator>
<og:image>https://optician-sans.com/wp-content/uploads/2018/10/cropped-blurry.gif</og:image>
<og:type>website</og:type>
<og:title>Optician Sans – Free font based on historical optotypes</og:title>
<og:description>Optician Sans is a free font based on the historical Snellen and Sloan eye charts and optotypes used by opticians world wide for centuries.</og:description>
<og:url>https://optician-sans.com/</og:url>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://optician-sans.com/</dc:identifier>
</item>
<item>
<title>An open letter to FB, Twitter, Instagram regarding algorithms and my son&amp;#039;s birth</title>
<link>https://twitter.com/gbrockell/status/1072589687489998848</link>
<guid isPermaLink="true" >https://twitter.com/gbrockell/status/1072589687489998848</guid>
<description>&lt;p&gt;Sending buckets of love your way. I lost my first at 39w5d, and I am all too familiar with this exact predicament. We are so terrible, imo, as a society of dealing with this type of loss. I feel your pain as I think only women who have endured this pain can empathize&lt;/p&gt;
</description>
<pubDate>Wed, 12 Dec 2018 16:09:18 +0000</pubDate>
<dc:creator>waffle_ss</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://mobile.twitter.com/gbrockell/status/1072589687489998848</dc:identifier>
</item>
</channel>
</rss>