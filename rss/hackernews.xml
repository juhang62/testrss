<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Ten minutes a day</title>
<link>https://medium.com/@alexallain/ten-minutes-a-day-e2fa1084f924</link>
<guid isPermaLink="true" >https://medium.com/@alexallain/ten-minutes-a-day-e2fa1084f924</guid>
<description>&lt;p name=&quot;cff6&quot; id=&quot;cff6&quot; class=&quot;graf graf--p graf--leading&quot;&gt;Ten minutes a day&lt;/p&gt;
&lt;p name=&quot;6142&quot; id=&quot;6142&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;In early 2012, I published &lt;a href=&quot;https://www.amazon.com/dp/B00F9311YC/ref=dp-kindle-redirect?_encoding=UTF8&amp;amp;btkr=1&quot; data-href=&quot;https://www.amazon.com/dp/B00F9311YC/ref=dp-kindle-redirect?_encoding=UTF8&amp;amp;btkr=1&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noreferrer nofollow noopener noopener nofollow noopener&quot; target=&quot;_blank&quot;&gt;Jumping into C++&lt;/a&gt;. According to the calendar, I wrote the book between January 2010 and January 2012, but it took me less than 200 hours of work. I know this because for most of the time I worked on the book, I kept careful track of my time spent. Between 1/4/2010 and 9/29/2011 (when I stopped keeping track), I’d worked on the book for almost exactly 156 hours and written over 70,000 words.&lt;/p&gt;
&lt;p name=&quot;b485&quot; id=&quot;b485&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;How, exactly, did I manage to write a book in this short a time? I had one simple rule: I had to work on the book for just ten minutes, every day, no excuses. Ever.&lt;/p&gt;
&lt;p name=&quot;d9cd&quot; id=&quot;d9cd&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The original reason I tracked my time, in fact, was that I wanted to motivate myself by having a streak of days, and I figured that instead of just tallying check marks, I’d write down exactly how long I spent. It worked — I never missed a day.&lt;/p&gt;
&lt;p name=&quot;4b91&quot; id=&quot;4b91&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Now, I didn’t say I &lt;em class=&quot;markup--em markup--p-em&quot;&gt;wrote&lt;/em&gt; the book every day — just that I worked on it. Some (many) days, I would work on sample code, futz with formatting, brainstorm ideas, or make edits. All I needed to do was stare at the page for ten minutes and try to do something that felt like progress.&lt;/p&gt;
&lt;p name=&quot;00b8&quot; id=&quot;00b8&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Even when I was in the zone, I really didn’t spend very long on any given day — on 499 days, I spent 15 minutes or less. There were only 5 days where I worked for more than one hour, and the most time I ever spent was 72 minutes. It definitely helped that I was sometimes able to get into a zone, but it was never the flaming hot zone &lt;a href=&quot;https://www.npr.org/templates/story/story.php?storyId=11709924&quot; data-href=&quot;https://www.npr.org/templates/story/story.php?storyId=11709924&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noreferrer nofollow noopener nofollow noopener&quot; target=&quot;_blank&quot;&gt;Jack Kerouac described in claiming to have written &lt;em class=&quot;markup--em markup--p-em&quot;&gt;On the Road&lt;/em&gt; in a 3 week blur&lt;/a&gt;.&lt;/p&gt;
&lt;p name=&quot;204a&quot; id=&quot;204a&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Instead, I got into a different kind of zone — one where the work was omnipresent, but in the background. More sous vide than flame grilled. Writing every day kept ideas top of mind. When I finished writing, I’d carry the puzzles to my commute or the shower, and I’d talk to people about them. My ideas were always nearby, making it easy to jump back in. If I’d worked for 70 minutes, every Saturday, I’m sure I’d have made far less progress. I’d have forgotten where I was every time I was ready to start.&lt;/p&gt;
&lt;p name=&quot;1d8e&quot; id=&quot;1d8e&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;On some days, despite that, I’d get stuck. On those days, I gave myself permission to make small tweaks rather than forcing myself to write reams of new words. If I had writer’s block, I didn’t beat myself up about it — today might not be a good day, so let’s use it for something I have to do anyway. There’s always tomorrow to take another crack at writing.&lt;/p&gt;
&lt;p name=&quot;e588&quot; id=&quot;e588&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;On those days, I would often review and edit dozens of pages, which kick-started my thinking by reminding me of the big picture — and of the gaps — in a way that I couldn’t when my cursor was sitting and blinking in the middle of a sentence. I rarely found myself unable to write for more than a few days or a week at a time.&lt;/p&gt;
&lt;p name=&quot;355c&quot; id=&quot;355c&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The other thing that really helped is that I didn’t allow myself to check my email until I worked on the book. It wasn’t until recently that I realized (after reading &lt;a href=&quot;http://dimitarsimeonov.com/2016/05/13/the-blinking-cursor-and-the-hot-towel&quot; data-href=&quot;http://dimitarsimeonov.com/2016/05/13/the-blinking-cursor-and-the-hot-towel&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noreferrer nofollow noopener nofollow noopener&quot; target=&quot;_blank&quot;&gt;http://dimitarsimeonov.com/2016/05/13/the-blinking-cursor-and-the-hot-towel&lt;/a&gt;) that I was really creating a habit loop — I gave myself the reward of checking my personal email in exchange for putting in the time on the book. It also tied the concept of working on the book to something very concrete; it was impossible to forget to do.&lt;/p&gt;
&lt;p name=&quot;f7e9&quot; id=&quot;f7e9&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;There were certainly times where I felt like the book was never going to come together — that it was an enormous hill that I was barely scratching. When that happened, going back over what was already there and making edits showed me just how far I’d come and inspired the next wave of work.&lt;/p&gt;
&lt;p name=&quot;1319&quot; id=&quot;1319&quot; class=&quot;graf graf--p graf-after--p graf--trailing&quot;&gt;So, what are you doing for the next ten minutes?&lt;/p&gt;
</description>
<pubDate>Sun, 27 Jan 2019 03:57:02 +0000</pubDate>
<dc:creator>alexallain</dc:creator>
<og:title>Ten minutes a day – Alex Allain – Medium</og:title>
<og:url>https://medium.com/@alexallain/ten-minutes-a-day-e2fa1084f924</og:url>
<og:description>In early 2012, I published Jumping into C++. According to the calendar, I wrote the book between January 2010 to January 2012, but it took…</og:description>
<og:type>article</og:type>
<dc:format>text/html</dc:format>
<dc:identifier>https://medium.com/@alexallain/ten-minutes-a-day-e2fa1084f924</dc:identifier>
</item>
<item>
<title>Verilog sources for Western Digital&amp;#039;s open source RISC-V core</title>
<link>https://github.com/westerndigitalcorporation/swerv_eh1</link>
<guid isPermaLink="true" >https://github.com/westerndigitalcorporation/swerv_eh1</guid>
<description>&lt;div class=&quot;Box-body p-6&quot;&gt;
&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt;
&lt;p&gt;This repository contains the SweRV core design RTL&lt;/p&gt;
&lt;h2&gt;License&lt;/h2&gt;
&lt;p&gt;By contributing to this project, you agree that your contribution is governed by &lt;a href=&quot;https://github.com/westerndigitalcorporation/swerv_eh1/blob/master/LICENSE&quot;&gt;Apache-2.0&lt;/a&gt;.&lt;br/&gt;Files under the &lt;a href=&quot;https://github.com/westerndigitalcorporation/swerv_eh1/blob/master/tools&quot;&gt;tools&lt;/a&gt; directory may be available under a different license. Please review individual file for details.&lt;/p&gt;
&lt;h2&gt;Directory Structure&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;├── configs                 # Configurations Dir
│   └── snapshots           # Where generated configuration files are created
├── design                  # Design root dir
│   ├── dbg                 #   Debugger
│   ├── dec                 #   Decode, Registers and Exceptions
│   ├── dmi                 #   DMI block
│   ├── exu                 #   EXU (ALU/MUL/DIV)
│   ├── ifu                 #   Fetch &amp;amp; Branch Prediction
│   ├── include             
│   ├── lib
│   └── lsu                 #   Load/Store
├── docs
├── tools                   # Scripts/Makefiles
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;Dependencies&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;Verilator &lt;strong&gt;(3.926 or later)&lt;/strong&gt; must be installed on the system&lt;/li&gt;
&lt;li&gt;If addding/reoving instructions, espresso must be installed (used by &lt;em&gt;tools/coredecode&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Quickstart guide&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;Clone the repository&lt;/li&gt;
&lt;li&gt;Setup RV_ROOT to point to the path in your local filesystem&lt;/li&gt;
&lt;li&gt;Determine your configuration {optional}&lt;/li&gt;
&lt;li&gt;Run make with tools/Makefile&lt;/li&gt;
&lt;/ol&gt;&lt;h3&gt;Configurations&lt;/h3&gt;
&lt;p&gt;SweRV can be configured by running the &lt;code&gt;$RV_ROOT/configs/swerv.config&lt;/code&gt; script:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;% $RV_ROOT/configs/swerv.config -h&lt;/code&gt; for detailed help options&lt;/p&gt;
&lt;p&gt;For example to build with a DCCM of size 64 :&lt;/p&gt;
&lt;p&gt;&lt;code&gt;% $RV_ROOT/configs/swerv.config -dccm_size=64&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This will update the &lt;strong&gt;default&lt;/strong&gt; snapshot in $RV_ROOT/configs/snapshots/default/ with parameters for a 64K DCCM.&lt;/p&gt;
&lt;p&gt;Add &lt;code&gt;-snapshot=dccm64&lt;/code&gt;, for example, if you wish to name your build snapshot &lt;em&gt;dccm64&lt;/em&gt; and refer to it during the build.&lt;/p&gt;
&lt;p&gt;This script derives the following consistent set of include files :&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$RV_ROOT/configs/snapshots/default
├── common_defines.vh                       # `defines for testbench or design
├── defines.h                               # #defines for C/assembly headers
├── pd_defines.vh                           # `defines for physical design
├── perl_configs.pl                         # Perl %configs hash for scripting
├── pic_ctrl_verilator_unroll.sv            # Unrolled verilog based on PIC size
├── pic_map_auto.h                          # PIC memory map based on configure size
└── whisper.json                            # JSON file for swerv-iss
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;Building a model&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;
&lt;p&gt;Set the RV_ROOT environment variable to the root of the SweRV directory structure&lt;/p&gt;
&lt;p&gt;&lt;code&gt;RV_ROOT = /path/to/swerv&lt;/code&gt;&lt;br/&gt;&lt;code&gt;export RV_ROOT&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create your configuration&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(Skip if default is sufficient)&lt;/em&gt;&lt;br/&gt;&lt;em&gt;(Name your snapshot to distinguish it from the default. Without an explicit name, it will update/override the &lt;strong&gt;default&lt;/strong&gt; snapshot)&lt;/em&gt;&lt;br/&gt;&lt;code&gt;$RV_ROOT/configs/swerv.config [configuration options..] -snapshot=mybuild&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Snapshots are placed in &lt;code&gt;$RV_ROOT/configs/snapshots/&amp;lt;snapshot name&amp;gt;/&lt;/code&gt; directory&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Build with &lt;strong&gt;verilator&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;make -f $RV_ROOT/tools/Makefile verilator [snapshot=name]&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;This will create and populate the verilator &lt;em&gt;obj_dir/&lt;/em&gt; in the current work dir.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Other targets supported&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;vcs  (Synopsys)  
irun (Cadence)  
&lt;/code&gt;
&lt;/pre&gt;&lt;/article&gt;&lt;/div&gt;
</description>
<pubDate>Sun, 27 Jan 2019 00:07:13 +0000</pubDate>
<dc:creator>obl</dc:creator>
<og:image>https://avatars3.githubusercontent.com/u/8161321?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>westerndigitalcorporation/swerv_eh1</og:title>
<og:url>https://github.com/westerndigitalcorporation/swerv_eh1</og:url>
<og:description>A directory of Western Digital’s RISC-V SweRV Cores - westerndigitalcorporation/swerv_eh1</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/westerndigitalcorporation/swerv_eh1</dc:identifier>
</item>
<item>
<title>Game Loop</title>
<link>http://gameprogrammingpatterns.com/game-loop.html</link>
<guid isPermaLink="true" >http://gameprogrammingpatterns.com/game-loop.html</guid>
<description>&lt;nav class=&quot;top&quot;/&gt;


&lt;p&gt;&lt;em&gt;Decouple the progression of game time from user input and processor speed.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If there is one pattern this book couldn’t live without, this is it. Game loops are the quintessential example of a “game programming pattern”. Almost every game has one, no two are exactly alike, and relatively few programs outside of games use them.&lt;/p&gt;
&lt;p&gt;To see how they’re useful, let’s take a quick trip down memory lane. In the olden days of computer programming when everyone had &lt;span name=&quot;beard&quot;&gt;beards&lt;/span&gt;, programs worked like your dishwasher. You dumped a load of code in, pushed a button, waited, and got results out. Done. These were &lt;em&gt;batch mode&lt;/em&gt; programs — once the work was done, the program stopped.&lt;/p&gt;
&lt;aside name=&quot;beard&quot; readability=&quot;2&quot;&gt;&lt;p&gt;Ada Lovelace and Rear Admiral Grace Hopper had honorary beards.&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;You still see these today, though thankfully we don’t have to write them on punch cards anymore. Shell scripts, command line programs, and even the little Python script that turns a pile of Markdown into this book are all batch mode programs.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;http://gameprogrammingpatterns.com/game-loop.html#interview-with-a-cpu&quot; name=&quot;interview-with-a-cpu&quot;&gt;Interview with a CPU&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Eventually, programmers realized having to drop off a batch of code at the computing office and come back a few hours later for the results was a terribly slow way to get the bugs out of a program. They wanted immediate feedback. &lt;em&gt;Interactive&lt;/em&gt; programs were born. Some of the first interactive programs were games:&lt;/p&gt;

&lt;div class=&quot;codehilite&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;n&quot;&gt;YOU&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ARE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STANDING&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;THE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ROAD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BEFORE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SMALL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BRICK&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;BUILDING&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AROUND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;YOU&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FOREST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SMALL&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;STREAM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FLOWS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OUT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;THE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BUILDING&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DOWN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GULLY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;YOU&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ARE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INSIDE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BUILDING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WELL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOUSE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FOR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LARGE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SPRING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;aside name=&quot;cave&quot; readability=&quot;1.8103448275862&quot;&gt;&lt;p&gt;This is &lt;a href=&quot;http://en.wikipedia.org/wiki/Colossal_Cave_Adventure&quot;&gt;Colossal Cave Adventure&lt;/a&gt;, the first adventure game.&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;You could have a live conversation with the program. It waited for your input, then it would respond to you. You would reply back, taking turns just like you learned to do in kindergarten. When it was your turn, it sat there doing nothing. Something like:&lt;/p&gt;

&lt;div class=&quot;codehilite&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readCommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;handleCommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;aside name=&quot;exit&quot; readability=&quot;4&quot;&gt;&lt;p&gt;This loops forever, so there’s no way to quit the game. A real game would do something like &lt;code&gt;while (!done)&lt;/code&gt; and set &lt;code&gt;done&lt;/code&gt; to exit. I’ve omitted that to keep things simple.&lt;/p&gt;
&lt;/aside&gt;&lt;h3&gt;&lt;a href=&quot;http://gameprogrammingpatterns.com/game-loop.html#event-loops&quot; name=&quot;event-loops&quot;&gt;Event loops&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Modern graphic UI applications are surprisingly similar to old adventure games once you shuck their skin off. Your word processor usually just sits there doing nothing until you press a key or click something:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;waitForEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;dispatchEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The main difference is that instead of &lt;em&gt;text commands&lt;/em&gt;, the program is waiting for &lt;em&gt;user input events&lt;/em&gt; — mouse clicks and key presses. It still works basically like the old text adventures where the program &lt;span name=&quot;idle&quot;&gt;&lt;em&gt;blocks&lt;/em&gt;&lt;/span&gt; waiting for user input, which is a problem.&lt;/p&gt;
&lt;p&gt;Unlike most other software, games keep moving even when the user isn’t providing input. If you sit staring at the screen, the game doesn’t freeze. Animations keep animating. Visual effects dance and sparkle. If you’re unlucky, that monster keeps chomping on your hero.&lt;/p&gt;
&lt;aside name=&quot;idle&quot; readability=&quot;4&quot;&gt;&lt;p&gt;Most event loops do have “idle” events so you can intermittently do stuff without user input. That’s good enough for a blinking cursor or a progress bar, but too rudimentary for games.&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;This is the first key part of a real game loop: &lt;em&gt;it processes user input, but doesn’t wait for it&lt;/em&gt;. The loop always keeps spinning:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;processInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We’ll refine this later, but the basic pieces are here. &lt;code&gt;processInput()&lt;/code&gt; handles any user input that has happened since the last call. Then, &lt;span name=&quot;update&quot;&gt;&lt;code&gt;update()&lt;/code&gt;&lt;/span&gt; advances the game simulation one step. It runs AI and physics (usually in that order). Finally, &lt;code&gt;render()&lt;/code&gt; draws the game so the player can see what happened.&lt;/p&gt;
&lt;aside name=&quot;update&quot; readability=&quot;2.5760869565217&quot;&gt;&lt;p&gt;As you might guess from the name, &lt;code&gt;update()&lt;/code&gt; is a good place to use the &lt;a href=&quot;http://gameprogrammingpatterns.com/update-method.html&quot; class=&quot;pattern&quot;&gt;Update Method&lt;/a&gt; pattern.&lt;/p&gt;
&lt;/aside&gt;&lt;h3&gt;&lt;a href=&quot;http://gameprogrammingpatterns.com/game-loop.html#a-world-out-of-time&quot; name=&quot;a-world-out-of-time&quot;&gt;A world out of time&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If this loop isn’t blocking on input, that leads to the obvious question: how &lt;em&gt;fast&lt;/em&gt; does it spin? Each turn through the game loop advances the state of the game by some amount. From the perspective of an inhabitant of the game world, the hand of their clock has &lt;span name=&quot;tick&quot;&gt;ticked&lt;/span&gt; forward.&lt;/p&gt;
&lt;aside name=&quot;tick&quot; readability=&quot;2&quot;&gt;&lt;p&gt;The common terms for one crank of the game loop are “tick” and “frame”.&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;Meanwhile, the &lt;em&gt;player’s&lt;/em&gt; actual clock is ticking. If we measure how quickly the game loop cycles in terms of real time, we get the game’s “frames per second”. If the game loop cycles quickly, the FPS is high and the game moves smoothly and quickly. If it’s slow, the game jerks along like a stop motion movie.&lt;/p&gt;
&lt;p&gt;With the crude loop we have now where it just cycles as quickly as it can, two factors determine the frame rate. The first is &lt;em&gt;how much work it has to do each frame&lt;/em&gt;. Complex physics, a bunch of game objects, and lots of graphic detail all will keep your CPU and GPU busy, and it will take longer to complete a frame.&lt;/p&gt;
&lt;p&gt;The second is &lt;em&gt;the speed of the underlying platform.&lt;/em&gt; Faster chips churn through more code in the same amount of time. Multiple cores, GPUs, dedicated audio hardware, and the OS’s scheduler all affect how much you get done in one tick.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;http://gameprogrammingpatterns.com/game-loop.html#seconds-per-second&quot; name=&quot;seconds-per-second&quot;&gt;Seconds per second&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In early video games, that second factor was fixed. If you wrote a game for the NES or Apple IIe, you knew &lt;em&gt;exactly&lt;/em&gt; what CPU your game was running on and you could (and did) code specifically for that. All you had to worry about was how much work you did each tick.&lt;/p&gt;
&lt;p&gt;Older games were carefully coded to do just enough work each frame so that the game ran at the speed the developers wanted. But if you tried to play that same game on a faster or slower &lt;span name=&quot;turbo&quot;&gt;machine&lt;/span&gt;, then the game itself would speed up or slow down.&lt;/p&gt;
&lt;aside name=&quot;turbo&quot; readability=&quot;3.9118942731278&quot;&gt;&lt;p&gt;This is why old PCs used to have “&lt;a href=&quot;http://en.wikipedia.org/wiki/Turbo_button&quot;&gt;turbo&lt;/a&gt;” buttons. New PCs were faster and couldn’t play old games because the games would run too fast. Turning the turbo button &lt;em&gt;off&lt;/em&gt; would slow the machine down and make old games playable.&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;These days, though, few developers have the luxury of knowing exactly what hardware their game will run on. Instead, our games must intelligently adapt to a variety of devices.&lt;/p&gt;
&lt;p&gt;This is the other key job of a game loop: &lt;em&gt;it runs the game at a consistent speed despite differences in the underlying hardware.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;game loop&lt;/strong&gt; runs continuously during gameplay. Each turn of the loop, it &lt;strong&gt;processes user input&lt;/strong&gt; without blocking, &lt;strong&gt;updates the game state&lt;/strong&gt;, and &lt;strong&gt;renders the game&lt;/strong&gt;. It tracks the passage of time to &lt;strong&gt;control the rate of gameplay&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Using the wrong pattern can be worse than using no pattern at all, so this section is normally here to caution against over-enthusiasm. The goal of design patterns isn’t to cram as many into your codebase as you can.&lt;/p&gt;
&lt;p&gt;But this pattern is a bit different. I can say with pretty good confidence that you &lt;em&gt;will&lt;/em&gt; use this pattern. If you’re using a game &lt;span name=&quot;engine&quot;&gt;engine&lt;/span&gt;, you won’t write it yourself, but it’s still there.&lt;/p&gt;
&lt;aside name=&quot;engine&quot; readability=&quot;5&quot;&gt;&lt;p&gt;For me, this is the difference between an “engine” and a “library”. With libraries, you own the main game loop and call into the library. An engine owns the loop and calls into &lt;em&gt;your&lt;/em&gt; code.&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;You might think you won’t need this if you’re making a turn-based game. But even there, though the &lt;em&gt;game state&lt;/em&gt; won’t advance until the user takes their turn, the &lt;em&gt;visual&lt;/em&gt; and &lt;em&gt;audible&lt;/em&gt; states of the game usually do. Animation and music keep running even when the game is “waiting” for you to take your turn.&lt;/p&gt;

&lt;p&gt;The loop we’re talking about here is some of the most important code in your game. They say a program spends &lt;span name=&quot;percent&quot;&gt;90%&lt;/span&gt; of its time in 10% of the code. Your game loop will be firmly in that 10%. Take care with this code, and be mindful of its efficiency.&lt;/p&gt;
&lt;aside name=&quot;percent&quot; readability=&quot;3&quot;&gt;&lt;p&gt;Made up statistics like this are why “real” engineers like mechanical and electrical engineers don’t take us seriously.&lt;/p&gt;
&lt;/aside&gt;&lt;h3&gt;&lt;a href=&quot;http://gameprogrammingpatterns.com/game-loop.html#you-may-need-to-coordinate-with-the-platform's-event-loop&quot; name=&quot;you-may-need-to-coordinate-with-the-platform's-event-loop&quot;&gt;You may need to coordinate with the platform’s event loop&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you’re building your game on top of an OS or platform that has a graphic UI and an event loop built in, then you have &lt;em&gt;two&lt;/em&gt; application loops in play. They’ll need to play nice together.&lt;/p&gt;
&lt;p&gt;Sometimes, you can take control and make your loop the only one. For example, if you’re writing a game against the venerable Windows API, your &lt;code&gt;main()&lt;/code&gt; can just have a game loop. Inside, you can call &lt;code&gt;PeekMessage()&lt;/code&gt; to handle and dispatch events from the OS. Unlike &lt;code&gt;GetMessage()&lt;/code&gt;, &lt;code&gt;PeekMessage()&lt;/code&gt; doesn’t block waiting for user input, so your game loop will keep cranking.&lt;/p&gt;
&lt;p&gt;Other platforms don’t let you opt out of the event loop so easily. If you’re targeting a web browser, the event loop is deeply built into browser’s execution model. There, the event loop will run the show, and you’ll use it as your game loop too. You’ll call something like &lt;code&gt;requestAnimationFrame()&lt;/code&gt; and it will call back into your code to keep the game running.&lt;/p&gt;

&lt;p&gt;For such a long introduction, the code for a game loop is actually pretty straightforward. We’ll walk through a couple of variations and go over their good and bad points.&lt;/p&gt;
&lt;p&gt;The game loop drives AI, rendering, and other game systems, but those aren’t the point of the pattern itself, so we’ll just call into fictitious methods here. Actually implementing &lt;code&gt;render()&lt;/code&gt;, &lt;code&gt;update()&lt;/code&gt; and others is left as a (challenging!) exercise for the reader.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;http://gameprogrammingpatterns.com/game-loop.html#run,-run-as-fast-as-you-can&quot; name=&quot;run,-run-as-fast-as-you-can&quot;&gt;Run, run as fast as you can&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We’ve already seen the simplest possible game loop:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;processInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The problem with it is you have no control over how fast the game runs. On a fast machine, that loop will spin so fast users won’t be able to see what’s going on. On a slow machine, the game will crawl. If you have a part of the game that’s content-heavy or does more AI or physics, the game will actually play slower there.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;http://gameprogrammingpatterns.com/game-loop.html#take-a-little-nap&quot; name=&quot;take-a-little-nap&quot;&gt;Take a little nap&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The first variation we’ll look at adds a simple fix. Say you want your game to run at 60 FPS. That gives you about &lt;span name=&quot;16&quot;&gt;16&lt;/span&gt; milliseconds per frame. As long as you can reliably do all of your game processing and rendering in less than that time, you can run at a steady frame rate. All you do is process the frame and then &lt;em&gt;wait&lt;/em&gt; until it’s time for the next one, like so:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://gameprogrammingpatterns.com/images/game-loop-simple.png&quot; alt=&quot;A simple game loop flowchart. Process Input → Update Game → Render → Wait, then loop back to the beginning.&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The code looks a bit like this:&lt;/p&gt;
&lt;aside name=&quot;16&quot; readability=&quot;2&quot;&gt;&lt;p&gt;&lt;em&gt;1000 ms / FPS = ms per frame&lt;/em&gt;.&lt;/p&gt;
&lt;/aside&gt;&lt;div class=&quot;codehilite&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getCurrentTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;processInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MS_PER_FRAME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getCurrentTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;sleep()&lt;/code&gt; here makes sure the game doesn’t run too &lt;em&gt;fast&lt;/em&gt; if it processes a frame quickly. It &lt;em&gt;doesn’t&lt;/em&gt; help if your game runs too &lt;em&gt;slowly&lt;/em&gt;. If it takes longer than 16ms to update and render the frame, your sleep time goes &lt;em&gt;negative&lt;/em&gt;. If we had computers that could travel back in time, lots of things would be easier, but we don’t.&lt;/p&gt;
&lt;p&gt;Instead, the game slows down. You can work around this by doing less work each frame — cut down on the graphics and razzle dazzle or dumb down the AI. But that impacts the quality of gameplay for all users, even ones on fast machines.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;http://gameprogrammingpatterns.com/game-loop.html#one-small-step,-one-giant-step&quot; name=&quot;one-small-step,-one-giant-step&quot;&gt;One small step, one giant step&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Let’s try something a bit more sophisticated. The problem we have basically boils down to:&lt;/p&gt;
&lt;ol readability=&quot;-1&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Each update advances game time by a certain amount.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;It takes a certain amount of &lt;em&gt;real&lt;/em&gt; time to process that.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;If step two takes longer than step one, the game slows down. If it takes more than 16 ms of processing to advance game time by 16ms, it can’t possibly keep up. But if we can advance the game by &lt;em&gt;more&lt;/em&gt; than 16ms of game time in a single step, then we can update the game less frequently and still keep up.&lt;/p&gt;
&lt;p&gt;The idea then is to choose a time step to advance based on how much &lt;em&gt;real&lt;/em&gt; time passed since the last frame. The longer the frame takes, the bigger steps the game takes. It always keeps up with real time because it will take bigger and bigger steps to get there. They call this a &lt;em&gt;variable&lt;/em&gt; or &lt;em&gt;fluid&lt;/em&gt; time step. It looks like:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getCurrentTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getCurrentTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elapsed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;processInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elapsed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;lastTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Each frame, we determine how much &lt;em&gt;real&lt;/em&gt; time passed since the last game update (&lt;code&gt;elapsed&lt;/code&gt;). When we update the game state, we pass that in. The engine is then responsible for advancing the game world forward by that amount of time.&lt;/p&gt;
&lt;p&gt;Say you’ve got a bullet shooting across the screen. With a fixed time step, in each frame, you’ll move it according to its velocity. With a variable time step, you &lt;em&gt;scale that velocity by the elapsed time&lt;/em&gt;. As the time step gets bigger, the bullet moves farther in each frame. That bullet will get across the screen in the &lt;em&gt;same&lt;/em&gt; amount of &lt;em&gt;real&lt;/em&gt; time whether it’s twenty small fast steps or four big slow ones. This looks like a winner:&lt;/p&gt;
&lt;p&gt;But, alas, there’s a serious problem lurking ahead: we’ve made the game &lt;span name=&quot;deterministic&quot;&gt;non-deterministic&lt;/span&gt; and unstable. Here’s one example of the trap we’ve set for ourselves:&lt;/p&gt;
&lt;aside name=&quot;deterministic&quot; readability=&quot;16&quot;&gt;&lt;p&gt;“Deterministic” means that every time you run the program, if you give it the same inputs, you get the exact same outputs back. As you can imagine, it’s much easier to track down bugs in deterministic programs — find the inputs that caused the bug the first time, and you can cause it every time.&lt;/p&gt;
&lt;p&gt;Computers are naturally deterministic; they follow programs mechanically. Non-determinism appears when the messy real world creeps in. For example, networking, the system clock, and thread scheduling all rely on bits of the external world outside of the program’s control.&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;Say we’ve got a two-player networked game and Fred has some beast of a gaming machine while George is using his grandmother’s antique PC. That aforementioned bullet is flying across both of their screens. On Fred’s machine, the game is running super fast, so each time step is tiny. We cram, like, 50 frames in the second it takes the bullet to cross the screen. Poor George’s machine can only fit in about five frames.&lt;/p&gt;
&lt;p&gt;This means that on Fred’s machine, the physics engine updates the bullet’s position 50 times, but George’s only does it five times. Most games use floating point numbers, and those are subject to &lt;em&gt;rounding error&lt;/em&gt;. Each time you add two floating point numbers, the answer you get back can be a bit off. Fred’s machine is doing ten times as many operations, so he’ll accumulate a bigger error than George. The &lt;em&gt;same&lt;/em&gt; bullet will end up in &lt;em&gt;different places&lt;/em&gt; on their machines.&lt;/p&gt;
&lt;p&gt;This is just one nasty problem a variable time step can cause, but there are more. In order to run in real time, game physics engines are approximations of the real laws of mechanics. To keep those approximations from &lt;span name=&quot;blowup&quot;&gt;blowing up&lt;/span&gt;, damping is applied. That damping is carefully tuned to a certain time step. Vary that, and the physics gets unstable.&lt;/p&gt;
&lt;aside name=&quot;blowup&quot; readability=&quot;4&quot;&gt;&lt;p&gt;“Blowing up” is literal here. When a physics engine flakes out, objects can get completely wrong velocities and launch themselves into the air.&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;This instability is bad enough that this example is only here as a cautionary tale and to lead us to something better…&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;http://gameprogrammingpatterns.com/game-loop.html#play-catch-up&quot; name=&quot;play-catch-up&quot;&gt;Play catch up&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;One part of the engine that usually &lt;em&gt;isn’t&lt;/em&gt; affected by a variable time step is &lt;span name=&quot;render&quot;&gt;rendering&lt;/span&gt;. Since the rendering engine captures an instant in time, it doesn’t care how much time advanced since the last one. It renders things wherever they happen to be right then.&lt;/p&gt;
&lt;aside name=&quot;render&quot; readability=&quot;5&quot;&gt;&lt;p&gt;This is more or less true. Things like motion blur can be affected by time step, but if they’re a bit off, the player doesn’t usually notice.&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;We can use this fact to our advantage. We’ll &lt;em&gt;update&lt;/em&gt; the game using a fixed time step because that makes everything simpler and more stable for physics and AI. But we’ll allow flexibility in when we &lt;em&gt;render&lt;/em&gt; in order to free up some processor time.&lt;/p&gt;
&lt;p&gt;It goes like this: A certain amount of real time has elapsed since the last turn of the game loop. This is how much game time we need to simulate for the game’s “now” to catch up with the player’s. We do that using a &lt;em&gt;series&lt;/em&gt; of &lt;em&gt;fixed&lt;/em&gt; time steps. The code looks a bit like:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;previous&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getCurrentTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getCurrentTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elapsed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;previous&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;previous&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;lag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elapsed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;processInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MS_PER_UPDATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MS_PER_UPDATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There’s a few pieces here. At the beginning of each frame, we update &lt;code&gt;lag&lt;/code&gt; based on how much real time passed. This measures how far the game’s clock is behind compared to the real world. We then have an inner loop to update the game, one fixed step at a time, until it’s caught up. Once we’re caught up, we render and start over again. You can visualize it sort of like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://gameprogrammingpatterns.com/images/game-loop-fixed.png&quot; alt=&quot;A modified flowchart. Process Input → Update Game → Wait, then loop back to this step then → Render → Loop back to the beginning.&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Note that the time step here isn’t the &lt;em&gt;visible&lt;/em&gt; frame rate anymore. &lt;code&gt;MS_PER_UPDATE&lt;/code&gt; is just the &lt;em&gt;granularity&lt;/em&gt; we use to update the game. The shorter this step is, the more processing time it takes to catch up to real time. The longer it is, the choppier the gameplay is. Ideally, you want it pretty short, often faster than 60 FPS, so that the game simulates with high fidelity on fast machines.&lt;/p&gt;
&lt;p&gt;But be careful not to make it &lt;em&gt;too&lt;/em&gt; short. You need to make sure the time step is greater than the time it takes to process an &lt;code&gt;update()&lt;/code&gt;, even on the &lt;span name=&quot;bail&quot;&gt;slowest&lt;/span&gt; hardware. Otherwise, your game simply can’t catch up.&lt;/p&gt;
&lt;aside name=&quot;bail&quot; readability=&quot;5&quot;&gt;&lt;p&gt;I left it out here, but you can safeguard this by having the inner update loop bail after a maximum number of iterations. The game will slow down then, but that’s better than locking up completely.&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;Fortunately, we’ve bought ourselves some breathing room here. The trick is that we’ve &lt;em&gt;yanked rendering out of the update loop&lt;/em&gt;. That frees up a bunch of CPU time. The end result is the game &lt;em&gt;simulates&lt;/em&gt; at a constant rate using safe fixed time steps across a range of hardware. It’s just that the player’s &lt;em&gt;visible window&lt;/em&gt; into the game gets choppier on a slower machine.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;http://gameprogrammingpatterns.com/game-loop.html#stuck-in-the-middle&quot; name=&quot;stuck-in-the-middle&quot;&gt;Stuck in the middle&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There’s one issue we’re left with, and that’s residual lag. We update the game at a fixed time step, but we render at arbitrary points in time. This means that from the user’s perspective, the game will often display at a point in time between two updates.&lt;/p&gt;
&lt;p&gt;Here’s a timeline:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://gameprogrammingpatterns.com/images/game-loop-timeline.png&quot; alt=&quot;A timeline containing evenly spaced Updates and intermittent Renders.&quot;/&gt;&lt;/p&gt;
&lt;p&gt;As you can see, we update at a nice tight, fixed interval. Meanwhile, we render whenever we can. It’s less frequent than updating, and it isn’t steady either. Both of those are OK. The lame part is that we don’t always render right at the point of updating. Look at the third render time. It’s right between two updates:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://gameprogrammingpatterns.com/images/game-loop-timeline-close.png&quot; alt=&quot;Close-up of the timeline showing Renders falling between Update steps.&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Imagine a bullet is flying across the screen. On the first update, it’s on the left side. The second update moves it to the right side. The game is rendered at a point in time between those two updates, so the user expects to see that bullet in the center of the screen. With our current implementation, it will still be on the left side. This means motion looks jagged or stuttery.&lt;/p&gt;
&lt;p&gt;Conveniently, we actually know &lt;em&gt;exactly&lt;/em&gt; how far between update frames we are when we render: it’s stored in &lt;code&gt;lag&lt;/code&gt;. We bail out of the update loop when it’s less than the update time step, not when it’s &lt;em&gt;zero&lt;/em&gt;. That leftover amount? That’s how far into the next frame we are.&lt;/p&gt;
&lt;p&gt;When we go to render, we’ll pass that in:&lt;/p&gt;

&lt;div class=&quot;codehilite&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MS_PER_UPDATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;aside name=&quot;normal&quot; readability=&quot;7&quot;&gt;&lt;p&gt;We divide by &lt;code&gt;MS_PER_UPDATE&lt;/code&gt; here to &lt;em&gt;normalize&lt;/em&gt; the value. The value passed to &lt;code&gt;render()&lt;/code&gt; will vary from 0 (right at the previous frame) to just under 1.0 (right at the next frame), regardless of the update time step. This way, the renderer doesn’t have to worry about the frame rate. It just deals in values from 0 to 1.&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;The renderer knows each game object &lt;em&gt;and its current velocity&lt;/em&gt;. Say that bullet is 20 pixels from the left side of the screen and is moving right 400 pixels per frame. If we are halfway between frames, then we’ll end up passing 0.5 to &lt;code&gt;render()&lt;/code&gt;. So it draws the bullet half a frame ahead, at 220 pixels. Ta-da, smooth motion.&lt;/p&gt;
&lt;p&gt;Of course, it may turn out that that extrapolation is wrong. When we calculate the next frame, we may discover the bullet hit an obstacle or slowed down or something. We rendered its position interpolated between where it was on the last frame and where we &lt;em&gt;think&lt;/em&gt; it will be on the next frame. But we don’t know that until we’ve actually done the full update with physics and AI.&lt;/p&gt;
&lt;p&gt;So the extrapolation is a bit of a guess and sometimes ends up wrong. Fortunately, though, those kinds of corrections usually aren’t noticeable. At least, they’re less noticeable than the stuttering you get if you don’t extrapolate at all.&lt;/p&gt;

&lt;p&gt;Despite the length of this chapter, I’ve left out more than I’ve included. Once you throw in things like synchronizing with the display’s refresh rate, multithreading, and GPUs, a real game loop can get pretty hairy. At a high level, though, here are a few questions you’ll likely answer:&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;http://gameprogrammingpatterns.com/game-loop.html#do-you-own-the-game-loop,-or-does-the-platform&quot; name=&quot;do-you-own-the-game-loop,-or-does-the-platform&quot;&gt;Do you own the game loop, or does the platform?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is less a choice you make and more one that’s made for you. If you’re making a game that runs in a web browser, you pretty much &lt;em&gt;can’t&lt;/em&gt; write your own classic game loop. The browser’s event-based nature precludes it. Likewise, if you’re using an existing game engine, you will probably rely on its game loop instead of rolling your own.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;http://gameprogrammingpatterns.com/game-loop.html#how-do-you-manage-power-consumption&quot; name=&quot;how-do-you-manage-power-consumption&quot;&gt;How do you manage power consumption?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This wasn’t an issue five years ago. Games ran on things plugged into walls or on dedicated handheld devices. But with the advent of smartphones, laptops, and mobile gaming, the odds are good that you do care about this now. A game that runs beautifully but turns players’ phones into space heaters before running out of juice thirty minutes later is not a game that makes people happy.&lt;/p&gt;
&lt;p&gt;Now, you may need to think not only about making your game look great, but also use as little CPU as possible. There will likely be an &lt;em&gt;upper&lt;/em&gt; bound to performance where you let the CPU sleep if you’ve done all the work you need to do in a frame.&lt;/p&gt;
&lt;ul readability=&quot;6.5&quot;&gt;&lt;li readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;strong&gt;Run as fast as it can:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is what you’re likely to do for PC games (though even those are increasingly being played on laptops). Your game loop will never explicitly tell the OS to sleep. Instead, any spare cycles will be spent cranking up the FPS or graphic fidelity.&lt;/p&gt;
&lt;p&gt;This gives you the best possible gameplay experience but, it will use as much power as it can. If the player is on a laptop, they’ll have a nice lap warmer.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;strong&gt;Clamp the frame rate:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Mobile games are often more focused on the quality of gameplay than they are on maximizing the detail of the graphics. Many of these games will set an upper limit on the frame rate (usually 30 or 60 FPS). If the game loop is done processing before that slice of time is spent, it will just sleep for the rest.&lt;/p&gt;
&lt;p&gt;This gives the player a “good enough” experience and then goes easy on their battery beyond that.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;a href=&quot;http://gameprogrammingpatterns.com/game-loop.html#how-do-you-control-gameplay-speed&quot; name=&quot;how-do-you-control-gameplay-speed&quot;&gt;How do you control gameplay speed?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A game loop has two key pieces: non-blocking user input and adapting to the passage of time. Input is straightforward. The magic is in how you deal with time. There are a &lt;span name=&quot;platform&quot;&gt;near-infinite&lt;/span&gt; number of platforms that games can run on, and any single game may run on quite a few. How it accommodates that variation is key.&lt;/p&gt;
&lt;aside name=&quot;platform&quot; readability=&quot;8&quot;&gt;&lt;p&gt;Game-making seems to be part of human nature, because every time we’ve built a machine that can do computing, one of the first things we’ve done is made games on it. The PDP-1 was a 2 kHz machine with only 4,096 words of memory, yet Steve Russell and friends managed to create Spacewar! on it.&lt;/p&gt;
&lt;/aside&gt;&lt;ul readability=&quot;7.9627906976744&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;strong&gt;Fixed time step with no synchronization:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This was our first sample code. You just run the game loop as fast as you can.&lt;/p&gt;
&lt;ul readability=&quot;0.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;em&gt;It’s simple&lt;/em&gt;. This is its main (well, only) virtue.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;em&gt;Game speed is directly affected by hardware and game complexity.&lt;/em&gt; And its main vice is that if there’s any variation, it will directly affect the game speed. It’s the fixie of game loops.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;1.9780960404381&quot;&gt;
&lt;p&gt;&lt;strong&gt;Fixed time step with synchronization:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The next step up on the complexity ladder is running the game at a fixed time step but adding a delay or synchronization point at the end of the loop to keep the game from running too fast.&lt;/p&gt;
&lt;ul readability=&quot;6.9051094890511&quot;&gt;&lt;li readability=&quot;1.9087719298246&quot;&gt;
&lt;p&gt;&lt;em&gt;Still quite simple.&lt;/em&gt; It’s only one line of code more than the probably-too-simple-to-actually-work example. In most game loops, you will likely do synchronization &lt;em&gt;anyway&lt;/em&gt;. You will probably &lt;a href=&quot;http://gameprogrammingpatterns.com/double-buffer.html&quot;&gt;double buffer&lt;/a&gt; your graphics and synchronize the buffer flip to the refresh rate of the display.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;em&gt;It’s power-friendly.&lt;/em&gt; This is a surprisingly important consideration for mobile games. You don’t want to kill the user’s battery unnecessarily. By simply sleeping for a few milliseconds instead of trying to cram ever more processing into each tick, you save power.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;em&gt;The game doesn’t play too fast.&lt;/em&gt; This fixes half of the speed concerns of a fixed loop.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;em&gt;The game can play too slowly.&lt;/em&gt; If it takes too long to update and render a game frame, playback will slow down. Because this style doesn’t separate updating from rendering, it’s likely to hit this sooner than more advanced options. Instead of just dropping &lt;em&gt;rendering&lt;/em&gt; frames to catch up, gameplay will slow down.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;strong&gt;Variable time step:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I’ll put this in here as an option in the solution space with the caveat that most game developers I know recommend against it. It’s good to remember &lt;em&gt;why&lt;/em&gt; it’s a bad idea, though.&lt;/p&gt;
&lt;ul readability=&quot;1&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;em&gt;It adapts to playing both too slowly and too fast.&lt;/em&gt; If the game can’t keep up with real time, it will just take larger and larger time steps until it does.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;em&gt;It makes gameplay non-deterministic and unstable.&lt;/em&gt; And this is the real problem, of course. Physics and networking in particular become much harder with a variable time step.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;strong&gt;Fixed update time step, variable rendering:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The last option we covered in the sample code is the most complex, but also the most adaptable. It updates with a fixed time step, but it can drop &lt;em&gt;rendering&lt;/em&gt; frames if it needs to to catch up to the player’s clock.&lt;/p&gt;
&lt;ul readability=&quot;2.5&quot;&gt;&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;&lt;em&gt;It adapts to playing both too slowly and too fast.&lt;/em&gt; As long as the game can &lt;em&gt;update&lt;/em&gt; in real time, the game won’t fall behind. If the player’s machine is top-of-the-line, it will respond with a smoother gameplay experience.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;em&gt;It’s more complex.&lt;/em&gt; The main downside is there is a bit more going on in the implementation. You have to tune the update time step to be both as small as possible for the high-end, while not being too slow on the low end.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul readability=&quot;0.43308550185874&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;The classic article on game loops is Glenn Fiedler’s “&lt;a href=&quot;http://gafferongames.com/game-physics/fix-your-timestep/&quot;&gt;Fix Your Timestep&lt;/a&gt;“. This chapter wouldn’t be the same without it.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-0.81481481481481&quot;&gt;
&lt;p&gt;Witters’ article on &lt;a href=&quot;http://www.koonsolo.com/news/dewitters-gameloop/&quot;&gt;game loops&lt;/a&gt; is a close runner-up.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-0.8953488372093&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;http://unity3d.com/&quot;&gt;Unity&lt;/a&gt; framework has a complex game loop detailed in a wonderful illustration &lt;a href=&quot;http://www.richardfine.co.uk/2012/10/unity3d-monobehaviour-lifecycle/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;nav/&gt;</description>
<pubDate>Sat, 26 Jan 2019 23:17:50 +0000</pubDate>
<dc:creator>tosh</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://gameprogrammingpatterns.com/game-loop.html</dc:identifier>
</item>
<item>
<title>When a Bike Company Put a TV on Its Box, Shipping Damages Went Down (2017)</title>
<link>https://www.bicycling.com/news/a20027122/vanmoof-tv-on-box-damaged-bikes/</link>
<guid isPermaLink="true" >https://www.bicycling.com/news/a20027122/vanmoof-tv-on-box-damaged-bikes/</guid>
<description>&lt;p class=&quot;body-text&quot;&gt;Sometimes, to make a product truly great, a company must think outside the box. But for Dutch bike manufacturer VanMoof, thinking about the box itself solved a major problem when it came to shipping.&lt;/p&gt;
&lt;p class=&quot;body-text&quot;&gt;According to &lt;a class=&quot;body-link&quot; href=&quot;http://money.cnn.com/2017/10/03/smallbusiness/vanmoof-bike-box-tv/index.html&quot; target=&quot;_blank&quot; data-vars-ga-outbound-link=&quot;http://money.cnn.com/2017/10/03/smallbusiness/vanmoof-bike-box-tv/index.html&quot;&gt;CNN&lt;/a&gt;, the company reported that more than 25 percent of its bikes were damaged before even being delivered last year. The problem was especially bad when shipping to the U.S.&lt;/p&gt;
&lt;p class=&quot;body-text&quot;&gt;&quot;Your covetable products, your frictionless website, your killer brand — they all count for nothing when your delivery partner drops the ball,&quot; Bex Rad, Vanmoof's creative director, wrote in a Medium post last year.&lt;/p&gt;
&lt;p class=&quot;body-text&quot;&gt;&lt;strong&gt;RELATED: &lt;a class=&quot;body-link&quot; href=&quot;https://www.bicycling.com/news/strava-premium-updates/&quot; data-vars-ga-outbound-link=&quot;https://www.bicycling.com/news/strava-premium-updates/&quot;&gt;Strava Will Now Reimburse You for Phone Damage and a Taxi Home&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;body-text&quot;&gt;The solution? Reconsider the packaging. &quot;We asked ourselves, what do Americans really love? What would prompt couriers to be delicate with a parcel?&quot; VanMoof co-founder Taco Carlier told CNN.&lt;/p&gt;
&lt;p class=&quot;body-text&quot;&gt;A TV was the obvious answer.&lt;/p&gt;
&lt;p class=&quot;body-text&quot;&gt;A big-screen TV box is roughly the same size and weight as a bike box. So to convince shippers to handle its products with more care, VanMoof began printing photos of TVs on its packaging. The boxes still depicted the bike, too, but at a glance it does look like you would find a massive widescreen TV inside instead of a high-end &lt;a class=&quot;body-link&quot; href=&quot;https://www.bicycling.com/bikes-gear/reviews/16-for-2016-the-years-best-city-and-commuter-bikes/&quot; data-vars-ga-outbound-link=&quot;https://www.bicycling.com/bikes-gear/reviews/16-for-2016-the-years-best-city-and-commuter-bikes/&quot;&gt;commuter bike&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;body-text&quot;&gt;&lt;strong&gt;RELATED: &lt;a class=&quot;body-link&quot; href=&quot;https://www.bicycling.com/beginners/cycling-apparel/the-5-worst-mistakes-you-make-when-washing-your-cycling-clothes/&quot; data-vars-ga-outbound-link=&quot;https://www.bicycling.com/beginners/cycling-apparel/the-5-worst-mistakes-you-make-when-washing-your-cycling-clothes/&quot;&gt;The 5 Worst Mistakes You Make When Washing Your Cycling Clothes&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;body-text&quot;&gt;Damages dropped by 80 percent since then, according to the company. Even after a &lt;em&gt;Wall Street Journal&lt;/em&gt; reporter spilled the beans by tweeting about the deception last year, the drop in damages has reportedly stayed consistent. (&lt;em&gt;Learn the secrets to bike upkeep in Rodale's&lt;/em&gt; &lt;a class=&quot;body-link&quot; href=&quot;https://offers.rodale.com/offer/600290?keycode=258504&amp;amp;rdl_source=bicycling.com&amp;amp;rdl_medium=textlink&amp;amp;rdl_campaign=%20vanmoof-tv-on-box-damaged-bikes&amp;amp;rdl_term=Repair&quot; target=&quot;_blank&quot; data-vars-ga-outbound-link=&quot;https://offers.rodale.com/offer/600290?keycode=258504&amp;amp;rdl_source=bicycling.com&amp;amp;rdl_medium=textlink&amp;amp;rdl_campaign=%20vanmoof-tv-on-box-damaged-bikes&amp;amp;rdl_term=Repair&quot;&gt;Guide to Bicycle Maintenance &amp;amp; Repair&lt;/a&gt;.)&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot; readability=&quot;6.5968586387435&quot;&gt;
&lt;p class=&quot;body-text&quot;&gt;genius idea alert: &lt;a class=&quot;body-link&quot; href=&quot;https://twitter.com/VanMoof?ref_src=twsrc%5Etfw&quot; data-vars-ga-outbound-link=&quot;https://twitter.com/VanMoof?ref_src=twsrc%5Etfw&quot;&gt;@vanmoof&lt;/a&gt; bikes had problem with shipping damage. So it put flat TVs on its boxes. Problem solved. &lt;a class=&quot;body-link&quot; href=&quot;https://t.co/dsomNATUoY&quot; data-vars-ga-outbound-link=&quot;https://t.co/dsomNATUoY&quot;&gt;pic.twitter.com/dsomNATUoY&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;body-text&quot;&gt;&amp;amp;mdash; Jason Gay (@jasongay) &lt;a class=&quot;body-link&quot; href=&quot;https://twitter.com/jasongay/status/772556605548326912?ref_src=twsrc%5Etfw&quot; data-vars-ga-outbound-link=&quot;https://twitter.com/jasongay/status/772556605548326912?ref_src=twsrc%5Etfw&quot;&gt;September 4, 2016&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;body-text&quot;&gt;The &quot;cheeky&quot; bike box was so successful, in fact, that VanMoof began talking it up nearly as much as it did the bikes inside.&quot;The pared-back VanMoof TV box comes with a free bike box inside, making it a great addition to your house for children, pets, or grown-ups,&quot; its &lt;a class=&quot;body-link&quot; href=&quot;https://www.vanmoof.com/en_us/bikes/tv-box#language&quot; target=&quot;_blank&quot; data-vars-ga-outbound-link=&quot;https://www.vanmoof.com/en_us/bikes/tv-box#language&quot;&gt;website reads&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;body-text&quot;&gt;Cyclists who have suffered shipping woes in their personal lives may wish to take heed. &lt;/p&gt;
&lt;p class=&quot;body-text&quot;&gt;&lt;em&gt;Learn some quick and easy bike maintenance tips:&lt;/em&gt;&lt;/p&gt;
​

​

</description>
<pubDate>Sat, 26 Jan 2019 21:01:10 +0000</pubDate>
<dc:creator>edward</dc:creator>
<og:type>article</og:type>
<og:title>Why This Bike Company Put a TV on Its Box</og:title>
<og:description>Dutch bike manufacturer VanMoof got fed up with how often U.S. shippers damaged its products—so they got creative</og:description>
<og:url>https://www.bicycling.com/news/a20027122/vanmoof-tv-on-box-damaged-bikes/</og:url>
<og:image>https://hips.hearstapps.com/hmg-prod.s3.amazonaws.com/images/1/170920163812-vanmoof-bike-box-780x439-1507926687.jpg?crop=1xw:0.888xh;center,top&amp;resize=1200:*</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.bicycling.com/news/a20027122/vanmoof-tv-on-box-damaged-bikes/</dc:identifier>
</item>
<item>
<title>Bill Gates promises to add his own billions if Congress does nuclear power push</title>
<link>https://www.geekwire.com/2019/report-bill-gates-promises-add-billions-congress-helps-nuclear-power-push/</link>
<guid isPermaLink="true" >https://www.geekwire.com/2019/report-bill-gates-promises-add-billions-congress-helps-nuclear-power-push/</guid>
<description>&lt;img class=&quot;size-full-width wp-image-365941&quot; src=&quot;https://cdn.geekwire.com/wp-content/uploads/2017/09/20170927_Bill_Gates_GBD_20_305-630x536.jpg&quot; alt=&quot;&quot; width=&quot;630&quot; height=&quot;536&quot; srcset=&quot;https://cdn.geekwire.com/wp-content/uploads/2017/09/20170927_Bill_Gates_GBD_20_305-630x536.jpg 630w, https://cdn.geekwire.com/wp-content/uploads/2017/09/20170927_Bill_Gates_GBD_20_305-768x654.jpg 768w, https://cdn.geekwire.com/wp-content/uploads/2017/09/20170927_Bill_Gates_GBD_20_305-1260x1073.jpg 1260w&quot; sizes=&quot;(max-width: 630px) 100vw, 630px&quot;/&gt;Microsoft co-founder and philanthropist Bill Gates. (GeekWire Photo / Kevin Lisota)
&lt;p&gt;Bill Gates said in his &lt;a href=&quot;https://www.geekwire.com/2018/china-option-fades-bill-gates-urges-u-s-take-lead-nuclear-power-good-planet/&quot;&gt;year-end letter last month&lt;/a&gt; that he planned to work to persuade U.S. leaders to embrace advanced nuclear technologies as a solution to curbing climate change. That work appears to have begun as &lt;a href=&quot;https://www.washingtonpost.com/national/health-science/bill-gates-comes-to-washington--selling-the-promise-of-nuclear-energy/2019/01/25/4bd9c030-1445-11e9-b6ad-9cfd62dbb0a8_story.html?utm_term=.b3903fced86b&quot;&gt;The Washington Post reported&lt;/a&gt; Friday that Gates is making the rounds on Capitol Hill looking for support — and billions of dollars.&lt;/p&gt;&lt;p&gt;Gates founded the Bellevue, Wash.-based TerraPower in 2006, and the venture had been working toward building a pilot project for its traveling-wave nuclear technology in China. Policy regulations put in place by the Trump administration have made that unlikely and Gates is hoping to make his grand plan happen in the U.S.&lt;/p&gt;
&lt;p&gt;The Post reported, based on accounts from congressional staffers, that the Microsoft co-founder is telling lawmakers that he personally would invest $1 billion and raise $1 billion more in private capital to go along with federal funds for TerraPower’s pilot plan.&lt;/p&gt;

&lt;p&gt;Gates has reportedly met with lawmakers from both parties, including Sens. Lamar Alexander (R-Tenn.) and Dianne Feinstein (D-Calif.). He also met with Sen. Lisa Murkowski (R-Alaska) and three other senators last month.&lt;/p&gt;
&lt;p&gt;Jonah Goldman, of Gates Ventures, stressed to The Post that Gates was not advocating for TerraPower alone. Gates thinks the U.S. has “the best minds, the best lab systems and entrepreneurs willing to take risk,” Goldman told the newspaper. “But what we don’t have is a commitment on Congress’ part.”&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-width=&quot;550&quot; data-dnt=&quot;true&quot;&gt;
&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;The world needs energy breakthroughs that improve people’s lives without contributing to climate change. As &lt;a href=&quot;https://twitter.com/IEA?ref_src=twsrc%5Etfw&quot;&gt;@IEA&lt;/a&gt; highlights in its latest report, governments have an incredible opportunity to shape the future of energy. &lt;a href=&quot;https://t.co/YCPep4ytgn&quot;&gt;https://t.co/YCPep4ytgn&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— Bill Gates (@BillGates) &lt;a href=&quot;https://twitter.com/BillGates/status/1085225853963956224?ref_src=twsrc%5Etfw&quot;&gt;January 15, 2019&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Sat, 26 Jan 2019 20:23:14 +0000</pubDate>
<dc:creator>jkuria</dc:creator>
<og:image>https://cdn.geekwire.com/wp-content/uploads/2017/09/20170927_Bill_Gates_GBD_20_305-1260x1073.jpg</og:image>
<og:type>article</og:type>
<og:title>Report: Bill Gates promises to add his own billions if Congress helps with his nuclear power push</og:title>
<og:description>Bill Gates said in his year-end letter last month that he planned to work to persuade U.S. leaders to embrace advanced nuclear technologies as a solution to curbing climate change. That work appears to have begun.</og:description>
<og:url>https://www.geekwire.com/2019/report-bill-gates-promises-add-billions-congress-helps-nuclear-power-push/</og:url>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.geekwire.com/2019/report-bill-gates-promises-add-billions-congress-helps-nuclear-power-push/</dc:identifier>
</item>
<item>
<title>Memory usage of a toy C# server and client with 500K concurrent connections on</title>
<link>https://github.com/kjpgit/techdemo/blob/master/dotnet_client_server/README.md</link>
<guid isPermaLink="true" >https://github.com/kjpgit/techdemo/blob/master/dotnet_client_server/README.md</guid>
<description>&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;In our &lt;a href=&quot;https://github.com/kjpgit/techdemo/blob/master/dotnet_task_memory_usage&quot;&gt;last episode&lt;/a&gt;, we measured the memory overhead of the simplest possible .NET Core task / coroutine. Now let's step it up and make a network server that echoes back bytes.&lt;/p&gt;
&lt;p&gt;Source code for the client and server is &lt;a href=&quot;https://github.com/kjpgit/techdemo/blob/master/dotnet_client_server/Program.cs&quot;&gt;here&lt;/a&gt;. It uses the standard .NET Core networking library, nothing fancy.&lt;/p&gt;
&lt;h2&gt;Details&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;.NET Core 2.2.102 on Ubuntu 18.04 (&lt;code&gt;dotnet --version&lt;/code&gt;). Memory information from &lt;code&gt;top&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Default threadpool settings, which appear to use 10-12 actual threads for the client, on my dual core Pentium&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unix stream sockets to make it simple (TCP is just annoying, even on loopback)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Server baseline (1 client): 79 MB RSS / 3260 MB VSS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Server loaded (500000 persistent client connections, sending requests every 30 seconds): 1000-1300 MB RSS / 4430 MB VSS (RSS fluctuates due to GC) (&lt;code&gt;dotnet run -c Release -- client 500000 30&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Delta: 1000-1200 MB RSS, 1200 MB VSS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Per client overhead (C# server process only, not including kernel): &lt;strong&gt;2000-2400 bytes RSS, 2400 bytes VSS&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Also, the client process has a very similar memory usage profile as the server process. They both end up settling at 1GB RSS after a period of time.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Again, very impressive! This is only about 2x of what the toy coroutine allocated. It's likely that the memory overhead of the language / runtime is going to be small compared to your application-specific data.&lt;/p&gt;
&lt;p&gt;Obviously C/C++/Rust (or unsafe C#) with handwritten state machines could make this way smaller, e.g. under 100 bytes. But at some point there are diminishing returns, and also developer productivity, bugs, and security are big tradeoffs.&lt;/p&gt;
&lt;p&gt;I appreciate the exceptions thrown by the runtime when I was up against max file descriptor limits. &quot;Errors must not pass silently&quot; - I'm glad C# agrees.&lt;/p&gt;
&lt;p&gt;I also appreciate that everything &quot;just worked&quot; with 500K Unix sockets. I was expecting something in the runtime (e.g. epoll) to break. .NET just keeps surprising me.&lt;/p&gt;
&lt;h2&gt;Additional Testing Tips&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;When testing, note that &lt;code&gt;/proc/self/statm&lt;/code&gt; is in &lt;em&gt;4K pages&lt;/em&gt;, unlike &lt;code&gt;top&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run &lt;code&gt;swapoff -a&lt;/code&gt; so swap isn't hiding memory usage.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To increase file descriptors in a GUI session: Set in &lt;code&gt;DefaultLimitNOFILE=2000000&lt;/code&gt; in &lt;code&gt;/etc/systemd/system.conf&lt;/code&gt; and &lt;code&gt;/etc/systemd/user.conf&lt;/code&gt;. Then reboot (yes, reboot). Also update &lt;code&gt;/proc/sys/fs/file-max&lt;/code&gt; to 3000000. Alternatively, just spawn some shells via root...&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Sat, 26 Jan 2019 20:20:18 +0000</pubDate>
<dc:creator>pplonski86</dc:creator>
<og:image>https://avatars3.githubusercontent.com/u/8010221?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>kjpgit/techdemo</og:title>
<og:url>https://github.com/kjpgit/techdemo</og:url>
<og:description>Random investigations. A very low level tech blog. - kjpgit/techdemo</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/kjpgit/techdemo/blob/master/dotnet_client_server/README.md</dc:identifier>
</item>
<item>
<title>LaTeX Coffee Stains (2009) [pdf]</title>
<link>http://hanno-rein.de/downloads/coffee.pdf</link>
<guid isPermaLink="true" >http://hanno-rein.de/downloads/coffee.pdf</guid>
<description>&lt;a href=&quot;http://hanno-rein.de/downloads/coffee.pdf&quot;&gt;Download PDF&lt;/a&gt;</description>
<pubDate>Sat, 26 Jan 2019 20:02:03 +0000</pubDate>
<dc:creator>Tomte</dc:creator>
<og:image>https://avatars3.githubusercontent.com/u/8010221?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>kjpgit/techdemo</og:title>
<og:url>https://github.com/kjpgit/techdemo</og:url>
<og:description>Random investigations. A very low level tech blog. - kjpgit/techdemo</og:description>
<dc:language>en</dc:language>
<dc:format>application/pdf</dc:format>
<dc:identifier>http://hanno-rein.de/downloads/coffee.pdf</dc:identifier>
</item>
<item>
<title>We value your privacy now, but maybe not later</title>
<link>https://raimue.blog/2019/01/26/we-value-your-privacy-now-but-maybe-not-later/</link>
<guid isPermaLink="true" >https://raimue.blog/2019/01/26/we-value-your-privacy-now-but-maybe-not-later/</guid>
<description>&lt;p&gt;Everybody knows these modal dialogs when visiting a website for the first time that ask you to accept cookies and consent to being tracked by third-party advertising networks. It actually became a habit for me to always click through these things and reject any kind of tracking or use of my personal information except for the “required” cookies.&lt;/p&gt;
&lt;p&gt;But today, I came across this dialog on &lt;a href=&quot;https://www.atlasobscura.com/&quot;&gt;atlasobscura.com&lt;/a&gt; with the title &lt;em&gt;We value your privacy&lt;/em&gt;:&lt;/p&gt;
&lt;img src=&quot;https://raimue.blog/wp-content/uploads/2019/01/Screen-Shot-2019-01-26-at-17.22.15-1024x708.png&quot; alt=&quot;&quot; class=&quot;wp-image-1235&quot; srcset=&quot;https://raimue.blog/wp-content/uploads/2019/01/Screen-Shot-2019-01-26-at-17.22.15-1024x708.png 1024w, https://raimue.blog/wp-content/uploads/2019/01/Screen-Shot-2019-01-26-at-17.22.15-300x208.png 300w, https://raimue.blog/wp-content/uploads/2019/01/Screen-Shot-2019-01-26-at-17.22.15-768x531.png 768w, https://raimue.blog/wp-content/uploads/2019/01/Screen-Shot-2019-01-26-at-17.22.15-624x432.png 624w, https://raimue.blog/wp-content/uploads/2019/01/Screen-Shot-2019-01-26-at-17.22.15.png 1194w&quot; sizes=&quot;(max-width: 1024px) 100vw, 1024px&quot;/&gt;&lt;p&gt;I highly doubt Atlas Obscura actually values my privacy when the only option is to “accept”. By the way, if you actually follow to the privacy policy to “withdraw consent”, access to the content is still blocked by this modal dialog on the next visit. Leaving technical details aside, for the layperson there is in fact no other choice than clicking “accept”, if they want to get access to the website.&lt;/p&gt;

&lt;p&gt;Now, if you actually read their &lt;a href=&quot;https://www.atlasobscura.com/privacy&quot;&gt;privacy policy&lt;/a&gt; in detail, it contains this one phrase that really stired up my blood even more:&lt;/p&gt;
&lt;blockquote class=&quot;wp-block-quote is-style-default&quot;&gt;
&lt;p&gt;Atlas Obscura may, at its sole discretion, modify this Privacy Policy at any time. By accessing the Website at any time after such modifications, you are agreeing to such modifications.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;How can such a privacy policy be legal? They claim to value my privacy and I can review what they mean by that in the policy. However, at the same time they do not commit to keep it like that and might not “value my privacy” at any later point in time.&lt;/p&gt;
&lt;p&gt;Now think this further. If this clause is in fact legal, we could set up a website with a volatile privacy policy. That would be a privacy policy that changes on every visit of the website.&lt;/p&gt;
&lt;p&gt;As an example, on the first visit, we happily tell the visitor that we do not collect any information, do not use personal information, and of course also do not sell any kinds of data to adverstising networks. However, as soon as the visitor accepted this policy (of course they are privacy aware and read the policy), it will suddenly change to the opposite. The visitor will never be informed or even asked for consent again.&lt;/p&gt;
&lt;p&gt;Would you agree to a contract that can be changed by the other party at any time in any way? You get the idea. Of course, actually implementing a privacy policy changing unexpectedly would include malice, so the visitor might have a case against it, but only if they ever notice…&lt;/p&gt;
&lt;p&gt;I just took Atlas Obscura as an example of such a policy and I do not mean to only blame this website in particular. There are in fact a lot of other sites on the web that apply &lt;a href=&quot;https://www.google.com/search?q=%22may%2C%20at%20its%20sole%20discretion%2C%20modify%20this%20Privacy%20Policy%20at%20any%20time.%22&quot;&gt;the same or a similar privacy policy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If your privacy policy contains a clause that allows you to change the policy without asking me for consent, you do not actually value my privacy.&lt;/p&gt;

</description>
<pubDate>Sat, 26 Jan 2019 18:19:45 +0000</pubDate>
<dc:creator>raimue</dc:creator>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://raimue.blog/2019/01/26/we-value-your-privacy-now-but-maybe-not-later/</dc:identifier>
</item>
<item>
<title>My Losing Battle with Enterprise Sales</title>
<link>https://lukekanies.com/my-losing-battle-with-enterprise-sales/</link>
<guid isPermaLink="true" >https://lukekanies.com/my-losing-battle-with-enterprise-sales/</guid>
<description>&lt;p&gt;&lt;em&gt;I’ve hated enterprise sales since long before I started Puppet. I just didn’t know why.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-194&quot; src=&quot;https://lukekanies.com/wp-content/uploads/2019/01/Image-1-25-19-9-52-AM.jpeg&quot; width=&quot;5472&quot; height=&quot;3648&quot; srcset=&quot;https://lukekanies.com/wp-content/uploads/2019/01/Image-1-25-19-9-52-AM.jpeg 5472w, https://lukekanies.com/wp-content/uploads/2019/01/Image-1-25-19-9-52-AM-300x200.jpeg 300w, https://lukekanies.com/wp-content/uploads/2019/01/Image-1-25-19-9-52-AM-768x512.jpeg 768w, https://lukekanies.com/wp-content/uploads/2019/01/Image-1-25-19-9-52-AM-1024x683.jpeg 1024w&quot; sizes=&quot;(max-width: 767px) 89vw, (max-width: 1000px) 54vw, (max-width: 1071px) 543px, 580px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Photo by &lt;a href=&quot;https://unsplash.com/photos/p2SMKBZ0mtM&quot;&gt;Tim Trad&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You can either be a good example or a horrible warning. When it comes to enterprise sales, I had two horrible warnings before I started Puppet.&lt;/p&gt;
&lt;p&gt;In 2000, I worked at Bluestar, a business DSL startup in Nashville. Pretty much everything that can go wrong with a startup did with this one: Founder was pushed out the week I started (I swear it wasn’t my fault), they raised too much money ($450m) and then spent it badly (e.g., on hardware that didn’t work and on salespeople that didn’t sell), they brought in a big business CEO who had no idea how to run a growth company, and then the regulatory framework shifted to highly advantage monopolies again so they all went broke. But in the meantime, I got to learn a lot, both about the problems that eventually resulted in my starting Puppet, and also about what does and doesn’t work in business.&lt;/p&gt;
&lt;p&gt;At one point, the company decided to buy a new product. I honestly can’t remember what it was for. Something related to asset tracking? Or maybe some kind of operational monitoring software?&lt;/p&gt;
&lt;p&gt;I don’t know. I just know I shifted from being a sysadmin to responsible for making it work. I wasn’t part of the team that decided whether to buy something, and if so, which one to buy, I was just designated to put their decisions into action. In the months I worked on it, I don’t think we ever even got it installed anywhere except on a test server, and at some point we just, ah, decided we didn’t need it any more. The project went away, so I returned to my old job. The executive who had made this horrible decision had the gall to say my moving back to my old role was a strike against me, and it would reflect on my tenure at the company. No worries, he was gone the next month.&lt;/p&gt;
&lt;p&gt;This wasn’t just a software problem. While the company was slowly dying, they had an argument with EMC over a storage array they never should have purchased. A million dollars of hardware sat in a receiving warehouse for almost a year, because we would not accept it, and EMC would not take it back.&lt;/p&gt;
&lt;p&gt;The second warning was during my brief stint at Bladelogic. I worked there for less than six months, but I learned a &lt;em&gt;lot&lt;/em&gt;. Again, mostly what not to do. I was ostensibly a product manager, but in practice they just wanted me to maintain their lab and maybe write some justifications for how their product worked. Certainly they did not want to listen to me. My most memorable experience is being in an all-dev-team meeting when the most senior engineer said something like, “What does it matter what the customer thinks? They already bought the product.” Astoundingly, the CTO did not fire him on the spot, and instead just moved on, ignoring the comment entirely.&lt;/p&gt;
&lt;p&gt;It was clear Bladelogic’s business model enabled them to just not care what their customers thought. Only&lt;em&gt;prospects&lt;/em&gt; mattered. Once the deal was closed, meh, they got paid, no biggie. You literally could not upgrade their software without losing all of your data — you know, the stuff you’re using to build and deploy your whole infrastructure — and doing any real work with the system required that you do everything twice, once to deploy and the second time to update. But you’d never discover that unless you actually used the software, which would be long after their salespeople left, so who cares? Not them.&lt;/p&gt;
&lt;p&gt;You can maybe see why I lasted less than six months. It didn’t help that I was commuting between Boston and Nashville, and I’d managed to rent an apartment at the center of a cold vortex in Boston where my roommate collected &lt;a href=&quot;https://www.ebay.com/itm/Grateful-Dead-Red-Unwine-1st-Edition-Bottle-3-Dancing-Skeletons-non-alcoholic-/281599334403&quot;&gt;Grateful Dead grape juice&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So when I started Puppet, I didn’t know much, but I at least had some anti-patterns. I knew we had to care more about our customers successfully using the product than we did about closing the initial deal, and that selling to people who would not use the software was a bad idea.&lt;/p&gt;
&lt;p&gt;It turns out, that’s not quite sufficient to develop an effective sales strategy. Who knew?&lt;/p&gt;
&lt;p&gt;I was lucky enough to hire the best sales leader in Oregon, who was not only incredibly skilled and experienced, he was also used to entrepreneurs and found me relatively sane compared to bosses he’d had in the past. Where a bunch of our engineers complained every time I opened my mouth, this guy quietly soldiered on. That made our years-long argument much easier to manage.&lt;/p&gt;
&lt;p&gt;Early on, I didn’t know enough to break down what I wanted and what I didn’t, or how to talk about the individual behaviors, so I just wrapped up everything I hated and called it “enterprise sales”. We weren’t doing that. Ironically, our sales leader agreed with most of my concerns, so it wasn’t a real fight in the normal sense, but there were multiple areas he was convinced we needed to change, and it’s hard to do that when your ignorant CEO just puts up a ward against the evil eye and changes the subject.&lt;/p&gt;
&lt;p&gt;Within a couple of years, he wouldn’t even say the word ‘enterprise’, because I would jump down his throat, proverbially speaking.&lt;/p&gt;
&lt;p&gt;In the first few years of building Puppet, I tended to focus on preventing sales from skewing our product plans. I wanted to be sure we built products to be used, not sold, and I didn’t trust myself or the team to be able to tell the difference. I think this was basically right, but today, I would know that you should treat ideas from sales like you treat those from customers:&lt;/p&gt;
&lt;p&gt;Always listen to what customers tell you, but never do what they say.&lt;/p&gt;
&lt;p&gt;The sales team has a limited lens into the product world. They are smart and highly educated about your customer, but that doesn’t automatically translate into good solutions.&lt;/p&gt;
&lt;p&gt;This is a general risk at any company with sales teams, but you have an even more pernicious variant with enterprise sales teams: Being confused on who your customer is.&lt;/p&gt;
&lt;p&gt;Are you building the product for the person who buys it, or the one who uses it?&lt;/p&gt;
&lt;p&gt;Remember back to that product I tried to set up at Bluestar. It was purchased to solve a business problem, and the person who decided to buy it did so based on discussions with sales and, probably, looking very closely at a grid of check marks comparing it to its competitors.&lt;sup&gt;&lt;a id=&quot;ffn1&quot; href=&quot;https://lukekanies.com/my-losing-battle-with-enterprise-sales/#fn1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; Actually using it was someone else’s problem.&lt;/p&gt;
&lt;p&gt;In fact, I was not going to be the user either — I was supposed to be its administrator. Some other team (support or installation, probably) was going to actually use it. So they were even further from the buying decision.&lt;/p&gt;
&lt;p&gt;If you’re selling to the enterprise, getting a deal done requires that you convince the buyer that your product is a winner. That makes them the most important person at the customer. Now, a quality company would also involve users, administrators, and many others in a buying decision, but in the end, buyer decides. Two or three decades ago, these decisions were mostly made on the golf course, so schmoozing was the most important feature. Today, it’s a lot less corrupt, but not a whole lot more functional.&lt;/p&gt;
&lt;p&gt;This brings us to the other problem in this separation between user and buyer: Enterprise sales is a team sale, not selling to one user. Suddenly you succeed based on your ability to manage the interpersonal relationships of warring sub-teams at your customer, instead of the strengths of your product. I distinctly remember a dinner with tens of customer employees, and there was almost a flashing DMZ between two teams, who had differing opinions on whether our solutions was the right one. Salesperson quality and experience begin to matter more than anything else, because you’re basically managing internal politics to get a deal done.&lt;/p&gt;
&lt;p&gt;Where did the focus on our product go? How do we stay focused on building something our users love?&lt;/p&gt;
&lt;p&gt;We don’t, really. It’s hard to sustain an effective a feedback loop that includes sales if they’re focused more on people and politics than products. Not impossible. But hard.&lt;/p&gt;
&lt;p&gt;At a big company, you can begin to navigate this kind of cognitive dissonance — listen to your sales team, but don’t build the products they demand. But in the early days of Puppet, I knew I couldn’t handle it. I am not good at dissonance in general — I’m a bit too fond of the idea that there’s just one truth — but I especially knew my organization could not handle it. We needed to be 100% aligned, and that meant sales needed to be working on the same problems as our product teams. Thus, no enterprise sales.&lt;/p&gt;
&lt;p&gt;As we got bigger, the other big problem with enterprise sales starts to show up: Wow is it expensive. Lew Cirne of New Relic told me the primary reason he sold Wily when he did is because he needed to $150m just to build out the sales team and it wasn’t worth it.&lt;/p&gt;
&lt;p&gt;If you’re doing inside sales, you’ve probably got someone who can talk through most of the product, they can talk to ten or more customers a day, and only once in a while will they pull someone in to help get a deal done. Once you go enterprise, you have field reps who might be covering thousands of square miles of territory, so if you’re lucky they’ll do three meetings a day on average, and they need a sales engineer on almost every visit. They pull in an expensive executive for meetings as often as an inside rep would pull in a cheap sales engineer.&lt;/p&gt;
&lt;p&gt;Yes, you can get much bigger deals done this way, but think about the disruption to your organization: Essentially everyone on your leadership team is taking time away from running the business, not to learn from customers but just to make them feel loved enough to write a big check. Your deals start taking nine months to close instead of six weeks, and getting a check signed begins to look more like a challenge level in a video game than a partnership to solve customer problems. And the boss fight of that game is the worst part of enterprise sales: Procurement.&lt;/p&gt;
&lt;p&gt;I’m not in the habit of disrespecting roles or teams, and I think procurement is often staffed with experts who play a vital role in their company. But they are generally paid based on how much money they “save” the company. All that discounting that you have to do for enterprise clients? It’s because procurement’s bonus is based on how much of a discount they force you to give. Absolutely everyone knows this is how it works, and that everyone knows this, so it’s just a game. I offer my product for a huge price, you try to force a discount, and then at the end we all compare notes to see how we did relative to market. Neither of us really wants to be too far out of spec; I want to keep my average prices the same, and you just want to be sure you aren’t paying too much.&lt;/p&gt;
&lt;p&gt;But because companies compensate procurement based on saving money rather than making good decisions about what to buy, we can sell crappy products at a steep discount but not good products at list price.&lt;/p&gt;
&lt;p&gt;It’s a helluva boss fight.&lt;/p&gt;
&lt;p&gt;There’s often a miniboss, too: Legal. They just want their pound of flesh, and often this seems more like a puzzle level than a direct fight. I recently saw a deal that had been in legal for a &lt;em&gt;year&lt;/em&gt;. That’s too much puzzle for me. (Incidentally, I worked on that same customer more than 4 years ago. Talk about long sales cycles.)&lt;/p&gt;
&lt;p&gt;So now you begin to see why I fought against enterprise sales: It encourages you to build the wrong product for the wrong person and then sell it the wrong way at the wrong price.&lt;/p&gt;
&lt;p&gt;Why, then, is it so popular? Or rather, why is it so hard to avoid that despite my best efforts we ended up in an enterprise sales motion, which I then ran away from?&lt;/p&gt;
&lt;p&gt;Well, first and foremost, if it works it’s incredibly lucrative. For all that Lew Cirne built New Relic in response to his experience at Wily, and pointedly avoided enterprise sales for years, once they went public they went through a dramatic transformation and added it in, because the money was just too appealing. The biggest companies buy the most software, and, well, the biggest companies want to be sold a specific way.&lt;/p&gt;
&lt;p&gt;In many cases, you just can’t avoid it. That’s a lot of what happened at Puppet: Our products were built to solve problems that big companies have. Heterogeneous environments, every operating system and application known to man, complex networks, and heavy compliance needs. Turns out it’s rare that a company has all these problems but buys large software products like you buy toilet paper.&lt;/p&gt;
&lt;p&gt;Our first deals at companies did tend to look very consumer-like. But once they wanted to expand to other teams, and especially if they wanted to cover the whole company, the relationship naturally switched to a team sale, where we’re having to work with legal, procurement, executives, and then reps from three or four other teams. Ideally someone inside the org is an advocate for our product, so it’s more facilitation than direct selling, but the problem still stands: This is a clear enterprise sale.&lt;/p&gt;
&lt;p&gt;But when it works… wow. You start closing $100k deals, then $300k, then $1m, then $10m. This starts to add up.&lt;/p&gt;
&lt;p&gt;And for all that I’ve said this is hard… it’s actually the easiest way to sell.&lt;/p&gt;
&lt;p&gt;What’s actually hard is having the best product, and only ever winning based on merit. Enterprise sales is the default motion, and in many cases it’s chosen to paper over weaknesses in the product. After all, only the user would actually notice those; in a meeting with the CIO, procurement, legal, and project management, no one’s going to install the product and give it a runout.&lt;/p&gt;
&lt;p&gt;We’re still super early as an industry in our understanding of how to build a product that doesn’t rely on enterprise sales. For all that Atlassian relies more on sales than it has said, there’s no question that they managed to avoid an enterprise selling motion. I’m hoping the next generations of software companies will learn from them instead of Workday.&lt;/p&gt;
&lt;p&gt;In the meantime, hopefully this story of how I fought enterprise sales, and why, will help you make better decisions about how to build your own teams. At the least, maybe I can just be a horrible warning.&lt;/p&gt;
&lt;ol id=&quot;footnotes&quot;&gt;&lt;li id=&quot;fn1&quot;&gt;These feature check lists are bad ideas. Don’t trust them as a user, don’t make them as a product marketer. &lt;a href=&quot;https://lukekanies.com/my-losing-battle-with-enterprise-sales/#ffn1&quot;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
<pubDate>Sat, 26 Jan 2019 17:24:24 +0000</pubDate>
<dc:creator>aberoham</dc:creator>
<og:type>article</og:type>
<og:title>My Losing Battle with Enterprise Sales</og:title>
<og:url>https://lukekanies.com/my-losing-battle-with-enterprise-sales/</og:url>
<og:description>I’ve hated enterprise sales since long before I started Puppet. I just didn’t know why.</og:description>
<og:image>https://lukekanies.com/wp-content/uploads/2019/01/Image-1-25-19-9-52-AM.jpeg</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://lukekanies.com/my-losing-battle-with-enterprise-sales/</dc:identifier>
</item>
<item>
<title>“Facebook are going to monetize encrypted messaging by consolidating metadata”</title>
<link>https://threader.app/thread/1088914192847917056</link>
<guid isPermaLink="true" >https://threader.app/thread/1088914192847917056</guid>
<description>&lt;div class=&quot;thread-head&quot;&gt;

&lt;div class=&quot;pic-user d-inline&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://threader.app/@sarahjamielewis&quot;&gt;&lt;img id=&quot;post-img-user&quot; class=&quot;users-thread&quot; src=&quot;https://pbs.twimg.com/profile_images/1040578228195414016/jlfiC_Gz.jpg&quot;/&gt;&lt;/a&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p class=&quot;thread-part&quot; id=&quot;thread-post-start&quot;&gt;Facebook are going to monetize encrypted messaging by consolidating metadata analysis of 3 key platforms (Messenger, Whatsapp &amp;amp; Instagram). They will make money by tracking your relationships and social groups. They will make that information easily accessible to law enforcement.&lt;/p&gt;
&lt;p class=&quot;thread-part&quot;&gt;They will build the largest surveillance system ever conceived and will sell it under the banner of consumer encryption.&lt;/p&gt;
&lt;p class=&quot;thread-part&quot;&gt;They will say that this delivers on the dream of secure usable communication that balances privacy, security and law enforcement.&lt;/p&gt;
&lt;p class=&quot;thread-part&quot;&gt;We @&lt;a class=&quot;tweet-url username&quot; href=&quot;https://twitter.com/OpenPriv&quot; data-screen-name=&quot;OpenPriv&quot; rel=&quot;nofollow&quot;&gt;OpenPriv&lt;/a&gt; believe that your social connections, friendship groups and patterns of life should not be monetized or sold for profit. We believe that actual privacy and security must protect metadata as well as content.&lt;/p&gt;
&lt;p class=&quot;thread-part&quot;&gt;Sex Workers and Queer People are already facing the wrath of Facebook's metadata collection. Facebook already puts them in danger by outing them to people it assumes they know, allow them to be directly targeted, and directly censored, based on assumed associations.&lt;/p&gt;
&lt;p class=&quot;thread-part&quot;&gt;When we celebrate Facebook bringing end to end encryption to millions more people we miss the forest for the trees.&lt;/p&gt;&lt;p&gt;The point of all this isn't accessible privacy it's inaccessible surveillance.&lt;/p&gt;
&lt;p class=&quot;thread-part&quot;&gt;We, @&lt;a class=&quot;tweet-url username&quot; href=&quot;https://twitter.com/OpenPriv&quot; data-screen-name=&quot;OpenPriv&quot; rel=&quot;nofollow&quot;&gt;OpenPriv&lt;/a&gt;, are building Cwtch, a metadata resistant communication tool, (&lt;a href=&quot;https://openprivacy.ca/blog/2018/06/28/announcing-cwtch/&quot; title=&quot;https://openprivacy.ca/blog/2018/06/28/announcing-cwtch/&quot; rel=&quot;nofollow&quot;&gt;&lt;span class=&quot;tco-ellipsis&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;https://&lt;/span&gt;&lt;span class=&quot;js-display-url&quot;&gt;openprivacy.ca/blog/2018/06/2&lt;/span&gt;&lt;span&gt;8/announcing-cwtch/&lt;/span&gt;&lt;span class=&quot;tco-ellipsis&quot;&gt;&lt;span&gt; &lt;/span&gt;…&lt;/span&gt;&lt;/a&gt;) as a non-profit because we *know* that you can't protect the most marginalized people in society AND also make money.&lt;/p&gt;&lt;p&gt;We will be releasing an alpha of Cwtch on February 14th.&lt;/p&gt;
&lt;p class=&quot;thread-part&quot;&gt;Facebook is not a secure space for sex workers and queer people. What happens when the current content policies and moderation capabilities are extended and augmented by metadata analysis from private chat apps?&lt;/p&gt;
&lt;p class=&quot;thread-part&quot;&gt;What happens when Facebook is forced by a conservative government to hand over group relationships of groups it has categorized as &quot;interested in sex work&quot; all wrapped up with a Facebook augmented social graph.&lt;/p&gt;
&lt;p class=&quot;thread-part&quot;&gt;What kind of world do you think we are actually building?&lt;/p&gt;
&lt;p class=&quot;thread-part&quot;&gt;This isn't a conspiracy theory. This is just how the world works today extrapolated into the future - with optimism that things don't get worse.&lt;/p&gt;&lt;p&gt;Spoiler alert: Things are going to get worse.&lt;/p&gt;
&lt;p class=&quot;thread-part&quot;&gt;The truth is that there are way worse scenarios to confront if we assume that 1 corporation is going to own and operate the largest, encrypted communication network ever.&lt;/p&gt;
&lt;p class=&quot;thread-part&quot;&gt;A few months ago I wrote a position paper for a conference on the future of cybersecurity and the same points apply to this. We need surveillance resistant tech.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://openprivacy.ca/assets/open-privacy-position-paper-ccd-2018.pdf&quot; title=&quot;https://openprivacy.ca/assets/open-privacy-position-paper-ccd-2018.pdf&quot; rel=&quot;nofollow&quot;&gt;&lt;span class=&quot;tco-ellipsis&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;https://&lt;/span&gt;&lt;span class=&quot;js-display-url&quot;&gt;openprivacy.ca/assets/open-pr&lt;/span&gt;&lt;span&gt;ivacy-position-paper-ccd-2018.pdf&lt;/span&gt;&lt;span class=&quot;tco-ellipsis&quot;&gt;&lt;span&gt; &lt;/span&gt;…&lt;/span&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p class=&quot;thread-part&quot;&gt;Facebook isn't a public utility, they are a corporation that needs to make money, and the way they make money is through surveillance.&lt;/p&gt;&lt;p&gt;You get to decided if you want to be part of their economy.&lt;/p&gt;
&lt;p class=&quot;thread-part&quot;&gt;To undercut myself a little - the vast majority of you likely have nothing to lose by being part of the economy. For many it will likely be much better.&lt;/p&gt;&lt;p&gt;For those of us who experience systemic oppression, those of us who know the harms of surveillance, can see what is coming.&lt;/p&gt;
&lt;p class=&quot;thread-part&quot;&gt;With the exception of the particular NYTimes article that confirmed some of these future Facebook plans, nothing I have said in this thread is new, the risks aren't new, the concerns aren't new.&lt;/p&gt;&lt;p&gt;This thread isn't a warning, it is a reminder.&lt;/p&gt;
&lt;p&gt;You can follow &lt;a href=&quot;https://twitter.com/SarahJamieLewis&quot;&gt;Sarah Jamie Lewis&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;share-info&quot;&gt;Share this thread&lt;/span&gt;&lt;span class=&quot;bookmark-info&quot;&gt;Bookmark&lt;/span&gt;
&lt;/p&gt;&lt;p&gt;____&lt;br/&gt;Tip: mention &lt;a href=&quot;https://twitter.com/threader_app&quot; target=&quot;_blank&quot;&gt;@threader_app&lt;/a&gt; on a Twitter thread with the keyword “compile” to get a link to it.&lt;/p&gt;&lt;p&gt;Enjoy Threader? &lt;a href=&quot;https://threader.app/thread/1088914192847917056#&quot; data-target=&quot;#modalsignup&quot; id=&quot;popsignup&quot;&gt;Sign up&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;span id=&quot;download-url&quot;&gt;Download &lt;a href=&quot;https://itunes.apple.com/us/app/threader/id1317519091?mt=8&quot; target=&quot;_blank&quot;&gt;Threader&lt;/a&gt; on iOS.&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 26 Jan 2019 16:25:18 +0000</pubDate>
<dc:creator>mariedm</dc:creator>
<og:title>A thread written by @SarahJamieLewis</og:title>
<og:image>https://pbs.twimg.com/media/Dxyf1viUcAAnIGP.jpg</og:image>
<og:description>Facebook are going to monetize encrypted messaging by consolidating metadata analysis of 3 key platforms (Messenger, Whatsapp &amp;amp; Instagram). They will make money by tracking your relationships and social groups. They will make that information easily accessible to law enforcement.</og:description>
<og:url>https://threader.app/thread/1088914192847917056</og:url>
<og:type>article</og:type>
<dc:format>text/html</dc:format>
<dc:identifier>https://threader.app/thread/1088914192847917056</dc:identifier>
</item>
</channel>
</rss>