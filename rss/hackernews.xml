<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>MIPS Goes Open Source</title>
<link>https://www.eetimes.com/document.asp?doc_id=1334087</link>
<guid isPermaLink="true" >https://www.eetimes.com/document.asp?doc_id=1334087</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://www.eetimes.com/document.asp?doc_id=1334087&quot;&gt;https://www.eetimes.com/document.asp?doc_id=1334087&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=18701145&quot;&gt;https://news.ycombinator.com/item?id=18701145&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 297&lt;/p&gt;
&lt;p&gt;# Comments: 81&lt;/p&gt;
</description>
<pubDate>Mon, 17 Dec 2018 18:58:26 +0000</pubDate>
<dc:creator>walterbell</dc:creator>
<dc:identifier>https://www.eetimes.com/document.asp?doc_id=1334087</dc:identifier>
</item>
<item>
<title>Clojure 1.10 release</title>
<link>https://clojure.org/news/2018/12/17/clojure110</link>
<guid isPermaLink="true" >https://clojure.org/news/2018/12/17/clojure110</guid>
<description>&lt;div class=&quot;paragraph&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;Clojure 1.10 focuses on two major areas: improved error reporting and Java compatibility.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; readability=&quot;14.646680942184&quot;&gt;
&lt;p&gt;Error reporting at the REPL now &lt;a href=&quot;https://clojure.org/reference/repl_and_main#_error_printing&quot;&gt;categorizes&lt;/a&gt; errors based on their phase of execution (read, macroexpand, compile, etc). Errors carry additional information about location and context as data, and present phase-specific error messages with better location reporting. This functionality is built into the clojure.main REPL, but the functionality is also available to other REPLs and tools with the ability to use and/or modify the data to produce better error messages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; readability=&quot;11&quot;&gt;
&lt;p&gt;Clojure 1.10 now requires Java 8 or above and has been updated particularly for compatibility with Java 8 and Java 11. Changes included bytecode-related bug fixes, removed use of deprecated APIs, and updates related to the module system introduced in Java 9.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;See the &lt;a href=&quot;https://github.com/clojure/clojure/blob/master/changes.md#changes-to-clojure-in-version-110&quot;&gt;change log&lt;/a&gt; for a complete list of all fixes, enhancements, and new features in Clojure 1.10.&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Mon, 17 Dec 2018 17:42:57 +0000</pubDate>
<dc:creator>finalfantasia</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://clojure.org/news/2018/12/17/clojure110</dc:identifier>
</item>
<item>
<title>Google’s Secret China Project “Effectively Ended” After Internal Confrontation</title>
<link>https://theintercept.com/2018/12/17/google-china-censored-search-engine-2/</link>
<guid isPermaLink="true" >https://theintercept.com/2018/12/17/google-china-censored-search-engine-2/</guid>
<description>&lt;div data-reactid=&quot;200&quot; readability=&quot;29.779208831647&quot;&gt;
&lt;p&gt;&lt;u&gt;Google has been&lt;/u&gt; forced to shut down a data analysis system it was using to develop a censored search engine for China after members of the company’s privacy team raised internal complaints that it had been kept secret from them, The Intercept has learned.&lt;/p&gt;
&lt;p&gt;The internal rift over the system has had massive ramifications, effectively ending work on the censored search engine, known as Dragonfly, according to two sources familiar with the plans. The incident represents a major blow to top Google executives, including CEO Sundar Pichai, who have over the last two years made the China project one of their main priorities.&lt;/p&gt;
&lt;p lang=&quot;en-US&quot;&gt;The dispute began in mid-August, when the The Intercept &lt;a href=&quot;https://theintercept.com/2018/08/08/google-censorship-china-blacklist/&quot;&gt;revealed&lt;/a&gt; that Google employees working on Dragonfly had been using a Beijing-based website to help develop blacklists for the censored search engine, which was designed to block out broad categories of information related to democracy, human rights, and peaceful protest, in accordance with strict rules on censorship in China that are enforced by the country’s authoritarian Communist Party government.&lt;/p&gt;

&lt;/div&gt;
&lt;div data-reactid=&quot;202&quot; readability=&quot;74.344305120167&quot;&gt;
&lt;p lang=&quot;en-US&quot;&gt;The Beijing-based website, 265.com, is a Chinese-language web directory service that claims to be “China’s most used homepage.” Google purchased the site in 2008 from Cai Wensheng, a billionaire Chinese entrepreneur. 265.com provides its Chinese visitors with news updates, information about financial markets, horoscopes, and advertisements for cheap flights and hotels. It also has a function that allows people to search for websites, images, and videos. However, search queries entered on 265.com are redirected to Baidu, the most popular search engine in China and Google’s main competitor in the country. As The Intercept &lt;a href=&quot;https://theintercept.com/2018/08/08/google-censorship-china-blacklist/&quot;&gt;reported&lt;/a&gt; in August, it appears that Google has used 265.com as a honeypot for market research, storing information about Chinese users’ searches before sending them along to Baidu.&lt;/p&gt;
&lt;p lang=&quot;en-US&quot;&gt;According to two Google sources, engineers working on Dragonfly obtained large datasets showing queries that Chinese people were entering into the 265.com search engine. At least one of the engineers obtained a key needed to access an “application programming interface,” or API, associated with 265.com, and used it to harvest search data from the site. Members of Google’s privacy team, however, were kept in the dark about the use of 265.com.&lt;/p&gt;

&lt;blockquote class=&quot;stylized pull-right&quot; data-shortcode-type=&quot;pullquote&quot; data-pull=&quot;right&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;Several groups of engineers have now been moved off of Dragonfly completely and told to shift their attention away from China.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span lang=&quot;en-US&quot;&gt;The engineers used the data they pulled from 265.com to learn about the kinds of things that people located in mainland China routinely search for in Mandarin. This helped them to build a prototype of Dragonfly. The engineers used the sample queries from 265.com, for instance, to review lists of websites Chinese people would see if they typed the same word or phrase into Google. They then used a&lt;/span&gt; &lt;span lang=&quot;en-US&quot;&gt;tool they called “BeaconTower” to check whether&lt;/span&gt; &lt;span lang=&quot;en-US&quot;&gt;any websites in the Google search results would be&lt;/span&gt; &lt;span lang=&quot;en-US&quot;&gt;blocked by&lt;/span&gt; &lt;span lang=&quot;en-US&quot;&gt;China’s internet censorship system, known as the&lt;/span&gt; &lt;span lang=&quot;en-US&quot;&gt;Great Firewall.&lt;/span&gt; &lt;span lang=&quot;en-US&quot;&gt;Through this process, the engineers compiled a list of thousands of banned websites, which they integrated into the Dragonfly search platform so that it would purge links to websites prohibited in China, such as those&lt;/span&gt; &lt;span lang=&quot;en-US&quot;&gt;of&lt;/span&gt; the online encyclopedia Wikipedia and British news broadcaster BBC.&lt;/p&gt;
&lt;p lang=&quot;en-US&quot;&gt;Under normal company protocol, analysis of people’s search queries is subject to tight constraints and should be reviewed by the company’s privacy staff, whose job is to safeguard user rights. But the privacy team only found out about the 265.com data access after The Intercept revealed it, and were “really pissed,” according to one Google source. Members of the privacy team confronted the executives responsible for managing Dragonfly. Following a series of discussions, two sources said, Google engineers were told that they were no longer permitted to continue using the 265.com data to help develop Dragonfly, which has since had severe consequences for the project.&lt;/p&gt;
&lt;p lang=&quot;en-US&quot;&gt;“The 265 data was integral to Dragonfly,” said one source. “Access to the data has been suspended now, which has stopped progress.”&lt;/p&gt;
&lt;p lang=&quot;en-US&quot;&gt;In recent weeks, teams working on Dragonfly have been told to use different datasets for their work. They are no longer gathering search queries from mainland China and are instead now studying “global Chinese” queries that are entered into Google from people living in countries such as the United States and Malaysia; those queries are qualitatively different from searches originating from within China itself, making it virtually impossible for the Dragonfly team to hone the accuracy of results. Significantly, several groups of engineers have now been moved off of Dragonfly completely, and told to shift their attention away from China to instead work on projects related to India, Indonesia, Russia, the Middle East and Brazil.&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;Newsletter-shortcode Newsletter-shortcode-layout-full&quot; data-reactid=&quot;203&quot;&gt;
&lt;div class=&quot;Newsletter-shortcode-container&quot; data-reactid=&quot;205&quot;&gt;
&lt;h3 class=&quot;Newsletter-shortcode-headline&quot; data-reactid=&quot;206&quot;&gt;Join Our Newsletter&lt;/h3&gt;
&lt;h3 class=&quot;Newsletter-shortcode-subhead&quot; data-reactid=&quot;207&quot;&gt;Original reporting. Fearless journalism. Delivered to you.&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;Newsletter-shortcode-link-cta&quot; data-reactid=&quot;209&quot;&gt;I’m in&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div data-reactid=&quot;212&quot; readability=&quot;38.081902893575&quot;&gt;
&lt;p lang=&quot;en-US&quot;&gt;Records show that 265.com is still hosted on Google servers, but its physical address is listed under the name of the “Beijing Guxiang Information and Technology Co.,” which has an office space on the third floor of a tower building in northwest Beijing’s Haidian district. 265.com is operated as a Google subsidiary, but unlike most Google-owned websites — such as YouTube and Google.com — it is not blocked in China and can be freely accessed by people in the country using any standard internet browser.&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;en-US&quot;&gt;The internal dispute at Google over the 265.com data access is not the first time important information related to Dragonfly has been withheld from the company’s privacy team. The Intercept&lt;/span&gt; &lt;a href=&quot;https://theintercept.com/2018/11/29/google-china-censored-search/&quot;&gt;reported&lt;/a&gt; &lt;span lang=&quot;en-US&quot;&gt;in November that privacy and security employees working on the project had been shut out of key meetings and felt that senior executives had sidelined them. Yonatan Zunger,&lt;/span&gt; &lt;span lang=&quot;en-US&quot;&gt;formerly&lt;/span&gt; a 14-year veteran of Google and one of the leading engineers at the company, &lt;span lang=&quot;en-US&quot;&gt;worked on Dragonfly for several months last year and said the project was shrouded in extreme secrecy and handled in a “highly unusual” way from the outset. Scott Beaumont, Google’s leader in China and a key architect of the Dragonfly project, “&lt;/span&gt;&lt;span lang=&quot;en-US&quot;&gt;did not feel that the security, privacy, and legal teams should be able to question his product decisions,”&lt;/span&gt; &lt;span lang=&quot;en-US&quot;&gt;according to Zunger,&lt;/span&gt; &lt;span lang=&quot;en-US&quot;&gt;“and maintained an openly adversarial relationship with them — quite outside the Google norm.”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Last week, Pichai, Google’s CEO, appeared before Congress, where he &lt;a href=&quot;https://theintercept.com/2018/12/11/google-congressional-hearing/&quot;&gt;faced questions&lt;/a&gt; on Dragonfly. Pichai stated that “right now” there were no plans to launch the search engine, though refused to rule it out in the future. Google had originally &lt;a href=&quot;https://theintercept.com/2018/10/09/google-china-censored-search-engine/&quot;&gt;aimed&lt;/a&gt; to launch Dragonfly between January and April 2019. Leaks about the plan and the extraordinary backlash that ensued both &lt;a href=&quot;https://theintercept.com/2018/11/27/hundreds-of-google-employees-tell-bosses-to-cancel-censored-search-amid-worldwide-protests/&quot;&gt;internally&lt;/a&gt; and &lt;a href=&quot;https://theintercept.com/2018/12/10/rights-groups-pressure-google-on-china-censorship-ahead-of-congressional-hearing/&quot;&gt;externally&lt;/a&gt; appear to have forced company executives to shelve it at least in the short term, two sources familiar with the project said.&lt;/p&gt;
&lt;p lang=&quot;en-US&quot;&gt;Google did not respond to requests for comment.&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Mon, 17 Dec 2018 17:35:31 +0000</pubDate>
<dc:creator>uptown</dc:creator>
<og:url>https://theintercept.com/2018/12/17/google-china-censored-search-engine-2/</og:url>
<og:description>Google reassigned several groups of engineers away from a planned censored search engine after a rift over its use of real internet queries in China for testing.</og:description>
<og:image>https://theintercept.imgix.net/wp-uploads/sites/1/2018/12/GettyImages-1040611142-1544738780-e1544738960291.jpg?auto=compress%2Cformat&amp;q=90&amp;fit=crop&amp;w=1200&amp;h=800</og:image>
<og:type>article</og:type>
<og:title>Google’s Secret China Project “Effectively Ended” After Internal Confrontation</og:title>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://theintercept.com/2018/12/17/google-china-censored-search-engine-2/</dc:identifier>
</item>
<item>
<title>Robinhood Checking Moved Fast and Broke</title>
<link>https://www.bloomberg.com/opinion/articles/2018-12-17/robinhood-checking-moved-fast-and-broke</link>
<guid isPermaLink="true" >https://www.bloomberg.com/opinion/articles/2018-12-17/robinhood-checking-moved-fast-and-broke</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://www.bloomberg.com/opinion/articles/2018-12-17/robinhood-checking-moved-fast-and-broke&quot;&gt;https://www.bloomberg.com/opinion/articles/2018-12-17/robinhood-checking-moved-fast-and-broke&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=18699995&quot;&gt;https://news.ycombinator.com/item?id=18699995&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 378&lt;/p&gt;
&lt;p&gt;# Comments: 232&lt;/p&gt;
</description>
<pubDate>Mon, 17 Dec 2018 16:38:48 +0000</pubDate>
<dc:creator>kgwgk</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.bloomberg.com/tosv2.html?vid=&amp;uuid=10c40450-0258-11e9-a95f-1d535890f583&amp;url=L29waW5pb24vYXJ0aWNsZXMvMjAxOC0xMi0xNy9yb2Jpbmhvb2QtY2hlY2tpbmctbW92ZWQtZmFzdC1hbmQtYnJva2U=</dc:identifier>
</item>
<item>
<title>Minikanren – An embedded DSL for logic programming</title>
<link>http://minikanren.org</link>
<guid isPermaLink="true" >http://minikanren.org</guid>
<description>&lt;a href=&quot;http://minikanren.org/#trs&quot;&gt;Book&lt;/a&gt; | &lt;a href=&quot;http://minikanren.org/#onlineCourse&quot;&gt;Online Course&lt;/a&gt; | &lt;a href=&quot;http://minikanren.org/#implementations&quot;&gt;Implementations&lt;/a&gt; | &lt;a href=&quot;http://minikanren.org/#projects&quot;&gt;Projects&lt;/a&gt; | &lt;a href=&quot;http://minikanren.org/#upcomingTalks&quot;&gt;Upcoming Talks&lt;/a&gt; | &lt;a href=&quot;http://minikanren.org/#talks&quot;&gt;Talks&lt;/a&gt; | &lt;a href=&quot;http://minikanren.org/#interviews&quot;&gt;Interviews&lt;/a&gt; | &lt;a href=&quot;http://minikanren.org/#writtenTutorials&quot;&gt;Tutorials&lt;/a&gt; | &lt;a href=&quot;http://minikanren.org/#theses&quot;&gt;Theses&lt;/a&gt; | &lt;a href=&quot;http://minikanren.org/#papers&quot;&gt;Papers&lt;/a&gt; | &lt;a href=&quot;http://minikanren.org/#screencasts&quot;&gt;Screencasts&lt;/a&gt; | &lt;a href=&quot;http://minikanren.org/#hangouts&quot;&gt;Weekly Hangouts&lt;/a&gt; | &lt;a href=&quot;http://minikanren.org/#podcasts&quot;&gt;Podcasts&lt;/a&gt; | &lt;a href=&quot;http://minikanren.org/#blogs&quot;&gt;Blogs&lt;/a&gt; | &lt;a href=&quot;http://minikanren.org/#contact&quot;&gt;Contact&lt;/a&gt;&lt;h2&gt;What is miniKanren?&lt;/h2&gt;
miniKanren is an embedded Domain Specific Language for logic programming.&lt;p&gt;The core miniKanren language is very simple, with only three logical operators and one interface operator.&lt;br /&gt;The core language, using Scheme as the host language, is described in this &lt;a href=&quot;http://io.livecode.ch/learn/webyrd/webmk&quot;&gt;short, interactive tutorial&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;miniKanren has been implemented in a growing number of &lt;a href=&quot;http://minikanren.org/#implementations&quot;&gt;host languages&lt;/a&gt;, including Scheme, Racket, Clojure,&lt;br /&gt;Haskell, Python, JavaScript, Scala, Ruby, OCaml, and PHP, among many other languages.&lt;/p&gt;&lt;p&gt;miniKanren is designed to be easily modified and extended; extensions include Constraint Logic Programming,&lt;br /&gt;probabilistic logic programming, nominal logic programming, and tabling.&lt;/p&gt;&lt;p&gt;A detailed discussion of the differences between miniKanren and Prolog &lt;a href=&quot;http://minikanren.org/minikanren-and-prolog.html&quot;&gt;can be found here&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;The Book&lt;/h2&gt;
&lt;a href=&quot;http://www.cs.indiana.edu/~dfried/&quot;&gt;Daniel P. Friedman&lt;/a&gt;, &lt;a href=&quot;http://webyrd.net&quot;&gt;William E. Byrd&lt;/a&gt;, &lt;a href=&quot;http://okmij.org/ftp/&quot;&gt;Oleg Kiselyov&lt;/a&gt;, and &lt;a href=&quot;http://hemann.pl/&quot;&gt;Jason Hemann&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://mitpress.mit.edu/books/reasoned-schemer-second-edition&quot;&gt;&lt;em&gt;The Reasoned Schemer, Second Edition&lt;/em&gt;&lt;/a&gt;&lt;br /&gt;The MIT Press, Cambridge, MA, 2018&lt;p&gt;&lt;a href=&quot;https://github.com/TheReasonedSchemer2ndEd/CodeFromTheReasonedSchemer2ndEd&quot;&gt;source code from the book&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://mitpress.mit.edu/books/reasoned-schemer-second-edition&quot;&gt;&lt;img src=&quot;http://minikanren.org/trs2.png&quot; alt=&quot;The Reasoned Schemer, Second Edition front cover&quot; width=&quot;300&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;miniKanren Online Uncourse (via Hangouts on Air)&lt;/h2&gt;
&lt;a href=&quot;http://webyrd.net&quot;&gt;Will Byrd&lt;/a&gt; organizes a weekly miniKanren uncourse, which meets Sundays at noon Pacific/3pm Eastern time. We show off miniKanren projects, talk about miniKanren implementation, and do live coding/live research. A link to each week's hangout is posted to the &lt;a href=&quot;https://groups.google.com/forum/#!forum/minikanren-uncourse&quot;&gt;miniKanren uncourse mailing list&lt;/a&gt;.&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLO4TbomOdn2cks2n5PvifialL8kQwt0aW&quot;&gt;Recordings of previous uncourse hangouts.&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Implementations&lt;/h2&gt;
&lt;h3&gt;Scheme&lt;/h3&gt;
&lt;a href=&quot;https://github.com/webyrd/miniKanren-with-symbolic-constraints&quot;&gt;miniKanren-with-symbolic-constraints&lt;/a&gt;&lt;br /&gt;miniKanren with extensions for symbolic constraint solving. Includes compatibility files for Racket and various Scheme implementations.&lt;p&gt;&lt;a href=&quot;https://github.com/jasonhemann/microKanren&quot;&gt;microKanren&lt;/a&gt;&lt;br /&gt;A minimal miniKanren implementation, as described in the &lt;a href=&quot;http://minikanren.org/#microKanrenPaper&quot;&gt;2013 Scheme Workshop paper&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/jasonhemann/microKanren-DLS-16&quot;&gt;microKanren w/simple complete search&lt;/a&gt;&lt;br /&gt;A modified/improved microKanren implementation, as described in the &lt;a href=&quot;https://dl.acm.org/citation.cfm?doid=2989225.2989230&quot;&gt;2016 DLS paper&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/webyrd/alphaKanren&quot;&gt;alphaKanren&lt;/a&gt;&lt;br /&gt;miniKanren extended with nominal logic programming, as described in the &lt;a href=&quot;http://minikanren.org/#alphaKanrenPaper&quot;&gt;2007 Scheme Workshop paper&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/webyrd/probKanren&quot;&gt;probKanren&lt;/a&gt;&lt;br /&gt;Research prototype of miniKanren with probabilistic inference.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/orchid-hybrid/microKanren-sagittarius&quot;&gt;microKanren-sagittarius&lt;/a&gt;&lt;br /&gt;miniKanren implementation for R7RS sagittarius scheme 0.6.0 based on (microKanren) with the &lt;code&gt;=/=&lt;/code&gt; operation added.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/cgswords/rkanren&quot;&gt;rKanren&lt;/a&gt;&lt;br /&gt;miniKanren with guided search, as described in the &lt;a href=&quot;http://minikanren.org/#rKanrenPaper&quot;&gt;2013 Scheme Workshop paper&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/donaldsonjw/bkanren&quot;&gt;bkanren&lt;/a&gt;&lt;br /&gt;miniKanren with constraint extensions that runs under &lt;a href=&quot;http://www-sop.inria.fr/mimosa/fp/Bigloo/&quot;&gt;Bigloo Scheme&lt;/a&gt;.&lt;br /&gt;Fork: &lt;a href=&quot;https://github.com/kourzanov/bkanren&quot;&gt;bkanren&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/webyrd/slpKanren&quot;&gt;slpKanren&lt;/a&gt;&lt;br /&gt;Stochastic Logic Programs (SLP) style probabilistic logic programming in miniKanren. (Deprecated--please see &lt;a href=&quot;https://github.com/webyrd/probKanren&quot;&gt;probKanren&lt;/a&gt; instead.)&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://okmij.org/ftp/Scheme/sokuza-kanren.scm&quot;&gt;sokuza-kanren&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://okmij.org/ftp/&quot;&gt;Oleg Kiselyov&lt;/a&gt;'s minimal implementation of logic programming.
&lt;/p&gt;&lt;h3&gt;Racket&lt;/h3&gt;
&lt;a href=&quot;https://github.com/webyrd/miniKanren-with-symbolic-constraints&quot;&gt;miniKanren-with-symbolic-constraints&lt;/a&gt;&lt;br /&gt;miniKanren with extensions for symbolic constraint solving. Includes compatibility files for Racket and various Scheme implementations.&lt;p&gt;&lt;a href=&quot;https://github.com/calvis/cKanren&quot;&gt;cKanren&lt;/a&gt;&lt;br /&gt;miniKanren extended with Constraint Logic Programming (CLP); an improved version of the system described in the &lt;a href=&quot;http://minikanren.org/#cKanrenPaper&quot;&gt;2011 Scheme Workshop paper&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/miniKanren/Racket-miniKanren&quot;&gt;Racket-miniKanren&lt;/a&gt;&lt;br /&gt;vanilla miniKanren Racket port&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/niitsuma/Racket-miniKanren/tree/recursive&quot;&gt;recursive miniKanren&lt;/a&gt;&lt;br /&gt;recursive miniKanren implementation in Racket.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/zaoqi/zKanren&quot;&gt;zKanren&lt;/a&gt;&lt;br /&gt;cKanren with fair conjunction
&lt;/p&gt;&lt;h3&gt;Clojure&lt;/h3&gt;
&lt;a href=&quot;https://github.com/clojure/core.logic&quot;&gt;core.logic&lt;/a&gt;&lt;br /&gt;(&lt;a href=&quot;https://rawgithub.com/dedeibel/clojure-core-logic-cheatsheets/master/out/cheatsheet-use-title-attribute-no-cdocs-summary.html&quot;&gt;core.logic cheatsheet&lt;/a&gt;, courtesy of &lt;a href=&quot;http://myminutes.wordpress.com/2013/07/17/clojure-core-logic-cheatsheets/&quot;&gt;Benjamin Peter&lt;/a&gt;)&lt;br /&gt;A literate Clojure implementation of microKanren.&lt;br /&gt;&lt;a href=&quot;http://mullr.github.io/micrologic/literate.html&quot;&gt;Annotated source code.&lt;/a&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/halgari/async-mu-kanren&quot;&gt;async-mu-kanren&lt;/a&gt;&lt;br /&gt;Proof-of-concept implementation of muKanren using CSP (core.async)&lt;/p&gt;&lt;h3&gt;Assorted Languages&lt;/h3&gt;
&lt;a href=&quot;https://github.com/bodil/microkanrens&quot;&gt;Implementations of microKanren in assorted languages&lt;/a&gt;
&lt;h3&gt;C#&lt;/h3&gt;
&lt;a href=&quot;https://github.com/wallymathieu/csharp_ukanren&quot;&gt;csharp_ukanren&lt;/a&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/naasking/uKanren.NET&quot;&gt;uKanren.NET&lt;/a&gt;
&lt;/p&gt;&lt;h3&gt;CoffeeScript&lt;/h3&gt;
&lt;a href=&quot;https://github.com/fogus/friebyrd&quot;&gt;Friebyrd&lt;/a&gt;
&lt;h3&gt;Common Lisp&lt;/h3&gt;
&lt;a href=&quot;https://common-lisp.net/project/cl-kanren-trs/&quot;&gt;cl-kanren-trs&lt;/a&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/deliciousrobots/kanren-fset&quot;&gt;Kanren-Fset&lt;/a&gt; (Fset collection library support for cl-kanren-trs)
&lt;/p&gt;&lt;h3&gt;Dylan&lt;/h3&gt;
&lt;a href=&quot;https://github.com/tca/miniKanren-Dylan&quot;&gt;miniKanren-Dylan&lt;/a&gt;
&lt;h3&gt;Elixir&lt;/h3&gt;
&lt;a href=&quot;https://github.com/lyons/ExKanren&quot;&gt;ExKanren&lt;/a&gt;
&lt;h3&gt;Elm&lt;/h3&gt;
&lt;a href=&quot;https://github.com/ndr-qef/elm-microKanren&quot;&gt;elm-microKanren&lt;/a&gt;
&lt;h3&gt;Emacs Lisp&lt;/h3&gt;
&lt;a href=&quot;https://github.com/nickdrozd/reazon&quot;&gt;Reazon&lt;/a&gt;
&lt;h3&gt;Erlang&lt;/h3&gt;
&lt;a href=&quot;https://github.com/zkessin/erlKanren&quot;&gt;erlKanren&lt;/a&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/bodil/lolkanren/blob/master/kanren.erl&quot;&gt;lolkanren_erlang&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/voila/mukanren&quot;&gt;mukanren&lt;/a&gt;
&lt;/p&gt;&lt;h3&gt;Extempore&lt;/h3&gt;
&lt;a href=&quot;https://github.com/jasonhemann/microKanren-extempore&quot;&gt;mini-over-micro-extempore&lt;/a&gt;
&lt;h3&gt;F#&lt;/h3&gt;
&lt;a href=&quot;https://github.com/palladin/logic&quot;&gt;logic&lt;/a&gt;&lt;br /&gt;A logic programming library for F#&lt;p&gt;&lt;a href=&quot;https://github.com/kurtschelfthout/MiniKanren&quot;&gt;MiniKanren&lt;/a&gt;&lt;br /&gt;An attempted implementation of MiniKanren in F#.
&lt;/p&gt;&lt;h3&gt;Go&lt;/h3&gt;
&lt;a href=&quot;https://github.com/hiredman/gologic&quot;&gt;gologic&lt;/a&gt;
&lt;h3&gt;Groovy&lt;/h3&gt;
&lt;a href=&quot;https://github.com/timyates/groovy-logic&quot;&gt;groovy-logic&lt;/a&gt;
&lt;h3&gt;Haskell&lt;/h3&gt;
&lt;a href=&quot;https://github.com/rntz/ukanren&quot;&gt;ukanren&lt;/a&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/acfoltzer/Molog&quot;&gt;Molog&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/JaimieMurdock/HK&quot;&gt;HaskellKanren (HK)&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/jvranish/MiniKanrenT&quot;&gt;MiniKanrenT&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Oregu/featherweight&quot;&gt;featherweight&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/sergv/hkanren&quot;&gt;HKanren&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://bitbucket.org/jozefg/ds-kanren&quot;&gt;DS-Kanren&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://gist.github.com/msullivan/4223fd47991acbe045ec#file-microkanren-hs&quot;&gt;MicroKanren.hs&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/rntz/ukanren&quot;&gt;ukanren&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/seantalts/hasktrip/blob/master/doc/MicroKanren.md&quot;&gt;MicroKanren.lhs&lt;/a&gt;
&lt;/p&gt;&lt;h3&gt;Hy&lt;/h3&gt;
&lt;a href=&quot;https://github.com/mudphone/Hywaii&quot;&gt;Hywaii&lt;/a&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/algernon/adderall&quot;&gt;Adderall&lt;/a&gt;
&lt;/p&gt;&lt;h3&gt;Java&lt;/h3&gt;
&lt;a href=&quot;https://github.com/nd/mk.java&quot;&gt;mk.java&lt;/a&gt;&lt;br /&gt;microKanren in Java.&lt;p&gt;&lt;a href=&quot;https://github.com/heidisu/java8kanren&quot;&gt;java8kanren&lt;/a&gt;&lt;br /&gt;miniKanren in Java.
&lt;/p&gt;&lt;h3&gt;JavaScript&lt;/h3&gt;
&lt;a href=&quot;http://tca.github.io/veneer/editor.html&quot;&gt;veneer&lt;/a&gt;&lt;br /&gt;Browser based miniKanren editor and REPL, with constraints.&lt;br /&gt;&lt;a href=&quot;https://github.com/tca/veneer&quot;&gt;GitHub repo&lt;/a&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/asolove/microScopeKanren&quot;&gt;microScopeKanren&lt;/a&gt;&lt;br /&gt;A JavaScript implementation of microKanren with a focus on inspecting programs as they run.&lt;br /&gt;&lt;a href=&quot;http://www.adamsolove.com/microScopeKanren/&quot;&gt;Example, vizualizing &lt;code&gt;appendo&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://functorial.com/mu-kanren/&quot;&gt;mu-kanren&lt;/a&gt;&lt;br /&gt;A step-by-step MicroKanren evaluator.&lt;br /&gt;&lt;a href=&quot;https://github.com/functorial/mu-kanren&quot;&gt;GitHub repo&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/joshcox/microJSKanren&quot;&gt;microJSKanren&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/bodil/lolkanren&quot;&gt;lolkanren&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/stanistan/jolic&quot;&gt;jolic&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/zaach/ukanren.js&quot;&gt;uKanren&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/willkurt/microKanren.js&quot;&gt;microKanren&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/cduret/mk.js&quot;&gt;mk.js&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/buzzdecafe/rlg&quot;&gt;rlg&lt;/a&gt;
&lt;/p&gt;&lt;h3&gt;Lisp Flavored Erlang&lt;/h3&gt;
&lt;a href=&quot;https://github.com/pzel/mkr&quot;&gt;mkr&lt;/a&gt;
&lt;h3&gt;Lua&lt;/h3&gt;
&lt;a href=&quot;https://github.com/silentbicycle/lua-ukanren&quot;&gt;lua-ukanren&lt;/a&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/handsomecheung/miniKanren.lua&quot;&gt;miniKanren.lua&lt;/a&gt;
&lt;/p&gt;&lt;h3&gt;Mímir experimental rules engine&lt;/h3&gt;
&lt;a href=&quot;https://github.com/hraberg/mimir/blob/master/src/mimir/mk.clj&quot;&gt;mímirKanren&lt;/a&gt;
&lt;h3&gt;miniKanren&lt;/h3&gt;
&lt;a href=&quot;https://github.com/jasonhemann/micro-in-mini&quot;&gt;micro-in-mini&lt;/a&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/jpt4/muko&quot;&gt;muko&lt;/a&gt;
&lt;/p&gt;&lt;h3&gt;ML&lt;/h3&gt;
&lt;a href=&quot;https://github.com/chrisamaphone/ml-mukanren&quot;&gt;ml-mukanren&lt;/a&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/jozefg/sml-kanren&quot;&gt;sml-kanren&lt;/a&gt;
&lt;/p&gt;&lt;h3&gt;Moxie&lt;/h3&gt;
&lt;a href=&quot;https://github.com/rntz/moxy/blob/master/kanren.mox&quot;&gt;kanren.mox&lt;/a&gt;
&lt;h3&gt;Nu&lt;/h3&gt;
&lt;a href=&quot;https://github.com/finnsson/minikanren-nu&quot;&gt;minikanren-nu&lt;/a&gt;
&lt;h3&gt;OCaml&lt;/h3&gt;
&lt;a href=&quot;https://github.com/dboulytchev/OCanren&quot;&gt;OCanren&lt;/a&gt;&lt;br /&gt;Statically typed embedding of miniKanren into Objective Caml.&lt;p&gt;&lt;a href=&quot;https://github.com/lightyang/minikanren-ocaml&quot;&gt;minikanren-ocaml&lt;/a&gt;
&lt;/p&gt;&lt;h3&gt;PHP&lt;/h3&gt;
&lt;a href=&quot;https://github.com/igorw/reasoned-php&quot;&gt;reasoned-php&lt;/a&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/mudge/php-microkanren&quot;&gt;php-microKanren&lt;/a&gt;
&lt;/p&gt;&lt;h3&gt;Prolog&lt;/h3&gt;
&lt;a href=&quot;https://github.com/mndrix/microkanren-prolog&quot;&gt;microkanren-prolog&lt;/a&gt;&lt;br /&gt;A Prolog implementation of microKanren.
&lt;h3&gt;Python&lt;/h3&gt;
&lt;a href=&quot;https://github.com/jtauber/pykanren&quot;&gt;pykanren&lt;/a&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/darius/pythological&quot;&gt;pythological&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/logpy/logpy&quot;&gt;LogPy&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://gist.github.com/cheery/d89bfb4c8d6c7a3eb908&quot;&gt;microkanren.py&lt;/a&gt;
&lt;/p&gt;&lt;h3&gt;Pure&lt;/h3&gt;
&lt;a href=&quot;https://github.com/bodil/microkanrens/blob/master/mk.pure&quot;&gt;pure&lt;/a&gt;
&lt;h3&gt;Ruby&lt;/h3&gt;
&lt;a href=&quot;https://github.com/spariev/mini_kanren&quot;&gt;mini_kanren&lt;/a&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/jsl/ruby_ukanren&quot;&gt;micro_kanren&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://scottdial.com/projects/minikanren.rb&quot;&gt;MiniKanren&lt;/a&gt;
&lt;/p&gt;&lt;h3&gt;Rust&lt;/h3&gt;
&lt;a href=&quot;https://github.com/wartman4404/rust-kanren&quot;&gt;rust-kanren&lt;/a&gt;
&lt;h3&gt;Scala&lt;/h3&gt;
&lt;a href=&quot;https://github.com/namin/scalogno&quot;&gt;scalogno&lt;/a&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/hircus/minikanren-scala&quot;&gt;minikanren-scala&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/clayrat/kanren&quot;&gt;kanren (Sokuza-kanren in Scala)&lt;/a&gt;
&lt;/p&gt;&lt;h3&gt;Shen&lt;/h3&gt;
&lt;a href=&quot;https://github.com/jasonhemann/microKanren-shen&quot;&gt;microKanren-shen&lt;/a&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/mthom/shen-minikanren&quot;&gt;shen-minikanren&lt;/a&gt;
&lt;/p&gt;&lt;h3&gt;Smalltalk&lt;/h3&gt;
&lt;a href=&quot;https://github.com/adolfopa/microkanren-pharo&quot;&gt;microkanren-pharo&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://smalltalkhub.com/#!/~adolfopa/MicroKanren&quot;&gt;Smalltalk Hub link to microkanren-pharo&lt;/a&gt;&lt;h2&gt;Projects using miniKanren or core.logic&lt;/h2&gt;
&lt;h3&gt;miniKanren&lt;/h3&gt;
&lt;a href=&quot;https://github.com/webyrd/Barliman&quot;&gt;Barliman&lt;/a&gt;&lt;br /&gt;Barliman is a prototype &quot;smart editor&quot; that performs real-time program synthesis to try to make the programmer's life a little easier.&lt;p&gt;&lt;a href=&quot;https://github.com/orchid-hybrid/minimips&quot;&gt;minimips&lt;/a&gt;&lt;br /&gt;minikanren mips assembler/disassembler.
&lt;/p&gt;&lt;h3&gt;core.logic&lt;/h3&gt;
&lt;a href=&quot;https://github.com/owickstrom/smug&quot;&gt;SMUG&lt;/a&gt;&lt;br /&gt;The Sheet Music Generator.&lt;br /&gt;&lt;a href=&quot;https://wickstrom.tech/programming/2016/08/07/generating-sight-reading-exercises-using-constraint-logic-programming-in-clojure-part-1.html&quot;&gt;blog post&lt;/a&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/clojure-numerics/expresso&quot;&gt;expresso&lt;/a&gt;&lt;br /&gt;A clojure library for symbolic manipulation of Algebraic Expressions.&lt;br /&gt;&lt;a href=&quot;https://github.com/mschuene/expresso-tutorial&quot;&gt;tutorial&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://kimavcrp.blogspot.com/2013/09/finished-gsoc-project-expresso.html&quot;&gt;blog post&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/semperos/webdriver-logic&quot;&gt;webdriver-logic&lt;/a&gt;&lt;br /&gt;Logic programming API for testing web applications using clj-webdriver.&lt;br /&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=09zlcS49zL0&quot;&gt;Clojure/conj 2012 talk&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/cderoove/damp.ekeko/&quot;&gt;damp.ekeko&lt;/a&gt;&lt;br /&gt;Ekeko enables querying and manipulating an Eclipse workspace using applicative logic programs.&lt;br /&gt;&lt;a href=&quot;https://groups.google.com/forum/?fromgroups=#!topic/clojure/xZj3n8zsKdw&quot;&gt;anouncement&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=5wvVFQa1hVU&quot;&gt;screencast&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ReinoutStevens/damp.qwal&quot;&gt;damp.qwal&lt;/a&gt;&lt;br /&gt;QWAL is a path expression library to allow querying graphlike structures using core.logic in Clojure.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ReinoutStevens/damp.qwalkeko&quot;&gt;damp.qwalkeko&lt;/a&gt;&lt;br /&gt;Scrape and reason over Java projects stored on git.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/marick/peano&quot;&gt;peano&lt;/a&gt;&lt;br /&gt;Using logic programming (Clojure's core.logic) for test data manipulation and generation.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/jonase/kibit/&quot;&gt;kibit&lt;/a&gt;&lt;br /&gt;kibit is a static code analyzer for Clojure which uses core.logic to search for patterns of code for which there might exist a more idiomatic function or macro.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/tgk/parsing-packet-with-logic&quot;&gt;parsing-packet-with-logic&lt;/a&gt;&lt;br /&gt;A small experiment in parsing packets in a style similar to Erlang's &lt;code&gt;&amp;lt;&amp;lt;...&amp;gt;&amp;gt;&lt;/code&gt; using core.logic.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/bloat/maze.logic&quot;&gt;maze.logic&lt;/a&gt;&lt;br /&gt;Solving mazes using core.logic.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/gga/janus&quot;&gt;Janus: Consumer-driven Contracts and Mocks&lt;/a&gt;&lt;br /&gt;Consumer-driven contracts using core.logic.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/aredington/monotony&quot;&gt;Monotony&lt;/a&gt;&lt;br /&gt;Monotony is a solution to the problem of how to schedule things in a way that humans find intuitive.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ReinoutStevens/damp.qwal&quot;&gt;QWAL&lt;/a&gt;&lt;br /&gt;QWAL is a path expression library to allow querying graphlike structures using core.logic in Clojure.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/jgralab/funnyqt&quot;&gt;FunnyQT&lt;/a&gt;&lt;br /&gt;FunnyQT is a model querying and transformation library.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/timowest/symbol&quot;&gt;symbol&lt;/a&gt;&lt;br /&gt;symbol is a compiler of a subset of Clojure syntax to C++.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/dgrnbrg/guzheng&quot;&gt;guzheng&lt;/a&gt;&lt;br /&gt;guzheng is a library for doing branch coverage analysis of Clojure code.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/dmikulic/adventure-in-core-logic&quot;&gt;Adventure in Clojure core.logic&lt;/a&gt;&lt;br /&gt;Text adventure game in core.logic.&lt;/p&gt;&lt;p&gt;The core.logic &lt;a href=&quot;https://github.com/clojure/core.logic/wiki/Projects-using-core.logic&quot;&gt;wiki&lt;/a&gt; also has links to projects using core.logic.&lt;/p&gt;&lt;h2&gt;Upcoming Talks&lt;/h2&gt;
William E. Byrd (joint work with Michael Ballantyne, Gregory Rosenblatt, and Matthew Might)&lt;br /&gt;&lt;a href=&quot;http://icfp17.sigplan.org/event/icfp-2017-papers-functional-pearl-a-unified-approach-to-solving-seven-programming-problems&quot;&gt;A Unified Approach to Solving Seven Programming Problems (Functional Pearl)&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://icfp17.sigplan.org/&quot;&gt;International Conference on Functional Programming (ICFP)&lt;/a&gt;, Oxford, England, 4 September 2017.&lt;br /&gt;&lt;a href=&quot;http://dl.acm.org/citation.cfm?id=3110252&amp;amp;CFID=976617079&quot;&gt;paper&lt;/a&gt; | &lt;a href=&quot;http://io.livecode.ch/learn/namin/icfp2017-artifact-auas7pp&quot;&gt;interactive paper&lt;/a&gt; | &lt;a href=&quot;https://github.com/gregr/icfp2017-artifact-auas7pp&quot;&gt;downloadable artifact&lt;/a&gt; | &lt;a href=&quot;https://github.com/webyrd/Barliman&quot;&gt;Barliman&lt;/a&gt;&lt;h2&gt;Recorded Talks&lt;/h2&gt;
&lt;h3&gt;miniKanren&lt;/h3&gt;
Tom Stuart&lt;br /&gt;&lt;a href=&quot;https://skillsmatter.com/skillscasts/6523-hello-declarative-world#video&quot;&gt;Hello, declarative world&lt;/a&gt;&lt;br /&gt;LRUG August 2015 Meetup, August 8, 2015.&lt;p&gt;Dan Friedman and Jason Hemann&lt;br /&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=b9C3r3dQnNY&quot;&gt;How to be a good host: miniKanren as a case study&lt;/a&gt;&lt;br /&gt;Curry On, Prague, Czech Republic, 7 July 2015.&lt;/p&gt;&lt;p&gt;William Byrd&lt;br /&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=eQL48qYDwp4&quot;&gt;The Promise of Relational Programming&lt;/a&gt;&lt;br /&gt;PolyConf 15, Pozna&amp;amp;nacute;, Poland, 2 July 2015.&lt;/p&gt;&lt;p&gt;Bodil Stokke&lt;br /&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=2e8VFSSNORg&quot;&gt;μKanren: Running the Little Things Backwards&lt;/a&gt;&lt;br /&gt;EuroClojure, Barcelona, Spain, 25 June 2015.&lt;/p&gt;&lt;p&gt;Daniel Brady&lt;br /&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=UxeNsjP74jU#t=40s&quot;&gt;Little Logic Languages&lt;/a&gt;&lt;br /&gt;Scheme Workshop, Washington, D.C., 19 November 2014.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://hemann.pl/&quot;&gt;Jason Hemann&lt;/a&gt; and &lt;a href=&quot;http://www.cs.indiana.edu/~dfried/&quot;&gt;Dan Friedman&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=RG9fBbQrVOM&quot;&gt;Write the Other Half of Your Program: From Functional to Logic Programming&lt;/a&gt;&lt;br /&gt;Strange Loop, St. Louis, September 18, 2014.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://webyrd.net&quot;&gt;William E. Byrd&lt;/a&gt;&lt;br /&gt;Relational Programming in miniKanren, &lt;a href=&quot;https://www.youtube.com/watch?v=zHov3fKYqBA&quot;&gt;Part 1&lt;/a&gt; and &lt;a href=&quot;https://www.youtube.com/watch?v=nFE2E91VDAk&quot;&gt;Part 2&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://www.meetup.com/Lambda-Lounge-Utah/events/164368252/&quot;&gt;Logic Night&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://www.meetup.com/Lambda-Lounge-Utah/&quot;&gt;Lambda Lounge Utah&lt;/a&gt;, Sandy, UT, May 13, 2014.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://www.cs.indiana.edu/~dfried/&quot;&gt;Daniel P. Friedman&lt;/a&gt; and &lt;a href=&quot;http://webyrd.net&quot;&gt;William E. Byrd&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://www.infoq.com/presentations/chomsky-hierarchy&quot;&gt;A Relational Exploration of the Chomsky Hierarchy&lt;/a&gt;&lt;br /&gt;Strange Loop, St. Louis, September, 2013.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://webyrd.net&quot;&gt;William E. Byrd&lt;/a&gt; and &lt;a href=&quot;http://www.cs.indiana.edu/~dfried/&quot;&gt;Daniel P. Friedman&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://vimeo.com/user18356272/review/66548859/4f724d6341&quot;&gt;Fun with Relational Interpreters in miniKanren&lt;/a&gt;&lt;br /&gt;flatmap 2013, Oslo, Norway, May 14, 2013 (keynote).&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://webyrd.net&quot;&gt;William E. Byrd&lt;/a&gt; and &lt;a href=&quot;http://www.cs.indiana.edu/~dfried/&quot;&gt;Daniel P. Friedman&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=fHK-uS-Iedc&quot;&gt;miniKanren Philosophy&lt;/a&gt;&lt;br /&gt;Clojure/conj 2012, Raleigh, NC, November 16, 2012.&lt;br /&gt;(Beware the pink tint!)&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://www.cs.indiana.edu/~dfried/&quot;&gt;Daniel P. Friedman&lt;/a&gt; and &lt;a href=&quot;http://webyrd.net&quot;&gt;William E. Byrd&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://www.infoq.com/presentations/miniKanren&quot;&gt;Relational Programming in miniKanren&lt;/a&gt;&lt;br /&gt;Strange Loop 2012, St. Louis, MO, September 24, 2012&lt;br /&gt;&lt;a href=&quot;https://github.com/webyrd/quines&quot;&gt;source code&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://www.cs.indiana.edu/~dfried/&quot;&gt;Daniel P. Friedman&lt;/a&gt; and &lt;a href=&quot;http://webyrd.net&quot;&gt;William E. Byrd&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=5Q9x16uIsKA&quot;&gt;miniKanren &quot;untalk&quot;&lt;/a&gt;&lt;br /&gt;Clojure/conj 2011, Raleigh, NC, November 10, 2011.
&lt;/p&gt;&lt;h3&gt;core.logic&lt;/h3&gt;
&lt;a href=&quot;http://namin.github.com/&quot;&gt;Nada Amin&lt;/a&gt; and &lt;a href=&quot;http://webyrd.net&quot;&gt;William E. Byrd&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=7kPMFkNm2dw&quot;&gt;From Greek to Clojure&lt;/a&gt;&lt;br /&gt;Clojure/conj, Alexandria, VA, November 14, 2013&lt;br /&gt;&lt;a href=&quot;https://github.com/namin/grk2clj&quot;&gt;source code&lt;/a&gt; | &lt;a href=&quot;http://lampwww.epfl.ch/%7Eamin/clj/grk.pdf&quot;&gt;slides&lt;/a&gt;&lt;p&gt;&lt;a href=&quot;http://www.red-bean.com/~craig/hacking/&quot;&gt;Craig Brozefsky&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://www.infoq.com/presentations/Core-logic-SQL-ORM&quot;&gt;Core.logic and SQL Killed my ORM&lt;/a&gt;&lt;br /&gt;Clojure/West 2013, Portland, OR, March 19th, 2013.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://swannodette.github.io&quot;&gt;David Nolen&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://skillsmatter.com/podcast/scala/the-refined-clojurist&quot;&gt;The Refined Clojurist&lt;/a&gt;&lt;br /&gt;Clojure Exchange 2012, London, December 6, 2012&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/semperos&quot;&gt;Daniel Gregoire&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=09zlcS49zL0&quot;&gt;Web Testing with Logic Programming&lt;/a&gt;&lt;br /&gt;Clojure/conj 2012, Raleigh, NC, November 17, 2012.&lt;br /&gt;&lt;a href=&quot;https://github.com/semperos/webdriver-logic&quot;&gt;webdriver-logic project&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/miner&quot;&gt;Steve Miner&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=y6WKr9j76kw&quot;&gt;Challenges for Logic Programming&lt;/a&gt;&lt;br /&gt;Clojure/conj 2012, Raleigh, NC, November 17, 2012.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ejackson&quot;&gt;Edmund Jackson&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://www.infoq.com/presentations/Introduction-Logic-Programming&quot;&gt;An Introduction to Logic Programming on the JVM with core.logic (Clojure)&lt;/a&gt;&lt;br /&gt;FP Days 2012, Cambridge, October 25, 2012&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://swannodette.github.io&quot;&gt;David Nolen&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=A7de6pC-tnU&quot;&gt;core.logic: A tutorial reconstruction (&quot;unsession&quot;)&lt;/a&gt;&lt;br /&gt;Strange Loop 2012, St. Louis, MO, September 24, 2012&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://boss-level.com&quot;&gt;Edmund Jackson&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://vimeo.com/45128721&quot;&gt;core.logic.intro&lt;/a&gt;&lt;br /&gt;EuroClojure 2012, London, May 24, 2012&lt;br /&gt;&lt;a href=&quot;http://github.com/ejackson/EuroClojure-2012-Talk&quot;&gt;source code&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://objectcommando.com&quot;&gt;Ryan Senior&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://www.infoq.com/presentations/core-logic&quot;&gt;Practical core.logic&lt;/a&gt;&lt;br /&gt;Clojure/West 2012, San Jose, March 17, 2012&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/frenchy64&quot;&gt;Ambrose Bonnaire-Sergeant&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=irjP8BO1B8Y&quot;&gt;Introduction to Logic Programming with Clojure&lt;/a&gt;&lt;br /&gt;Clojure/conj 2011, Raleigh, NC, November 10, 2011.
&lt;/p&gt;&lt;h3&gt;ClojureScript &amp;amp; core.logic&lt;/h3&gt;
&lt;a href=&quot;http://adamsolove.com/&quot;&gt;Adam Solove&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=72sWgwaAoyk&quot;&gt;Constraint programming in the browser&lt;/a&gt;&lt;br /&gt;(Talk focuses on the Cassowary constraint solver for GUI layout, but also discusses core.logic.)&lt;br /&gt;JSConf US, Amelia Island, FL, May 31, 2013
&lt;h3&gt;Clojure/West miniKanren confo, Portland, OR, March 19, 2013 (associated with &lt;a href=&quot;http://clojurewest.org/&quot;&gt;Clojure/West&lt;/a&gt;)&lt;/h3&gt;
&lt;a href=&quot;https://github.com/werg&quot;&gt;Gabriel Pickard&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://lanyrd.com/2013/clojurewest/sccgmz/&quot;&gt;Logic programming in the wild&lt;/a&gt; (video not posted yet)&lt;p&gt;&lt;a href=&quot;http://objectcommando.com&quot;&gt;Ryan Senior&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://www.infoq.com/presentations/CLP-core-logic&quot;&gt;Intro to CLP with core.logic&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://www.acfoltzer.net/&quot;&gt;Adam Foltzer&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://www.infoq.com/presentations/molog&quot;&gt;Molog: Typed Functional Logic Programming in Haskell&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/acfoltzer/Molog&quot;&gt;source code&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://swannodette.github.io&quot;&gt;David Nolen&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://www.infoq.com/presentations/architecture-core-logic&quot;&gt;The Architecture of core.logic&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://namin.github.com/&quot;&gt;Nada Amin&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://lanyrd.com/2013/clojurewest/sccgpf/&quot;&gt;core.logic.nominal&lt;/a&gt; (video not posted yet)&lt;br /&gt;&lt;a href=&quot;https://github.com/namin/minikanren-confo&quot;&gt;source code&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://webyrd.net&quot;&gt;William E. Byrd&lt;/a&gt; and &lt;a href=&quot;http://www.cs.indiana.edu/~dfried/&quot;&gt;Daniel P. Friedman&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://lanyrd.com/2013/clojurewest/sccgpg/&quot;&gt;The Unreasonable Schemers&lt;/a&gt; (video not posted yet)&lt;br /&gt;&lt;a href=&quot;https://github.com/webyrd/relational-cesk&quot;&gt;source code&lt;/a&gt; 
&lt;/p&gt;&lt;h2&gt;Interviews&lt;/h2&gt;
&lt;a href=&quot;http://webyrd.net&quot;&gt;William E. Byrd&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://www.infoq.com/interviews/byrd-relational-programming-minikanren&quot;&gt;William Byrd on Logic and Relational Programming, miniKanren&lt;/a&gt;&lt;br /&gt;Recorded by &lt;a href=&quot;http://www.infoq.com/&quot;&gt;InfoQ&lt;/a&gt; at Code Mesh 2013, London, England, December, 2013 
&lt;h2&gt;Written Tutorials&lt;/h2&gt;
&lt;h3&gt;core.logic&lt;/h3&gt;
&lt;a href=&quot;https://github.com/frenchy64/Logic-Starter/wiki&quot;&gt;Introduction to Logic Programming with Clojure&lt;/a&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer&quot;&gt;A Core.logic Primer&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://www.intensivesystems.net/tutorials/logic_prog.html&quot;&gt;Logic Programming for the Social Web&lt;/a&gt; 
&lt;/p&gt;&lt;h2&gt;Theses&lt;/h2&gt;
&lt;h3&gt;PhD&lt;/h3&gt;
William E. Byrd&lt;br /&gt;&lt;a href=&quot;http://gradworks.umi.com/33/80/3380156.html&quot;&gt;Relational Programming in miniKanren: Techniques, Applications, and Implementations.&lt;/a&gt;&lt;br /&gt;Indiana University, Bloomington, IN,&lt;br /&gt;September 30, 2009.&lt;p&gt;&lt;a href=&quot;https://github.com/webyrd/dissertation-single-spaced&quot;&gt;Easier to read, single-spaced, re-typeset version of Will's dissertation&lt;/a&gt;, released under Creative Commons Attribution 4.0 International (CC BY 4.0) license.
&lt;/p&gt;&lt;h3&gt;Masters&lt;/h3&gt;
Wheeler, Kaylen FJ&lt;br /&gt;&lt;a href=&quot;http://ir.lib.uwo.ca/etd/1279&quot;&gt;Representing Game Dialogue as Expressions in First-Order Logic&lt;/a&gt;&lt;br /&gt;University of Western Ontario, London, Ontario, Canada, 2013.
&lt;h3&gt;Undergraduate&lt;/h3&gt;
Ramana Kumar&lt;br /&gt;&lt;a href=&quot;http://cam.xrchz.net/ramkumar/thesis.pdf&quot;&gt;Mechanising Aspects of miniKanren in HOL&lt;/a&gt;&lt;br /&gt;Australian National University, Canberra, Australian Capital Territory, Australia,&lt;br /&gt;May 2010. (Undergraduate Honors Thesis)&lt;p&gt;Emily Fox&lt;br /&gt;&lt;a href=&quot;http://minikanren.org/fox_diss.pdf&quot;&gt;Automated Canon Composition&lt;/a&gt;&lt;br /&gt;Churchill College, University of Cambridge, Cambridge, UK,&lt;br /&gt;May 10, 2016. (Computer Science Tripos - Part II) 
&lt;/p&gt;&lt;h2&gt;Papers&lt;/h2&gt;
William E. Byrd, Michael Ballantyne, Gregory Rosenblatt, and Matthew Might&lt;br /&gt;&lt;a href=&quot;http://dl.acm.org/citation.cfm?id=3110252&amp;amp;CFID=976617079&quot;&gt;A Unified Approach to Solving Seven Programming Problems (Functional Pearl)&lt;/a&gt;&lt;br /&gt;In Proceedings of the ACM on Programming Languages (PACMPL), 1, ICFP, Article 8 (August 2017), 26 pages. &lt;a href=&quot;https://doi.org/10.1145/3110252&quot;&gt;DOI&lt;/a&gt;.&lt;br /&gt;&lt;a href=&quot;http://io.livecode.ch/learn/gregr/icfp2017-artifact-auas7pp&quot;&gt;Interactive version&lt;/a&gt; of the paper, created by &lt;a href=&quot;https://www.cl.cam.ac.uk/~na482/&quot;&gt;Nada Amin&lt;/a&gt;.&lt;p&gt;Jason Hemann, Daniel P. Friedman, William E. Byrd, and Matthew Might&lt;br /&gt;&lt;a href=&quot;https://dl.acm.org/citation.cfm?doid=2989225.2989230&quot;&gt;A Small Embedding of Logic Programming with a Simple Complete Search&lt;/a&gt;&lt;br /&gt;In Proceedings of the 12th Symposium on Dynamic Languages (DLS 2016), Amsterdam, Netherlands, 2016.&lt;/p&gt;&lt;p&gt;Jason Hemann and Daniel P. Friedman&lt;br /&gt;&lt;a href=&quot;http://andykeep.com/SchemeWorkshop2015/papers/sfpw3-2015-hemann-friedman.pdf&quot;&gt;A Framework for Extending microKanren with Constraints&lt;/a&gt;&lt;br /&gt;In Proceedings of the 2015 Workshop on Scheme and Functional Programming (Scheme '15), Vancouver, British Columbia, 2015.&lt;/p&gt;&lt;p&gt;Daniel Brady, Jason Hemann and Daniel P. Friedman&lt;br /&gt;&lt;a href=&quot;http://homes.soic.indiana.edu/jhemann/scheme-14/papers/Brady2014.pdf&quot;&gt;Little Languages for Relational Programming.&lt;/a&gt;&lt;br /&gt;In Proceedings of the 2014 Workshop on Scheme and Functional Programming (Scheme '14), Washington, DC, 2014.&lt;br /&gt;&lt;a href=&quot;https://github.com/dabrady/LittleLogicLangs&quot;&gt;Complete source code (Scheme)&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Erik Wennstrom&lt;br /&gt;&lt;a href=&quot;http://www.cs.uic.edu/pub/Isaim2014/WebPreferences/ISAIM2014_NLP_Wennstrom.pdf&quot;&gt;Tableau-Based Model Generation for Relational Syllogistic Logics.&lt;/a&gt;&lt;br /&gt;In Proceedings of the 2014 International Symposium on Artificial Intelligence and Mathematics (ISAIM 2014), Fort Lauderdale, FL, January, 2014.&lt;/p&gt;&lt;p&gt;Jason Hemann and Daniel P. Friedman.&lt;a name=&quot;microKanrenPaper&quot; id=&quot;microKanrenPaper&quot;&gt; &lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://webyrd.net/scheme-2013/papers/HemannMuKanren2013.pdf&quot;&gt;microKanren: A Minimal Functional Core for Relational Programming.&lt;/a&gt;&lt;br /&gt;In Proceedings of the 2013 Workshop on Scheme and Functional Programming (Scheme '13), Alexandria, VA, 2013.&lt;br /&gt;&lt;a href=&quot;https://github.com/jasonhemann/microKanren&quot;&gt;Complete source code (Scheme)&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Cameron Swords and Daniel P. Friedman.&lt;a name=&quot;rKanrenPaper&quot; id=&quot;rKanrenPaper&quot;&gt; &lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://webyrd.net/scheme-2013/papers/Swords2013.pdf&quot;&gt;rKanren: Guided Search in miniKanren.&lt;/a&gt;&lt;br /&gt;In Proceedings of the 2013 Workshop on Scheme and Functional Programming (Scheme '13), Alexandria, VA, 2013.&lt;br /&gt;&lt;a href=&quot;https://github.com/cgswords/rkanren&quot;&gt;Complete source code (Scheme)&lt;/a&gt;&lt;/p&gt;&lt;p&gt;William E. Byrd, Eric Holk, and Daniel P. Friedman.&lt;br /&gt;&lt;a href=&quot;http://webyrd.net/quines/quines.pdf&quot;&gt;miniKanren, Live and Untagged: Quine Generation via Relational Interpreters (Programming Pearl).&lt;/a&gt;&lt;br /&gt;To appear in the Proceedings of the 2012 Workshop on Scheme and Functional Programming, Copenhagen, Denmark, 2012.&lt;br /&gt;&lt;a href=&quot;https://github.com/webyrd/2012-scheme-workshop-quines-paper-code&quot;&gt;Complete source code (Scheme)&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Claire E. Alvis, Jeremiah J. Willcock, Kyle M. Carter, William E. Byrd, and Daniel P. Friedman.&lt;a name=&quot;cKanrenPaper&quot; id=&quot;cKanrenPaper&quot;&gt; &lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://www.schemeworkshop.org/2011/papers/Alvis2011.pdf&quot;&gt;cKanren: miniKanren with Constraints.&lt;/a&gt;&lt;br /&gt;In Proceedings of the 2011 Workshop on Scheme and Functional Programming (Scheme '11), Portland, OR, 2011.&lt;br /&gt;&lt;a href=&quot;https://github.com/calvis/cKanren&quot;&gt;Complete source code (R6RS Scheme)&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Ramana Kumar and Michael Norrish&lt;br /&gt;&lt;a href=&quot;http://ssrg.nicta.com.au/publications/nictaabstracts/Kumar_Norrish_10.abstract.pml&quot;&gt;(Nominal) unification by recursive descent with triangular substitutions&lt;/a&gt;&lt;br /&gt;In Proceedings of the First international conference on Interactive Theorem Proving (ITP'10),&lt;br /&gt;Springer-Verlag Berlin, pp. 51-66, 2010.&lt;/p&gt;&lt;p&gt;Andrew W. Keep, Michael D. Adams, Lindsey Kuper, William E. Byrd, and Daniel P. Friedman.&lt;br /&gt;&lt;a href=&quot;http://www.schemeworkshop.org/2009/scheme2009.pdf&quot;&gt;A Pattern-matcher for miniKanren -or- How to Get into Trouble with CPS Macros.&lt;/a&gt;&lt;br /&gt;In Proceedings of the 2009 Workshop on Scheme and Functional Programming,&lt;br /&gt;Cal Poly Technical Report CPSLO-CSC-09-03, pp. 37-45, 2009.&lt;/p&gt;&lt;p&gt;Joseph P. Near, William E. Byrd and Daniel P. Friedman.&lt;br /&gt;&lt;a href=&quot;http://webyrd.net/alphaleantap/alphatap.pdf&quot;&gt;alphaleanTAP: A Declarative Theorem Prover for First-Order Classical Logic.&lt;/a&gt;&lt;br /&gt;In Proceedings of the 24th International Conference on Logic Programming (ICLP 2008),&lt;br /&gt;LNCS vol. 5366, Springer-Verlag, Heidelberg, pp. 238-252, 2008.&lt;br /&gt;&lt;a href=&quot;http://webyrd.net/alphaleantap/alphaleanTAP.zip&quot;&gt;Complete source code--R6RS Scheme and Prolog (.zip file)&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Oleg Kiselyov, William E. Byrd, Daniel P. Friedman and Chung-chieh Shan&lt;br /&gt;&lt;a href=&quot;http://webyrd.net/arithm/arithm.pdf&quot;&gt;Pure, declarative, and constructive arithmetic relations (declarative pearl).&lt;/a&gt;&lt;br /&gt;In Proceedings of the 9th International Symposium on Functional and Logic Programming,&lt;br /&gt;ed. Jacques Garrigue and Manuel Hermenegildo, pp. 64-80.&lt;br /&gt;LNCS vol. 4989, Springer, 2008.&lt;/p&gt;&lt;p&gt;William E. Byrd and Daniel P. Friedman&lt;a name=&quot;alphaKanrenPaper&quot; id=&quot;alphaKanrenPaper&quot;&gt; &lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://webyrd.net/alphamk/alphamk_workshop.pdf&quot;&gt;alphaKanren: A Fresh Name in Nominal Logic Programming.&lt;/a&gt;&lt;br /&gt;In Proceedings of the 2007 Workshop on Scheme and Functional Programming,&lt;br /&gt;Universite Laval Technical Report DIUL-RT-0701, pp. 79-90.&lt;br /&gt;&lt;a href=&quot;http://webyrd.net/alphamk/alphamk.pdf&quot;&gt;Authors' revised version (recommended)&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/webyrd/alphaKanren&quot;&gt;Revised source code (R5RS Scheme)&lt;/a&gt;&lt;/p&gt;&lt;p&gt;William E. Byrd and Daniel P. Friedman&lt;br /&gt;&lt;a href=&quot;http://scheme2006.cs.uchicago.edu/12-byrd.pdf&quot;&gt;From Variadic Functions to Variadic Relations: A miniKanren Perspective.&lt;/a&gt;&lt;br /&gt;In Proceedings of the 2006 Scheme and Functional Programming Workshop,&lt;br /&gt;University of Chicago Technical Report TR-2006-06, 2006, pp. 105-117.&lt;/p&gt;&lt;p&gt;Oleg Kiselyov, Chung-chieh Shan, Daniel P. Friedman, and Amr Sabry&lt;br /&gt;&lt;a href=&quot;http://okmij.org/ftp/papers/LogicT.pdf&quot;&gt;Backtracking, interleaving, and terminating monad transformers: (functional pearl).&lt;/a&gt;&lt;br /&gt;In Proceedings of the 10th ACM SIGPLAN International Conference on Functional Programming (ICFP '05),&lt;br /&gt;ACM Press, New York, pp. 192-203, 2005. 
&lt;/p&gt;&lt;h2&gt;Screencasts&lt;/h2&gt;
&lt;h3&gt;Thomas G. Kristensen&lt;/h3&gt;
&lt;a href=&quot;http://vimeo.com/55677313&quot;&gt;Composing music using core.logic and Overtone - The Composing Schemer&lt;br /&gt;&lt;/a&gt;&lt;a href=&quot;http://tgk.github.com/2012/12/the-composing-schemer.html&quot;&gt;blog post&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/tgk/the-composing-schemer&quot;&gt;source code&lt;/a&gt;&lt;br /&gt;January 2013.&lt;h3&gt;Timothy Baldridge&lt;/h3&gt;
&lt;a href=&quot;http://www.youtube.com/watch?v=HHZ8iqswiCw&quot;&gt;Clojure Core.Logic With Custom Data Sources&lt;/a&gt;&lt;br /&gt;October 25, 2013.&lt;p&gt;&lt;a href=&quot;http://www.youtube.com/watch?feature=player_embedded&amp;amp;v=cUxYoNRW3VM&quot;&gt;Bytecode Assembler in Core.Logic&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://halgari.blogspot.com/2012/12/byte-packing-with-corelogic.html&quot;&gt;related blog post&lt;/a&gt;&lt;br /&gt;Dec 13, 2012.&lt;/p&gt;&lt;h3&gt;Coen De Roover&lt;/h3&gt;
&lt;a href=&quot;http://www.youtube.com/watch?v=5wvVFQa1hVU&quot;&gt;Getting started querying an Eclipse workspace using Ekeko&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/cderoove/damp.ekeko/&quot;&gt;ekeko project&lt;/a&gt;&lt;br /&gt;August 14, 2012. 
&lt;h2&gt;Weekly Google Hangout on Air&lt;/h2&gt;
&lt;h3&gt;Upcoming Hangouts&lt;/h3&gt;
&lt;h3&gt;Previous Hangouts&lt;/h3&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=LMrwiVozcsw&quot;&gt;Hangout #13, Sunday, June 30.&lt;/a&gt;&lt;br /&gt;Topic: Claire shows off a new macro for defining constraints using attributed variables, a new version of the matche pattern matching macro, and the implementation of templateo (declarative &lt;code&gt;copy_term&lt;/code&gt;) (&lt;a href=&quot;https://github.com/calvis/cKanren&quot;&gt;URL&lt;/a&gt;). Norman demos his &lt;a href=&quot;https://gist.github.com/orb/5895918&quot;&gt;code&lt;/a&gt; for solving &lt;a href=&quot;http://www.brainbashers.com/nonogrids.asp&quot;&gt;nonogrids problems&lt;/a&gt;. Will talks about CPSing miniKanren programs.&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=yNi3W78ZSII&quot;&gt;Hangout #12, Sunday, June 23, 2013.&lt;/a&gt;&lt;br /&gt;Topic: Gary shows off his CLP(FD) program to layout &lt;a href=&quot;http://gfredericks.com/gfrlog/98&quot;&gt;2D figures&lt;/a&gt;; Will describes the new, apparently fixed &lt;a href=&quot;https://github.com/calvis/cKanren/blob/master/cKanren/template.rkt&quot;&gt;&lt;code&gt;templateo&lt;/code&gt; constraint&lt;/a&gt;, and explains how it is used in a &lt;a href=&quot;https://github.com/webyrd/templateo&quot;&gt;relational term reducer&lt;/a&gt; for the untyped lambda-calculus.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=CZVZPugCkJQ&quot;&gt;Hangout #11, Sunday, June 9, 2013.&lt;/a&gt;&lt;br /&gt;Topic: Unexpected memory usage in &lt;code&gt;conde&lt;/code&gt;, and how to fix it in CLP(FD); meta-interpreters in miniKanren (&lt;a href=&quot;https://github.com/webyrd/meta-interp&quot;&gt;code&lt;/a&gt;); what do you need to know to use miniKanren effectively?; Will's new book on miniKanren (&lt;a href=&quot;https://github.com/webyrd/relational-programming-in-miniKanren&quot;&gt;in progress&lt;/a&gt;).&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=boymkCvXJi8&quot;&gt;Hangout #10, Sunday, June 2, 2013.&lt;/a&gt;&lt;br /&gt;Topic: We discuss CLP(Set) and declarative &lt;code&gt;copy_term&lt;/code&gt; (a.k.a., &lt;code&gt;templateo&lt;/code&gt;) (&lt;a href=&quot;https://github.com/calvis/cKanren&quot;&gt;code&lt;/a&gt;). Lindsey shows off LVish (&lt;a href=&quot;https://github.com/lkuper/lvars/tree/master/redex/LVish&quot;&gt;code&lt;/a&gt;). David poses a core.logic puzzle. Dan and Jason discuss miniC, a minimal miniKanren without macros. Will shows off a relational lambda calculus reducer (&lt;a href=&quot;https://github.com/webyrd/templateo&quot;&gt;code&lt;/a&gt;).&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=tqD7ioh_WYw&quot;&gt;Hangout #9, Sunday, May 19, 2013.&lt;/a&gt;&lt;br /&gt;Topic: Will shows off a meta-circular interpreter for miniKanren (&lt;a href=&quot;https://github.com/webyrd/mk-metacircular-interp&quot;&gt;code&lt;/a&gt;), and describes the outline for a new book he is writing on relational programming (&lt;a href=&quot;https://github.com/webyrd/relational-programming-in-miniKanren&quot;&gt;book&lt;/a&gt;).&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=ux6St9r-KmM&quot;&gt;Hangout #8, Sunday, May 5, 2013.&lt;/a&gt;&lt;br /&gt;Topic: Dan and Jason show off a cool way to implement mutual recursion in an interpreter. Will and the gang then live-code a relational interpreter for general Deterministic Finite Automata (&lt;a href=&quot;https://github.com/webyrd/relational-dfa&quot;&gt;code&lt;/a&gt;).&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=hIyVyy78lAs&quot;&gt;Hangout #7, Sunday, April 28, 2013.&lt;/a&gt;&lt;br /&gt;Topic: Translating simple Scheme functions to miniKanren using correctness-preserving transformations.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=MTAhbsWUUxM&quot;&gt;Hangout #6, Sunday, April 21, 2013.&lt;/a&gt;&lt;br /&gt;Topic: Live coding/real-time solution of a simple problem solved by Michael. Also, Claire discusses new features of cKanren in Racket.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=VSpq3qK9L88&quot;&gt;Hangout #5, Sunday, April 14, 2013.&lt;/a&gt;&lt;br /&gt;Topic: Stump the Chump! Will partially translates miniKanren's unify function from Scheme into miniKanren (&lt;a href=&quot;https://github.com/webyrd/relational-unifier&quot;&gt;code&lt;/a&gt;). Also, discussion of extra-logical operators, and new miniKanren features in progress: CLP(Set), constraint handling rules, lazy constraints for recursion.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=WMjvyizzE78&quot;&gt;Hangout #4, Sunday, April 7, 2013.&lt;/a&gt;&lt;br /&gt;Topic: Debugging miniKanren programs; Constraint Logic Programming over sets (based on the paper &lt;a href=&quot;http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.132.1779&quot;&gt;Sets and Constraint Logic Programming&lt;/a&gt; by Dovier, et al., 2000).&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=su3os5qMLr0&quot;&gt;Hangout #3, Sunday, March 31, 2013.&lt;/a&gt;&lt;br /&gt;Implementation of simplified miniKanren (&lt;a href=&quot;https://github.com/miniKanren/simple-miniKanren&quot;&gt;source code&lt;/a&gt;).&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=eEDmGOLN4Q4&quot;&gt;Hangout #2, March 24, 2013.&lt;/a&gt;&lt;br /&gt;Implementing disequality constraints, absento/presento constraints, miniKanren Confo at Clojure/West, relational CESK machine.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=vRrgaibcTYs&quot;&gt;Hangout #1, March 10, 2013.&lt;/a&gt;&lt;br /&gt;A little miniKanren history, what it means to be relational, a relational variant of copy-term, debugging miniKanren programs. 
&lt;/p&gt;&lt;h2&gt;Podcasts&lt;/h2&gt;
Mostly lazy... a Clojure podcast&lt;br /&gt;&lt;a href=&quot;http://mostlylazy.com/2013/01/04/episode-9-with-kevin-lynagh-and-paul-degrandis-web-dev-ennui-crdts-and-core-logic/&quot;&gt;Episode 9 with Kevin Lynagh and Paul deGrandis: web dev ennui, CRDTs, and core.logic&lt;/a&gt;&lt;br /&gt;Recorded December 14th, 2012. 
&lt;h2&gt;Blogs&lt;/h2&gt;
&lt;h3&gt;&lt;a href=&quot;http://swannodette.github.com&quot;&gt;David Nolen - dosync&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;http://swannodette.github.io/2013/03/25/stlc-redux-part-ii&quot;&gt;STLC Redux: Part II&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://swannodette.github.io/2013/03/09/logic-programming-is-underrated&quot;&gt;Logic Programming is Underrated&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://swannodette.github.io/nominal%20logic/2013/02/08/the-simply-typed-lambda-calculus-in-20-lines-redux&quot;&gt;The Simply Typed Lambda Calculus in 20 Lines Redux&lt;/a&gt;&lt;p&gt;From David Nolen's old blog (courtesy of the &lt;a href=&quot;https://archive.org&quot;&gt;Internet Archive's&lt;/a&gt; &lt;a href=&quot;https://archive.org/web/&quot;&gt;Wayback Machine&lt;/a&gt;):&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://web.archive.org/web/20130511050720/http://dosync.posterous.com/know-your-bounds&quot;&gt;Know Your Bounds&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://web.archive.org/web/20130511050728/http://dosync.posterous.com/friendlier-shorter&quot;&gt;friendlier&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://web.archive.org/web/20130511050735/http://dosync.posterous.com/sudoku&quot;&gt;sudoku&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://web.archive.org/web/20130511050744/http://dosync.posterous.com/a-logic-programming-reading-list&quot;&gt;A Logic Programming Reading List&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://web.archive.org/web/20130511050830/http://dosync.posterous.com/logic-programming-javascript&quot;&gt;Logic Programming &amp;amp; JavaScript&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://web.archive.org/web/20130511050856/http://dosync.posterous.com/corelogic-vpri-steps&quot;&gt;core.logic &amp;amp; VPRI STEPS&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://web.archive.org/web/20130511051249/http://dosync.posterous.com/another-taste-of-ckanren&quot;&gt;Another Taste of cKanren&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://web.archive.org/web/20130511051259/http://dosync.posterous.com/a-taste-of-ckanren&quot;&gt;A Taste of cKanren&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://web.archive.org/web/20130511051348/http://dosync.posterous.com/simple-type-inference-for-the-simply-typed-la&quot;&gt;Simple Type Inference For The Simply Typed Lambda Calculus in ~20 Lines&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://web.archive.org/web/20130511051414/http://dosync.posterous.com/logos-corelogic&quot;&gt;Logos -&amp;gt; core.logic&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://web.archive.org/web/20130511051420/http://dosync.posterous.com/crazy-ideas&quot;&gt;Crazy Ideas&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://web.archive.org/web/20130511051429/http://dosync.posterous.com/fun&quot;&gt;Fun&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://web.archive.org/web/20130511051436/http://dosync.posterous.com/spring-cleaning&quot;&gt;Spring Cleaning&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://web.archive.org/web/20130511051449/http://dosync.posterous.com/simple-constraints&quot;&gt;Simple Constraints&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://web.archive.org/web/20130511051504/http://dosync.posterous.com/21ms&quot;&gt;~2.1ms&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://web.archive.org/web/20130511051519/http://dosync.posterous.com/tabling-in-logos&quot;&gt;Tabling in Logos&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://web.archive.org/web/20130511051525/http://dosync.posterous.com/pattern-matching&quot;&gt;Pattern Matching&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://web.archive.org/web/20130511051540/http://dosync.posterous.com/finally-a-clue&quot;&gt;Finally ... a clue&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://web.archive.org/web/20130511051605/http://dosync.posterous.com/performance-matters&quot;&gt;Performance Matters&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://web.archive.org/web/20130511051615/http://dosync.posterous.com/faster-unification&quot;&gt;Faster Unification&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://web.archive.org/web/20130511051624/http://dosync.posterous.com/logic-programming-and-performance&quot;&gt;Logic Programming and Performance&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://web.archive.org/web/20130511051638/http://dosync.posterous.com/a-short-break&quot;&gt;A Short Break&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://web.archive.org/web/20130511051208/http://dosync.posterous.com/life-without-tail-call-optimization&quot;&gt;Life Without Tail Call Optimization&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://web.archive.org/web/20130511051645/http://dosync.posterous.com/announcing-logos&quot;&gt;Announcing Logos&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://web.archive.org/web/20130511051706/http://dosync.posterous.com/a-minikanren-introduction-via-clojure&quot;&gt;A miniKanren introduction via Clojure&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;&lt;h3&gt;&lt;a href=&quot;https://nickdrozd.github.io/&quot;&gt;Nick Drozd&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;https://nickdrozd.github.io/2018/08/14/modal-sentences.html&quot;&gt;Generating Sentences of Modal Logic&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://nickdrozd.github.io/2018/08/15/prop-proofs.html&quot;&gt;Generating Propositional Logic Proofs&lt;/a&gt;&lt;br /&gt;&lt;h3&gt;&lt;a href=&quot;http://clojurelx.blogspot.com&quot;&gt;Clojure &amp;amp; lx&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;http://clojurelx.blogspot.com/2012/07/another-logic-programming-reading-list.html&quot;&gt;Another Logic Programming Reading List&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://clojurelx.blogspot.com/2012/02/lx-in-corelogic-3-finite-state.html&quot;&gt;lx in core.logic #3: Finite State Transducers&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://clojurelx.blogspot.com/2012/01/lx-in-corelogic-2-jumps-flexible.html&quot;&gt;lx in core.logic #2: Jumps, Flexible Transitions and Parsing&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://clojurelx.blogspot.com/2012/01/finite-state-machines-in-corelogic.html&quot;&gt;Finite State Machines in core.logic&lt;/a&gt;
&lt;h3&gt;&lt;a href=&quot;https://wickstrom.tech&quot;&gt;Oskar WickstrÃ¶m&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;https://wickstrom.tech/programming/2016/08/07/generating-sight-reading-exercises-using-constraint-logic-programming-in-clojure-part-1.html&quot;&gt;Generating Sight-Reading Exercises using Constraint Logic Programming in Clojure, Part 1&lt;/a&gt;
&lt;h3&gt;&lt;a href=&quot;http://halgari.blogspot.com&quot;&gt;Timothy Baldridge - (apply clojure @life)&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;http://halgari.blogspot.com/2012/12/heres-quick-screencast-of-some-work-ive.html&quot;&gt;Bytecode Assembler in Core.Logic&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://halgari.blogspot.com/2012/12/byte-packing-with-corelogic.html&quot;&gt;Byte Packing with core.logic&lt;/a&gt;
&lt;h3&gt;&lt;a href=&quot;http://tgk.github.com/&quot;&gt;Thomas G. Kristensen - Clojure/tgk&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;http://tgk.github.io/2013/02/parsing-packets-erlang-style-using-core-logic.html&quot;&gt;Parsing packets Erlang style using core.logic&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://tgk.github.com/2012/12/the-composing-schemer.html&quot;&gt;The Composing Schemer&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://tgk.github.com/2012/08/finding-cliques-in-graphs-using-core-logic.html&quot;&gt;Finding cliques in graphs using core.logic&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://tgk.github.com/2012/08/maximum-cliques-algorithm-in-clojure.html&quot;&gt;Maximum cliques algorithm in Clojure&lt;/a&gt;
&lt;h3&gt;&lt;a href=&quot;http://boss-level.com&quot;&gt;Edmund Jackson - boss level&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;http://boss-level.com/?p=66&quot;&gt;mini-Sudoku in mini-Kanren (in Clojure-&quot;ish&quot;)&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://boss-level.com/?p=64&quot;&gt;Logic Programming Part 3 (List Logic)&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://boss-level.com/?p=28&quot;&gt;Logic Programming Part 2 (Building Blocks)&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://boss-level.com/?p=17&quot;&gt;Logic Programming Part 1&lt;/a&gt;
&lt;h3&gt;&lt;a href=&quot;http://clojure.com/blog/&quot;&gt;clojure.com - Clojure/core (posts by Stuart Sierra)&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;http://clojure.com/blog/2011/12/08/lojic-part-two.html&quot;&gt;Lojic Part Two&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://clojure.com/blog/2011/12/05/lojic-part-one.html&quot;&gt;Lojic Part One&lt;/a&gt;
&lt;h3&gt;&lt;a href=&quot;http://www.clojure.net/&quot;&gt;Jim Duey - A Clojure Story&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;http://www.clojure.net/2013/10/24/Building-trees/&quot;&gt;Building Trees&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://www.clojure.net/2013/10/20/Meta-Machinations/&quot;&gt;Meta Machinations&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://www.clojure.net/2013/10/16/Build-an-arrow/&quot;&gt;Build An Arrow&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://www.clojure.net/2013/10/12/Meta-Machinations/&quot;&gt;Meta Machinations&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://www.clojure.net/2013/10/05/Arrowed-core.logic/&quot;&gt;Arrowed Core.logic&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://www.clojure.net/2012/10/02/More-core.logic/&quot;&gt;More Core.logic&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://www.clojure.net/2012/03/26/Messin-with-core.logic/&quot;&gt;Messin With Core.logic&lt;/a&gt;
&lt;h3&gt;&lt;a href=&quot;http://clj-me.cgrand.net&quot;&gt;Christophe Grand - Clojure and me&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;http://clj-me.cgrand.net/2012/04/06/fair-conjunction-status-report/&quot;&gt;Fair conjunction: status report&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://clj-me.cgrand.net/2012/01/30/the-reasoned-scheduler/&quot;&gt;The Reasoned Scheduler&lt;/a&gt;
&lt;h3&gt;&lt;a href=&quot;http://objectcommando.com&quot;&gt;Ryan Senior - Object Commando&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;http://objectcommando.com/blog/2011/11/04/the-magical-island-of-kanren-core-logic-intro-part-1/&quot;&gt;The Magical Island of Kanren - core.logic Intro Part 1&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://objectcommando.com/blog/2011/10/13/appendo-the-great/&quot;&gt;Appendo the Great&lt;/a&gt;
&lt;h3&gt;&lt;a href=&quot;http://martintrojer.github.io/&quot;&gt;Martin Trojer&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;http://martintrojer.github.io/clojure/2012/09/27/some-corelogic-graph-code&quot;&gt;Some core.logic graph code&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://martintrojer.github.io/clojure/2012/08/12/ckanren-time&quot;&gt;cKanren time!&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://martintrojer.github.io/clojure/2012/07/11/n-queens-with-corelogic-take-2&quot;&gt;Replicating Datomic/Datalog queries with core.logic, take 2&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://martintrojer.github.io/clojure/2012/07/07/n-queens-with-corelogic-take-1&quot;&gt;Replicating Datomic/Datalog queries with core.logic, take 1&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://martintrojer.github.io/clojure/2012/07/11/n-queens-with-corelogic-take-2&quot;&gt;N-Queens with core.logic, take 2&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://martintrojer.github.io/clojure/2012/07/07/n-queens-with-corelogic-take-1&quot;&gt;N-Queens with core.logic, take 1&lt;/a&gt;
&lt;h3&gt;&lt;a href=&quot;http://spin.atomicobject.com&quot;&gt;Atomic Object - Atomic Spin&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;http://spin.atomicobject.com/2012/12/08/minikanren-in-haskell/&quot;&gt;miniKanren in Haskell&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://spin.atomicobject.com/2013/01/14/first-time-programming-scared-me/&quot;&gt;The First Time Programming Scared Me&lt;/a&gt;
&lt;h3&gt;&lt;a href=&quot;http://blog.jenkster.com/&quot;&gt;Kris Jenkins&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;http://blog.jenkster.com/2013/02/solving-logic-puzzles-with-clojures-core-logic-part-two.html&quot;&gt;Solving Logic Puzzles With Clojure's Core Logic, Part Two&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://blog.jenkster.com/2013/02/solving-logic-puzzles-with-clojures-corelogic.html&quot;&gt;Solving Logic Puzzles With Clojure's Core Logic, Part One&lt;/a&gt;
&lt;h3&gt;&lt;a href=&quot;http://www.50ply.com/&quot;&gt;Brian Taylor&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;http://www.50ply.com/blog/2012/08/01/pfai-to-core-logic-chapter-2/&quot;&gt;PPfAI Chapter 2 (in Clojure Core.Logic)&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://www.50ply.com/blog/2012/07/29/pfai-to-core-dot-logic/&quot;&gt;PPfAI Chapter 1 in Clojure Core.Logic&lt;/a&gt;
&lt;h3&gt;&lt;a href=&quot;http://pragprog.com/magazines&quot;&gt;Paul Callaghan - PragPub Magazine&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;http://pragprog.com/magazines/2013-06/unification&quot;&gt;Unification: It's Not Just for Prolog&lt;/a&gt;
&lt;h3&gt;&lt;a href=&quot;http://lindseykuper.livejournal.com/&quot;&gt;Lindsey Kuper&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;http://lindseykuper.livejournal.com/345176.html&quot;&gt;Generating tautologies with miniKanren&lt;/a&gt;
&lt;h3&gt;&lt;a href=&quot;http://michaelrbernste.in/&quot;&gt;Michael R. Bernstein&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;http://michaelrbernste.in/2013/05/12/featurec-and-maps.html&quot;&gt;A Nice Feature in core.logic and Thoughts About A Data Structure&lt;/a&gt;
&lt;h3&gt;&lt;a href=&quot;http://jvns.ca/&quot;&gt;Julia Evans&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;http://jvns.ca/blog/2013/11/20/day-31-logic-programming-pretty-music/&quot;&gt;Day 31: Binary trees with core.logic!&lt;/a&gt;
&lt;h3&gt;&lt;a href=&quot;http://mariapacana.tumblr.com/&quot;&gt;Maria Pacana&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;http://mariapacana.tumblr.com/post/67799683667/minikanren&quot;&gt;MiniKanren&lt;/a&gt;
&lt;h3&gt;&lt;a href=&quot;https://kotka.de/index.html&quot;&gt;Meikel Brandmeyer&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;https://kotka.de/blog/2011/10/A_field_trip_into_logic_programming.html&quot;&gt;A field trip into logic programming&lt;/a&gt;
&lt;h3&gt;&lt;a href=&quot;http://tsdh.wordpress.com/&quot;&gt;Tassilo Horn&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;http://tsdh.wordpress.com/2012/01/06/using-clojures-core-logic-with-custom-data-structures/&quot;&gt;Using Clojure's core.logic with custom data structures&lt;/a&gt;
&lt;h3&gt;&lt;a href=&quot;http://bithacker.net/&quot;&gt;Cameron Swords&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;http://bithacker.net/2013-09-20-rkanren.html&quot;&gt;rKanren: Guided Search in miniKanren, Part 1&lt;/a&gt;
&lt;h3&gt;&lt;a href=&quot;http://blog.bloidonia.com/&quot;&gt;Tim Yates&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;http://blog.bloidonia.com/post/29552846202/using-clojure-and-core-logic-from-groovy&quot;&gt;Using Clojure and core.logic from Groovy&lt;/a&gt;
&lt;h3&gt;&lt;a href=&quot;http://peteriserins.tumblr.com/&quot;&gt;Peteris Erins&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;http://peteriserins.tumblr.com/post/38165611698/temporal-logic-programming-in-clojure-core-logic&quot;&gt;Temporal logic programming in Clojure core.logic&lt;/a&gt;
&lt;h3&gt;&lt;a href=&quot;http://blog.malcolmsparks.com/&quot;&gt;Malcolm Sparks&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;http://blog.malcolmsparks.com/?p=49&quot;&gt;Transitive relations in core.logic&lt;/a&gt;
&lt;h3&gt;&lt;a href=&quot;http://blog.zolotko.me/&quot;&gt;Alexander Zolotko&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;http://blog.zolotko.me/2013/07/getting-my-feet-wet-with.html&quot;&gt;Getting my feet wet with Clojure's core.logic&lt;/a&gt;
&lt;h3&gt;&lt;a href=&quot;http://scattered-thoughts.net/&quot;&gt;Jamie Brandon&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;http://scattered-thoughts.net/blog/2012/12/19/search-trees-and-core-dot-logic/&quot;&gt;Search trees and core.logic&lt;/a&gt;
&lt;h3&gt;&lt;a href=&quot;https://coderwall.com/samn&quot;&gt;Sam Neubardt - coderwall&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;https://coderwall.com/p/-w4plq&quot;&gt;Find Elements in a Collection Using core.logic&lt;/a&gt;
&lt;h3&gt;&lt;a href=&quot;http://jrheard.tumblr.com/&quot;&gt;JR Heard&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;http://jrheard.tumblr.com/post/43575891007/explorations-in-clojures-core-logic&quot;&gt;Explorations in Clojure's core.logic&lt;/a&gt;
&lt;h3&gt;&lt;a href=&quot;http://hakutaku.me/&quot;&gt;Oleg Prophet&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;http://hakutaku.me/posts/2014-05-05-fun-lambda-calc-minikanren.html&quot;&gt;Fun with Lambda calculus Interpreters in miniKanren&lt;/a&gt; 
&lt;h2&gt;Contact&lt;/h2&gt;
This site is maintained by Will Byrd: &lt;a href=&quot;mailto:webyrd@gmail.com&quot;&gt;webyrd@gmail.com&lt;/a&gt;.&lt;p&gt;Thanks to &lt;a href=&quot;https://github.com/kumarshantanu&quot;&gt;Shantanu Kumar&lt;/a&gt;, &lt;a href=&quot;http://martinsprogrammingblog.blogspot.co.uk/&quot;&gt;Martin Trojer&lt;/a&gt;, and &lt;a href=&quot;http://asylum.madhouse-project.org/&quot;&gt;Gergely Nagy&lt;/a&gt; for improving the site by submitting a &lt;a href=&quot;https://github.com/miniKanren/miniKanren_org-website&quot;&gt;pull request&lt;/a&gt;.&lt;/p&gt;</description>
<pubDate>Mon, 17 Dec 2018 13:10:38 +0000</pubDate>
<dc:creator>tosh</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>http://minikanren.org/</dc:identifier>
</item>
<item>
<title>The Yoda of Silicon Valley</title>
<link>https://www.nytimes.com/2018/12/17/science/donald-knuth-computers-algorithms-programming.html</link>
<guid isPermaLink="true" >https://www.nytimes.com/2018/12/17/science/donald-knuth-computers-algorithms-programming.html</guid>
<description>&lt;div class=&quot;css-u5vfum StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;For half a century, the Stanford computer scientist Donald Knuth, who bears a slight resemblance to Yoda — albeit standing 6-foot-4 and wearing glasses — has reigned as the spirit-guide of the algorithmic realm.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;He is the author of “&lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www-cs-faculty.stanford.edu/~knuth/taocp.html&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;The Art of Computer Programming&lt;/a&gt;,” a continuing four-volume opus that is his life’s work. The first volume debuted in 1968, and the collected volumes (sold as a boxed set for about $250) were included by American Scientist in 2013 on its list of books that shaped the last century of science — alongside a special edition of “The Autobiography of Charles Darwin,&lt;em class=&quot;css-2fg4z9 ehxkw330&quot;&gt;”&lt;/em&gt; Tom Wolfe’s “The Right Stuff,” Rachel Carson’s “Silent Spring” and monographs by Albert Einstein, John von Neumann and Richard Feynman.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;With more than one million copies in print, “The Art of Computer Programming” is the Bible of its field. “Like an actual bible, it is long and comprehensive; no other book is as comprehensive,” said Peter Norvig, a director of research at Google. After 652 pages, volume one closes with a blurb on the back cover from Bill Gates: “You should definitely send me a résumé if you can read the whole thing.”&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;The volume opens with an excerpt from “McCall’s Cookbook”:&lt;/p&gt;
&lt;blockquote class=&quot;css-1hb6e5z e12ei6va0&quot;&gt;
&lt;p class=&quot;css-1plcdrk e2kc3sl0&quot;&gt;Here is your book, the one your thousands of letters have asked us to publish. It has taken us years to do, checking and rechecking countless recipes to bring you only the best, only the interesting, only the perfect.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Inside are algorithms, the recipes that feed the digital age — although, as Dr. Knuth likes to point out, algorithms can also be found on Babylonian tablets from 3,800 years ago. He is an esteemed algorithmist; his name is attached to some of the field’s most important specimens, such as the Knuth-Morris-Pratt string-searching algorithm. Devised in 1970, it finds all occurrences of a given word or pattern of letters in a text — for instance, when you hit Command+F to search for a keyword in a document.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-1m2ozyi&quot;/&gt;&lt;/div&gt;&lt;div class=&quot;css-u5vfum StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;&lt;strong class=&quot;css-8qgvsz euv7paa0&quot;&gt;&lt;em class=&quot;css-2fg4z9 ehxkw330&quot;&gt;[&lt;/em&gt;&lt;/strong&gt;&lt;strong class=&quot;css-8qgvsz euv7paa0&quot;&gt;&lt;a class=&quot;css-1g7m0tk&quot; href=&quot;http://on.fb.me/1paTQ1h&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;&lt;em class=&quot;css-2fg4z9 ehxkw330&quot;&gt;Like the Science Times page on Facebook.&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt; &lt;em class=&quot;css-2fg4z9 ehxkw330&quot;&gt;| Sign up for the&lt;/em&gt; &lt;strong class=&quot;css-8qgvsz euv7paa0&quot;&gt;&lt;a class=&quot;css-1g7m0tk&quot; href=&quot;http://nyti.ms/1MbHaRU&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;&lt;em class=&quot;css-2fg4z9 ehxkw330&quot;&gt;Science Times newsletter.&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong class=&quot;css-8qgvsz euv7paa0&quot;&gt;&lt;em class=&quot;css-2fg4z9 ehxkw330&quot;&gt;]&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Now 80, Dr. Knuth usually dresses like the youthful geek he was when he embarked on this odyssey: long-sleeved T-shirt under a short-sleeved T-shirt, with jeans, at least at this time of year. In those early days, he worked close to the machine, writing “in the raw,” tinkering with the zeros and ones.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;“Knuth made it clear that the system could actually be understood all the way down to the machine code level,” said Dr. Norvig. Nowadays, of course, with algorithms masterminding (and undermining) our very existence, the average programmer no longer has time to manipulate the binary muck, and works instead with hierarchies of abstraction, layers upon layers of code — and often with chains of code borrowed from code libraries. But an elite class of engineers occasionally still does the deep dive.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;“Here at Google, sometimes we just throw stuff together,” Dr. Norvig said, during a meeting of the Google Trips team, in Mountain View, Calif. “But other times, if you’re serving billions of users, it’s important to do that efficiently. A 10-per-cent improvement in efficiency can work out to billions of dollars, and in order to get that last level of efficiency, you have to understand what’s going on all the way down.”&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-1m2ozyi&quot;/&gt;&lt;/div&gt;
&lt;div data-testid=&quot;photoviewer-wrapper&quot; class=&quot;css-79elbk ehw59r11&quot;&gt;

&lt;div data-testid=&quot;photoviewer-children&quot; class=&quot;css-1a48zt4 ehw59r111&quot;&gt;
&lt;div class=&quot;css-1xdhyk6 e1vv25i80&quot;&gt;&lt;span class=&quot;css-1ly73wi e1afaoz0&quot;&gt;Image&lt;/span&gt;&lt;img alt=&quot;&quot; class=&quot;css-1m50asq&quot; src=&quot;https://static01.nyt.com/images/2018/12/18/science/18SCI-KNUTH2/merlin_148140651_0cac5ef1-2369-42fb-8bdf-597b8d02e7e7-articleLarge.jpg?quality=75&amp;amp;auto=webp&amp;amp;disable=upscale&quot; srcset=&quot;https://static01.nyt.com/images/2018/12/18/science/18SCI-KNUTH2/merlin_148140651_0cac5ef1-2369-42fb-8bdf-597b8d02e7e7-articleLarge.jpg?quality=90&amp;amp;auto=webp 600w,https://static01.nyt.com/images/2018/12/18/science/18SCI-KNUTH2/merlin_148140651_0cac5ef1-2369-42fb-8bdf-597b8d02e7e7-jumbo.jpg?quality=90&amp;amp;auto=webp 1018w,https://static01.nyt.com/images/2018/12/18/science/18SCI-KNUTH2/merlin_148140651_0cac5ef1-2369-42fb-8bdf-597b8d02e7e7-superJumbo.jpg?quality=90&amp;amp;auto=webp 2035w&quot; sizes=&quot;((min-width: 600px) and (max-width: 1004px)) 84vw, (min-width: 1005px) 60vw, 100vw&quot; itemprop=&quot;url&quot; itemid=&quot;https://static01.nyt.com/images/2018/12/18/science/18SCI-KNUTH2/merlin_148140651_0cac5ef1-2369-42fb-8bdf-597b8d02e7e7-articleLarge.jpg?quality=75&amp;amp;auto=webp&amp;amp;disable=upscale&quot;/&gt;&lt;/div&gt;
&lt;span class=&quot;css-8i9d0s e1olku6u0&quot;&gt;Dr. Knuth at the California Institute of Technology, where he received his Ph.D. in 1963.&lt;/span&gt;&lt;span itemprop=&quot;copyrightHolder&quot; class=&quot;css-vuqh7u e18m0s9i0&quot;&gt;&lt;span class=&quot;css-1ly73wi e1afaoz0&quot;&gt;Credit&lt;/span&gt;&lt;span&gt;Jill Knuth&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;css-u5vfum StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Or, as Andrei Broder, a distinguished scientist at Google and one of Dr. Knuth’s former graduate students, explained during the meeting: “We want to have some theoretical basis for what we’re doing. We don’t want a frivolous or sloppy or second-rate algorithm. We don’t want some other algorithmist to say, ‘You guys are morons.’”&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;The Google Trips app, created in 2016, is an “orienteering algorithm” that maps out a day’s worth of recommended touristy activities. The team was working on “&lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://ai.google/research/pubs/pub46479&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;maximizing the quality of the worst day&lt;/a&gt;” — for instance, avoiding sending the user back to the same neighborhood to see different sites. They drew inspiration from a 300-year-old algorithm by the Swiss mathematician Leonhard Euler, who wanted to map a route through the Prussian city of Königsberg that would cross each of its seven bridges only once. Dr. Knuth addresses Euler’s classic problem in the first volume of his treatise. (He once applied Euler’s method in coding a computer-controlled &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.google.com/url?q=https://www.youtube.com/watch?v%3DYVuggGxeBVk&amp;amp;source=gmail&amp;amp;ust=1544691602295000&amp;amp;usg=AFQjCNHIgczYKhIgA6TdbHiyWTJeQWPSGw&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;sewing machine&lt;/a&gt;.)&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-1m2ozyi&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-u5vfum StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Following Dr. Knuth’s doctrine helps to ward off moronry. He is known for introducing the notion of “literate programming,” emphasizing the importance of writing code that is readable by humans as well as computers — a notion that nowadays seems almost twee. Dr. Knuth has gone so far as to argue that some computer programs are, like Elizabeth Bishop’s poems and Philip Roth’s “American Pastoral,” works of literature worthy of a Pulitzer.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;He is also a notorious perfectionist. Randall Munroe, the &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://xkcd.com/342/&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;&lt;em class=&quot;css-2fg4z9 ehxkw330&quot;&gt;xkcd&lt;/em&gt;&lt;/a&gt; cartoonist and author of “Thing Explainer,” first learned about Dr. Knuth from computer-science people who mentioned the reward money Dr. Knuth pays to anyone who finds a mistake in any of his books. As Mr. Munroe recalled, “People talked about getting one of those checks as if it was computer science’s Nobel Prize.”&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Dr. Knuth’s exacting standards, literary and otherwise, may explain why his life’s work is nowhere near done. He has a wager with Sergey Brin, the co-founder of Google and a former student (to use the term loosely), over whether Mr. Brin will finish his Ph.D. before Dr. Knuth concludes his opus.&lt;/p&gt;
&lt;h2 class=&quot;css-sbs9ef eqpy7av0&quot; id=&quot;link-6d97cb46&quot;&gt;The dawn of the algorithm&lt;/h2&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;At age 19, Dr. Knuth published his first technical paper, “The Potrzebie System of Weights and Measures,” in Mad magazine. He became a computer scientist before the discipline existed, studying mathematics at what is now Case Western Reserve University in Cleveland. He looked at sample programs for the school’s IBM 650 mainframe, a decimal computer, and, noticing some inadequacies, rewrote the software as well as the textbook used in class. As a side project, he ran stats for the basketball team, writing a computer program that helped them win their league — and earned a segment by Walter Cronkite called “&lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.youtube.com/watch?v=dhh8Ao4yweQ&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;The Electronic Coach&lt;/a&gt;.”&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;During summer vacations, Dr. Knuth made more money than professors earned in a year by writing compilers. A compiler is like a translator, converting a high-level programming language (resembling algebra) to a lower-level one (sometimes arcane binary) and, ideally, improving it in the process. In computer science, “optimization” is truly an art, and this is articulated in another Knuthian proverb: “Premature optimization is the root of all evil.”&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Eventually Dr. Knuth became a compiler himself, inadvertently founding a new field that he came to call the “analysis of algorithms.” A publisher hired him to write a book about compilers, but it evolved into a book collecting everything he knew about how to write for computers — a book about algorithms.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-1m2ozyi&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-a7yk8a el4g4lw0&quot;&gt;

&lt;span class=&quot;css-8i9d0s e1olku6u0&quot;&gt;Dr. Knuth in 1981, looking at the 1957 Mad magazine issue that contained his first technical article. He was 19 when it was published.&lt;/span&gt;&lt;span itemprop=&quot;copyrightHolder&quot; class=&quot;css-vuqh7u e18m0s9i0&quot;&gt;&lt;span class=&quot;css-1ly73wi e1afaoz0&quot;&gt;Credit&lt;/span&gt;&lt;span&gt;Jill Knuth&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;css-8i9d0s e1olku6u0&quot;&gt;“The Art of Computer Programming,” volumes 1-4. “Send me a résumé if you can read the whole thing,” Bill Gates wrote in a blurb.&lt;/span&gt;&lt;span itemprop=&quot;copyrightHolder&quot; class=&quot;css-vuqh7u e18m0s9i0&quot;&gt;&lt;span class=&quot;css-1ly73wi e1afaoz0&quot;&gt;Credit&lt;/span&gt;&lt;span&gt;Brian Flaherty for The New York Times&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;css-u5vfum StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;“By the time of the Renaissance, the origin of this word was in doubt,” it began. “And early linguists attempted to guess at its derivation by making combinations like &lt;em class=&quot;css-2fg4z9 ehxkw330&quot;&gt;algiros&lt;/em&gt; [painful] + &lt;em class=&quot;css-2fg4z9 ehxkw330&quot;&gt;arithmos&lt;/em&gt; [number].’” In fact, Dr. Knuth continued, the namesake is the 9th-century Persian textbook author Abū ‘Abd Allāh Muhammad ibn Mūsā al-Khwārizmī, Latinized as Algorithmi. Never one for half measures, Dr. Knuth went on a pilgrimage in 1979 to al-Khwārizmī’s ancestral homeland in Uzbekistan.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-1m2ozyi&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-u5vfum StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;When Dr. Knuth started out, he intended to write a single work. Soon after, computer science underwent its Big Bang, so he reimagined and recast the project in seven volumes. Now he metes out sub-volumes, called fascicles. The next installation, “Volume 4, Fascicle 5,” covering, among other things, “backtracking” and “dancing links,” was meant to be published in time for Christmas. It is delayed until next April because he keeps finding more and more irresistible problems that he wants to present.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;In order to optimize his chances of getting to the end, Dr. Knuth has long guarded his time. He retired at 55, restricted his public engagements and quit email (officially, at least). Andrei Broder recalled that time management was his professor’s defining characteristic even in the early 1980s.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Dr. Knuth typically held student appointments on Friday mornings, until he started spending his nights in the lab of John McCarthy, a founder of artificial intelligence, to get access to the computers when they were free. Horrified by what his beloved book looked like on the page with the advent of digital publishing, Dr. Knuth had gone on a mission to create the TeX computer typesetting system, which remains the gold standard for all forms of scientific communication and publication. Some consider it Dr. Knuth’s greatest contribution to the world, and the greatest contribution to typography since Gutenberg.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;This decade-long detour took place back in the age when computers were shared among users and ran faster at night while most humans slept. So Dr. Knuth switched day into night, shifted his schedule by 12 hours and mapped his student appointments to Fridays from 8 p.m. to midnight. Dr. Broder recalled, “When I told my girlfriend that we can’t do anything Friday night because Friday night at 10 I have to meet with my adviser, she thought, ‘This is something that is so stupid it must be true.’”&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;When Knuth chooses to be physically present, however, he is 100-per-cent there in the moment. “It just makes you happy to be around him,” said Jennifer Chayes, a managing director of Microsoft Research. “He’s a maximum in the community. If you had an optimization function that was in some way a combination of warmth and depth, Don would be it.”&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-1m2ozyi&quot;/&gt;&lt;/div&gt;
&lt;div data-testid=&quot;photoviewer-wrapper&quot; class=&quot;css-79elbk ehw59r11&quot;&gt;

&lt;div data-testid=&quot;photoviewer-children&quot; class=&quot;css-1a48zt4 ehw59r111&quot;&gt;

&lt;span class=&quot;css-8i9d0s e1olku6u0&quot;&gt;Dr. Knuth discussing typefaces with Hermann Zapf, the type designer. Many consider Dr. Knuth's work on the TeX computer typesetting system to be the greatest contribution to typography since Gutenberg.&lt;/span&gt;&lt;span itemprop=&quot;copyrightHolder&quot; class=&quot;css-vuqh7u e18m0s9i0&quot;&gt;&lt;span class=&quot;css-1ly73wi e1afaoz0&quot;&gt;Credit&lt;/span&gt;&lt;span&gt;Bettmann, via Getty Images&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;css-u5vfum StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;h2 class=&quot;css-sbs9ef eqpy7av0&quot; id=&quot;link-1837381d&quot;&gt;Sunday with the algorithmist&lt;/h2&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Dr. Knuth lives in Stanford, and allowed for a Sunday visitor. That he spared an entire day was exceptional — usually his availability is “modulo nap time,” a sacred daily ritual from 1 p.m. to 4 p.m. He started early, at Palo Alto’s First Lutheran Church, where he delivered a Sunday school lesson to a standing-room-only crowd. Driving home, he got philosophical about mathematics.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;“I’ll never know everything,” he said. “My life would be a lot worse if there was nothing I knew the answers about, &lt;em class=&quot;css-2fg4z9 ehxkw330&quot;&gt;and&lt;/em&gt; if there was nothing I &lt;em class=&quot;css-2fg4z9 ehxkw330&quot;&gt;didn’t&lt;/em&gt; know the answers about.” Then he offered a tour of his “California modern” house, which he and his wife, Jill, built in 1970. His office is littered with piles of U.S.B. sticks and adorned with Valentine’s Day heart art from Jill, a graphic designer. Most impressive is the music room, built around his custom-made, 812-pipe pipe organ. The day ended over beer at a puzzle party.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-1m2ozyi&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-u5vfum StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Puzzles and games — and penning &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.youtube.com/watch?v=mPn2AdMH7UQ&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;a novella about surreal numbers&lt;/a&gt;, and composing a 90-minute multimedia musical pipe-dream, “&lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www-cs-faculty.stanford.edu/~knuth/fant.html&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Fantasia Apocalyptica&lt;/a&gt;” — are the sorts of things &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://wordplay.blogs.nytimes.com/2012/06/25/numberplay-se5en/&quot; title=&quot;&quot;&gt;that really tickle him&lt;/a&gt;. One section of his book is titled, “Puzzles Versus the Real World.” He emailed an excerpt to the father-son team of Martin Demaine, an artist, and Erik Demaine, a computer scientist, both at the Massachusetts Institute of Technology, because Dr. Knuth had included their “&lt;a class=&quot;css-1g7m0tk&quot; href=&quot;http://erikdemaine.org/fonts/&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;algorithmic puzzle fonts&lt;/a&gt;.”&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;“I was thrilled,” said Erik Demaine. “It’s an honor to be in the book.” He mentioned another Knuth quotation, which serves as the inspirational motto for the biannual “&lt;a class=&quot;css-1g7m0tk&quot; href=&quot;http://www2.idsia.ch/cms/fun16/&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;FUN with Algorithms&lt;/a&gt;” conference: “Pleasure has probably been the main goal all along.”&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;But then, Dr. Demaine said, the field went and got practical. Engineers and scientists and artists are teaming up to solve real-world problems — protein folding, robotics, airbags — using the Demaines’s mathematical origami designs for &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;http://erikdemaine.org/folding/&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;how to fold paper and linkages&lt;/a&gt; into different shapes.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Of course, all the algorithmic rigmarole is also causing real-world problems. Algorithms written by humans — tackling harder and harder problems, but producing code embedded with bugs and biases — are troubling enough. More worrisome, perhaps, are the algorithms that are not written by humans, algorithms written by the machine, as it learns.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Programmers still train the machine, and, crucially, feed it data. (Data is the new domain of biases and bugs, and here the bugs and biases are harder to find and fix). However, as Kevin Slavin, a research affiliate at M.I.T.’s Media Lab said, “We are now writing algorithms we cannot read. That makes this a unique moment in history, in that we are subject to ideas and actions and efforts by a set of physics that have human origins without human comprehension.” As Slavin has often noted, “&lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.ted.com/talks/kevin_slavin_how_algorithms_shape_our_world?language=en&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;It’s a bright future, if you’re an algorithm.&lt;/a&gt;”&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-1m2ozyi&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-a7yk8a el4g4lw0&quot;&gt;

&lt;span class=&quot;css-8i9d0s e1olku6u0&quot;&gt;Dr. Knuth at his desk at home in 1999.&lt;/span&gt;&lt;span itemprop=&quot;copyrightHolder&quot; class=&quot;css-vuqh7u e18m0s9i0&quot;&gt;&lt;span class=&quot;css-1ly73wi e1afaoz0&quot;&gt;Credit&lt;/span&gt;&lt;span&gt;Jill Knuth&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;css-8i9d0s e1olku6u0&quot;&gt;A few notes.&lt;/span&gt;&lt;span itemprop=&quot;copyrightHolder&quot; class=&quot;css-vuqh7u e18m0s9i0&quot;&gt;&lt;span class=&quot;css-1ly73wi e1afaoz0&quot;&gt;Credit&lt;/span&gt;&lt;span&gt;Brian Flaherty for The New York Times&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;css-u5vfum StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;All the more so if you’re an algorithm versed in Knuth. “Today, programmers use stuff that Knuth, and others, have done as components of their algorithms, and then they combine that together with all the other stuff they need,” said Google’s Dr. Norvig.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;“With A.I., we have the same thing. It’s just that the combining-together part will be done automatically, based on the data, rather than based on a programmer’s work. You want A.I. to be able to combine components to get a good answer based on the data. But you have to decide what those components are. It could happen that each component is a page or chapter out of Knuth, because that’s the best possible way to do some task.”&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-1m2ozyi&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-u5vfum StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Lucky, then, Dr. Knuth keeps at it. He figures it will take another 25 years to finish “The Art of Computer Programming,” although that time frame has been a constant since about 1980. Might the algorithm-writing algorithms get their own chapter, or maybe a page in the epilogue? “Definitely not,” said Dr. Knuth.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;“I am worried that algorithms are getting too prominent in the world,” he added. “It started out that computer scientists were worried nobody was listening to us. Now I’m worried that too many people are listening.”&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-1m2ozyi&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-1ur45q4 e5d2tgl3&quot;&gt;
&lt;div class=&quot;css-1ukm2ij e5d2tgl0&quot;&gt;Other stories about math, computers and algorithms&lt;/div&gt;
&lt;div class=&quot;css-15g2oxy e5d2tgl2&quot;&gt;
&lt;div class=&quot;css-egqive ezm5mny6&quot;&gt;
&lt;div class=&quot;css-i9gxme ezm5mny4&quot;&gt;
&lt;div class=&quot;css-1u39xnq ezm5mny2&quot;&gt;This Is the Way the Paper Crumples&lt;/div&gt;
&lt;time class=&quot;css-1yil5bp eqgapgq0&quot; datetime=&quot;2018-11-26&quot;&gt;Nov. 26, 2018&lt;/time&gt;&lt;/div&gt;
&lt;div class=&quot;css-rxyfbr ezm5mny0&quot;&gt;&lt;img src=&quot;https://static01.nyt.com/images/2018/11/27/science/27SCI-CRUMPLE-promo/27SCI-CRUMPLE-promo-threeByTwoSmallAt2X.jpg&quot; class=&quot;css-32rbo2 ezm5mny1&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;css-egqive ezm5mny6&quot;&gt;
&lt;div class=&quot;css-i9gxme ezm5mny4&quot;&gt;
&lt;div class=&quot;css-1u39xnq ezm5mny2&quot;&gt;How the Father of Computer Science Decoded Nature’s Mysterious Patterns&lt;/div&gt;
&lt;time class=&quot;css-1yil5bp eqgapgq0&quot; datetime=&quot;2018-05-08&quot;&gt;May 8, 2018&lt;/time&gt;&lt;/div&gt;
&lt;div class=&quot;css-rxyfbr ezm5mny0&quot;&gt;&lt;img src=&quot;https://static01.nyt.com/images/2018/05/15/science/05TB-TURING/05TB-TURING-threeByTwoSmallAt2X.jpg&quot; class=&quot;css-32rbo2 ezm5mny1&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;css-egqive ezm5mny6&quot;&gt;
&lt;div class=&quot;css-i9gxme ezm5mny4&quot;&gt;
&lt;div class=&quot;css-aajd2 ezm5mny5&quot;&gt;Opinion | Alex Rosenblat&lt;/div&gt;
&lt;div class=&quot;css-1u39xnq ezm5mny2&quot;&gt;When Your Boss Is an Algorithm&lt;/div&gt;
&lt;time class=&quot;css-1yil5bp eqgapgq0&quot; datetime=&quot;2018-10-12&quot;&gt;Oct. 12, 2018&lt;/time&gt;&lt;/div&gt;
&lt;div class=&quot;css-rxyfbr ezm5mny0&quot;&gt;&lt;img src=&quot;https://static01.nyt.com/images/2018/10/14/opinion/sunday/14rosenblat/14rosenblat-threeByTwoSmallAt2X.jpg&quot; class=&quot;css-32rbo2 ezm5mny1&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

</description>
<pubDate>Mon, 17 Dec 2018 12:55:49 +0000</pubDate>
<dc:creator>sohkamyung</dc:creator>
<og:url>https://www.nytimes.com/2018/12/17/science/donald-knuth-computers-algorithms-programming.html</og:url>
<og:type>article</og:type>
<og:title>The Yoda of Silicon Valley</og:title>
<og:image>https://static01.nyt.com/images/2018/12/18/science/18SCI-KNUTH1-promo/18SCI-KNUTH1-promo-facebookJumbo-v2.jpg</og:image>
<og:description>Donald Knuth, master of algorithms, reflects on 50 years of his opus-in-progress, “The Art of Computer Programming.”</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.nytimes.com/2018/12/17/science/donald-knuth-computers-algorithms-programming.html</dc:identifier>
</item>
<item>
<title>Long Before Trees Overtook the Land, Earth Was Covered by Giant Mushrooms</title>
<link>https://www.smithsonianmag.com/smart-news/long-before-trees-overtook-the-land-earth-was-covered-by-giant-mushrooms-13709647/</link>
<guid isPermaLink="true" >https://www.smithsonianmag.com/smart-news/long-before-trees-overtook-the-land-earth-was-covered-by-giant-mushrooms-13709647/</guid>
<description>&lt;div readability=&quot;68.962201591512&quot;&gt;
&lt;p&gt;From around 420 to 350 million years ago, &lt;a href=&quot;http://en.wikipedia.org/wiki/Timeline_of_evolutionary_history_of_life%20&quot; target=&quot;_blank&quot;&gt;when land plants were still the relatively new kids on the evolutionary block&lt;/a&gt; and “the tallest trees stood just a few feet high,” giant spires of life poked from the Earth. “The ancient organism boasted trunks up to 24 feet (8 meters) high and as wide as three feet (one meter),” &lt;a href=&quot;http://news.nationalgeographic.com/news/2007/04/070425-fungus-fossil.html&quot; target=&quot;_blank&quot;&gt;said &lt;em&gt;National Geographic&lt;/em&gt; in 2007&lt;/a&gt;. &lt;a href=&quot;http://www.livescience.com/1461-prehistoric-mystery-organism-humongous-fungus.html%20&quot; target=&quot;_blank&quot;&gt;With the help of a fossil dug up in Saudi Arabia&lt;/a&gt; scientists finally figured out what the giant creature was: a fungus. (We think.)&lt;/p&gt;

&lt;p&gt;The towering fungus spires would have stood out against a landscape scarce of such giants, &lt;a href=&quot;http://www.newscientist.com/article/dn11701-mystery-prehistoric-fossil-verified-as-giant-fungus.html#.Uea7Qo2G18E&quot; target=&quot;_blank&quot;&gt;said &lt;em&gt;New Scientist&lt;/em&gt; in 2007&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote readability=&quot;12&quot;&gt;
&lt;p&gt;“A 6-metre fungus would be odd enough in the modern world, but at least we are used to trees quite a bit bigger,” says Boyce. “Plants at that time were a few feet tall, invertebrate animals were small, and there were no terrestrial vertebrates. This fossil would have been all the more striking in such a diminutive landscape.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Fossils of the organisms, known as &lt;a href=&quot;http://en.wikipedia.org/wiki/Prototaxites%20&quot; target=&quot;_blank&quot;&gt;&lt;em&gt;Prototaxites&lt;/em&gt;&lt;/a&gt;, had peppered the paleontological findings of the past century and a half, ever since &lt;a href=&quot;http://www-news.uchicago.edu/releases/07/070423.fungus.shtml&quot; target=&quot;_blank&quot;&gt;they were first discovered by a Canadian in 1859&lt;/a&gt;. But despite the fossil records, no one could figure out what the heck these giant spires were. &lt;a href=&quot;http://magazine.uchicago.edu/1006/investigations/fungus.shtml&quot; target=&quot;_blank&quot;&gt;The University of Chicago&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote readability=&quot;16&quot;&gt;
&lt;p&gt;For the next 130 years, debate raged. Some scientists called Prototaxites a lichen, others a fungus, and still others clung to the notion that it was some kind of tree. “The problem is that when you look up close at the anatomy, it’s evocative of a lot of different things, but it’s diagnostic of nothing,” says Boyce, an associate professor in geophysical sciences and the Committee on Evolutionary Biology. “And it’s so damn big that when whenever someone says it’ssomething, everyone else’s hackles get up: ‘How could you have a lichen 20 feet tall?’”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That all changed in 2007 when &lt;a href=&quot;http://geology.gsapubs.org/content/35/5/399.abstract&quot; target=&quot;_blank&quot;&gt;a study came out that concluded the spires were a fungus&lt;/a&gt;, like a gigantic early mushroom.&lt;/p&gt;
&lt;p&gt;But not everyone was sold on the idea that &lt;em&gt;Prototaxites&lt;/em&gt; was an early fungus. No one’s questioning the spires’ existence—people just have trouble trying to imagine that such a huge structure could be a fungus. &lt;a href=&quot;http://coo.fieldofscience.com/2010/02/prototaxites-giant-that-never-was.html&quot; target=&quot;_blank&quot;&gt;Researchers trying to refute the fungus idea&lt;/a&gt; &lt;a href=&quot;http://www.ncbi.nlm.nih.gov/pubmed/21622387%20&quot; target=&quot;_blank&quot;&gt;thought that &lt;em&gt;Prototaxites&lt;/em&gt; spires were gigantic mats of liverworts that had somehow rolled up&lt;/a&gt;. &lt;a href=&quot;http://www.amjbot.org/content/97/7/1074&quot; target=&quot;_blank&quot;&gt;But in a follow-up study&lt;/a&gt;, &lt;a href=&quot;http://coo.fieldofscience.com/2012/11/prototaxites-revisited.html&quot; target=&quot;_blank&quot;&gt;the scientists who had proposed the fungus idea doubled down on their claim&lt;/a&gt;. So science is messy, and despite more than a century of digging, we still don’t really know, for sure, what these huge spires that dominated the ancient Earth really were.&lt;/p&gt;
&lt;p&gt;But even though the spire-like mushrooms of yore—or whatever they were—are long gone, don’t feel too bad for funguskind. The largest organism on Earth, &lt;a href=&quot;http://abcnews.go.com/Technology/story?id=120049&amp;amp;page=1#.Uea4942G18F&quot; target=&quot;_blank&quot;&gt;says ABC&lt;/a&gt;, is still a huge fungal mat, a single organism spread over 2,200 acres of forest in eastern Oregon.&lt;/p&gt;
&lt;p&gt;More from Smithsonian.com:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blogs.smithsonianmag.com/smartnews/2013/06/a-fungus-like-disease-threatens-europes-supply-of-gin/&quot; target=&quot;_blank&quot;&gt;A Fungus-Like Disease Threatens Europe’s Supply of Gin&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://blogs.smithsonianmag.com/smartnews/2012/12/the-fungus-in-your-cheese-is-having-weird-sex/&quot; target=&quot;_blank&quot;&gt;The Fungus in Your Cheese Is Having Weird Sex&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://blogs.smithsonianmag.com/food/2009/04/insulation-made-out-of-mushrooms/&quot; rel=&quot;bookmark&quot;&gt;Insulation Made Out of … Mushrooms?&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div readability=&quot;32&quot;&gt;
&lt;p&gt;Like this article?&lt;br/&gt;&lt;span&gt;SIGN UP&lt;/span&gt; for our newsletter&lt;/p&gt;

&lt;/div&gt;</description>
<pubDate>Mon, 17 Dec 2018 07:08:21 +0000</pubDate>
<dc:creator>myinnerbanjo</dc:creator>
<og:image>https://thumbs-prod.si-cdn.com/hMdWdTthf7jf7oozs0w9WeD-35g=/1072x720/filters:no_upscale()/https://public-media.si-cdn.com/filer/mushrooms-3881.jpg</og:image>
<og:title>Long Before Trees Overtook the Land, Earth Was Covered by Giant Mushrooms</og:title>
<og:url>https://www.smithsonianmag.com/smart-news/long-before-trees-overtook-the-land-earth-was-covered-by-giant-mushrooms-13709647/</og:url>
<og:type>article</og:type>
<og:description>24 feet tall and three feet wide, these giant spires dotted the ancient landscape</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.smithsonianmag.com/smart-news/long-before-trees-overtook-the-land-earth-was-covered-by-giant-mushrooms-13709647/</dc:identifier>
</item>
<item>
<title>A EULA in FOSS clothing?</title>
<link>http://dtrace.org/blogs/bmc/2018/12/16/a-eula-in-foss-clothing/</link>
<guid isPermaLink="true" >http://dtrace.org/blogs/bmc/2018/12/16/a-eula-in-foss-clothing/</guid>
<description>&lt;p&gt;There was a tremendous amount of reaction to and discussion about my &lt;a href=&quot;http://dtrace.org/blogs/bmc/2018/12/14/open-source-confronts-its-midlife-crisis/&quot;&gt;blog entry on the midlife crisis in open source&lt;/a&gt;. As part of this discussion on HN, Jay Kreps of Confluent took the time to write a &lt;a href=&quot;https://news.ycombinator.com/item?id=18687498#18689179&quot;&gt;detailed response&lt;/a&gt; — which he shortly thereafter elevated into &lt;a href=&quot;https://medium.com/@jaykreps/a-quick-comment-on-bryan-cantrills-blog-on-licensing-8dccee41d9e6&quot;&gt;a blog entry&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let me be clear that I hold Jay in high regard, as both a software engineer and an entrepreneur — and I appreciate the time he took to write a thoughtful response. That said, there are aspects of his response that I found troubling enough to closely re-read the &lt;a href=&quot;https://www.confluent.io/confluent-community-license&quot;&gt;Confluent Community License&lt;/a&gt; — and that in turn has led me to a deeply disturbing realization about what is potentially going on here.&lt;/p&gt;
&lt;p&gt;Here is what Jay said that I found troubling:&lt;br /&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;The book analogy is not accurate; for starters, copyright does not apply to physical books and intangibles like software or digital books in the same way.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now, what Jay said is true to a degree in that (as with many different kind of expression), software has code specific to it; this can be found in &lt;a href=&quot;https://www.copyright.gov/title17/92chap1.html#117&quot;&gt;17 U.S.C. § 117&lt;/a&gt;. But the fact that Jay also made reference to digital books was odd; digital books really have nothing to do with software (or not any more so than any other kind of creative expression). That said, digital books and proprietary software &lt;em&gt;do&lt;/em&gt; actually share one thing in common, though it’s horrifying: in both cases &lt;strong&gt;their creators have maintained that you don’t actually own the copy you paid for&lt;/strong&gt;. That is, unlike a book, you don’t actually &lt;em&gt;buy&lt;/em&gt; a copy of a digital book, you merely acquire a license to use their book under their terms. But how do they do this? Because when you access the digital book, you click “agree” on a license — an End User License Agreement (EULA) — that makes clear that you don’t &lt;em&gt;actually&lt;/em&gt; own anything. The exact language varies; take (for example) &lt;a href=&quot;https://www.vmware.com/download/eula/universal_eula.html&quot;&gt;VMware’s end user license agreement&lt;/a&gt;:&lt;br /&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;14&quot;&gt;
&lt;p&gt;&lt;strong&gt;2.1 General License Grant.&lt;/strong&gt; VMware grants to You a non-exclusive, non-transferable (except as set forth in Section 12.1 (Transfers; Assignment) license to use the Software and the Documentation during the period of the license and within the Territory, solely for Your internal business operations, and subject to the provisions of the Product Guide. Unless otherwise indicated in the Order, licenses granted to You will be perpetual, will be for use of object code only, and will commence on either delivery of the physical media or the date You are notified of availability for electronic download.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That’s a bit wordy and oblique; in this regard, &lt;a href=&quot;https://www.microsoft.com/en-us/Useterms/Retail/Windows/10/UseTerms_Retail_Windows_10_English.htm&quot;&gt;Microsoft’s Windows 10 license&lt;/a&gt; is refreshingly blunt:&lt;br /&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p&gt;(2)(a) &lt;strong&gt;License.&lt;/strong&gt; The software is licensed, not sold. Under this agreement, we grant you the right to install and run one instance of the software on your device (the licensed device), for use by one person at a time, so long as you comply with all the terms of this agreement.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That’s pretty concise: “The software is licensed, not sold.” So why do this at all? EULAs are an attempt to get out of copyright law — where the copyright owner is quite limited in the rights afforded to them as to how the content is consumed — and into contract law, where there are many fewer such limits. And EULAs have accordingly historically restricted (or tried to restrict) all sorts of uses like &lt;a href=&quot;https://en.wikipedia.org/wiki/David_DeWitt&quot;&gt;benchmarking&lt;/a&gt;, reverse engineering, running with competitive products (or, say, being used by a competitor to make competitive products), and so on.&lt;/p&gt;
&lt;p&gt;Given the onerous restrictions, it is not surprising that &lt;a href=&quot;https://www.eff.org/wp/dangerous-terms-users-guide-eulas/&quot;&gt;EULAs are very controversial&lt;/a&gt;. They are also legally dubious: when you are forced to click through or (as it used to be back in the day) forced to unwrap a sealed envelope on which the EULA is printed to get to the actual media, it’s unclear how much you are actually “agreeing” to — and it may be considered a &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_form_contract&quot;&gt;contract of adhesion&lt;/a&gt;. And this is just one of &lt;a href=&quot;http://thewaronbullshit.com/2007/09/05/eula/&quot;&gt;many legal objections to EULAs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Suffice it to say, EULAs have long been considered open source poison, so with Jay’s frightening reference to EULA’d content, I went back to the &lt;a href=&quot;https://www.confluent.io/confluent-community-license&quot;&gt;Confluent Community License&lt;/a&gt; — and proceeded to kick myself for having missed it all on my first quick read. First, there’s this:&lt;br /&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;15&quot;&gt;
&lt;p&gt;This Confluent Community License Agreement Version 1.0 (the “Agreement”) sets forth the terms on which Confluent, Inc. (“Confluent”) makes available certain software made available by Confluent under this Agreement (the “Software”). BY INSTALLING, DOWNLOADING, ACCESSING, USING OR DISTRIBUTING ANY OF THE SOFTWARE, YOU AGREE TO THE TERMS AND CONDITIONS OF THIS AGREEMENT. IF YOU DO NOT AGREE TO SUCH TERMS AND CONDITIONS, YOU MUST NOT USE THE SOFTWARE. IF YOU ARE RECEIVING THE SOFTWARE ON BEHALF OF A LEGAL ENTITY, YOU REPRESENT AND WARRANT THAT YOU HAVE THE ACTUAL AUTHORITY TO AGREE TO THE TERMS AND CONDITIONS OF THIS AGREEMENT ON BEHALF OF SUCH ENTITY.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You will notice that this looks nothing like any traditional source-based license — but it &lt;em&gt;is&lt;/em&gt; exactly the kind of boilerplate that you find on EULAs, terms-of-service agreements, and other contracts that are being rammed down your throat. And then there’s this:&lt;/p&gt;
&lt;blockquote readability=&quot;13&quot;&gt;
&lt;p&gt;&lt;strong&gt;1.1 License.&lt;/strong&gt; Subject to the terms and conditions of this Agreement, Confluent hereby grants to Licensee a non-exclusive, royalty-free, worldwide, non-transferable, non-sublicenseable license during the term of this Agreement to: (a) use the Software; (b) prepare modifications and derivative works of the Software; (c) distribute the Software (including without limitation in source code or object code form); and (d) reproduce copies of the Software (the “License”).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;On the one hand looks like the opening of open source licenses like (say) the &lt;a href=&quot;https://www.apache.org/licenses/LICENSE-2.0&quot;&gt;Apache Public License&lt;/a&gt; (albeit missing important words like “perpetual” and “irrevocable”), but the next two sentences are the difference that are the focus of the license:&lt;/p&gt;
&lt;blockquote readability=&quot;13&quot;&gt;
&lt;p&gt;Licensee is not granted the right to, and Licensee shall not, exercise the License for an Excluded Purpose. For purposes of this Agreement, “Excluded Purpose” means making available any software-as-a-service, platform-as-a-service, infrastructure-as-a-service or other similar online service that competes with Confluent products or services that provide the Software.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But how can you later tell me that I can’t use &lt;em&gt;my&lt;/em&gt; copy of the software because it competes with a service that Confluent started to offer? Or is that copy not in fact mine? This is answered in section 3:&lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;Confluent will retain all right, title, and interest in the Software, and all intellectual property rights therein.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Okay, so my copy of the software &lt;em&gt;isn’t&lt;/em&gt; mine at all. On the one hand, this is (literally) proprietary software boilerplate — but I was given the source code and the right to modify it; how do I not own my copy? Again, proprietary software is built on the notion that — unlike the book you bought at the bookstore — you don’t own anything: rather, you license the copy that is in fact owned by the software company. And again, as it stands, this is dubious, and &lt;a href=&quot;https://en.wikipedia.org/wiki/Software_license#Ownership_vs._licensing&quot;&gt;courts have ruled against “licensed, not sold” software&lt;/a&gt;. But how can a license explicitly allow me to &lt;em&gt;modify&lt;/em&gt; the software and at the same time tell me that I don’t own the copy that I just modified?! And to be clear: I’m not asking who owns the copyright (that part is clear, as it is for open source) — I’m asking &lt;strong&gt;who owns the copy of the work that I have modified?&lt;/strong&gt; How can one argue that I don’t own the copy of the software that I downloaded, modified and built myself?!&lt;/p&gt;
&lt;p&gt;This prompts the following questions, which I &lt;a href=&quot;https://twitter.com/bcantrill/status/1074260959898693632&quot;&gt;also asked Jay via Twitter&lt;/a&gt;:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;If I git clone software covered under the Confluent Community License, who owns that copy of the software?&lt;/li&gt;
&lt;li&gt;Do you consider the Confluent Community License to be a contract?&lt;/li&gt;
&lt;li&gt;Do you consider the Confluent Community License to be a EULA?&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;To Confluent: please answer these questions, and put the answers in your FAQ. Again, I think it’s fine for you to be an open core company; just make this software proprietary and be done with it. (And don’t let yourself be troubled about the fact that it was once open source; there is &lt;a href=&quot;https://www.youtube.com/watch?v=Zpnncakrelk#t=17m21s&quot;&gt;ample precedent for reproprietarizing software&lt;/a&gt;.) What I object to (and what I think others object to) is trying to be at once open and proprietary; you must pick one.&lt;/p&gt;
&lt;p&gt;To GitHub: Assuming that this is in fact a EULA, I think it is perilous to allow EULAs to sit in public repositories. It’s one thing to have one click through to accept a license (though again, that itself is dubious), but to say that a git clone is an implicit acceptance of a contract that happens to be sitting somewhere in the repository beggars belief. With efforts like &lt;a href=&quot;https://choosealicense.com/&quot;&gt;choosealicense.com&lt;/a&gt;, GitHub has been a model in guiding projects with respect to licensing; it would be helpful for GitHub’s counsel to weigh in on their view of this new strain of source-available proprietary software and the degree to which it comes into conflict with &lt;a href=&quot;https://help.github.com/articles/github-terms-of-service/#5-license-grant-to-other-users&quot;&gt;GitHub’s own terms of service&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To foundations concerned with software liberties, including the Apache Foundation, the Linux Foundation, the Free Software Foundation, the Electronic Frontier Foundation, the Open Source Initiative, and the Software Freedom Conservancy: the open source community needs your legal review on this! I don’t think I’m being too alarmist when I say that this is potentially a dangerous new precedent being set; it would be very helpful to have your lawyers offer their perspectives on this, even if they disagree with one another. We seem to be in some terrible new era of frankenlicenses, where the worst of proprietary licenses are bolted on to the goodwill created by open source licenses; we need your legal voices before these creatures destroy the village!&lt;br /&gt;&lt;/p&gt;


&lt;br /&gt;</description>
<pubDate>Mon, 17 Dec 2018 03:05:05 +0000</pubDate>
<dc:creator>bcantrill</dc:creator>
<og:image>http://dtrace.org/blogs/ahl/files/2011/10/icon.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://dtrace.org/blogs/bmc/2018/12/16/a-eula-in-foss-clothing/</dc:identifier>
</item>
<item>
<title>Sandspiel – A falling sand game built in Rust and WebGL</title>
<link>https://sandspiel.club/</link>
<guid isPermaLink="true" >https://sandspiel.club/</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://sandspiel.club/&quot;&gt;https://sandspiel.club/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=18696291&quot;&gt;https://news.ycombinator.com/item?id=18696291&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 1211&lt;/p&gt;
&lt;p&gt;# Comments: 172&lt;/p&gt;
</description>
<pubDate>Mon, 17 Dec 2018 01:18:18 +0000</pubDate>
<dc:creator>15DCFA8F</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://sandspiel.club/</dc:identifier>
</item>
<item>
<title>Browsers</title>
<link>https://adactio.com/journal/14608</link>
<guid isPermaLink="true" >https://adactio.com/journal/14608</guid>
<description>&lt;p&gt;Microsoft’s Edge browser is going to switch its rendering engine over to Chromium.&lt;/p&gt;
&lt;p&gt;I am deflated and disappointed.&lt;/p&gt;
&lt;p&gt;There’s just no sugar-coating this. I’m sure the decision makes sound business sense for Microsoft, but it’s not good for the health of the web.&lt;/p&gt;
&lt;p&gt;Very soon, the vast majority of browsers will have an engine that’s either Blink or its cousin, WebKit. That may seem like good news for developers when it comes to testing, but trust me, it’s a sucky situation of innovation and agreement. Instead of a diverse browser ecosystem, we’re going to end up with incest and inbreeding.&lt;/p&gt;
&lt;p&gt;There’s one shining exception though. &lt;a href=&quot;https://www.mozilla.org/en-US/firefox/new/&quot;&gt;Firefox&lt;/a&gt;. That browser was originally created to combat the seemingly unstoppable monopolistic power of Internet Explorer. Now that Microsoft are no longer in the rendering engine game, Firefox is once again the only thing standing in the way of a complete monopoly.&lt;/p&gt;
&lt;p&gt;I’ve been &lt;a href=&quot;https://adactio.com/journal/14227&quot;&gt;using Firefox as my main browser&lt;/a&gt; for a while now, and I can heartily recommend it. You should try it (and maybe talk to your relatives about it at Christmas). At this point, which browser you use no longer feels like it’s just about personal choice—it feels part of something bigger; it’s about the shape of the web we want.&lt;/p&gt;
&lt;p&gt;Jeffrey wrote that &lt;a href=&quot;https://www.zeldman.com/2018/12/07/browser-diversity-starts-with-us/&quot;&gt;browser diversity starts with us&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote readability=&quot;13&quot;&gt;
&lt;p&gt;The health of Firefox is critical now that Chromium will be the web’s de facto rendering engine.&lt;/p&gt;
&lt;p&gt;Even if you love Chrome, adore Gmail, and live in Google Docs or Analytics, no single company, let alone a user-tracking advertising giant, should control the internet.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Andy Bell also writes about &lt;a href=&quot;https://andy-bell.design/wrote/browser-diversity/&quot;&gt;browser diversity&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote readability=&quot;19&quot;&gt;
&lt;p&gt;I’ll say it bluntly: we must support Firefox. We can’t, as a community allow this browser engine monopoly. We must use Firefox as our main dev browsers; we must encourage our friends and families to use it, too.&lt;/p&gt;
&lt;p&gt;Yes, it’s not perfect, nor are Mozilla, but we can help them to develop and grow by using Firefox and reporting issues that we find. If we just use and build for Chromium, which is looking likely (&lt;em&gt;cough&lt;/em&gt; Internet Explorer monopoly &lt;em&gt;cough&lt;/em&gt;), then Firefox will fall away and we will then have just one major engine left. I don’t ever want to see that.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://daverupert.com/2018/12/edge-goes-chromium/&quot;&gt;Uncle Dave says&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote readability=&quot;12&quot;&gt;
&lt;p&gt;If the idea of a Google-driven Web is of concern to you, then I’d encourage you to use Firefox. And don’t be a passive consumer; blog, tweet, and speak about its killer features. I’ll start: Firefox’s CSS Grid, Flexbox, and Variable Font tools are the best in the business.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Mozilla themselves came out all guns blazing when they said &lt;a href=&quot;https://blog.mozilla.org/blog/2018/12/06/goodbye-edge/&quot;&gt;Goodbye, EdgeHTML&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;Microsoft is officially giving up on an independent shared platform for the internet. By adopting Chromium, Microsoft hands over control of even more of online life to Google.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Tim describes the situation as &lt;a href=&quot;https://timkadlec.com/remembers/2018-12-04-risking-a-homogenous-web/&quot;&gt;risking a homogeneous web&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote readability=&quot;12&quot;&gt;
&lt;p&gt;I don’t think Microsoft using Chromium is the end of the world, but it is another step down a slippery slope. It’s one more way of bolstering the influence Google currently has on the web.&lt;/p&gt;
&lt;p&gt;We need Google to keep pushing the web forward. But it’s critical that we have other voices, with different viewpoints, to maintain some sense of balance. Monocultures don’t benefit anyone.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Andre Alves Garzia writes that &lt;a href=&quot;https://andregarzia.com/2018/12/while-we-blink-we-loose-the-web.html&quot;&gt;while we Blink, we lose the web&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote readability=&quot;12&quot;&gt;
&lt;p&gt;Losing engines is like losing languages. People may wish that everyone spoke the same language, they may claim it leads to easier understanding, but what people fail to consider is that this leads to losing all the culture and way of thought that that language produced. If you are a Web developer smiling and happy that Microsoft might be adopting Chrome, and this will make your work easier because it will be one less browser to test, don’t be! You’re trading convenience for diversity.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I like that analogy with language death. If you prefer biological analogies, it’s worth revisiting this fantastic post by Rachel back in August—before any of us knew about Microsoft’s decision—all about &lt;a href=&quot;https://css-tricks.com/the-ecological-impact-of-browser-diversity/&quot;&gt;the ecological impact of browser diversity&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;Let me be clear: an Internet that runs only on Chrome’s engine, Blink, and its offspring, is not the paradise we like to imagine it to be.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That post is a great history lesson, documenting how things can change, and how decisions can have far-reaching unintended consequences.&lt;/p&gt;
&lt;blockquote readability=&quot;16&quot;&gt;
&lt;p&gt;So these are the three browser engines we have: WebKit/Blink, Gecko, and EdgeHTML. We are unlikely to get any brand new bloodlines in the foreseeable future. This is it.&lt;/p&gt;
&lt;p&gt;If we lose one of those browser engines, we lose its lineage, every permutation of that engine that would follow, and the unique takes on the Web it could allow for.&lt;/p&gt;
&lt;p&gt;And it’s not likely to be replaced.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Sun, 16 Dec 2018 23:01:49 +0000</pubDate>
<dc:creator>indysigners</dc:creator>
<og:type>article</og:type>
<og:image>https://adactio.com/images/photo-300.jpg</og:image>
<og:url>https://adactio.com/journal/14608</og:url>
<og:title>Browsers</og:title>
<og:description>I’m on Team Firefox.</og:description>
<dc:language>en-ie</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://adactio.com/journal/14608</dc:identifier>
</item>
</channel>
</rss>