<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>IBM purged ‘gray hairs’ and ‘old heads’ as it launched Millennial Corps: lawsuit</title>
<link>https://www.mercurynews.com/2019/03/27/ibm-purged-gray-hairs-and-old-heads-as-it-launched-millennial-corps-lawsuit/</link>
<guid isPermaLink="true" >https://www.mercurynews.com/2019/03/27/ibm-purged-gray-hairs-and-old-heads-as-it-launched-millennial-corps-lawsuit/</guid>
<description>&lt;p&gt;Technology giant IBM targeted “grey hairs” and “old heads” for negative performance reviews so it could oust them from the company as it formed a “Millennial Corps” and focused on hiring “early professionals,” a new age-discrimination lawsuit claims.&lt;/p&gt;
&lt;p&gt;“In the past six years alone, IBM has discharged over 20,000 U.S. employees who were at least 40 years old in pursuit of a company-wide practice of using forced group terminations, referred to as ‘Resource Actions,’ to accomplish its goal of removing older employees from its labor force,” said the lawsuit filed Wednesday by four former IBM employees. Three had worked at the company for more than three decades, and one for more than 10 years, the suit said. All were over 55 when they were sacked in May 2016, according to the suit.&lt;/p&gt;
&lt;p&gt;The suit alleged that IBM required employees to submit claims of age discrimination to binding arbitration, but also banned them from collective arbitration over such claims.&lt;/p&gt;
&lt;p&gt;IBM said in an emailed statement that the plaintiffs’ theories have been rejected by courts including the U.S. Supreme Court. “We are confident that our arbitration clauses are legal and appropriate,” the firm said. The company added that a body of Supreme Court cases upholds arbitration agreements.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;alignleft size-article_inline_third lazyautosizes lazyload&quot; src=&quot;https://i1.wp.com/www.mercurynews.com/wp-content/uploads/2018/01/siliconbeat-logo-tech-news-blog.png?fit=620%2C9999px&amp;amp;ssl=1&quot; data-sizes=&quot;auto&quot; data-src=&quot;https://i1.wp.com/www.mercurynews.com/wp-content/uploads/2018/01/siliconbeat-logo-tech-news-blog.png?fit=620%2C9999px&amp;amp;ssl=1&quot; data-srcset=&quot;https://i1.wp.com/www.mercurynews.com/wp-content/uploads/2018/01/siliconbeat-logo-tech-news-blog.png?fit=620%2C9999px&amp;amp;ssl=1 620w,https://i1.wp.com/www.mercurynews.com/wp-content/uploads/2018/01/siliconbeat-logo-tech-news-blog.png?fit=210%2C9999px&amp;amp;ssl=1 210w&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The purported purge started in 2014, with the firm carrying out a plan to fix its “seniority mix” by imposing an “aggressive performance management posture,” the suit filed in federal court in New York alleged. One in-house presentation showed that this posture meant doubling the proportion of workers receiving negative performance evaluations, so 3,000 employees could be laid off and replaced with “early professionals,” according to the suit.&lt;/p&gt;
&lt;p&gt;“In 2015 and 2016, IBM doubled down on its efforts to replace its long-tenured, older employees with the younger Millennials it sought to recruit,” the suit alleged. “IBM made presentations to its senior executives calling for IBM to evaluate its long-term employees more harshly, to use those negative evaluations to justify selecting long-term employees for lay-off, and to replace these employees with ‘EPs’— IBM management short-hand for ‘early professionals.'”&lt;/p&gt;

&lt;p&gt;A 2016 presentation concerning one section of the company “specifically called for managers to exempt all ‘early professional hires’ from layoff, regardless of performance,” the suit claimed. “The long-serving, older employees were provided no such exemption.”&lt;/p&gt;
&lt;p&gt;The former employees suing IBM — Steven Estle, Margaret Ahlders, Lance Salonia and Cheryl Witmer — alleged the company in 2014 began downgrading their annual performance scores, so they started receiving worse evaluations than in previous years. When they were fired in 2016, IBM falsely characterized their departures as retirements, the suit claimed.&lt;/p&gt;

&lt;p&gt;Also starting in 2014, IBM began demanding that laid-off workers waive their right to collective action, the suit alleged. Employees were offered severance worth a month’s salary, continuing health and life insurance coverage for a period depending on time with the firm, free career counseling, and up to $2,500 for skills training, the suit said.&lt;/p&gt;
&lt;p&gt;But workers would not receive any of those benefits if they didn’t sign an agreement not to bring age-discrimination claims collectively, even in arbitration, the suit claimed. By this arrangement, IBM sought to deprive workers of the economies and advantages of pursuing legal action together, and “instead to burden them with the limitations and costs of bringing individual actions challenging the same discriminatory practices in secret arbitrations separate from each other,” the suit alleged.&lt;/p&gt;
&lt;p&gt;“With misgivings, but facing the prospect of a difficult job search and economic hardship, each Plaintiff reluctantly signed the waiver,” the suit said.&lt;/p&gt;
&lt;p&gt;The suit took aim at a 2006 IBM internal report on employee demographics that purportedly called older workers “gray hairs” and “old heads,” and concluded that younger workers were “generally much more innovative and receptive to technology than baby boomers.”&lt;/p&gt;
&lt;p&gt;In 2014, IBM launched a blog called “The Millennial Experience,” the suit said. The firm also created “Millennial Corps,” a network of young workers to be consulted by senior leadership about business decisions, according to the suit.&lt;/p&gt;
&lt;p&gt;The suit cited a presentation given at a 2014 IBM event, in which slides shown allegedly indicated that Millennials exhibited desirable work qualities such as trusting data and making decisions through collaboration, while workers over 50 had undesirable attributes such as being “more dubious” of analytics, putting “less stock in data” and being less motivated to consult colleagues.&lt;/p&gt;
&lt;p&gt;The suit draws heavily from results of a ProPublica &lt;a href=&quot;https://www.propublica.org/article/amid-accusations-of-age-bias-ibm-winds-down-a-push-for-millennial-workers&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;investigation&lt;/a&gt; published in September that said IBM appeared to be winding down the Millennial Corps, cited in several legal actions as evidence the firm was biased against younger workers.&lt;/p&gt;
&lt;p&gt;The plaintiffs are seeking a court invalidating IBM’s waiver against collective action, a ruling that the matter go to collective arbitration, and unspecified monetary relief.&lt;/p&gt;

</description>
<pubDate>Wed, 27 Mar 2019 23:41:22 +0000</pubDate>
<dc:creator>hanging</dc:creator>
<og:type>article</og:type>
<og:title>IBM purged ‘gray hairs’ and ‘old heads’ as it launched ‘Millennial Corps’: lawsuit</og:title>
<og:url>https://www.mercurynews.com/2019/03/27/ibm-purged-gray-hairs-and-old-heads-as-it-launched-millennial-corps-lawsuit/</og:url>
<og:description>IBM has let go more than 20,000 U.S. workers over age 40 in the past six years, lawsuit claims.</og:description>
<og:image>https://www.mercurynews.com/wp-content/uploads/2019/03/SJM-L-IBMOLDS-0328.jpg?w=1024&amp;h=731</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.mercurynews.com/2019/03/27/ibm-purged-gray-hairs-and-old-heads-as-it-launched-millennial-corps-lawsuit/</dc:identifier>
</item>
<item>
<title>Cisco Fixes RV320/RV325 Vulnerability by Banning “curl” in User-Agent</title>
<link>https://twitter.com/RedTeamPT/status/1110843396657238016</link>
<guid isPermaLink="true" >https://twitter.com/RedTeamPT/status/1110843396657238016</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://twitter.com/RedTeamPT/status/1110843396657238016&quot;&gt;https://twitter.com/RedTeamPT/status/1110843396657238016&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=19507225&quot;&gt;https://news.ycombinator.com/item?id=19507225&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 334&lt;/p&gt;
&lt;p&gt;# Comments: 139&lt;/p&gt;
</description>
<pubDate>Wed, 27 Mar 2019 23:14:35 +0000</pubDate>
<dc:creator>pjf</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://mobile.twitter.com/RedTeamPT/status/1110843396657238016</dc:identifier>
</item>
<item>
<title>Microsoft says encryption laws make companies wary of storing data in Australia</title>
<link>https://www.abc.net.au/news/2019-03-28/microsoft-says-companies-are-no-longer-comfortable-storing-data/10946494</link>
<guid isPermaLink="true" >https://www.abc.net.au/news/2019-03-28/microsoft-says-companies-are-no-longer-comfortable-storing-data/10946494</guid>
<description>&lt;p class=&quot;published&quot;&gt;Updated &lt;span class=&quot;timestamp&quot;&gt;March 28, 2019 07:18:51&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;inline-content photo full&quot;&gt;&lt;a href=&quot;https://www.abc.net.au/news/2019-03-28/microsoft-president-bill-smith-speaks-at-a-canberra-event-1/10946510&quot;&gt;&lt;img src=&quot;https://www.abc.net.au/news/image/10946506-3x2-700x467.jpg&quot; alt=&quot;Brad Smith, wearing a black jacket and white shirt, makes a gesture with his hands as he stands speaking.&quot; title=&quot;Microsoft president Brad Smith speaks at a Canberra event&quot; width=&quot;700&quot; height=&quot;467&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://www.abc.net.au/news/2019-03-28/microsoft-president-bill-smith-speaks-at-a-canberra-event-1/10946510&quot; class=&quot;inline-caption&quot;&gt;&lt;strong&gt;Photo:&lt;/strong&gt; Microsoft's Brad Smith says the government needs to ease concerns about encryption laws. &lt;span class=&quot;source&quot;&gt;(AAP: Lukas Coch)&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;Microsoft president Brad Smith has warned companies are no longer comfortable storing customer data in Australia after the introduction of controversial encryption laws.&lt;/p&gt;
&lt;div class=&quot;inline-content wysiwyg right&quot;&gt;
&lt;div class=&quot;inner&quot;&gt;
&lt;h2&gt;Key points:&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;The Government last year passed laws to give intelligence agencies greater access to encrypted data&lt;/li&gt;
&lt;li&gt;But the technology industry has described them as overreach that will undermine privacy&lt;/li&gt;
&lt;li&gt;Brad Smith said it was in the Australian Government's interest to ease concerns about the legislation&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Mr Smith told a Canberra audience the laws are too vague and are damaging the Australian technology industry and broader economy, as businesses raise concerns about privacy and look to overseas markets.&lt;/p&gt;
&lt;p&gt;&quot;When I travel to other countries I hear companies and governments say 'we are no longer comfortable putting our data in Australia', so they are asking us to build more data centres in other countries,&quot; Mr Smith said.&lt;/p&gt;
&lt;p&gt;Late last year, with the support of the Opposition, &lt;a href=&quot;https://www.abc.net.au/news/2018-12-04/coalition-and-labor-strike-deal-on-encryption-laws/10582096&quot; target=&quot;_self&quot; title=&quot;&quot;&gt;the Coalition passed laws to give intelligence agencies greater access&lt;/a&gt; to encrypted messages sent by suspected criminals.&lt;/p&gt;

&lt;p&gt;In some cases, these security agencies can demand companies build new capabilities to allow them to read the otherwise hidden messages.&lt;/p&gt;
&lt;p&gt;The Federal Government argues these laws are crucial to combatting terrorism and serious crime, but the technology industry has described them as an overreach that will hurt the industry and undermine privacy.&lt;/p&gt;
&lt;p&gt;Mr Smith said Australia had developed a reputation as a destination for companies to store customer data, although that been undermined in the past six months.&lt;/p&gt;
&lt;p&gt;&quot;We will have to sort through those issues but if I were an Australian who wanted to advance the Australian technology economy, I would want to address that and put the minds of other like-minded governments at ease,&quot; he said.&lt;/p&gt;
&lt;p&gt;&quot;It has not changed, to date, anything that we have had to do in Australia but we do worry about some areas of the law in terms of potential consequences.&quot;&lt;/p&gt;
&lt;h2&gt;Microsoft worried about privacy in Australia&lt;/h2&gt;
&lt;p&gt;Mr Smith said he did not believe the laws intended to create a so-called &quot;backdoor&quot; that would undermine encryption technology, but described the legislation as vague.&lt;/p&gt;
&lt;p&gt;&quot;There is this wonderful phrase about enabling companies to avoid creating a systemic weakness but that phrase is not defined,&quot; he said.&lt;/p&gt;
&lt;p&gt;&quot;Until it is defined I think people will worry and we will be among those who will worry because we do feel it is vitally important we protect our customer's privacy.&quot;&lt;/p&gt;
&lt;p&gt;Mr Smith said it was in the interests of the Australian Government to ease concerns about the legislation or to amend it.&lt;/p&gt;
&lt;p&gt;The Australian technology industry has this week renewed its calls for the laws to be amended before the election, arguing there should be more oversight and reduction in scope.&lt;/p&gt;
&lt;p&gt;The Australian Signals Directorate (ASD) has rejected claims the laws give security agencies unfettered power, or that technology companies will be forced overseas.&lt;/p&gt;
&lt;blockquote class=&quot;quote--pullquote&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&quot;Australia is not the first country to enact this sort of legislation — and we will not be the last,&quot; ASD Director-General Mike Burgess said.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&quot;Agencies in the UK already have similar powers and other nations are considering their options.&lt;/p&gt;
&lt;p&gt;&quot;The claims the legislation will drive tech companies offshore are similarly flawed.&quot;&lt;/p&gt;
&lt;p class=&quot;topics&quot;&gt;&lt;strong&gt;Topics:&lt;/strong&gt; &lt;a href=&quot;https://www.abc.net.au/news/topic/government-and-politics&quot;&gt;government-and-politics&lt;/a&gt;, &lt;a href=&quot;https://www.abc.net.au/news/topic/federal-government&quot;&gt;federal-government&lt;/a&gt;, &lt;a href=&quot;https://www.abc.net.au/news/topic/computers-and-technology&quot;&gt;computers-and-technology&lt;/a&gt;, &lt;a href=&quot;https://www.abc.net.au/news/topic/internet-technology&quot;&gt;internet-technology&lt;/a&gt;, &lt;a href=&quot;https://www.abc.net.au/news/topic/information-technology&quot;&gt;information-technology&lt;/a&gt;, &lt;a href=&quot;https://www.abc.net.au/news/topic/australia&quot;&gt;australia&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;published&quot;&gt;First posted &lt;span class=&quot;timestamp&quot;&gt;March 28, 2019 00:39:42&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 27 Mar 2019 20:49:18 +0000</pubDate>
<dc:creator>technion</dc:creator>
<og:title>Microsoft says encryption laws deter companies from storing data in Australia</og:title>
<og:description>The software giant's president says vague new laws are damaging the Australian technology industry and causing customers to seek options in other countries.</og:description>
<og:url>https://www.abc.net.au/news/2019-03-28/microsoft-says-companies-are-no-longer-comfortable-storing-data/10946494</og:url>
<og:image>https://www.abc.net.au/news/image/10946506-16x9-700x394.jpg</og:image>
<og:type>Article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.abc.net.au/news/2019-03-28/microsoft-says-companies-are-no-longer-comfortable-storing-data/10946494</dc:identifier>
</item>
<item>
<title>Facebook to ban white nationalist content</title>
<link>https://newsroom.fb.com/news/2019/03/standing-against-hate/</link>
<guid isPermaLink="true" >https://newsroom.fb.com/news/2019/03/standing-against-hate/</guid>
<description>&lt;p&gt;Today we’re announcing a ban on praise, support and representation of white nationalism and white separatism on Facebook and Instagram, which we’ll start enforcing next week. It’s clear that these concepts are deeply linked to organized hate groups and have no place on our services.&lt;/p&gt;
&lt;p&gt;Our policies have long prohibited hateful treatment of people based on characteristics such as race, ethnicity or religion — and that has always included white supremacy. We didn’t originally apply the same rationale to expressions of white nationalism and white separatism because we were thinking about broader concepts of nationalism and separatism — things like American pride and Basque separatism, which are an important part of people’s identity.&lt;/p&gt;
&lt;p&gt;But over the past three months our conversations with members of civil society and academics who are experts in race relations around the world have confirmed that white nationalism and white separatism cannot be meaningfully separated from white supremacy and organized hate groups. Our own review of hate figures and organizations – as defined by our &lt;a href=&quot;https://www.facebook.com/communitystandards/dangerous_individuals_organizations&quot;&gt;Dangerous Individuals &amp;amp; Organizations policy&lt;/a&gt; – further revealed the overlap between white nationalism and white separatism and white supremacy. Going forward, while people will still be able to demonstrate pride in their ethnic heritage, we will not tolerate praise or support for white nationalism and white separatism.&lt;/p&gt;
&lt;p&gt;We also need to get better and faster at finding and removing hate from our platforms. Over the past few years we have improved our ability to use machine learning and artificial intelligence to find material from terrorist groups. Last fall, we started using similar tools to extend our efforts to a range of hate groups globally, including white supremacists. We’re making progress, but we know we have a lot more work to do.&lt;/p&gt;
&lt;p&gt;Our efforts to combat hate don’t stop here. As part of today’s announcement, we’ll also start connecting people who search for terms associated with white supremacy to resources focused on helping people leave behind hate groups. People searching for these terms will be directed to &lt;a href=&quot;https://www.lifeafterhate.org/&quot;&gt;Life After Hate&lt;/a&gt;, an organization founded by former violent extremists that provides crisis intervention, education, support groups and outreach.&lt;/p&gt;
&lt;p&gt;Unfortunately, there will always be people who try to game our systems to spread hate. Our challenge is to stay ahead by continuing to improve our technologies, evolve our policies and work with experts who can bolster our own efforts. We are deeply committed and will share updates as this process moves forward.&lt;/p&gt;
&lt;p&gt;&lt;img data-attachment-id=&quot;14910&quot; data-permalink=&quot;https://newsroom.fb.com/news/2019/03/standing-against-hate/55495053_2273538426192851_938787096791875584_n/&quot; data-orig-file=&quot;https://fbnewsroomus.files.wordpress.com/2019/03/55495053_2273538426192851_938787096791875584_n.png&quot; data-orig-size=&quot;1815,3771&quot; data-comments-opened=&quot;0&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;55495053_2273538426192851_938787096791875584_n&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://fbnewsroomus.files.wordpress.com/2019/03/55495053_2273538426192851_938787096791875584_n.png?w=144&quot; data-large-file=&quot;https://fbnewsroomus.files.wordpress.com/2019/03/55495053_2273538426192851_938787096791875584_n.png?w=493&amp;amp;h=1024&quot; class=&quot;aligncenter size-large wp-image-14910&quot; src=&quot;https://fbnewsroomus.files.wordpress.com/2019/03/55495053_2273538426192851_938787096791875584_n.png?w=493&amp;amp;h=1024&quot; alt=&quot;&quot; width=&quot;493&quot; height=&quot;1024&quot; srcset=&quot;https://fbnewsroomus.files.wordpress.com/2019/03/55495053_2273538426192851_938787096791875584_n.png?w=493&amp;amp;h=1024 493w, https://fbnewsroomus.files.wordpress.com/2019/03/55495053_2273538426192851_938787096791875584_n.png?w=986&amp;amp;h=2048 986w, https://fbnewsroomus.files.wordpress.com/2019/03/55495053_2273538426192851_938787096791875584_n.png?w=193&amp;amp;h=400 193w, https://fbnewsroomus.files.wordpress.com/2019/03/55495053_2273538426192851_938787096791875584_n.png?w=144&amp;amp;h=300 144w, https://fbnewsroomus.files.wordpress.com/2019/03/55495053_2273538426192851_938787096791875584_n.png?w=768&amp;amp;h=1596 768w&quot; sizes=&quot;(max-width: 493px) 100vw, 493px&quot;/&gt;&lt;/p&gt;
&lt;h6&gt;Searches for terms associated with white supremacy will surface a link to Life After Hate’s Page, where people can find support in the form of education, interventions, academic research and outreach.&lt;/h6&gt;
</description>
<pubDate>Wed, 27 Mar 2019 17:09:34 +0000</pubDate>
<dc:creator>anigbrowl</dc:creator>
<og:type>article</og:type>
<og:image>https://fbnewsroomus.files.wordpress.com/2018/10/stop-bullying-newsroom-header.png?w=960</og:image>
<og:title>Standing Against Hate | Facebook Newsroom</og:title>
<og:description>Today we're announcing a ban on praise, support and representation of white nationalism and separatism on Facebook and Instagram.</og:description>
<og:url>https://newsroom.fb.com/news/2019/03/standing-against-hate/</og:url>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://newsroom.fb.com/news/2019/03/standing-against-hate/</dc:identifier>
</item>
<item>
<title>Keybase is not softer than TOFU</title>
<link>https://keybase.io/blog/chat-apps-softer-than-tofu</link>
<guid isPermaLink="true" >https://keybase.io/blog/chat-apps-softer-than-tofu</guid>
<description>March 27, 2019
&lt;center&gt;&lt;img class=&quot;img img-responsive&quot; alt=&quot;stir fry tofu&quot; src=&quot;https://keybase.io/images/blog/tofu/toofu4.png&quot;/&gt;&lt;/center&gt;&lt;p&gt;&lt;strong&gt;UPDATE 3/27/19 4:30pm ET&lt;/strong&gt;: &lt;em&gt;a first version of this post specifically called out 2 other encrypted chat apps, one of which is the gold standard outside of Keybase. By removing the specific mentions, we think we can focus on the positivity of Keybase's solution, and avoid what feels like trash-talking a great project we actually respect, in an effort to highlight our own solution.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The flaw - that Keybase addresses - exists in almost all encrypted chat apps, not just the 2 we previously called out.&lt;/em&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;In end-to-end (E2E) encrypted chat apps, users take charge of their own keys. When users lose their keys, they need to reset their accounts and start from scratch.&lt;/p&gt;
&lt;p&gt;Account &quot;resets&quot; are dangerous. After a reset, you clear your public keys, and you become a cryptographic stranger in all your conversations. You must now reestablish identity, and in almost all cases, this means meeting in person and comparing &quot;safety numbers&quot; with every last one of your contacts. How often do you find yourself skipping this check, even though there can be no safety against a &lt;a href=&quot;https://en.wikipedia.org/wiki/Man-in-the-middle_attack&quot;&gt;man-in-the-middle attack&lt;/a&gt; without it?&lt;/p&gt;
&lt;p&gt;Even if you are serious about safety numbers, you might only see your chat partners once a year at a conference, so you're stuck.&lt;/p&gt;
&lt;h2 id=&quot;but-it-s-infrequent-right-&quot;&gt;But it's infrequent, right?&lt;/h2&gt;
&lt;p&gt;How often do resets happen? Answer: if you're using most encrypted chat apps, all the freaking time.&lt;/p&gt;
&lt;p&gt;With those apps, you throw away the crypto and just start trusting the server: (1) whenever you switch to a new phone; (2) whenever any partner switches to a new phone; (3) when you factory-reset a phone; (4) when any partner factory-resets a phone, (5) whenever you uninstall and reinstall the app, or (6) when any partner uninstalls and reinstalls. If you have just dozens of contacts, resets will affect you every few days.&lt;/p&gt;
&lt;p&gt;Resets happen regularly enough that these apps make it look like no big deal:&lt;/p&gt;
&lt;center&gt;
&lt;div&gt;&lt;img alt=&quot;Screenshot safety number updates&quot; src=&quot;https://keybase.io/images/blog/tofu/safety-dance.png&quot; class=&quot;img img-responsive&quot;/&gt;&lt;/div&gt;
&lt;small&gt;Looks like we got a security upgrade! (But not really.)&lt;/small&gt;&lt;/center&gt;
&lt;h2 id=&quot;is-this-really-tofu-&quot;&gt;Is this really TOFU?&lt;/h2&gt;
&lt;p&gt;In cryptography, the term TOFU (&quot;Trust on first use&quot;) describes taking a gamble the first time 2 parties talk. Rather than meeting in person, you just trust a party in the middle to vouch for each side...and then, after the initial introduction, each side carefully tracks the keys to make sure nothing has changed. If a key &lt;em&gt;has&lt;/em&gt; changed, each side sounds the alarm.&lt;/p&gt;
&lt;p&gt;Similarly, in SSH, if a remote host's key changes, it doesn't &quot;just work,&quot; it gets downright belligerent:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span&gt;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
&lt;/span&gt;
&lt;span&gt;IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!&lt;/span&gt;
Someone could be eavesdropping on you right now (man-in-the-middle attack)!
It is also possible that a host key has just been changed.
&lt;span&gt;The fingerprint for the RSA key sent by the remote host is
00:11:22:33:44:55:66:77:88:99:aa:bb:cc:dd:ee:ff&lt;/span&gt;
Please contact your system administrator.
Add correct host key in /Users/rmueller/.ssh/known_hosts to get rid of this message.
Offending RSA key in /Users/rmueller/.ssh/known_hosts:&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;
RSA host key for &lt;span class=&quot;hljs-number&quot;&gt;8.8&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;8.8&lt;/span&gt; has changed and you have requested strict checking.
Host key verification failed.
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This is the right answer. And make no mistake: &lt;strong&gt;TOFU isn't TOFU if it lets you keep going with a cute little shield that flows by. You should be seeing a giant skull and crossbones.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Undoubtedly these chat services would argue that it's good enough because the user is warned, and a user &lt;em&gt;could&lt;/em&gt; notice and check the safety numbers &lt;em&gt;if they wanted&lt;/em&gt;. Here's why we disagree:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Checking is infeasible, since it happens way too often.&lt;/li&gt;
&lt;li&gt;Checking sucks.&lt;/li&gt;
&lt;li&gt;Even a cursory poll of our security-conscious friends shows that no one bothers.&lt;/li&gt;
&lt;li&gt;Therefore it's just server-trust and SMS trust (ewww!) &lt;strong&gt;over and over and over again&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Finally, these apps don't &lt;em&gt;have&lt;/em&gt; to work this way. Especially on device upgrades and additions. The common, happy case could be both smoother and safer; the more rare, unhappy case could be appropriately scarier. We'll get to Keybase's solution in a minute.&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;let-s-stop-calling-this-tofu&quot;&gt;Let's stop calling this TOFU&lt;/h2&gt;
&lt;p&gt;There's a very effective attack here. Let's say Eve wants to break into Alice and Bob's existing conversation, and can get in the middle between them. Alice and Bob have been in contact for years, having long ago TOFU'ed.&lt;/p&gt;
&lt;p&gt;Eve simply makes it look to Alice that Bob bought a new phone:&lt;/p&gt;
&lt;div readability=&quot;17&quot;&gt;
&lt;p&gt;&lt;strong&gt;Bob (Eve)&lt;/strong&gt;: Hey Hey&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Alice&lt;/strong&gt;: Yo Bob! Looks like you got new safety numbers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bob (Eve)&lt;/strong&gt;: Yeah, I got the iPhone XS, nice phone, I'm really happy with it. Let's exchange safety numbers at RWC 2020. Hey - do you have Caroline's current address? Gonna surprise her while I'm in SF.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Alice&lt;/strong&gt;: Bad call, Android 4 life! Yeah 555 Cozy Street.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;So to call most E2E chat systems TOFU is far too generous. It's more like TADA — Trust After Device Additions. This is a real, not articifical, problem, as it it creates an opportunity for malicious introductions into pre-existing conversation. In real TOFU, by the time someone is interested in your TOFU conversation, they can't break in. With TADA, they can.&lt;/p&gt;
&lt;p&gt;In group chats, the situation is even worse. The more people in the chat, the more common resets will be. In a company of just 20 people, it'll happen every 2 weeks or so, from our estimate. And every person in the company will need to go meet that person. In person. Otherwise, the entire chat is compromised by one mole or hacker.&lt;/p&gt;
&lt;h2 id=&quot;a-solution&quot;&gt;A Solution&lt;/h2&gt;
&lt;p&gt;Is there a good solution, one that doesn't involve trusting servers with private keys? At Keybase, we think yes: true multi-device support. This means that you control a chain of devices, which are you. When you get a new device (a phone, a laptop, a desktop, an iPad, etc.), it generates its own key pair, and your previous device signs it in. If you lose a device, you &quot;remove&quot; it from one of your remaining devices. Technically this removal is a revocation, and there's also some key rotation that happens automatically in this case.&lt;/p&gt;
&lt;p&gt;The net result is that &lt;strong&gt;you don't need to trust the server or meet in person when a partner or teammate gets a new device.&lt;/strong&gt; Similarly, you don't need to trust the server or meet in person when they remove a device, unless it was their last. The only time you need to see a warning is when someone truly loses access to &lt;em&gt;all&lt;/em&gt; their installs. And in that case, you're met with a serious warning, the way it should be:&lt;/p&gt;
&lt;center&gt;
&lt;div&gt;&lt;img src=&quot;https://keybase.io/images/blog/tofu/kb-reset-mobile.png&quot; class=&quot;img img-responsive&quot;/&gt;&lt;/div&gt;
&lt;small&gt;Ugly as sin, on purpose!&lt;/small&gt;&lt;/center&gt;
&lt;p&gt;The result is far fewer account resets. Historically on Keybase, the total number of device additions and revocations is &lt;strong&gt;ten times&lt;/strong&gt; the number of account resets (you don't have to take our word on this, it's public in our Merkle Tree). Unlike other apps, we can show a truly horrifying warning when you converse with someone who has recently reset.&lt;/p&gt;
&lt;p&gt;Device-to-device provisioning is a tricky engineering operation that we have iterated on a few times. An existing device signs the new device's public keys, and encrypts any important secret data for the new device's public key. This operation has to happen quickly (within a second), since that's about the user's attention span for this sort of hoop. As a result, Keybase uses a key hierarchy so that by transferring 32 bytes of secret data from the old device to the new, the new device can see all long-lived cryptographic data (see the FAQ below for more details). This might seem slightly surprising, but &lt;em&gt;this is exactly the point of cryptography&lt;/em&gt;. Cryptography doesn't solve your secret management problems, it just makes them way more scalable.&lt;/p&gt;
&lt;h2 id=&quot;the-full-security-picture&quot;&gt;The Full Security Picture&lt;/h2&gt;
&lt;p&gt;We can now motivate the four bedrock security properties we have baked into Keybase's app:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;long-lived secret keys never leave the devices they were created on&lt;/li&gt;
&lt;li&gt;full multi-device support keeps account resets to a minimum&lt;/li&gt;
&lt;li&gt;key revocations cannot be maliciously withheld or rolled-back&lt;/li&gt;
&lt;li&gt;forward secrecy supported via time-based exploding messages&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;The first two should look familiar. The third becomes important in a design where device revocations are expected and normal. The system must have checks to make sure that malicious servers cannot withhold revocations, which &lt;a href=&quot;https://keybase.io/docs/server_security/merkle_root_in_bitcoin_blockchain&quot;&gt;we've written about before&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See our &lt;a href=&quot;https://keybase.io/blog/keybase-exploding-messages&quot;&gt;blog post&lt;/a&gt; on exploding (ephemeral) messaging for more details about the fourth security property.&lt;/p&gt;
&lt;h2 id=&quot;lots-of-new-crypto-did-keybase-get-it-right-&quot;&gt;Lots of New Crypto; Did Keybase Get It Right?&lt;/h2&gt;
&lt;p&gt;These core Keybase security properties weren't available in an off-the-shelf implementation, an RFC, or even an academic paper. We had to invent some of the crypto &lt;em&gt;protocols&lt;/em&gt; in-house, though fortunately, off-the-shelf, standardized and heavily-used &lt;a href=&quot;https://godoc.org/golang.org/x/crypto/nacl&quot;&gt;cryptographic &lt;em&gt;algorithms&lt;/em&gt;&lt;/a&gt; sufficed in all cases. All of our client code &lt;a href=&quot;https://github.com/keybase/client&quot;&gt;is open source&lt;/a&gt; and in theory anyone can find design or implementation bugs in our clients. But we wanted to &lt;a href=&quot;https://twitter.com/maxtaco/status/973935387843448832&quot;&gt;shine a spotlight on the internals&lt;/a&gt;, and we hired a top security audit firm to take a deep dive.&lt;/p&gt;
&lt;p&gt;Today we announce NCC Group's &lt;a href=&quot;https://keybase.io/docs-assets/blog/NCC_Group_Keybase_KB2018_Public_Report_2019-02-27_v1.3.pdf&quot;&gt;report&lt;/a&gt;, and that we are extremely encouraged by their results. Keybase invested over $100,000 in the audit, and NCC Group staffed top-tier security and cryptography experts on the case. They found two important bugs, both in our implementation, and both that we quickly fixed. These bugs were only exploitable if our servers were acting maliciously. We can assure you they weren't, but you have no reason to believe us. &lt;em&gt;That's the whole point!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We think the NCC team did an excellent job. Kudos to them for taking the time to deeply understand our design and implementation. The bugs they found were subtle, and our internal team failed to find them, despite many recent visits to those parts of the codebase. We encourage you to read the report &lt;a href=&quot;https://keybase.io/docs-assets/blog/NCC_Group_Keybase_KB2018_Public_Report_2019-02-27_v1.3.pdf&quot;&gt;here&lt;/a&gt;, or to read on further in our FAQ below.&lt;/p&gt;
&lt;p&gt;Cheers!&lt;/p&gt;
&lt;p&gt;💖 Keybase&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;faq&quot;&gt;FAQ&lt;/h2&gt;
&lt;h3 id=&quot;how-dare-you-attack-project-xyz-&quot;&gt;How DARE you attack Project XYZ?&lt;/h3&gt;
&lt;p&gt;We are no longer saying anything negative about any cryptography projects here.&lt;/p&gt;
&lt;h3 id=&quot;what-else-&quot;&gt;What else?&lt;/h3&gt;
&lt;p&gt;We're proud of the fact that Keybase doesn't require phone numbers, and for people who care, the app can also cryptographically verify Twitter, HackerNews, Reddit, and Github proofs, in case that's how you know someone.&lt;/p&gt;
&lt;p&gt;And...coming very soon....support for Mastodon.&lt;/p&gt;
&lt;h3 id=&quot;what-about-phone-porting-attacks-&quot;&gt;What about phone porting attacks?&lt;/h3&gt;
&lt;p&gt;Many apps are susceptible to &quot;phone-porting attacks.&quot; Eve visits a kiosk in a shopping mall and convinces Bob's mobile phone provider to point Bob's phone number to her device. Or she convinces a rep over the phone. Now Eve can authenticate to the chat servers, claiming to be Bob. The result looks like our Alice, Bob and Eve example above, but Eve doesn't need to infiltrate any servers. Some apps offer &quot;registration locks&quot; to protect against this attack, but they're annoying so off by default.&lt;/p&gt;
&lt;h3 id=&quot;i-heard-keybase-sends-some-encrypted-private-keys-to-the-server-&quot;&gt;I heard Keybase sends some encrypted private keys to the server?&lt;/h3&gt;
&lt;p&gt;In our early days (2014 and early 2015), Keybase was a web-based PGP app, and since there were few better options, we had a feature for users to store their PGP private keys on our servers, encrypted with their passphrases (which Keybase didn't know).&lt;/p&gt;
&lt;p&gt;Starting in &lt;a href=&quot;https://keybase.io/blog/keybase-new-key-model&quot;&gt;September 2015&lt;/a&gt;, we introduced Keybase's new key model. PGP keys are never (and never have been been) used for Keybase chat or filesystem.&lt;/p&gt;
&lt;h3 id=&quot;how-are-old-chats-instantly-available-on-new-phones-&quot;&gt;How are old chats instantly available on new phones?&lt;/h3&gt;
&lt;p&gt;In some other apps, new devices do not see old messages, as syncing old messages through a server would contravene forward-secrecy. The Keybase app allows users to designate some messages—or entire conversations—as &quot;ephemeral.&quot; These messages explode after a set time and get doubly-encrypted: once with long-lived chat encryption keys, and again with eagerly-rotated and discarded ephemeral keys. Thus, ephemeral messages get forward secrecy and cannot be synced across phones on provisioning.&lt;/p&gt;
&lt;p&gt;Non-ephemeral messages persist until the user explicitly deletes them and are E2E synced to new devices. This produces a Slack-like experience, only encrypted! So when you add someone to a team, or add a new device for yourself, the messages are unlocked.&lt;/p&gt;
&lt;p&gt;See the next question for details about how that syncing actually happens.&lt;/p&gt;
&lt;h3 id=&quot;tell-me-about-puk-s-&quot;&gt;Tell me about PUK's!&lt;/h3&gt;
&lt;p&gt;It's pronounced &quot;puks&quot; not &quot;pukes.&quot;&lt;/p&gt;
&lt;p&gt;Two years ago, we introduced &lt;a href=&quot;https://keybase.io/docs/teams/puk&quot;&gt;per-user keys (PUK)&lt;/a&gt;. A PUK's public half is advertised in users' public &lt;a href=&quot;https://keybase.io/docs/sigchain&quot;&gt;sigchain&lt;/a&gt;. The private half is encrypted for each device's public key. When Alice provisions a new device, her old device knows the secret half of her PUK and the new device's public key. She encrypts the secret half of the PUK for new device's public key, and the new device pulls this ciphertext down via the server. The new device decrypts the PUK and can immediately access all long-lived chat messages.&lt;/p&gt;
&lt;p&gt;Whenever Alice revokes a device, the revoking device rotates her PUK, so that all her devices except the most-recently revoked device get the new PUK.&lt;/p&gt;
&lt;p&gt;There is crucial distinction between this syncing scheme and the early Keybase PGP system. Here, all keys involved have 32 bytes of true entropy and aren't breakable by brute force in the case of server compromise. True, if &lt;a href=&quot;https://godoc.org/golang.org/x/crypto/curve25519&quot;&gt;Curve25519&lt;/a&gt; is broken, or if the &lt;a href=&quot;https://golang.org/pkg/crypto/rand/&quot;&gt;PRNG that Go exposes&lt;/a&gt; is broken, then this system is broken. But PUK-syncing doesn't make any other meaningful cryptographic assumptions.&lt;/p&gt;
&lt;h3 id=&quot;what-about-big-group-chats-&quot;&gt;What about big group chats?&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;tl;dr&lt;/strong&gt; teams have their own auditable signature chains, assigning role changes and member additions and removals.&lt;/p&gt;
&lt;p&gt;Security researchers have &lt;a href=&quot;https://blog.cryptographyengineering.com/2018/12/17/on-ghost-users-and-messaging-backdoors/&quot;&gt;written about&lt;/a&gt; &quot;ghost user&quot; attacks on group chats. If users' clients can't cryptographically verify group membership, then malicious servers can inject spies and moles into group chats. Keybase has a very robust story here in the form of our &lt;a href=&quot;https://keybase.io/blog/introducing-keybase-teams&quot;&gt;teams feature&lt;/a&gt;, which we will revisit in a future blog post.&lt;/p&gt;
&lt;h3 id=&quot;can-you-talk-more-about-ncc-kb2018-001-&quot;&gt;Can you talk more about NCC-KB2018-001?&lt;/h3&gt;
&lt;p&gt;We believe this bug to be the most significant find of the NCC audit. Keybase makes heavy use of append-only immutable data structures to defend against server equivocation. In the case of a bug, an honest server might want to equivocate. It might need to say: &quot;I previously told you A, but there was a bug, I meant B.&quot; But our clients have a blanket policy to not allow the server that flexibility. So instead, when we do hit bugs, we typically need to &lt;a href=&quot;https://github.com/keybase/client/blob/049d28bddb3c71cdd986f52d0f9fd9344d17a713/go/libkb/chain_link.go#L127-L149&quot;&gt;hardcode exceptions&lt;/a&gt; into the clients.&lt;/p&gt;
&lt;p&gt;We also recently introduced &lt;a href=&quot;https://keybase.io/docs/teams/sigchain_v2&quot;&gt;Sigchain V2&lt;/a&gt; which solves scalability problems we didn't accurately foresee in V1. With V2 sigchains, the clients are more sparing in which cryptographic data they pull down from the server, and only bother to fetch one signature over the tail of the signature chain, rather than a signature for every intermediate link. Thus, clients lost the ability to always look up the hash of the signature of a chainlink, but we previously used those hashes to lookup bad chainlinks in that list of hardcoded exceptions. The PR to introduce Sigchain V2 forged ahead, forgetting this detail about hardcoded exceptions since it was buried under multiple layers of abstraction, and just trusted a field from the server's reply for what that hash was.&lt;/p&gt;
&lt;p&gt;Once NCC uncovered this bug, the &lt;a href=&quot;https://github.com/keybase/client/pull/14335&quot;&gt;fix&lt;/a&gt; was easy enough: lookup hardcoded exceptions by the hash of the chainlink, rather than the hash of the signature over the chainlink. A client can always directly compute these hashes.&lt;/p&gt;
&lt;p&gt;We can also attribute this bug to added complexity required to support both sigchain V1 and sigchain V2 simultaneously. Modern clients write sigchain V2 links, but all clients need to support legacy V1 links indefinitely. Recall that clients sign links with their private per-device keys. We cannot coordinate all clients rewriting historical data in any reasonable time frame, since those clients might just be offline.&lt;/p&gt;
&lt;h3 id=&quot;can-you-talk-more-about-ncc-kb2018-004-&quot;&gt;Can you talk more about NCC-KB2018-004?&lt;/h3&gt;
&lt;p&gt;As in &lt;code&gt;001&lt;/code&gt; (see just above), we were burned by some combination of support for legacy decisions and optimizations that seemed important as we got more operational experience with the system.&lt;/p&gt;
&lt;p&gt;In Sigchain V2, we shave bytes off of chainlinks to decrease the bandwidth required to lookup users. These savings are especially important on mobile. Thus, we encode chainlinks with &lt;a href=&quot;https://msgpack.org/index.html&quot;&gt;MessagePack&lt;/a&gt; rather than &lt;a href=&quot;https://json.org&quot;&gt;JSON&lt;/a&gt;, which gives a nice savings. In turn, clients sign and verify signatures over these chainlinks. The researchers at NCC found clever ways to cook up signature bodies that looked like JSON and MessagePack at the same time, and could thus say conflicting things. We unwittingly introduced this decoding ambiguity while optimizing, when we &lt;a href=&quot;https://github.com/keybase/client/pull/10418&quot;&gt;switched&lt;/a&gt; JSON parsers from Go's standard parser to one that we found performed much better. This faster parser was happy to skip over a lot of leading garbage before it found actual JSON, which enabled this &quot;polyglot attack.&quot; This bug was fixed with some &lt;a href=&quot;https://github.com/keybase/client/pull/14006&quot;&gt;extra input validation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With Sigchain V2, we also adopted &lt;a href=&quot;https://mailarchive.ietf.org/arch/msg/tls/kNHaCbvPbc7WQbdaqH3r5Kd4UpE&quot;&gt;Adam Langley's suggestion&lt;/a&gt; that signers prefix their signature payloads with a context string prefix and &lt;code&gt;\0&lt;/code&gt;-byte, so that verifiers don't get confused about a signer's intent. There were bugs on the verifying side of this context-prefix idea, which could have led to other &quot;polyglot&quot; attacks. We quickly fixed this flaw &lt;a href=&quot;https://github.com/keybase/client/pull/14320&quot;&gt;with a whitelist&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For both bugs under &lt;code&gt;004&lt;/code&gt;, the server rejected the &quot;polyglot&quot; payloads that NCC constructed, so attacking these weaknesses would only have been possible with an assist from a compromised server.&lt;/p&gt;
&lt;h3 id=&quot;where-are-your-docs-&quot;&gt;Where are your docs?&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://keybase.io/docs&quot;&gt;https://keybase.io/docs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We're investing more time into our docs in the coming months.&lt;/p&gt;
&lt;h3 id=&quot;can-you-talk-more-about-this-claim-by-ncc-however-the-attacker-is-capable-of-refusing-to-update-a-sigchain-or-rolling-back-a-user-s-sigchain-to-a-previous-state-by-truncating-later-chain-links-&quot;&gt;Can you talk more about this claim by NCC? &quot;However, the attacker is capable of refusing to update a sigchain or rolling back a user's sigchain to a previous state by truncating later chain links.&quot;&lt;/h3&gt;
&lt;p&gt;Keybase makes heavy use of immutable, append-only public data structures, which force its server infrastructure to commit to one true view of users' identities. In this way, we can guarantee device revocations and team member removals in such a way that a compromised server cannot roll back. If the server decides to show an inconsistent view, this deviation becomes part of an immutable public record. Keybase clients or a third party auditor can discover the inconsistency at any time after the attack. We think these guarantees far exceed those of competing products, and are near-optimal given the practical constraints of mobile phones and clients with limited processing power.&lt;/p&gt;
&lt;p&gt;To be clear Keybase cannot invent signatures for someone; like any server, it could withhold data. But our transparent merkle tree is designed to keep this to a very a short period, and permanently discoverable.&lt;/p&gt;
&lt;h3 id=&quot;how-does-keybase-handle-account-resets-&quot;&gt;How does Keybase handle account resets?&lt;/h3&gt;
&lt;p&gt;When Keybase users actually lose all of their devices (as opposed to just adding new ones or revoking some subset), they need to reset. After an account reset, a user is basically new, but has the same username as before. The user cannot sign a &quot;reset statement&quot; because she has lost all of her keys (and therefore needs a reset). So instead, the Keybase server commits an indelible statement into the Merkle Tree that signifies a reset. Clients enforce that these statements cannot be rolled back. A future blog post will detail the exact mechanisms involved.&lt;/p&gt;
&lt;p&gt;That user needs to then redo any identity proofs (Twitter, Github, whatever) with their new keys.&lt;/p&gt;
&lt;h3 id=&quot;can-the-server-just-swap-out-someone-s-merkle-tree-leaf-to-advertise-a-whole-different-set-of-keys-&quot;&gt;Can the server just swap out someone's Merkle Tree Leaf to advertise a whole different set of keys?&lt;/h3&gt;
&lt;p&gt;The NCC authors consider an evil Keybase server that performs a wholesale swap-out of a Merkle Tree leaf, replacing Bob's true set of keys with a totally new fake set. A server attempting this attack has two options. First, it can fork the state of the world, putting Bob on one side of the fork, and those it wants to fool on the other. And second, it can &quot;equivocate&quot;, publishing a version of the Merkle Tree with Bob's correct set of keys, and other versions with the faked set. Users who interact with Bob regularly will detect this attack, since they will check that previously-loaded versions of Bob's history are valid prefixes of the newer versions they download from the server. Third-party validators who scan the entirety of every Keybase update could also catch this attack. If you have read all the way down here, and you'd be interested in writing a third-party Keybase validator, we'd love that, and we can offer a sizeable commission for one that works. Reach out to &lt;a href=&quot;https://keybase.io/max&quot;&gt;&lt;code&gt;max&lt;/code&gt; on Keybase&lt;/a&gt;. Otherwise, we hope to schedule the creation of a standalone validator soon.&lt;/p&gt;
&lt;h3 id=&quot;can-you-believe-i-made-it-to-the-end-&quot;&gt;Can you believe I made it to the end?&lt;/h3&gt;
&lt;p&gt;Did you though, or did you just scroll down here?&lt;/p&gt;
</description>
<pubDate>Wed, 27 Mar 2019 16:31:55 +0000</pubDate>
<dc:creator>malgorithms</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://keybase.io/blog/chat-apps-softer-than-tofu</dc:identifier>
</item>
<item>
<title>How Spotify and Discover Weekly Earn Me $400/month</title>
<link>https://www.stevebenjamins.com/blog/spotify-and-discover-weekly</link>
<guid isPermaLink="true" >https://www.stevebenjamins.com/blog/spotify-and-discover-weekly</guid>
<description>&lt;p&gt;For an indie artist like me, the major difference between Apple Music and Spotify is &lt;em&gt;Discover Weekly&lt;/em&gt;. Apple Music has no equivalent. &lt;em&gt;(Edit:&lt;/em&gt; HN readers have &lt;a href=&quot;https://news.ycombinator.com/item?id=19501649&quot;&gt;pointed out&lt;/a&gt; that Apple Music does actually have some personalized playlists!)&lt;/p&gt;
&lt;p&gt;This is of course totally anecdotal!&lt;/p&gt;

&lt;h3&gt;Why Earning $400 / Month is Important&lt;/h3&gt;
&lt;p&gt;Artists should be truth tellers not hustling entrepreneurs. But in todays world that's not even close to possible.&lt;/p&gt;
&lt;p&gt;To be a full-time artist you have to hustle and grind. Your Instagram has to be on point. You have to tour constantly. You have to sell merch. You gotta start a Patreon. Anything to support the art.&lt;/p&gt;
&lt;p&gt;I don’t want to do that stuff. I just want to make music. Preferably in my evenings when I'm done work at my day job.&lt;/p&gt;
&lt;p&gt;That's what Spotify is letting me do and I'm actually earning a bit of money. I'm not getting rich or famous but I’m not sure that's worth aspiring towards anyways.&lt;/p&gt;
&lt;p&gt;I'm making music for people who want to hear to it. Anything beyond that is a bonus.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Thanks for reading.&lt;/em&gt; &lt;a href=&quot;http://eepurl.com/gk70TX&quot;&gt;&lt;em&gt;Sign up to my blog email list&lt;/em&gt;&lt;/a&gt; &lt;em&gt;to be notified of new posts.&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 27 Mar 2019 15:14:58 +0000</pubDate>
<dc:creator>steve-benjamins</dc:creator>
<og:title>How Spotify &amp; Discover Weekly Earns Me $400 / Month</og:title>
<og:url>https://www.stevebenjamins.com/blog/spotify-and-discover-weekly</og:url>
<og:type>article</og:type>
<og:description>(Note: This post is also available as a Youtube video .) I'm making over $400 / month with my music — mostly through Spotify. Of course that’s not enough to support a full-time artist but that’s not what I’m trying to be. I don't tour, I don't sell merch and I'm not on a label. I just want</og:description>
<og:image>http://static1.squarespace.com/static/5c6b0db3da50d3614fd79e23/5c75939fe4966b59fd6b560c/5c8a5b4c24a694eabeaa8386/1553703048517/sbr-monthly-organic-lifetime.png?format=1500w</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.stevebenjamins.com/blog/spotify-and-discover-weekly</dc:identifier>
</item>
<item>
<title>Standardizing WASI: A system interface to run WebAssembly outside the web</title>
<link>https://hacks.mozilla.org/2019/03/standardizing-wasi-a-webassembly-system-interface/</link>
<guid isPermaLink="true" >https://hacks.mozilla.org/2019/03/standardizing-wasi-a-webassembly-system-interface/</guid>
<description>&lt;p&gt;Today, we announce the start of a new standardization effort — WASI, the WebAssembly system interface.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Why:&lt;/strong&gt; Developers are starting to push WebAssembly beyond the browser, because it provides a fast, scalable, secure way to run the same code across all machines.&lt;/p&gt;
&lt;p&gt;But we don’t yet have a solid foundation to build upon. Code outside of a browser needs a way to talk to the system — a system interface. And the WebAssembly platform doesn’t have that yet.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What:&lt;/strong&gt; WebAssembly is an assembly language for a conceptual machine, not a physical one. This is why it can be run across a variety of different machine architectures.&lt;/p&gt;
&lt;p&gt;Just as WebAssembly is an assembly language for a conceptual machine, WebAssembly needs a system interface for a conceptual operating system, not any single operating system. This way, it can be run across all different OSs.&lt;/p&gt;
&lt;p&gt;This is what WASI is — a system interface for the WebAssembly platform.&lt;/p&gt;
&lt;p&gt;We aim to create a system interface that will be a true companion to WebAssembly and last the test of time. This means upholding the key principles of WebAssembly — portability and security.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Who:&lt;/strong&gt; We are chartering a WebAssembly subgroup to focus on standardizing &lt;a href=&quot;https://wasi.dev/&quot;&gt;WASI&lt;/a&gt;. We’ve already gathered interested partners, and are looking for more to join.&lt;/p&gt;
&lt;p&gt;Here are some of the reasons that we, our partners, and our supporters think this is important:&lt;/p&gt;
&lt;h4&gt;Sean White, Chief R&amp;amp;D Officer of Mozilla&lt;/h4&gt;
&lt;p&gt;“WebAssembly is already transforming the way the web brings new kinds of compelling content to people and empowers developers and creators to do their best work on the web. Up to now that’s been through browsers, but with WASI we can deliver the benefits of WebAssembly and the web to more users, more places, on more devices, and as part of more experiences.”&lt;/p&gt;
&lt;h4&gt;Tyler McMullen, CTO of Fastly&lt;/h4&gt;
&lt;p&gt;“We are taking WebAssembly beyond the browser, as a platform for fast, safe execution of code in our edge cloud. Despite the differences in environment between our edge and browsers, WASI means WebAssembly developers won’t have to port their code to each different platform.”&lt;/p&gt;
&lt;h4&gt;Myles Borins, Node Technical Steering committee director&lt;/h4&gt;
&lt;p&gt;“WebAssembly could solve one of the biggest problems in Node — how to get close-to-native speeds and reuse code written in other languages like C and C++ like you can with native modules, while still remaining portable and secure. Standardizing this system interface is the first step towards making that happen.”&lt;/p&gt;
&lt;h4&gt;Laurie Voss, co-founder of npm&lt;/h4&gt;
&lt;p&gt;“npm is tremendously excited by the potential WebAssembly holds to expand the capabilities of the npm ecosystem while hugely simplifying the process of getting native code to run in server-side JavaScript applications. We look forward to the results of this process.”&lt;/p&gt;
&lt;p&gt;So that’s the big news! 🎉&lt;/p&gt;
&lt;p&gt;There are currently 3 implementations of WASI:&lt;/p&gt;
&lt;p&gt;You can see WASI in action in this video:&lt;/p&gt;
&lt;p&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/ggtEJC0Jv8A&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;And if you want to learn more about our proposal for how this system interface should work, keep reading.&lt;/p&gt;
&lt;h3&gt;What’s a system interface?&lt;/h3&gt;
&lt;p&gt;Many people talk about languages like C giving you direct access to system resources. But that’s not &lt;em&gt;quite&lt;/em&gt; true&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;These languages don’t have direct access to do things like open or create files on most systems. Why not?&lt;/p&gt;
&lt;p&gt;Because these system resources — such as files, memory, and network connections— are too important for stability and security.&lt;/p&gt;
&lt;p&gt;If one program unintentionally messes up the resources of another, then it could crash the program. Even worse, if a program (or user) intentionally messes with the resources of another, it could steal sensitive data.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/03/01-01_crash-data-leak-1.png&quot;&gt;&lt;img class=&quot;alignnone size-large wp-image-33308&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/03/01-01_crash-data-leak-1-500x220.png&quot; alt=&quot;A frowning terminal window indicating a crash, and a file with a broken lock indicating a data leak&quot; width=&quot;500&quot; height=&quot;220&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/03/01-01_crash-data-leak-1-500x220.png 500w, https://hacks.mozilla.org/files/2019/03/01-01_crash-data-leak-1-250x110.png 250w, https://hacks.mozilla.org/files/2019/03/01-01_crash-data-leak-1-768x338.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So we need a way to control which programs and users can access which resources. People figured this out pretty early on, and came up with a way to provide this control: protection ring security.&lt;/p&gt;
&lt;p&gt;With protection ring security, the operating system basically puts a protective barrier around the system’s resources. This is the kernel. The kernel is the only thing that gets to do operations like creating a new file or opening a file or opening a network connection.&lt;/p&gt;
&lt;p&gt;The user’s programs run outside of this kernel in something called user mode. If a program wants to do anything like open a file, it has to ask the kernel to open the file for it.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/03/01-02-protection-ring-sec-1.png&quot;&gt;&lt;img class=&quot;alignnone size-large wp-image-33309&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/03/01-02-protection-ring-sec-1-500x298.png&quot; alt=&quot;A file directory structure on the left, with a protective barrier in the middle containing the operating system kernel, and an application knocking for access on the right&quot; width=&quot;500&quot; height=&quot;298&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/03/01-02-protection-ring-sec-1-500x298.png 500w, https://hacks.mozilla.org/files/2019/03/01-02-protection-ring-sec-1-250x149.png 250w, https://hacks.mozilla.org/files/2019/03/01-02-protection-ring-sec-1-768x457.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is where the concept of the system call comes in. When a program needs to ask the kernel to do one of these things, it asks using a system call. This gives the kernel a chance to figure out which user is asking. Then it can see if that user has access to the file before opening it.&lt;/p&gt;
&lt;p&gt;On most devices, this is the only way that your code can access the system’s resources — through system calls.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/03/01-03-syscall-1.png&quot;&gt;&lt;img class=&quot;alignnone size-large wp-image-33310&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/03/01-03-syscall-1-500x227.png&quot; alt=&quot;An application asking the operating system to put data into an open file&quot; width=&quot;500&quot; height=&quot;227&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/03/01-03-syscall-1-500x227.png 500w, https://hacks.mozilla.org/files/2019/03/01-03-syscall-1-250x114.png 250w, https://hacks.mozilla.org/files/2019/03/01-03-syscall-1-768x349.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The operating system makes the system calls available. But if each operating system has its own system calls, wouldn’t you need a different version of the code for each operating system? Fortunately, you don’t.&lt;/p&gt;
&lt;p&gt;How is this problem solved? Abstraction.&lt;/p&gt;
&lt;p&gt;Most languages provide a standard library. While coding, the programmer doesn’t need to know what system they are targeting. They just use the interface.&lt;/p&gt;
&lt;p&gt;Then, when compiling, your toolchain picks which implementation of the interface to use based on what system you’re targeting. This implementation uses functions from the operating system’s API, so it’s specific to the system.&lt;/p&gt;
&lt;p&gt;This is where the system interface comes in. For example, &lt;code&gt;printf&lt;/code&gt; being compiled for a Windows machine could use the Windows API to interact with the machine. If it’s being compiled for Mac or Linux, it will use POSIX instead.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/03/02-01-implementations-1.png&quot;&gt;&lt;img class=&quot;alignnone size-large wp-image-33311&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/03/02-01-implementations-1-500x267.png&quot; alt=&quot;The interface for putc being translated into two different implementations, one implemented using POSIX and one implemented using Windows APIs&quot; width=&quot;500&quot; height=&quot;267&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/03/02-01-implementations-1-500x267.png 500w, https://hacks.mozilla.org/files/2019/03/02-01-implementations-1-250x133.png 250w, https://hacks.mozilla.org/files/2019/03/02-01-implementations-1-768x409.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This poses a problem for WebAssembly, though.&lt;/p&gt;
&lt;p&gt;With WebAssembly, you don’t know what kind of operating system you’re targeting even when you’re compiling. So you can’t use any single OS’s system interface inside the WebAssembly implementation of the standard library.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/03/02-02-implementations-1.png&quot;&gt;&lt;img class=&quot;alignnone size-large wp-image-33312&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/03/02-02-implementations-1-500x260.png&quot; alt=&quot;an empty implementation of putc&quot; width=&quot;500&quot; height=&quot;260&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/03/02-02-implementations-1-500x260.png 500w, https://hacks.mozilla.org/files/2019/03/02-02-implementations-1-250x130.png 250w, https://hacks.mozilla.org/files/2019/03/02-02-implementations-1-768x399.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I’ve talked before about how WebAssembly is &lt;a href=&quot;https://hacks.mozilla.org/2017/02/creating-and-working-with-webassembly-modules/&quot;&gt;an assembly language for a conceptual machine&lt;/a&gt;, not a real machine. In the same way, WebAssembly needs a system interface for a conceptual operating system, not a real operating system.&lt;/p&gt;
&lt;p&gt;But there are already runtimes that can run WebAssembly outside the browser, even without having this system interface in place. How do they do it? Let’s take a look.&lt;/p&gt;
&lt;h3&gt;How is WebAssembly running outside the browser today?&lt;/h3&gt;
&lt;p&gt;The first tool for producing WebAssembly was Emscripten. It emulates a particular OS system interface, POSIX, on the web. This means that the programmer can use functions from the C standard library (libc).&lt;/p&gt;
&lt;p&gt;To do this, Emscripten created its own implementation of libc. This implementation was split in two — part was compiled into the WebAssembly module, and the other part was implemented in JS glue code. This JS glue would then call into the browser, which would then talk to the OS.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/03/03-01-emscripten-1.png&quot;&gt;&lt;img class=&quot;alignnone size-large wp-image-33313&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/03/03-01-emscripten-1-500x329.png&quot; alt=&quot;A Rube Goldberg machine showing how a call goes from a WebAssembly module, into Emscripten's JS glue code, into the browser, into the kernel&quot; width=&quot;500&quot; height=&quot;329&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/03/03-01-emscripten-1-500x329.png 500w, https://hacks.mozilla.org/files/2019/03/03-01-emscripten-1-250x165.png 250w, https://hacks.mozilla.org/files/2019/03/03-01-emscripten-1-768x505.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Most of the early WebAssembly code was compiled with Emscripten. So when people started wanting to run WebAssembly without a browser, they started by making Emscripten-compiled code run.&lt;/p&gt;
&lt;p&gt;So these runtimes needed to create their own implementations for all of these functions that were in the JS glue code.&lt;/p&gt;
&lt;p&gt;There’s a problem here, though. The interface provided by this JS glue code wasn’t designed to be a standard, or even a public facing interface. That wasn’t the problem it was solving.&lt;/p&gt;
&lt;p&gt;For example, for a function that would be called something like &lt;code&gt;read&lt;/code&gt; in an API that was designed to be a public interface, the JS glue code instead uses &lt;code&gt;_system3(which, varargs)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/03/03-02-system3-1.png&quot;&gt;&lt;img class=&quot;alignnone size-large wp-image-33314&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/03/03-02-system3-1-500x179.png&quot; alt=&quot;A clean interface for read, vs a confusing one for system3&quot; width=&quot;500&quot; height=&quot;179&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/03/03-02-system3-1-500x179.png 500w, https://hacks.mozilla.org/files/2019/03/03-02-system3-1-250x89.png 250w, https://hacks.mozilla.org/files/2019/03/03-02-system3-1-768x275.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The first parameter, &lt;code&gt;which&lt;/code&gt;, is an integer which is always the same as the number in the name (so 3 in this case).&lt;/p&gt;
&lt;p&gt;The second parameter, &lt;code&gt;varargs&lt;/code&gt;, are the arguments to use. It’s called &lt;code&gt;varargs&lt;/code&gt; because you can have a variable number of them. But WebAssembly doesn’t provide a way to pass in a variable number of arguments to a function. So instead, the arguments are passed in via linear memory. This isn’t type safe, and it’s also slower than it would be if the arguments could be passed in using registers.&lt;/p&gt;
&lt;p&gt;That was fine for Emscripten running in the browser. But now runtimes are treating this as a de facto standard, implementing their own versions of the JS glue code. They are emulating an internal detail of an emulation layer of POSIX.&lt;/p&gt;
&lt;p&gt;This means they are re-implementing choices (like passing arguments in as heap values) that made sense based on Emscripten’s constraints, even though these constraints don’t apply in their environments.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/03/03-03-emulation-1.png&quot;&gt;&lt;img class=&quot;alignnone size-large wp-image-33315&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/03/03-03-emulation-1-500x341.png&quot; alt=&quot;A more convoluted Rube Goldberg machine, with the JS glue and browser being emulated by a WebAssembly runtime&quot; width=&quot;500&quot; height=&quot;341&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/03/03-03-emulation-1-500x341.png 500w, https://hacks.mozilla.org/files/2019/03/03-03-emulation-1-250x171.png 250w, https://hacks.mozilla.org/files/2019/03/03-03-emulation-1-768x524.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If we’re going to build a WebAssembly ecosystem that lasts for decades, we need solid foundations. This means our de facto standard can’t be an emulation of an emulation.&lt;/p&gt;
&lt;p&gt;But what principles should we apply?&lt;/p&gt;
&lt;h3&gt;What principles does a WebAssembly system interface need to uphold?&lt;/h3&gt;
&lt;p&gt;There are two important principles that are baked into WebAssembly :&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;portability&lt;/li&gt;
&lt;li&gt;security&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;We need to maintain these key principles as we move to outside-the-browser use cases.&lt;/p&gt;
&lt;p&gt;As it is, POSIX and Unix’s Access Control approach to security don’t quite get us there. Let’s look at where they fall short.&lt;/p&gt;
&lt;h4&gt;Portability&lt;/h4&gt;
&lt;p&gt;POSIX provides source code portability. You can compile the same source code with different versions of libc to target different machines.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/03/04-01-portability-1.png&quot;&gt;&lt;img class=&quot;alignnone size-large wp-image-33316&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/03/04-01-portability-1-500x375.png&quot; alt=&quot;One C source file being compiled to multiple binaries&quot; width=&quot;500&quot; height=&quot;375&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/03/04-01-portability-1-500x375.png 500w, https://hacks.mozilla.org/files/2019/03/04-01-portability-1-250x188.png 250w, https://hacks.mozilla.org/files/2019/03/04-01-portability-1-768x576.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But WebAssembly needs to go one step beyond this. We need to be able to compile once and run across a whole bunch of different machines. We need portable binaries.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/03/04-02-portability-1.png&quot;&gt;&lt;img class=&quot;alignnone size-large wp-image-33317&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/03/04-02-portability-1-500x484.png&quot; alt=&quot;One C source file being compiled to a single binary&quot; width=&quot;500&quot; height=&quot;484&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/03/04-02-portability-1-500x484.png 500w, https://hacks.mozilla.org/files/2019/03/04-02-portability-1-250x242.png 250w, https://hacks.mozilla.org/files/2019/03/04-02-portability-1-768x743.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This kind of portability makes it much easier to distribute code to users.&lt;/p&gt;
&lt;p&gt;For example, if Node’s native modules were written in WebAssembly, then users wouldn’t need to run node-gyp when they install apps with native modules, and developers wouldn’t need to configure and distribute dozens of binaries.&lt;/p&gt;
&lt;h4&gt;Security&lt;/h4&gt;
&lt;p&gt;When a line of code asks the operating system to do some input or output, the OS needs to determine if it is safe to do what the code asks.&lt;/p&gt;
&lt;p&gt;Operating systems typically handle this with access control that is based on ownership and groups.&lt;/p&gt;
&lt;p&gt;For example, the program might ask the OS to open a file. A user has a certain set of files that they have access to.&lt;/p&gt;
&lt;p&gt;When the user starts the program, the program runs on behalf of that user. If the user has access to the file — either because they are the owner or because they are in a group with access — then the program has that same access, too.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/03/04-03-access-control-1.png&quot;&gt;&lt;img class=&quot;alignnone size-large wp-image-33318&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/03/04-03-access-control-1-500x224.png&quot; alt=&quot;An application asking to open a file that is relevant to what it's doing&quot; width=&quot;500&quot; height=&quot;224&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/03/04-03-access-control-1-500x224.png 500w, https://hacks.mozilla.org/files/2019/03/04-03-access-control-1-250x112.png 250w, https://hacks.mozilla.org/files/2019/03/04-03-access-control-1-768x344.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This protects users from each other. That made a lot of sense when early operating systems were developed. Systems were often multi-user, and administrators controlled what software was installed. So the most prominent threat was other users taking a peek at your files.&lt;/p&gt;
&lt;p&gt;That has changed. Systems now are usually single user, but they are running code that pulls in lots of other, third party code of unknown trustworthiness. Now the biggest threat is that the code that you yourself are running will turn against you.&lt;/p&gt;
&lt;p&gt;For example, let’s say that the library you’re using in an application gets a new maintainer (as often happens in open source). That maintainer might have your interest at heart… or they might be one of the bad guys. And if they have access to do anything on your system — for example, open any of your files and send them over the network — then their code can do a lot of damage.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/03/04-04-bitcoin-1.png&quot;&gt;&lt;img class=&quot;alignnone size-large wp-image-33319&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/03/04-04-bitcoin-1-500x258.png&quot; alt=&quot;An evil application asking for access to the users bitcoin wallet and opening up a network connection&quot; width=&quot;500&quot; height=&quot;258&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/03/04-04-bitcoin-1-500x258.png 500w, https://hacks.mozilla.org/files/2019/03/04-04-bitcoin-1-250x129.png 250w, https://hacks.mozilla.org/files/2019/03/04-04-bitcoin-1-768x396.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is why using third-party libraries that can talk directly to the system can be dangerous.&lt;/p&gt;
&lt;p&gt;WebAssembly’s way of doing security is different. WebAssembly is sandboxed.&lt;/p&gt;
&lt;p&gt;This means that code can’t talk directly to the OS. But then how does it do anything with system resources? The host (which might be a browser, or might be a wasm runtime) puts functions in the sandbox that the code can use.&lt;/p&gt;
&lt;p&gt;This means that the host can limit what a program can do on a program-by-program basis. It doesn’t just let the program act on behalf of the user, calling any system call with the user’s full permissions.&lt;/p&gt;
&lt;p&gt;Just having a mechanism for sandboxing doesn’t make a system secure in and of itself — the host can still put all of the capabilities into the sandbox, in which case we’re no better off — but it at least gives hosts the option of creating a more secure system.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/03/04-05-sandbox-1.png&quot;&gt;&lt;img class=&quot;alignnone size-large wp-image-33320&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/03/04-05-sandbox-1-500x278.png&quot; alt=&quot;A runtime placing safe functions into the sandbox with an application&quot; width=&quot;500&quot; height=&quot;278&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/03/04-05-sandbox-1-500x278.png 500w, https://hacks.mozilla.org/files/2019/03/04-05-sandbox-1-250x139.png 250w, https://hacks.mozilla.org/files/2019/03/04-05-sandbox-1-768x427.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In any system interface we design, we need to uphold these two principles. Portability makes it easier to develop and distribute software, and providing the tools for hosts to secure themselves or their users is an absolute must.,&lt;/p&gt;
&lt;h3&gt;What should this system interface look like?&lt;/h3&gt;
&lt;p&gt;Given those two key principles, what should the design of the WebAssembly system interface be?&lt;/p&gt;
&lt;p&gt;That’s what we’ll figure out through the standardization process. We do have a proposal to start with, though:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Create a modular set of standard interfaces&lt;/li&gt;
&lt;li&gt;Start with standardizing the most fundamental module, wasi-core&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/03/05-01-wasi-1.png&quot;&gt;&lt;img class=&quot;alignnone size-large wp-image-33321&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/03/05-01-wasi-1-500x419.png&quot; alt=&quot;Multiple modules encased in the WASI standards effort&quot; width=&quot;500&quot; height=&quot;419&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/03/05-01-wasi-1-500x419.png 500w, https://hacks.mozilla.org/files/2019/03/05-01-wasi-1-250x210.png 250w, https://hacks.mozilla.org/files/2019/03/05-01-wasi-1-768x644.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;What will be in wasi-core?&lt;/p&gt;
&lt;p&gt;wasi-core will contain the basics that all programs need. It will cover much of the same ground as POSIX, including things such as files, network connections, clocks, and random numbers.&lt;/p&gt;
&lt;p&gt;And it will take a very similar approach to POSIX for many of these things. For example, it will use POSIX’s file-oriented approach, where you have system calls such as open, close, read, and write and everything else basically provides augmentations on top.&lt;/p&gt;
&lt;p&gt;But wasi-core won’t cover everything that POSIX does. For example, the process concept does not map clearly onto WebAssembly. And beyond that, it doesn’t make sense to say that every WebAssembly engine needs to support process operations like &lt;code&gt;fork&lt;/code&gt;. But we also want to make it possible to standardize &lt;code&gt;fork&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is where the modular approach comes in. This way, we can get good standardization coverage while still allowing niche platforms to use only the parts of WASI that make sense for them.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/03/05-02-wasi-1.png&quot;&gt;&lt;img class=&quot;alignnone size-large wp-image-33322&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/03/05-02-wasi-1-500x251.png&quot; alt=&quot;Modules filled in with possible areas for standardization, such as processes, sensors, 3D graphics, etc&quot; width=&quot;500&quot; height=&quot;251&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/03/05-02-wasi-1-500x251.png 500w, https://hacks.mozilla.org/files/2019/03/05-02-wasi-1-250x125.png 250w, https://hacks.mozilla.org/files/2019/03/05-02-wasi-1-768x385.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Languages like Rust will use wasi-core directly in their standard libraries. For example, Rust’s &lt;code&gt;open&lt;/code&gt; is implemented by calling &lt;code&gt;__wasi_path_open&lt;/code&gt; when it’s compiled to WebAssembly.&lt;/p&gt;
&lt;p&gt;For C and C++, we’ve created a &lt;a href=&quot;https://github.com/CraneStation/wasi-sysroot&quot;&gt;wasi-sysroot&lt;/a&gt; that implements libc in terms of wasi-core functions.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/03/05-03-open-imps-1.png&quot;&gt;&lt;img class=&quot;alignnone size-large wp-image-33323&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/03/05-03-open-imps-1-500x229.png&quot; alt=&quot;The Rust and C implementations of openat with WASI&quot; width=&quot;500&quot; height=&quot;229&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/03/05-03-open-imps-1-500x229.png 500w, https://hacks.mozilla.org/files/2019/03/05-03-open-imps-1-250x115.png 250w, https://hacks.mozilla.org/files/2019/03/05-03-open-imps-1-768x352.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We expect compilers like Clang to be ready to interface with the WASI API, and complete toolchains like the Rust compiler and Emscripten to use WASI as part of their system implementations&lt;/p&gt;
&lt;p&gt;How does the user’s code call these WASI functions?&lt;/p&gt;
&lt;p&gt;The runtime that is running the code passes the wasi-core functions in as imports.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/03/05-04-imports-1.png&quot;&gt;&lt;img class=&quot;alignnone size-large wp-image-33324&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/03/05-04-imports-1-500x285.png&quot; alt=&quot;A runtime placing an imports object into the sandbox&quot; width=&quot;500&quot; height=&quot;285&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/03/05-04-imports-1-500x285.png 500w, https://hacks.mozilla.org/files/2019/03/05-04-imports-1-220x125.png 220w, https://hacks.mozilla.org/files/2019/03/05-04-imports-1-250x143.png 250w, https://hacks.mozilla.org/files/2019/03/05-04-imports-1-768x438.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This gives us portability, because each host can have their own implementation of wasi-core that is specifically written for their platform — from WebAssembly runtimes like Mozilla’s wasmtime and Fastly’s Lucet, to Node, or even the browser.&lt;/p&gt;
&lt;p&gt;It also gives us sandboxing because the host can choose which wasi-core functions to pass in — so, which system calls to allow — on a program-by-program basis. This preserves security.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/03/05-05-sec-port-1.png&quot;&gt;&lt;br/&gt;&lt;/a&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/03/05-05-sec-port-2.png&quot;&gt;&lt;img class=&quot;alignnone size-large wp-image-33329&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/03/05-05-sec-port-2-500x705.png&quot; alt=&quot;Three runtimes—wastime, Node, and the browser—passing their own implementations of wasi_fd_open into the sandbox&quot; width=&quot;500&quot; height=&quot;705&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/03/05-05-sec-port-2-500x705.png 500w, https://hacks.mozilla.org/files/2019/03/05-05-sec-port-2-250x352.png 250w, https://hacks.mozilla.org/files/2019/03/05-05-sec-port-2-768x1082.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;WASI gives us a way to extend this security even further. It brings in more concepts from capability-based security.&lt;/p&gt;
&lt;p&gt;Traditionally, if code needs to open a file, it calls &lt;code&gt;open&lt;/code&gt; with a string, which is the path name. Then the OS does a check to see if the code has permission (based on the user who started the program).&lt;/p&gt;
&lt;p&gt;With WASI, if you’re calling a function that needs to access a file, you have to pass in a file descriptor, which has permissions attached to it. This could be for the file itself, or for a directory that contains the file.&lt;/p&gt;
&lt;p&gt;This way, you can’t have code that randomly asks to open &lt;code&gt;/etc/passwd&lt;/code&gt;. Instead, the code can only operate on the directories that are passed in to it.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/03/05-06-openat-path-1.png&quot;&gt;&lt;img class=&quot;alignnone size-large wp-image-33326&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/03/05-06-openat-path-1-500x192.png&quot; alt=&quot;Two evil apps in sandboxes. The one on the left is using POSIX and succeeds at opening a file it shouldn't have access to. The other is using WASI and can't open the file.&quot; width=&quot;500&quot; height=&quot;192&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/03/05-06-openat-path-1-500x192.png 500w, https://hacks.mozilla.org/files/2019/03/05-06-openat-path-1-250x96.png 250w, https://hacks.mozilla.org/files/2019/03/05-06-openat-path-1-768x296.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This makes it possible to safely give sandboxed code more access to different system calls — because the capabilities of these system calls can be limited.&lt;/p&gt;
&lt;p&gt;And this happens on a module-by-module basis. By default, a module doesn’t have any access to file descriptors. But if code in one module has a file descriptor, it can choose to pass that file descriptor to functions it calls in other modules. Or it can create more limited versions of the file descriptor to pass to the other functions.&lt;/p&gt;
&lt;p&gt;So the runtime passes in the file descriptors that an app can use to the top level code, and then file descriptors get propagated through the rest of the system on an as-needed basis.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/03/05-07-file-perms-1.png&quot;&gt;&lt;img class=&quot;alignnone size-large wp-image-33327&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/03/05-07-file-perms-1-500x423.png&quot; alt=&quot;The runtime passing a directory to the app, and then then app passing a file to a function&quot; width=&quot;500&quot; height=&quot;423&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/03/05-07-file-perms-1-500x423.png 500w, https://hacks.mozilla.org/files/2019/03/05-07-file-perms-1-250x211.png 250w, https://hacks.mozilla.org/files/2019/03/05-07-file-perms-1-768x649.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This gets WebAssembly closer to the principle of least privilege, where a module can only access the exact resources it needs to do its job.&lt;/p&gt;
&lt;p&gt;These concepts come from capability-oriented systems, like CloudABI and Capsicum. One problem with capability-oriented systems is that it is often hard to port code to them. But we think this problem can be solved.&lt;/p&gt;
&lt;p&gt;If code already uses &lt;code&gt;openat&lt;/code&gt; with relative file paths, compiling the code will just work.&lt;/p&gt;
&lt;p&gt;If code uses &lt;code&gt;open&lt;/code&gt; and migrating to the &lt;code&gt;openat&lt;/code&gt; style is too much up-front investment, WASI can provide an incremental solution. With &lt;a href=&quot;https://github.com/musec/libpreopen&quot;&gt;libpreopen&lt;/a&gt;, you can create a list of file paths that the application legitimately needs access to. Then you can use &lt;code&gt;open&lt;/code&gt;, but only with those paths.&lt;/p&gt;
&lt;h3&gt;What’s next?&lt;/h3&gt;
&lt;p&gt;We think wasi-core is a good start. It preserves WebAssembly’s portability and security, providing a solid foundation for an ecosystem.&lt;/p&gt;
&lt;p&gt;But there are still questions we’ll need to address after wasi-core is fully standardized. Those questions include:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;asynchronous I/O&lt;/li&gt;
&lt;li&gt;file watching&lt;/li&gt;
&lt;li&gt;file locking&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;This is just the beginning, so if you have ideas for how to solve these problems, &lt;a href=&quot;https://wasi.dev/&quot;&gt;join us&lt;/a&gt;!&lt;/p&gt;
&lt;section class=&quot;about&quot; readability=&quot;2.8289473684211&quot;&gt;
&lt;p&gt;Lin works in Advanced Development at Mozilla, with a focus on Rust and WebAssembly.&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;url&quot; href=&quot;https://hacks.mozilla.org/author/lclarkmozilla-com/&quot;&gt;More articles by Lin Clark…&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;</description>
<pubDate>Wed, 27 Mar 2019 15:12:33 +0000</pubDate>
<dc:creator>bnjbvr</dc:creator>
<og:url>https://hacks.mozilla.org/2019/03/standardizing-wasi-a-webassembly-system-interface</og:url>
<og:title>Standardizing WASI: A system interface to run WebAssembly outside the web – Mozilla Hacks - the Web developer blog</og:title>
<og:description>WebAssembly is an assembly language for a conceptual machine, not a physical one. This is why it can be run across a variety of different machine architectures. WebAssembly needs a ...</og:description>
<og:image>https://hacks.mozilla.org/files/2019/03/featured_image.png</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://hacks.mozilla.org/2019/03/standardizing-wasi-a-webassembly-system-interface/</dc:identifier>
</item>
<item>
<title>Storing UTC is not a silver bullet</title>
<link>https://codeblog.jonskeet.uk/2019/03/27/storing-utc-is-not-a-silver-bullet/</link>
<guid isPermaLink="true" >https://codeblog.jonskeet.uk/2019/03/27/storing-utc-is-not-a-silver-bullet/</guid>
<description>&lt;p&gt;Note: this is a pretty long post. If you’re not interested in the details, the conclusion at the bottom is intended to be read in a standalone fashion. There’s also a &lt;a href=&quot;http://www.creativedeletion.com/2015/03/19/persisting_future_datetimes.html&quot;&gt;related blog post by Lau Taarnskov&lt;/a&gt; – if you find this one difficult to read for whatever reason, maybe give that a try.&lt;/p&gt;
&lt;p&gt;When I read Stack Overflow questions involving time zones, there’s almost always someone giving the advice to only ever store UTC. Convert to UTC as soon as you can, and convert back to a target time zone as late as you can, for display purposes, and you’ll never have a time zone issue again, they say.&lt;/p&gt;
&lt;p&gt;This blog post is intended to provide a counterpoint to that advice. I’m certainly not saying storing UTC is &lt;em&gt;always&lt;/em&gt; the wrong thing to do, but it’s not always the right thing to do either.&lt;/p&gt;
&lt;p&gt;Note on simplifications: this blog post does &lt;em&gt;not&lt;/em&gt; go into supporting non-Gregorian calendar systems, or leap seconds. Hopefully developers writing applications which need to support either of those are already aware of their requirements.&lt;/p&gt;

&lt;p&gt;The timing of this blog post is due to recent European Parliament proceedings that look like they will probably end the clocks changing twice a year into “summer time” or “winter time” within EU member states. The precise details are yet to be finalized and are unimportant to the bigger point, but for the purpose of this blog post I’ll assume that each member state has to decide whether they will “spring forward” one last time on March 28th 2021, then staying in permanent “summer time”, or “fall back” one last time on October 31st 2021, then staying in permanent “winter time”. So from November 1st 2021 onwards, the UTC offset of each country will be fixed – but there &lt;em&gt;may&lt;/em&gt; be countries which currently always have the same offset as each other, and will have different offsets from some point in 2021. (For example, France could use winter time and Germany could use summer time.)&lt;/p&gt;
&lt;p&gt;The larger point is that time zone rules change, and that applications should &lt;em&gt;expect&lt;/em&gt; that they will change. This isn’t a corner case, it’s the normal way things work. There are usually multiple sets of rule changes (as &lt;a href=&quot;https://www.iana.org/time-zones&quot;&gt;released by IANA&lt;/a&gt;) each year. At least in the European changes, we’re likely to have a long notice period. That often isn’t the case – sometimes we don’t find out about rule changes until a few days before they happen.&lt;/p&gt;

&lt;p&gt;For the sake of making everything concrete, I’m going to imagine that we’re writing an application to help conference organizers. A conference organizer can create a conference within the application, specifying when and where it’s happening, and (amongst other things) the application will display a countdown timer of “the number of hours left before the start of the conference”. Obviously a real application would have a &lt;em&gt;lot&lt;/em&gt; more going on than this, but that’s enough to examine the implementation options available.&lt;/p&gt;
&lt;p&gt;To get even more concrete, we’ll assume that a conference organizer has registered a conference called “KindConf” and has said that it will start at 9am in Amsterdam, on July 10th 2022. They perform this registration on March 27th 2019, when the most recently published IANA time zone database is 2019a, which predicts that the offset observed in Amsterdam on July 10th 2022 will be UTC+2.&lt;/p&gt;
&lt;p&gt;For the sake of this example, we’ll assume that the Netherlands decides to fall back on October 31st 2021 for one final time, leaving them on a permanent offset of UTC+1. Just to complete the picture, we’ll assume that this decision is taken on February 1st 2020, and that IANA publishes the changes on March 14th 2020, as part of release 2020c.&lt;/p&gt;
&lt;p&gt;So, what can the application developer do? In all the options below, I have &lt;em&gt;not&lt;/em&gt; gone into details of the database support for different date/time types. This is important, of course, but probably deserves a separate blog post in its own right, on a per-database basis. I’ll just assume we can represent the information we want to represent, somehow.&lt;/p&gt;
&lt;h2&gt;Option 1: convert to UTC and just use that forever&lt;/h2&gt;
&lt;p&gt;The schema for the &lt;code&gt;Conferences&lt;/code&gt; table in the database might look like this:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;ID: auto-incremented integer&lt;/li&gt;
&lt;li&gt;Name: string&lt;/li&gt;
&lt;li&gt;Start: date/time in UTC&lt;/li&gt;
&lt;li&gt;Address: string&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The entry for KindConf would look like this:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;ID: 1&lt;/li&gt;
&lt;li&gt;Name: KindConf&lt;/li&gt;
&lt;li&gt;Start: 2022-07-10T07:00:00Z&lt;/li&gt;
&lt;li&gt;Address: Europaplein 24, 1078 GZ Amsterdam, Netherlands&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;That entry is then preserved forever, without change. So what happens to our countdown timer?&lt;/p&gt;
&lt;h3&gt;Result&lt;/h3&gt;
&lt;p&gt;The good news is that anyone observing the timer will see it smoothly count down towards 0, with no jumps. The bad news is that when it reaches 0, the conference won’t actually start – there’ll be another hour left. This is not good.&lt;/p&gt;
&lt;h2&gt;Option 2: convert to UTC immediately, but reconvert after rule changes&lt;/h2&gt;
&lt;p&gt;The schema for the &lt;code&gt;Conferences&lt;/code&gt; table would preserve the time zone ID. (I’m using the IANA ID for simplicity, but it &lt;em&gt;could&lt;/em&gt; be the Windows system time zone ID, if absolutely necessary.) Alternatively, the time zone ID could be derived each time it’s required – more on that later.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;ID: auto-incremented integer&lt;/li&gt;
&lt;li&gt;Name: string&lt;/li&gt;
&lt;li&gt;Start: date/time in UTC&lt;/li&gt;
&lt;li&gt;Address: string&lt;/li&gt;
&lt;li&gt;Time zone ID: string&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The initial entry for KindConf would look like this:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;ID: 1&lt;/li&gt;
&lt;li&gt;Name: KindConf&lt;/li&gt;
&lt;li&gt;Start: 2022-07-10T07:00:00Z&lt;/li&gt;
&lt;li&gt;Address: Europaplein 24, 1078 GZ Amsterdam, Netherlands&lt;/li&gt;
&lt;li&gt;TimeZoneId: Europe/Amsterdam&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;On March 14th 2020, when the new time zone database is released, that entry could be changed to make the start time accurate again:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;ID: 1&lt;/li&gt;
&lt;li&gt;Name: KindConf&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Start: 2022-07-10T08:00:00Z&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Address: Europaplein 24, 1078 GZ Amsterdam, Netherlands&lt;/li&gt;
&lt;li&gt;TimeZoneId: Europe/Amsterdam&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;But what does that “change” procedure look like? We need to convert the UTC value back to the local time, and then convert back to UTC using different rules. So which rules were in force when that entry was created? It looks like we actually need an extra field in the schema somewhere: TimeZoneRulesVersion. This &lt;em&gt;could&lt;/em&gt; potentially be a database-wide value, although that’s only going to be reasonable if you can update all entries and that value atomically. Allowing a value per entry (even if you usually expect all entries to be updated at roughly the same time) is likely to make things simpler.&lt;/p&gt;
&lt;p&gt;So our original entry was actually:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;ID: 1&lt;/li&gt;
&lt;li&gt;Name: KindConf&lt;/li&gt;
&lt;li&gt;Start: 2022-07-10T07:00:00Z&lt;/li&gt;
&lt;li&gt;Address: Europaplein 24, 1078 GZ Amsterdam, Netherlands&lt;/li&gt;
&lt;li&gt;TimeZoneId: Europe/Amsterdam&lt;/li&gt;
&lt;li&gt;TimeZoneRules: 2019a&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;And the modified entry is:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;ID: 1&lt;/li&gt;
&lt;li&gt;Name: KindConf&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Start: 2022-07-10T08:00:00Z&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Address: Europaplein 24, 1078 GZ Amsterdam, Netherlands&lt;/li&gt;
&lt;li&gt;TimeZoneId: Europe/Amsterdam&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TimeZoneRules: 2020c&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Of course, the entry could have been updated many times over the course of time, for 2019b, 2019c, …, 2020a, 2020b. Or maybe we only actually update the entry if the start time changes. Either way works.&lt;/p&gt;
&lt;h3&gt;Result&lt;/h3&gt;
&lt;p&gt;Now, anyone refreshing the countdown timer for the event will see the counter increase by an hour when the entry is updated. That may look a little odd – but it means that when the countdown timer reaches 0, the conference is ready to start. I’m assuming this is the desired behaviour.&lt;/p&gt;
&lt;h3&gt;Implementation&lt;/h3&gt;
&lt;p&gt;Let’s look at roughly what would be needed to perform this update in C# code. I’ll assume the use of Noda Time to start with, but then we’ll consider what happens if you’re not using Noda Time.&lt;/p&gt;
&lt;pre class=&quot;brush: csharp; title: ; notranslate&quot; title=&quot;&quot;&gt;
public class Conference
{
    public int Id { get; set; }
    public string Name { get; set; }
    public string Address { get; set; }
    public Instant Start { get; set; }
    public string TimeZoneId { get; set; }
    public string TimeZoneRules { get; set; }
}

// In other code... some parameters might be fields in the class.
public void UpdateStartTime(
    Conference conference,
    Dictionary&amp;lt;string, IDateTimeZoneProvider&amp;gt; timeZoneProvidersByVersion,
    string latestRules)
{
    // Map the start instant into the time zone using the old rules
    IDateTimeZoneProvider oldProvider = timeZoneProvidersByVersion[conference.TimeZoneRules];
    DateTimeZone oldZone = oldProvider[conference.TimeZoneId];
    ZonedDateTime oldZonedStart = conference.Start.InZone(oldZone);   

    IDateTimeZoneProvider newProvider = timeZoneProvidersByVersion[latestRules];
    DateTimeZone newZone = newProvider[conference.TimeZoneId];
    // Preserve the local time, but with the new time zone rules
    ZonedDateTime newZonedStart = oldZonedStart.LocalDateTime.InZoneLeniently(newZone);

    // Update the conference entry with the new information
    conference.Start = newZonedStart.ToInstant();
    conference.TimeZoneRules = latestRules;
}
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;InZoneLeniently&lt;/code&gt; call is going to be a common issue – we’ll look at that later (“Ambiguous and skipped times”).&lt;/p&gt;
&lt;p&gt;This code would work, and Noda Time would make it reasonably straightforward to build that dictionary of time zone providers, as we publish all the “NZD files” we’ve ever created from 2013 onwards on the project web site. If the code is being updated with the latest stable version of the NodaTime NuGet package, the &lt;code&gt;latestRules&lt;/code&gt; parameter wouldn’t be required – &lt;code&gt;DateTimeZoneProviders.Tzdb&lt;/code&gt; could be used instead. (And &lt;code&gt;IDateTimeZoneProvider.VersionId&lt;/code&gt; could obtain the current version.)&lt;/p&gt;
&lt;p&gt;However, this approach has three important requirements:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The concept of “version of time zone rules” has to be available to you&lt;/li&gt;
&lt;li&gt;You have to be able to load a specific version of the time zone rules&lt;/li&gt;
&lt;li&gt;You have to be able to use &lt;em&gt;multiple&lt;/em&gt; versions of the time zone rules in the same application&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;If you’re using C# but relying on &lt;code&gt;TimeZoneInfo&lt;/code&gt; then… good luck with any of those three. (It’s no doubt feasible, but far from simple out of the box, and it may require an external service providing historical data.)&lt;/p&gt;
&lt;p&gt;I can’t easily comment on other platforms in any useful way, but I suspect that dealing with multiple versions of time zone data is not something that most developers come across.&lt;/p&gt;
&lt;h2&gt;Option 3: preserve local time, using UTC as derived data to be recomputed&lt;/h2&gt;
&lt;p&gt;Spoiler alert: this is my preferred option.&lt;/p&gt;
&lt;p&gt;In this approach, the information that the conference organizer supplied (“9am on July 10th 2022”) is preserved and never changed. There is additional information in the entry that &lt;em&gt;is&lt;/em&gt; changed when the time zone database is updated: the converted UTC instant. We &lt;em&gt;can&lt;/em&gt; also preserve the version of the time zone rules used for that computation, as a way of allowing the process of updating entries to be restarted after a failure without starting from scratch, but it’s not strictly required. (It’s also probably useful as diagnostic information, too.)&lt;/p&gt;
&lt;p&gt;The UTC instant is only stored &lt;em&gt;at all&lt;/em&gt; for convenience. Having a UTC representation makes it easier to provide total orderings of when things happen, and also to compute the time between “right now” and the given instant, for the countdown timer.&lt;/p&gt;
&lt;p&gt;So the schema would have:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;ID: auto-incremented integer&lt;/li&gt;
&lt;li&gt;Name: string&lt;/li&gt;
&lt;li&gt;Local start: date/time in the specified time zone&lt;/li&gt;
&lt;li&gt;Address: string&lt;/li&gt;
&lt;li&gt;Time zone ID: string&lt;/li&gt;
&lt;li&gt;UTC start: derived field for convenience&lt;/li&gt;
&lt;li&gt;Time zone rules version: for optimization purposes&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;So our original entry is:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;ID: 1&lt;/li&gt;
&lt;li&gt;Name: KindConf&lt;/li&gt;
&lt;li&gt;LocalStart: 2022-07-10T09:00:00&lt;/li&gt;
&lt;li&gt;Address: Europaplein 24, 1078 GZ Amsterdam, Netherlands&lt;/li&gt;
&lt;li&gt;TimeZoneId: Europe/Amsterdam&lt;/li&gt;
&lt;li&gt;UtcStart: 2022-07-10T07:00:00Z&lt;/li&gt;
&lt;li&gt;TimeZoneRules: 2019a&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;On March 14th 2020, when the time zone database 2020c is released, this is modified to:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;ID: 1&lt;/li&gt;
&lt;li&gt;Name: KindConf&lt;/li&gt;
&lt;li&gt;LocalStart: 2022-07-10T09:00:00&lt;/li&gt;
&lt;li&gt;Address: Europaplein 24, 1078 GZ Amsterdam, Netherlands&lt;/li&gt;
&lt;li&gt;TimeZoneId: Europe/Amsterdam&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UtcStart: 2022-07-10T08:00:00Z&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TimeZoneRules: 2020c&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Result&lt;/h2&gt;
&lt;p&gt;This is the same as option 2: after the update, there’s a jump of an hour, but when it reaches 0, the conference starts.&lt;/p&gt;
&lt;h2&gt;Implementation&lt;/h2&gt;
&lt;p&gt;This time, we don’t need to convert our old UTC value back to a local value: the “old” time zone rules version and “old” UTC start time are irrelevant. That simplifies matter significantly:&lt;/p&gt;
&lt;pre class=&quot;brush: csharp; title: ; notranslate&quot; title=&quot;&quot;&gt;
public class Conference
{
    public int Id { get; set; }
    public string Name { get; set; }
    public string Address { get; set; }
    public LocalDateTime LocalStart { get; set; }
    public string TimeZoneId { get; set; }
    public Instant UtcStart { get; set; }
    public string TimeZoneRules { get; set; }
}

// In other code... some parameters might be fields in the class.
public void UpdateUtcStart(
    Conference conference,
    IDateTimeZoneProvider latestZoneProvider)
{
    DateTimeZone newZone = latestZoneProvider[conference.TimeZoneId];
    // Preserve the local time, but with the new time zone rules
    ZonedDateTime newZonedStart = conference.LocalStart.InZoneLeniently(newZone);

    // Update the conference entry with the new information
    conference.UtcStart = newZonedStart.ToInstant();
    conference.TimeZoneRules = latestZoneProvider.VersionId;
}
&lt;/pre&gt;
&lt;p&gt;As the time zone rules version is now optional, this code &lt;em&gt;could&lt;/em&gt; be ported to use &lt;code&gt;TimeZoneInfo&lt;/code&gt; instead. Obviously from my biased perspective the code wouldn’t be as pleasant, but it would be at least reasonable. The same is probably true on other platforms.&lt;/p&gt;
&lt;p&gt;So I prefer option 3, but is it really so different from option 2? We’re still storing the UTC value, right? That’s true, but I believe the difference is important because the UTC value is an optimization, effectively.&lt;/p&gt;

&lt;p&gt;For me, the key difference between the options is that in option 3, we store and never change &lt;em&gt;what the conference organizer entered&lt;/em&gt;. The organizer told us that the event would start at the given address in Amsterdam, at 9am on July 10th 2022. That’s what we stored, and that information never needs to change (unless the organizer wants to change it, of course). The UTC value is derived from that “golden” information, but can be re-derived if the context changes – such as when time zone rules change.&lt;/p&gt;
&lt;p&gt;In option 2, we don’t store the original information – we &lt;em&gt;only&lt;/em&gt; store derived information (the UTC instant). We need to store information to tell us all the context about &lt;em&gt;how&lt;/em&gt; we derived it (the old time zone rules version) and when updating the entry, we need to get back to the original information before we can re-derive the UTC instant using the new rules.&lt;/p&gt;
&lt;p&gt;If you’re going to need the original information anyway, why not just store that? The implementation ends up being simpler, and it means it doesn’t matter whether or not we even &lt;em&gt;have&lt;/em&gt; the old time zone rules.&lt;/p&gt;
&lt;h2&gt;Representation vs information&lt;/h2&gt;
&lt;p&gt;It’s important to note that I’m only talking about preserving the core information that the organizer entered. For the purposes of this example at least, we &lt;em&gt;don’t&lt;/em&gt; need to care about the representation they happened to use. Did they enter it as “July 10 2022 09:00” and we then parsed that? Did they use a calendar control that provided us with “2022-07-10T09:00”? I don’t think that’s important, as it’s not part of the core information.&lt;/p&gt;
&lt;p&gt;It’s often a useful exercise to consider what aspects of the data you’re using are “core” and which are incidental. If you’re receiving data from another system as text for example, you probably don’t want to store the complete XML or JSON, as that choice between XML and JSON isn’t relevant – the same data could be represented by an XML file and a JSON file, and it’s unlikely that anything later will need to know or care.&lt;/p&gt;

&lt;p&gt;I’ve omitted a fourth option which could be useful here, which is a mixture of 2 and 3. If you store a “date/time with UTC offset” then you’ve effectively got both the local start time and the UTC instant in a single field. To show the values again, you’d start off with:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;ID: 1&lt;/li&gt;
&lt;li&gt;Name: KindConf&lt;/li&gt;
&lt;li&gt;Start: 2022-07-10T09:00:00+02:00&lt;/li&gt;
&lt;li&gt;Address: Europaplein 24, 1078 GZ Amsterdam, Netherlands&lt;/li&gt;
&lt;li&gt;TimeZoneId: Europe/Amsterdam&lt;/li&gt;
&lt;li&gt;TimeZoneRules: 2019a&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;On March 14th 2020, when the time zone database 2020c is released, this is modified to:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;ID: 1&lt;/li&gt;
&lt;li&gt;Name: KindConf&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Start: 2022-07-10T09:00:00+01:00&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Address: Europaplein 24, 1078 GZ Amsterdam, Netherlands&lt;/li&gt;
&lt;li&gt;TimeZoneId: Europe/Amsterdam&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TimeZoneRules: 2020c&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;In systems that support “date/time with UTC offset” well in both the database and the languages using it, this &lt;em&gt;might&lt;/em&gt; be an attractive solution. It’s important to note that the time zone ID &lt;em&gt;is&lt;/em&gt; still required (unless you derive it from the address whenever you need it) – there’s a &lt;em&gt;huge&lt;/em&gt; difference between knowing the time zone that’s applied, and knowing the UTC offset in one specific situation.&lt;/p&gt;
&lt;p&gt;Personally I’m not sure I’m a big fan of this option, as it combines original and derived data in a single field – the local part is the original data, and the offset is derived. I like the separation between original and derived data in option 3.&lt;/p&gt;
&lt;p&gt;With all those options presented, let’s look at a few of the corner cases I’ve mentioned in the course of the post.&lt;/p&gt;

&lt;p&gt;In both of the implementations I’ve shown, I’ve used the &lt;code&gt;InZoneLeniently&lt;/code&gt; method from Noda Time. While the mapping from UTC instant to local time is always completely unambiguous for a single time zone, the reverse mapping (from local time to UTC instant) is &lt;em&gt;not&lt;/em&gt; always unambiguous.&lt;/p&gt;
&lt;p&gt;As an example, let’s take the Europe/London time zone. On March 30th 2019, at 1am local time, we will “spring forward” to 2am, changing offset from UTC+0 to UTC+1. On October 27th 2019, at 2am local time, we will “fall back” to 1am, changing offset from UTC+1 to UTC+0. That means that 2019-03-30T01:30 does not happen at all in the Europe/London time zone, and 2019-10-27T01:30 occurs &lt;em&gt;twice&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Now it’s reasonable to validate this when a conference organizer specifies the starting time of a conference, either prohibiting it if the given time is skipped, or asking for more information if the given time is ambiguous. I should point out that this is &lt;em&gt;highly&lt;/em&gt; unlikely for a conference, as transitions are generally done in the middle of the night – but other scenarios (e.g. when to schedule an automated backup) may well fall into this.&lt;/p&gt;
&lt;p&gt;That’s fine at the point of the first registration, but it’s &lt;em&gt;also&lt;/em&gt; possible that a previously-unambiguous local time could &lt;em&gt;become&lt;/em&gt; ambiguous under new time zone rules. &lt;code&gt;InZoneLeniently&lt;/code&gt; handles that in a way documented in the &lt;a href=&quot;https://nodatime.org/unstable/api/NodaTime.TimeZones.Resolvers.html#NodaTime_TimeZones_Resolvers_LenientResolver&quot;&gt;&lt;code&gt;Resolvers.LenientResolver&lt;/code&gt;&lt;/a&gt;. That may well &lt;em&gt;not&lt;/em&gt; be the appropriate choice for any given application, and developers should consider it carefully, and write tests.&lt;/p&gt;

&lt;p&gt;The example I’ve given so far is for a single event. Recurrent events – such as weekly meetings – end up being trickier still, as a change to time zone rules can change the offsets for &lt;em&gt;some&lt;/em&gt; instances but not others. Likewise meetings may well be attended by people from more than a single time zone – so it’s vital that the recurrence would have a single coordinating time zone, but offsets may need to be recomputed for &lt;em&gt;every&lt;/em&gt; time zone involved, and for &lt;em&gt;every&lt;/em&gt; occurrence. Application developers have to think about how this can be achieved within performance requirements.&lt;/p&gt;

&lt;p&gt;So far we’ve only considered time zone &lt;em&gt;rules&lt;/em&gt; changing. In options 2-4, we stored a time zone ID within the entry. That assumes that the time zone associated with the event will not change over time. That assumption may not be valid.&lt;/p&gt;
&lt;p&gt;As far as I’m aware, time zone rules change more often than changes to which time zone any given location is in – but it’s entirely &lt;em&gt;possible&lt;/em&gt; for things to change over time. Suppose the conference wasn’t in Amsterdam itself, but Rotterdam. &lt;em&gt;Currently&lt;/em&gt; Rotterdam uses the Europe/Amsterdam time zone, but what if the Netherlands splits into two countries between 2019 and 2022? It’s feasible that by the time the conference occurs, there could be a Europe/Rotterdam time zone, or something equivalent.&lt;/p&gt;
&lt;p&gt;To that end, a truly diligent application developer might treat the time zone ID as derived data based on the address of the conference. As part of checking each entry when the time zone database is updated, they might want to find the time zone ID of the address of the conference, in case that’s changed. There are multiple services that provide this information, although it may need to be a multi-step process, first converting the address into a latitude/longitude position, and then finding the time zone for that latitude/longitude.&lt;/p&gt;

&lt;p&gt;This post has all been about future date/time values. In Twitter threads discussing time zone rule changes, there’s been a general assertion that it’s safe to only store the UTC instant related to an event in the past. I would &lt;em&gt;broadly&lt;/em&gt; agree with that, but with one big caveat: as I mentioned earlier, sometimes governments adopt time zone rule changes with almost no notice at all. Additionally, there can be a significant delay between the changes being published and them being available within applications. (That delay can vary massively based on your platform.)&lt;/p&gt;
&lt;p&gt;This means that while a conversion to UTC for a value more than (say) a year ago will &lt;em&gt;probably&lt;/em&gt; stay valid, if you’re recording a date and time of “yesterday”, it’s quite possible that you’re using incorrect rules without knowing it. (Even very old rules can change, but that’s rarer in my experience.)&lt;/p&gt;
&lt;p&gt;Do you need to account for this? That depends on your application, like so many other things. I’d at least consider the principle described above – and unless it’s much harder for you to maintain the real source information for some reason, I’d default to doing that.&lt;/p&gt;

&lt;p&gt;The general advice of “just convert all local date/time data to UTC and store that” is overly broad in my view. For future and near-past events, it doesn’t take into account that time zone rules change, making the initial conversion potentially inaccurate. Part of the point of writing this blog post is to raise awareness, so that even if people &lt;em&gt;do&lt;/em&gt; still recommend storing UTC, they can add appropriate caveats rather than treating it as a universal silver bullet.&lt;/p&gt;
&lt;p&gt;I should explicitly bring up timestamps at this point. Machine-generated timestamps are &lt;em&gt;naturally&lt;/em&gt; instants in time, recording “the instant at which something occurred” in an unambiguous way. Storing those in UTC is entirely reasonable – &lt;em&gt;potentially&lt;/em&gt; with an offset or time zone if the location at which the timestamp was generated is relevant. Note that in this case the source of the data isn’t “a local time to be converted”.&lt;/p&gt;
&lt;p&gt;That’s the bigger point, that goes beyond dates and times and time zones: choosing what information to store, and how. Any time you discard information, that should be a conscious choice. Are you happy discarding the input format that was used to enter a date? Probably – but it’s still a decision to make. Defaulting to “convert to UTC” is a default to discarding information which in &lt;em&gt;some&lt;/em&gt; cases is valid, but not all. Make it a conscious choice, and ensure you store all the information you think may be needed later. You might also want to consider whether and how you separate “source” information from “derived” information – this is particularly relevant when it comes to archiving, when you &lt;em&gt;may&lt;/em&gt; want to discard all the derived data to save space. That’s much easier to do if you’re already very aware of which data &lt;em&gt;is&lt;/em&gt; derived.&lt;/p&gt;
&lt;p&gt;My experience is that developers either don’t think about date/time details nearly enough when coding, or are aware of some of the pitfalls but decide that means it’s just too hard to contemplate. Hopefully this worked example of real life complexity shows that it &lt;em&gt;can&lt;/em&gt; be done: it takes a certain amount of conscious thought, but it’s not rocket science.&lt;/p&gt;
&lt;div id=&quot;jp-post-flair&quot; class=&quot;sharedaddy sd-like-enabled sd-sharing-enabled&quot;&gt;
&lt;div class=&quot;sharedaddy sd-sharing-enabled&quot;&gt;
&lt;div class=&quot;robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing&quot;&gt;
&lt;h3 class=&quot;sd-title&quot;&gt;Share this:&lt;/h3&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sharedaddy sd-block sd-like jetpack-likes-widget-wrapper jetpack-likes-widget-unloaded&quot; id=&quot;like-post-wrapper-71775067-1701-5c9c7f1a6c64e&quot; data-src=&quot;//widgets.wp.com/likes/index.html?ver=20190321#blog_id=71775067&amp;amp;post_id=1701&amp;amp;origin=jonskeetcodingblog.wordpress.com&amp;amp;obj_id=71775067-1701-5c9c7f1a6c64e&amp;amp;domain=codeblog.jonskeet.uk&quot; data-name=&quot;like-post-frame-71775067-1701-5c9c7f1a6c64e&quot;&gt;
&lt;h3 class=&quot;sd-title&quot;&gt;Like this:&lt;/h3&gt;
&lt;div class=&quot;likes-widget-placeholder post-likes-widget-placeholder&quot;&gt;&lt;span class=&quot;button&quot;&gt;&lt;span&gt;Like&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;loading&quot;&gt;Loading...&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
</description>
<pubDate>Wed, 27 Mar 2019 13:34:10 +0000</pubDate>
<dc:creator>AndrewDucker</dc:creator>
<og:type>article</og:type>
<og:title>Storing UTC is not a silver bullet</og:title>
<og:url>https://codeblog.jonskeet.uk/2019/03/27/storing-utc-is-not-a-silver-bullet/</og:url>
<og:description>Note: this is a pretty long post. If you’re not interested in the details, the conclusion at the bottom is intended to be read in a standalone fashion. There’s also a related blog post …</og:description>
<og:image>https://s0.wp.com/i/blank.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://codeblog.jonskeet.uk/2019/03/27/storing-utc-is-not-a-silver-bullet/</dc:identifier>
</item>
<item>
<title>Miri: Interpreter for Rust&amp;#039;s mid-level intermediate representation</title>
<link>https://github.com/rust-lang/miri</link>
<guid isPermaLink="true" >https://github.com/rust-lang/miri</guid>
<description>&lt;div class=&quot;Box-body&quot;&gt;
&lt;article class=&quot;markdown-body entry-content p-5&quot; itemprop=&quot;text&quot;&gt;
&lt;p&gt;An experimental interpreter for &lt;a href=&quot;https://www.rust-lang.org/&quot; rel=&quot;nofollow&quot;&gt;Rust&lt;/a&gt;'s &lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/1211-mir.md&quot;&gt;mid-level intermediate representation&lt;/a&gt; (MIR). It can run binaries and test suites of cargo projects and detect certain classes of undefined behavior, for example:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Out-of-bounds memory accesses and use-after-free&lt;/li&gt;
&lt;li&gt;Invalid use of uninitialized data&lt;/li&gt;
&lt;li&gt;Violation of intrinsic preconditions (an &lt;a href=&quot;https://doc.rust-lang.org/stable/std/hint/fn.unreachable_unchecked.html&quot; rel=&quot;nofollow&quot;&gt;&lt;code&gt;unreachable_unchecked&lt;/code&gt;&lt;/a&gt; being reached, calling &lt;a href=&quot;https://doc.rust-lang.org/stable/std/ptr/fn.copy_nonoverlapping.html&quot; rel=&quot;nofollow&quot;&gt;&lt;code&gt;copy_nonoverlapping&lt;/code&gt;&lt;/a&gt; with overlapping ranges, ...)&lt;/li&gt;
&lt;li&gt;Not sufficiently aligned memory accesses and references&lt;/li&gt;
&lt;li&gt;Violation of basic type invariants (a &lt;code&gt;bool&lt;/code&gt; that is not 0 or 1, for example, or an invalid enum discriminant)&lt;/li&gt;
&lt;li&gt;WIP: Violations of the rules governing aliasing for reference types&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Miri has already discovered some &lt;a href=&quot;https://github.com/rust-lang/miri#bugs-found-by-miri&quot;&gt;real-world bugs&lt;/a&gt;. If you found a bug with Miri, we'd appreciate if you tell us and we'll add it to the list!&lt;/p&gt;
&lt;p&gt;Be aware that Miri will not catch all possible errors in your program, and cannot run all programs:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;There are still plenty of open questions around the basic invariants for some types and when these invariants even have to hold, so if you program runs fine in Miri right now that is by no means a guarantee that it is UB-free when these questions get answered.&lt;/li&gt;
&lt;li&gt;If the program relies on unspecified details of how data is laid out, it will still run fine in Miri -- but might break (including causing UB) on different compiler versions or different platforms.&lt;/li&gt;
&lt;li&gt;Miri is fully deterministic and does not actually pick a base address in virtual memory for the program's allocations. If program behavior depends on the base address of an allocation, Miri will stop execution (with a few exceptions to make some common pointer comparisons work).&lt;/li&gt;
&lt;li&gt;Miri runs the program as a platform-independent interpreter, so the program has no access to any platform-specific APIs or FFI. A few APIs have been implemented (such as printing to stdout) but most have not: for example, Miri currently does not support concurrency, or networking, or file system access, or gathering entropy from the system.&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Running Miri on your own project (and its test suite)&lt;/h2&gt;
&lt;p&gt;Install Miri via &lt;code&gt;rustup&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
rustup component add miri
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you can run your project in Miri:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Run &lt;code&gt;cargo clean&lt;/code&gt; to eliminate any cached dependencies. Miri needs your dependencies to be compiled the right way, that would not happen if they have previously already been compiled.&lt;/li&gt;
&lt;li&gt;To run all tests in your project through Miri, use &lt;code&gt;cargo miri test&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If you have a binary project, you can run it through Miri using &lt;code&gt;cargo miri run&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;The first time you run Miri, it will perform some extra setup and install some dependencies. It will ask you for confirmation before installing anything. If you run Miri on CI, run &lt;code&gt;cargo miri setup&lt;/code&gt; to avoid getting interactive questions.&lt;/p&gt;
&lt;p&gt;You can pass arguments to Miri after the first &lt;code&gt;--&lt;/code&gt;, and pass arguments to the interpreted program or test suite after the second &lt;code&gt;--&lt;/code&gt;. For example, &lt;code&gt;cargo miri run -- -Zmiri-disable-validation&lt;/code&gt; runs the program without validation of basic type invariants and references. &lt;code&gt;cargo miri test -- -- -Zunstable-options --exclude-should-panic&lt;/code&gt; skips &lt;code&gt;#[should_panic]&lt;/code&gt; tests, which is a good idea because Miri does not support unwinding or catching panics.&lt;/p&gt;
&lt;p&gt;When running code via &lt;code&gt;cargo miri&lt;/code&gt;, the &lt;code&gt;miri&lt;/code&gt; config flag is set. You can use this to exclude test cases that will fail under Miri because they do things Miri does not support:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-rust&quot;&gt;
&lt;pre&gt;
#[cfg(not(miri))]
#[test]
&lt;span class=&quot;pl-k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;does_not_work_on_miri&lt;/span&gt;() {
    &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; x &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0u8&lt;/span&gt;;
    &lt;span class=&quot;pl-c1&quot;&gt;assert!&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;x &lt;span class=&quot;pl-k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; _ &lt;span class=&quot;pl-k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;usize&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Common Problems&lt;/h3&gt;
&lt;p&gt;When using the above instructions, you may encounter a number of confusing compiler errors.&lt;/p&gt;
&lt;h4&gt;&quot;found possibly newer version of crate &lt;code&gt;std&lt;/code&gt; which &lt;code&gt;&amp;lt;dependency&amp;gt;&lt;/code&gt; depends on&quot;&lt;/h4&gt;
&lt;p&gt;Your build directory may contain artifacts from an earlier build that have/have not been built for Miri. Run &lt;code&gt;cargo clean&lt;/code&gt; before switching from non-Miri to Miri builds and vice-versa.&lt;/p&gt;
&lt;h4&gt;&quot;found crate &lt;code&gt;std&lt;/code&gt; compiled by an incompatible version of rustc&quot;&lt;/h4&gt;
&lt;p&gt;You may be running &lt;code&gt;cargo miri&lt;/code&gt; with a different compiler version than the one used to build the custom libstd that Miri uses, and Miri failed to detect that. Try deleting &lt;code&gt;~/.cache/miri&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Development and Debugging&lt;/h2&gt;
&lt;p&gt;If you want to hack on miri yourself, great! Here are some resources you might find useful.&lt;/p&gt;
&lt;h3&gt;Using a nightly rustc&lt;/h3&gt;
&lt;p&gt;Miri heavily relies on internal rustc interfaces to execute MIR. Still, some things (like adding support for a new intrinsic) can be done by working just on the Miri side.&lt;/p&gt;
&lt;p&gt;To prepare, make sure you are using a nightly Rust compiler. The most convenient way is to install Miri using cargo, then you can easily run it on other projects:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
rustup component remove miri &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; avoid having Miri installed twice&lt;/span&gt;
cargo +nightly install --path &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;$DIR&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; --force &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; or the nightly in `rust-version`&lt;/span&gt;
cargo +nightly miri setup
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(We are giving &lt;code&gt;+nightly&lt;/code&gt; explicitly here all the time because it is important that all of these commands get executed with the same toolchain.)&lt;/p&gt;
&lt;p&gt;If you want to use a different libstd (not the one that comes with the nightly), you can do that by running&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
XARGO_RUST_SRC=&lt;span class=&quot;pl-k&quot;&gt;~&lt;/span&gt;/src/rust/rustc/src/ cargo +nightly miri setup
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Either way, you can now do &lt;code&gt;cargo +nightly miri run&lt;/code&gt; to run Miri with your local changes on whatever project you are debugging.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cargo miri setup&lt;/code&gt; should end in printing the directory where the libstd was built. For the next step to work, set that as your &lt;code&gt;MIRI_SYSROOT&lt;/code&gt; environment variable:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;export&lt;/span&gt; MIRI_SYSROOT=&lt;span class=&quot;pl-k&quot;&gt;~&lt;/span&gt;/.cache/miri/HOST &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; or whatever the previous command said&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Testing Miri&lt;/h3&gt;
&lt;p&gt;Instead of running an entire project using &lt;code&gt;cargo miri&lt;/code&gt;, you can also use the Miri &quot;driver&quot; directly to run just a single file. That can be easier during debugging.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
cargo run tests/run-pass/format.rs &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; or whatever test you like&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can also run the test suite with &lt;code&gt;cargo test --release&lt;/code&gt;. &lt;code&gt;cargo test --release FILTER&lt;/code&gt; only runs those tests that contain &lt;code&gt;FILTER&lt;/code&gt; in their filename (including the base directory, e.g. &lt;code&gt;cargo test --release fail&lt;/code&gt; will run all compile-fail tests). We recommend using &lt;code&gt;--release&lt;/code&gt; to make test running take less time.&lt;/p&gt;
&lt;p&gt;Now you are set up! You can write a failing test case, and tweak miri until it fails no more. You can get a trace of which MIR statements are being executed by setting the &lt;code&gt;MIRI_LOG&lt;/code&gt; environment variable. For example:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
MIRI_LOG=info cargo run tests/run-pass/vecs.rs
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Setting &lt;code&gt;MIRI_LOG&lt;/code&gt; like this will configure logging for miri itself as well as the &lt;code&gt;rustc::mir::interpret&lt;/code&gt; and &lt;code&gt;rustc_mir::interpret&lt;/code&gt; modules in rustc. You can also do more targeted configuration, e.g. to debug the stacked borrows implementation:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
MIRI_LOG=rustc_mir::interpret=info,miri::stacked_borrows cargo run tests/run-pass/vecs.rs
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In addition, you can set &lt;code&gt;MIRI_BACKTRACE=1&lt;/code&gt; to get a backtrace of where an evaluation error was originally created.&lt;/p&gt;
&lt;h3&gt;Using a locally built rustc&lt;/h3&gt;
&lt;p&gt;Since the heart of Miri (the main interpreter engine) lives in rustc, working on Miri will often require using a locally built rustc. The bug you want to fix may actually be on the rustc side, or you just need to get more detailed trace of the execution than what is possible with release builds -- in both cases, you should develop miri against a rustc you compiled yourself, with debug assertions (and hence tracing) enabled.&lt;/p&gt;
&lt;p&gt;The setup for a local rustc works as follows:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
git clone https://github.com/rust-lang/rust/ rustc
&lt;span class=&quot;pl-c1&quot;&gt;cd&lt;/span&gt; rustc
cp config.toml.example config.toml
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Now edit `config.toml` and set `debug-assertions = true` and `test-miri = true`.&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; The latter is important to build libstd with the right flags for miri.&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; This step can take 30 minutes and more.&lt;/span&gt;
./x.py build src/rustc
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; If you change something, you can get a faster rebuild by doing&lt;/span&gt;
./x.py --keep-stage 0 build src/rustc
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; You may have to change the architecture in the next command&lt;/span&gt;
rustup toolchain link custom build/x86_64-unknown-linux-gnu/stage2
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Now cd to your Miri directory, then configure rustup&lt;/span&gt;
rustup override &lt;span class=&quot;pl-c1&quot;&gt;set&lt;/span&gt; custom
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With this, you should now have a working development setup! See &lt;a href=&quot;https://github.com/rust-lang/miri#testing-miri&quot;&gt;&quot;Testing Miri&quot;&lt;/a&gt; above for how to proceed.&lt;/p&gt;
&lt;p&gt;Running &lt;code&gt;cargo miri&lt;/code&gt; in this setup is a bit more complicated, because the Miri binary you just created does not actually run without some enviroment variables. But you can contort cargo into calling &lt;code&gt;cargo miri&lt;/code&gt; the right way for you:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; in some other project's directory, to run `cargo miri test`:&lt;/span&gt;
MIRI_SYSROOT=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;$(&lt;/span&gt;rustc +custom --print sysroot&lt;span class=&quot;pl-pds&quot;&gt;)&lt;/span&gt;&lt;/span&gt; cargo +custom run --manifest-path /path/to/miri/Cargo.toml --bin cargo-miri --release -- miri &lt;span class=&quot;pl-c1&quot;&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Miri &lt;code&gt;-Z&lt;/code&gt; flags and environment variables&lt;/h3&gt;
&lt;p&gt;Several &lt;code&gt;-Z&lt;/code&gt; flags are relevant for Miri:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;-Zmir-opt-level&lt;/code&gt; controls how many MIR optimizations are performed. miri overrides the default to be &lt;code&gt;0&lt;/code&gt;; be advised that using any higher level can make miri miss bugs in your program because they got optimized away.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-Zalways-encode-mir&lt;/code&gt; makes rustc dump MIR even for completely monomorphic functions. This is needed so that miri can execute such functions, so miri sets this flag per default.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-Zmiri-disable-validation&lt;/code&gt; is a custom &lt;code&gt;-Z&lt;/code&gt; flag added by miri. It disables enforcing the validity invariant, which is enforced by default. This is mostly useful for debugging; it means miri will miss bugs in your program.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Moreover, Miri recognizes some environment variables:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;MIRI_SYSROOT&lt;/code&gt; (recognized by &lt;code&gt;miri&lt;/code&gt;, &lt;code&gt;cargo miri&lt;/code&gt; and the test suite) indicates the sysroot to use.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MIRI_TARGET&lt;/code&gt; (recognized by the test suite) indicates which target architecture to test against. &lt;code&gt;miri&lt;/code&gt; and &lt;code&gt;cargo miri&lt;/code&gt; accept the &lt;code&gt;--target&lt;/code&gt; flag for the same purpose.&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Contributing and getting help&lt;/h2&gt;
&lt;p&gt;Check out the issues on this GitHub repository for some ideas. There's lots that needs to be done that I haven't documented in the issues yet, however. For more ideas or help with running or hacking on Miri, you can open an issue here on GitHub or contact us (&lt;code&gt;oli-obk&lt;/code&gt; and &lt;code&gt;RalfJ&lt;/code&gt;) on the &lt;a href=&quot;https://rust-lang.zulipchat.com&quot; rel=&quot;nofollow&quot;&gt;Rust Zulip&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;History&lt;/h2&gt;
&lt;p&gt;This project began as part of an undergraduate research course in 2015 by @solson at the &lt;a href=&quot;https://www.usask.ca/&quot; rel=&quot;nofollow&quot;&gt;University of Saskatchewan&lt;/a&gt;. There are &lt;a href=&quot;https://solson.me/miri-slides.pdf&quot; rel=&quot;nofollow&quot;&gt;slides&lt;/a&gt; and a &lt;a href=&quot;https://solson.me/miri-report.pdf&quot; rel=&quot;nofollow&quot;&gt;report&lt;/a&gt; available from that project. In 2016, @oli-obk joined to prepare miri for eventually being used as const evaluator in the Rust compiler itself (basically, for &lt;code&gt;const&lt;/code&gt; and &lt;code&gt;static&lt;/code&gt; stuff), replacing the old evaluator that worked directly on the AST. In 2017, @RalfJung did an internship with Mozilla and began developing miri towards a tool for detecting undefined behavior, and also using miri as a way to explore the consequences of various possible definitions for undefined behavior in Rust. @oli-obk's move of the miri engine into the compiler finally came to completion in early 2018. Meanwhile, later that year, @RalfJung did a second internship, developing miri further with support for checking basic type invariants and verifying that references are used according to their aliasing restrictions.&lt;/p&gt;
&lt;h2&gt;Bugs found by Miri&lt;/h2&gt;
&lt;p&gt;Miri has already found a number of bugs in the Rust standard library, which we collect here.&lt;/p&gt;
&lt;h2&gt;License&lt;/h2&gt;
&lt;p&gt;Licensed under either of&lt;/p&gt;
&lt;h3&gt;Contribution&lt;/h3&gt;
&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you shall be dual licensed as above, without any additional terms or conditions.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;
</description>
<pubDate>Wed, 27 Mar 2019 13:18:56 +0000</pubDate>
<dc:creator>ingve</dc:creator>
<og:image>https://avatars1.githubusercontent.com/u/5430905?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>rust-lang/miri</og:title>
<og:url>https://github.com/rust-lang/miri</og:url>
<og:description>An interpreter for Rust's mid-level intermediate representation - rust-lang/miri</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/rust-lang/miri</dc:identifier>
</item>
<item>
<title>If You Can’t Afford the Rent, It’s My Problem, Too</title>
<link>https://www.bloomberg.com/opinion/articles/2019-03-26/if-you-can-t-afford-the-rent-it-s-my-problem-too</link>
<guid isPermaLink="true" >https://www.bloomberg.com/opinion/articles/2019-03-26/if-you-can-t-afford-the-rent-it-s-my-problem-too</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://www.bloomberg.com/opinion/articles/2019-03-26/if-you-can-t-afford-the-rent-it-s-my-problem-too&quot;&gt;https://www.bloomberg.com/opinion/articles/2019-03-26/if-you-can-t-afford-the-rent-it-s-my-problem-too&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=19500371&quot;&gt;https://news.ycombinator.com/item?id=19500371&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 263&lt;/p&gt;
&lt;p&gt;# Comments: 364&lt;/p&gt;
</description>
<pubDate>Wed, 27 Mar 2019 12:59:38 +0000</pubDate>
<dc:creator>jseliger</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.bloomberg.com/tosv2.html?vid=&amp;uuid=b430f190-512f-11e9-a8c5-3963c3664b03&amp;url=L29waW5pb24vYXJ0aWNsZXMvMjAxOS0wMy0yNi9pZi15b3UtY2FuLXQtYWZmb3JkLXRoZS1yZW50LWl0LXMtbXktcHJvYmxlbS10b28=</dc:identifier>
</item>
</channel>
</rss>