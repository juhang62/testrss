<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>A bird feeder that accepts bottle caps for food</title>
<link>https://www.boredpanda.com/magpies-recycling-machine-bottle-caps/</link>
<guid isPermaLink="true" >https://www.boredpanda.com/magpies-recycling-machine-bottle-caps/</guid>
<description>&lt;p&gt;It’s mind-blowing to see animals learn meaningful tricks. Sure, a dog who can bring you a beer from the fridge is awesome too, but in today’s world, you gotta start thinking bigger than that.&lt;/p&gt;

&lt;p&gt;Hans Forsberg works with robotics on industrial applications for artificial intelligence and had an idea on how he could put his knowledge and the family of wild birds living in his backyard to good use.&lt;/p&gt;
&lt;p&gt;So, he trained the friendly neighborhood magpies to recycle bottle caps in exchange for food using &lt;a href=&quot;https://www.hackster.io/hfor62/training-wild-birds-to-trade-litter-for-food-8f9a55&quot; rel=&quot;nofollow&quot;&gt;a machine he built&lt;/a&gt; from scratch.&lt;/p&gt;
&lt;h3&gt;Magpies are pretty smart as birds go—so smart in fact that they now set an example with recycling trash&lt;/h3&gt;
&lt;div class=&quot;shareable-post-image&quot;&gt;
&lt;p class=&quot;attachment-link-container shareable-image-block&quot; id=&quot;1-5f994aeac60f0__700&quot; data-href=&quot;http://www.boredpanda.com/magpies-recycling-machine-bottle-caps/?image_id=1-5f994aeac60f0__700.jpg&quot;&gt;&lt;img src=&quot;https://static.boredpanda.com/blog/wp-content/uploads/2020/10/1-5f994aeac60f0__700.jpg&quot; width=&quot;700&quot; height=&quot;476&quot;/&gt;&lt;span class=&quot;image-share-box&quot;&gt;    &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;p class=&quot;post-content-media-source&quot;&gt;Image credits: &lt;a href=&quot;https://youtu.be/LJG3282QU4g&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;Hans Forsberg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hans has a backyard that’s home to a pair of magpies who have been living there for what seems like ages at this point. One day, Hans noticed how the curious little critters started finagling with the complex locks on his outdoor lanterns. And then a thought occurred.&lt;/p&gt;
&lt;p&gt;The magpies were looking for paraffin candles inside the lanterns—because why not, just like crows, they love stealing—but Hans figured that these birds could quite possibly carry out more meaningful tasks.&lt;/p&gt;
&lt;p&gt;So, he decided to build a machine with the help of which he would train the birds to collect trash around his garden in exchange for food. This was not only a fresh new project for him, but it seemed that nobody else had tried to do anything like this before as there were no how-tos on the internet, so it was all up to him.&lt;/p&gt;

&lt;h3&gt;Computer scientist Hans Forsberg built a machine that dispenses food in exchange for bottle caps&lt;/h3&gt;
&lt;div class=&quot;shareable-post-image&quot;&gt;
&lt;p class=&quot;attachment-link-container shareable-image-block&quot; id=&quot;2-5f994aec618dd__700&quot; data-href=&quot;http://www.boredpanda.com/magpies-recycling-machine-bottle-caps/?image_id=2-5f994aec618dd__700.jpg&quot;&gt;&lt;img src=&quot;https://static.boredpanda.com/blog/wp-content/uploads/2020/10/2-5f994aec618dd__700.jpg&quot; width=&quot;700&quot; height=&quot;441&quot;/&gt;&lt;span class=&quot;image-share-box&quot;&gt;    &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;p class=&quot;post-content-media-source&quot;&gt;Image credits: &lt;a href=&quot;https://youtu.be/LJG3282QU4g&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;Hans Forsberg&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Whenever a magpie drops a bottle cap into the designated hole, it gets a treat from the dispenser&lt;/h3&gt;
&lt;div class=&quot;shareable-post-image&quot;&gt;
&lt;p class=&quot;attachment-link-container shareable-image-block&quot; id=&quot;3-5f994aedab4a2__700&quot; data-href=&quot;http://www.boredpanda.com/magpies-recycling-machine-bottle-caps/?image_id=3-5f994aedab4a2__700.jpg&quot;&gt;&lt;img src=&quot;https://static.boredpanda.com/blog/wp-content/uploads/2020/10/3-5f994aedab4a2__700.jpg&quot; width=&quot;700&quot; height=&quot;476&quot;/&gt;&lt;span class=&quot;image-share-box&quot;&gt;    &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;p class=&quot;post-content-media-source&quot;&gt;Image credits: &lt;a href=&quot;https://youtu.be/LJG3282QU4g&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;Hans Forsberg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The project itself included several key components and processes. First there’s the dispenser, which is filled up with food, like peanuts and animal kibble. Whenever a piece of trash—in this case, a bottle cap—is deposited into a receptacle, it gives out one or two pieces of food.&lt;/p&gt;
&lt;p&gt;Once an &lt;em&gt;offering&lt;/em&gt; is given, the food is dispensed and falls down through a tube and a funnel that’s connected to a base with a small compartment where the bird can retrieve it.&lt;/p&gt;
&lt;p&gt;The main box contains a Raspberry Pi system with a camera to monitor everything and there are also electronics and detectors hooked up below the table that the machine rests on to process and trigger the dispensation of food.&lt;/p&gt;
&lt;h3&gt;Over several years, he taught the neighborhood magpies to recycle bottle caps littered around the neighborhood&lt;/h3&gt;
&lt;div class=&quot;shareable-post-image&quot;&gt;
&lt;p class=&quot;attachment-link-container shareable-image-block&quot; id=&quot;4-5f994af07b3fd__700&quot; data-href=&quot;http://www.boredpanda.com/magpies-recycling-machine-bottle-caps/?image_id=4-5f994af07b3fd__700.jpg&quot;&gt;&lt;img src=&quot;https://static.boredpanda.com/blog/wp-content/uploads/2020/10/4-5f994af07b3fd__700.jpg&quot; width=&quot;700&quot; height=&quot;577&quot;/&gt;&lt;span class=&quot;image-share-box&quot;&gt;    &lt;/span&gt;&lt;/p&gt;

&lt;span class=&quot;post-desktop-ad-within-content margin-left post-ads&quot;&gt;&lt;span class=&quot;dfp-ad&quot;&gt;&lt;span id=&quot;div-gpt-ad-1491844427478-6&quot;/&gt;&lt;span id=&quot;BP02_728x90_InArticle&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;

&lt;p class=&quot;post-content-media-source&quot;&gt;Image credits: &lt;a href=&quot;https://youtu.be/FDTu6cA8JJk&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;Hans Forsberg&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;The adult magpies are cautious, but the young ones are keen on keeping the environment clean&lt;/h3&gt;
&lt;div class=&quot;shareable-post-image&quot;&gt;
&lt;p class=&quot;attachment-link-container shareable-image-block&quot; id=&quot;5-6&quot; data-href=&quot;http://www.boredpanda.com/magpies-recycling-machine-bottle-caps/?image_id=5-6.jpg&quot;&gt;&lt;img class=&quot;lozad&quot; alt=&quot;&quot; width=&quot;700&quot; height=&quot;700&quot; data-src=&quot;https://static.boredpanda.com/blog/wp-content/uploads/2020/10/5-6.jpg&quot;/&gt;&lt;span class=&quot;image-share-box&quot;&gt;    &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;p class=&quot;post-content-media-source&quot;&gt;Image credits: &lt;a href=&quot;https://youtu.be/FDTu6cA8JJk&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;Hans Forsberg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The project is actually much more complicated than what is said here as it also involves vibrating motors, a number of very particular moving parts in the dispenser, and even its own graphic user interface to log the progress and status of the bird box. For more details, you can read up on it in &lt;a href=&quot;https://www.hackster.io/hfor62/training-wild-birds-to-trade-litter-for-food-8f9a55&quot; rel=&quot;nofollow&quot;&gt;his story on Hackster&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Turns out, this project has been running for several years as it’s not that easy to train magpies to pick up trash. Hans explained that he first had to get the birds interested in the feeder, to feed them regularly, and to persuade them to visit him during their patrols.&lt;/p&gt;
&lt;p&gt;It was also a bit of a challenge every time there was the slightest change in the rig as the adult magpies were suspicious and cautious of everything. Good thing all of this changed when they had offspring. The chicks are braver in approaching the machine and partaking in this elaborate recycling scheme.&lt;/p&gt;
&lt;h3&gt;In the future, he hopes to teach them to pick up other kinds of trash, like cigarette butts&lt;/h3&gt;
&lt;div class=&quot;shareable-post-image&quot;&gt;
&lt;p class=&quot;attachment-link-container shareable-image-block&quot; id=&quot;6-1&quot; data-href=&quot;http://www.boredpanda.com/magpies-recycling-machine-bottle-caps/?image_id=6-1.jpg&quot;&gt;&lt;img class=&quot;lozad&quot; alt=&quot;&quot; width=&quot;700&quot; height=&quot;525&quot; data-src=&quot;https://static.boredpanda.com/blog/wp-content/uploads/2020/10/6-1.jpg&quot;/&gt;&lt;span class=&quot;image-share-box&quot;&gt;    &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p class=&quot;post-content-media-source&quot;&gt;Image credits: &lt;a href=&quot;https://youtu.be/FDTu6cA8JJk&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;Hans Forsberg&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Check out the videos of the friendly magpies cleaning up the neighborhood&lt;/h3&gt;
&lt;p class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/FDTu6cA8JJk&quot; width=&quot;420&quot; height=&quot;315&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;allowfullscreen&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/p&gt;
&lt;p class=&quot;post-content-media-source&quot;&gt;Image credits: &lt;a href=&quot;https://youtu.be/FDTu6cA8JJk&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;Hans Forsberg&lt;/a&gt;&lt;/p&gt;
&lt;span class=&quot;post-desktop-ad-within-content margin-left post-ads&quot;&gt;&lt;span class=&quot;dfp-ad&quot;&gt;&lt;span id=&quot;div-gpt-ad-1491844427478-3&quot;/&gt;&lt;span id=&quot;BP06_728x90_Bottom&quot;/&gt;&lt;/span&gt;&lt;/span&gt;
&lt;p class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/LJG3282QU4g&quot; width=&quot;420&quot; height=&quot;315&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;allowfullscreen&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/p&gt;
&lt;p class=&quot;post-content-media-source&quot;&gt;Image credits: &lt;a href=&quot;https://youtu.be/LJG3282QU4g&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;Hans Forsberg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;At this point, there is one chick who has fully figured out how the system works and has been hard at work collecting bottle caps to trade for food. His siblings are more mischievous about it as they tend to steal the rewards from underneath the hard working magpies’ beaks.&lt;/p&gt;
&lt;p&gt;He hopes to move on to other bigger and better things than bottle caps—to train the birds to pick up fallen fruit, cigarette butts, and other things in his backyard as well as the entire neighborhood. Maybe this will finally put litter bugs to shame knowing that even animals partake in recycling.&lt;/p&gt;
&lt;h3&gt;Hans also made a brief explanation video of the food dispenser&lt;/h3&gt;
&lt;p class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/PDhVM3OGVDg&quot; width=&quot;420&quot; height=&quot;315&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;allowfullscreen&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/p&gt;
&lt;p class=&quot;post-content-media-source&quot;&gt;Image credits: &lt;a href=&quot;https://youtu.be/PDhVM3OGVDg&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;Hans Forsberg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;What are your thoughts on this? Let us know in the comment section below!&lt;/p&gt;
&lt;h3&gt;Here’s what the internet had to say about this&lt;/h3&gt;
&lt;div class=&quot;shareable-post-image&quot;&gt;
&lt;p class=&quot;attachment-link-container shareable-image-block&quot; id=&quot;7&quot; data-href=&quot;http://www.boredpanda.com/magpies-recycling-machine-bottle-caps/?image_id=7.jpg&quot;&gt;&lt;img class=&quot;lozad&quot; alt=&quot;&quot; width=&quot;700&quot; height=&quot;172&quot; data-src=&quot;https://static.boredpanda.com/blog/wp-content/uploads/2020/10/7.jpg&quot;/&gt;&lt;span class=&quot;image-share-box&quot;&gt;    &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;div class=&quot;shareable-post-image&quot;&gt;
&lt;p class=&quot;attachment-link-container shareable-image-block&quot; id=&quot;9-2&quot; data-href=&quot;http://www.boredpanda.com/magpies-recycling-machine-bottle-caps/?image_id=9-2.jpg&quot;&gt;&lt;img class=&quot;lozad&quot; alt=&quot;&quot; width=&quot;700&quot; height=&quot;134&quot; data-src=&quot;https://static.boredpanda.com/blog/wp-content/uploads/2020/10/9-2.jpg&quot;/&gt;&lt;span class=&quot;image-share-box&quot;&gt;    &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;shareable-post-image&quot;&gt;
&lt;p class=&quot;attachment-link-container shareable-image-block&quot; id=&quot;10&quot; data-href=&quot;http://www.boredpanda.com/magpies-recycling-machine-bottle-caps/?image_id=10.jpg&quot;&gt;&lt;img class=&quot;lozad&quot; alt=&quot;&quot; width=&quot;700&quot; height=&quot;130&quot; data-src=&quot;https://static.boredpanda.com/blog/wp-content/uploads/2020/10/10.jpg&quot;/&gt;&lt;span class=&quot;image-share-box&quot;&gt;    &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;shareable-post-image&quot;&gt;
&lt;p class=&quot;attachment-link-container shareable-image-block&quot; id=&quot;11-2&quot; data-href=&quot;http://www.boredpanda.com/magpies-recycling-machine-bottle-caps/?image_id=11-2.jpg&quot;&gt;&lt;img class=&quot;lozad&quot; alt=&quot;&quot; width=&quot;700&quot; height=&quot;135&quot; data-src=&quot;https://static.boredpanda.com/blog/wp-content/uploads/2020/10/11-2.jpg&quot;/&gt;&lt;span class=&quot;image-share-box&quot;&gt;    &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;shareable-post-image&quot;&gt;
&lt;p class=&quot;attachment-link-container shareable-image-block&quot; id=&quot;12-1&quot; data-href=&quot;http://www.boredpanda.com/magpies-recycling-machine-bottle-caps/?image_id=12-1.jpg&quot;&gt;&lt;img class=&quot;lozad&quot; alt=&quot;&quot; width=&quot;700&quot; height=&quot;280&quot; data-src=&quot;https://static.boredpanda.com/blog/wp-content/uploads/2020/10/12-1.jpg&quot;/&gt;&lt;span class=&quot;image-share-box&quot;&gt;    &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;shareable-post-image&quot;&gt;
&lt;p class=&quot;attachment-link-container shareable-image-block&quot; id=&quot;13-3&quot; data-href=&quot;http://www.boredpanda.com/magpies-recycling-machine-bottle-caps/?image_id=13-3.jpg&quot;&gt;&lt;img class=&quot;lozad&quot; alt=&quot;&quot; width=&quot;700&quot; height=&quot;170&quot; data-src=&quot;https://static.boredpanda.com/blog/wp-content/uploads/2020/10/13-3.jpg&quot;/&gt;&lt;span class=&quot;image-share-box&quot;&gt;    &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;shareable-post-image&quot;&gt;
&lt;p class=&quot;attachment-link-container shareable-image-block&quot; id=&quot;14-2&quot; data-href=&quot;http://www.boredpanda.com/magpies-recycling-machine-bottle-caps/?image_id=14-2.jpg&quot;&gt;&lt;img class=&quot;lozad&quot; alt=&quot;&quot; width=&quot;700&quot; height=&quot;250&quot; data-src=&quot;https://static.boredpanda.com/blog/wp-content/uploads/2020/10/14-2.jpg&quot;/&gt;&lt;span class=&quot;image-share-box&quot;&gt;    &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;shareable-post-image&quot;&gt;
&lt;p class=&quot;attachment-link-container shareable-image-block&quot; id=&quot;15-1&quot; data-href=&quot;http://www.boredpanda.com/magpies-recycling-machine-bottle-caps/?image_id=15-1.jpg&quot;&gt;&lt;img class=&quot;lozad&quot; alt=&quot;&quot; width=&quot;700&quot; height=&quot;126&quot; data-src=&quot;https://static.boredpanda.com/blog/wp-content/uploads/2020/10/15-1.jpg&quot;/&gt;&lt;span class=&quot;image-share-box&quot;&gt;    &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;shareable-post-image&quot;&gt;
&lt;p class=&quot;attachment-link-container shareable-image-block&quot; id=&quot;16-2&quot; data-href=&quot;http://www.boredpanda.com/magpies-recycling-machine-bottle-caps/?image_id=16-2.jpg&quot;&gt;&lt;img class=&quot;lozad&quot; alt=&quot;&quot; width=&quot;700&quot; height=&quot;160&quot; data-src=&quot;https://static.boredpanda.com/blog/wp-content/uploads/2020/10/16-2.jpg&quot;/&gt;&lt;span class=&quot;image-share-box&quot;&gt;    &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;shareable-post-image&quot;&gt;
&lt;p class=&quot;attachment-link-container shareable-image-block&quot; id=&quot;8-1&quot; data-href=&quot;http://www.boredpanda.com/magpies-recycling-machine-bottle-caps/?image_id=8-1.jpg&quot;&gt;&lt;img class=&quot;lozad&quot; alt=&quot;&quot; width=&quot;700&quot; height=&quot;88&quot; data-src=&quot;https://static.boredpanda.com/blog/wp-content/uploads/2020/10/8-1.jpg&quot;/&gt;&lt;span class=&quot;image-share-box&quot;&gt;    &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p class=&quot;post-submission-line post-footer post-footer-android-promotion visible-upto-l&quot;&gt;Bored Panda works best if you switch to our &lt;a class=&quot;app-store-link&quot; data-name=&quot;Android app&quot; target=&quot;_blank&quot; href=&quot;https://play.google.com/store/apps/details?id=com.boredpanda.android&amp;amp;referrer=utm_source%3Demail%26utm_medium%3Dorganic%26utm_campaign%3Dpostbottom%2520page%26anid%3Dadmob&quot;&gt;Android app&lt;/a&gt;&lt;/p&gt;




</description>
<pubDate>Sun, 22 Nov 2020 20:16:57 +0000</pubDate>
<dc:creator>matthewsinclair</dc:creator>
<og:type>article</og:type>
<og:url>https://www.boredpanda.com/magpies-recycling-machine-bottle-caps/</og:url>
<og:title>Guy Built A Bird Feeder That Accepts Bottle Caps For Food, And These Wild Magpies Love It</og:title>
<og:image>https://static.boredpanda.com/blog/wp-content/uploads/2020/10/magpies-recycling-machine-bottle-caps-fb6-png__700.jpg</og:image>
<og:description>Hans Forsberg works with robotics on industrial applications for artificial intelligence and had an idea on how he could put his knowledge and the family of wild birds living in his backyard to good use.</og:description>
<dc:language>en_US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.boredpanda.com/magpies-recycling-machine-bottle-caps/</dc:identifier>
</item>
<item>
<title>Building Your Color Palette</title>
<link>https://refactoringui.com/previews/building-your-color-palette/</link>
<guid isPermaLink="true" >https://refactoringui.com/previews/building-your-color-palette/</guid>
<description>&lt;p class=&quot;italic text-lg text-grey-dark mb-8&quot;&gt;Adapted from our book and video series, &lt;a href=&quot;https://refactoringui.com/book&quot; class=&quot;bg-no-image font-normal underline hover:text-black&quot;&gt;Refactoring UI&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Ever used one of those fancy color palette generators? You know, the ones where you pick a starting color, tweak some options that probably include some musical jargon like &quot;triad&quot; or &quot;major fourth&quot;, and are then bestowed the five perfect color swatches you should use to build your website?&lt;/p&gt;
&lt;div class=&quot;my-8&quot;&gt;&lt;img class=&quot;block&quot; src=&quot;https://refactoring-ui.nyc3.cdn.digitaloceanspaces.com/previews/whats-in-a-color-palette-01.png&quot;/&gt;&lt;/div&gt;
&lt;p&gt;This calculated and scientific approach to picking the perfect color scheme is extremely seductive, but not very useful.&lt;/p&gt;
&lt;p&gt;Well, unless you want your site to look like this:&lt;/p&gt;
&lt;div class=&quot;my-8&quot;&gt;&lt;img class=&quot;block&quot; src=&quot;https://refactoring-ui.nyc3.cdn.digitaloceanspaces.com/previews/whats-in-a-color-palette-02.png&quot;/&gt;&lt;/div&gt;
&lt;h2&gt;What you actually need&lt;/h2&gt;
&lt;p&gt;You can't build anything with five hex codes. To build something real, you need a much more comprehensive set of colors to choose from.&lt;/p&gt;
&lt;div class=&quot;my-8&quot;&gt;&lt;img class=&quot;block&quot; src=&quot;https://refactoring-ui.nyc3.cdn.digitaloceanspaces.com/previews/whats-in-a-color-palette-03.png&quot;/&gt;&lt;/div&gt;
&lt;p&gt;You can break a good color palette down into three categories.&lt;/p&gt;
&lt;h3&gt;Greys&lt;/h3&gt;
&lt;p&gt;Text, backgrounds, panels, form controls — almost everything in an interface is grey.&lt;/p&gt;
&lt;div class=&quot;my-8&quot;&gt;&lt;img class=&quot;block&quot; src=&quot;https://refactoring-ui.nyc3.cdn.digitaloceanspaces.com/previews/whats-in-a-color-palette-04.png&quot;/&gt;&lt;/div&gt;
&lt;p&gt;You'll need more greys than you think, too — three or four shades might sound like plenty but it won't be long before you wish you had something a little darker than shade #2 but a little lighter than shade #3.&lt;/p&gt;
&lt;p&gt;In practice, you want 8-10 shades to choose from (more on this later). Not so many that you waste time deciding between shade #77 and shade #78, but enough to make sure you don't have to compromise too much .&lt;/p&gt;
&lt;div class=&quot;my-8&quot;&gt;&lt;img class=&quot;block&quot; src=&quot;https://refactoring-ui.nyc3.cdn.digitaloceanspaces.com/previews/whats-in-a-color-palette-05.png&quot;/&gt;&lt;/div&gt;
&lt;p&gt;True black tends to look pretty unnatural, so start with a really dark grey and work your way up to white in steady increments.&lt;/p&gt;
&lt;h3&gt;Primary color(s)&lt;/h3&gt;
&lt;p&gt;Most sites need one, &lt;em&gt;maybe&lt;/em&gt; two colors that are used for primary actions, emphasizing navigation elements, etc. These are the colors that determine the overall look of a site — the ones that make you think of Facebook as &quot;blue&quot;, even though it's really mostly grey.&lt;/p&gt;
&lt;p&gt;Just like with greys, you need a variety &lt;em&gt;(5-10)&lt;/em&gt; of lighter and darker shades to choose from.&lt;/p&gt;
&lt;div class=&quot;my-8&quot;&gt;&lt;img class=&quot;block&quot; src=&quot;https://refactoring-ui.nyc3.cdn.digitaloceanspaces.com/previews/whats-in-a-color-palette-06.png&quot;/&gt;&lt;/div&gt;
&lt;p&gt;Ultra-light shades can be useful as a tinted background for things like alerts, while darker shades work great for text.&lt;/p&gt;
&lt;h3&gt;Accent colors&lt;/h3&gt;
&lt;p&gt;On top of primary colors, every site needs a few &lt;em&gt;accent&lt;/em&gt; colors for communicating different things to the user.&lt;/p&gt;
&lt;p&gt;For example, you might want to use an eye-grabbing color like yellow, pink, or teal to highlight a new feature:&lt;/p&gt;
&lt;div class=&quot;my-8&quot;&gt;&lt;img class=&quot;block&quot; src=&quot;https://refactoring-ui.nyc3.cdn.digitaloceanspaces.com/previews/whats-in-a-color-palette-07.png&quot;/&gt;&lt;/div&gt;
&lt;p&gt;You might also need colors to emphasize different semantic &lt;em&gt;states&lt;/em&gt;, like red for confirming a destructive action:&lt;/p&gt;
&lt;div class=&quot;my-8&quot;&gt;&lt;img class=&quot;block&quot; src=&quot;https://refactoring-ui.nyc3.cdn.digitaloceanspaces.com/previews/whats-in-a-color-palette-08.png&quot;/&gt;&lt;/div&gt;
&lt;p&gt;...yellow for a warning message:&lt;/p&gt;
&lt;div class=&quot;my-8&quot;&gt;&lt;img class=&quot;block&quot; src=&quot;https://refactoring-ui.nyc3.cdn.digitaloceanspaces.com/previews/whats-in-a-color-palette-09.png&quot;/&gt;&lt;/div&gt;
&lt;p&gt;...or green to highlight a positive trend:&lt;/p&gt;
&lt;div class=&quot;my-8&quot;&gt;&lt;img class=&quot;block&quot; src=&quot;https://refactoring-ui.nyc3.cdn.digitaloceanspaces.com/previews/whats-in-a-color-palette-10.png&quot;/&gt;&lt;/div&gt;
&lt;p&gt;You'll want multiple shades for these colors too, even though they should be used pretty sparingly throughout the UI.&lt;/p&gt;
&lt;p&gt;If you're building something where you need to use color to distinguish or categorize similar elements (like lines on graphs, events in a calendar, or tags on a project), you might need even more accent colors.&lt;/p&gt;
&lt;p&gt;All in, it's not uncommon to need as many as &lt;em&gt;ten&lt;/em&gt; different colors with &lt;em&gt;5-10 shades each&lt;/em&gt; for a complex UI.&lt;/p&gt;
&lt;h2&gt;Define your shades up front&lt;/h2&gt;
&lt;p&gt;When you need to create a lighter or darker variation of a color in your palette, don't get clever using CSS preprocessor functions like &quot;lighten&quot; or &quot;darken&quot; to create shades on the fly. That's how you end up with 35 &lt;em&gt;slightly&lt;/em&gt; different blues that all look the same.&lt;/p&gt;
&lt;p&gt;Instead, define a fixed set of shades up front that you can choose from as you work.&lt;/p&gt;
&lt;div class=&quot;my-8&quot;&gt;&lt;img class=&quot;block&quot; src=&quot;https://refactoring-ui.nyc3.cdn.digitaloceanspaces.com/previews/define-your-shades-up-front-01.png&quot;/&gt;&lt;/div&gt;
&lt;p&gt;So how do you put together a palette like this anyways?&lt;/p&gt;
&lt;h2&gt;Choose the base color first&lt;/h2&gt;
&lt;p&gt;Start by picking a &lt;em&gt;base&lt;/em&gt; color for the scale you want to create — the color in the middle that your lighter and darker shades are based on.&lt;/p&gt;
&lt;p&gt;There's no real scientific way to do this, but for primary and accent colors, a good rule of thumb is to pick a shade that would work well as a button background.&lt;/p&gt;
&lt;div class=&quot;my-8&quot;&gt;&lt;img class=&quot;block&quot; src=&quot;https://refactoring-ui.nyc3.cdn.digitaloceanspaces.com/previews/define-your-shades-up-front-02.png&quot;/&gt;&lt;/div&gt;
&lt;p&gt;It's important to note that there are no real rules here like &quot;start at 50% lightness&quot; or anything — every color behaves a bit differently, so you'll have to rely on your eyes for this one.&lt;/p&gt;
&lt;h2&gt;Finding the edges&lt;/h2&gt;
&lt;p&gt;Next, pick your darkest shade and your lightest shade. There's no real science to this either, but it helps to think about where they will be used and choose them using that context.&lt;/p&gt;
&lt;p&gt;The darkest shade of a color is usually reserved for text, while the lightest shade might be used to tint the background of an element.&lt;/p&gt;
&lt;p&gt;A simple alert component is a good example that combines both of these use cases, so it can be a great place to pick these colors.&lt;/p&gt;
&lt;div class=&quot;my-8&quot;&gt;&lt;img class=&quot;block&quot; src=&quot;https://refactoring-ui.nyc3.cdn.digitaloceanspaces.com/previews/define-your-shades-up-front-03.png&quot;/&gt;&lt;/div&gt;
&lt;p&gt;Start with a color that matches the hue of your base color, and adjust the saturation and lightness until you're satisfied.&lt;/p&gt;
&lt;h2&gt;Filling in the gaps&lt;/h2&gt;
&lt;p&gt;Once you've got your base, darkest, and lightest shades, you just need to fill in the gaps in between them.&lt;/p&gt;
&lt;p&gt;For most projects, you'll need at least 5 shades per color, and probably closer to 10 if you don't want to feel too constrained.&lt;/p&gt;
&lt;p&gt;Nine is a great number because it's easy to divide and makes filling in the gaps a little more straightforward. Let's call our darkest shade &lt;em&gt;900&lt;/em&gt;, our base shade &lt;em&gt;500&lt;/em&gt;, and our lightest shade &lt;em&gt;100&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Start by picking shades &lt;em&gt;700&lt;/em&gt; and &lt;em&gt;300&lt;/em&gt;, the ones right in the middle of the gaps. You want these shades to feel like the perfect compromise between the shades on either side.&lt;/p&gt;
&lt;div class=&quot;my-8&quot;&gt;&lt;img class=&quot;block&quot; src=&quot;https://refactoring-ui.nyc3.cdn.digitaloceanspaces.com/previews/define-your-shades-up-front-04.png&quot;/&gt;&lt;/div&gt;
&lt;p&gt;This creates four more holes in the scale (&lt;em&gt;800&lt;/em&gt;, &lt;em&gt;600&lt;/em&gt;, &lt;em&gt;400&lt;/em&gt;, and &lt;em&gt;200&lt;/em&gt;), which you can fill using the same approach.&lt;/p&gt;
&lt;div class=&quot;my-8&quot;&gt;&lt;img class=&quot;block&quot; src=&quot;https://refactoring-ui.nyc3.cdn.digitaloceanspaces.com/previews/define-your-shades-up-front-05.png&quot;/&gt;&lt;/div&gt;
&lt;p&gt;You should end up with a pretty balanced set of colors that provide just enough options to accommodate your design ideas without feeling limiting.&lt;/p&gt;
&lt;h2&gt;What about greys?&lt;/h2&gt;
&lt;p&gt;With greys the base color isn't as important, but otherwise the process is the same. Start at the edges and fill in the gaps until you have what you need.&lt;/p&gt;
&lt;div class=&quot;my-8&quot;&gt;&lt;img class=&quot;block&quot; src=&quot;https://refactoring-ui.nyc3.cdn.digitaloceanspaces.com/previews/define-your-shades-up-front-06.png&quot;/&gt;&lt;/div&gt;
&lt;p&gt;Pick your darkest grey by choosing a color for the darkest text in your project, and your lightest grey by choosing something that works well for a subtle off-white background.&lt;/p&gt;
&lt;h2&gt;It's not a science&lt;/h2&gt;
&lt;p&gt;As tempting as it is, you can't rely purely on math to craft the perfect color palette.&lt;/p&gt;
&lt;p&gt;A systematic approach like the one described above is great to get you started, but don't be afraid to make little tweaks if you need to.&lt;/p&gt;
&lt;p&gt;Once you actually start using your colors in your designs, it's almost inevitable that you'll want to tweak the saturation on a shade, or make a couple of shades lighter or darker. Trust your eyes, not the numbers.&lt;/p&gt;
&lt;p&gt;Just try to avoid adding &lt;em&gt;new&lt;/em&gt; shades too often if you can avoid it. If you're not dilligent about limiting your palette, you might as well have no color system at all.&lt;/p&gt;
</description>
<pubDate>Sun, 22 Nov 2020 19:19:51 +0000</pubDate>
<dc:creator>clessg</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://refactoringui.com/previews/building-your-color-palette/</dc:identifier>
</item>
<item>
<title>Guitar Center files for bankruptcy</title>
<link>https://www.reuters.com/article/BigStory12/idUSKBN282058</link>
<guid isPermaLink="true" >https://www.reuters.com/article/BigStory12/idUSKBN282058</guid>
<description>&lt;div class=&quot;ArticleBody-byline-container-3H6dy&quot;&gt;
&lt;p class=&quot;Byline-byline-1sVmo ArticleBody-byline-10B7D&quot;&gt;By &lt;span class=&quot;TextLabel__text-label___3oCVw TextLabel__black___2FN-Z TextLabel__serif___3lOpX Byline-author-2BSir&quot; target=&quot;_blank&quot;&gt;Reuters Staff&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;ArticleBody-read-time-and-social-2VOIr&quot;&gt;
&lt;p class=&quot;TextLabel__text-label___3oCVw TextLabel__gray___1V4fk TextLabel__small-all-caps-spaced-out___3O9H4 ReadTime-read-time-1s3CG ArticleBody-read-time-29pGN&quot;&gt;2 Min Read&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;A detail of a &quot;Made in USA&quot; Fender Telecaster model electric guitar is pictured in Rome, Italy August 15, 2018. REUTERS/Max Rossi&lt;/p&gt;
&lt;p class=&quot;Paragraph-paragraph-2Bgue ArticleBody-para-TD_9x&quot;&gt;(Reuters) - Guitar Center Inc, the largest U.S. retailer of music instruments and equipment, filed for Chapter 11 bankruptcy on Saturday, as music lovers moved their shopping online during the coronavirus pandemic.&lt;/p&gt;
&lt;p class=&quot;Paragraph-paragraph-2Bgue ArticleBody-para-TD_9x&quot;&gt;The retailer has negotiated to have a total of $375 million in debtor-in-possession financing from its existing lenders and intends to raise $335 million in new senior secured notes, the company said &lt;a href=&quot;https://refini.tv/3fpM2UC&quot;&gt;refini.tv/3fpM2UC&lt;/a&gt; in a statement.&lt;/p&gt;
&lt;p class=&quot;Paragraph-paragraph-2Bgue ArticleBody-para-TD_9x&quot;&gt;Earlier this month the company reached a restructuring agreement with key stakeholders that includes debt reduction by nearly $800 million and new equity investments of up to $165 million to recapitalize the company.&lt;/p&gt;

&lt;p class=&quot;Paragraph-paragraph-2Bgue ArticleBody-para-TD_9x&quot;&gt;The company in a court filing said it has between $1 billion and $10 billion of both assets and liabilities.&lt;/p&gt;
&lt;p class=&quot;Paragraph-paragraph-2Bgue ArticleBody-para-TD_9x&quot;&gt;Guitar Center, which owns nearly 300 stores across the country, said business operations will continue without any interruption.&lt;/p&gt;
&lt;p class=&quot;Paragraph-paragraph-2Bgue ArticleBody-para-TD_9x&quot;&gt;Milbank LLP served as legal counsel, BRG served as restructuring advisor, and Houlihan Lokey was financial advisor to the company.&lt;/p&gt;

&lt;p class=&quot;Paragraph-paragraph-2Bgue ArticleBody-para-TD_9x&quot;&gt;Guitar Center began in 1959 as a store selling home organs in Hollywood.&lt;/p&gt;
&lt;p class=&quot;Paragraph-paragraph-2Bgue ArticleBody-para-TD_9x&quot;&gt;The company filed for Chapter 11 bankruptcy in the United States Bankruptcy Court of the Eastern District of Virginia.&lt;/p&gt;
&lt;div readability=&quot;4.8943089430894&quot;&gt;
&lt;div class=&quot;Attribution-attribution-Y5JpY&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;Reporting by Radhika Anilkumar in Bengaluru; Editing by Lincoln Feast.&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;
</description>
<pubDate>Sun, 22 Nov 2020 17:45:42 +0000</pubDate>
<dc:creator>lisper</dc:creator>
<og:title>U.S. retailer Guitar Center files for bankruptcy</og:title>
<og:description>Guitar Center Inc, the largest U.S. retailer of music instruments and equipment, filed for Chapter 11 bankruptcy on Saturday, as music lovers moved their shopping online during the coronavirus pandemic.</og:description>
<og:image>https://static.reuters.com/resources/r/?m=02&amp;d=20201122&amp;t=2&amp;i=1542055584&amp;r=LYNXMPEGAL063&amp;w=800</og:image>
<og:url>https://www.reuters.com/article/us-guitar-center-bankruptcy-idUSKBN282058</og:url>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.reuters.com/article/BigStory12/idUSKBN282058</dc:identifier>
</item>
<item>
<title>Exotic Programming Ideas, Part 3: Effect Systems</title>
<link>https://www.stephendiehl.com/posts/exotic03.html</link>
<guid isPermaLink="true" >https://www.stephendiehl.com/posts/exotic03.html</guid>
<description>&lt;p&gt;Continuing on in our series on exotic programming ideas, we’re going to explore the topic of &lt;em&gt;effects&lt;/em&gt;. Weak forms of effect tagging are found in many mainstream programming languages, however the use of programming with whole &lt;em&gt;effect systems&lt;/em&gt; that define syntax for defining and marking regions of effects in the surface syntax is still an open area in language design.&lt;/p&gt;
&lt;p&gt;First, we should define what we mean by an effect. We’ll adopt the definitions commonly used in functional programming discipline, simply because it has a precise definition wheres colloquial usage often does not. First a &lt;em&gt;pure function&lt;/em&gt; is a unit of code whose return value is entirely determined by its inputs, and has no observable &lt;em&gt;effect&lt;/em&gt; other than simply returning a value. A pure function is a function in programming which behaves a like a function in mathematics. For example in Python code we denote a “function” called &lt;code&gt;f&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; f(x):
  &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; x&lt;span class=&quot;op&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the pseudocode traditionally known as mathematics we denote the function &lt;span class=&quot;math inline&quot;&gt;\(f\)&lt;/span&gt;:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[ f(x) = x^2 \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;There are a few subtle points to mention in this definition. The first is the matter of perspective in our analysis of effects. This Python function compiles into a sequence of bytecodes which manipulate stack variables, mallocs megabytes of data on the heap, invokes the garbage collector, and swaps hundreds of thousands of values in and out of registers on the CPU all corresponding to doing the exponentiation of an arbitrary size integer inside a PyObject struct. All this is very effectful from the perspective of the underlying implementation, however we can’t &lt;em&gt;observe&lt;/em&gt; the functioning of these internals from within the normal language.&lt;/p&gt;
&lt;p&gt;The big idea in pure functional programming is that programming will inevitably consist of both pure and effectful (sometimes called &lt;em&gt;impure&lt;/em&gt;) logic. Additionally we suppose it is a useful property of the surface language to be able to distinguish between units of logic which have effects, and to be able to classify these type of effects in order to greater reason about program composition.&lt;/p&gt;
&lt;p&gt;The alternative to this is the model found in most languages where all logic is mushed upto in a big soup of effects and relies on the programmer’s intuition and internal mental model to distinguish between which code can do perform effects (memory allocations, side channels, etc) and logic which cannot. The research into effect systems is fundamentally about canonising our intuition about correct program effect synthesis into a formal model that compilers can reason about on our behalf and interact with developer tools in an ergonomic way.&lt;/p&gt;
&lt;p&gt;Functional Languages like Idris, Haskell, F* and a few other research languages have been exploring the design space for the better part of the last decade. Concepts such as monads saw initial exploration for demarcating pure and impure logic but have fallen off in recent years as that model has hit a wall in terms of usefulness. The most common area of active exploration is one known as &lt;em&gt;algebraic effect handlers&lt;/em&gt; which admits a tractable inference algorithm for checking effectful logic while not introducing any runtime overhead.&lt;/p&gt;
&lt;p&gt;There are no mainstream languages which use this model, however there is a academic language out of Microsoft Research lab called &lt;a href=&quot;https://www.google.com/search?q=koka+microsoft+research&amp;amp;oq=koka+microsoft+research&amp;amp;aqs=chrome..69i57j69i60l2.2695j0j4&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8&quot;&gt;Koka&lt;/a&gt; which presents the most developed implementations of these ideas. As far as I can tell no one uses this language for anything, however it is downloadable and quite usable to explore these ideas. We will write all of our example code in Koka.&lt;/p&gt;
&lt;p&gt;In Koka the absence of any effect is denoted by the effect &lt;code&gt;total&lt;/code&gt;. The only result of computing the function &lt;code&gt;f&lt;/code&gt; is simply returning the square of its input.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode rust&quot;&gt;
&lt;code class=&quot;sourceCode rust&quot;&gt;fun f( x : &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; ) : total &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;
{
  &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; pow(x,&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However we can write a effectful function, such as one that reads from the screen, by tagging it with a &lt;code&gt;console&lt;/code&gt; effect. The body of this function can then invoke functions such &lt;code&gt;println&lt;/code&gt; and the result of the invocation of thees functions is captured in the signature of the function that invokes them. The return type &lt;code&gt;()&lt;/code&gt; denotes the unit type which is called &lt;code&gt;void&lt;/code&gt; in C-like languages.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode rust&quot;&gt;
&lt;code class=&quot;sourceCode rust&quot;&gt;fun main() : console ()
{
  println(&lt;span class=&quot;st&quot;&gt;&quot;I can write to the screen!&quot;&lt;/span&gt;);
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is worth noting that the &lt;code&gt;println&lt;/code&gt; function provided by the standard library has the following type signature which itself includes the effect.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode rust&quot;&gt;
&lt;code class=&quot;sourceCode rust&quot;&gt;fun println( s : string ) : console ()&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And as such the compiler is aware of the effect it carries and the following function can be written without an annotation and &lt;em&gt;effect inference&lt;/em&gt; will deduce the appropriate signature without the user having to specify it. The return type can also be inferred using the usual type inference techniques.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode rust&quot;&gt;
&lt;code class=&quot;sourceCode rust&quot;&gt;fun main()
{
  println(&lt;span class=&quot;st&quot;&gt;&quot;I can write to the screen!&quot;&lt;/span&gt;);
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;exceptions&quot;&gt;Exceptions&lt;/h4&gt;
&lt;p&gt;Besides input/output, the most common type of effect found in most programming is the ability to fail. Usually langauge runtimes will implement this functionality using some exceptions which perform a non-local jump to logic which handles the exception or unwinds the call stack and aborts. This is clearly an effect that we can model and we can create an interface similar to &lt;em&gt;checked exceptions&lt;/em&gt; found in other languages.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;throw&lt;/code&gt; function will take an error sum type and result in a effect marked by &lt;code&gt;exn&lt;/code&gt;. While the &lt;code&gt;try&lt;/code&gt; function will consume a function which results in &lt;code&gt;exn&lt;/code&gt; type and return an error. The &lt;code&gt;error&lt;/code&gt; type is either an &lt;code&gt;Error&lt;/code&gt; or a &lt;code&gt;Ok&lt;/code&gt; on successful execution.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode rust&quot;&gt;
&lt;code class=&quot;sourceCode rust&quot;&gt;&lt;span class=&quot;kw&quot;&gt;type&lt;/span&gt; error&amp;lt;a&amp;gt; {
  Error( exception : exception )
  &lt;span class=&quot;cn&quot;&gt;Ok&lt;/span&gt;( result : a )
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The error handling functions can be written as higher order functions that consume and handle functions taged with the &lt;code&gt;exn&lt;/code&gt; effect.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode rust&quot;&gt;
&lt;code class=&quot;sourceCode rust&quot;&gt;fun throw( err : error&amp;lt;a&amp;gt; ) : exn a
fun try( action : () -&amp;gt; &amp;lt;exn|e&amp;gt; a ) : e error&amp;lt;a&amp;gt;
fun maybe( t : error&amp;lt;a&amp;gt; ) : maybe&amp;lt;a&amp;gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For example we can do classic case of handling division of mero and wrapping up the arithmetic error in a &lt;code&gt;maybe&lt;/code&gt; sum type which handles the zero case with a &lt;code&gt;nothing&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode rust&quot;&gt;
&lt;code class=&quot;sourceCode rust&quot;&gt;fun divide(a : &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;, b : &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;) : exn &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; {
  &lt;span class=&quot;kw&quot;&gt;match&lt;/span&gt;(b) {
    &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; -&amp;gt; throw(&lt;span class=&quot;st&quot;&gt;&quot;Division by zero&quot;&lt;/span&gt;);
    _ -&amp;gt; &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; (a / b);
  }
}

fun safeDiv(a : &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;, b : &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;) : maybe&amp;lt;&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;&amp;gt;
{
  maybe( try { divide(a,b) } );
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Elaboration of pattern matching inside the compiler can deduce incomplete patterns and infer that an exception should be added to the type of the pattern match that can fail at runtime.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode rust&quot;&gt;
&lt;code class=&quot;sourceCode rust&quot;&gt;fun unjust( m : maybe&amp;lt;a&amp;gt; ) : exn a {
  &lt;span class=&quot;kw&quot;&gt;match&lt;/span&gt;(m) {
    Just(x) -&amp;gt; x
  }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Whereas a complete pattern match is deduced as total.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode rust&quot;&gt;
&lt;code class=&quot;sourceCode rust&quot;&gt;fun unmaybe( m : maybe&amp;lt;a&amp;gt;, default : a ) : total a {
  &lt;span class=&quot;kw&quot;&gt;match&lt;/span&gt;(m) {
    Just(x) -&amp;gt; x
    Nothing -&amp;gt; default
  }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;non-termination-is-an-effect&quot;&gt;Non-termination is an Effect&lt;/h4&gt;
&lt;p&gt;By our above definition about effects, the only observable result of invoking a function is return a resulting value. Therefore functions which do not compute a value, and run infintely are not functions and have a side-effect called &lt;em&gt;divergence&lt;/em&gt;. Deducing whether a given function is total is non-trivial in the general case, however a function which is the composition of units of logic which are all independently total must itself be total.&lt;/p&gt;
&lt;p&gt;There are many simple cases where we can immedietely deduce non-totality from simply analysising call-sites. For example the following function is automatically tagged with the &lt;code&gt;div&lt;/code&gt; effect since it recurses on itself.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode rust&quot;&gt;
&lt;code class=&quot;sourceCode rust&quot;&gt;fun forever(f) {
  f();
  forever(f);
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;forever&lt;/code&gt; combinator has the inferred type:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode rust&quot;&gt;
&lt;code class=&quot;sourceCode rust&quot;&gt;forever: forall&amp;lt;a,b,e&amp;gt; (() -&amp;gt; &amp;lt;div|e&amp;gt; a) -&amp;gt; &amp;lt;div|e&amp;gt; b&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The effect checker can deduce totality across mutually recusive definitions, so functions that invoke each other must themselves either be entirely total or possibly diverge on composition.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode rust&quot;&gt;
&lt;code class=&quot;sourceCode rust&quot;&gt;fun f1() : div &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;
{
  &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; + f2();
}

fun f2() : div &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;
{
  &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; + f1();
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;rows-of-effects&quot;&gt;Rows of effects&lt;/h4&gt;
&lt;p&gt;While tagging individual effects independently is useful in its own right, programing in the large requires us to compose logic together and thus we need a way to synthesize the combination of effects. In Koka this is represented as a &lt;code&gt;row&lt;/code&gt; of effects. This is denoted with the bracket syntax:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode rust&quot;&gt;
&lt;code class=&quot;sourceCode rust&quot;&gt;&amp;lt;e1, e2, ...&amp;gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the language of mathematics, effect rows are commutative monoids with an operation &lt;em&gt;extension&lt;/em&gt; denoted by the pipe and a neutral element (&lt;code&gt;total&lt;/code&gt; or &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;) representing the absence of effects. The commutative and associativity of the extension operation allows for a canonical ordering of effects in signatures.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode rust&quot;&gt;
&lt;code class=&quot;sourceCode rust&quot;&gt;&amp;lt;e1&amp;gt; | e2     = &amp;lt;e1,e2&amp;gt;
&amp;lt;e1,e2&amp;gt; | e3  = &amp;lt;e1,e2,e3&amp;gt;
&amp;lt;e1&amp;gt; | &amp;lt;&amp;gt;     = &amp;lt;e1&amp;gt;
&amp;lt;e1&amp;gt; | e1     = &amp;lt;e1&amp;gt;  
&amp;lt;e2, e1&amp;gt;      = &amp;lt;e1,e2&amp;gt;  &lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For example we can write down a function which invokes a random number generator with the non-determinism effect &lt;code&gt;ndet&lt;/code&gt; as well as raising an exception with the effect &lt;code&gt;exn&lt;/code&gt;. The synthesis of the two is now the row &lt;code&gt;&amp;lt;ndet, exn&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode rust&quot;&gt;
&lt;code class=&quot;sourceCode rust&quot;&gt;fun multiEffect() : &amp;lt;ndet, exn&amp;gt; ()
{
  val n = srandom-&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;()
  throw(&lt;span class=&quot;st&quot;&gt;&quot;I raise an exception&quot;&lt;/span&gt;);
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The effect system denotes functions which may diverge or throw exceptions as &lt;code&gt;pure&lt;/code&gt; with the following alias.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode rust&quot;&gt;
&lt;code class=&quot;sourceCode rust&quot;&gt;alias &lt;span class=&quot;kw&quot;&gt;pure&lt;/span&gt; = &amp;lt;exn,div&amp;gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the Haskell approach to effects there is a single opaque IO monad which inhabits any action which can perform any type of console input, output or system operation. However languages which richer effect systems can model the IO hierarchy in much more granularity. For example Koka defines the following three tiers of IO effects in increasing expressivity.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;sourceCode rust&quot;&gt;
&lt;code class=&quot;sourceCode rust&quot;&gt;&lt;span class=&quot;co&quot;&gt;// Functions that perform arbitrary IO operations&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// but are terminating without raising exceptions&lt;/span&gt;
alias io-total = &amp;lt;ndet,console,net,file,ui,st&amp;lt;global&amp;gt;&amp;gt;

&lt;span class=&quot;co&quot;&gt;// Functions that perform arbitrary IO operations&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// but raise no exceptions&lt;/span&gt;
alias io-noexn = &amp;lt;div,io-total&amp;gt;

&lt;span class=&quot;co&quot;&gt;// Functions that perform arbitrary IO operations.&lt;/span&gt;
alias io = &amp;lt;exn,io-noexn&amp;gt;  &lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;reference-lifetimes-boundaries&quot;&gt;Reference Lifetimes &amp;amp; Boundaries&lt;/h4&gt;
&lt;p&gt;State is an essential part of programing, and it is one which is inherently effectful. Importantly we’d like to be talk about which regions of memory or logic we are able to write to within a given scope. For this we need to be able to refer to effects over a given region of memory as a paramter to the effect. The language allows us to parameterise effects with a &lt;em&gt;heap parameter&lt;/em&gt; using bracket notation. There are three core stateful effects provided by the standard library:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;code&gt;alloc&amp;lt;h&amp;gt;&lt;/code&gt; - The alloc effect for allocating references over heap parameter &lt;code&gt;h&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;read&amp;lt;h&amp;gt;&lt;/code&gt; - The read effect from a reference from a heap parameter &lt;code&gt;h&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;write&amp;lt;h&amp;gt;&lt;/code&gt; - The write effect for writing to a reference on heap parameter &lt;code&gt;h&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;To create and manipulate references there are three core functions:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode rust&quot;&gt;
&lt;code class=&quot;sourceCode rust&quot;&gt;fun &lt;span class=&quot;kw&quot;&gt;ref&lt;/span&gt;( value : a ) : (alloc&amp;lt;h&amp;gt;) &lt;span class=&quot;kw&quot;&gt;ref&lt;/span&gt;&amp;lt;h,a&amp;gt;
fun set( &lt;span class=&quot;kw&quot;&gt;ref&lt;/span&gt; : &lt;span class=&quot;kw&quot;&gt;ref&lt;/span&gt;&amp;lt;h,a&amp;gt;, assigned : a ) : (write&amp;lt;h&amp;gt;) ()
fun (!)( &lt;span class=&quot;kw&quot;&gt;ref&lt;/span&gt; : &lt;span class=&quot;kw&quot;&gt;ref&lt;/span&gt;&amp;lt;h,a&amp;gt; ) : &amp;lt;read&amp;lt;h&amp;gt;|e&amp;gt; a&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Functions which no observable leakage of internal references can be marked as total if the types of references are not referenced in either the argument types or the return type. Thus &lt;em&gt;local state&lt;/em&gt; can be embedded inside pure functions. For instance the following function is total even though internally it uses mutable references:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode rust&quot;&gt;
&lt;code class=&quot;sourceCode rust&quot;&gt;fun localState() : total &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;
{
  val z = &lt;span class=&quot;kw&quot;&gt;ref&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;);
  set(z, &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;);
  set(z, &lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;);
  &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; (!z);
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The compiler itself also has a level of syntactic sugar for working with references. The &lt;code&gt;val&lt;/code&gt; introduces an immutable named variable, however the &lt;code&gt;var&lt;/code&gt; syntax can be used to define a mutable reference concisely.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode rust&quot;&gt;
&lt;code class=&quot;sourceCode rust&quot;&gt;val z = &lt;span class=&quot;kw&quot;&gt;ref&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)     
var z : &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;co&quot;&gt;// Identical to above&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Variables can be updated using &lt;code&gt;:=&lt;/code&gt; operator.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode rust&quot;&gt;
&lt;code class=&quot;sourceCode rust&quot;&gt;set(z, &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;) 
z := &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;            &lt;span class=&quot;co&quot;&gt;// Identical to above&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Thus we can write pseudo-imperative logic like the following counter function:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode rust&quot;&gt;
&lt;code class=&quot;sourceCode rust&quot;&gt;fun bottlesOfBeer() {
  var i := &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;; 
  &lt;span class=&quot;kw&quot;&gt;while&lt;/span&gt; { i &amp;gt;= &lt;span class=&quot;dv&quot;&gt;99&lt;/span&gt; } {
    println(i)
    i := i + &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;
  }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;References can be passed as arguments to functions and heap parameters can be quantified as type variables, allowing us to write generic functions which operate over references of any type.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode rust&quot;&gt;
&lt;code class=&quot;sourceCode rust&quot;&gt;fun add-refs( a : &lt;span class=&quot;kw&quot;&gt;ref&lt;/span&gt;&amp;lt;h,&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;&amp;gt;, b : &lt;span class=&quot;kw&quot;&gt;ref&lt;/span&gt;&amp;lt;h,&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;&amp;gt; ) : st&amp;lt;h&amp;gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; {
    a := &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;
    b := &lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;
    (!a + !b)
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The combination of the ability to read, write, and allocate is given the name &lt;code&gt;st&lt;/code&gt; in the standard library to denote stateful computations.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode rust&quot;&gt;
&lt;code class=&quot;sourceCode rust&quot;&gt;alias st&amp;lt;h&amp;gt; = &amp;lt;read&amp;lt;h&amp;gt;,write&amp;lt;h&amp;gt;,alloc&amp;lt;h&amp;gt;&amp;gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using this kind of effect system for tracking references gives us a powerful abstraction for denoting regions of logic that have &lt;em&gt;read barriers&lt;/em&gt; and &lt;em&gt;write barriers&lt;/em&gt; and separating mutation from pure logic in a way that is machine checkable. Future languages that had this kind of information at compile-time could use it to inform compilation of regions of local mutation into more efficient efficient code with still maintaining guarantees about the boundaries of pure logic.&lt;/p&gt;
&lt;h4 id=&quot;effect-polymorphism&quot;&gt;Effect polymorphism&lt;/h4&gt;
&lt;p&gt;Finally we’d also like to be able to write higher order functions which can take arguments which are either effectful or pure and incorporate their effects as part of the types of output. The common &lt;code&gt;map&lt;/code&gt; function is a higher-order function which takes a list and applies a given function argument over each element of the list. To write this in a language with an effect system we need to be able to refer to the effect of the function argument as a type variable (&lt;code&gt;e&lt;/code&gt; in this example) and use it the output type for &lt;code&gt;map&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode rust&quot;&gt;
&lt;code class=&quot;sourceCode rust&quot;&gt;fun map( xs : list&amp;lt;a&amp;gt;, f : (a) -&amp;gt; e b ) : e list&amp;lt;b&amp;gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the case where we apply a total arithmetic function over the list, we simply get back a list of ints. While in the IO case we can apply a function like &lt;code&gt;println&lt;/code&gt; which will individually print each integer out to the console, and resulting type is a list of units. Both use cases are subsumed by the same function using this &lt;em&gt;parametric polymorphism&lt;/em&gt; over the abstract effect type variables.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;sourceCode rust&quot;&gt;
&lt;code class=&quot;sourceCode rust&quot;&gt;val e1 = map([&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;], println);   &lt;span class=&quot;co&quot;&gt;// console list&amp;lt;()&amp;gt;&lt;/span&gt;
val e2 = map([&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;], dbl);       &lt;span class=&quot;co&quot;&gt;// list&amp;lt;int&amp;gt;&lt;/span&gt;

fun dbl(x : &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;) : total &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;
{
  &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; (x+x)
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is still early days for effect system research. The key takeaway that I would like to push for future work is the observation that languages which aim to improve the ergonomics and performance of effect modeling cannot simply push the entire system into a library. There needs to be language-level support for both integrated effect types and annotations in the surface language for labeling subexpressions and giving hints to type inference. A lot of approaches to do this in Haskell, Scala, etc are inevitably doomed to poor ergonomics by this simple fact.&lt;/p&gt;
&lt;p&gt;There is a whole new level of static analysis tools that can be built by not just inferring types, but providing a whole new level of static information on top of our code that is otherwise tossed out by the compiler. This is a very exciting technique and I hope it bears more fruit in the coming decade.&lt;/p&gt;
&lt;h4 id=&quot;external-references&quot;&gt;External References&lt;/h4&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://www.fstar-lang.org/tutorial/&quot;&gt;F* Reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.eff-lang.org/&quot;&gt;Eff Programming Langauge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://koka-lang.github.io/koka/doc/kokaspec.html#sec-koka-language-specification&quot;&gt;Koka Language Specification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.microsoft.com/en-us/research/wp-content/uploads/2016/08/algeff-tr-2016-v3.pdf&quot;&gt;Algebraic Effects for Functional Programming - Daan Leijen&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
<pubDate>Sun, 22 Nov 2020 15:56:27 +0000</pubDate>
<dc:creator>psibi</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.stephendiehl.com/posts/exotic03.html</dc:identifier>
</item>
<item>
<title>Booting from a vinyl record</title>
<link>http://boginjr.com/it/sw/dev/vinyl-boot/</link>
<guid isPermaLink="true" >http://boginjr.com/it/sw/dev/vinyl-boot/</guid>
<description>&lt;p&gt;Most PCs tend to boot from a primary media storage, be it a hard disk drive, or a solid-state drive, perhaps from a network, or – if all else fails – the USB stick or the boot DVD comes to the rescue… Fun, eh? Boring! Why don’t we try to boot from a record player for a change?&lt;span id=&quot;more-2871&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://boginjr.com/wp-content/uploads/vinyl-boot1-scaled.jpg&quot; data-rel=&quot;lightbox-gallery-DGJZ4irK&quot; data-magnific_type=&quot;image&quot; data-rl_title=&quot;Vinyl boot, DOS disk&quot; data-rl_caption=&quot;&quot; title=&quot;Vinyl boot, DOS disk&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter size-large wp-image-2872&quot; src=&quot;http://boginjr.com/wp-content/uploads/vinyl-boot1-1024x576.jpg&quot; alt=&quot;&quot; width=&quot;1024&quot; height=&quot;576&quot; srcset=&quot;http://boginjr.com/wp-content/uploads/vinyl-boot1-1024x576.jpg 1024w, http://boginjr.com/wp-content/uploads/vinyl-boot1-300x169.jpg 300w, http://boginjr.com/wp-content/uploads/vinyl-boot1-768x432.jpg 768w, http://boginjr.com/wp-content/uploads/vinyl-boot1-1536x864.jpg 1536w, http://boginjr.com/wp-content/uploads/vinyl-boot1-2048x1152.jpg 2048w&quot; sizes=&quot;(max-width: 1024px) 100vw, 1024px&quot;/&gt;&lt;/a&gt;&lt;strong&gt;64 512 byte DOS boot disk on a 10″ record, total playing time 06:10 on 45 rpm&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So this nutty little experiment connects a PC, &lt;a href=&quot;http://boginjr.com/electronics/old/ibm5150/&quot;&gt;or an IBM PC to be exact&lt;/a&gt;, directly onto a record player through an amplifier. There is a small ROM boot loader that operates the built-in “cassette interface” of the PC (that was hardly ever used), invoked by the BIOS if all the other boot options fail, i.e. floppy disk and the hard drive. The turntable spins an analog recording of a small bootable read-only RAM drive, which is 64K in size. This contains a FreeDOS kernel, modified by me to cram it into the memory constraint, a micro variant of COMMAND.COM and a patched version of INTERLNK, that allows file transfer through a printer cable, modified to be runnable on FreeDOS. The bootloader reads the disk image from the audio recording through the cassette modem, loads it to memory and boots the system on it. Simple huh?&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://boginjr.com/wp-content/uploads/vinyl-boot3.png&quot; data-rel=&quot;lightbox-gallery-DGJZ4irK&quot; data-magnific_type=&quot;image&quot; data-rl_title=&quot;vinyl-boot3&quot; data-rl_caption=&quot;&quot; title=&quot;vinyl-boot3&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter size-full wp-image-2873&quot; src=&quot;http://boginjr.com/wp-content/uploads/vinyl-boot3.png&quot; alt=&quot;&quot; width=&quot;771&quot; height=&quot;574&quot; srcset=&quot;http://boginjr.com/wp-content/uploads/vinyl-boot3.png 771w, http://boginjr.com/wp-content/uploads/vinyl-boot3-300x223.png 300w, http://boginjr.com/wp-content/uploads/vinyl-boot3-768x572.png 768w&quot; sizes=&quot;(max-width: 771px) 100vw, 771px&quot;/&gt;&lt;/a&gt;&lt;strong&gt;The vinyl loader code, in a ROM&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;(It can also reside on a hard drive or a floppy, but that’d be cheating)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;And now to get more technical: this is basically a merge between &lt;a href=&quot;http://boginjr.com/it/sw/dev/bootlpt-86/&quot;&gt;BootLPT/86&lt;/a&gt; and &lt;a href=&quot;http://boginjr.com/it/sw/dev/5150caxx/&quot;&gt;5150CAXX&lt;/a&gt;, minus the printer port support. It also resides in a ROM, in the BIOS expansion socket, but it does not have to. The connecting cable between the PC and the record player amplifier is the same as with 5150CAXX, just without the line-in (PC data out) jack.&lt;br/&gt;The “cassette interface” itself is just &lt;a href=&quot;http://www.minuszerodegrees.net/5150/misc/5150_post_test_131.jpg&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; data-rel=&quot;lightbox-gallery-DGJZ4irK&quot; data-magnific_type=&quot;image&quot; data-rl_title=&quot;&quot; data-rl_caption=&quot;&quot; title=&quot;&quot;&gt;PC speaker&lt;/a&gt; timer channel 2 for the output, and 8255A-5 PPI port C channel 4 (PC4, I/O port 62h bit 4) for the input. BIOS INT 15h routines are used for software (de)modulation.&lt;br/&gt;The boot image is the same 64K BOOTDISK.IMG “example” RAM drive that can be downloaded at the bottom of the BootLPT article. This has been turned into an “IBM cassette tape”-protocol compliant audio signal using 5150CAXX, and sent straight to a record cutting lathe.&lt;br/&gt;Vinyls are cut with an RIAA equalization curve that a preamp usually reverses during playback, but not perfectly. So some signal correction had to be applied from the amplifier, as I couldn’t make it work right with the line output straight from the phono preamp. In my case, involving a vintage Harman&amp;amp;Kardon 6300 amplifier with an integrated MM phono preamp, I had to fade the treble all the way down to -10dB/10kHz, increase bass equalization to approx. +6dB/50Hz and reduce the volume level to approximately 0.7 volts peak, so it doesn’t distort. All this, naturally, with any phase and loudness correction turned off.&lt;br/&gt;Of course, the cassette modem does not give a hoot in hell about where the signal is coming from. Notwithstanding, the recording needs to be pristine and contain no pops or loud crackles (vinyl) or modulation/frequency drop-outs (tape) that will break the data stream from continuing. However, some wow is tolerated, and the speed can be 2 or 3 percent higher or lower too.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://boginjr.com/wp-content/uploads/vinyl-boot2.jpg&quot; data-rel=&quot;lightbox-gallery-DGJZ4irK&quot; data-magnific_type=&quot;image&quot; data-rl_title=&quot;Vinyl boot ROM&quot; data-rl_caption=&quot;&quot; title=&quot;Vinyl boot ROM&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter size-large wp-image-2874&quot; src=&quot;http://boginjr.com/wp-content/uploads/vinyl-boot2-1014x1024.jpg&quot; alt=&quot;&quot; width=&quot;1014&quot; height=&quot;1024&quot; srcset=&quot;http://boginjr.com/wp-content/uploads/vinyl-boot2-1014x1024.jpg 1014w, http://boginjr.com/wp-content/uploads/vinyl-boot2-297x300.jpg 297w, http://boginjr.com/wp-content/uploads/vinyl-boot2-150x150.jpg 150w, http://boginjr.com/wp-content/uploads/vinyl-boot2-768x776.jpg 768w, http://boginjr.com/wp-content/uploads/vinyl-boot2.jpg 1400w&quot; sizes=&quot;(max-width: 1014px) 100vw, 1014px&quot;/&gt;&lt;/a&gt;&lt;strong&gt;Bootloader in a ROM; being an EPROM for a good measure&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;And that’s it! For those interested, the bootloader binary designed for a 2364 chip (2764s can be used, through an adaptor), can be obtained &lt;a href=&quot;http://boginjr.com/apps/vinyl-boot/BootVinyl.bin&quot;&gt;here&lt;/a&gt;. It assumes an IBM 5150 with a monochrome screen and at least 512K of RAM, which kind of reminds me of my setup (what a coincidence). The boot disk image can be obtained at the bottom of the BootLPT/86 article, and &lt;a href=&quot;http://boginjr.com/misc/bootdisk.flac&quot;&gt;here’s its analog variant&lt;/a&gt;, straight from the grooves 🙂&lt;/p&gt;
&lt;p&gt;&lt;iframe src=&quot;https://www.youtube.com/embed/bqz65_YfcJg&quot; width=&quot;640&quot; height=&quot;360&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;allowfullscreen&quot;&gt;&lt;span data-mce-type=&quot;bookmark&quot; class=&quot;mce_SELRES_start&quot;&gt;﻿&lt;/span&gt;&lt;/iframe&gt;&lt;/p&gt;

</description>
<pubDate>Sun, 22 Nov 2020 12:51:59 +0000</pubDate>
<dc:creator>ruik</dc:creator>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://boginjr.com/it/sw/dev/vinyl-boot/</dc:identifier>
</item>
<item>
<title>Facebook Is Going After Its Critics in the Name of Privacy</title>
<link>https://www.wired.com/story/facebook-is-going-after-its-critics-in-the-name-of-privacy/</link>
<guid isPermaLink="true" >https://www.wired.com/story/facebook-is-going-after-its-critics-in-the-name-of-privacy/</guid>
<description>&lt;p&gt;&lt;span class=&quot;lead-in-text-callout&quot;&gt;Facebook has brought&lt;/span&gt; its might down upon a small but scrappy academic team who've done brilliant work in exposing the company's failures to contain scams, rip-offs, and political disinformation. If the team doesn’t fully dismantle its public-interest research project and delete its data by November 30, &lt;a class=&quot;external-link&quot; data-event-click=&quot;{&amp;quot;element&amp;quot;:&amp;quot;ExternalLink&amp;quot;,&amp;quot;outgoingURL&amp;quot;:&amp;quot;https://twitter.com/robleathern/status/1320164751696068612&amp;quot;}&quot; href=&quot;https://twitter.com/robleathern/status/1320164751696068612&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;Facebook says&lt;/a&gt;, it “may be subject to additional enforcement action.” Why? Because the $775 billion company wants to protect our privacy.&lt;/p&gt;
&lt;div class=&quot;callout callout--inset-left callout--has-top-border&quot; readability=&quot;7.7451923076923&quot;&gt;
&lt;p&gt;WIRED OPINION&lt;/p&gt;
&lt;p&gt;ABOUT&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cory Doctorow&lt;/strong&gt; (&lt;a class=&quot;external-link&quot; data-event-click=&quot;{&amp;quot;element&amp;quot;:&amp;quot;ExternalLink&amp;quot;,&amp;quot;outgoingURL&amp;quot;:&amp;quot;https://pluralistic.net/&amp;quot;}&quot; href=&quot;https://pluralistic.net/&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;pluralistic.net&lt;/a&gt;) is a special adviser to the Electronic Frontier Foundation and a science fiction novelist. His latest book is &lt;a class=&quot;external-link&quot; data-event-click=&quot;{&amp;quot;element&amp;quot;:&amp;quot;ExternalLink&amp;quot;,&amp;quot;outgoingURL&amp;quot;:&amp;quot;https://us.macmillan.com/books/9781250757531&amp;quot;}&quot; href=&quot;https://us.macmillan.com/books/9781250757531&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;&lt;em&gt;Attack Surface&lt;/em&gt;&lt;/a&gt;, the third Little Brother book.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;For political dirty tricksters, Facebook's self-serve ad platform is a juicy target: If you want to spread disinformation, the platform will help you narrow down the people who'll see it. A canny political actor can use Facebook ads to show lies and vile incitements to people who might act on them, and, just as important, &lt;em&gt;not&lt;/em&gt; show those ads to the rest of the world, which would reveal the way politicos talk when they think there's nobody here but us chickens.&lt;/p&gt;

&lt;p&gt;Facebook's been fined over this, its execs raked over the coals in Congress and the British Parliament, and it says it has learned its lesson, putting in place measures that will prevent it.&lt;/p&gt;
&lt;p&gt;Enter Ad Observer and the Ad Observatory, a project of NYU's Tandon School of Engineering. Ad Observer is a browser plug-in that Facebook users voluntarily install. The plug-in scrapes (makes a copy of) every ad that a user sees and sends it to Ad Observatory, a public database of Facebook ads that scholars and accountability journalists mine to analyze what's really happening on the platform. Time and again, they've discovered gross failures in Facebook's ability to enforce its own policies and live up to its promises.&lt;/p&gt;
&lt;p&gt;Facebook has threatened legal action against the Ad Observatory team, claiming that the Ad Observer plug-in violates its terms of service. They want it removed by the Monday after Thanksgiving, or else. In other words, Facebook wants independent, third-party scrutiny of its ad policy enforcement to end at the very moment that its enforcement failures are allowing false claims about the outcome of the 2020 election to spread, challenging the legitimacy of American democracy itself. This deadline also roughly coincides with Facebook’s reinstatement of political advertising. In other words, the company is opening the door to far more paid political disinformation at the very same moment that it is shutting out independent watchdogs who monitor this stuff.&lt;/p&gt;

&lt;p&gt;The company swears this action is not driven by a desire to silence its critics. Rather, it says it is acting on its well-known commitment to preserving its users' privacy.&lt;/p&gt;

&lt;p&gt;No, really.&lt;/p&gt;
&lt;p&gt;Both of these arguments are (to use a technical term) rank bullshit. Facebook's claims that it can enforce its terms of service as though they were laws that had been passed by Congress are based on an anti-competitive suit it brought against a (now defunct) startup called Power Ventures more than a decade ago. In that suit, the company argued that allowing Facebook users to read their messages without logging into Facebook was a crime.&lt;/p&gt;
&lt;p&gt;The Power Ventures decision was bonkers, but that's because the law it invoked is even worse. The 1986 Computer Fraud and Abuse Act was rushed into law after Ronald Reagan saw Matthew Broderick in the movie &lt;em&gt;WarGames&lt;/em&gt; and panicked (no, really). It's so broadly worded that if you squint right and read every third word, the Power Ventures decision makes a kind of topsy-turvy sense.&lt;/p&gt;
&lt;p&gt;But Facebook's legal theories have a serious problem. Over the past decade, the courts have substantially narrowed the precedent from Power Ventures, thanks to a pair of suits: &lt;em&gt;Sandvig v. Barr&lt;/em&gt; and &lt;em&gt;HiQ v. LinkedIn&lt;/em&gt;. These modern precedents make Facebook's legal arguments a hard stretch.&lt;/p&gt;
&lt;p&gt;Even more of a stretch: Facebook's claims that it is only acting to protect its users' privacy. Set aside for a moment the absurdity of the 21st century's worst privacy invaders positioning themselves as privacy champions. Stipulate that Facebook has found privacy religion and is really here to defend its users' privacy.&lt;/p&gt;
&lt;p&gt;Facebook does not protect its users' privacy by vetoing their explicit choice to share whatever ads they see with Ad Observatory. Privacy, after all, is not the situation in which no one knows anything about you. (That's secrecy.) Privacy is when you decide who gets to know stuff about you, and what stuff they get to know. As Facebook elegantly puts it in its own policy documents: &quot;What you share and who you share it with should be your decision.&quot;&lt;/p&gt;
</description>
<pubDate>Sun, 22 Nov 2020 11:35:43 +0000</pubDate>
<dc:creator>URfejk</dc:creator>
<og:description>The company wants to shut down an academic study of political ad targeting, just as it prepares to reinstate targeted political ads.</og:description>
<og:image>https://media.wired.com/photos/5fb6f9db88b1084ad9976504/191:100/w_1280,c_limit/OpEd-Ad-Observatory-h_14950555.jpg</og:image>
<og:title>Facebook Is Going After Its Critics in the Name of Privacy</og:title>
<og:type>article</og:type>
<og:url>https://www.wired.com/story/facebook-is-going-after-its-critics-in-the-name-of-privacy/</og:url>
<dc:language>en-us</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.wired.com/story/facebook-is-going-after-its-critics-in-the-name-of-privacy/</dc:identifier>
</item>
<item>
<title>The Birth of Unix with Brian Kernighan</title>
<link>https://corecursive.com/058-brian-kernighan-unix-bell-labs/</link>
<guid isPermaLink="true" >https://corecursive.com/058-brian-kernighan-unix-bell-labs/</guid>
<description>&lt;p&gt;&lt;span&gt;When you work on your computer, there are so many things you take for granted: operating systems, programming languages, they all have to come from somewhere.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;In the late 1960s and 1970s, that somewhere was Bell Labs, and the operating system they were building was UNIX.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;They were building more than just an operating system though. They were building a way to work with computers that had never existed before. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;In today’s episode I talk to Brian Kernighan about the history of Unix.&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;Quotes&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;&lt;span&gt;“If you wanted, you could go sit in your office and think deep thoughts or program, or write on your own blackboard or whatever, but then come back to the common space when you wanted to.“ &lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span&gt;“I found it easier to program when I was trying to figure out the logic for myself rather than trying to figure out where in the infinite stack of documentation was the function I needed. So for me, programming is more like creating something rather than looking it up, and too much of today’s programming is more like looking it up.”&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span&gt;“If what I find challenging or hard or whatever is also something that other people find hard or challenging or whatever, then if I do something that will improve my lot, I’m perhaps improving their lot at the same time.”&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Transcript:&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;&lt;span&gt;Note:  This podcast is designed to be heard. If you are able, we strongly encourage you to listen to the audio, which includes emphasis that’s not on the page.  The podcast page for&lt;/span&gt;&lt;/em&gt; &lt;a href=&quot;https://corecursive.com/brian-kernighan-unix-bell-labs/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;em&gt;&lt;span&gt;this episode is here&lt;/span&gt;&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Adam: &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;When you work on your computer, there are so many things you take for granted: operating systems, programming languages, they all have to come from somewhere. In the 1960s, that somewhere was Bell Labs, and the operating system they were building was Unix. They were building more than just an operating system though. They were building a way to work with computers that had never existed before. To find out more, I reached out to this guy.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brian: &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;I’m Brian Kernighan, and at the moment, I teach computer science at Princeton University.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adam: &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;He’s the K in K&amp;amp;R, the famous book about C that still tops most recommended book lists. He was part of this computer science research group at Bell Labs for 30 years. He’s going to share the story of the creation of Unix, and hopefully, I’m going to try to figure out some of their secrets to being so impactful. Along the way, we’re going to have to learn about the Unix philosophy and printing patent applications, but we’re also going to have to learn about 10-kilo chocolate bars and fake demos to the CIA, and of course, British satirical magazines.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adam:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;The story of Unix is a story about Bell Labs, so let’s start at the beginning when Brian is a grad student and he gets an internship to work there for the summer.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Bell Labs is a very big building, a sequence of connected buildings, and probably 3,000 people working over these long multi-story buildings. The thing that I remember most clearly about the first day, and I think it was the first day of the first internship, so call it the summer of 1967, and I got an office, and if I recall correctly, I had an office to myself. So this is something that’s unheard of in the modern era.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;But I had an office to myself, and I was sitting there in my office at probably 11:00 or something like that in my first morning, I wondered, “What the heck do I do? I have no idea what’s going on.” And this older gentleman came past my office and he said, “Hi, I’m Dick… Let’s go to lunch.” I thought, “Well, okay.” I went off to lunch with Dick…, whose name I hadn’t caught. We had a good lunch, he was an interesting kind of curmudgeonly, but intriguing guy. Then after lunch, he went off somewhere else.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;I snuck past my office to his office on the same corridor to see who the heck he was because everybody had name tags on the doors. It turns out it was Dick Hamming, the inventor of error-correcting codes.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adam:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Dick Hamming is aka Richard Hamming. His Wikipedia page is huge. He worked on the Manhattan project programming computers to calculate the equations needed to develop nuclear weapons. One year after this lunch with Brian, he would win the Turing Award, the so-called Nobel Prize of Computing for his work on error-correcting codes. Hamming is also famous for this talk he gave on the secret to having impact in your professional life.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;The talk was called You and Your Research, and it was basically a retrospective on his career, thinking whether there were general lessons that would help other people in some way to have a better career. He was very, very interesting, and I think a good example of somebody with clearly lots of talent, but not a super genius type, who made the most of what he had. Who in every way, amplified so that he compounded his effect on the world. The other thing that’s maybe is appropriate for today, he used to say that he would reserve Friday afternoons for thinking great thoughts.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;He would sit in his office, he would put his feet on the desk, and he would think great thoughts, whatever that might be. It was usually introspection on himself or on where was the field going, or what might happen in the future? What might you do to take advantage of that or deal with it in some way or other? This is Friday morning when we’re talking, and I don’t get that luxury on Friday afternoons very often, but it’s a useful way to think of it. You say, “I’m going to stop and do it regularly to take stock of what’s going on, and in some way, think about, ‘What could I be doing that in some way would be better, that would be more useful for me or my family or the world or whatever?'”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;He did that quite religiously, you went in after lunch on Friday, you’d find him sitting in his office thinking great thoughts. So he’s fun.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adam:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;I love this advice, it presupposes that if I just had my Fridays free, and I wrote thinking great thoughts on my calendar, I would upgrade thoughts. I mean, maybe that’s the case, I’ll give it a try. There’s one concept though that Hamming is most famous for, and that is about how you choose what to work on.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;The way he told it to me and probably lots of others was that he used to eat with some group of people like chemists, I think the specific thing was, and he would eat at their table at lunchtime, big cafeteria setting. He would sit down with chemists and talk to them and he would ask them what they were working on, and whether what they’re working on could possibly lead to a Nobel Prize. The answer was often no, not a chance, and that was the point where he’d say, “Well, then why are you working on it? Because if it couldn’t at least potentially lead to a Nobel Prize, it isn’t important. Why are you wasting your time on something that isn’t important?”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adam:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Whether intentionally or not, Brian followed this advice. When he returned to Princeton to work on his thesis, he was working on graph partitioning, which we now know is in some sense, equivalent to the traveling salesman problem. You have to find an optimum route that the salesman would travel from city to city minimizing travel distance. To complete his thesis, Brian had to work on the computers of Princeton at the time. Computers today are a lot different than they were in 1967 and ’68 at Princeton. At the time, computers were all about Fortran and punch cards.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Fortran was designed in a card environment very definitely, and I assume the cards came before Fortran, but in my mind, they’re very strongly linked. And so yes, it was basically one statement per line, which was, therefore, one physical card. And so, when you wrote a program, you had to punch it on these punch cards, and then make sure you kept them in order and things like that and then you handed them to somebody who operated a very big, expensive machine. And a while later, back would come to your results, very often where it’s just something like there was a syntax error somewhere, and you had to find the cards that were wrong, replace them with new cards that were right and repeat the process, but with a very, very long latency that could be often measured in hours or sometimes even days.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;It’s not exactly like an instant compilation. And Fortran itself is a kind of clunky language as well in part reflecting those early days in computing, and partly just the fact that we didn’t understand a lot, and the computers themselves were not particularly sophisticated. Then finally, Fortran was intended for scientific computing. It was not intended for, let’s say, general-purpose system programming or anything like that. All of those things meant that although the program was a lot of fun, it’s not the same as it became five or 10 years later, and it has continued to evolve.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adam:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;I had to watch a couple of YouTube videos to get a sense of this punch card world. A punch card is like an index card, but it’s wider because it has 80 columns. And each of these columns corresponds to a single character. You punch holes in that column to indicate what letters should go there, and so each punch card represents one line of Fortran code. People build the programs this way, punching these cards, putting them into big boxes in order that they would carry around, then you take someplace to give them to a computer operator who would give them to the computer that would read all this in and run the program.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adam:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;So if you had a 1,000-line program, you would have 1,000 cards. There were no screens, no interactive output. You gave your cards to the computer operator and waited for your printout that was the result of your program. Computers were expensive and giant, so they wanted to maximize the throughput. Your program might be doing expensive mathematical calculations, but you could also just be doing word processing. One card might say, “In bold, print my thesis,” and the next would say, “Print, by Brian Kernighan,” and so on. It’s like a verbose way of using a typewriter, except the advantage is you could change the cards around and have it reprinted.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;There was a lot of interest in text formatting at that time. When I was at MIT in ’66, I used a program called RUNOFF, which was written by Jerry Saltzer. I learned only very recently that Jerry actually wrote that for doing his Ph.D. thesis, which is kind of neat, but I didn’t have that, so I was at a position of having to get my thesis into printed form. I decided, what the heck? And so I wrote a very, very cheesy little formatting program, it was about 1,000 lines of Fortran that did straightforward stuff like make sure the lines were all the same length and even justified the right margin, which I think in retrospect was dumb.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;And the one other thing it did… punch cards were unfortunately only upper case. I mean, you five finger salutes that you could do that would get a lowercase, but nobody ever did them. So it was uppercase. So part of my little format or was just thing that did automatic capitalization. So it would find the beginning of the sentence and make sure that was uppercase, convert everything else to lowercase, and so on. I could in that way print something that looked like a thesis.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;And of course, you needed escape characters to defeat the automatic capitalization in the places where it wasn’t appropriate. Fortran didn’t handle characters very well at all, so there was a lot of faking to make that part work, but it was fine. And so thesis was basically three boxes of cards, 6,000 cards in each box, probably weighed 10, 12 pounds, five kilograms. And so you’d take these three boxes, 1,000 cards of which the first half of the first box was the program and then the remaining 5,000 cards was the thesis. And you would take those three boxes and you’d hand them to the operator. And an hour or two or three later back would come a printed version of thesis again. And you’d just keep iterating until it was good enough.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adam:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;I think this is a foreshadowing or something. Part of your thesis was writing a program to do your thesis. So the front part of your cards for your thesis where the implementation for a small language that would let you format your thesis, and then the thesis.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Yeah, it’s exactly right. It’s entirely accidental, but in a sense, yeah. It’s building tools that let you do things, and the tools that are often some kind of specialized language.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adam:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;While Brian was working on his thesis, back at Bell Labs, Ken Thompson and Dennis Ritchie were working on a project to bring more interactive computing to the world. The project was called Multics. Multics was a time-sharing operating system. The insight of time was that although a single person couldn’t effectively use up the clock time of a computer if you could hook up a number of people to the computer, that maybe they could. And you could do this via time-sharing, basically giving each person a slice of each second so that it felt like they had full access to the computer while really the computer was switching around among them.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adam:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;If you had full access to a computer during your time slice, you didn’t need a punch card system, you could use a teletype terminal. Teletype terminals looked like large typewriters combined with printers and maybe a phone line, and they were originally used for sending telegraphs, I think. You could type in commands and send it directly to the computer using the telephone line and then have the results printed out right away right above you. And with a timeshare system, you could hook up a number of these to a single computer and split time between them.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adam:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Teletype terminals communicated over telnet, a protocol that’s still in use to this day, although I guess SSH has largely replaced it. The ASCII format of text documents was created for these teletype machines, and that’s why it has weird control characters like the end of the transmission. This was such an interesting time. It was the birth of these interactive computers. Anyways, back to the Multics project&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Multics system was that joint venture of MIT and Bell Labs and actually General Electric, which made the hardware. And so the people doing the software were at MIT and at Bell Labs, and that got people used to a very nice computing environment, not a batch environment with cards, but an interactive environment, which is of course today.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adam:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Multics was not a success. Bell Labs pulled out of the project, no more operating system work at Bell Labs. It was a waste of time, that became the sentiment of management. Ken in particular thought the system was too complex, but it was interactive and it was far ahead of this batch processing punch card world.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;And so that left the people, Ken in particular, but also Dennis Ritchie and a handful of others, with a taste for real nice computing environments, but not having one. And so they did a variety of things. They lobbied management to get a high-end machine so they could build their own operating system, and that went nowhere. And they spent a lot of time thinking about design, what would go into a time-sharing system, sort of like Multics but presumably not so complicated, but certainly stealing good ideas from Multics. Multics had many good ideas. I mean, that’s the place where in parallel, I guess Ken was exploring this PDP-7 environment.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adam:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;A PDP-7 was mini computer produced by Digital Equipment Corporation in 1964. Sounds like a misnomer to me because when I Google it, it looks like a series of giant cabinets with a small desk attached to it and some computery looking parts. Anyhow, this PDP-7 at Bell Labs, it was obsolete, it had been produced in the early ’60s and nobody was using it, but it did have a graphics display, basically a very early computer monitor. Computer monitors didn’t exist much at that time. So Brian is awarded his PhD, and he starts working at Bell Labs full time. He has some early memories of this graphics display.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;The graphical display was then used for some of the games that Ken, and not long after Dennis Richie, did, which were things like Space Travel, where you had a complete, accurate model of the solar system and you could navigate your little rocket around the solar system and land on various things, so you can land on one of the moons of Jupiter or something like that. And there was also this Space War game, which was you and me shooting each other up, like the two-person version of the asteroid games that you sometimes see. And I wasted a lot of time on that. I think that game may have come from MIT and just been transplanted, but I don’t actually know. It was a lot of fun. And what little I know about orbital dynamics comes from playing that because he learned how to deal with gravity.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adam:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;The other interesting thing about the PDP-7 was the secondary storage. It basically had this giant disc drive, and Ken was interested in the best way to use it&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;He had been working on file system, experimenting with file system stuff on this PDP-7, just experiments to see how you could manage information on some giant secondary storage device. They had physically giant, not very much capacity. And so you had, I think, the rudiments of file system in mind if not actually implemented.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adam:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;So Ken has these ideas of a better, simpler Multics in mind. And coincidentally, around this time, his wife went off on vacation, leaving Ken with more spare time than he was generally used to.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Bonnie went off to California bearing their son who at the time, I think was a year old or something like that. And was there for three weeks. And so Ken figured that he was close and so he built himself basically a working operating system in three weeks. And I think you could argue that’s serious soccer productivity in some sense.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adam:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;I think that’s serious productivity by any measure. So that was the first version of Unix. They had an old computer, often a room to the side, with a teletype terminal. And from there, no more punch cards. Things started to pick up speed. This first operating system was written in PDP-7 assembly, but this is the bones of the Unix-like operating systems that are now everywhere. I mean, that’s crazy. Maybe that was the secret of this computer science research group, just have a Ken Thompson. I mean, how good of a programmer was he?&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;It’s one of those realizations that it probably dawned on me at some point just how astonishing he is as a programmer. We were interested in a document preparation software, going back to the text formatting for my thesis, and so on, and there are other people there as well. And so we had bought a typesetter that is a device… think of it as like a laser printer, but before laser printers were around, so it printed on photographic paper which you then had to develop, but it was the thing for doing high quality printed material. And we got it from a company and it turned out that the machine itself came with software that the software was just so buggered and it was completely useless. And so the question is, can we figure out, reverse engineer this machine so that we can create our own software to run it. And the device, in addition to its physical things for manipulating photographic film or paper had a mini-computer in it, it was called Computer Automation Naked Mini, something like that. It was basically another one of these wimpy, little 16 bit computers at this point. And all we had for that was a manual and that we knew the fact that the typesetter had one of these things in it. So it was the controller inside the typesetter.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;And what are you going to do with that? Well, what you need to do is you’ve got a bit of code that comes from the manufacturer, but it’s binary, what do you do with that? And so we’re sitting there late afternoon thinking, “Well, something’s got to be done.” And we as Ken Thompson, Joe Condon and myself.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adam:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Yeah, well, so if you just have ones and zeros, somehow you have to get like the instruction set or something, right?&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Yeah. Well, you had a manual for it, so you knew normally if their assembler corresponded to what bit patterns for the instructions. But we didn’t have any of the software itself for the Naked Mini, we just had some code that had been written in assembly language and then compiled down to bits, so we only had the bits. So you have to make some assumptions about what’s going on there. Part of that was that a lot of this stuff was stored in basically EPROM, things that are the equivalent of today’s flash memory, and so you had to figure out what was going on there as well. And that means extracting the bit patterns and then mutating them, is it big-endian or little-endian and things like that to figure out what is the code there that’s in those things.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;I said, “Geez, I don’t know,” and I went home for dinner, but this was interesting stuff. So I came back after dinner and in the interval, Ken had written the disassembler for this thing so that he could now see what the code was in the Naked Mini. And then at that point, he could write an assembler for it and then start writing his own code for it. And then over the next day, or so, he also wrote a version of an interpreter for the B language, which we then put on the typesetter as well.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;All of this is measuring hours to a day or two to get all this stuff up and running on a totally unfamiliar machine. It’s kind of the thing that you could do, I could do, but we wouldn’t be very fast at it probably. And for Ken, it was just like breathing. Oh, okay, done. Next.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adam:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;When Brian says he, or I could do this given enough time, I think he’s giving me far too much credit. This is astounding. I wouldn’t know where to start from having like a pamphlet on a CPU and some binary software and go to a working high level language interpreter, I wouldn’t even know how to get things onto this machine. What was your reaction? You come back from having dinner with your wife, and he’s like, “Oh, I’ve just assembled this.”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Yeah. I was just like, “Okay.” It was really fun. With typesetter was I think that the time that I worked closest with Ken, and work with is too strong, I was just mostly standing there watching him do it, but just seeing how effective he was as a programmer in there and figuring out how things had to work.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adam:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;You’re a professor now, you work with a lot of young students, I assume. How would you build a new Ken? Is that a thing where you could…&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Geez, it’d be nice to know. That’d be quite a growth industry. I don’t know whether they are grown or whether they’re just born that way and the ones who are lucky or were lucky find the outlet for it early on in something that then pays off for everybody. I suspect it’s more the latter.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adam:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;So we can’t create a Ken, but I guess if you get a chance to work with Ken or somebody like Ken, you should do it. Did you notice also how much Brian downplayed his own contribution? I think this is going to be an ongoing trend. Brian is very modest. I don’t know if that’s just because he’s Canadian or what, but I think probably he had a larger role than he would ever let on. But back to Unix V1. So this PDP-7 is working well, but the computer is obsolete. How can get a proper machine to run this on?&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;So Bell Labs, a scientific research place produced lots and lots of patent applications, typically one or two a day at that point. And those had to be formatted in a very specific way for the patent office, weird stuff, including things like numbering the lines. And at the time there was no commercial word processing systems that could handle numbering the lines, and so people in the Unix group at this point promised that they could deliver such a system so that the patent office could develop their prepare patent applications in the appropriate format, and that this would be delivered well before any commercial operation could provide the same thing.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;And the quid pro quo was that some part of the company, related to parts, I guess, would provide some of the money for acquiring the machine. And so this all came to pass. And so development went on at night when the patent typists were at home, and then in the daytime, just no software development because the typist for typing patent applications.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adam:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;That’s awesome. Yeah, that’s truly time-sharing. So the computer science research group at Bell Labs, it’s a pretty elite group, agrees to build a patent application system for the patent typists. This is strange. I’ve actually played similar games myself before where you know the company wants X and I want to use technology Y. And so I say, “Hey, Y is the perfect thing for X?” And you can sort get some legs for your side project if you try to tie it to something important. I’m not totally sure how ethical it is, but in this case, it worked for the Unix group. I think for them, it meant that the operating system had real users and very practical use cases to hit. And this constraint of being this patent document rendering machine was actually very helpful for the early development.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;You notice there’s this text formatting thread that goes through all of this stuff?&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adam:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Yeah, totally.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;It’s kind of weird, but it was in some ways a focus and something that kept things together in a way.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Adam:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Once they had their PDP-11 and they ported Unix to it, they needed somewhere to put it. And that place became The Unix room.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;There’s a classic picture, it may be the one in Wikipedia or something, that shows Ken Thompson and Dennis Ritchie at presumably age late 20s, early 30s, or something like that in a room. And there’s a PDP-11 behind them. It was on the sixth floor of Bell Labs. That was the top floor, and that’s one of those things like if you live in a garret you have these sloping walls and you store old stuff that gets dusty. And so this was the sixth floor of Building Two where this was going on. It was a big plain room and nothing there. And the corridor wasn’t well lit and there was old junky equipment from World War II left alone behind a chain-link fence which was just not very nice.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;But the room itself was perfectly fine. You had a PDP-11 in there and some of these model 33, and maybe I guess ultimately 37 teletypes, and a few tables and chairs, and people would hang out there and do things. And some of it would be working on the operating system or some of the supporting software, or some of it was just drop in and it was kind of a social center as well. So it was there for a while and then it moved into slightly nicer quarters, one floor down. And so it was more a place where people could hang out and work and also have a coffee machine rather than going to the horrible vending machines down the hall.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;But in all cases, it was a place where people could hang out, socialize. So it was like the open work environment that you see in many places today, except… It’s probably just as noisy, but it was people all working on the same thing, or very strongly related. And I think that made it work out.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Adam:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Eventually, the teletype terminals were replaced by computer terminals with proper monitors, and these computer terminals start spreading all over Bell Labs, everyone’s got one. But The Unix room remains important. Several important innovations came out of that room. One of these is the hierarchical file system.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Early computers, like if you used big IBM computers in roughly 1960 or something like that, they didn’t really have a file system. There were ways to store information, but they were incredibly clunky and they were very device-specific. When you talked about accessing information from secondary storage, you had to know all the weird properties like the number of cylinders on the disc to be able to do it. And so the idea that, gee, you could have directories within directories, kind of obvious in retrospect, but doing it that was, if I recall correctly, absolutely part of Multics or it was variations. And what Ken did in Unix was to make that very clean and simple.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;So the actual interface to the file system was remarkably small, half a dozen system calls gives you pretty much everything you need to manipulate the information. And the actual implementation itself, once you’ve seen the system call interface, you think, “I could actually build that.” And so it’s neat in that respect. And now you look at it and you say, “Well, of course, that’s obvious. What else would you do?” Because what you want is the file system to provide some abstraction hierarchy as a nice abstraction, you want it to be independent of the specific kinds of devices down there, and it certainly does that. It hides things like how many blocks there are, or whatever else.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adam:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Maybe it’s because I don’t have any experience of computers from this era, but I didn’t know the insulating computer programs from the specifics of various hard-drive layouts was an innovation. Another thing that was innovative about the Unix system was the interactive shell, the command line that we all know and love.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;I think, again, that was Multics idea, and then it was cleanly implemented in Unix. Again, the original shells were not super good for programming, but that got better as people realized, Jake, it’s just another program you could write programs in it. And that had the good points, if you didn’t like the show, you could replace it. And it had bad points that meant there were a lot of shelves and there still are. And I just discovered one of my new Macs has switched to Zsh. I’m sure it’s an absolutely fine shell, it was actually done by an undergrad at Princeton long ago, but I’ve never used it.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;And so now, my startup reverts to Bash, not because it’s necessarily better, but because they know it.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adam:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;I think it’s backwards compatible.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;It may be, and it probably is, but it’s one of these things where I don’t care enough at this point. So I temporarily at least stick my head in the sand and go with the one I know.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Adam:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;This has come up quite a few times, I guess, like texts and text formatting. One of the things about the shell, I guess, is input and output streams of text, where did that idea come from? Why is it powerful?&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;The original idea of the standard input and the standard output that you could redirect those to files? I think that was fairly early on. That was probably in almost the first version that let’s say, the first version that had a manual. Oh, that was probably there at that point. And so that’s pretty neat, the idea that I can run the program and, oh, rather than seeing it could come out on paper, I can stick it in a file easily, and the program itself doesn’t know that has happened because the service of redirection is done by the shell, the program just knows that you’re writing someplace.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;That’s probably quite early the idea of pipes, where you could take the output of one program and run it into the input of another program without an intermediate file, that appeared almost out of nowhere, somewhere, and I will guess, call it 1973 or something like that. The idea had been in the air for a while, Doug McIlroy was particularly very interested in being able to connect programs together like garden hose, connect another couple of programs in to get some job done. And he’d been talking up then for a long time.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adam:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Doug had wanted annotation for being able to describe entire graphs of computations and then execute them. I’m not even sure we have an easy way to do that now.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;And that’s a nice idea in theory, but it’s much harder to figure out how to do that in practice. And so I think, and I don’t know where that was, can, or what’s the saying, wait a minute, linear is good enough, let’s see what we can do with that, and not worry about the other stuff. But nobody figured out quite how to do it nor a sensible syntax. And then at some point, I’m pretty sure it was Ken, figured out how to do it, it wasn’t very hard. And there was very, very briefly a bad notation for it. And that probably didn’t last more than a few days. And then somebody, and I don’t know whether it was Ken or Doug, came up with the vertical bar, the pipe symbol these days.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;And that happened, and that was one of those things that just clicked instantly. Everybody looked at it and said, “Oh, wow, of course.” And then there was this frenzy of going in and fixing up programs so that they would work properly in pipelines. So that error messages didn’t clutter up a pipeline, programs didn’t put out or hid files that they would if there were no file names, they would read from the standard input and they would write to the standard output no matter what. And a lot of programs worked that way anyway, so it wasn’t a problem, but there were others where it wasn’t so obvious.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Think about sort, you can produce any output from asserting program until you’ve seen all the input. So putting a sort in the middle of a pipeline is a fraud in a sense, because it’s a dead stop and all this stuff piles up until it’s sorted and then it goes out again, but it didn’t matter. So sort was repackaged so that it read from its standard input and wrote to its standard output so that you could stick a sort in a pipeline. And of course, that’s something, I don’t know about you, but I do that almost every day in some way or others, I’m fiddling around with something.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;And so that’s the kind of unification and that happened in an incredibly short period of time. Literally, it measured probably days where people start to realize, “Wow, you can do things like that.” And then, of course, that led to these lots of ideas of screwball connections.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adam:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Yeah. It seems obvious in retrospect, but I guess there are lots of ways where it could go wrong. You could have come up with a system where each program had to have some parameter where it took the next thing to call or something, you could have conceivably pushed it down into the individual programs to handle this composition, that probably wouldn’t have been as compositional or something, I don’t know.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;There’s an early example of that. When MS-DOS came along, it had file named Wildcards, stars for file names, and so on, but that was implemented not at a shell level, but at each individual program implemented that. And that meant that some programs had it and some didn’t and the ones that had it, who might be irregular. And so that was a right idea, but totally botched implementation. So putting it all in the Schellman, it was unified,&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adam:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;It’s hard to overstate pipes, I get why they lead to a Cambrian explosion of little programs being developed and glued together in this Unix room because they give you a composition. No matter how you write your program, you can glue it together with other programs and you can use shell scripts as first-class programs. To me, this makes me think of like early functional programming. It’s just inputs and outputs and composing things together, gluing them together. &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Adam:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Part of what made all this innovation happen was the community and the culture that was born out of this Unix room.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;If you wanted, you could go sit in your office and think deep thoughts or program, or write on your own blackboard or whatever, but then come back to the common space when you wanted to. And some people just lived in the common space, Ken did, for example, he was rarely in this office. I was mostly in my office, but I would go get coffee every hour or two and talk to people and sit down in a chair and read whatever random thing had come by and so on. This was all of course, before laptop computers, so you were pretty much wired to some particular place if you wanted to talk to a computer,&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adam:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;You could be in your office working on something and then once it’s working, you head in for coffee and you’re like, “Check out this it’s… “&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Yeah. That kind of thing. It was very much. And the whole building was, I think, geared up rather well for people to interact with each other. There was very, very long corridors within a long corridor, but then things sticking off the sides. And so the people in the computing science research operation were fundamentally in two of those little side corridors, and you’d go like this to go back and forth. And the Unix room was back on one end of the main corridor, at least at one point, or it was up on the sixth floor, between the two little side corridors. So it was relatively compact, but the whole operation did seem to encourage people to run into each other in the hall.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adam:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;I work from my home office, I guess now many people do, but it’s interesting to hear Brian talk about this community that was built around a physical space around this Unix room. I wonder how much of what they built relates to the fact that they were just sharing a single machine, they were also sharing a common room, and a common table, and a common espresso machine.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;I just remember it as being a nice place that you could sit and listen to the ambient conversation, which was often interesting or people would bring in things.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Adam:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;One thing they would bring in is 10-kilo chocolate bars, a 10-kilogram chocolate bar is massive. If it was shaped like a Hershey bar, it would be roughly the size of a coffee table.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;they would put a 10-kilogram chocolate bar in the middle of this table, and of course, it wasn’t long before you had little chocolate fragments all over the place. It was just an unbelievable mess, but it was good chocolate. So people would come in and they would go take a knife and go pump and carve off an ounce or two of chocolate and leave a lot of fragments. And I’m sure that whoever hit that terrible job of cleaning up this place must’ve been really irritated. So I remember that kind of thing.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;And another thing that I remember, a rather odd thing, Dennis Ritchie, who sometimes was there, but I think more often in his office, his sister who had lived in England gave him a subscription to this English satire publication called Private Eye. And so Dennis would bring that in and stick it on the table, presumably beside the chocolate bar. And I found it funny to read this stuff. They had interesting cartoons, but it was very British. And I think if you weren’t in the UK, a lot of this stuff would just go right over your head.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;And I’m sure an enormous amount of it went over my head, but Dennis would bring it in and I’d go in and I’d pick up Private Eye and I would read it for 10, 20 minutes and get some chuckle out of it or something like that. So fairly trivial memory, but there was just lots of little things like that that were fun.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adam:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Unix doesn’t stay limited to the Unix room in the computer science research group in the patent typists, it starts spreading around Bell Labs. People would hear about it and they’d want to find out more.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Occasionally, you would come into the unit room and you would discover that one of the places off to the side of it, because there was a bigger room and a couple of smaller rooms this side, you would discover some august who was being shown the wonders of Unix or whatever else we were doing. And so you would see people that were in some way, well known, coming through, “Oh, who’s that” Whatever. Carly Fiorina is one I remember distantly, she was at that time working at AT&amp;amp;T and then she went on to a variety of things, including HP. And I have no idea where she is now, but people like that well-known people.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adam:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Oh, nice.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;There was also a period when we did demos of Unix, and this was probably a little earlier, the maybe mid to late ’70s. We would do demos for distinguished visitors who were coming through and they would be accompanied by distinguished upper management from Bell Labs and dog and pony shows. And so I met a number of interesting people that way. Perhaps the most interesting was William Colby, who at the time was head of the CIA.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adam:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;What did you show him?&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;This is one of these things, an interesting story, I guess. The idea of Unix and I don’t know whether this ever resonated with people who weren’t programmers, but the idea was that you could build things very quickly by combining stuff that already existed. And so you could do shell pipelines, for example, so you could take two or three or four programs that did interesting independent things, and then glue them together into some sequence that did a specific task. And it was easier to do that, at least to prove feasibility or explore it of read and write a special program.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;And the specific one that we often used was a spellchecker, one that would basically take a document, split it up into words, canonicalize it in lower case or something. And then compare that to a dictionary and spit out the words that were in the document, but not in the dictionary. So those are plausible contenders for spelling detection. And you could write that pipeline practically, just type it because it wasn’t very complicated. And so you would demonstrate that, for example, because this is a time when word processing didn’t really exist in any sense. And so, “Gee, computers can check your spelling, what a neat idea.” And so we were choosing-&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adam:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;It’s like even putting line numbers on pages was a bridge too far, right?&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Yeah, exactly. Whereas of course, that’s a one-liner etc. So I would demonstrate that. The problem was that that pipeline and these were days when the machines were exceptionally slow, that pipeline took too long to check the spelling of a reasonable document. Well, it might take 30, 40 seconds to check the spelling of a document, and you don’t want to keep a distinguished visitor waiting 30 or 40 seconds while this thing runs. So knowing that Colby was going to show up, what I did of course, was run the program the day before, collect the output in a file. And then what I showed Colby was actually something that basically said sleep for two seconds, and then print the result I had done the day before. And so this is a classic example of demo engineering.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adam:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;That’s hilarious. Yeah. And he went back to the CIA and he’s like, “These computers they have are super fast at Bell Labs.” I’m thinking of computing today, we each have our own computers. You guys there, you were all on the same machine in the same like the hierarchical file system. So I don’t know, I’m wondering, was that part of the magic that you could write something and then somebody else could use it?&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Yeah, I think it was. Having everybody in the same file system made it actually quite easy to share whatever you were doing, probably in retrospect, too easy to share because most people didn’t bother with permission. So everything was written by everybody, and that could lead to potential issues. I could read your email or I could fiddle your program or whatever. But since it was a small group of very definitely cooperating people, that wasn’t an issue at the time. But just the fact that all of the, for example, the source code of everything was there, and so you could look at something, anything from the operating system through to any of the programs that ran on it and see what they did.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;And then if you had an idea, you could make a new version of it that improved it in some way or other. And in fact, the only real rule there was, you changed it last, it’s yours. At one point, I had an idea for improving the text editor, ed at the time. And so I went in and added some things to ed, very small stuff, but in that sense. And I was just perfectly fine, but I guess technically at least for a brief period, I owned ed. That encouraged you to be somewhat careful. But I think that having everything on the same computer was contributed to a sense of community as well. And part of the community was the shared information, but the other part of it was simply knowing that other people were logged in at the same time. So the command called Who, which just told you who was logged in. That just by itself was definitely a community builder because it would, when you run Who, it would tell you who was logged in, but also when they had last done something. And if you sent them a message saying help or whatever, you might get a response. So I think that living on the same computer, both the shared information, but also the shared we’re all listed right here and we can talk to each other easily was an improvement.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Google, for example, keeps a lot of their source code in one single giant tree at this point. And that’s definitely good for code discovery and so on, but it doesn’t address the problem of whether your teammates are all sitting there online at the same time and easily accessible.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Adam:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;This development model of sharing a tree of source code, sharing a bin directory, it’s interesting how in some ways, it mirrors how I work today. I ping teammates on Slack, we review PRs together, we’re all making improvements to the same software. It’s like in the 1970s, they’ve figured this out and we’re just learning to recreate it.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;I don’t want to sound cynical, but I think in a lot of cases, that’s absolutely true, that there was a perfectly good mechanism that was appropriate 40, 50 years ago. And then it falls out of use and then people rediscover it, modified by whatever the current issues are or something like that. So, yeah, there’s an awful lot of reinvention in that sense. That’s absolutely fine because the circumstances are somewhat different.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adam:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Yeah. The Unix room is now like a Slack channel somewhere.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Yeah, exactly.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adam:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Unix spread outside of Bell Labs, Bell wasn’t allowed to make any money on it. So they distributed it pretty freely, including source code. People started adding contributions to it and it had a snowball effect. It wasn’t open source, but it was close to it. It had a very permissive license.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Adam:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;In my mind, these guys like Brian, like Ken Thompson, like Dennis Ritchie, these guys were like elite programmers. And part of my goal in this interview was to figure out what some of their secrets are. But Brian said programming is a lot different today.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;I found it easier to program when I was trying to figure out the logic for myself rather than trying to figure out where in the infinite stack of documentation was the function I needed. So for me, programming is more like creating something rather than looking it up, and too much of today’s programming is more like looking it up.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adam:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;That makes sense. And yeah, I can see magical, I guess, if you’re just pulling something in to do something. And I do have a sense though, how like… So you guys, you’re in the Unix room, you were building all these little tools and the tools were starting to accrete and like no JS, is just a world that is accreted all of the things, or Python. So it’s just that the end state of this process or something.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Yeah, it probably is. Accretion is probably the right world, and I don’t know how that ends if it ever does.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adam:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;There’s a book, A Deepness in the Sky, the science fiction book, takes place like thousands of years in the future on a spaceship or something like that. One of the main characters is a programmer archeologist because that’s the job at that point is like, everything has been accreted and his job is mainly running various VMs of old systems and hooking them back together. And these archeologist, because he have to dig and try to find the thing-&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;This is thousands of years in the future or just today?&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adam:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Yeah. Well, science fiction is always about the time it’s written, I think more than the future. But he makes reference in the book, like the system he’s using uses Unix timestamps. So the vision is some future where he’s still running something based on what you guys created back then, which is, I don’t know, if it’s a scary or a beautiful vision or a scary vision.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;That’s mind boggling. I assume that the time, _t went to 64 bits in there somewhere.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adam:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Yeah. I don’t know. That’s funny.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;At the beginning, you were talking about Richard Hamming and his work on important problems and you were working on trying to find this problem that’s equivalent to the traveling salesman problem. And Ken was trying to port a video game onto an old machine. It seems like the advice was not well-placed there, you couldn’t tell from the beginning which… Like yours seems like the more important problem, I guess.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Yeah. That’s interesting. Do as I say, not as I do, because you’re right, it’s hard to think that working on a better video game or whatever was in some sense, working on an important problem. I think underneath it, maybe let’s say, Ken was working on an important problem which was, how do you create a programming environment in which programmers can be more productive? And then Dennis added to that, the observation, how do you make it into a community, so the people who are doing it are working in some sense together?&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;And I think those are important problems, seeing whether what you’re doing on a day-to-day basis in some vague way is related to that. But all of that time sight, it’s certainly at the time, I didn’t think that any of that stuff was important in that sense&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adam:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;This is interesting, the important work that these guys did, it didn’t seem like important work at the time. So how do you choose something important to work on?&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;I think the closest you get to important is thinking, “It’s hard to write programs, what can we do to make it easier to write programs?” And that’s partly something that I’ve felt myself, Gm, writing Fortran, Fortran is really hard to write with, can I do something better on that? And if what I find challenging or hard or whatever is also something that other people find hard or challenging or whatever, then if I do something that will improve my lot, I’m perhaps improving their lot at the same time.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adam:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Yeah. I think that you’ve done a great job at that. I think you’re too modest about your programming skills. I somehow suspect that you’re better than you’re letting on.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Don’t do a code review on me, please. Thank you.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adam:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;But this has been great. So thanks for your time.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;And it was great pleasure, fun talking to you. Well, talk to you again sometime.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Adam:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;I think my takeaway is forget about Richard Hamming’s advice, do what’s interesting, help, smooth out problems, find the community that you can collaborate with. And if you find a community you really gel with, treasure it. And who knows, maybe what you did a couple of decades later will turn out to be really important. What’s your takeaway listener? If you like this episode, do me a huge favor and tell someone else to try out the show. Maybe you could text somebody you know and let them know, “Hey, check out The CoRecursive Podcast.” The main thing I’m trying to do right now is just grow my listenership. So if you have any ideas for how to do that, let me know, but I think the key is just word of mouth. So think about who you know who might like the podcast. Until next time, thank you so much for listening.&lt;/span&gt;&lt;/p&gt;


</description>
<pubDate>Sun, 22 Nov 2020 10:14:19 +0000</pubDate>
<dc:creator>rodrigo975</dc:creator>
<og:type>article</og:type>
<og:title>The Birth of UNIX with Brian Kernighan - CoRecursive Podcast</og:title>
<og:description>When you work on your computer, there are so many things you take for granted: operating systems, programming languages, they all have to come from somewhere. In the late 1960s and 1970s, that somewhere was Bell Labs, and the operating system they were building was UNIX. They were building more than just an operating system […]</og:description>
<og:url>https://corecursive.com/058-brian-kernighan-unix-bell-labs</og:url>
<og:image>https://corecursive.com/wp-content/uploads/2020/10/CoRecursive-Featured-Image-2.png</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://corecursive.com/058-brian-kernighan-unix-bell-labs/</dc:identifier>
</item>
<item>
<title>WhiteHat Jr’s founder files $2.6M defamation suit against critic</title>
<link>https://techcrunch.com/2020/11/22/whitehat-jrs-founder-files-2-6m-defamation-suit-against-critic/</link>
<guid isPermaLink="true" >https://techcrunch.com/2020/11/22/whitehat-jrs-founder-files-2-6m-defamation-suit-against-critic/</guid>
<description>&lt;p id=&quot;speakable-summary&quot;&gt;Karan Bajaj, an Indian entrepreneur who teaches meditation and in his recent book invites others to live a life away from the noise, is going after the most vocal critic of his startup.&lt;/p&gt;
&lt;p&gt;Bajaj, founder of &lt;a href=&quot;https://techcrunch.com/2020/08/05/indias-byjus-acquires-whitehat-jr-for-300-million/&quot;&gt;coding platform WhiteHat Jr&lt;/a&gt;, has filed a defamation case against Pradeep Poonia, an engineer who has publicly criticized the firm for its marketing tactics, the quality of the courses on the platform, and aggressive takedowns of such feedback.&lt;/p&gt;
&lt;p&gt;Most of the customers of WhiteHat Jr, which is aimed at kids, live in America, and demand for its one-to-one classes have surged nearly 90% this year, according to the startup.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&quot;https://www.scribd.com/document/485381422/Karan-Bajaj-Anr-vs-Pradeep-Poonia&quot;&gt;the lawsuit&lt;/a&gt; — in which Bajaj (pictured left above) is seeking $2.6 million in damages — Poonia has been accused of infringing trademarks and copyright of properties owned by WhiteHat Jr, defaming and spreading misleading information about the startup and its founder, and accessing the company’s private communications app.&lt;/p&gt;
&lt;p&gt;The lawsuit also accuses Poonia of publicly sharing phone numbers of WhiteHat Jr employees and making strong accusations such as likening the startup’s marketing tactics to “child sexual abuse.”&lt;/p&gt;
&lt;p&gt;The lawyers further claim that Poonia recorded sessions of some classes conducted by WhiteHat Jr, asked questions that were not relevant to the course with the “humiliate and harass” the teachers and then posted them online.&lt;/p&gt;
&lt;p&gt;“As some of the one-on-one communications between the Plaintiffs’ teachers and the Defendant have demonstrated, the former have felt extremely threatened and harassed by the Defendant which is even more pertinent given that the Plaintiffs’ entire workforce of 11,000 teachers is female,” the suit says.&lt;/p&gt;
&lt;p&gt;“The Defendant’s activities have critically affected the Plaintiffs’ business and resulted in loss of its goodwill and reputation, and the confidence of its customers in its business. It is submitted that as a consequence of the Defendant’s tweets, Plaintiffs have suffered a steep dip in the conversion rate from trial classes to actual registrations which has severely affected revenue its revenue.”&lt;/p&gt;

&lt;p&gt;But the lawsuit, riddled with spelling and grammatical errors, appears to be also indicative of just how little criticism WhiteHat Jr, owned by India’s second most valuable startup Byju’s, is willing to accept.&lt;/p&gt;
&lt;p&gt;According to internal posts of a Slack channel of WhiteHat Jr shared by Poonia, the startup has aggressively used copyright protection to take down numerous unflattering feedback about the startup in recent months.&lt;/p&gt;
&lt;p&gt;The suit also raises concern with Poonia accusing WhiteHat Jr of “murdering” an imaginary kid that featured in one of its earlier ads.&lt;/p&gt;
&lt;p&gt;A 12-year-old child named “Wolf Gupta” appeared in earlier ads of WhiteHat Jr, which claimed that the kid had landed a lucrative job at Google. The kid does not exist, the lawyers of Bajaj say in the suit. Ironically that was also the argument Poonia, who spent a long time trying to unearth more information about this supposed poster child of WhiteHat Jr, was making in his tweets.&lt;/p&gt;

&lt;p&gt;Scores of education startups in India have reported skyrocketing growth in recent months as schools remain shut across the country amid the coronavirus pandemic. Byju’s is the most valuable edtech startup in the world with a roster of marquee backers &lt;a href=&quot;https://techcrunch.com/2020/06/25/mary-meekers-bond-invests-in-indian-online-learning-giant-byjus/&quot;&gt;including Mary Meeker&lt;/a&gt;‘s Bond.&lt;/p&gt;
&lt;p&gt;Even as most Indians tend not to pay for online services — just ask Facebook, which has amassed over 400 million users in India and makes little in the country — the education category is an outlier. Indian families continue to spend heavily on their children’s education in hopes of paving the way for a better future.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Further reading: &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Rage against the machine: &lt;a href=&quot;https://the-ken.com/story/byjus-silencing-of-online-dissent/&quot;&gt;behind Byju’s swift silencing of dissent&lt;/a&gt; (The Ken)&lt;/p&gt;
&lt;p&gt;India’s &lt;a href=&quot;https://themorningcontext.com/indias-whitehatjr-is-startup-hell/&quot;&gt;WhiteHat Jr is startup hell&lt;/a&gt; (The Morning Context)&lt;/p&gt;
&lt;p&gt;WhiteHat Jr and the &lt;a href=&quot;https://www.forbesindia.com/article/take-one-big-story-of-the-day/whitehat-jr-and-the-curious-case-of-disappearing-dissent/63627/1&quot;&gt;curious case of disappearing dissent&lt;/a&gt; (Forbes India)&lt;/p&gt;
&lt;p&gt;Advertising body asks WhiteHat Jr to &lt;a href=&quot;https://www.forbesindia.com/article/special/exclusive-advertising-body-asks-whitehat-jr-to-pull-down-ads/63767/1&quot;&gt;pull down ads&lt;/a&gt; (Forbes India)&lt;/p&gt;
</description>
<pubDate>Sun, 22 Nov 2020 09:49:14 +0000</pubDate>
<dc:creator>villgax</dc:creator>
<og:title>WhiteHat Jr’s founder files $2.6M defamation suit against critic – TechCrunch</og:title>
<og:description>Karan Bajaj, an Indian entrepreneur who teaches meditation and in his recent book invites others to live a life away from the noise, is going after the most vocal critic of his startup. Bajaj, founder of coding platform WhiteHat Jr, has filed a defamation case against Pradeep Poonia, an engineer wh…</og:description>
<og:image>https://techcrunch.com/wp-content/uploads/2020/11/GettyImages-915416516.jpg?w=608</og:image>
<og:url>https://social.techcrunch.com/2020/11/22/whitehat-jrs-founder-files-2-6m-defamation-suit-against-critic/</og:url>
<og:type>article</og:type>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://techcrunch.com/2020/11/22/whitehat-jrs-founder-files-2-6m-defamation-suit-against-critic/</dc:identifier>
</item>
<item>
<title>Matestack – Reactive UIs in pure Ruby</title>
<link>https://matestack.io</link>
<guid isPermaLink="true" >https://matestack.io</guid>
<description>&lt;p&gt;&lt;code&gt;app/matestack/components/card.rb&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;
&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Components::Card&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Matestack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Ui&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Component&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;requires&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:body&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:title&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:image&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;response&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;class: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;card shadow-sm border-0 bg-light&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;path: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;class: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;w-100&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;present?&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# calling the CardBody component rather than using Ruby method partials&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;card_body&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;title: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;body: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;app/matestack/components/card_body.rb&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;
&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Components::CardBody&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Matestack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Ui&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Component&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;requires&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:body&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:title&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;response&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Just an example. Would make more sense, if this component had&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# a more complex structure&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;class: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;card-body&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;heading&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;size: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;text: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;present?&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;paragraph&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;class: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;card-text&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;text: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;app/matestack/components/registry.rb&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Components::Registry&lt;/span&gt;

  &lt;span class=&quot;no&quot;&gt;Matestack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Ui&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Registry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;register_components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;card: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Components&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Card&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;card_body: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Components&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CardBody&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
</description>
<pubDate>Sun, 22 Nov 2020 05:27:12 +0000</pubDate>
<dc:creator>gls2ro</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://matestack.io/</dc:identifier>
</item>
<item>
<title>Gimp is 25 years old today</title>
<link>https://www.gimp.org/news/2020/11/21/25-years-of-gimp/</link>
<guid isPermaLink="true" >https://www.gimp.org/news/2020/11/21/25-years-of-gimp/</guid>
<description>&lt;p&gt;Exactly 25 years ago, Peter Mattis &lt;a href=&quot;https://www.gimp.org/about/prehistory.html#november-1995-an-announcement&quot; title=&quot;November 1995 Announcement&quot;&gt;wrote a message&lt;/a&gt; to several newsgroups announcing a new image editor called &lt;span class=&quot;caps&quot;&gt;GIMP&lt;/span&gt;.&lt;/p&gt;
&lt;img src=&quot;https://www.gimp.org/news/2020/11/21/25-years-of-gimp/2020-GIMP-25-th-birthday.jpg&quot; alt=&quot;Happy 25th birthday GIMP! - Wilber and co. comics strip&quot;/&gt;&lt;em&gt;“Happy 25th birthday &lt;span class=&quot;caps&quot;&gt;GIMP&lt;/span&gt;!” by &lt;a href=&quot;https://film.zemarmot.net&quot;&gt;Aryeom&lt;/a&gt;, Creative Commons by-sa 4.0&lt;/em&gt;
&lt;p&gt;We’ve been really busy ever since!&lt;/p&gt;
&lt;ul readability=&quot;18.870655412115&quot;&gt;&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;Had to come up with &lt;span class=&quot;caps&quot;&gt;GTK&lt;/span&gt;, a user interface toolkit of our own. Did not expect whole desktop environments, like &lt;span class=&quot;caps&quot;&gt;GNOME&lt;/span&gt; and Xfce, to become the result of that. &lt;span class=&quot;caps&quot;&gt;GTK&lt;/span&gt; is now a self-contained project used by thousands of developers.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;Surprisingly, got a few developers from Hollywood to write the beginnings of what became a new image processing engine called &lt;span class=&quot;caps&quot;&gt;GEGL&lt;/span&gt;, now used by a few more software projects too. We still have barely scratched the surface of what’s possible with &lt;span class=&quot;caps&quot;&gt;GEGL&lt;/span&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2.3518518518519&quot;&gt;
&lt;p&gt;Introduced Wilber, a little cute mascot who traveled the world and, admittedly, did some kinky things. They grow up so fast! (&lt;a href=&quot;https://www.gimp.org/about/splash/&quot;&gt;Check out the splash screen archive&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Helped kickstart &lt;a href=&quot;https://libregraphicsmeeting.org&quot; title=&quot;Libre Graphics Meeting Website&quot;&gt;Libre Graphics Meeting&lt;/a&gt; as an extended version of our annual meetup in 2006. Made a lot of new friends every year since then.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;Did our best to provide a sensible workflow to users by using common user interface patterns. That gave us a few questionable monikers like ‘Photoshop for Linux’, ‘free Photoshop’, and ‘that ugly piece of software’. We still can wholeheartedly agree with the latter one only!&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;Tried to do too many things at once with too few active developers to realistically get things done in a sensible timeframe. Made a lot of people think the project died while we were slaving away really. So we introduced some planning. It’s been paying off so far.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Made more people angry with software’s quirks than we’d like to. Got help on that from more passionate contributors than we expected to. We can certainly use more help still.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1.9304347826087&quot;&gt;
&lt;p&gt;Got ourselves an animation project called &lt;a href=&quot;https://film.zemarmot.net/en/&quot; title=&quot;ZeMarmot animation project&quot;&gt;ZeMarmot&lt;/a&gt; to make a positive feedback loop involving artists and developers. Continue using our chat for conversation with artists, some of which put &lt;span class=&quot;caps&quot;&gt;GIMP&lt;/span&gt; through &lt;em&gt;a lot&lt;/em&gt;. That really helps.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;Every day, we are one step closer to completing the boring yet extremely important work on refactoring &lt;span class=&quot;caps&quot;&gt;GIMP&lt;/span&gt; to make way for great new things. Things that we’ve been meaning to do for a long time. Things that users have been expecting for an even longer time.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The world is definitely a different place 25 years later. Louder, noisier, more demanding. Definitely less safe. But also full with warmth and humanity. We’ve seen waves of that washing up and down the rocky shores of &lt;span class=&quot;caps&quot;&gt;GIMP&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;We don’t really have any kind of big news for you to commemorate the anniversary. Sorry about that. We keep slaving away — in a more intelligent way these days, hopefully. But there might be cake.&lt;/p&gt;
</description>
<pubDate>Sun, 22 Nov 2020 03:22:41 +0000</pubDate>
<dc:creator>constantinum</dc:creator>
<og:url>https://www.gimp.org/news/2020/11/21/25-years-of-gimp/</og:url>
<og:title>GIMP - This is 25</og:title>
<og:image>https://www.gimp.org/images/frontpage/wilber-big.png</og:image>
<og:description>Exactly 25 years ago, Peter Mattis wrote a message to several newsgroups announcing a new image editor called GIMP.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.gimp.org/news/2020/11/21/25-years-of-gimp/</dc:identifier>
</item>
</channel>
</rss>