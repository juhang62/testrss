<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Ask HN: What are the best unknown books you have read?</title>
<link>https://news.ycombinator.com/item?id=22092108</link>
<guid isPermaLink="true" >https://news.ycombinator.com/item?id=22092108</guid>
<description>&lt;tr class=&quot;athing comtr&quot; id=&quot;22095326&quot; readability=&quot;13.700097370983&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;6.8500486854917&quot;&gt;&lt;tr readability=&quot;13.700097370983&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;3.6533592989289&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22095277&quot; readability=&quot;14.312399355878&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;7.1561996779388&quot;&gt;&lt;tr readability=&quot;14.312399355878&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;12.970611916264&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094155&quot; readability=&quot;21.690248565966&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;10.845124282983&quot;&gt;&lt;tr readability=&quot;21.690248565966&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;19.882727852135&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094777&quot; readability=&quot;6.2511627906977&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.1255813953488&quot;&gt;&lt;tr readability=&quot;6.2511627906977&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22095318&quot; readability=&quot;8.5958549222798&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.2979274611399&quot;&gt;&lt;tr readability=&quot;8.5958549222798&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;9.073402417962&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094922&quot; readability=&quot;6.3198380566802&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.1599190283401&quot;&gt;&lt;tr readability=&quot;6.3198380566802&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.0627530364372&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22095282&quot; readability=&quot;4.5098039215686&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.2549019607843&quot;&gt;&lt;tr readability=&quot;4.5098039215686&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094641&quot; readability=&quot;5.6258992805755&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.8129496402878&quot;&gt;&lt;tr readability=&quot;5.6258992805755&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.2194244604317&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094294&quot; readability=&quot;14.888535031847&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;7.4442675159236&quot;&gt;&lt;tr readability=&quot;14.888535031847&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;14.888535031847&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22095216&quot; readability=&quot;2.3461538461538&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22095269&quot; readability=&quot;4.3589743589744&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.1794871794872&quot;&gt;&lt;tr readability=&quot;4.3589743589744&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;3.9230769230769&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093061&quot; readability=&quot;3.766859344894&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094534&quot; readability=&quot;7.832361516035&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.9161807580175&quot;&gt;&lt;tr readability=&quot;7.832361516035&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;5.2215743440233&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094802&quot; readability=&quot;5.8427260812582&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.9213630406291&quot;&gt;&lt;tr readability=&quot;5.8427260812582&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;9.2509829619921&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094899&quot; readability=&quot;12.314345991561&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;6.1571729957806&quot;&gt;&lt;tr readability=&quot;12.314345991561&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094942&quot; readability=&quot;8.6905829596413&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.3452914798206&quot;&gt;&lt;tr readability=&quot;8.6905829596413&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;8.6905829596413&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22095141&quot; readability=&quot;2.9056603773585&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093087&quot; readability=&quot;6.7124802527646&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.3562401263823&quot;&gt;&lt;tr readability=&quot;6.7124802527646&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;9.5892575039494&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093224&quot; readability=&quot;7.4808259587021&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.740412979351&quot;&gt;&lt;tr readability=&quot;7.4808259587021&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;5.6106194690265&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093238&quot; readability=&quot;2.9278350515464&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22095048&quot; readability=&quot;5.0597014925373&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.5298507462687&quot;&gt;&lt;tr readability=&quot;5.0597014925373&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22095118&quot; readability=&quot;1.2162162162162&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093737&quot; readability=&quot;2.4609375&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.23046875&quot;&gt;&lt;tr readability=&quot;2.4609375&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094119&quot; readability=&quot;1.0928571428571&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094870&quot; readability=&quot;2.474025974026&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.237012987013&quot;&gt;&lt;tr readability=&quot;2.474025974026&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22095041&quot; readability=&quot;2.3801652892562&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094383&quot; readability=&quot;3.1851851851852&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22095124&quot; readability=&quot;3.2054794520548&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.6027397260274&quot;&gt;&lt;tr readability=&quot;3.2054794520548&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094439&quot; readability=&quot;2.2325581395349&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22095127&quot; readability=&quot;3.1532846715328&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093664&quot; readability=&quot;2.4767441860465&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.2383720930233&quot;&gt;&lt;tr readability=&quot;2.4767441860465&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094127&quot; readability=&quot;3.2&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.6&quot;&gt;&lt;tr readability=&quot;3.2&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094563&quot; readability=&quot;5.5970149253731&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.7985074626866&quot;&gt;&lt;tr readability=&quot;5.5970149253731&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;6.0634328358209&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22095135&quot; readability=&quot;4.8082191780822&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.4041095890411&quot;&gt;&lt;tr readability=&quot;4.8082191780822&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093676&quot; readability=&quot;7.51324828263&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.756624141315&quot;&gt;&lt;tr readability=&quot;7.51324828263&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;11.269872423945&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093944&quot; readability=&quot;20.100313479624&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;10.050156739812&quot;&gt;&lt;tr readability=&quot;20.100313479624&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;21.53605015674&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094038&quot; readability=&quot;2.4193548387097&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.2096774193548&quot;&gt;&lt;tr readability=&quot;2.4193548387097&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094079&quot; readability=&quot;1.5257731958763&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094595&quot; readability=&quot;6.4460431654676&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.2230215827338&quot;&gt;&lt;tr readability=&quot;6.4460431654676&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;5.0647482014388&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094114&quot; readability=&quot;10.718367346939&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;5.3591836734694&quot;&gt;&lt;tr readability=&quot;10.718367346939&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;7.8326530612245&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22095210&quot; readability=&quot;3.0991189427313&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093713&quot; readability=&quot;7.5189873417722&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.7594936708861&quot;&gt;&lt;tr readability=&quot;7.5189873417722&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;5.4303797468354&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093594&quot; readability=&quot;8.6080870917574&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.3040435458787&quot;&gt;&lt;tr readability=&quot;8.6080870917574&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;10.52099533437&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093928&quot; readability=&quot;7.3927392739274&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.6963696369637&quot;&gt;&lt;tr readability=&quot;7.3927392739274&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093055&quot; readability=&quot;7.7517630465444&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.8758815232722&quot;&gt;&lt;tr readability=&quot;7.7517630465444&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;8.7207334273625&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093344&quot; readability=&quot;18.72619047619&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;9.3630952380952&quot;&gt;&lt;tr readability=&quot;18.72619047619&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;13.798245614035&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093084&quot; readability=&quot;4.7962962962963&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093791&quot; readability=&quot;4.9264909847434&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.4632454923717&quot;&gt;&lt;tr readability=&quot;4.9264909847434&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.1054091539528&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093286&quot; readability=&quot;5.7413793103448&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.8706896551724&quot;&gt;&lt;tr readability=&quot;5.7413793103448&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;6.2198275862069&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093757&quot; readability=&quot;6.6120906801008&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.3060453400504&quot;&gt;&lt;tr readability=&quot;6.6120906801008&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.2506297229219&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093340&quot; readability=&quot;4.1438356164384&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.0719178082192&quot;&gt;&lt;tr readability=&quot;4.1438356164384&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093808&quot; readability=&quot;3.4285714285714&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.7142857142857&quot;&gt;&lt;tr readability=&quot;3.4285714285714&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093100&quot; readability=&quot;9.4699272967614&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093356&quot; readability=&quot;4.7039473684211&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.3519736842105&quot;&gt;&lt;tr readability=&quot;4.7039473684211&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.2335526315789&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093619&quot; readability=&quot;10.804179566563&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;5.4020897832817&quot;&gt;&lt;tr readability=&quot;10.804179566563&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;7.8575851393189&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093312&quot; readability=&quot;7.7452966714906&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.8726483357453&quot;&gt;&lt;tr readability=&quot;7.7452966714906&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;6.7771345875543&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094102&quot; readability=&quot;3.2505399568035&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094885&quot; readability=&quot;6.6934306569343&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.3467153284672&quot;&gt;&lt;tr readability=&quot;6.6934306569343&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;5.7372262773723&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094871&quot; readability=&quot;10.602409638554&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;5.3012048192771&quot;&gt;&lt;tr readability=&quot;10.602409638554&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;10.602409638554&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22095168&quot; readability=&quot;3.2758620689655&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22095197&quot; readability=&quot;1.1733333333333&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094410&quot; readability=&quot;10.019916142558&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;5.0099580712788&quot;&gt;&lt;tr readability=&quot;10.019916142558&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.0990566037736&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22095220&quot; readability=&quot;4.3838862559242&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.1919431279621&quot;&gt;&lt;tr readability=&quot;4.3838862559242&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094949&quot; readability=&quot;6.4728915662651&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.2364457831325&quot;&gt;&lt;tr readability=&quot;6.4728915662651&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22095207&quot; readability=&quot;5.3187772925764&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.6593886462882&quot;&gt;&lt;tr readability=&quot;5.3187772925764&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094228&quot; readability=&quot;7.7889182058047&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.8944591029024&quot;&gt;&lt;tr readability=&quot;7.7889182058047&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;6.490765171504&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093104&quot; readability=&quot;4.6632996632997&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.3316498316498&quot;&gt;&lt;tr readability=&quot;4.6632996632997&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;6.0622895622896&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093396&quot; readability=&quot;4.5469798657718&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.2734899328859&quot;&gt;&lt;tr readability=&quot;4.5469798657718&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093391&quot; readability=&quot;4.4&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094903&quot; readability=&quot;4.5797101449275&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.2898550724638&quot;&gt;&lt;tr readability=&quot;4.5797101449275&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.5797101449275&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093760&quot; readability=&quot;3.8918205804749&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094408&quot; readability=&quot;14.450836820084&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;7.2254184100418&quot;&gt;&lt;tr readability=&quot;14.450836820084&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;26.49320083682&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;28.217874140666&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Nice!&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;My &quot;best unknown&quot; in the espionage topic would be Gordon Winter's &lt;em&gt;Inside BOSS&lt;/em&gt;[1] which tells of the author's stint in the employ of South African intelligence during the apartheid era.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Sample passage:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;&amp;gt; I asked [Intel chief] H. J. van den Bergh how on earth British intelligence could obtain all the names of people who voted Communist in British elections. Surely the vote was secret. H J laughed and said any voter attending a polling station automatically had his name checked on the voters’ roll, which naturally gave his residential address. And when he voted he was given a numbered counterfoil. His voters’ roll number was written on the counterfoil stub which bore the same number.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;&amp;gt; ‘It is therefore possible for the voting slip to be related to the counterfoil stub, which then gives the man’s number on the voters’ roll,’ explained Van Den Bergh.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;&amp;gt; ‘But all the voting slips are locked in big black metal boxes and locked away after the elections, so how do British intelligence get to them?’&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;&amp;gt; H. J. van den Bergh shook his head sadly as if he was sorry I was such a simpleton.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;&amp;gt; ‘That’s the answer the British authorities will always give if anyone claims that ballot papers are secretly scrutinized. But let me ask you some very simple questions. First, you agree that the voting slips are placed in boxes and then filed away in some official building somewhere?’&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;&amp;gt; ‘Yes,’ I answered.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;&amp;gt; ‘And presumably those boxes are placed in a room?’&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;&amp;gt; ‘Yes.’&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;&amp;gt; ‘Does that room have a door?’&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;&amp;gt; ‘Yes, I suppose so.’&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;&amp;gt; ‘Does the door have a lock?’&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;&amp;gt; ‘I should imagine so.’&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;&amp;gt; ‘Is there a key to that lock?’&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;&amp;gt; ‘Yes, there must be.’&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;&amp;gt; ‘Then,’ said H. J. van den Bergh triumphantly, ‘somebody must look after the key.’&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;&amp;gt; Only then did I realize what he was getting at.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;1: &lt;a href=&quot;https://archive.org/details/INSIDEBOSS/page/n5&quot; rel=&quot;nofollow&quot;&gt;https://archive.org/details/INSIDEBOSS/page/n5&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093707&quot; readability=&quot;17.679525222552&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;8.839762611276&quot;&gt;&lt;tr readability=&quot;17.679525222552&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;18.170623145401&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22095246&quot; readability=&quot;1.3488372093023&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093782&quot; readability=&quot;7.5925925925926&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.7962962962963&quot;&gt;&lt;tr readability=&quot;7.5925925925926&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;6.1689814814815&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093793&quot; readability=&quot;3.4252873563218&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.7126436781609&quot;&gt;&lt;tr readability=&quot;3.4252873563218&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22095203&quot; readability=&quot;3.3417721518987&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.6708860759494&quot;&gt;&lt;tr readability=&quot;3.3417721518987&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094348&quot; readability=&quot;3.4782608695652&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.7391304347826&quot;&gt;&lt;tr readability=&quot;3.4782608695652&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093174&quot; readability=&quot;10.239669421488&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;5.1198347107438&quot;&gt;&lt;tr readability=&quot;10.239669421488&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;14.428625093914&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094683&quot; readability=&quot;10.837735849057&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;5.4188679245283&quot;&gt;&lt;tr readability=&quot;10.837735849057&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;12.644025157233&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094847&quot; readability=&quot;3.4009546539379&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094887&quot; readability=&quot;4.6903669724771&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.3451834862385&quot;&gt;&lt;tr readability=&quot;4.6903669724771&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094854&quot; readability=&quot;7.5057208237986&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.7528604118993&quot;&gt;&lt;tr readability=&quot;7.5057208237986&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;6.0983981693364&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093074&quot; readability=&quot;8.5547703180212&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.2773851590106&quot;&gt;&lt;tr readability=&quot;8.5547703180212&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;7.6042402826855&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094495&quot; readability=&quot;7.921686746988&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094069&quot; readability=&quot;7.2970711297071&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.6485355648536&quot;&gt;&lt;tr readability=&quot;7.2970711297071&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;3.6485355648536&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094514&quot; readability=&quot;9.6923076923077&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.8461538461538&quot;&gt;&lt;tr readability=&quot;9.6923076923077&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;8.8111888111888&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093592&quot; readability=&quot;1.2244897959184&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093554&quot; readability=&quot;11.954782608696&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;5.9773913043478&quot;&gt;&lt;tr readability=&quot;11.954782608696&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;8.1121739130435&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094302&quot; readability=&quot;1.6685393258427&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094560&quot; readability=&quot;7.5607843137255&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.7803921568627&quot;&gt;&lt;tr readability=&quot;7.5607843137255&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;5.1980392156863&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094631&quot; readability=&quot;2.1792452830189&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093029&quot; readability=&quot;4.5992366412214&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.2996183206107&quot;&gt;&lt;tr readability=&quot;4.5992366412214&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22095162&quot; readability=&quot;1.3571428571429&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094666&quot; readability=&quot;6.5692307692308&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.2846153846154&quot;&gt;&lt;tr readability=&quot;6.5692307692308&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;5.1615384615385&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094412&quot; readability=&quot;6.1866666666667&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094751&quot; readability=&quot;0.80487804878049&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093564&quot; readability=&quot;1.3548387096774&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22095147&quot; readability=&quot;6.3672316384181&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.183615819209&quot;&gt;&lt;tr readability=&quot;6.3672316384181&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093818&quot; readability=&quot;0.83720930232558&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094846&quot; readability=&quot;0.38888888888889&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22095001&quot; readability=&quot;2.4812030075188&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.2406015037594&quot;&gt;&lt;tr readability=&quot;2.4812030075188&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094767&quot; readability=&quot;2.28125&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093957&quot; readability=&quot;10.547058823529&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;5.2735294117647&quot;&gt;&lt;tr readability=&quot;10.547058823529&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;10.547058823529&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093113&quot; readability=&quot;9.3684210526316&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.6842105263158&quot;&gt;&lt;tr readability=&quot;9.3684210526316&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;7.0263157894737&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093460&quot; readability=&quot;4.5629370629371&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.2814685314685&quot;&gt;&lt;tr readability=&quot;4.5629370629371&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094548&quot; readability=&quot;2.3709677419355&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093936&quot; readability=&quot;3.5598705501618&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094624&quot; readability=&quot;4.5867768595041&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.2933884297521&quot;&gt;&lt;tr readability=&quot;4.5867768595041&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;3.6694214876033&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094852&quot; readability=&quot;2.5068493150685&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.2534246575342&quot;&gt;&lt;tr readability=&quot;2.5068493150685&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093578&quot; readability=&quot;6.7083333333333&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.3541666666667&quot;&gt;&lt;tr readability=&quot;6.7083333333333&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;7.1875&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093600&quot; readability=&quot;5.6103896103896&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093477&quot; readability=&quot;4.2583732057416&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.1291866028708&quot;&gt;&lt;tr readability=&quot;4.2583732057416&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;3.4066985645933&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093617&quot; readability=&quot;3.1746031746032&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094419&quot; readability=&quot;12.410163339383&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;6.2050816696915&quot;&gt;&lt;tr readability=&quot;12.410163339383&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22095112&quot; readability=&quot;6.2508361204013&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.1254180602007&quot;&gt;&lt;tr readability=&quot;6.2508361204013&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093237&quot; readability=&quot;3.4854771784232&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.7427385892116&quot;&gt;&lt;tr readability=&quot;3.4854771784232&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;3.9211618257261&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093892&quot; readability=&quot;15.732864674868&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;7.8664323374341&quot;&gt;&lt;tr readability=&quot;15.732864674868&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;11.799648506151&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094086&quot; readability=&quot;5.4508474576271&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.7254237288136&quot;&gt;&lt;tr readability=&quot;5.4508474576271&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093413&quot; readability=&quot;5.6478260869565&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.8239130434783&quot;&gt;&lt;tr readability=&quot;5.6478260869565&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;6.5891304347826&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093701&quot; readability=&quot;8.6231155778894&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.3115577889447&quot;&gt;&lt;tr readability=&quot;8.6231155778894&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;8.6231155778894&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094176&quot; readability=&quot;0.94117647058824&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094455&quot; readability=&quot;2.3362831858407&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094413&quot; readability=&quot;1.2857142857143&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093130&quot; readability=&quot;12.446808510638&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;6.2234042553191&quot;&gt;&lt;tr readability=&quot;12.446808510638&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;10.531914893617&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093190&quot; readability=&quot;2.2297297297297&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093629&quot; readability=&quot;5.45&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.725&quot;&gt;&lt;tr readability=&quot;5.45&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;5.45&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093260&quot; readability=&quot;0.78947368421053&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093141&quot; readability=&quot;15.295019157088&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;7.6475095785441&quot;&gt;&lt;tr readability=&quot;15.295019157088&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;17.684865900383&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22095223&quot; readability=&quot;0.58536585365854&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093478&quot; readability=&quot;4.6019108280255&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.3009554140127&quot;&gt;&lt;tr readability=&quot;4.6019108280255&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094425&quot; readability=&quot;3.3243243243243&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.6621621621622&quot;&gt;&lt;tr readability=&quot;3.3243243243243&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093297&quot; readability=&quot;6.5172413793103&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.2586206896552&quot;&gt;&lt;tr readability=&quot;6.5172413793103&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093506&quot; readability=&quot;5.3538461538462&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.6769230769231&quot;&gt;&lt;tr readability=&quot;5.3538461538462&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093599&quot; readability=&quot;5.11&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093912&quot; readability=&quot;4.3601895734597&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.1800947867299&quot;&gt;&lt;tr readability=&quot;4.3601895734597&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093556&quot; readability=&quot;5.4712643678161&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.735632183908&quot;&gt;&lt;tr readability=&quot;5.4712643678161&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094204&quot; readability=&quot;3.4909090909091&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.7454545454545&quot;&gt;&lt;tr readability=&quot;3.4909090909091&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.3636363636364&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093129&quot; readability=&quot;25.827190332326&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;12.913595166163&quot;&gt;&lt;tr readability=&quot;25.827190332326&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;31.787311178248&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;37.94226678821&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Depends on your definition of practically unknown. With that said, these are the four that immediately spring to mind as being both worth reading and relatively obscure (judging by date of publication in conjunction with being either out of print or with very few star ratings on Amazon).&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Did Monetary Forces Cause the Great Depression? - Peter Termin, 1975&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Termin is still going strong at MIT. His 1975 book was foundational for challenging Friedman on the cause of the Great Depression. Given what was to come in the 1980s this book quickly became overshadowed and destined for obscurity. However, it still provides an appropriate, timely lens to analyze monetary theory without the abstraction that has engrossed economics as of late.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;The Supreme Court in the American System of Government - Robert Jackson, 1955&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;A series of lectures created for a Harvard lecture series in 1954-55 by Justice Jackson. He suddenly died before being able to deliver them, but they were compiled in a book now out of print. Justice Jackson is widely regarded - across the aisle - as one of the most brilliant legal writers of our time (or perhaps of any time). While this book doesn't set out his entire judicial philosophy, or even do what the title says due to his untimely death, it does lay a valuable conception of the proper role of the SCOTUS within the Republic. Also recommended, to see both his pen and intellect in action, are his opinions in Korematsu v. United States and West Virginia State Board of Education v. Barnette.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;The Opium of the Intellectuals - Aron, 1955&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Amazon does a better job of summarizing than I could off the top of my head, so here you go: &quot;Raymond Aron's 1955 masterpiece The Opium of the Intellectuals, is one of the great works of twentieth- century political reflection. Aron shows how noble ideas can slide into the tyranny of &quot;secular religion&quot; and emphasizes how political thought has the profound responsibility of telling the truth about social and political reality-in all its mundane imperfections and tragic complexities.&quot;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;An incredibly difficult read that is worth trying to get through. Brimming with ideas and not without its own pitfalls. Tells the story of 20th Century intellectual history and thought as well as any could, although in a rather indirect way.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;The Protestant Establishment: Aristocracy and Caste in America (Aristocracy &amp;amp; Caste in America) - Baltzell, 1987&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;I'll let Amazon summarize again: &quot;This classic account of the traditional upper class in America traces its origins, lifestyles, and political and social attitudes from the time of Theodore Roosevelt to that of John F. Kennedy. Sociologist E. Digby Baltzell describes the problems of exclusion and prejudice within the community of white Anglo-Saxon Protestants (or WASPs, an acronym he coined) and predicts with amazing accuracy what will happen when this inbred group is forced to share privilege and power with talented members of minority groups.&quot;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;My summary would be: what will happen (hypothetically, remember the date of publication) when an ephemeral class (WASPs) suddenly disappear from their previous pedestal of influence? Prescient, widely applicable to other countries with their own quasi-classes, and deeply interesting for those less familiar with the subject.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093435&quot; readability=&quot;3.2847682119205&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.6423841059603&quot;&gt;&lt;tr readability=&quot;3.2847682119205&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093986&quot; readability=&quot;3.5056179775281&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.752808988764&quot;&gt;&lt;tr readability=&quot;3.5056179775281&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093349&quot; readability=&quot;2.3739130434783&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093552&quot; readability=&quot;17.708823529412&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;8.8544117647059&quot;&gt;&lt;tr readability=&quot;17.708823529412&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;14.265441176471&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093983&quot; readability=&quot;10.622388059701&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;5.3111940298507&quot;&gt;&lt;tr readability=&quot;10.622388059701&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;7.7253731343284&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094821&quot; readability=&quot;4.6363636363636&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.3181818181818&quot;&gt;&lt;tr readability=&quot;4.6363636363636&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;3.7090909090909&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093052&quot; readability=&quot;2.483606557377&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.2418032786885&quot;&gt;&lt;tr readability=&quot;2.483606557377&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093296&quot; readability=&quot;2.3428571428571&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093681&quot; readability=&quot;1.1666666666667&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093022&quot; readability=&quot;1.4240506329114&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094020&quot; readability=&quot;4.3195266272189&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.1597633136095&quot;&gt;&lt;tr readability=&quot;4.3195266272189&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.3195266272189&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094771&quot; readability=&quot;1.2424242424242&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093861&quot; readability=&quot;3.4210526315789&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.7105263157895&quot;&gt;&lt;tr readability=&quot;3.4210526315789&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094296&quot; readability=&quot;2.37&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094932&quot; readability=&quot;1.1627906976744&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093103&quot; readability=&quot;4.3728813559322&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093674&quot; readability=&quot;3.3178294573643&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.6589147286822&quot;&gt;&lt;tr readability=&quot;3.3178294573643&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093265&quot; readability=&quot;3.3576642335766&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.6788321167883&quot;&gt;&lt;tr readability=&quot;3.3576642335766&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093593&quot; readability=&quot;2.4545454545455&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.2272727272727&quot;&gt;&lt;tr readability=&quot;2.4545454545455&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093086&quot; readability=&quot;3.2&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.6&quot;&gt;&lt;tr readability=&quot;3.2&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093620&quot; readability=&quot;5.0332326283988&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094437&quot; readability=&quot;1.3548387096774&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093582&quot; readability=&quot;1.3521126760563&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094212&quot; readability=&quot;15.412823397075&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;7.7064116985377&quot;&gt;&lt;tr readability=&quot;15.412823397075&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;21.759280089989&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094352&quot; readability=&quot;7.616122840691&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.8080614203455&quot;&gt;&lt;tr readability=&quot;7.616122840691&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094789&quot; readability=&quot;1.5061728395062&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094219&quot; readability=&quot;47.596162631339&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;23.798081315669&quot;&gt;&lt;tr readability=&quot;47.596162631339&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;62.894929191412&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;104.20716582453&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;In no particular order, and some of these being more &quot;highly underrated&quot; as opposed to &quot;unknown&quot;, with the notable exception of Smith's &lt;em&gt;Wealth of Nations&lt;/em&gt; which is disturbingly un- and mis-read:&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;1. &lt;em&gt;Grammatical Man,&lt;/em&gt; by Jeremy Campbell (1982)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;&lt;a href=&quot;https://www.worldcat.org/title/grammatical-man-information-entropy-language-and-life/oclc/856698430&quot; rel=&quot;nofollow&quot;&gt;https://www.worldcat.org/title/grammatical-man-information-e...&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;My introduction to information theory and its diverse set of interrelated applications and phenomena.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;2. &lt;em&gt;Ecology and the Politics of Scarcity,&lt;/em&gt; by William Ophuls (1977)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;&lt;a href=&quot;https://www.worldcat.org/title/ecology-and-the-politics-of-scarcity-revisited-the-unraveling-of-the-american-dream/oclc/872523631&quot; rel=&quot;nofollow&quot;&gt;https://www.worldcat.org/title/ecology-and-the-politics-of-s...&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Distills the &lt;em&gt;Limits to Growth&lt;/em&gt; issue to its essence, and looks at the political implications, with a set of estimates of political developments which have played out closely.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;3. &lt;em&gt;An Inquiry to the Nature and Wealth of Nations,&lt;/em&gt; by Adam Smith (1776)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;&lt;a href=&quot;https://www.worldcat.org/title/inquiry-into-the-nature-and-causes-of-the-wealth-of-nations/oclc/1083940513&quot; rel=&quot;nofollow&quot;&gt;https://www.worldcat.org/title/inquiry-into-the-nature-and-c...&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;The best-known, but least-read, and most mis-read book on this list. Smith isn't perfect and has flaws. But his message is extraordinarily misunderstood and misrepresented. Even where he is wrong, he is instructive.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;4. &lt;em&gt;Commercialism and Journalism,&lt;/em&gt; by Hamilton Holt (1909)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;&lt;a href=&quot;https://www.worldcat.org/title/commercialism-and-journalism/oclc/639344712&quot; rel=&quot;nofollow&quot;&gt;https://www.worldcat.org/title/commercialism-and-journalism/...&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;A short but extraordinarily illuminating read on the influence of money and advertising on the press, coming near the beginning of the era of mass media.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;5. &lt;em&gt;Unix Power Tools,&lt;/em&gt; by Mike Loukides et al (1997)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;&lt;a href=&quot;https://www.worldcat.org/title/unix-power-tools/oclc/258450296&quot; rel=&quot;nofollow&quot;&gt;https://www.worldcat.org/title/unix-power-tools/oclc/2584502...&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;The book that really got me &quot;over the hump&quot; in understanding the Unix environment and tools. Now somewhat dated, though still highly useful.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;6. &lt;em&gt;A Short History of Progress,&lt;/em&gt; by Ronald Wright (2004)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;&lt;a href=&quot;https://www.worldcat.org/title/short-history-of-progress/oclc/1089834019&quot; rel=&quot;nofollow&quot;&gt;https://www.worldcat.org/title/short-history-of-progress/ocl...&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;An exploration of the story, question, and future, of progress.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;7. &lt;em&gt;Entropy and the Economic Process,&lt;/em&gt; by Nicholas Georgescu-Roegen (1971)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;&lt;a href=&quot;https://www.worldcat.org/title/entropy-law-and-the-economic-process/oclc/299362046&quot; rel=&quot;nofollow&quot;&gt;https://www.worldcat.org/title/entropy-law-and-the-economic-...&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;A re-thinking of economics taking thermodynamics into account. Famously difficult to read, but well worth the effort.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;8. &lt;em&gt;On the Damned Human Race,&lt;/em&gt; by Mark Twain (1962)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;&lt;a href=&quot;https://www.worldcat.org/title/mark-twain-on-the-damned-human-race/oclc/950982242&quot; rel=&quot;nofollow&quot;&gt;https://www.worldcat.org/title/mark-twain-on-the-damned-huma...&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;A darker, angrier, more bitter side of Twain, cracking open the sanitised version those familiar with &lt;em&gt;Tom Sawyer&lt;/em&gt; and &lt;em&gt;Huck Finn&lt;/em&gt; will know, and giving an insight to the darker side of late 19th and early 20th century America.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;9. &lt;em&gt;Energy and Civilization,&lt;/em&gt; by Vaclav Smil (2017)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;&lt;a href=&quot;https://www.worldcat.org/title/energy-and-civilization-a-history/oclc/1032365823&quot; rel=&quot;nofollow&quot;&gt;https://www.worldcat.org/title/energy-and-civilization-a-his...&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;A re-casting of history, not according to spiritual or cultural progress, Great Men, or social dynamics, but the access to and utilisation of energy sources.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;10. &lt;em&gt;Resistances to the Adoption of Technological Innovations,&lt;/em&gt; by Bernhard J. Stern (1937)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;&lt;a href=&quot;https://archive.org/details/technologicaltre1937unitrich/page/39&quot; rel=&quot;nofollow&quot;&gt;https://archive.org/details/technologicaltre1937unitrich/pag...&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;A fascinating exploration of the organised opposition to numerous significant technological innovations through the ages, contrary to the conventional story told by mainstream economic and innovation models and stories. Stern's research assistant at the time he was working on this topic went on to become known as a science fiction author, and based one of his first works on this notion: Isaac Asimov.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;On the question of compiling such lists: I've recently started keeping a research journal in which I'm trying to capture works of significance that I've read, vaguely inspired by both index-card methods (such as Zettelkasten or POIC) and bullet journals.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;The organisation is &quot;BOTI&quot; -- best of the interval.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;I will start a two-page spread, dated, of a specific class of entries -- works, videos, authors, ideas, etc. -- and when that closes, start another. Periodically (about every month, for now) I'll select the best of those works for a BOTM list, and at the end of a year, a BOTY list.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Or at least that's the idea.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;This may address the question of keeping track of the most significant works (or authors, concepts, ideas, etc.) over time, which otherwise tend to become a bit of a jumble.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;The BOTI list and periodic aggregations themselves resemble round-robin databases, or ring or circular buffers or files, though without actually rewriting each specific list. The initial capture levels remain accessible (in the journal) for revisiting, should something prove to have been more significant on subsequent reflection than initially appeared.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094497&quot; readability=&quot;5.2427184466019&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.621359223301&quot;&gt;&lt;tr readability=&quot;5.2427184466019&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093021&quot; readability=&quot;9.3333333333333&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.6666666666667&quot;&gt;&lt;tr readability=&quot;9.3333333333333&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093127&quot; readability=&quot;2.4193548387097&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.2096774193548&quot;&gt;&lt;tr readability=&quot;2.4193548387097&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093220&quot; readability=&quot;2.4201680672269&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.2100840336134&quot;&gt;&lt;tr readability=&quot;2.4201680672269&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094015&quot; readability=&quot;4.391167192429&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093538&quot; readability=&quot;1.3142857142857&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094158&quot; readability=&quot;4.2230769230769&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094370&quot; readability=&quot;1.1929824561404&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093117&quot; readability=&quot;2.5337837837838&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.2668918918919&quot;&gt;&lt;tr readability=&quot;2.5337837837838&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093025&quot; readability=&quot;8.5534351145038&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.2767175572519&quot;&gt;&lt;tr readability=&quot;8.5534351145038&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;5.2270992366412&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093399&quot; readability=&quot;6.4124087591241&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.206204379562&quot;&gt;&lt;tr readability=&quot;6.4124087591241&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093527&quot; readability=&quot;6.5547073791349&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.2773536895674&quot;&gt;&lt;tr readability=&quot;6.5547073791349&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;6.5547073791349&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094462&quot; readability=&quot;9.744966442953&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.8724832214765&quot;&gt;&lt;tr readability=&quot;9.744966442953&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;3.5436241610738&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094010&quot; readability=&quot;3.8938053097345&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094130&quot; readability=&quot;10.304449648712&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;5.152224824356&quot;&gt;&lt;tr readability=&quot;10.304449648712&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;7.9625292740047&quot;&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;</description>
<pubDate>Sun, 19 Jan 2020 16:09:20 +0000</pubDate>
<dc:creator>bogoman</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://news.ycombinator.com/item?id=22092108</dc:identifier>
</item>
<item>
<title>How is search so bad? A case study</title>
<link>https://svilentodorov.xyz/blog/bad-search/</link>
<guid isPermaLink="true" >https://svilentodorov.xyz/blog/bad-search/</guid>
<description>&lt;p&gt;Google Search is ridiculously, utterly bad. Before your brain starts recalling successful searches you’ve had, and before this turns into &lt;em&gt;only&lt;/em&gt; a rant let’s see some examples.&lt;/p&gt;

&lt;div&gt;&lt;img class=&quot;img-fluid&quot; src=&quot;https://svilentodorov.xyz/static/gsearch1.png&quot;/&gt;&lt;/div&gt;

&lt;p&gt;This is a query for checking out what reddit thinks in regards to buying a phone, while specifying to only get results from the last month. Pretty simple I guess, yet &lt;strong&gt;none&lt;/strong&gt; of the results achieved that goal, and &lt;strong&gt;none&lt;/strong&gt; of them are actually from the last month, despite Google lying that they are. Let’s quickly go through them one by one.&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;‘Best place to by a cheap new smartphone?’ from r/Berlin - this is about where to buy a phone, but I live in Berlin, so maybe it makes some sense as a top result… except the post is actually from &lt;strong&gt;6! years ago&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Specific to Audiophile phones for some reasons, and a pretty average thread (only 31 upvotes for one metric) from &lt;strong&gt;9 months ago&lt;/strong&gt;. Not useful, and doesnt meet the query but still a lot better.&lt;/li&gt;
&lt;li&gt;From 2018 (&amp;gt;1 year ago), even less popular and less useful post (17 upvotes) on the Pixel subreddit.&lt;/li&gt;
&lt;li&gt;Phone for privacy, small thread from &lt;strong&gt;&amp;gt; 4 years ago&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;6 years ago&lt;/strong&gt;, wtf.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;I won’t keep going with the rest, but it doesn’t get better. Why are the results reported as recent when they are from years ago, I don’t know - those are archived post so no changes have been made. At any rate, I got annoyed at this point (mentioning for those who couldn’t tell), so I switched to DuckDuckGo.&lt;/p&gt;

&lt;div&gt;&lt;img class=&quot;img-fluid&quot; src=&quot;https://svilentodorov.xyz/static/ddgsearch1.png&quot;/&gt;&lt;/div&gt;

&lt;p&gt;Somehow the results are even less useful. 2 irrelevant subreddits at the top, a result from 2012, that they admit is from 2012. At this point I visibly checked on reddit if there’ve been posts about buying a phone from the last month and there are. They also show up on Google/DDG if you look for them directly so they are indexed.&lt;/p&gt;
&lt;p&gt;Hm, maybe adding &lt;code class=&quot;highlighter-rouge&quot;&gt;site:reddit.com&lt;/code&gt; will help DDG to get there?&lt;/p&gt;

&lt;div&gt;&lt;img class=&quot;img-fluid&quot; src=&quot;https://svilentodorov.xyz/static/ddgsearch2.png&quot;/&gt;&lt;/div&gt;

&lt;p&gt;Nope. As you can see, I didn’t even bother clicking on all of them now, but I can tell you the first result is deeply irrelevant and the second one leads to a 4 year old thread.&lt;/p&gt;
&lt;p&gt;Maybe it’s my wording then - what about ‘recommend phone reddit’ or ‘which phone to purchase reddit’? I won’t even waste anybody’s time by posting the results I got.&lt;/p&gt;
&lt;center&gt;
&lt;h3 id=&quot;thoughts&quot;&gt;Thoughts&lt;/h3&gt;
&lt;/center&gt;
&lt;p&gt;Part of the issue in this specific case is that they’ve started ignoring settings for displaying results from specific time periods. It’s definitely not the whole issue though, and not something new or specific to phone searches.&lt;/p&gt;
&lt;p&gt;Now, I’ve always been biased towards the new - books, tech, everything, but I can’t help but feel that a lot of things which were done pretty well before are done worse today. We do have better technology, yet we somehow build inferior solutions with it all too often. Further, if they had the same bias of showing me only recent results I’ll understand it better, but that’s not even the case. And yes, I get that the incentives of users and providers don’t align perfectly, that Google isn’t your friend, etc. But what is DDG’s excuse? As for the Case Study part, and me saying this isn’t simply a rant - I lied, hence the quotation marks in the title. Don’t trust everything you read, especially the goddamn dates on your search results.&lt;/p&gt;
</description>
<pubDate>Sun, 19 Jan 2020 15:35:37 +0000</pubDate>
<dc:creator>Tenoke</dc:creator>
<og:title>How is search so goddamn bad? A ‘Case Study’</og:title>
<og:description>Personal site for Data Scientist and Machine Learning Engineer - Svilen Todorov</og:description>
<og:url>https://svilentodorov.xyz//blog/bad-search/</og:url>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://svilentodorov.xyz/blog/bad-search/</dc:identifier>
</item>
<item>
<title>Crew Dragon launch escape demonstration</title>
<link>https://www.spacex.com/webcast?20200119</link>
<guid isPermaLink="true" >https://www.spacex.com/webcast?20200119</guid>
<description>&lt;p&gt;&lt;span&gt;On Sunday, January 19, SpaceX successfully completed an in-flight test of Crew Dragon’s launch escape capabilities from Launch Complex 39A (LC-39A) at NASA’s Kennedy Space Center in Florida. This test, which did not have NASA astronauts onboard the spacecraft, demonstrated Crew Dragon’s ability to reliably carry crew to safety in the unlikely event of an emergency on ascent. &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Falcon 9 and Dragon lifted off at 10:30 a.m. EST, or 15:30 UTC, with the abort sequence initiating approximately one and a half minutes into flight. Crew Dragon's eight SuperDraco engines powered the spacecraft away from Falcon 9 at speeds of over 400 mph. Following separation, Dragon's trunk was released and the spacecraft's parachutes were deployed, first the two drogue parachutes followed by the four upgraded Mark III parachutes. Dragon safely splashed down in the Atlantic Ocean and teams successfully recovered the spacecraft onto SpaceX's recovery vessel.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;You can watch a replay of the test below, and learn more about the mission in our &lt;strong&gt;&lt;a href=&quot;http://www.spacex.com/sites/spacex/files/in-flight_abort_test_media_kit.pdf&quot; target=&quot;_blank&quot;&gt;press kit.&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;</description>
<pubDate>Sun, 19 Jan 2020 15:15:36 +0000</pubDate>
<dc:creator>eps</dc:creator>
<og:type>article</og:type>
<og:url>https://www.spacex.com/webcast</og:url>
<og:image>https://www.spacex.com/sites/spacex/files/16855243811_560edaae19_o.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.spacex.com/webcast?20200119</dc:identifier>
</item>
<item>
<title>Show HN: A set of standard document templates</title>
<link>https://news.ycombinator.com/item?id=22091603</link>
<guid isPermaLink="true" >https://news.ycombinator.com/item?id=22091603</guid>
<description>&lt;tr class=&quot;athing comtr&quot; id=&quot;22093385&quot; readability=&quot;5.6763485477178&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.8381742738589&quot;&gt;&lt;tr readability=&quot;5.6763485477178&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.2572614107884&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;7.9128540305011&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;You know, this is a great idea. I've been writing slide decks since the late 80's and having a template to think about the problem first is really useful. Can't believe this never occurred to me. Thanks! I just pulled down your tech_design template and I'm going to use it this week.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;[Abe Simpson Story: in the 80s/90s &quot;Slide Decks&quot; were called &quot;Foils&quot; because they were printed (by the print center) on transparencies and shown on overhead projectors.]&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093503&quot; readability=&quot;3.5731225296443&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.7865612648221&quot;&gt;&lt;tr readability=&quot;3.5731225296443&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.0197628458498&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;7.825327510917&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;&amp;gt; were called &quot;Foils&quot; because they were printed (by the print center) on transparencies and shown on overhead projectors.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;How does that explain them being called ‘foils’? I think you missed some part of the explanation?&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093924&quot; readability=&quot;5.0555555555556&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094628&quot; readability=&quot;1.2089552238806&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094647&quot; readability=&quot;2.4295774647887&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.2147887323944&quot;&gt;&lt;tr readability=&quot;2.4295774647887&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Lol that still doesn’t explain it - they’re called foils because their name is foils? That’s tautological!&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094706&quot; readability=&quot;4.1269841269841&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.0634920634921&quot;&gt;&lt;tr readability=&quot;4.1269841269841&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;160&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;It's from French feuille, for 'leaf', so it's used for all these thin film things that are leaf-thin.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093588&quot; readability=&quot;2.2211538461538&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093723&quot; readability=&quot;3.4634146341463&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.7317073170732&quot;&gt;&lt;tr readability=&quot;3.4634146341463&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Perhaps it's a language thing, to me &quot;foil&quot; without a qualifier means exclusively aluminium foil. I'd never have called ohp acetate &quot;foil&quot;.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093745&quot; readability=&quot;2.0493827160494&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094459&quot; readability=&quot;1.4255319148936&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22092733&quot; readability=&quot;2.376&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093774&quot; readability=&quot;2.6813186813187&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094804&quot; readability=&quot;4.5454545454545&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.2727272727273&quot;&gt;&lt;tr readability=&quot;4.5454545454545&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Thank you for putting this together. I'm wondering if you were to use these, what the order of operations for a product would be? Maybe Product Opportunity Assessment &amp;gt; Product Vision &amp;gt; Product Requirements?&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22092034&quot; readability=&quot;4.0809443507589&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.0404721753794&quot;&gt;&lt;tr readability=&quot;4.0809443507589&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;8.1618887015177&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;15.982547993019&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;i actually wrote that down as side project idea yesterday! glad to see someone doing it.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;i have a different set of documents in mind though. my list is more developer oriented. here's the kind i wanted:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;- project readme (from simple to very involved)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;- pull requests&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;- open source licenses (i think GitHub does this right?)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;- code of conduct&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;- code testing template&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;- benchmarks&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;i also bookmarked these links:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;&lt;a href=&quot;https://embeddedartistry.com/templates&quot; rel=&quot;nofollow&quot;&gt;https://embeddedartistry.com/templates&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;&lt;a href=&quot;https://www.sans.org/security-resources/policies&quot; rel=&quot;nofollow&quot;&gt;https://www.sans.org/security-resources/policies&lt;/a&gt; (this one is an old one i had not sure how i even stumble upon it...)&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22092862&quot; readability=&quot;4.21875&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.109375&quot;&gt;&lt;tr readability=&quot;4.21875&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Thank you, I can totally see them fit in this repo. If you have specific content for any of these, please feel free to file a PR. :)&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22093173&quot; readability=&quot;3.5175879396985&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.7587939698492&quot;&gt;&lt;tr readability=&quot;3.5175879396985&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;3.5175879396985&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;6.8033707865169&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;For whatever reason, my brain immediately pictured the Code of Conduct written in BASIC:&lt;/span&gt;
&lt;pre&gt;
&lt;span class=&quot;commtext c00&quot;&gt;&lt;code&gt;    10 RESPECT OTHERS
    20 BE CIVIL
    20 RESPECT COMPANY POLICIES AND PROCEDURES
    30 GOTO 10&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22092087&quot; readability=&quot;0.32989690721649&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22092741&quot; readability=&quot;2.1935483870968&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22091789&quot; readability=&quot;2.2894736842105&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22091903&quot; readability=&quot;1.5&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22091963&quot; readability=&quot;1.4252873563218&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22092105&quot; readability=&quot;0.80952380952381&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22092167&quot; readability=&quot;0.32183908045977&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094880&quot; readability=&quot;1.5789473684211&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22092781&quot; readability=&quot;3.3506493506494&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.6753246753247&quot;&gt;&lt;tr readability=&quot;3.3506493506494&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;3.7694805194805&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;7.6969696969697&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;&amp;gt;I am tired of trying to google them every time I need them&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;This is cool, but how many times in ones life does one need these?&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22094520&quot; readability=&quot;3.2857142857143&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.6428571428571&quot;&gt;&lt;tr readability=&quot;3.2857142857143&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Yeah definitely not every week, but it's nice to have a single reference to go to the moment that you need them.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22092258&quot; readability=&quot;1.4347826086957&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22091609&quot; readability=&quot;0.4578313253012&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;22092074&quot; readability=&quot;1.0175438596491&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;</description>
<pubDate>Sun, 19 Jan 2020 14:33:47 +0000</pubDate>
<dc:creator>kostarelo</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://news.ycombinator.com/item?id=22091603</dc:identifier>
</item>
<item>
<title>Dynamic type systems are not inherently more open</title>
<link>https://lexi-lambda.github.io/blog/2020/01/19/no-dynamic-type-systems-are-not-inherently-more-open/</link>
<guid isPermaLink="true" >https://lexi-lambda.github.io/blog/2020/01/19/no-dynamic-type-systems-are-not-inherently-more-open/</guid>
<description>&lt;header&gt;

&lt;/header&gt;&lt;p&gt;Internet debates about typing disciplines continue to be plagued by a pervasive myth that dynamic type systems are inherently better at modeling “open world” domains. The argument usually goes like this: the goal of static typing is to pin everything down as much as possible, but in the real world, that just isn’t practical. Real systems should be loosely coupled and worry about data representation as little as possible, so dynamic types lead to a more robust system in the large.&lt;/p&gt;&lt;p&gt;This story sounds compelling, but it isn’t true. The flaw is in the premise: static types are &lt;em&gt;not&lt;/em&gt; about “classifying the world” or pinning down the structure of every value in a system. The reality is that static type systems allow specifying exactly how much a component needs to know about the structure of its inputs, and conversely, how much it doesn’t. Indeed, in practice static type systems excel at processing data with only a partially-known structure, as they can be used to ensure application logic doesn’t accidentally assume too much.&lt;/p&gt;

&lt;p&gt;I’ve wanted to write this blog post for a while, but what finally made me decide to do it were misinformed comments responding to &lt;a href=&quot;https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/&quot;&gt;my previous blog post&lt;/a&gt;. Two comments in particular caught my eye, &lt;a href=&quot;https://www.reddit.com/r/programming/comments/dt0w63/parse_dont_validate/f6ulpsy/&quot;&gt;the first of which was posted on /r/programming&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote readability=&quot;17&quot;&gt;
&lt;p&gt;Strongly disagree with the post […] it promotes a fundamentally entangled and static view of the world. It assumes that we can or should theorize about what is “valid” input at the edge between the program and the world, thus introducing a strong sense of coupling through the entire software, where failure to conform to some schema will automatically crash the program.&lt;/p&gt;
&lt;p&gt;This is touted as a feature here but imagine if the internet worked like this. A server changes their JSON output, and we need to recompile and reprogram the entire internet. This is the static view that is promoted as a feature here. […] The “parser mentality” is fundamentally rigid and global, whereas robust system design should be decentralised and leave interpretation of data to the receiver.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Given the argument being made in the blog post—that you should use precise types whenever possible—one can see where this misinterpretation comes from. How could a proxy server possibly be written in such a style, since it cannot anticipate the structure of its payloads? The commenter’s conclusion is that strict static typing is at odds with programs that don’t know the structure of their inputs ahead of time.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=21479933&quot;&gt;The second comment was left on Hacker News&lt;/a&gt;, and it is significantly shorter than the first one:&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;What would be the type signature of, say, Python’s &lt;code&gt;pickle.load()&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is a different kind of argument, one that relies on the fact that the types of reflective operations may depend on runtime values, which makes them challenging to capture with static types. This argument suggests that static types limit expressiveness because they forbid such operations outright.&lt;/p&gt;
&lt;p&gt;Both these arguments are fallacious, but in order to show why, we have to make explicit an implicit claim. The two comments focus primarily on illustrating how static type systems can’t process data of an unknown shape, but they simultaneously advance an implicit belief: that dynamically typed languages &lt;em&gt;can&lt;/em&gt; process data of an unknown shape. As we’ll see, this belief is misguided; programs are not capable of processing data of a truly unknown shape regardless of typing discipline, and static type systems only make already-present assumptions explicit.&lt;/p&gt;

&lt;p&gt;The claim is simple: in a static type system, you must declare the shape of data ahead of time, but in a dynamic type system, the type can be, well, dynamic! It sounds self-evident, so much so that Rich Hickey has practically built a speaking career upon its emotional appeal. The only problem is it isn’t true.&lt;/p&gt;
&lt;p&gt;The hypothetical scenario usually goes like this. Say you have a distributed system, and services in the system emit events that can be consumed by any other service that might need them. Each event is accompanied by a payload, which listening services can use to inform further action. The payload itself is minimally-structured, schemaless data encoded using a generic interchange format such as JSON or &lt;a href=&quot;https://github.com/edn-format/edn&quot;&gt;EDN&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As a simple example, a login service might emit an event like this one whenever a new user signs up:&lt;/p&gt;
&lt;div class=&quot;brush: json&quot; readability=&quot;8.5&quot;&gt;
&lt;div class=&quot;source&quot; readability=&quot;12&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&quot;event_type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;signup&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&quot;timestamp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;2020-01-19T05:37:09Z&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&quot;data&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Alyssa&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;email&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;alyssa@example.com&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Some downstream services might listen for these &lt;code&gt;signup&lt;/code&gt; events and take further action whenever they are emitted. For example, a transactional email service might send a welcome email whenever a new user signs up. If the service were written in JavaScript, the handler might look something like this:&lt;/p&gt;
&lt;div class=&quot;brush: js&quot; readability=&quot;8.5&quot;&gt;
&lt;div class=&quot;source&quot; readability=&quot;12&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleEvent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'login'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'signup'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;sendEmail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`Welcome to Blockchain Emporium, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;!`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;But what if this service were written in Haskell instead? Being good, reality-fearing Haskell programmers who &lt;a href=&quot;https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/&quot;&gt;parse, not validate&lt;/a&gt;, the Haskell code might look something like this, instead:&lt;/p&gt;
&lt;div class=&quot;brush: haskell&quot; readability=&quot;9.5&quot;&gt;
&lt;div class=&quot;source&quot; readability=&quot;14&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Event&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Login&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;LoginPayload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Signup&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SignupPayload&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;LoginPayload&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;LoginPayload&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SignupPayload&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SignupPayload&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userName&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userEmail&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FromJSON&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Event&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;parseJSON&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;withObject&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Event&quot;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;eventType&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;event_type&quot;&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventType&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;of&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&quot;login&quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Login&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;data&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&quot;signup&quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Signup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;signup&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fail&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;unknown event_type: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventType&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FromJSON&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;LoginPayload&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FromJSON&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SignupPayload&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;handleEvent&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;handleEvent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fromJSON&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;of&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Success&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Login&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;LoginPayload&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;{- ... -}&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Success&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Signup&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SignupPayload&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userEmail&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sendEmail&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userEmail&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Welcome to Blockchain Emporium, &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;!&quot;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fail&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;could not parse event: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;It’s definitely more boilerplate, but some extra overhead for type definitions is to be expected (and is greatly exaggerated in such tiny examples), and the arguments we’re discussing aren’t about boilerplate, anyway. The &lt;em&gt;real&lt;/em&gt; problem with this version of the code, according to the Reddit comment from earlier, is that the Haskell code has to be updated whenever a service adds a new event type! A new case has to be added to the &lt;code&gt;Event&lt;/code&gt; datatype, and it must be given new parsing logic. And what about when new fields get added to the payload? What a maintenance nightmare.&lt;/p&gt;
&lt;p&gt;In comparison, the JavaScript code is much more permissive. If a new event type is added, it will just fall through the &lt;code&gt;switch&lt;/code&gt; and do nothing. If extra fields are added to the payload, the JavaScript code will just ignore them. Seems like a win for dynamic typing.&lt;/p&gt;
&lt;p&gt;Except that no, it isn’t. The only reason the statically typed program fails if we don’t update the &lt;code&gt;Event&lt;/code&gt; type is that we wrote &lt;code&gt;handleEvent&lt;/code&gt; that way. We could just have easily done the same thing in the JavaScript code, adding a default case that rejects unknown event types:&lt;/p&gt;
&lt;div class=&quot;brush: js&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;source&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleEvent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`unknown event_type: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event_type&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We didn’t do that, since in this case it would clearly be silly. If a service receives an event it doesn’t know about, it should just ignore it. This is a case where being permissive is clearly the correct behavior, and we can easily implement that in the Haskell code too:&lt;/p&gt;
&lt;div class=&quot;brush: haskell&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;source&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;nf&quot;&gt;handleEvent&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;handleEvent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fromJSON&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;of&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;{- ... -}&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pure&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This is still in the spirit of “parse, don’t validate” because we’re still parsing the values we &lt;em&gt;do&lt;/em&gt; care about as early as possible, so we don’t fall into the double-validation trap. At no point do we take a code path that depends on a value being well-formed without first ensuring (with the help of the type system) that it is, in fact, actually well-formed. We don’t have to respond to an ill-formed value by raising an error! We just have to be explicit about ignoring it.&lt;/p&gt;
&lt;p&gt;This illustrates an important point: the &lt;code&gt;Event&lt;/code&gt; type in this Haskell code doesn’t describe “all possible events,” it describes all the events that the application cares about. Likewise, the code that parses those events’ payloads only worries about the fields the application needs, and it ignores extraneous ones. A static type system doesn’t require you eagerly write a schema for the whole universe, it simply requires you to be up front about the things you need.&lt;/p&gt;
&lt;p&gt;This turns out to have a lot of pleasant benefits even though knowledge about inputs is limited:&lt;/p&gt;
&lt;ul readability=&quot;9.6471774193548&quot;&gt;&lt;li readability=&quot;7&quot;&gt;
&lt;p&gt;It’s easy to discover the assumptions of the Haskell program just by looking at the type definitions. We know, for example, that this application doesn’t care about the &lt;code&gt;timestamp&lt;/code&gt; field, since it never appears in any of the payload types. In the dynamically-typed program, we’d have to audit every code path to see whether or not it inspects that field, which would be a lot of error-prone work!&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;8&quot;&gt;
&lt;p&gt;What’s more, it turns out the Haskell code doesn’t actually &lt;em&gt;use&lt;/em&gt; the &lt;code&gt;userId&lt;/code&gt; field inside the &lt;code&gt;SignupPayload&lt;/code&gt; type, so that type is overly conservative. If we want to ensure it isn’t actually needed (since, for example, maybe we’re phasing out providing the user ID in that payload entirely), we need only delete that record field; if the code typechecks, we can be confident it really doesn’t depend on that field.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1.585798816568&quot;&gt;
&lt;p&gt;Finally, we neatly avoid all the gotchas related to shotgun parsing &lt;a href=&quot;https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/#the-danger-of-validation&quot;&gt;mentioned in the previous blog post&lt;/a&gt;, since we still haven’t compromised on any of those principles.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;We’ve already invalidated the first half of the claim: that statically typed languages can’t deal with data where the structure isn’t completely known. Let’s now look at the other half, which states that dynamically typed languages can process data where the structure isn’t known at all. Maybe that still sounds right, but if you slow down and think about it more carefully, you’ll find it can’t be.&lt;/p&gt;
&lt;p&gt;The above JavaScript code makes all the same assumptions our Haskell code does: it assumes event payloads are JSON objects with an &lt;code&gt;event_type&lt;/code&gt; field, and it assumes &lt;code&gt;signup&lt;/code&gt; payloads include &lt;code&gt;data.user.name&lt;/code&gt; and &lt;code&gt;data.user.email&lt;/code&gt; fields. It certainly can’t do anything useful with truly unknown input! If a new event payload is added, our JavaScript code can’t magically adapt to handle it simply because it is dynamically typed. Dynamic typing just means the types of values are carried alongside them at runtime and checked as the program executes; the types are still there, and this program still implicitly relies on them being particular things.&lt;/p&gt;

&lt;p&gt;In the previous section, we debunked the idea that statically typed systems can’t process partially-known data, but if you have been paying close attention, you may have noticed it did not fully refute the original claim.&lt;/p&gt;
&lt;p&gt;Although we were able to handle unknown data, we always simply discarded it, which would not fly if we were trying to implement some sort of proxying. For example, suppose we have a forwarding service that broadcasts events over a public network, attaching a signature to each payload to ensure it can’t be spoofed. We might implement this in JavaScript this way:&lt;/p&gt;
&lt;div class=&quot;brush: js&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;source&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleEvent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;signedPayload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;signature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;signature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;retransmitEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;signedPayload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In this case, we don’t care about the structure of the payload at all (the &lt;code&gt;signature&lt;/code&gt; function just works on any valid JSON object), but we still have to preserve all the information. How could we do that in a statically typed language, since a statically-typed language would have to assign the payload a precise type?&lt;/p&gt;
&lt;p&gt;Once again, the answer involves rejecting the premise: there’s no need to give data a type that’s any more precise than the application needs. The same logic could be written in a straightforward way in Haskell:&lt;/p&gt;
&lt;div class=&quot;brush: haskell&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;source&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;nf&quot;&gt;handleEvent&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;handleEvent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signedPayload&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;signature&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signature&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;retransmitEvent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signedPayload&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;handleEvent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fail&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;event payload was not an object &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In this case, since we don’t care about the structure of the payload, we manipulate a value of type &lt;code&gt;JSON.Value&lt;/code&gt; directly. This type is extremely imprecise compared to our &lt;code&gt;Event&lt;/code&gt; type from earlier—it can hold any legal JSON value, of any shape—but in this case, we &lt;em&gt;want&lt;/em&gt; it to be imprecise.&lt;/p&gt;
&lt;p&gt;Thanks to that imprecision, the type system helped us here: it caught the fact that we’re assuming the payload is a JSON object, not some other JSON value, and it made us handle the non-object cases explicitly. In this case we chose to raise an error, but of course, as before, you could choose some other form of recovery if you wanted to. You just have to be explicit about it.&lt;/p&gt;
&lt;p&gt;Once more, note that the assumption we were forced to make explicit in Haskell is &lt;em&gt;also&lt;/em&gt; made by the JavaScript code! If our JavaScript &lt;code&gt;handleEvent&lt;/code&gt; function were called with a string rather than an object, it’s unlikely the behavior would be desirable, since an object spread on a string results in the following surprise:&lt;/p&gt;
&lt;div class=&quot;brush: js&quot; readability=&quot;10.5&quot;&gt;
&lt;div class=&quot;source&quot; readability=&quot;16&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;payload&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;signature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sig&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;p&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;y&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;l&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;o&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;signature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sig&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Oops. Once again, the parsing style of programming has helped us out, since if we didn’t “parse” the JSON value into an object by matching on the &lt;code&gt;Object&lt;/code&gt; case explicitly, our code would not compile, and if we left off the fallthrough case, we’d get a warning about inexhaustive patterns.&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;Let’s look at one more example of this phenomenon before moving on. Suppose we’re consuming an API that returns user IDs, and suppose those IDs happen to be UUIDs. A straightforward interpretation of “parse, don’t validate” might suggest we represent user IDs in our Haskell API client using a &lt;code&gt;UUID&lt;/code&gt; type:&lt;/p&gt;
&lt;div class=&quot;brush: haskell&quot;&gt;
&lt;div class=&quot;source&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UserId&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UUID&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;However, our Reddit commenter would likely take umbrage with this! Unless the API contract explicitly states that all user IDs will be UUIDs, this representation is overstepping our bounds. Although user IDs might be UUIDs today, perhaps they won’t be tomorrow, and then our code would break for no reason! Is this the fault of static type systems?&lt;/p&gt;
&lt;p&gt;Again, the answer is no. This is a case of improper data modeling, but the static type system is not at fault—it has simply been misused. The appropriate way to represent a &lt;code&gt;UserId&lt;/code&gt; is to define a new, opaque type:&lt;/p&gt;
&lt;div class=&quot;brush: haskell&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;source&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;kr&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UserId&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UserId&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FromJSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ToJSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Unlike the type alias defined above which simply creates a new name for the existing &lt;code&gt;UUID&lt;/code&gt; type, this declaration creates a totally new &lt;code&gt;UserId&lt;/code&gt; type that is distinct from all other types, including &lt;code&gt;Text&lt;/code&gt;. If we keep the datatype’s constructor private (that is, we don’t export it from the module that defines this type), then the &lt;em&gt;only&lt;/em&gt; way to produce a &lt;code&gt;UserId&lt;/code&gt; will be to go through its &lt;code&gt;FromJSON&lt;/code&gt; parser. Dually, the only things you can do with a &lt;code&gt;UserId&lt;/code&gt; are compare it with other &lt;code&gt;UserId&lt;/code&gt;s for equality or serialize it using the &lt;code&gt;ToJSON&lt;/code&gt; instance. Nothing else is permitted: the type system will prevent you from depending on the remote service’s internal representation of user IDs.&lt;/p&gt;
&lt;p&gt;This illustrates another way that static type systems can provide strong, useful guarantees when manipulating completely opaque data. The runtime representation of a &lt;code&gt;UserId&lt;/code&gt; is really just a string, but the type system does not allow you to accidentally use it like it’s a string, nor does it allow you to forge a new &lt;code&gt;UserId&lt;/code&gt; out of thin air from an arbitrary string.&lt;sup&gt;&lt;a href=&quot;https://lexi-lambda.github.io/blog/2020/01/19/no-dynamic-type-systems-are-not-inherently-more-open/#2020-01-19-no-dynamic-type-systems-are-not-inherently-more-open-footnote-1-definition&quot; name=&quot;2020-01-19-no-dynamic-type-systems-are-not-inherently-more-open-footnote-1-return&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;The type system is not a ball and chain forcing you to describe the representation of every value that enters and leaves your program in exquisite detail. Rather, it’s a tool that you can use in whatever way best suits your needs.&lt;/p&gt;

&lt;p&gt;We’ve now thoroughly debunked the claims made by the first commenter, but the question posed by the second commenter may still seem like a loophole in our logic. What &lt;em&gt;is&lt;/em&gt; the type of Python’s &lt;code&gt;pickle.load()&lt;/code&gt;? For those unfamiliar, &lt;a href=&quot;https://docs.python.org/3/library/pickle.html&quot;&gt;Python’s cutely-named &lt;code&gt;pickle&lt;/code&gt; library&lt;/a&gt; allows serializing and deserializing entire Python object graphs. Any object can be serialized and stored in a file using &lt;code&gt;pickle.dump()&lt;/code&gt;, and it can be deserialized at a later point in time using &lt;code&gt;pickle.load()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;What makes this appear challenging to our static type system is that the type of value produced by &lt;code&gt;pickle.load()&lt;/code&gt; is difficult to predict—it depends entirely on whatever happened to be written to that file using &lt;code&gt;pickle.dump()&lt;/code&gt;. This seems inherently dynamic, since we cannot possibly know what type of value it will produce at compile-time. At first blush, this is something a dynamically typed system can pull off, but a statically-typed one just can’t.&lt;/p&gt;
&lt;p&gt;However, it turns out this situation is actually identical to the previous examples using JSON, and the fact that Python’s pickling serializes native Python objects directly does not change things. Why? Well, consider what happens &lt;em&gt;after&lt;/em&gt; a program calls &lt;code&gt;pickle.load()&lt;/code&gt;. Say you write the following function:&lt;/p&gt;
&lt;div class=&quot;brush: python&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;source&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;load_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pickle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# do something with `val`&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The trouble is that &lt;code&gt;val&lt;/code&gt; can now be of &lt;em&gt;any&lt;/em&gt; type, and just as you can’t do anything useful with truly unknown, unstructured input, you can’t do anything with a value unless you know at least something about it. If you call any method or access any field on the result, then you’ve already made an assumption about what sort of thing &lt;code&gt;pickle.load(f)&lt;/code&gt; returned—and it turns out those assumptions &lt;em&gt;are&lt;/em&gt; &lt;code&gt;val&lt;/code&gt;’s type!&lt;/p&gt;
&lt;p&gt;For example, imagine the only thing you do with &lt;code&gt;val&lt;/code&gt; is call the &lt;code&gt;val.foo()&lt;/code&gt; method and return its result, which is expected to be a string. If we were writing Java, then the expected type of &lt;code&gt;val&lt;/code&gt; would be quite straightforward—we’d expect it to be an instance of the following interface:&lt;/p&gt;
&lt;div class=&quot;brush: java&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;source&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Serializable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And indeed, it turns out a &lt;code&gt;pickle.load()&lt;/code&gt;-like function can be given a perfectly reasonable type in Java:&lt;/p&gt;
&lt;div class=&quot;brush: java&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;source&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Serializable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Nitpickers will complain that this isn’t the same as &lt;code&gt;pickle.load()&lt;/code&gt;, since you have to pass a &lt;code&gt;Class&amp;lt;T&amp;gt;&lt;/code&gt; token to choose what type of thing you want ahead of time. However, nothing is stopping you from passing &lt;code&gt;Serializable.class&lt;/code&gt; and branching on the type later, after the object has been loaded. And that’s the key point: the instant you do &lt;em&gt;anything&lt;/em&gt; with the object, you must know something about its type, even in a dynamically typed language! The statically-typed language just forces you to be more explicit about it, just as it did when we were talking about JSON payloads.&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;Can we do this in Haskell, too? Absolutely—we can use &lt;a href=&quot;https://hackage.haskell.org/package/serialise&quot;&gt;the &lt;code&gt;serialise&lt;/code&gt; library&lt;/a&gt;, which has a similar API to the Java one mentioned above. It also happens to have a very similar interface to &lt;a href=&quot;https://hackage.haskell.org/package/aeson&quot;&gt;the Haskell JSON library, aeson&lt;/a&gt;, as it turns out the problem of dealing with unknown JSON data is not terribly different from dealing with an unknown Haskell value—at some point, you have to do a little bit of parsing to do anything with the value.&lt;/p&gt;
&lt;p&gt;That said, while you &lt;em&gt;can&lt;/em&gt; emulate the dynamic typing of &lt;code&gt;pickle.load()&lt;/code&gt; if you really want to by deferring the type check until the last possible moment, the reality is that doing so is almost never actually useful. At some point, you have to make assumptions about the structure of the value in order to use it, and you know what those assumptions are because &lt;em&gt;you wrote the code&lt;/em&gt;. While there are extremely rare exceptions to this that require true dynamic code loading (such as, say, implementing a REPL for your programming language), they do not occur in day-to-day programming, and programmers in statically-typed languages are perfectly happy to supply their assumptions up front.&lt;/p&gt;
&lt;p&gt;This is one of the fundamental disconnects between the static typing camp and the dynamic typing camp. Programmers working in statically-typed languages are perplexed when a programmer suggests they can do something in a dynamically typed language that a statically-typed language “fundamentally” prevents, since a programmer in a statically-typed language may reply the value has simply not been given a sufficiently precise type. From the perspective of a programmer working in a dynamically-typed language, the type system restricts the space of legal behaviors, but from the perspective of a programmer working in a statically-typed language, the set of legal behaviors &lt;em&gt;is&lt;/em&gt; a value’s type.&lt;/p&gt;
&lt;p&gt;Neither of these perspectives are actually inaccurate, from the appropriate point of view. Static type systems &lt;em&gt;do&lt;/em&gt; impose restrictions on program structure, as it is provably impossible to reject &lt;em&gt;all&lt;/em&gt; bad programs in a Turing-complete language without also rejecting some good ones (this is &lt;a href=&quot;https://en.wikipedia.org/wiki/Rice's_theorem&quot;&gt;Rice’s theorem&lt;/a&gt;). But it is simultaneously true that the impossibility of solving the general problem does not preclude solving a slightly more restricted version of the problem in a useful way, and a lot of the so-called “fundamental” inabilities of static type systems are not fundamental at all.&lt;/p&gt;

&lt;p&gt;The key thesis of this blog post has now been delivered: static type systems are not fundamentally worse than dynamic type systems at processing data with an open or partially-known structure. The sorts of claims made in the comments cited at the beginning of this blog post are not accurate depictions of what statically-typed program construction is like, and they misunderstand the limitations of static typing disciplines while exaggerating the capabilities of dynamically typed disciplines.&lt;/p&gt;
&lt;p&gt;However, although greatly exaggerated, these myths do have some basis in reality. They appear to have developed at least in part from a misunderstanding about the differences between structural and nominal typing. This difference is unfortunately too big to address in this blog post, as it could likely fill several blog posts of its own. About six months ago I attempted to write a blog post on the subject, but I didn’t think it came out very compelling, so I scrapped it. Maybe someday I’ll find a better way to communicate the ideas.&lt;/p&gt;
&lt;p&gt;Although I can’t give it the full treatment it deserves right now, I’d still like to touch on the idea briefly so that interested readers may be able to find other resources on the subject should they wish to do so. The key idea is that many dynamically typed languages idiomatically reuse simple data structures like hashmaps to represent what in statically-typed languages are often represented by bespoke datatypes (usually defined as classes or structs).&lt;/p&gt;
&lt;p&gt;These two styles facilitate very different flavors of programming. A JavaScript or Clojure program may represent a record as a hashmap from string or symbol keys to values, written using object or hash literals and manipulated using ordinary functions from the standard library that manipulate keys and values in a generic way. This makes it straightforward to take two records and union their fields or to take an arbitrary (or even dynamic) subselection of fields from an existing record.&lt;/p&gt;
&lt;p&gt;In contrast, most static type systems do not allow such free-form manipulation of records because records are not maps at all but unique types distinct from all other types. These types are uniquely identified by their (fully-qualified) name, hence the term &lt;em&gt;nominal typing&lt;/em&gt;. If you wish to take a subselection of a struct’s fields, you must define an entirely new struct; doing this often creates an explosion of awkward boilerplate.&lt;/p&gt;
&lt;p&gt;This is one of the main ideas that Rich Hickey has discussed in many of his talks that criticize static typing. He has advanced the idea that this ability to fluidly merge, separate, and transform records makes dynamic typing particularly suited to the domain of distributed, open systems. Unfortunately, this rhetoric has two significant flaws:&lt;/p&gt;
&lt;ol readability=&quot;6&quot;&gt;&lt;li readability=&quot;6&quot;&gt;
&lt;p&gt;It skirts too close to calling this a fundamental limitation of type systems, suggesting that it is not simply inconvenient but &lt;em&gt;impossible&lt;/em&gt; to model such systems in a nominal, static type system. Not only is this not true (as this blog post has demonstrated), it misdirects people away from the point of his that actually has value: the practical, pragmatic advantage of a more structural approach to data modeling.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;6&quot;&gt;
&lt;p&gt;It confuses the structural/nominal distinction with the dynamic/static distinction, incorrectly creating the impression that the fluid merging and splitting of records represented as key-value maps is only possible in a dynamically typed language. In fact, not only can statically-typed languages support structural typing, many dynamically-typed languages also support nominal typing. These axes have historically loosely correlated, but they are theoretically orthogonal.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;For counterexamples to these claims, consider Python classes, which are quite nominal despite being dynamic, and TypeScript interfaces, which are structural despite being static. Indeed, modern statically-typed languages are increasingly acquiring native support for structurally-typed records. In these systems, record types work much like hashes in Clojure—they are not distinct, named types but rather anonymous collections of key-value pairs—and they support many of the same expressive manipulation operations that Clojure’s hashes do, all within a statically-typed framework.&lt;/p&gt;
&lt;p&gt;If you are interested in exploring static type systems with strong support for structural typing, I would recommend taking a look at any of TypeScript, Flow, PureScript, Elm, OCaml, or Reason, all of which have some sort of support for structurally typed records. What I would &lt;em&gt;not&lt;/em&gt; recommend for this purpose is Haskell, which has abysmal support for structural typing; Haskell is (for various reasons outside the scope of this blog post) aggressively nominal.&lt;sup&gt;&lt;a href=&quot;https://lexi-lambda.github.io/blog/2020/01/19/no-dynamic-type-systems-are-not-inherently-more-open/#2020-01-19-no-dynamic-type-systems-are-not-inherently-more-open-footnote-2-definition&quot; name=&quot;2020-01-19-no-dynamic-type-systems-are-not-inherently-more-open-footnote-2-return&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Does this mean Haskell is bad, or that it cannot be practically used to solve these kinds of problems? No, certainly not; there are many ways to model these problems in Haskell that work well enough, though some of them suffer from significant boilerplate. The core thesis of this blog post applies just as much to Haskell as it does to any of the other languages I mentioned above. However, I would be remiss not to mention this distinction, as it may give programmers from a dynamically-typed background who have historically found statically-typed languages much more frustrating to work with a better understanding of the &lt;em&gt;real&lt;/em&gt; reason they feel that way. (Essentially all mainstream, statically-typed OOP languages are even more nominal than Haskell!)&lt;/p&gt;
&lt;p&gt;As closing thoughts: this blog post is not intended to start a flame war, nor is it intended to be an assault on dynamically typed programming. There are many patterns in dynamically-typed languages that are genuinely difficult to translate into a statically-typed context, and I think discussions of those patterns can be productive. The purpose of this blog post is to clarify why one particular discussion is &lt;em&gt;not&lt;/em&gt; productive, so please: stop making these arguments. There are much more productive conversations to have about typing than this.&lt;/p&gt;

&lt;footer/&gt;</description>
<pubDate>Sun, 19 Jan 2020 10:53:34 +0000</pubDate>
<dc:creator>jose_zap</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://lexi-lambda.github.io/blog/2020/01/19/no-dynamic-type-systems-are-not-inherently-more-open/</dc:identifier>
</item>
<item>
<title>The Polygons of Another World: Super Nintendo</title>
<link>http://fabiensanglard.net/another_world_polygons_SNES/index.html</link>
<guid isPermaLink="true" >http://fabiensanglard.net/another_world_polygons_SNES/index.html</guid>
<description>&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;&lt;title&gt;The polygons of Another World: Super Nintendo&lt;/title&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot; /&gt;&lt;/head&gt;&lt;body id=&quot;readabilityBody&quot; readability=&quot;264.44184231069&quot;&gt;

&lt;center&gt;

&lt;/center&gt;
&lt;p&gt;January 19, 2020&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The polygons of Another World: Super Nintendo&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;This article is part of a study about the ports of Another World. It is highly recommended to read &lt;a href=&quot;http://fabiensanglard.net/another_world_polygons/index.html&quot;&gt;Another World 101&lt;/a&gt; before reading this.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Super Nintendo&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;img src=&quot;http://fabiensanglard.net/another_world_polygons_SNES/SNES_logo.svg&quot; width=&quot;40%&quot; /&gt; The Super Fami-Com (&quot;FAMIly COMputer&quot;) was released in Japan on November 21, 1990. The initial shipment of 300,000 units sold out within hours. The frenzy was such that the government requested Nintendo to release its future systems on weekends to avoid further disturbances.&lt;/p&gt;&lt;p&gt;It took almost a year for the renamed SNES (Super Nintendo Entertainment System) to reach North America on September 9, 1991. Six months later the much awaited console finally got an European release on April 1992. 721 games were published over the console lifespan, among them several critical and commercial successes such as Super Mario World, Zelda III, Mario Kart, F-Zero, Super Metroid, and Donkey Kong Country.&lt;/p&gt;&lt;p&gt;Having sold close to 50 million units over its nine-year lifespan (1991-1999), it is one of the most successful and popular consoles of all time.&lt;br /&gt;&lt;img src=&quot;http://fabiensanglard.net/another_world_polygons_SNES/snes.png&quot; width=&quot;100%&quot; /&gt;&lt;span&gt;&lt;em&gt;&lt;small&gt;The SuperFamicom (Japan), a.k.a Super Nintendo (Rest of the World). Photo credit: Wikipedia.&lt;/small&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Architecture&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;The SNES is a departure in this series. All the machines studied so far ran either on a Motorola 68000 or an Intel x86. The SNES's CPU name sounds esoteric but the Ricoh 5A22 is in fact a 6502 on steroids.&lt;/p&gt;&lt;p&gt;On the list of enhancements the CPU features 16-bit registers, a DMA unit, a 24-bit address Bus-A, an uncanny second 8-bit address Bus-B (the two buses are used to declare src/dst on DMA transfers), and the ability to generate interrupts on VBLANK and HBLANK.&lt;br /&gt;&lt;img src=&quot;http://fabiensanglard.net/another_world_polygons_SNES/snes_arch.svg&quot; width=&quot;100%&quot; /&gt; Even though it seems to benefit from a generous 128 KiB of RAM, the machine appears much less powerful than the Genesis with a weak Ricoh running at 3.58MHz and an equally unimpressive 8-bit data bus. These hardware choices were not unwise since these components were not critical parts of a game. The system instead relies on powerful video (S-PPU) and audio (S-DSP) chips.&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Video System&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;The S-PPU (Picture Processing Unit) is the component in charge of the video system. It was at the time a sprite powerhouse with an impressive color depth allowing 15-bit per pixel and RGB blending between layers.&lt;/p&gt;
&lt;table&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://fabiensanglard.net/another_world_polygons_SNES/clear_5bit.png&quot; align=&quot;left&quot; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&quot;http://fabiensanglard.net/another_world_polygons_SNES/dark_5bit.png&quot; align=&quot;right&quot; /&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;small&gt;15-bit per pixel color space&lt;/small&gt;&lt;/em&gt;&lt;/span&gt; The S-PPU is in fact made of two chips. The PPU-1 is in charge of deciding what to sample from the VRAM while the PPU-2 converts the bitplanes in VRAM to pixels&lt;a name=&quot;back_1&quot; href=&quot;http://fabiensanglard.net/another_world_polygons_SNES/index.html#footnote_1&quot; id=&quot;back_1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Two video resolutions are available on NTSC with the normal 256x224 and a highRes (interlaced 512x448). To accomodate PAL TVs, the console can output respectively 256x239 and 512x478 although developers rarely bothered and often used NTSC resolution on PAL monitors.&lt;/p&gt;&lt;p&gt;Like the Sega Genesis, the video generation revolves around the concept of layers, here called &quot;backgrounds&quot;. Depending on the graphic mode, various combination of colors and backgrounds are available.&lt;/p&gt;
&lt;pre&gt;
Mode       # Colors for BackGround       Resolution (NTSC)       Resolution (PAL)
           1       2      3      4  
=================================================================================
0          4       4      4      4            256x224                256x239
1         16      16      4      -            256x224                256x239
2         16      16      -      -            256x224                256x239
3        256      16      -      -            256x224                256x239
4        256       4      -      -            256x224                256x239
5         16       4      -      -            512x448                512x478
6         16       -      -      -            512x448                512x478
7        256       -      -      -            256x224                256x239    
7EXT     256     128      -      -            256x224                256x239
&lt;/pre&gt;
&lt;p&gt;Background are made of tiles. For each background, the tile layout is determined by a &quot;Tilemap&quot;. Tile dimension is usually 8x8 where pixels are grouped per line per bitplane.&lt;/p&gt;
&lt;pre&gt;
4BPP SNES TILE LAYOUT:
======================

      BYTE                BYTE
Line 0 bitplane0    Line 0 bitplane1   
Line 1 bitplane0    Line 1 bitplane1   
       .                    .
       .                    .
Line 7 bitplane0    Line 7 bitplane1 
Line 0 bitplane2    Line 0 bitplane3   
Line 1 bitplane2    Line 1 bitplane3   
       .                    .
       .                    .
Line 7 bitplane2    Line 7 bitplane3                   
&lt;/pre&gt;
&lt;p&gt;Tiles can also be 16x16 with an even weirder layout but this is a story for an other time. Sprites are not used during Another World gameplay and therefore not discussed further.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NTSC vs PAL&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;The resolution chosen for NTSC (256x224) and PAL (256x239) were not randomly chosen. These correspond to a known &quot;action safe area&lt;a name=&quot;back_2&quot; href=&quot;http://fabiensanglard.net/another_world_polygons_SNES/index.html#footnote_2&quot; id=&quot;back_2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt;&quot; guaranteed to be visible on a TV screen of the early 90s.&lt;/p&gt;
&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p&gt;Actual TVs show about 224 lines of the signal, hence the commonly reported 256x224 resolution. But the vertical position may be slightly off center. Emulators and LCD HDTVs tend to use lines 8 to 231, but some TVs have been seen to show lines 12 to 235.&lt;/p&gt;
&lt;p&gt;- wiki.nesdev.com (Overscan)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In the last entry about the Sega Genesis, we glanced over &quot;Sonic, the Hedgehog&quot; less than stellar PAL version. Nintendo did not make the same mistakes with its star title &quot;Super Mario World&quot;.&lt;/p&gt;&lt;p&gt;While most developers used 256x224 which looked good on North American and Japanese TVs but resulted in black vertical borders on PAL TVs, Nintendo made the effort to use 256x239 and reorganize the tilemaps. They also accounted for the 60Hz/50hz refresh rate and made everything move on a 16ms/20ms accordingly to not slow down gameplay on PAL&lt;a name=&quot;back_3&quot; href=&quot;http://fabiensanglard.net/another_world_polygons_SNES/index.html#footnote_3&quot; id=&quot;back_3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt;. The work paid off with worldwide full-screen display and similar gameplay embodying Nintendo's commitment to high-quality.&lt;br /&gt;&lt;/p&gt;
&lt;table&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://fabiensanglard.net/another_world_polygons_SNES/mario_ntsc.png&quot; align=&quot;left&quot; /&gt;&lt;span&gt;&lt;em&gt;&lt;small&gt;NTSC (256x224)&lt;/small&gt;&lt;/em&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&quot;http://fabiensanglard.net/another_world_polygons_SNES/mario_pal.png&quot; align=&quot;right&quot; /&gt;&lt;span&gt;&lt;em&gt;&lt;small&gt;PAL (256x239)&lt;/small&gt;&lt;/em&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Notice Nintendo's trick on PAL to fill the two extra 8x8 tile lines at the bottom with an increased &quot;underground&quot; visibility. Borders and text locations were adjusted accordingly. Keep in mind that PAL and NTSC TVs had 4:3 aspect ratio. Once transfered to screen, these tilemap appeared horizontally stretched.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Another World on Super Nintendo&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;Another World was ported to Super Nintendo by Rebecca Heineman around 1992 for Interplay. She was unable to answer questions before publication of this article. Information was gathered via &quot;Burgertime: Out of This World&quot; and bsnes-plus emulator to look under the hood.&lt;br /&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;15&quot;&gt;
&lt;p&gt;We wanted to do Super Nintendo games and Out of This World really was a game we'd like to do. The immediate thought was that the Amiga was as super powerful computer and while the Super Nintendo was powerful it was no Amiga. There was no way we can actually do OotW on SNES, it just couldn't be done.&lt;/p&gt;&lt;p&gt;Well, anybody who's been following my career would know that &quot;It couldn't be done&quot; generally resulted in a &quot;challenge accepted&quot;. And a challenge was accepted.&lt;/p&gt;
&lt;p&gt;- Burgertime: Out of This World&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The conversion seems to have happened on an accelerated Apple 2GS (which conveniently features the same 65C816 as the SNES) connected to SNES via a Sluggo 3 ROM emulator which Rebecca built herself.&lt;br /&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;19&quot;&gt;
&lt;p&gt;I took the source code and I ran off to my little office and looked at the code and realized [...] all I really needed to do [...] was create a interpreter which would run the scripting language and optimize the hell out of the interpreter in order for it to run the game.&lt;/p&gt;&lt;p&gt;It took me about two, three weeks and I sat there doing nothing but translating line by line [...].&lt;/p&gt;&lt;p&gt;I looked at the function of 68k, figure out what it was really supposed to do, and wrote the equivalent in 65C816. I did this for every single function until eventually I had every single function in the game. Sure enough I was running out of this world on an Apple IIGS! It was running only about 10 frames per second more like 5/10fps on a very accelerated IIGS because I hadn't done any real optimizations.&lt;/p&gt;
&lt;p&gt;- Burgertime: Out of This World&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;These were different times. Knowing hardware in order to roll out your own Sluggo 3 devkit&lt;a name=&quot;back_4&quot; href=&quot;http://fabiensanglard.net/another_world_polygons_SNES/index.html#footnote_4&quot; id=&quot;back_4&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/a&gt; and mastering Japanese were invaluable skills back then.&lt;/p&gt;
&lt;blockquote readability=&quot;18.915178571429&quot;&gt;
&lt;p&gt;I then had a parallel cable going from the Apple IIGS to a Sluggo 3, itself connected to a Super Nintendo. I mostly used this handmade dev kit because interplay was just too cheap to buy me a official Super Nintendo dev kit. In fact when we were developing stuff on the Super Nintendo initially we were actually victims of xenophobia from Japan.&lt;/p&gt;&lt;p&gt;When we got permission to start doing Super Nintendo software, Nintendo gave us their manuals. They were all in Japanese and they told us that it was going to take anywhere from you know 2 to 6 months before they got the translations.&lt;/p&gt;&lt;p&gt;日本語を話しますか?&lt;a name=&quot;back_5&quot; href=&quot;http://fabiensanglard.net/another_world_polygons_SNES/index.html#footnote_5&quot; id=&quot;back_5&quot;&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/a&gt;, Do you speak Japanese? I do!&lt;/p&gt;
&lt;p&gt;- Burgertime: Out of This World&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Overall design&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;img src=&quot;http://fabiensanglard.net/another_world_polygons_SNES/snes.svg&quot; /&gt; The architecture of Another World on Super Nintendo is similar to the Genesis. The CPU renders to three local framebuffers located in RAM. When a frame is completed, it is DMA copied&lt;a name=&quot;back_6&quot; href=&quot;http://fabiensanglard.net/another_world_polygons_SNES/index.html#footnote_6&quot; id=&quot;back_6&quot;&gt;&lt;sup&gt;[6]&lt;/sup&gt;&lt;/a&gt; to VRAM. To avoid tearing, a double buffer is used in VRAM&lt;a name=&quot;back_7&quot; href=&quot;http://fabiensanglard.net/another_world_polygons_SNES/index.html#footnote_7&quot; id=&quot;back_7&quot;&gt;&lt;sup&gt;[7]&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;The console is setup in mode 1 which has three background but everything happens in Background 1. Every time a new frame is available, the tilemap of the matching double buffer is updated. The framebuffers are faked via 8x8 unique tiles.&lt;/p&gt;&lt;p&gt;Thanks to the planar layout of its tiles, this version could render alike the Atari ST and cruise with lines segment of 8 pixel written in 4 operations.&lt;/p&gt;&lt;p&gt;A significant slowdown is the bytecode which was designed with 16-bit registers in mind. The Ricoh has 16-bit registers but its 8-bit data bus made store/load operations twice as slow. Even with DMA pushing all these bytes from RAM to VRAM was a problem. It seems it was an even harder problem to implement COPY opcode.&lt;/p&gt;&lt;p&gt;The solution to both CPU and bandwidth issues were to use only 28x20 out of the 32x28 tiles available. This effectively lowered the resolution from 256x224 to 224x160.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Enhancement Chips&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;Perhaps the most interesting part of this port is the iteration process&lt;a name=&quot;back_8&quot; href=&quot;http://fabiensanglard.net/another_world_polygons_SNES/index.html#footnote_8&quot; id=&quot;back_8&quot;&gt;&lt;sup&gt;[8]&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;The SNES was based on two powerful chips, a S-PPU and a S-DSP, with a modest CPU as the maestro of the orchestra. To provision for developers with other needs, Nintendo designed the cartridge port carefully. The Bus-A address space (which the cartridge is connected to) features a reserved section ($6000–$7FFF)&lt;a name=&quot;back_9&quot; href=&quot;http://fabiensanglard.net/another_world_polygons_SNES/index.html#footnote_9&quot; id=&quot;back_9&quot;&gt;&lt;sup&gt;[9]&lt;/sup&gt;&lt;/a&gt;. The cartridge port also has a special bus line (/CART) which let the CPU signal when it is accessing the cartridge address space.&lt;/p&gt;&lt;p&gt;These two features combined allowed developers to ship carts (a.k.a Game Pak) with special chips on-board. These &quot;enhancement&quot; chips monitor bus-A usage and use the reserved memory space to map their registers in order to receive commands from the CPU.&lt;/p&gt;&lt;p&gt;This is the feature Rebecca attempted to leverage first in a series of four different revisions.&lt;/p&gt;&lt;p&gt;&lt;u&gt;&lt;strong&gt;Attempt 1: Super-FX chip&lt;/strong&gt;&lt;/u&gt;&lt;br /&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;13&quot;&gt;
&lt;p&gt;I thought I could get this game running at 60 frames per second by putting a super FX chip in there. I got a copy of Starfox I pull the chip out figured out how the chip worked and started using it. I had OotW running at 60fps! I said &quot;hey Brian the game is getting ready to ship, here's the cartridge I'm gonna need&quot;.&lt;/p&gt;&lt;p&gt;He looks at the price list and says &quot;Can you get rid of super FX chip? It's too expensive!&quot;.&lt;/p&gt;
&lt;p&gt;- Burgertime: Out of This World&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;u&gt;&lt;strong&gt;Attempt 2: Static RAM&lt;/strong&gt;&lt;/u&gt;&lt;br /&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;12&quot;&gt;
&lt;p&gt;I took all the super FX code out and then changed it over to just software rendering. But there were certain parts of the software rendering which was running really really slow. One of them is like I had to take a full screen background and copy it to another one. I found this trick that if I had static memory [WRAM] on the cartridge I can actually copy that static memory at super speeds using DMA and I said &quot;Give me a cartridge that uses a static memory and I could get to 30 frames per second&quot;.&lt;/p&gt;&lt;p&gt;And he goes like &quot;That's too expensive!&quot;.&lt;/p&gt;
&lt;p&gt;- Burgertime: Out of This World&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;u&gt;&lt;strong&gt;Attempt 3: Fast cartridge (3.58Mhz)&lt;/strong&gt;&lt;/u&gt;&lt;br /&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;24.904761904762&quot;&gt;
&lt;p&gt;So with no battery backed up RAM, we're gonna have to save the game with little entry code [...]. When you get to a certain level it says here is your code [...] you write it down to a piece of paper and that's how you save your games.&lt;/p&gt;&lt;p&gt;Okay, no super FX chip, no battery backed up ram alright, I did make it so that I could get the software running again to run at about 30 frames per second if of course I'm using a fast cartridge because cartridges at the time you could buy them either 2.68Mhz [SlowROM] or 3.58Mhz [FastROM&lt;a name=&quot;back_10&quot; href=&quot;http://fabiensanglard.net/another_world_polygons_SNES/index.html#footnote_10&quot; id=&quot;back_10&quot;&gt;&lt;sup&gt;[10]&lt;/sup&gt;&lt;/a&gt;].&lt;/p&gt;&lt;p&gt;To give you an idea, the SNES actually runs a 3.6Mhz. It's a pretty fast chip for the time but the ROMs that run at that speed costs a little bit more that roms that run at a slower speed.&lt;/p&gt;&lt;p&gt;Using a 3.6Mhz ROM you know my dev kit can ran and go to run at 10Mhz so it was no problem for you just to set the switch to run to dev kit I got it running really fast frame rate so it's looking good ready. Then Fargo comes out he said &quot;Can you use the slower ROM it'll save 50 cents a cartridge.&quot;.&lt;/p&gt;
&lt;p&gt;- Burgertime: Out of This World&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;u&gt;&lt;strong&gt;Attempt 4: Slow cartridge (2.68 Mhz)&lt;/strong&gt;&lt;/u&gt;&lt;br /&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;27&quot;&gt;
&lt;p&gt;Forced to use a slowROM, I found out that the game would run at best 20 frames per second. I tried little stunts like letterboxing the game, making it look like a movie but I'm actually rendering less which up the framerate but it wasn't quite getting it.&lt;/p&gt;&lt;p&gt;How the hell am I going to get this thing to run as fast as I want? Then it dawned on me the DMA registers in the SNES that I'm not using are sitting there. After reading the technical specs very carefully in Japanese I came to come to find out that those memory registers actually runs the full CPU 3.6Mhz speed.&lt;/p&gt;&lt;p&gt;The hardware registers are essentially values you could just write into and read into. There was about 32 bytes of memory that are used as registers but as long as you don't actually use them, you just put values in and read them back.&lt;/p&gt;&lt;p&gt;I put a 32 byte function that would draw a scanline of polygon data in there. I had a 10% speed improvement and I got my frames per second.&lt;/p&gt;&lt;p&gt;Of course emulator authors later on would hate my guts. &quot;Why is it that this cartridge doesn't run on my emulator?&quot;.&lt;/p&gt;
&lt;p&gt;- Burgertime: Out of This World&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;More about PAL/NTSC and aspect ratio&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;With a limited development time window, Another World on PAL system did not benefit of a special horizontal makeover. The PAL version of the game shipped with the same tile resolution as the NTSC version.&lt;br /&gt;&lt;/p&gt;
&lt;table&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://fabiensanglard.net/another_world_polygons_SNES/aw_ntsc.png&quot; align=&quot;left&quot; /&gt;&lt;span&gt;&lt;em&gt;&lt;small&gt;NTSC&lt;/small&gt;&lt;/em&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&quot;http://fabiensanglard.net/another_world_polygons_SNES/aw_pal.png&quot; align=&quot;right&quot; /&gt;&lt;span&gt;&lt;em&gt;&lt;small&gt;PAL&lt;/small&gt;&lt;/em&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Factoring in the 4:3 aspect ratio of tilemap to TV conversion, we see that the PAL version has an aspect ratio of 1.74 while NTSC has an aspect ratio of 1.6299. Both are very close to the intended 1.666 ratio.&lt;/p&gt;
&lt;table&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://fabiensanglard.net/another_world_polygons_SNES/aw_ntsc-4.3.png&quot; align=&quot;left&quot; /&gt;&lt;span&gt;&lt;em&gt;&lt;small&gt;NTSC&lt;/small&gt;&lt;/em&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&quot;http://fabiensanglard.net/another_world_polygons_SNES/aw_pal-4.3.png&quot; align=&quot;right&quot; /&gt;&lt;span&gt;&lt;em&gt;&lt;small&gt;PAL&lt;/small&gt;&lt;/em&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt;Colors and Resolution&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt; Compared to the Genesis and Amiga, the SNES was a lower resolution but the result still looks impressively good.&lt;br /&gt;&lt;img src=&quot;http://fabiensanglard.net/another_world_polygons_SNES/lester_snes.png&quot; width=&quot;100%&quot; id=&quot;lester_hi&quot; name=&quot;lester_hi&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Thanks to the 15-bit color depth, the colors on SNES are an exact conversion of the Amiga 12-bit colors. The facial expression on Lester were not altered which may mean the Genesis conversion was done after the SNES with special artwork requested to Eric Chahi.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Verdict&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;The Creator expressed how he felt about the SNES port. Therefore I will not elaborate on it.&lt;br /&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;I have a print of the cover of &quot;Out Of This World&quot;. It is signed by Eric Chahi and it says in French &quot;Congratulations for the completion and the shipping of the Super Nintendo version of out of this world&quot;. He gave me that painting already framed [...] and I'm like &quot;oh my god thank you very much&quot;. It's been hanging on my wall ever since.&lt;/p&gt;
&lt;p&gt;- Burgertime: Out of This World&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;&lt;p id=&quot;paperbox&quot;&gt;&lt;a href=&quot;http://fabiensanglard.net/another_world_polygons_SNES/index.html#back_1&quot;&gt;^&lt;/a&gt; [ 1] Source : &lt;a href=&quot;https://wiki.superfamicom.org/schematics-ports-and-pinouts&quot;&gt;SNES Schematics, Ports, and Pinouts&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://fabiensanglard.net/another_world_polygons_SNES/index.html#back_2&quot;&gt;^&lt;/a&gt; [ 2] Source : &lt;a href=&quot;https://wiki.nesdev.com/w/index.php/Overscan&quot;&gt;Overscan&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://fabiensanglard.net/another_world_polygons_SNES/index.html#back_3&quot;&gt;^&lt;/a&gt; [ 3] Source : &lt;a href=&quot;https://smwspeedruns.com/Version_Differences&quot;&gt;Super Mario World Wiki: Version Differences&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://fabiensanglard.net/another_world_polygons_SNES/index.html#back_4&quot;&gt;^&lt;/a&gt; [ 4] Source : &lt;a href=&quot;https://wiki.superfamicom.org/sluggo-iii&quot;&gt;Apple II RoundTable: Sluggo III&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://fabiensanglard.net/another_world_polygons_SNES/index.html#back_5&quot;&gt;^&lt;/a&gt; [ 5] Comment: 'Nihongo wo hanashimasuka?'' which actually means 'Do you speak Japanese?'. Thanks to an_ko@news.ycombinator.com for the explanation&lt;br /&gt;&lt;a href=&quot;http://fabiensanglard.net/another_world_polygons_SNES/index.html#back_6&quot;&gt;^&lt;/a&gt; [ 6] Source : &lt;a href=&quot;http://fabiensanglard.net/another_world_polygons_SNES/dma_traces.png&quot;&gt;BSnes Plus Debugger&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://fabiensanglard.net/another_world_polygons_SNES/index.html#back_7&quot;&gt;^&lt;/a&gt; [ 7] Source : &lt;a href=&quot;http://fabiensanglard.net/another_world_polygons_SNES/tile_viewer.png&quot;&gt;BSnes Plus Tileviewer screenshot&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://fabiensanglard.net/another_world_polygons_SNES/index.html#back_8&quot;&gt;^&lt;/a&gt; [ 8] Source : &lt;a href=&quot;https://www.youtube.com/watch?v=tiq0OL8rzso&quot;&gt;Burgertime 8/9/2015: Out of This World&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://fabiensanglard.net/another_world_polygons_SNES/index.html#back_9&quot;&gt;^&lt;/a&gt; [ 9] Source : &lt;a href=&quot;https://en.wikibooks.org/wiki/Super_NES_Programming/SNES_memory_map#LoROM&quot;&gt;RESERVED (enhancement chips memory)&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://fabiensanglard.net/another_world_polygons_SNES/index.html#back_10&quot;&gt;^&lt;/a&gt; [10] Source : &lt;a href=&quot;https://www.mkelly.me/sno/docs/milestone1/design_doc.pdf&quot;&gt;SNO SNES SlowROM vs FastROM&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;&lt;center&gt;*&lt;/center&gt;
&lt;/body&gt;</description>
<pubDate>Sun, 19 Jan 2020 09:34:51 +0000</pubDate>
<dc:creator>ingve</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>http://fabiensanglard.net/another_world_polygons_SNES/index.html</dc:identifier>
</item>
<item>
<title>Yukihiro Matsumoto: “Ruby is designed for humans, not machines”</title>
<link>https://evrone.com/yukihiro-matsumoto-interview</link>
<guid isPermaLink="true" >https://evrone.com/yukihiro-matsumoto-interview</guid>
<description>&lt;h2 dir=&quot;ltr&quot;&gt;Introduction &lt;/h2&gt;
&lt;p dir=&quot;ltr&quot;&gt;We’re thrilled that our good friend Yukihiro Matsumoto, creator of the Ruby programming language, has been able to join us at RubyRussia 2019 as a speaker for the second time, having previously spoken three years ago at RubyRussia 2016.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;In the time that we’ve been holding the conference — now more than ten years — Ruby has undergone a great deal of evolution, and Evrone has grown and developed alongside it.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Grigory Petrov, Developer Relations at Evrone, sat down with Mr Matsumoto to hear from him first-hand about being a star, the philosophy behind Ruby’s design and evolution, and a little about Japanese life and culture.&lt;/p&gt;
&lt;h3 dir=&quot;ltr&quot;&gt;The Interview&lt;/h3&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Grigory:&lt;/strong&gt; This is your second visit to Russia, the first being in 2016, and since then, the number of people attending RubyRussia has doubled. Thank you so much for your talk, I really enjoyed it, and I now know the answers to a few of the questions I was going to ask you!&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;I saw that people weren’t just asking you questions, but also asking for pictures with you too, and even asking for autographs — you’re a star! We developers certainly like the language, and what you’re doing for the community, but are people like this all over the world, or is this something specific to Russia?&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Yukihiro:&lt;/strong&gt; People ask to take photos everywhere: in every country and at every conference, people want to take pictures with me. But I think this is the first time anybody has asked me for an autograph!&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt; &lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Grigory:&lt;/strong&gt; As the creator of a programming language, you presumably get lots of questions, suggestions, ideas, and so on. What’s the one thing you’re asked most often?&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Yukihiro:&lt;/strong&gt; The most popular question is: &quot;I’m from the language X community; can’t you introduce a feature from the language X to Ruby?&quot;, or something like that. And my usual answer to these requests is… &quot;no, I wouldn’t do that&quot;, because we have different language design and different language development policies.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;We can’t just take some feature from language X and dump it into Ruby, although in some cases, we do of course borrow ideas from other languages such Python, JavaScript and Elixir. This question gets asked again and again, but getting a positive response to it is very rare.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt; &lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Grigory:&lt;/strong&gt; It’s great that you’re able to say no; I find that technologies that are “designed by the community” don’t often necessarily end up with the best results. There are so many different languages and technologies, so we can really look at the best practices and implement only the things that are a good fit.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;We’ve recently seen a wave of adding gradual typing to dynamically-typed languages such as JavaScript, Python and PHP. What are your thoughts on type annotations and gradual typing? Why are they so popular? And what are your general ideas and plans for type checking in Ruby 3 and beyond?&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Yukihiro:&lt;/strong&gt; For example, Rust and Go are statically-typed languages. If the software built using them is growing pretty fast, you can end up maintaining huge codebases, potentially millions of lines of code, with hundreds of team members working on each, and in those cases, type checking is a very convenient way of detecting mismatches.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;In contrast, with dynamically-typed languages, we have to write tests in order to avoid type mismatches in our code. As software grows, the volume of tests (and burden of writing them) grows with it, and that’s really helped to drive the recent popularity of static and gradual typing.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;At the same time, however, static type declaration is redundant, and with a language like Ruby, we want the benefit of static type checking without the redundancy of manual type declarations.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;As a Ruby community and as the Ruby language, we try to satisfy both needs at the simultaneously: we’re going to have the type information file separate from the Ruby program — the Ruby program itself doesn’t contain any static type information. Instead, a separate type information file, we call it &quot;Ruby signature file&quot;, contains the type information about the library, Gems and your programs.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;We’re going to provide a tool, called the &quot;type profiler&quot;, which can collect the type information about your software. After collecting the type information for the library and your software, the type profiler has all the information it needs about all of the classes and methods, so it can then detect type contradictions — type conflicts. You can even refine the type information in your signature file by hand to afford better type checking.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;In future Ruby, you’ll be able to check the types statically, to some extent — but to a very limited degree. You’ll have the traditional Ruby behaviour, which does type checking at runtime. With a &quot;level one type checker&quot; it's possible to find between 40-80% of type errors by using the type information available in the source code. A &quot;level two type checker&quot; can generate additional type information based on analysis of the code itself. With these tools, future versions of Ruby can provide static type checks without needing explicit type annotations in your code.&lt;/p&gt;
&lt;div class=&quot;ck-l-100&quot; dir=&quot;ltr&quot;&gt;&lt;img alt=&quot;Yukihiro Matsumoto interview&quot; src=&quot;https://evrone.com/sites/default/files/upload_ck/cases/matzumoto/7j2a3564.jpg&quot;/&gt;&lt;/div&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Grigory:&lt;/strong&gt; During the talk at the conference, you’ve mentioned this, and it’s quite the idea. I’m a C/C++ developer, and so static typing is natural for me, and I always viewed types as a way of declaring my intentions, so as to help the language and tools find possible errors in the future.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Your idea is to create a system, where you write code itself, but it’s possible from that code to infer enough information to be able to spot errors without resorting explicit types, and I like the sound of that a great deal.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;It’s great that you conduct experiments, test ideas. What future do you see for Ruby? What way do you steer the language? &lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Yukihiro:&lt;/strong&gt; Actually, I don’t steer the language or the community. I just provide technology and the community decides which way to go. At least, we have enough technology for as many domains as possible to make Ruby flexible and productive. For example, Ruby is mostly used to build web apps right now, but I’d like to see Ruby used in research, or AI and machine learning. We’re trying to make the technology usable in new domains.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt; &lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Grigory:&lt;/strong&gt; We developers like to label and categorise things. Like, this is a sports car versus this is a family car. We label programming languages too: JavaScript is a &quot;web language&quot;, C is a &quot;system low-level language&quot;, C# is &quot;for Windows UI native applications&quot;. How do you tend to categorise Ruby?&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Yukihiro:&lt;/strong&gt; I would categorise Ruby as a productive programming language. Productivity is one of the biggest, primary goals of Ruby. I designed Ruby for humans, not for machines. Sometimes core contributors complain about the design of the language because it is difficult to implement it efficiently. Ruby’s design isn’t focused on performance first, but on productivity first. That means the implementers have a bigger challenge, but we’re excited about that challenge: we aim to make Ruby as productive for developers as possible, and, at the same time, as performant as possible.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt; &lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Grigory:&lt;/strong&gt; With Python, we don't have multiline anonymous callables due to implementation issues. It’s good to hear that for Ruby, you and core developers are trying hard to make developers’ life easier, despite the technological challenges of the implementation.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;If we talk about challenges… Imagine that you have an opportunity to travel back in time and give only one piece of advice to your younger self, at around the time you’ve started Ruby language development. What advice would you give yourself? &lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Yukihiro:&lt;/strong&gt; Don’t take too much from other scripting languages. Your programming language will be the best general-purpose programming language. Features introduced just to make Ruby more comparable with scripting languages will be kind of an appendix in the future — mostly useless, until they go wrong — so it’s best not to focus too much on them.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt; &lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Grigory:&lt;/strong&gt; In the past, there was a huge difference between &quot;scripting&quot; and &quot;compiled&quot; programming languages. Nowadays, the world has changed: between virtual machines, bytecode, and JIT compilers, the line between them is quite blurred.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;During this evolution, you’ve implemented lots of changes and conducted lots of experiments with Ruby. Some were successful, some were not. What do you see as your greatest Ruby design success? What do you like the most? &lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Yukihiro:&lt;/strong&gt; If I had to pick one thing, I would say blocks. A Ruby block is a quite unique, quite useful abstraction of a high-order function. It’s much simpler than in other languages. It’s restricted, but it’s convenient.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt; &lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Grigory:&lt;/strong&gt; It’s a coincidence, but blocks are the things I like the most about Ruby. In my own talks and interviews, I say Ruby is about DSL, syntax sugar and blocks. Blocks are great.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Yukihiro:&lt;/strong&gt; In the languages like Swift, if the last argument is a function you can put braces around it for something like a Ruby block. There’s a proposal for a similar feature to be added to JavaScript. I’m very proud of that.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt; &lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Grigory:&lt;/strong&gt; Yes, JavaScript can emulate blocks by passing a fat-arrow-function as the last argument, because (since ES6) it has that fat-arrow syntax for multi-line functions. Blocks are great. Meanwhile, are there things in Ruby’s design or evolution that you dislike? What would you call the biggest design failure that should be fixed, or is already fixed?&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Yukihiro:&lt;/strong&gt; I have some. Global variables: they were useful for a &quot;scripting language&quot;, but now they are more like an appendix. I also regret adding threads to the language, we should have had a better concurrency abstraction. My other design mistake is some objects that are needlessly mutable. For example, there is a possibility to change a time zone for the existing time object, instead of creating a new one. I regret that.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt; &lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Grigory:&lt;/strong&gt; Yes, mutability is a tricky thing and can easily lead to errors in our source code.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Moving on from the technicalities of Ruby, how do you organize your work on the language? How does your working day look like?&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Yukihiro:&lt;/strong&gt; I’m a full-time Ruby developer. I spend half of my time thinking about the design of the future Ruby 3. The rest of the time I am working on another Ruby implementation, MRuby, along with some other projects.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;For Ruby, the canonical Ruby implementation is done by the core contributors, and so I only need to make decisions such as &quot;this method should behave like this&quot;, &quot;this language feature should be like that&quot;, &quot;the syntax like this&quot;, &quot;the semantics are these”, and so on. I just make decisions and the other developers implement them. So, I’m half designer and half programmer. I spend about a third of my time on MRuby.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt; &lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Grigory:&lt;/strong&gt; I’ve checked your GitHub profile and saw lots of commits including during your flight to Russia day. Recently there were a lot of talks about developers &quot;burning out&quot;. Do you have any free time? Any hobbies? What do you do for your well-being, in order to not burn out?&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Yukihiro:&lt;/strong&gt; Luckily, I spend all the time on open-source software. I have no pressure from the clients. I have no bosses. I manage myself. That’s the reason I’m so relaxed at work. I have no specific deadlines besides the release date. This freedom makes me feel relaxed. That’s the one secret. The other one is that I try to spend time not related to computers and programming at all. For example, I spend time walking with my dog, petting my cat. I do some service for my local church. I spend time with my family. That time spent on my social life helps a lot.&lt;/p&gt;
&lt;div class=&quot;ck-l-100&quot; dir=&quot;ltr&quot;&gt;&lt;img alt=&quot;yukihiro matsumoto rubyrussia&quot; src=&quot;https://evrone.com/sites/default/files/upload_ck/cases/matzumoto/7j2a1662.jpg&quot;/&gt;&lt;/div&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Grigory:&lt;/strong&gt; Many Ruby developers from Russia like Japan as a country and enjoy Japanese culture. They watch anime, read Manga, and some of them visit Japan. As a native of Japan and a software developer, what places and experiences can you recommend to fellow developers who visit Japan?&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Yukihiro:&lt;/strong&gt; Japan is a very diverse country. You can visit metropolitan areas like Tokyo, where it’s kind of futuristic. We have a lot of pop culture, like Manga and anime there. At the same time, we have mountains, forests and historical places, like old shrines and temples. We have beautiful cherry blossoms and the leaves. It depends on your taste and preferences, you can enjoy many things: food, nature, technology. I recommend that you enjoy the diversity of the country!&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt; &lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Grigory:&lt;/strong&gt; Is it something in Japanese culture and history that influences Ruby? &lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Yukihiro:&lt;/strong&gt; I am not sure. In Japanese, we have sentence chaining, which is similar to method chaining in Ruby, so perhaps this was influenced by the Japanese language. Japan is a wealthy country, some of us didn’t have to work so hard to sustain our lives. That allows me to work on the open-source software, which does not make money at all. We don’t sell open-source software. We can sustain our life through day jobs or from our sponsors, which can help us, including contributors, work on Ruby and to make better technology. That’s what I can think of.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt; &lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Grigory:&lt;/strong&gt; And the last, tricky question. People often want to know what it’s like to see the world through the eyes of another person — to know what they think, and what they feel. Are there any aspects to being the language author that aren’t really obvious from outside?&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Yukihiro:&lt;/strong&gt; The one thing is… Despite what others feel, creating the language is not really a difficult task. Computer science major students take classes for language implementation, and almost everybody that graduates can write their own programming language. Technically, it’s not that difficult.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;At the same time, people don’t understand the nature of designing a language. Language is kind of a scaffolding of the mind, a way of structuring your thinking. It’s same to human languages, like Russian, Japanese and English.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Programming languages such as Ruby, Python, JavaScript, and so on, help to develop the mind, to allow you to turn ideas into something tangible and useful. That’s the primary purpose of a programming language.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;I think a programming language should have a philosophy of helping our thinking, and so Ruby’s focus is on productivity and the joy of programming. Other programming languages, for example, focus instead on simplicity, performance, or something like that. Each programming language has a different philosophy and design. If you feel comfortable with Ruby’s philosophy, that means Ruby is your language.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt; &lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Grigory:&lt;/strong&gt; Thank you! That was Grigory Petrov and Yukihiro Matsumoto at RubyRussia 2019! Arigato!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Yukihiro:&lt;/strong&gt; Arigato!&lt;/p&gt;

&lt;p&gt;Video interview with Yukihiro Matsumoto:&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;0&quot; scrolling=&quot;no&quot; src=&quot;https://www.youtube.com/embed/46WjUVqagTo&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/p&gt;


&lt;p&gt;From the interview with Yukihiro we’ve learned about the philosophy of Ruby, the future plans of the core team for the development of the language. We are glad to be good friends with Yukihiro who inspires us to use Ruby in a wide range of software development projects. If you have cool ideas and love Ruby as much as we do — let's create a new product together!&lt;/p&gt;



</description>
<pubDate>Sun, 19 Jan 2020 09:21:41 +0000</pubDate>
<dc:creator>Evrone</dc:creator>
<og:type>website</og:type>
<og:url>https://evrone.com/yukihiro-matsumoto-interview</og:url>
<og:title>Yukihiro Matsumoto: &quot;Ruby is designed for humans, not machines&quot;</og:title>
<og:description>Yukihiro Matsumoto talks to Evrone about what makes Ruby shine</og:description>
<og:image>https://evrone.com/sites/default/files/n-fields/cases/71531306_2656002431177544_8447687255136403456_o.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://evrone.com/yukihiro-matsumoto-interview</dc:identifier>
</item>
<item>
<title>C++ coroutines: Initial implementation pushed to master</title>
<link>https://gcc.gnu.org/ml/gcc-patches/2020-01/msg01096.html</link>
<guid isPermaLink="true" >https://gcc.gnu.org/ml/gcc-patches/2020-01/msg01096.html</guid>
<description>&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;&lt;title&gt;Iain Sandoe - [C++ coroutines] Initial implementation pushed to master.&lt;/title&gt;&lt;/head&gt;&lt;body id=&quot;readabilityBody&quot; readability=&quot;112.64379159972&quot;&gt;
&lt;p&gt;This is the mail archive of the &lt;tt&gt;gcc-patches@gcc.gnu.org&lt;/tt&gt; mailing list for the &lt;a href=&quot;https://gcc.gnu.org/&quot;&gt;GCC project&lt;/a&gt;. &lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;&lt;li&gt;&lt;em&gt;From&lt;/em&gt;: Iain Sandoe &amp;lt;iain at sandoe dot co dot uk&amp;gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;To&lt;/em&gt;: GCC Patches &amp;lt;gcc-patches at gcc dot gnu dot org&amp;gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Cc&lt;/em&gt;: Nathan Sidwell &amp;lt;nathan at acm dot org&amp;gt;, Richard Biener &amp;lt;richard dot guenther at gmail dot com&amp;gt;, Jonathan Wakely &amp;lt;jwakely at redhat dot com&amp;gt;, Jeff Law &amp;lt;law at redhat dot com&amp;gt;, libstdc++ &amp;lt;libstdc++ at gcc dot gnu dot org&amp;gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Date&lt;/em&gt;: Sat, 18 Jan 2020 12:53:48 +0000&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Subject&lt;/em&gt;: [C++ coroutines] Initial implementation pushed to master.&lt;/li&gt;
&lt;/ul&gt;&lt;hr /&gt;&lt;pre&gt;
Hi,

Thanks to:

   * the reviewers, the code was definitely improved by your reviews.

   * those folks who tested the branch and/or compiler explorer 
     instance and reported problems with reproducers.

  * WG21 colleagues, especially Lewis and Gor for valuable input
    and discussions on the design.

===== TL;DR:

* This is not enabled by default (even for -std=c++2a), it needs -fcoroutines.

* Like all the C++20 support, it is experimental, perhaps more experimental
  than some other pieces because wording is still being amended.

* The FE/ME tests are run for ALL targets; in principle this should be target-
  agnostic, if we see fails then that is probably interesting input for the ABI
 panel.

 * I regstrapped on 64b LE and BE platforms and a 32b LE host with no observed
  issues or regressions.

 * it’s just slightly too big to send uncompressed so attached as a bz2.
 
 * commit is r10-6063-g49789fd08

thanks again to all those who helped,
Iain

======  The full covering note:

This is the squashed version of the first 6 patches that were split to
facilitate review.

The changes to libiberty (7th patch) to support demangling the co_await
operator stand alone and are applied separately.

The patch series is an initial implementation of a coroutine feature,
expected to be standardised in C++20.

Standardisation status (and potential impact on this implementation)
--------------------------------------------------------------------

The facility was accepted into the working draft for C++20 by WG21 in
February 2019.  During following WG21 meetings, design and national body
comments have been reviewed, with no significant change resulting.

The current GCC implementation is against n4835 [1].

At this stage, the remaining potential for change comes from:

* Areas of national body comments that were not resolved in the version we
  have worked to:
  (a) handling of the situation where aligned allocation is available.
  (b) handling of the situation where a user wants coroutines, but does not
      want exceptions (e.g. a GPU).

* Agreed changes that have not yet been worded in a draft standard that we
  have worked to.

It is not expected that the resolution to these can produce any major
change at this phase of the standardisation process.  Such changes should be
limited to the coroutine-specific code.

ABI
---

The various compiler developers 'vendors' have discussed a minimal ABI to
allow one implementation to call coroutines compiled by another.

This amounts to:

1. The layout of a public portion of the coroutine frame.

 Coroutines need to preserve state across suspension points, the storage for
 this is called a &quot;coroutine frame&quot;.

 The ABI mandates that pointers into the coroutine frame point to an area
 begining with two function pointers (to the resume and destroy functions
 described below); these are immediately followed by the &quot;promise object&quot;
 described in the standard.

 This is sufficient that the builtins can take a coroutine frame pointer and
 determine the address of the promise (or call the resume/destroy functions).
 
2. A number of compiler builtins that the standard library might use.

  These are implemented by this patch series.

3. This introduces a new operator 'co_await' the mangling for which is also
agreed between vendors (and has an issue filed for that against the upstream
c++abi).  Demangling for this is added to libiberty in a separate patch.

The ABI has currently no target-specific content (a given psABI might elect
to mandate alignment, but the common ABI does not do this).

Standard Library impact
-----------------------

The current implementations require addition of only a single header to
the standard library (no change to the runtime).  This header is part of
the patch.

GCC Implementation outline
--------------------------

The standard's design for coroutines does not decorate the definition of
a coroutine in any way, so that a function is only known to be a coroutine
when one of the keywords (co_await, co_yield, co_return) is encountered.

This means that we cannot special-case such functions from the outset, but
must process them differently when they are finalised - which we do from
&quot;finish_function ()&quot;.

At a high level, this design of coroutine produces four pieces from the
original user's function:

  1. A coroutine state frame (taking the logical place of the activation
     record for a regular function).  One item stored in that state is the
     index of the current suspend point.
  2. A &quot;ramp&quot; function
     This is what the user calls to construct the coroutine frame and start
     the coroutine execution.  This will return some object representing the
     coroutine's eventual return value (or means to continue it when it it
     suspended).
  3. A &quot;resume&quot; function.
     This is what gets called when a the coroutine is resumed when suspended.
  4. A &quot;destroy&quot; function.
     This is what gets called when the coroutine state should be destroyed
     and its memory released.

The standard's coroutines involve cooperation of the user's authored function
with a provided &quot;promise&quot; class, which includes mandatory methods for
handling the state transitions and providing output values.  Most realistic
coroutines will also have one or more 'awaiter' classes that implement the
user's actions for each suspend point.  As we parse (or during template
expansion) the types of the promise and awaiter classes become known, and can
then be verified against the signatures expected by the standard.

Once the function is parsed (and templates expanded) we are able to make the
transformation into the four pieces noted above.

The implementation here takes the approach of a series of AST transforms.
The state machine suspend points are encoded in three internal functions
(one of which represents an exit from scope without cleanups).  These three
IFNs are lowered early in the middle end, such that the majority of GCC's
optimisers can be run on the resulting output.

As a design choice, we have carried out the outlining of the user's function
in the front end, and taken advantage of the existing middle end's abilities
to inline and DCE where that is profitable.

Since the state machine is actually common to both resumer and destroyer
functions, we make only a single function &quot;actor&quot; that contains both the
resume and destroy paths.  The destroy function is represented by a small
stub that sets a value to signal the use of the destroy path and calls the
actor.  The idea is that optimisation of the state machine need only be done
once - and then the resume and destroy paths can be identified allowing the
middle end's inline and DCE machinery to optimise as profitable as noted
above.

The middle end components for this implementation are:

A pass that:
 1. Lowers the coroutine builtins that allow the standard library header to
    interact with the coroutine frame (these fairly simple logical or
    numerical substitution of values, given a coroutine frame pointer).
 2. Lowers the IFN that represents the exit from state without cleanup.
    Essentially, this becomes a gimple goto.
 3. Sets the final size of the coroutine frame at this stage.

A second pass (that requires the revised CFG that results from the lowering
of the scope exit IFNs in the first).

 1. Lower the IFNs that represent the state machine paths for the resume and
    destroy cases.

Patches squashed into this commit:

[C++ coroutines 1] Common code and base definitions.

This part of the patch series provides the gating flag, the keywords,
cpp defines etc.

[C++ coroutines 2] Define builtins and internal functions.

This part of the patch series provides the builtin functions
used by the standard library code and the internal functions
used to implement lowering of the coroutine state machine.

[C++ coroutines 3] Front end parsing and transforms.

There are two parts to this.

1. Parsing, template instantiation and diagnostics for the standard-
   mandated class entries.

  The user authors a function that becomes a coroutine (lazily) by
  making use of any of the co_await, co_yield or co_return keywords.

  Unlike a regular function, where the activation record is placed on the
  stack, and is destroyed on function exit, a coroutine has some state that
  persists between calls - the 'coroutine frame' (thus analogous to a stack
  frame).

  We transform the user's function into three pieces:
  1. A so-called ramp function, that establishes the coroutine frame and
     begins execution of the coroutine.
  2. An actor function that contains the state machine corresponding to the
     user's suspend/resume structure.
  3. A stub function that calls the actor function in 'destroy' mode.

  The actor function is executed:
   * from &quot;resume point 0&quot; by the ramp.
   * from resume point N ( &amp;gt; 0 ) for handle.resume() calls.
   * from the destroy stub for destroy point N for handle.destroy() calls.

  The C++ coroutine design described in the standard makes use of some helper
  methods that are authored in a so-called &quot;promise&quot; class provided by the
  user.

  At parse time (or post substitution) the type of the coroutine promise
  will be determined.  At that point, we can look up the required promise
  class methods and issue diagnostics if they are missing or incorrect.  To
  avoid repeating these actions at code-gen time, we make use of temporary
  'proxy' variables for the coroutine handle and the promise - which will
  eventually be instantiated in the coroutine frame.

  Each of the keywords will expand to a code sequence (although co_yield is
  just syntactic sugar for a co_await).

  We defer the analysis and transformatin until template expansion is
  complete so that we have complete types at that time.

2. AST analysis and transformation which performs the code-gen for the
   outlined state machine.

   The entry point here is morph_fn_to_coro () which is called from
   finish_function () when we have completed any template expansion.

   This is preceded by helper functions that implement the phases below.

   The process proceeds in four phases.

   A Initial framing.
     The user's function body is wrapped in the initial and final suspend
     points and we begin building the coroutine frame.
     We build empty decls for the actor and destroyer functions at this
     time too.
     When exceptions are enabled, the user's function body will also be
     wrapped in a try-catch block with the catch invoking the promise
     class 'unhandled_exception' method.

   B Analysis.
     The user's function body is analysed to determine the suspend points,
     if any, and to capture local variables that might persist across such
     suspensions.  In most cases, it is not necessary to capture compiler
     temporaries, since the tree-lowering nests the suspensions correctly.
     However, in the case of a captured reference, there is a lifetime
     extension to the end of the full expression - which can mean across a
     suspend point in which case it must be promoted to a frame variable.

     At the conclusion of analysis, we have a conservative frame layout and
     maps of the local variables to their frame entry points.

   C Build the ramp function.
     Carry out the allocation for the coroutine frame (NOTE; the actual size
     computation is deferred until late in the middle end to allow for future
     optimisations that will be allowed to elide unused frame entries).
     We build the return object.

   D Build and expand the actor and destroyer function bodies.
     The destroyer is a trivial shim that sets a bit to indicate that the
     destroy dispatcher should be used and then calls into the actor.

     The actor function is the implementation of the user's state machine.
     The current suspend point is noted in an index.
     Each suspend point is encoded as a pair of internal functions, one in
     the relevant dispatcher, and one representing the suspend point.

     During this process, the user's local variables and the proxies for the
     self-handle and the promise class instanceare re-written to their
     coroutine frame equivalents.

     The complete bodies for the ramp, actor and destroy function are passed
     back to finish_function for folding and gimplification.

[C++ coroutines 4] Middle end expanders and transforms.

The first part of this is a pass that provides:
 * expansion of the library support builtins, these are simple boolean
   or numerical substitutions.

 * The functionality of implementing an exit from scope without cleanup
   is performed here by lowering an IFN to a gimple goto.

This pass has to run for non-coroutine functions, since functions calling
the builtins are not necessarily coroutines (i.e. they are implementing the
library interfaces which may be called from anywhere).

The second part is the expansion of the coroutine IFNs that describe the
state machine connections to the dispatchers.  This only has to be run
for functions that are coroutine components.  The work done by this pass
is:

   In the front end we construct a single actor function that contains
   the coroutine state machine.

   The actor function has three entry conditions:
    1. from the ramp, resume point 0 - to initial-suspend.
    2. when resume () is executed (resume point N).
    3. from the destroy () shim when that is executed.

   The actor function begins with two dispatchers; one for resume and
   one for destroy (where the initial entry from the ramp is a special-
   case of resume point 0).

   Each suspend point and each dispatch entry is marked with an IFN such
   that we can connect the relevant dispatchers to their target labels.

   So, if we have:

   CO_YIELD (NUM, FINAL, RES_LAB, DEST_LAB, FRAME_PTR)

   This is await point NUM, and is the final await if FINAL is non-zero.
   The resume point is RES_LAB, and the destroy point is DEST_LAB.

   We expect to find a CO_ACTOR (NUM) in the resume dispatcher and a
   CO_ACTOR (NUM+1) in the destroy dispatcher.

   Initially, the intent of keeping the resume and destroy paths together
   is that the conditionals controlling them are identical, and thus there
   would be duplication of any optimisation of those paths if the split
   were earlier.

   Subsequent inlining of the actor (and DCE) is then able to extract the
   resume and destroy paths as separate functions if that is found
   profitable by the optimisers.

   Once we have remade the connections to their correct postions, we elide
   the labels that the front end inserted.

[C++ coroutines 5] Standard library header.

This provides the interfaces mandated by the standard and implements
the interaction with the coroutine frame by means of inline use of
builtins expanded at compile-time.  There should be a 1:1 correspondence
with the standard sections which are cross-referenced.

There is no runtime content.

At this stage, we have the content in an inline namespace &quot;__n4835&quot; for
the CD we worked to.

[C++ coroutines 6] Testsuite.

There are two categories of test:

1. Checks for correctly formed source code and the error reporting.
2. Checks for transformation and code-gen.

The second set are run as 'torture' tests for the standard options
set, including LTO.  These are also intentionally run with no options
provided (from the coroutines.exp script).

gcc/ChangeLog:

2020-01-18  Iain Sandoe  &amp;lt;iain@sandoe.co.uk&amp;gt;

        * Makefile.in: Add coroutine-passes.o.
        * builtin-types.def (BT_CONST_SIZE): New.
        (BT_FN_BOOL_PTR): New.
        (BT_FN_PTR_PTR_CONST_SIZE_BOOL): New.
        * builtins.def (DEF_COROUTINE_BUILTIN): New.
        * coroutine-builtins.def: New file.
        * coroutine-passes.cc: New file.
        * function.h (struct GTY function): Add a bit to indicate that the
        function is a coroutine component.
        * internal-fn.c (expand_CO_FRAME): New.
        (expand_CO_YIELD): New.
        (expand_CO_SUSPN): New.
        (expand_CO_ACTOR): New.
        * internal-fn.def (CO_ACTOR): New.
        (CO_YIELD): New.
        (CO_SUSPN): New.
        (CO_FRAME): New.
        * passes.def: Add pass_coroutine_lower_builtins,
        pass_coroutine_early_expand_ifns.
        * tree-pass.h (make_pass_coroutine_lower_builtins): New.
        (make_pass_coroutine_early_expand_ifns): New.
        * doc/invoke.texi: Document the fcoroutines command line
        switch.

gcc/c-family/ChangeLog:

2020-01-18  Iain Sandoe  &amp;lt;iain@sandoe.co.uk&amp;gt;

        * c-common.c (co_await, co_yield, co_return): New.
        * c-common.h (RID_CO_AWAIT, RID_CO_YIELD,
        RID_CO_RETURN): New enumeration values.
        (D_CXX_COROUTINES): Bit to identify coroutines are active.
        (D_CXX_COROUTINES_FLAGS): Guard for coroutine keywords.
        * c-cppbuiltin.c (__cpp_coroutines): New cpp define.
        * c.opt (fcoroutines): New command-line switch.

gcc/cp/ChangeLog:

2020-01-18  Iain Sandoe  &amp;lt;iain@sandoe.co.uk&amp;gt;

        * Make-lang.in: Add coroutines.o.
        * cp-tree.h (lang_decl-fn): coroutine_p, new bit.
        (DECL_COROUTINE_P): New.
        * lex.c (init_reswords): Enable keywords when the coroutine flag
        is set,
        * operators.def (co_await): New operator.
        * call.c (add_builtin_candidates): Handle CO_AWAIT_EXPR.
        (op_error): Likewise.
        (build_new_op_1): Likewise.
        (build_new_function_call): Validate coroutine builtin arguments.
        * constexpr.c (potential_constant_expression_1): Handle
        CO_AWAIT_EXPR, CO_YIELD_EXPR, CO_RETURN_EXPR.
        * coroutines.cc: New file.
        * cp-objcp-common.c (cp_common_init_ts): Add CO_AWAIT_EXPR,
        CO_YIELD_EXPR, CO_RETRN_EXPR as TS expressions.
        * cp-tree.def (CO_AWAIT_EXPR, CO_YIELD_EXPR, (CO_RETURN_EXPR): New.
        * cp-tree.h (coro_validate_builtin_call): New.
        * decl.c (emit_coro_helper): New.
        (finish_function): Handle the case when a function is found to
        be a coroutine, perform the outlining and emit the outlined
        functions. Set a bit to signal that this is a coroutine component.
        * parser.c (enum required_token): New enumeration RT_CO_YIELD.
        (cp_parser_unary_expression): Handle co_await.
        (cp_parser_assignment_expression): Handle co_yield.
        (cp_parser_statement): Handle RID_CO_RETURN.
        (cp_parser_jump_statement): Handle co_return.
        (cp_parser_operator): Handle co_await operator.
        (cp_parser_yield_expression): New.
        (cp_parser_required_error): Handle RT_CO_YIELD.
        * pt.c (tsubst_copy): Handle CO_AWAIT_EXPR.
        (tsubst_expr): Handle CO_AWAIT_EXPR, CO_YIELD_EXPR and
        CO_RETURN_EXPRs.
        * tree.c (cp_walk_subtrees): Likewise.

libstdc++-v3/ChangeLog:

2020-01-18  Iain Sandoe  &amp;lt;iain@sandoe.co.uk&amp;gt;

        * include/Makefile.am: Add coroutine to the std set.
        * include/Makefile.in: Regenerated.
        * include/std/coroutine: New file.

gcc/testsuite/ChangeLog:

2020-01-18  Iain Sandoe  &amp;lt;iain@sandoe.co.uk&amp;gt;

        * g++.dg/coroutines/co-await-syntax-00-needs-expr.C: New test.
        * g++.dg/coroutines/co-await-syntax-01-outside-fn.C: New test.
        * g++.dg/coroutines/co-await-syntax-02-outside-fn.C: New test.
        * g++.dg/coroutines/co-await-syntax-03-auto.C: New test.
        * g++.dg/coroutines/co-await-syntax-04-ctor-dtor.C: New test.
        * g++.dg/coroutines/co-await-syntax-05-constexpr.C: New test.
        * g++.dg/coroutines/co-await-syntax-06-main.C: New test.
        * g++.dg/coroutines/co-await-syntax-07-varargs.C: New test.
        * g++.dg/coroutines/co-await-syntax-08-lambda-auto.C: New test.
        * g++.dg/coroutines/co-return-syntax-01-outside-fn.C: New test.
        * g++.dg/coroutines/co-return-syntax-02-outside-fn.C: New test.
        * g++.dg/coroutines/co-return-syntax-03-auto.C: New test.
        * g++.dg/coroutines/co-return-syntax-04-ctor-dtor.C: New test.
        * g++.dg/coroutines/co-return-syntax-05-constexpr-fn.C: New test.
        * g++.dg/coroutines/co-return-syntax-06-main.C: New test.
        * g++.dg/coroutines/co-return-syntax-07-vararg.C: New test.
        * g++.dg/coroutines/co-return-syntax-08-bad-return.C: New test.
        * g++.dg/coroutines/co-return-syntax-09-lambda-auto.C: New test.
        * g++.dg/coroutines/co-yield-syntax-00-needs-expr.C: New test.
        * g++.dg/coroutines/co-yield-syntax-01-outside-fn.C: New test.
        * g++.dg/coroutines/co-yield-syntax-02-outside-fn.C: New test.
        * g++.dg/coroutines/co-yield-syntax-03-auto.C: New test.
        * g++.dg/coroutines/co-yield-syntax-04-ctor-dtor.C: New test.
        * g++.dg/coroutines/co-yield-syntax-05-constexpr.C: New test.
        * g++.dg/coroutines/co-yield-syntax-06-main.C: New test.
        * g++.dg/coroutines/co-yield-syntax-07-varargs.C: New test.
        * g++.dg/coroutines/co-yield-syntax-08-needs-expr.C: New test.
        * g++.dg/coroutines/co-yield-syntax-09-lambda-auto.C: New test.
        * g++.dg/coroutines/coro-builtins.C: New test.
        * g++.dg/coroutines/coro-missing-gro.C: New test.
        * g++.dg/coroutines/coro-missing-promise-yield.C: New test.
        * g++.dg/coroutines/coro-missing-ret-value.C: New test.
        * g++.dg/coroutines/coro-missing-ret-void.C: New test.
        * g++.dg/coroutines/coro-missing-ueh-1.C: New test.
        * g++.dg/coroutines/coro-missing-ueh-2.C: New test.
        * g++.dg/coroutines/coro-missing-ueh-3.C: New test.
        * g++.dg/coroutines/coro-missing-ueh.h: New test.
        * g++.dg/coroutines/coro-pre-proc.C: New test.
        * g++.dg/coroutines/coro.h: New file.
        * g++.dg/coroutines/coro1-ret-int-yield-int.h: New file.
        * g++.dg/coroutines/coroutines.exp: New file.
        * g++.dg/coroutines/torture/alloc-00-gro-on-alloc-fail.C: New test.
        * g++.dg/coroutines/torture/alloc-01-overload-newdel.C: New test.
        * g++.dg/coroutines/torture/call-00-co-aw-arg.C: New test.
        * g++.dg/coroutines/torture/call-01-multiple-co-aw.C: New test.
        * g++.dg/coroutines/torture/call-02-temp-co-aw.C: New test.
        * g++.dg/coroutines/torture/call-03-temp-ref-co-aw.C: New test.
        * g++.dg/coroutines/torture/class-00-co-ret.C: New test.
        * g++.dg/coroutines/torture/class-01-co-ret-parm.C: New test.
        * g++.dg/coroutines/torture/class-02-templ-parm.C: New test.
        * g++.dg/coroutines/torture/class-03-operator-templ-parm.C: New test.
        * g++.dg/coroutines/torture/class-04-lambda-1.C: New test.
        * g++.dg/coroutines/torture/class-05-lambda-capture-copy-local.C: New test.
        * g++.dg/coroutines/torture/class-06-lambda-capture-ref.C: New test.
        * g++.dg/coroutines/torture/co-await-00-trivial.C: New test.
        * g++.dg/coroutines/torture/co-await-01-with-value.C: New test.
        * g++.dg/coroutines/torture/co-await-02-xform.C: New test.
        * g++.dg/coroutines/torture/co-await-03-rhs-op.C: New test.
        * g++.dg/coroutines/torture/co-await-04-control-flow.C: New test.
        * g++.dg/coroutines/torture/co-await-05-loop.C: New test.
        * g++.dg/coroutines/torture/co-await-06-ovl.C: New test.
        * g++.dg/coroutines/torture/co-await-07-tmpl.C: New test.
        * g++.dg/coroutines/torture/co-await-08-cascade.C: New test.
        * g++.dg/coroutines/torture/co-await-09-pair.C: New test.
        * g++.dg/coroutines/torture/co-await-10-template-fn-arg.C: New test.
        * g++.dg/coroutines/torture/co-await-11-forwarding.C: New test.
        * g++.dg/coroutines/torture/co-await-12-operator-2.C: New test.
        * g++.dg/coroutines/torture/co-await-13-return-ref.C: New test.
        * g++.dg/coroutines/torture/co-ret-00-void-return-is-ready.C: New test.
        * g++.dg/coroutines/torture/co-ret-01-void-return-is-suspend.C: New test.
        * g++.dg/coroutines/torture/co-ret-03-different-GRO-type.C: New test.
        * g++.dg/coroutines/torture/co-ret-04-GRO-nontriv.C: New test.
        * g++.dg/coroutines/torture/co-ret-05-return-value.C: New test.
        * g++.dg/coroutines/torture/co-ret-06-template-promise-val-1.C: New test.
        * g++.dg/coroutines/torture/co-ret-07-void-cast-expr.C: New test.
        * g++.dg/coroutines/torture/co-ret-08-template-cast-ret.C: New test.
        * g++.dg/coroutines/torture/co-ret-09-bool-await-susp.C: New test.
        * g++.dg/coroutines/torture/co-ret-10-expression-evaluates-once.C: New test.
        * g++.dg/coroutines/torture/co-ret-11-co-ret-co-await.C: New test.
        * g++.dg/coroutines/torture/co-ret-12-co-ret-fun-co-await.C: New test.
        * g++.dg/coroutines/torture/co-ret-13-template-2.C: New test.
        * g++.dg/coroutines/torture/co-ret-14-template-3.C: New test.
        * g++.dg/coroutines/torture/co-yield-00-triv.C: New test.
        * g++.dg/coroutines/torture/co-yield-01-multi.C: New test.
        * g++.dg/coroutines/torture/co-yield-02-loop.C: New test.
        * g++.dg/coroutines/torture/co-yield-03-tmpl.C: New test.
        * g++.dg/coroutines/torture/co-yield-04-complex-local-state.C: New test.
        * g++.dg/coroutines/torture/co-yield-05-co-aw.C: New test.
        * g++.dg/coroutines/torture/co-yield-06-fun-parm.C: New test.
        * g++.dg/coroutines/torture/co-yield-07-template-fn-param.C: New test.
        * g++.dg/coroutines/torture/co-yield-08-more-refs.C: New test.
        * g++.dg/coroutines/torture/co-yield-09-more-templ-refs.C: New test.
        * g++.dg/coroutines/torture/coro-torture.exp: New file.
        * g++.dg/coroutines/torture/exceptions-test-0.C: New test.
        * g++.dg/coroutines/torture/func-params-00.C: New test.
        * g++.dg/coroutines/torture/func-params-01.C: New test.
        * g++.dg/coroutines/torture/func-params-02.C: New test.
        * g++.dg/coroutines/torture/func-params-03.C: New test.
        * g++.dg/coroutines/torture/func-params-04.C: New test.
        * g++.dg/coroutines/torture/func-params-05.C: New test.
        * g++.dg/coroutines/torture/func-params-06.C: New test.
        * g++.dg/coroutines/torture/lambda-00-co-ret.C: New test.
        * g++.dg/coroutines/torture/lambda-01-co-ret-parm.C: New test.
        * g++.dg/coroutines/torture/lambda-02-co-yield-values.C: New test.
        * g++.dg/coroutines/torture/lambda-03-auto-parm-1.C: New test.
        * g++.dg/coroutines/torture/lambda-04-templ-parm.C: New test.
        * g++.dg/coroutines/torture/lambda-05-capture-copy-local.C: New test.
        * g++.dg/coroutines/torture/lambda-06-multi-capture.C: New test.
        * g++.dg/coroutines/torture/lambda-07-multi-yield.C: New test.
        * g++.dg/coroutines/torture/lambda-08-co-ret-parm-ref.C: New test.
        * g++.dg/coroutines/torture/local-var-0.C: New test.
        * g++.dg/coroutines/torture/local-var-1.C: New test.
        * g++.dg/coroutines/torture/local-var-2.C: New test.
        * g++.dg/coroutines/torture/local-var-3.C: New test.
        * g++.dg/coroutines/torture/local-var-4.C: New test.
        * g++.dg/coroutines/torture/mid-suspend-destruction-0.C: New test.
        * g++.dg/coroutines/torture/pr92933.C: New test.

&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Attachment: &lt;a href=&quot;https://gcc.gnu.org/ml/gcc-patches/2020-01/msg01096/coroutines-initial-on-472ef1d34bb.txt.bz2&quot;&gt;&lt;tt&gt;coroutines-initial-on-472ef1d34bb.txt.bz2&lt;/tt&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;&lt;em&gt;Description:&lt;/em&gt; BZip2 compressed data&lt;/p&gt;
&lt;hr /&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Follow-Ups&lt;/strong&gt;:
&lt;/li&gt;
&lt;/ul&gt;&lt;/body&gt;</description>
<pubDate>Sun, 19 Jan 2020 04:54:58 +0000</pubDate>
<dc:creator>matt_d</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://gcc.gnu.org/ml/gcc-patches/2020-01/msg01096.html</dc:identifier>
</item>
<item>
<title>Nototo – Build a unified mental map of notes</title>
<link>https://www.nototo.app/</link>
<guid isPermaLink="true" >https://www.nototo.app/</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://www.nototo.app/&quot;&gt;https://www.nototo.app/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=22087780&quot;&gt;https://news.ycombinator.com/item?id=22087780&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 432&lt;/p&gt;
&lt;p&gt;# Comments: 122&lt;/p&gt;
</description>
<pubDate>Sat, 18 Jan 2020 22:28:01 +0000</pubDate>
<dc:creator>dirtyaura</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.nototo.app/</dc:identifier>
</item>
<item>
<title>Lisping at JPL (2002)</title>
<link>http://flownet.com/gat/jpl-lisp.html</link>
<guid isPermaLink="true" >http://flownet.com/gat/jpl-lisp.html</guid>
<description>&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;&lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body bgcolor=&quot;white&quot; id=&quot;readabilityBody&quot; readability=&quot;310.97807261019&quot;&gt;

&lt;p&gt;&lt;small&gt;Copyright (c) 2002 by Ron Garret (&lt;a href=&quot;http://www.flownet.com/ron/eg-rg-faq.html&quot;&gt;f.k.a. Erann Gat&lt;/a&gt;), all rights reserved.&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;This is the story of the rise and fall of Lisp at the Jet Propulsion Lab as told from my personal (and highly biased) point of view. I am not writing in my official capacity as an employee of JPL, nor am I in any way representing the official position of JPL. (This will become rather obvious shortly.)&lt;/p&gt;
&lt;h3&gt;1988-1991 - The Robotics Years&lt;/h3&gt;
&lt;p&gt;I came to JPL in 1988 to work in the Artificial Intelligence group on autonomous mobile robots. Times were different then. Dollars flowed more freely from government coffers. AI Winter was just beginning, and it had not yet arrived at JPL. (Technology at the Lab tends to run a few years behind the state of the art :-)&lt;/p&gt;
&lt;p&gt;JPL at the time was in the early planning stages for a Mars rover mission called Mars Rover Sample Return (MRSR). In those days space missions were Big, with a capital B. The MRSR rover was to weigh nearly a ton. The mission budget was going to be in the billions of dollars (which was typical in those days).&lt;/p&gt;
&lt;p&gt;Against this backdrop I went to work for a fellow named &lt;a href=&quot;http://www.kipr.org/dpm/&quot;&gt;David Miller&lt;/a&gt;, who also happened to be my thesis advisor. Dave had the then-radical idea of using small rovers to explore planets instead of big ones. In 1988 that was a tough sell. Very few people believed that a small rover could do anything useful. (Many still don't.)&lt;/p&gt;
&lt;p&gt;Using some creatively acquired R&amp;amp;D funding, Dave hired Colin Angle (then a grad student working for Rod Brooks at MIT, now CEO of IS Robotics) as a summer student. Colin built &lt;a href=&quot;http://www.kipr.org/robots/tooth.html&quot;&gt;a small robot named Tooth&lt;/a&gt;, which stood in very stark contrast to the 2000-pound &lt;a href=&quot;http://robotics.jpl.nasa.gov/groups/rv/images/robby.gif&quot;&gt;Robby&lt;/a&gt;, which was the testbed for the MRSR mission.&lt;/p&gt;
&lt;p&gt;At the time it was more or less taken for granted that AI work was done in Lisp. C++ barely existed. Perl was brand new. Java was years away. Spacecraft were mostly programmed in assembler, or, if you were really being radical, Ada.&lt;/p&gt;
&lt;p&gt;Robby had two Motorola 68020 processors running vxWorks, each with (if memory serves) 8 MB of RAM. (This was considered a huge amount of RAM in those days. In fact, the Robby work was often criticized for, among other things, being too memory-hungry to be of any use.) Tooth, by contrast, had two Motorola 68hc11 8-bit microcontrollers each with 256 bytes of RAM and 2k bytes of EEPROM. (In later robots we used 6811's with a whopping 32k bytes of RAM.)&lt;/p&gt;
&lt;p&gt;(As an indication of just how fast and how radically attitudes can change, the other day I heard an engineer complain that &quot;you can't do &lt;em&gt;anything&lt;/em&gt; with only 128 megabytes.&quot;)&lt;/p&gt;
&lt;p&gt;Both Robby and Tooth were programmed using Lisp. On Robby we actually ran Lisp on-board. The Lisp we used was &lt;a href=&quot;http://www.paulgraham.com/thist.html&quot;&gt;T 3.1&lt;/a&gt; which was ported from a Sun3 to vxWorks with a great deal of help from Jim Firby, who came to JPL from Yale. Jim also wrote a T-in-common-lisp compatibility package called Common T. Using Common T we could do code development on a Macintosh (using Macintosh Common Lisp and a Robbie simulator, also written by Jim) and then run the resulting code directly on Robby with no changes.&lt;/p&gt;
&lt;p&gt;Tooth's processors didn't have nearly enough RAM to run Lisp directly &lt;a href=&quot;http://flownet.com/gat/jpl-lisp.html#notes&quot;&gt;[1]&lt;/a&gt; so instead we used a custom-designed compiler written in Lisp to generate 6811 code. At first we used Rod Brooks's subsumption compiler, but later I decided I didn't like the constraints imposed by the subsumption architecture and wrote my own for a language called ALFA &lt;a href=&quot;http://flownet.com/gat/jpl-lisp.html#notes&quot;&gt;[2]&lt;/a&gt;. ALFA was subsequently used to program a whole series of rovers, the &lt;a href=&quot;http://www.kipr.org/robots/rocky.html&quot;&gt;Rocky series&lt;/a&gt;, which eventually led to the &lt;a href=&quot;http://mars.jpl.nasa.gov/MPF/rover/sojourner.html&quot;&gt;Sojourner rover&lt;/a&gt; on the Mars Pathfinder mission. (Sojourner had an Intel 8085 processor with 1 MB of bank-switched RAM. It was programmed in C. More on this decision later.)&lt;/p&gt;
&lt;p&gt;Tooth, Robby, and the Rocky series were among the most capable robots of their day. Robby was the first robot ever to navigate autonomously in an outdoor environment using stereo vision as its only sensor. (NOTE: The stereo vision code was written in C by Larry Matthies.) Tooth was only the second robot to do an indoor object-collection task, the other being &lt;a href=&quot;http://www.ai.mit.edu/people/joanna/herbert.html&quot;&gt;Herbert&lt;/a&gt;, which was developed a year or two earlier in by Jonathan Connell working in Rod Brooks's mobot lab at MIT. (But Tooth was vastly more reliable than Herbert.) The Rocky robots were the first ever microrovers to operate successfully in rough-terrain environments. In 1990, &lt;a href=&quot;http://www.kipr.org/robots/rocky.html#rocky2&quot;&gt;Rocky III&lt;/a&gt; demonstrated a fully autonomous traverse and sample collection mission, a capability that has not been reproduced to my knowledge in the twelve years since.&lt;/p&gt;
&lt;p&gt;The period between 1988 and 1991 was amazingly productive for autonomous mobile robot work at JPL. It was also, unfortunately, politically turbulent. Dave Miller's group was, alas, not part of the organizational structure that had the &quot;official&quot; charter for doing robotics research at JPL. The result was a bloody turf battle, whose eventual result was the dissolution of the Robotic Intelligence group, and the departure of nearly all of its members (and, probably, the fact that Sojourner was programmed in C).&lt;/p&gt;
&lt;h3&gt;1992-1993 - Miscellaneous stories&lt;/h3&gt;
&lt;p&gt;In 1993, for my own robotics swan song, I entered the AAAI mobile robot contest. My robot (an RWI B12 named Alfred) was entered in two of three events (the third required a manipulator, which Alfred lacked) and took a first and second place. (Alfred was actually the only robot to finish one of the events.) But the cool part is that all the contest-specific code was written in three days. (I started working on it on the plane ride to the conference.) I attribute this success to a large extent to the fact that I was using Lisp while most of the other teams were using C.&lt;/p&gt;
&lt;p&gt;Also in 1993 I used MCL to help generate a code patch for the &lt;a href=&quot;http://www.igpp.ucla.edu/galileo/doc/ssr60/mag.htm&quot;&gt;Gallileo magnetometer&lt;/a&gt;. The magnetometer had an RCA1802 processor, 2k each of RAM and ROM, and was programmed in Forth using a development system that ran on a long-since-decommissioned Apple II. The instrument had developed a bad memory byte right in the middle of the code. The code needed to be patched to not use this bad byte. The magnetometer team had originally estimated that resurrecting the development environment and generating the code patch would take so long that they were not even going to attempt it. Using Lisp I wrote from scratch a Forth development environment for the instrument (including a simulator for the hardware) and used it to generate the patch. The whole project took just under 3 months of part-time work.&lt;/p&gt;
&lt;h3&gt;1994-1999 - Remote Agent&lt;/h3&gt;
&lt;p&gt;In 1994 JPL started working on the &lt;a href=&quot;http://ic.arc.nasa.gov/projects/remote-agent/&quot;&gt;Remote Agent&lt;/a&gt; (RA), an autonomous spacecraft control system. RA was written entirely in Common Lisp despite unrelenting political pressure to move to C++. At one point an attempt was made to port one part of the system (the planner) to C++. This attempt had to be abandoned after a year. Based on this experience I think it's safe to say that if not for Lisp the Remote Agent would have failed.&lt;/p&gt;
&lt;p&gt;We used four different Common Lisps in the course of the Remote Agent project: MCL, Allegro, Harlequin, and CLisp. These ran in various combinations on three different operating systems: MacOS, SunOS, and vxWorks. Harlequin was the Lisp that eventually flew on the spacecraft. Most of the ground development was done in MCL and Allegro. (CLisp was also ported to vxWorks, and probably would have been the flight Lisp but for the fact that it lacked threads.) We moved code effortlessly back and forth among these systems.&lt;/p&gt;
&lt;p&gt;The Remote Agent software, running on a custom port of Harlequin Common Lisp, flew aboard &lt;a href=&quot;http://nmp.jpl.nasa.gov/ds1/&quot;&gt;Deep Space 1&lt;/a&gt; (DS1), the first mission of NASA's &lt;a href=&quot;http://nmp.jpl.nasa.gov/index_flash.html&quot;&gt;New Millennium program&lt;/a&gt;. Remote Agent controlled DS1 for two days in May of 1999. During that time we were able to debug and fix a race condition that had not shown up during ground testing. (Debugging a program running on a $100M piece of hardware that is 100 million miles away is an interesting experience. Having a read-eval-print loop running on the spacecraft proved invaluable in finding and fixing the problem. The &lt;a href=&quot;http://ti.arc.nasa.gov/m/pub-archive/176h/0176%20(Havelund).pdf&quot;&gt;story of the Remote Agent bug&lt;/a&gt; is an interesting one in and of itself.)&lt;/p&gt;
&lt;p&gt;The Remote Agent was subsequently named &quot;NASA Software of the Year&quot;.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Warning!&lt;/strong&gt;&lt;/span&gt; From here on the story takes some rather less pleasant turns. If you are not in the mood for bad news and a lot of cynical ranting and raving, stop reading now. You have been warned.&lt;/p&gt;
&lt;hr /&gt;&lt;h3&gt;1999 - MDS&lt;/h3&gt;
&lt;p&gt;Now, you might expect that with a track record like that, with one technological success afte another, that NASA would be rushing to embrace Lisp. And you would, of course, be wrong.&lt;/p&gt;
&lt;p&gt;The New Millennium missions were supposed to be the flagships for NASA's new &quot;better, faster, and cheaper&quot; philosophy, which meant that we were given a budget that was impossibly small, and a schedule that was impossibly tight. When the inevitable schedule and budget overruns began the project needed a scapegoat. The crucial turning point was a major review with about 200 people attending, including many of JPL's top managers. At one point the software integration engineer was giving his presentation and listing all of the things that were going wrong. Someone (I don't know who) interrupted him and asked if he could change only one thing to make things better what would it be. His answer was: get rid of Lisp &lt;a href=&quot;http://flownet.com/gat/jpl-lisp.html#notes&quot;&gt;[3]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That one event was pretty much the end of Lisp at JPL. The Remote Agent was downgraded from the mainline flight software to a flight experiment (now renamed RAX). It still flew, but it only controlled the spacecraft for two days.&lt;/p&gt;
&lt;p&gt;I tried to resurrect Lisp on my next project (the JPL Mission Data System or MDS) but the damage was done. In an attempt to address one of the major objections to Lisp, that it was too big, I hired Gary Byers, who wrote the compiler for Macintosh Common Lisp (MCL) to port MCL to vxWorks. (Along the way he also produced ports for Linux and Solaris.) The MCL image was only 2 MB (compared to 16 or so for Harlequin), but it turned out not to matter. Lisp was dead, at least at JPL. After two years Gary realized that his work was never going to be used by anyone and he too left JPL. A few months later I followed him and went to work at Google. (The work Gary did on the Linux port eventually found its way into &lt;a href=&quot;http://www.clozure.com/openmcl&quot;&gt;OpenMCL&lt;/a&gt; so it was not a total loss for the world.)&lt;/p&gt;
&lt;p&gt;There were at least two other major Lisp developments at JPL: Mark James wrote a system called SHARP (Spacecraft Health Automated Reasoning Prototype) that diagnosed hardware problems on the Voyager spacecraft, and Kurt Eggemeyer wrote a planner called Plan-It that was used for ground planning on a number of missions. There were many others as well. All are long forgotten.&lt;/p&gt;
&lt;h3&gt;2000-2001 - Google&lt;/h3&gt;
&lt;p&gt;This section is a little off-topic, since this is supposed to be a history of Lisp at JPL, but some aspects of my experience at Google might nonetheless be of interest.&lt;/p&gt;
&lt;p&gt;One of the reasons I stayed at JPL for twelve years was that I was appalled at what the software industry had become. The management world has tried to develop software engineering processes that allow people to be plugged into them like interchangeable components. The &quot;interface specification&quot; for these &quot;components&quot; usually involves a list of tools in which an engineer has received &quot;training.&quot; (I really detest the use of the word &quot;training&quot; in relation to professional activities. Training is what you do to dogs. What you should be doing with people is &lt;em&gt;educating&lt;/em&gt; them, not training them. There is a big, big difference.)&lt;/p&gt;
&lt;p&gt;To my mind, the hallmark of the interchangeable component model of software engineers is Java. Without going into too many details, I'll just say that having programmed in Lisp the shortcomings of Java are glaringly obvious, and programming in Java means a life of continual and unremitting pain. So I vowed I would never be a Java programmer, which pretty much shut me out of 90% of all software engineering jobs in the late 90's. This was OK since I was managing to put together a reasonably successful career as a researcher. But after Remote Agent I found myself more and more frustrated, and the opportunity to work at Google just happened to coincide with a local frustration maximum.&lt;/p&gt;
&lt;p&gt;One of the reasons I decided to go work for Google was that they were not using Java. So of course you can guess what my first assignment was: lead the inaugural Java development at the company, what eventually became &lt;a href=&quot;https://adwords.google.com/&quot;&gt;Google AdWords&lt;/a&gt;. Thank God I had a junior engineer working for me who actually knew something about Java and didn't mind it so much. In the ancient tradition of senior-junior relationships, he did all the work, and I took all the credit. (Well, not quite -- I did write the billing system, including a pretty wizzy security system that keeps the credit card numbers secure even against dishonest employees. But Jeremy wrote the Lion's share of AdWords version 1.)&lt;/p&gt;
&lt;p&gt;I did try to introduce Lisp to Google. Having had some experience selling Lisp at JPL I got all my ducks in a row, had a cool demo going, showed it to all the other members of the ads team, and had them all convinced that this was a good idea. The only thing left was to get approval from the VP of engineering. The conversation went something like this:&lt;/p&gt;
&lt;pre&gt;
Me:  I'd like to talk to you about something...
Him: Let me guess - you want to use Smalltalk.
Me:  Er, no...
Him: Lisp?
Me: Right.
Him:  No way.
&lt;/pre&gt;
&lt;p&gt;And that was the end of Lisp at Google. In retrospect I am not convinced that he made the wrong decision. The interchangeable component model of software engineers seemed to work reasonably well there. It's just not a business model in which I wish to be involved, at least not on the component-provider side. So after a year at Google I quit and returned to JPL.&lt;/p&gt;
&lt;h3&gt;2001-2004 Your tax dollars at work&lt;/h3&gt;
&lt;p&gt;When I returned to JPL they put me to work on -- (wait for it) -- search engines! Apparently they got this idea that because I worked at Google for a year that I was now a search engine expert (never mind that I didn't actually do any work on the search engine). Fortunately for me, working on search engines at JPL doesn't mean the same thing as working on search engines at Google. When you work on search engines at Google it means actually working on a search engine. When you work on search engines at JPL it means &lt;em&gt;buying&lt;/em&gt; a search engine, about which I actually knew quite a bit. (Call Google, place an order.) You don't want to know how many of your taxpayer dollars went to pay me for helping to shepherd purchase orders through the JPL bureaucracy.&lt;/p&gt;
&lt;p&gt;But I digress.&lt;/p&gt;
&lt;h3&gt;Commentary&lt;/h3&gt;
&lt;p&gt;The demise of Lisp at JPL is a tragedy. The language is particularly well suited for the kind of software development that is often done here: one-of-a-kind, highly dynamic applications that must be developed on extremely tight budgets and schedules. The efficacy of the language in that kind of environment is amply documented by a long record of unmatched technical achievements.&lt;/p&gt;
&lt;p&gt;The situation is particularly ironic because the argument that has been advanced for discarding Lisp in favor of C++ (and now for Java) is that JPL should use &quot;industry best practice.&quot; The problem with this argument is twofold: first, we're confusing best practice with &lt;em&gt;standard&lt;/em&gt; practice. The two are not the same. And second, we're assuming that best (or even standard) practice is an invariant with respect to the task, that the best way to write a word processor is also the best way to write a spacecacraft control system. It isn't.&lt;/p&gt;
&lt;p&gt;It is incredibly frustrating watching all this happen. My job today (I am now working on software verification and validation) is to solve problems that can be traced directly back to the use of purely imperative langauges with poorly defined semantics like C and C++. (The situation is a little better with Java, but not much.) But, of course, the obvious solution -- to use non-imperative languages with well defined semantics like Lisp -- is not an option. I can't even &lt;em&gt;say&lt;/em&gt; the word Lisp without cementing my reputation as a crazy lunatic who thinks Lisp is the Answer to Everything. So I keep my mouth shut (mostly) and watch helplessly as millions of tax dollars get wasted. (I would pin some hope on a wave of grass-roots outrage over this blatant waste of money coming to the rescue, but, alas, on the scale of outrageous waste that happens routinely in government endeavors this is barely a blip.)&lt;/p&gt;
&lt;p&gt;In the words of Elton John: It's sad. So sad. It's a sad, sad situation. My best hope at this point is that the dotcom crash will do to Java what AI winter did to Lisp, and we may eventually emerge from &quot;dotcom winter&quot; into a saner world. But I wouldn't bet on it.&lt;/p&gt;
&lt;hr /&gt;&lt;h3&gt;&lt;a name=&quot;notes&quot; id=&quot;notes&quot;&gt;NOTES:&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a name=&quot;notes&quot; id=&quot;notes&quot;&gt;[1] It's possible to run Lisp on surprisingly small processors. My first Lisp was P-Lisp, which ran on an Apple II with 48k of RAM. The three-disk towers-of-hanoi problem was about at the limits of its capabilities.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[2] ALFA was an acronym that stood for A Language For Action. My plan was to eventually design a language that would be called BETA, which would stand for Better Even Than ALFA. But I never got around to it.&lt;/p&gt;
&lt;p&gt;[3] This begs the question of &lt;em&gt;why&lt;/em&gt; he said this. The reason he gave at the time was that most of his time was being taken up dealing with multi-language integration issues. However, this was belied by the following fact: shortly before the review, I met with the integration engineer and offered to help him with any Lisp-related issues he was encountering. He replied that there weren't any that I could help with. So while there &lt;em&gt;were&lt;/em&gt; issues that arose from the fact that Lisp had to interoperate with C, I do not believe that a good-faith effort was made to address those issues.&lt;/p&gt;
&lt;p&gt;Postscript: Many of the multi-language integration headaches were caused by the interprocess communication system that allowed Lisp and C to communicate. The IPC relied on a central server (written in C) which crashed regularly. Getting rid of Lisp did in fact alleviate those problems (because the unreliable IPC was no longer necessary). It is nonetheless supremely ironic that the demise of Lisp at JPL was ultimately due in no small measure to the unreliability of a C program.&lt;/p&gt;
&lt;/body&gt;</description>
<pubDate>Sat, 18 Jan 2020 21:34:27 +0000</pubDate>
<dc:creator>sandinmyjoints</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>http://flownet.com/gat/jpl-lisp.html</dc:identifier>
</item>
</channel>
</rss>