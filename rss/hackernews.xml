<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Pi-hole 5.0</title>
<link>https://pi-hole.net/2020/05/10/pi-hole-v5-0-is-here/#page-content</link>
<guid isPermaLink="true" >https://pi-hole.net/2020/05/10/pi-hole-v5-0-is-here/#page-content</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://pi-hole.net/2020/05/10/pi-hole-v5-0-is-here/#page-content&quot;&gt;https://pi-hole.net/2020/05/10/pi-hole-v5-0-is-here/#page-content&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=23136413&quot;&gt;https://news.ycombinator.com/item?id=23136413&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 200&lt;/p&gt;
&lt;p&gt;# Comments: 88&lt;/p&gt;
</description>
<pubDate>Sun, 10 May 2020 21:32:41 +0000</pubDate>
<dc:creator>Iolaum</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://pi-hole.net/2020/05/10/pi-hole-v5-0-is-here/</dc:identifier>
</item>
<item>
<title>My blog is now generated by Google Docs</title>
<link>https://benwiser.com/blog/My-blog-is-now-generated-by-Google-Docs.html</link>
<guid isPermaLink="true" >https://benwiser.com/blog/My-blog-is-now-generated-by-Google-Docs.html</guid>
<description>&lt;p class=&quot;title&quot; id=&quot;h.d28ad1zgstoa&quot;&gt;&lt;span&gt;My blog is now generated by Google Docs&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Welcome to my new blog! This is going to be a bit of an experiment for me. I have wanted to set up a blog for quite some time now but I never wanted to host my blog on some other website like medium (call it a vanity thing but I like seeing my name in that URL). I also didn’t really want to set up something like wordpress because that felt a little overkill. I could have set up a static site generator like Jekyll but then I would have had to have done a bit more styling with markdown than I’d really like.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;That’s when a friend’s idea popped back into my mind. Why not just use Google docs as a “CMS”?&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;So this is what this page is. My first short blog post coming straight to you from Google docs. It’s not particularly complicated to set up either (it can be set up over the weekend). You can find the code over here:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://gitlab.com/BenWiser/googledocsblog&quot;&gt;https://gitlab.com/BenWiser/googledocsblog&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;There are a few reasons why I like this approach. For one, it’s pretty simple to manage. I have a Blog folder on Google drive for all of my posts. If I want to hold off publishing something I move it into a different folder. If I want to do a write up but my partner is using our shared laptop, I jump on the iPad. And if I do eventually decide to move onto some actual CMS, well I’d rather copy over content from a text processor than from something like wordpress (I really don’t like wordpress).&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Time will tell if this approach works out but all I can say is it is pretty cool.&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 10 May 2020 16:57:34 +0000</pubDate>
<dc:creator>RupertWiser</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://benwiser.com/blog/My-blog-is-now-generated-by-Google-Docs.html</dc:identifier>
</item>
<item>
<title>Tell HN: Call Mom</title>
<link>https://news.ycombinator.com/item?id=23133553</link>
<guid isPermaLink="true" >https://news.ycombinator.com/item?id=23133553</guid>
<description>&lt;tr readability=&quot;0.58823529411765&quot;&gt;&lt;td bgcolor=&quot;#FF6600&quot;&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr id=&quot;pagespace&quot; title=&quot;Tell HN: Call Mom&quot;&gt;&lt;td/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;9.0958268933539&quot;&gt;&lt;td&gt;
&lt;table class=&quot;fatitem&quot; border=&quot;0&quot; readability=&quot;5.3748068006182&quot;&gt;&lt;tr class=&quot;athing&quot; id=&quot;23133553&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; class=&quot;title&quot;/&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;title&quot;&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=23133553&quot; class=&quot;storylink&quot;&gt;Tell HN: Call Mom&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;0.74074074074074&quot;&gt;&lt;td colspan=&quot;2&quot;/&gt;
&lt;td class=&quot;subtext&quot;&gt;&lt;span class=&quot;score&quot; id=&quot;score_23133553&quot;&gt;495 points&lt;/span&gt; by &lt;a href=&quot;https://news.ycombinator.com/user?id=benatkin&quot; class=&quot;hnuser&quot;&gt;benatkin&lt;/a&gt; &lt;span class=&quot;age&quot;&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=23133553&quot;&gt;9 hours ago&lt;/a&gt;&lt;/span&gt; &lt;span id=&quot;unv_23133553&quot;/&gt; | &lt;a href=&quot;https://news.ycombinator.com/hide?id=23133553&amp;amp;goto=item%3Fid%3D23133553&quot;&gt;hide&lt;/a&gt; | &lt;a href=&quot;https://hn.algolia.com/?query=Tell%20HN%3A%20Call%20Mom&amp;amp;sort=byDate&amp;amp;dateRange=all&amp;amp;type=story&amp;amp;storyText=false&amp;amp;prefix&amp;amp;page=0&quot; class=&quot;hnpast&quot;&gt;past&lt;/a&gt; | &lt;a href=&quot;https://www.google.com/search?q=Tell%20HN%3A%20Call%20Mom&quot;&gt;web&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/fave?id=23133553&amp;amp;auth=19e16edc9969c3f0d8480d2ea2a24c88374b57cd&quot;&gt;favorite&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/item?id=23133553&quot;&gt;184 comments&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;11.034734917733&quot;&gt;&lt;td colspan=&quot;2&quot;/&gt;
&lt;td readability=&quot;4.5978062157221&quot;&gt;I remembered this post from six years ago, and thought it would be good to have a post like it on HN today. It's especially important to call important people in your life today with the pandemic, both for the caller and the person (or people) being called. It may also be worth setting up a Zoom (or Jitsi Meet, or Google Hangouts, or Facebook, or another group video call service) gathering. I joined one for my little brother's birthday late last month, and it was really good for feeling connected.
&lt;p&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=7728411&quot; rel=&quot;nofollow&quot;&gt;https://news.ycombinator.com/item?id=7728411&lt;/a&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td/&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;2&quot;/&gt;
&lt;td&gt;

&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;1&quot;&gt;&lt;td&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;10&quot; width=&quot;0&quot;/&gt;&lt;br/&gt;&lt;center&gt;&lt;span class=&quot;yclinks&quot;&gt;&lt;a href=&quot;https://news.ycombinator.com/newsguidelines.html&quot;&gt;Guidelines&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/newsfaq.html&quot;&gt;FAQ&lt;/a&gt; | &lt;a href=&quot;mailto:hn@ycombinator.com&quot;&gt;Support&lt;/a&gt; | &lt;a href=&quot;https://github.com/HackerNews/API&quot;&gt;API&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/security.html&quot;&gt;Security&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/lists&quot;&gt;Lists&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/bookmarklet.html&quot; rel=&quot;nofollow&quot;&gt;Bookmarklet&lt;/a&gt; | &lt;a href=&quot;http://www.ycombinator.com/legal/&quot;&gt;Legal&lt;/a&gt; | &lt;a href=&quot;http://www.ycombinator.com/apply/&quot;&gt;Apply to YC&lt;/a&gt; | &lt;a href=&quot;mailto:hn@ycombinator.com&quot;&gt;Contact&lt;/a&gt;&lt;/span&gt;
&lt;/center&gt;
&lt;/td&gt;
&lt;/tr&gt;</description>
<pubDate>Sun, 10 May 2020 15:53:15 +0000</pubDate>
<dc:creator>benatkin</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://news.ycombinator.com/item?id=23133553</dc:identifier>
</item>
<item>
<title>Why is the stock market rallying when the economy is so bad?</title>
<link>https://www.wsj.com/articles/why-is-the-stock-market-rallying-when-the-economy-is-so-bad-11588974327</link>
<guid isPermaLink="true" >https://www.wsj.com/articles/why-is-the-stock-market-rallying-when-the-economy-is-so-bad-11588974327</guid>
<description>&lt;p&gt;The latest jobs report revealing record U.S. unemployment highlights a growing rift investors are struggling to reconcile: a rallying stock market and stumbling economy.&lt;/p&gt; &lt;p&gt;Gains in U.S. stocks accelerated Friday after April’s nonfarm payrolls report showed unemployment rose to 14.7%, the highest level on record. It was the latest head-scratching development for many market observers, who have been parsing a steady stream of abysmal economic data while watching the U.S. stock market stage a recovery.&lt;/p&gt;...
  </description>
<pubDate>Sun, 10 May 2020 14:57:10 +0000</pubDate>
<dc:creator>harambae</dc:creator>
<og:title>Why Is the Stock Market Rallying When the Economy Is So Bad?   </og:title>
<og:description>Five reasons the stock market is soaring as the economy is floundering: from buoyant tech stocks to high earnings hopes to fear of missing out.</og:description>
<og:url>https://www.wsj.com/articles/why-is-the-stock-market-rallying-when-the-economy-is-so-bad-11588974327</og:url>
<og:image>https://images.wsj.net/im-185270/social</og:image>
<og:type>article</og:type>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.wsj.com/articles/why-is-the-stock-market-rallying-when-the-economy-is-so-bad-11588974327</dc:identifier>
</item>
<item>
<title>Racket is 25</title>
<link>https://blog.racket-lang.org/2020/05/racket-is-25.html</link>
<guid isPermaLink="true" >https://blog.racket-lang.org/2020/05/racket-is-25.html</guid>
<description>&lt;div id=&quot;&quot;&gt;&lt;p class=&quot;date-and-tags&quot;&gt;10 May 2020&lt;/p&gt;
&lt;header&gt;
&lt;/header&gt;&lt;p&gt;&lt;span&gt;posted by Matthias Felleisen and Matthew Flatt&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;Wednesday 25 January 1995&lt;/h2&gt;
&lt;p&gt;POPL used to be a Monday-through-Wednesday-noon affair. Cormac Flanagan presented his &lt;span class=&quot;RktSym&quot;&gt;future&lt;/span&gt; paper there (a static analysis on how to eliminate implicit touch operations; there was also the infamous Felleisen-Wadler paper). Wednesday night, Cormac and I were flying back to Houston. On this flight back Cormac asked a seemingly simple question:&lt;/p&gt;
&lt;div class=&quot;SIntrapara&quot; readability=&quot;6.5&quot;&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;If functional programming is that good, why is nobody using it?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;We spent the entire flight discussing this from various angles. My experience with helping my son’s algebra teacher and, years earlier, a baby sitter with algebra homework, pushed me in the direction of “algebra is functional programming and we can make a huge difference by bringing math alive.” We arrived late in the evening, and when I got home, I sent email that we’d have a meeting next morning.&lt;/p&gt;
&lt;h2&gt;Thursday 26 January 1995&lt;/h2&gt;
&lt;p&gt;We all met in Corky Cartwright’s office because it was bigger than mine. I announced that I wanted to leave theory behind and build a curriculum, a programming language, and support software to use functional programming for teaching algebra, more math, and programming in K-12 schools.&lt;/p&gt;
&lt;p&gt;Shriram embraced the idea on the spot. “I have always wanted to be involved in such a project.” Bruce loved the chance to design a new language. Cormac made clear he’d help but he really wanted a dissertation. Matthew was quiet. Corky later dismissed the idea. “Make sure you have path back when it fails.”&lt;/p&gt;
&lt;p&gt;We discussed for quite a while and came to two conclusions: the PhD students needed to focus on software issues for dissertations in case we’d fail. Bruce and I would focus on the language and the curriculum.&lt;/p&gt;
&lt;h2&gt;Friday 27 January 1995&lt;/h2&gt;
&lt;p&gt;Bruce and I started designing a language called Jam. It was supposed to be simple, Scheme-ish, and without parentheses because we were convinced that teachers would not like the parenthetical notation. At the same time, we were sure that the syntax should be &lt;span class=&quot;emph&quot;&gt;basically&lt;/span&gt; “parenthetically simple.” But most importantly, we wanted to have image-like parts in this language so that Sum, Integral, Indexing, and so on would look as much as possible like the math text books.&lt;/p&gt;
&lt;p&gt;In parallel, all of us discussed that we’d use Scheme to build this software ecosystem.&lt;/p&gt;
&lt;h2&gt;Saturday 28 January 1995&lt;/h2&gt;
&lt;p&gt;A few weeks later I found out that over this weekend Matthew had started to “cobbled together MrEd.” I am sure he didn’t use “cobble” but something close. And it probably took a bit more than this weekend. What I am pretty sure about is that the first key strokes of conception probably took place on that day (cross-producting my memory with my understanding of Matthew).&lt;/p&gt;

&lt;p&gt;I don’t remember the different meetings. Maybe it was the second meeting where I suggested the current user interface— &lt;wbr/&gt;Emacs and the command line— &lt;wbr/&gt;was the biggest obstacle for students.&lt;/p&gt;
&lt;p&gt;In any case, I set out to build a user-friendly environment. The main problem, it seemed at the time, was to build a GUI text editor that could handle modern entities like pictures and live objects. I picked wxWindows as a starting point, because it seemed like the most promising cross-platform GUI library, and libscheme as the Scheme implementation, because it was easy to embed. I figured that the hard part of a text editor was making it run fast enough, so I wrote that part in C++.&lt;/p&gt;
&lt;p&gt;The program was called “MrEd” because it was mostly an editor. The name “ed” was already taken. Among the words you get by adding a letter to the front, only “red” was appealing for whatever reason, but that name was also taken (as “restricted ed”). Adding one more letter arrived at “mred.” I liked the “Mr” part and didn’t mind that it was already the name of a talking horse.&lt;/p&gt;
&lt;p&gt;Although the editor core was in C++, I at least knew enough or had enough direction from the group to aim for Scheme for the rest of the environment’s implementation. So, libscheme became not only the vehicle for running student programs, but also the language for implementing much of the GUI itself. To make that practical, I started changing libscheme: adding a built-in object system that supports extension of C++ classes, adding compilation to an AST instead of interpreting S-expressions directly, and so on. After a few months, I became attached enough to this part of the implementation to break it out as a separate piece. I called it &quot;Ms. Scheme&quot;, but since &quot;Ms&quot; seemed too likely to suggest &quot;Microsoft&quot;, spelled it &quot;MzScheme&quot;. (Around 2001, we started using the umbrella name &quot;PLT Scheme&quot; and moved away from adopting cute names for subsystems. &quot;PLT Scheme&quot; became &quot;Racket&quot; in 2010.)&lt;/p&gt;
&lt;p&gt;That’s why the oldest entry for &lt;a href=&quot;https://github.com/racket/gui/blob/master/gui-lib/mred/HISTORY.txt&quot;&gt;&lt;span class=&quot;stt&quot;&gt;HISTORY.txt&lt;/span&gt;&lt;/a&gt; in the &lt;span class=&quot;stt&quot;&gt;gui-lib&lt;/span&gt; package is “Version 0.7: May 10, 1995,” while the oldest entry in &lt;a href=&quot;https://github.com/racket/racket/blob/master/racket/collects/racket/HISTORY.txt&quot;&gt;&lt;span class=&quot;stt&quot;&gt;HISTORY.txt&lt;/span&gt;&lt;/a&gt; for the &lt;span class=&quot;stt&quot;&gt;racket&lt;/span&gt; collection is “Verion 0.27: September 26, 1995.” The editor came first, and the language was something of an afterthought.&lt;/p&gt;
&lt;p&gt;Of course, the language quickly came to dominate the idea— &lt;wbr/&gt;if not the day-to-day work, which for several years was still mostly about getting cross-platform GUI and drawing toolkit to run well. Given that the language became the main line of the project, it’s easy to see choices that would have been a better starting point, even in 1995. But it turned out okay.&lt;/p&gt;

&lt;p&gt;By summer ’95, I had designed the basics of what is now known as the &lt;a href=&quot;https://course.ccs.neu.edu/cs2500/design_recipe.html&quot;&gt;design recipe&lt;/a&gt; and a few days worth of teaching material. We recruited four teachers and one of Corky’s PhD candidates to test this material with a week-long workshop.&lt;/p&gt;
&lt;p&gt;I started with Chez Scheme and Emacs.&lt;/p&gt;
&lt;p&gt;During the week, Matthew demoed a rudimentary IDE based on MrEd. I was suitably impressed and tried MrEd on the four participants, with simple images and all. It didn’t go too well, but we had the first four innocent users try out our very first teaching environment.&lt;/p&gt;
&lt;footer&gt;
&lt;/footer&gt;&lt;/div&gt;&lt;p&gt;Made with &lt;a href=&quot;https://github.com/greghendershott/frog&quot;&gt;Frog&lt;/a&gt;, a static-blog generator written in Racket.&lt;br/&gt;&lt;a href=&quot;https://github.com/racket/racket-lang-org&quot;&gt;Source code&lt;/a&gt; for this blog.&lt;/p&gt;</description>
<pubDate>Sun, 10 May 2020 14:00:36 +0000</pubDate>
<dc:creator>azhenley</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.racket-lang.org/2020/05/racket-is-25.html</dc:identifier>
</item>
<item>
<title>Lord of the io_uring: io_uring tutorial, examples and reference</title>
<link>https://unixism.net/loti/</link>
<guid isPermaLink="true" >https://unixism.net/loti/</guid>
<description>&lt;div class=&quot;section&quot; id=&quot;welcome-to-lord-of-the-io-uring&quot; readability=&quot;13.25163787969&quot;&gt;

&lt;p&gt;&lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;io_uring&lt;/span&gt;&lt;/code&gt; is a powerful new way to do asynchronous I/O programming under Linux. Doing away with various limitations of previous generation I/O subsystems, &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;io_uring&lt;/span&gt;&lt;/code&gt; holds immense promise. For more details on what &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;io_uring&lt;/span&gt;&lt;/code&gt; brings to the table, please see the chapter &lt;a class=&quot;reference internal&quot; href=&quot;https://unixism.net/loti/what_is_io_uring.html#what-is-io-uring&quot;&gt;&lt;span class=&quot;std std-ref&quot;&gt;What is io_uring?&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;section&quot; id=&quot;contributing&quot; readability=&quot;10.553623188406&quot;&gt;
&lt;h2&gt;Contributing&lt;/h2&gt;
&lt;p&gt;The source code repository for this guide is &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/shuveb/loti&quot;&gt;here on Github&lt;/a&gt;. Please send me pull requests should you want to contribute. If you find any bugs in either the documentation or the included source code examples, please raise an issue on GitHub. The repository for the example programs is maintained separately. Please see details below.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;source-code-for-examples&quot; readability=&quot;10.697247706422&quot;&gt;
&lt;h2&gt;Source code for examples&lt;/h2&gt;
&lt;p&gt;Source code for all example programs in this guide are available &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/shuveb/loti-examples&quot;&gt;on Github&lt;/a&gt;. If you find bugs in the examples, please raise issues on Github. I want to keep these examples simple and to the point. I many not merge pull requests that add features for that reason. Pull requests that fix bugs are welcome.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;documentation&quot;&gt;
&lt;h2&gt;Documentation&lt;/h2&gt;
&lt;div class=&quot;toctree-wrapper compound&quot;&gt;
&lt;p class=&quot;caption&quot;&gt;&lt;span class=&quot;caption-text&quot;&gt;Introduction&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;toctree-wrapper compound&quot; id=&quot;sec-liburing-reference&quot;&gt;
&lt;p class=&quot;caption&quot;&gt;&lt;span class=&quot;caption-text&quot;&gt;liburing Reference&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;toctree-wrapper compound&quot; id=&quot;sec-iouring-reference&quot;&gt;
&lt;p class=&quot;caption&quot;&gt;&lt;span class=&quot;caption-text&quot;&gt;io_uring Reference&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

</description>
<pubDate>Sun, 10 May 2020 13:49:14 +0000</pubDate>
<dc:creator>shuss</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://unixism.net/loti/</dc:identifier>
</item>
<item>
<title>Scunthorpe Sans – a self-censoring font</title>
<link>https://vole.wtf/scunthorpe-sans/</link>
<guid isPermaLink="true" >https://vole.wtf/scunthorpe-sans/</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://vole.wtf/scunthorpe-sans/&quot;&gt;https://vole.wtf/scunthorpe-sans/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=23131559&quot;&gt;https://news.ycombinator.com/item?id=23131559&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 554&lt;/p&gt;
&lt;p&gt;# Comments: 224&lt;/p&gt;
</description>
<pubDate>Sun, 10 May 2020 10:21:51 +0000</pubDate>
<dc:creator>phoe-krk</dc:creator>
<og:type>website</og:type>
<og:title>Scunthorpe Sans 🗯🚫 profanity-blocking font</og:title>
<og:description>A s*** font that f***ing censors swearing automatically</og:description>
<og:image>https://vole.wtf/scunthorpe-sans/social.jpg?v=2</og:image>
<og:url>https://vole.wtf/scunthorpe-sans/</og:url>
<dc:language>en-GB</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://vole.wtf/scunthorpe-sans/</dc:identifier>
</item>
<item>
<title>AWS services to avoid</title>
<link>https://medium.com/teamzerolabs/5-aws-services-you-should-avoid-f45111cc10cd</link>
<guid isPermaLink="true" >https://medium.com/teamzerolabs/5-aws-services-you-should-avoid-f45111cc10cd</guid>
<description>&lt;div readability=&quot;5.5211267605634&quot;&gt;

&lt;div class=&quot;ei&quot;&gt;
&lt;div class=&quot;n ej ek el em&quot;&gt;
&lt;div class=&quot;o n&quot;&gt;
&lt;div&gt;
&lt;div class=&quot;en eo ep&quot;&gt;

&lt;img alt=&quot;David Lin&quot; class=&quot;r ex ep eo&quot; src=&quot;https://miro.medium.com/fit/c/96/96/2*C3fNg7SpS2Py3-xFyHGv4w.jpeg&quot; width=&quot;48&quot; height=&quot;48&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p id=&quot;a99c&quot; class=&quot;gq he ck bg gs b gt gu hf gv gw hg gx gy hh gz ha hi hb hc hj hd dj&quot;&gt;Get ready for some personal and definitely opinionated opinions!&lt;/p&gt;
&lt;p id=&quot;e1e6&quot; class=&quot;gq he ck bg gs b gt gu hf gv gw hg gx gy hh gz ha hi hb hc hj hd dj&quot;&gt;AWS comes with many components that cover different areas of concerns. But, most are not general purpose and cheap enough to be applied correctly. Used in the wrong context, they end up wasting time, resources, money, and will create developer friction and frustrations for months.&lt;/p&gt;
&lt;p id=&quot;b9d5&quot; class=&quot;gq he ck bg gs b gt gu hf gv gw hg gx gy hh gz ha hi hb hc hj hd dj&quot;&gt;Here are the top 5 AWS Services you should avoid:&lt;/p&gt;
&lt;ol class=&quot;&quot;&gt;&lt;li id=&quot;d8fe&quot; class=&quot;gq he ck bg gs b gt gu hf gv gw hg gx gy hh gz ha hi hb hc hj hd hk hl hm&quot;&gt;Cognito&lt;/li&gt;
&lt;li id=&quot;eaf9&quot; class=&quot;gq he ck bg gs b gt hn hf gv ho hg gx hp hh gz hq hi hb hr hj hd hk hl hm&quot;&gt;CloudFormation&lt;/li&gt;
&lt;li id=&quot;3fcf&quot; class=&quot;gq he ck bg gs b gt hn hf gv ho hg gx hp hh gz hq hi hb hr hj hd hk hl hm&quot;&gt;ElasticCache&lt;/li&gt;
&lt;li id=&quot;4888&quot; class=&quot;gq he ck bg gs b gt hn hf gv ho hg gx hp hh gz hq hi hb hr hj hd hk hl hm&quot;&gt;Kinesis&lt;/li&gt;
&lt;li id=&quot;cd07&quot; class=&quot;gq he ck bg gs b gt hn hf gv ho hg gx hp hh gz hq hi hb hr hj hd hk hl hm&quot;&gt;Lambda&lt;/li&gt;
&lt;/ol&gt;
&lt;p id=&quot;6519&quot; class=&quot;gq he ck bg gs b gt id hf gv ie hg gx if hh gz ig hi hb ih hj hd dj&quot;&gt;Cognito sounds great on paper. It will take care of user management for you, including Google Sign-in, Facebook Login, and handle user role assignments, reset passwords, and define password rules. It can do both Desktop and Mobile. It can work with public user pools, and private user pools (to restrict enterprise private resources).&lt;/p&gt;
&lt;p id=&quot;6a3d&quot; class=&quot;gq he ck bg gs b gt gu hf gv gw hg gx gy hh gz ha hi hb hc hj hd dj&quot;&gt;Cognito will help you save time by presenting its own UI when requesting permission from users.&lt;/p&gt;
&lt;p id=&quot;23c0&quot; class=&quot;gq he ck bg gs b gt gu hf gv gw hg gx gy hh gz ha hi hb hc hj hd dj&quot;&gt;Cognito has competitors: Auth0, OneLogin, Okta, to name a few. It is also possible to implement all of those above login workflows yourself, given enough time and team size.&lt;/p&gt;
&lt;p id=&quot;9534&quot; class=&quot;gq he ck bg gs b gt gu hf gv gw hg gx gy hh gz ha hi hb hc hj hd dj&quot;&gt;But, if you do use Cognito for a while, ugly edges will reveal themselves. You will discover that &lt;strong class=&quot;gs ii&quot;&gt;Cognito cannot be used for Native Mobile logins&lt;/strong&gt;. When you are making a mobile application, and attempting to get user to login via Facebook, if you had integrated with Firebase, it will prompt the user to open the Facebook App, and allow user to simply authenticate/authorize (assuming they are already logged in on the Facebook App).&lt;/p&gt;
&lt;p id=&quot;8254&quot; class=&quot;gq he ck bg gs b gt gu hf gv gw hg gx gy hh gz ha hi hb hc hj hd dj&quot;&gt;With Cognito, they are presented with an embedded WebView, prompting the user to log into Facebook again in the embedded WebView. This creates a lot of friction, so you file tickets to the team asking about Native Logins.&lt;/p&gt;

This is literally filed 16 hours ago, 2020–02–19, source: Github
&lt;p id=&quot;b651&quot; class=&quot;gq he ck bg gs b gt gu hf gv gw hg gx gy hh gz ha hi hb hc hj hd dj&quot;&gt;Cognito does promise that it will work with any OAuth2 Identity provider. We thought this meant we could use it to &lt;strong class=&quot;gs ii&quot;&gt;login with WeChat&lt;/strong&gt;, to reduce friction in user registration for Apps in China. After research, we ended up going with WeChat’s own SDK. There is no simple way of implementing simple social logins with Cognito.&lt;/p&gt;
&lt;p id=&quot;bb34&quot; class=&quot;gq he ck bg gs b gt gu hf gv gw hg gx gy hh gz ha hi hb hc hj hd dj&quot;&gt;If Mobile User management is in your requirement, you would do better with Firebase Social Login. It supports Facebook and Google native social logins out of the box, and gives you enough support on the server side to create the user record for WeChat users.&lt;/p&gt;
&lt;p id=&quot;3906&quot; class=&quot;gq he ck bg gs b gt gu hf gv gw hg gx gy hh gz ha hi hb hc hj hd dj&quot;&gt;There is also the option of rolling your own authentication strategy and use each of the SDK provided by Google/Apple/Facebook/WeChat. This is the safest route if you can afford the time and engineering resource. But, if you are short on manpower/time, definitely do not go with Cognito. It cannot deliver in the Mobile context.&lt;/p&gt;

&lt;p id=&quot;1021&quot; class=&quot;gq he ck bg gs b gt id hf gv ie hg gx if hh gz ig hi hb ih hj hd dj&quot;&gt;I hate CloudFormation. I hate “Stacks.” Parameters are very clunky to work with. The formatting of the template files is super verbose. Of course, the new YAML CF is better than the old JSON CF, but it’s still tough to read long complex stacks. Also you still have an internet full of JSON CloudFormation as your body of reference.&lt;/p&gt;
&lt;p id=&quot;43a8&quot; class=&quot;gq he ck bg gs b gt gu hf gv gw hg gx gy hh gz ha hi hb hc hj hd dj&quot;&gt;Circular dependency errors are soul crushing.&lt;/p&gt;
&lt;p id=&quot;a95b&quot; class=&quot;gq he ck bg gs b gt gu hf gv gw hg gx gy hh gz ha hi hb hc hj hd dj&quot;&gt;Do you need to reference the attributes of one resource in a different stack? Can’t. You need to do outputs. Okay what if an output of that stack changes and needs to be reflected in the other stack? You need to remember where it’s used and perform manual intervention.&lt;/p&gt;
&lt;p id=&quot;2dcd&quot; class=&quot;gq he ck bg gs b gt gu hf gv gw hg gx gy hh gz ha hi hb hc hj hd dj&quot;&gt;Do you want to modularize a piece of the infrastructure so you can reuse it across multiple resources? Sorry, you need to use “nested stacks” so you can have even more stack on stacks that are going to get stuck in IN_PROGRESS or ROLLBACK mode. To be clear, what I am saying is, do not use nested stacks.&lt;/p&gt;
&lt;p id=&quot;0e39&quot; class=&quot;gq he ck bg gs b gt gu hf gv gw hg gx gy hh gz ha hi hb hc hj hd dj&quot;&gt;Lack of Drift detection or reconciliation. With lack of drift detection comes great uncertainty.&lt;/p&gt;

&lt;p id=&quot;9a74&quot; class=&quot;gq he ck bg gs b gt gu hf gv gw hg gx gy hh gz ha hi hb hc hj hd dj&quot;&gt;I don’t like all the &lt;code class=&quot;iz jm jn jo jp b&quot;&gt;Fn:sub&lt;/code&gt;, &lt;code class=&quot;iz jm jn jo jp b&quot;&gt;! Ref&lt;/code&gt;, &lt;code class=&quot;iz jm jn jo jp b&quot;&gt;Fn:join&lt;/code&gt;. I honestly cannot imagine a whole infrastructure with multiple accounts, VPCs, subnets, peering connections documented entirely in CloudFormation.&lt;/p&gt;
&lt;p id=&quot;363d&quot; class=&quot;gq he ck bg gs b gt gu hf gv gw hg gx gy hh gz ha hi hb hc hj hd dj&quot;&gt;&lt;strong class=&quot;gs ii&quot;&gt;Luckily the solution is easy!&lt;/strong&gt; Use Terraform! Terraform is super awesome and we have been using it since early 2012. It’s cloud agnostic. You have a great module system that you can use and leverage heavily without fearing for your life.&lt;/p&gt;
&lt;p id=&quot;6aac&quot; class=&quot;gq he ck bg gs b gt gu hf gv gw hg gx gy hh gz ha hi hb hc hj hd dj&quot;&gt;You can even do logic on top of these modules to add or not add resources based on variables using terraform’s &lt;code class=&quot;iz jm jn jo jp b&quot;&gt;count&lt;/code&gt; attribute.&lt;/p&gt;
&lt;p id=&quot;8a38&quot; class=&quot;gq he ck bg gs b gt gu hf gv gw hg gx gy hh gz ha hi hb hc hj hd dj&quot;&gt;Here’ s a great article about &lt;a href=&quot;https://www.hashicorp.com/blog/detecting-and-managing-drift-with-terraform/&quot; class=&quot;fe gc jq jr js jt&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;drift&lt;/a&gt; with Terraform.&lt;/p&gt;
&lt;p id=&quot;cd3a&quot; class=&quot;gq he ck bg gs b gt gu hf gv gw hg gx gy hh gz ha hi hb hc hj hd dj&quot;&gt;HCL is beautiful to read and write. Terraform &lt;code class=&quot;iz jm jn jo jp b&quot;&gt;plan&lt;/code&gt; is amazing for studying infrastructure changes and giving you the confidence that you are changing what you expect. (Yes CF has changesets if you must).&lt;/p&gt;
&lt;p id=&quot;87b8&quot; class=&quot;gq he ck bg gs b gt gu hf gv gw hg gx gy hh gz ha hi hb hc hj hd dj&quot;&gt;Moral of the story is, use terraform to destress yourself. Use terraform so that you do not spend a whole day fretting over how you will possibly make changes to a stack that is depended on from above and below by other stacks. Terraform &lt;code class=&quot;iz jm jn jo jp b&quot;&gt;plan&lt;/code&gt;. Terraform &lt;code class=&quot;iz jm jn jo jp b&quot;&gt;apply&lt;/code&gt;.&lt;/p&gt;

&lt;p id=&quot;d0f4&quot; class=&quot;gq he ck bg gs b gt id hf gv ie hg gx if hh gz ig hi hb ih hj hd dj&quot;&gt;Many a startup has fallen prey to ElastiCache. It usually happens when the team is under-staffed and rushing for a deadline and they type in &lt;code class=&quot;iz jm jn jo jp b&quot;&gt;Redis&lt;/code&gt; into the AWS console:&lt;/p&gt;

Horray out of the box Redis that I don’t need to deploy!
&lt;p id=&quot;1d90&quot; class=&quot;gq he ck bg gs b gt gu hf gv gw hg gx gy hh gz ha hi hb hc hj hd dj&quot;&gt;On the setup screen, you name your cluster, accept the defaults.&lt;/p&gt;

&lt;p id=&quot;9ce4&quot; class=&quot;gq he ck bg gs b gt gu hf gv gw hg gx gy hh gz ha hi hb hc hj hd dj&quot;&gt;Voila! Begin using Redis. Perfect.&lt;/p&gt;
&lt;p id=&quot;3381&quot; class=&quot;gq he ck bg gs b gt gu hf gv gw hg gx gy hh gz ha hi hb hc hj hd dj&quot;&gt;Obviously it works great.&lt;/p&gt;
&lt;p id=&quot;9d6c&quot; class=&quot;gq he ck bg gs b gt gu hf gv gw hg gx gy hh gz ha hi hb hc hj hd dj&quot;&gt;What’s the problem? It is expensive, and no one notices for months. We’ve seen this happen a few times already when we did cost analysis for a couple clients. Firstly, the default gives you a cluster with beefy &lt;code class=&quot;iz jm jn jo jp b&quot;&gt;cache.r5.large&lt;/code&gt; instance. Secondly that cache.* prefix means this instance costs &lt;strong class=&quot;gs ii&quot;&gt;$0.216/hr&lt;/strong&gt; instead of &lt;strong class=&quot;gs ii&quot;&gt;$0.126/hr&lt;/strong&gt;, a &lt;strong class=&quot;gs ii&quot;&gt;71.4%&lt;/strong&gt; premium. Then you might think you need one for dev, qa, and prod. That all adds up to $$$. You don’t want to be the one who caused the $3000 ElastiCache line item on the AWS bill.&lt;/p&gt;
&lt;p id=&quot;85dd&quot; class=&quot;gq he ck bg gs b gt gu hf gv gw hg gx gy hh gz ha hi hb hc hj hd dj&quot;&gt;Run a Docker redis in ec2 for a while first. Make sure it serves your purposes. Figure out how the sizing works for you. Remember redis is meant to hold ephemeral data in memory, so please don’t treat it as a DB. It’s best to design your system assuming that redis may or may not lose whatever is inside. Clustering or HA via Sentinel, can all come later when you know you need it!&lt;/p&gt;

&lt;p id=&quot;884d&quot; class=&quot;gq he ck bg gs b gt id hf gv ie hg gx if hh gz ig hi hb ih hj hd dj&quot;&gt;Kinesis, in Amazon’s own words:&lt;/p&gt;
&lt;pre class=&quot;ik il im in io jy jz cq&quot;&gt;
&lt;span id=&quot;fa66&quot; class=&quot;ka ht ck bg jp b fc kb kc r kd&quot;&gt;Amazon Kinesis makes it easy to collect, process, and analyze real-time, streaming data so you can get timely insights and react quickly to new information.&lt;/span&gt;
&lt;/pre&gt;
&lt;p id=&quot;c512&quot; class=&quot;gq he ck bg gs b gt gu hf gv gw hg gx gy hh gz ha hi hb hc hj hd dj&quot;&gt;Streaming data such as video processing/uploading are a good fit for Kinesis. But, not all data/records/events should go into Kinesis. &lt;strong class=&quot;gs ii&quot;&gt;It is not a general purpose enterprise event bus or queue&lt;/strong&gt;.&lt;/p&gt;
&lt;p id=&quot;41c7&quot; class=&quot;gq he ck bg gs b gt gu hf gv gw hg gx gy hh gz ha hi hb hc hj hd dj&quot;&gt;A little context:&lt;/p&gt;
&lt;p id=&quot;0c54&quot; class=&quot;gq he ck bg gs b gt gu hf gv gw hg gx gy hh gz ha hi hb hc hj hd dj&quot;&gt;We once joined on a project midway, and have to support an ETL pipeline that included Kinesis in the deployment. The application collected small json records, and stuffed them into Kinesis with the &lt;code class=&quot;iz jm jn jo jp b&quot;&gt;python boto3 api&lt;/code&gt; . On the other side, worker process running inside EC2/ECS were pulling these records with boto3 and processing them. We then discovered that retrieving records out of Kinesis Streams when you have multiple worker is non-trivial.&lt;/p&gt;
&lt;pre class=&quot;ik il im in io jy jz cq&quot;&gt;
&lt;span id=&quot;02ee&quot; class=&quot;ka ht ck bg jp b fc kb kc r kd&quot;&gt;You can develop a consumer application for Amazon Kinesis Data Streams using &lt;a href=&quot;https://docs.aws.amazon.com/streams/latest/dev/developing-consumers-with-kcl.html&quot; class=&quot;fe gc jq jr js jt&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;the Kinesis Client Library (KCL)&lt;/a&gt;. Although you can use the Kinesis Data Streams API to get data from a Kinesis data stream, we recommend that you use the design patterns and code for consumer applications provided by the KCL.&lt;/span&gt;
&lt;/pre&gt;
&lt;p id=&quot;4fd9&quot; class=&quot;gq he ck bg gs b gt gu hf gv gw hg gx gy hh gz ha hi hb hc hj hd dj&quot;&gt;Imagine if you are running 4 workers, and they are all listening to the same Kinesis stream for events. How do we prevent them from working on the same events? In traditional queueing systems, you use locks and owner columns to ensure each task is handled by only one worker. Amazon SQS will mark a message as busy when one of the worker is working on the message, so that other workers do not do duplicate work.&lt;/p&gt;
&lt;p id=&quot;b6b2&quot; class=&quot;gq he ck bg gs b gt gu hf gv gw hg gx gy hh gz ha hi hb hc hj hd dj&quot;&gt;To implement the same pattern with Kinesis Stream, you must implement KCL, which is written in Java (nothing wrong with Java). The KCL agent will be spun up as a second daemon process in the background, and send events to your application when it itself receives events.&lt;/p&gt;
&lt;p id=&quot;abcd&quot; class=&quot;gq he ck bg gs b gt gu hf gv gw hg gx gy hh gz ha hi hb hc hj hd dj&quot;&gt;This means: &lt;strong class=&quot;gs ii&quot;&gt;all of your python/ruby/node docker images that handles records from Kinesis must install Java dependencies and run the KCL java process in the background&lt;/strong&gt;. KCL communicates with the main program via std-in/out/err, so logging from the main application becomes problematic as well! If you have a bug in the application, you will not be able to print out relevant logs to STDOUT, because it will cause errors in the KCL agent.&lt;/p&gt;
&lt;p id=&quot;95e0&quot; class=&quot;gq he ck bg gs b gt gu hf gv gw hg gx gy hh gz ha hi hb hc hj hd dj&quot;&gt;Furthermore, in order to have multiple workers, Kinesis Streams require you to use multiple shards. Each worker will make claim to a shard. More shards = more bills. This worker to shard mapping is stored in DynamoDB! So, to recap: in order to use Kinesis as an enterprise queue, you must:&lt;/p&gt;
&lt;ol class=&quot;&quot;&gt;&lt;li id=&quot;792b&quot; class=&quot;gq he ck bg gs b gt gu hf gv gw hg gx gy hh gz ha hi hb hc hj hd hk hl hm&quot;&gt;Bundle KCL agents into your running environment, which increases load and run time, and makes logging errors complicated.&lt;/li&gt;
&lt;li id=&quot;3492&quot; class=&quot;gq he ck bg gs b gt hn hf gv ho hg gx hp hh gz hq hi hb hr hj hd hk hl hm&quot;&gt;Buy multiple shards to work on things in parallel.&lt;/li&gt;
&lt;li id=&quot;5697&quot; class=&quot;gq he ck bg gs b gt hn hf gv ho hg gx hp hh gz hq hi hb hr hj hd hk hl hm&quot;&gt;Buy more storage space in DynamoDB, to label which worker can work on which shard.&lt;/li&gt;
&lt;/ol&gt;&lt;p id=&quot;7191&quot; class=&quot;gq he ck bg gs b gt gu hf gv gw hg gx gy hh gz ha hi hb hc hj hd dj&quot;&gt;It is both cumbersome and difficult to apply Kinesis stream correctly, especially when you are looking for an enterprise queue. You would do better by using SNS/SQS combination, or using a queuing framework that sits on top of Redis or traditional databases.&lt;/p&gt;

&lt;p id=&quot;f151&quot; class=&quot;gq he ck bg gs b gt id hf gv ie hg gx if hh gz ig hi hb ih hj hd dj&quot;&gt;Lambdas are great for the following tasks:&lt;/p&gt;
&lt;ol class=&quot;&quot;&gt;&lt;li id=&quot;52fd&quot; class=&quot;gq he ck bg gs b gt gu hf gv gw hg gx gy hh gz ha hi hb hc hj hd hk hl hm&quot;&gt;Serving/Redirecting requests to CloudFront.&lt;/li&gt;
&lt;li id=&quot;97bf&quot; class=&quot;gq he ck bg gs b gt hn hf gv ho hg gx hp hh gz hq hi hb hr hj hd hk hl hm&quot;&gt;Reacting to events from SNS or SQS — Small asynchronous tasks such as Image transformation (write to S3), OCR, and ETL (When volume is small and you can batch process).&lt;/li&gt;
&lt;/ol&gt;&lt;p id=&quot;7990&quot; class=&quot;gq he ck bg gs b gt gu hf gv gw hg gx gy hh gz ha hi hb hc hj hd dj&quot;&gt;Lambda is &lt;strong class=&quot;gs ii&quot;&gt;&lt;em class=&quot;ke&quot;&gt;horrible&lt;/em&gt;&lt;/strong&gt; for:&lt;/p&gt;
&lt;p id=&quot;2120&quot; class=&quot;gq he ck bg gs b gt gu hf gv gw hg gx gy hh gz ha hi hb hc hj hd dj&quot;&gt;&lt;strong class=&quot;gs ii&quot;&gt;A replacement for REST API endpoints.&lt;/strong&gt;&lt;/p&gt;
&lt;p id=&quot;911b&quot; class=&quot;gq he ck bg gs b gt gu hf gv gw hg gx gy hh gz ha hi hb hc hj hd dj&quot;&gt;Take an example of online book shopping REST api:&lt;/p&gt;
&lt;ul class=&quot;&quot;&gt;&lt;li id=&quot;5cf7&quot; class=&quot;gq he ck bg gs b gt gu hf gv gw hg gx gy hh gz ha hi hb hc hj hd kf hl hm&quot;&gt;/api/v1/books — GET/POST/PUT/DELETE&lt;/li&gt;
&lt;li id=&quot;a1f6&quot; class=&quot;gq he ck bg gs b gt hn hf gv ho hg gx hp hh gz hq hi hb hr hj hd kf hl hm&quot;&gt;/api/v1/users — GET/POST/PUT&lt;/li&gt;
&lt;li id=&quot;92e3&quot; class=&quot;gq he ck bg gs b gt hn hf gv ho hg gx hp hh gz hq hi hb hr hj hd kf hl hm&quot;&gt;/api/v1/carts — GET/POST/PUT/DELETE&lt;/li&gt;
&lt;li id=&quot;e6f0&quot; class=&quot;gq he ck bg gs b gt hn hf gv ho hg gx hp hh gz hq hi hb hr hj hd kf hl hm&quot;&gt;/api/v1/search — GET&lt;/li&gt;
&lt;li id=&quot;d457&quot; class=&quot;gq he ck bg gs b gt hn hf gv ho hg gx hp hh gz hq hi hb hr hj hd kf hl hm&quot;&gt;/api/v1/stats — GET&lt;/li&gt;
&lt;li id=&quot;4bf2&quot; class=&quot;gq he ck bg gs b gt hn hf gv ho hg gx hp hh gz hq hi hb hr hj hd kf hl hm&quot;&gt;… Many more.&lt;/li&gt;
&lt;/ul&gt;&lt;p id=&quot;6b9d&quot; class=&quot;gq he ck bg gs b gt gu hf gv gw hg gx gy hh gz ha hi hb hc hj hd dj&quot;&gt;A mature internal REST API endpoints can and will have hundreds of REST routes.&lt;/p&gt;
&lt;p id=&quot;191a&quot; class=&quot;gq he ck bg gs b gt gu hf gv gw hg gx gy hh gz ha hi hb hc hj hd dj&quot;&gt;Normally, a company may choose an API gateway or Nginx to mount multiple microservices, one for books, one for users, one for carts, etc. Or, they might wise up and use a monolith and put all 4 modules into one backend repository.&lt;/p&gt;
&lt;p id=&quot;d01a&quot; class=&quot;gq he ck bg gs b gt gu hf gv gw hg gx gy hh gz ha hi hb hc hj hd dj&quot;&gt;With the Lambda server-less paradigm, you end up with 1 lambda function per route.&lt;/p&gt;
&lt;p id=&quot;0c5f&quot; class=&quot;gq he ck bg gs b gt gu hf gv gw hg gx gy hh gz ha hi hb hc hj hd dj&quot;&gt;Each deployment now means you are pushing updates for hundreds of lambda resources.&lt;/p&gt;
&lt;p id=&quot;ea75&quot; class=&quot;gq he ck bg gs b gt gu hf gv gw hg gx gy hh gz ha hi hb hc hj hd dj&quot;&gt;It becomes difficult to test single routes and look at the code in AWS’s Lambda UI. Each lambda is configured via Environment variables individually. If you have 5 variables to connect into a MySQL RDS instance, it suddenly means you have 5 * 100 routes = 500 variables to configure inside the cloud formation template.&lt;/p&gt;
&lt;p id=&quot;f8ca&quot; class=&quot;gq he ck bg gs b gt gu hf gv gw hg gx gy hh gz ha hi hb hc hj hd dj&quot;&gt;Furthermore, each of them will try to establish database connections when handling requests. There is literally no out of box way to share resources between lambdas for beginners.&lt;/p&gt;
&lt;p id=&quot;5660&quot; class=&quot;gq he ck bg gs b gt gu hf gv gw hg gx gy hh gz ha hi hb hc hj hd dj&quot;&gt;Next, QA comes to you and ask about a backend to use with QA environments. You proceed to add “QA-” prefix to all lambda names and look at the lambda dashboard. Now, you have twice as many as small lambdas.&lt;/p&gt;
&lt;p id=&quot;54a1&quot; class=&quot;gq he ck bg gs b gt gu hf gv gw hg gx gy hh gz ha hi hb hc hj hd dj&quot;&gt;Next, DevOps comes to you and ask about a backend to use with Production environments. You proceed to add “Prod-” prefix to all lambda names and look at the dashboard. Now, you have thrice as many as small lambdas.&lt;/p&gt;
&lt;p id=&quot;425a&quot; class=&quot;gq he ck bg gs b gt gu hf gv gw hg gx gy hh gz ha hi hb hc hj hd dj&quot;&gt;You then discover bugs within your code, leading to request handler throwing &lt;em class=&quot;ke&quot;&gt;HTTP 500&lt;/em&gt; errors, customers complain about things not working. &lt;strong class=&quot;gs ii&quot;&gt;You dig into CLOUD WATCH logs&lt;/strong&gt;. We have three sets of logs all intermixed together. This is unreadable.&lt;/p&gt;
&lt;p id=&quot;04ee&quot; class=&quot;gq he ck bg gs b gt gu hf gv gw hg gx gy hh gz ha hi hb hc hj hd dj&quot;&gt;A couple of weeks later, you discover that a teammate checked in code such that lambdas are now calling each other recursively. This is really bad, because we no longer know how long a request can take now to complete. This is not a Lambda only problem, microservices can call each other by mistakes (and this is why we should &lt;a class=&quot;fe gc jq jr js jt&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://medium.com/teamzerolabs/micro-services-dont-use-them-yet-f58a2758d8f9?source=friends_link&amp;amp;sk=bb34f9139002b646a8671a34ccd413a2&quot;&gt;use Monoliths when we can&lt;/a&gt;).&lt;/p&gt;
&lt;p id=&quot;00a2&quot; class=&quot;gq he ck bg gs b gt gu hf gv gw hg gx gy hh gz ha hi hb hc hj hd dj&quot;&gt;QA comes to you, &lt;strong class=&quot;gs ii&quot;&gt;they are asking how they can run the entire backend stack locally with docker (A reasonable thing to ask)&lt;/strong&gt;, so they can run selenium or cucumber tests against it. How would you do it when you have several hundreds routes, each tied up in a small lambda? You can’t. Your laptop is not powerful enough to run all of the routes at once.&lt;/p&gt;
&lt;p id=&quot;3eab&quot; class=&quot;gq he ck bg gs b gt gu hf gv gw hg gx gy hh gz ha hi hb hc hj hd dj&quot;&gt;DevOps comes to you, &lt;strong class=&quot;gs ii&quot;&gt;we would also like to run unit tests in CircleCI or Jenkins to test your feature branch before it gets merged in.&lt;/strong&gt; But, we have limited computing resources and cannot spin up hundreds of small docker processes just to run the unit tests.&lt;/p&gt;
&lt;blockquote class=&quot;kg kh ki&quot; readability=&quot;6&quot;&gt;
&lt;p id=&quot;0bb5&quot; class=&quot;gq he ck ke gs b gt gu hf gv gw hg gx gy hh gz ha hi hb hc hj hd dj&quot;&gt;What should have stayed as a Monoliths or small and separate microservices are now impossible to run all at once in a local environment.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p id=&quot;b573&quot; class=&quot;gq he ck bg gs b gt gu hf gv gw hg gx gy hh gz ha hi hb hc hj hd dj&quot;&gt;Do not attempt to use Lambda for REST API endpoints if you treasure your delivery time, sanity, and work throughput. Use a regular web framework for implementing REST APIs: express/flask/spring/go-revel/rails. They all work as intended, and you will have an easier time using them.&lt;/p&gt;

&lt;p id=&quot;60b7&quot; class=&quot;gq he ck bg gs b gt id hf gv ie hg gx if hh gz ig hi hb ih hj hd dj&quot;&gt;Well there you go. 5 AWS Services we love to hate. Obviously, there are proper ways to use all of these and they are all extremely powerful tools. However, if you are new, tread carefully or learn some design patterns from experts!&lt;/p&gt;
&lt;p id=&quot;6f69&quot; class=&quot;gq he ck bg gs b gt gu hf gv gw hg gx gy hh gz ha hi hb hc hj hd dj&quot;&gt;Triggered? Let us have it in the comments or clap us to our senses!&lt;/p&gt;
&lt;p id=&quot;af1b&quot; class=&quot;gq he ck bg gs b gt gu hf gv gw hg gx gy hh gz ha hi hb hc hj hd dj&quot;&gt;Check out more from us below!&lt;/p&gt;
</description>
<pubDate>Sun, 10 May 2020 09:53:42 +0000</pubDate>
<dc:creator>kiyanwang</dc:creator>
<og:type>article</og:type>
<og:title>5 AWS Services You Should Avoid!</og:title>
<og:description>Get ready for some personal and definitely opinionated opinions!</og:description>
<og:url>https://medium.com/teamzerolabs/5-aws-services-you-should-avoid-f45111cc10cd</og:url>
<og:image>https://miro.medium.com/max/565/0*S2RjAry_aI6t21JV.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://medium.com/teamzerolabs/5-aws-services-you-should-avoid-f45111cc10cd</dc:identifier>
</item>
<item>
<title>Convincing-looking 90s fonts in modern browsers</title>
<link>https://vistaserv.net/blog/90s-fonts-modern-browsers</link>
<guid isPermaLink="true" >https://vistaserv.net/blog/90s-fonts-modern-browsers</guid>
<description>&lt;hr/&gt;&lt;h3&gt;&lt;a href=&quot;https://vistaserv.net/blog&quot;&gt;Blog posts&lt;/a&gt; &amp;gt; Convincing-looking 90s fonts in modern browsers&lt;/h3&gt;

&lt;h3&gt;By &lt;a href=&quot;https://members.vistaserv.net/caitlin&quot;&gt;caitlin&lt;/a&gt; and &lt;a href=&quot;https://members.vistaserv.net/paul&quot;&gt;paul&lt;/a&gt;, 09-MAY-2020&lt;/h3&gt;
&lt;p&gt;We wanted to make a website that looked like it was from the 1990s. Sounds easy, right? Looking back from 2020, the aesthetic of the early World Wide Web stands out for the things it lacked: no CSS, emojis, fancy web fonts or non-web-safe colours. Black Times New Roman on a grey background, something like this:&lt;/p&gt;
&lt;img src=&quot;https://vistaserv.net/assets/blog/foo-html-chrome-ccfce3a6bd04a674f13956c6614e4ee656df418c46cc438da9dd487f1a3c5fc3.png&quot;/&gt;&lt;p&gt;That's simple and austere, but it doesn't really feel retro or nostalgic, does it? Initially, we weren't even sure what was lacking – we've clearly been living in the 21st century for too long.&lt;/p&gt;
&lt;p&gt;But when you open the same HTML file in Internet Explorer 5, running in a Windows 2000 virtual machine, it looks quite different:&lt;/p&gt;
&lt;img src=&quot;https://vistaserv.net/assets/blog/foo-html-ie5-1387b8a0042982cff9cd8a8e009fe780eb9aa8ca2afc09ba3de77f94998dc1eb.png&quot;/&gt;&lt;p&gt;Seeing that brought back a strong wave of nostalgia. Beyond the old-timey browser chrome and the different default treatment of tables, the text itself looks really different:&lt;/p&gt;
&lt;img src=&quot;https://vistaserv.net/assets/blog/foobar-antialiased-abdac32f141459a33bc6bd05075a7a3c620fc764d3b9a8b401ff0599b15936a3.png&quot;/&gt;&lt;img src=&quot;https://vistaserv.net/assets/blog/foobar-ie5-b0aa394a9929b2c39a713239e3cfc4774b778ed637c2d442e0307ac7caa731ca.png&quot;/&gt;&lt;p&gt;Antialiasing is another thing that the 90s web lacked, and it makes a surprisingly big difference. Even in the early 2000s, when CRT monitors were still widespread, the Apple and Microsoft operating systems had made fundamentally different choices when it came to font rendering. Mac OS X offered smoothed, dithered text, using shades of grey pixels to suggest contours, while Windows followed a strongly hinted approach, with strokes well-aligned to pixels, giving a much sharper, high-contrast feel.&lt;/p&gt;
&lt;img src=&quot;https://vistaserv.net/assets/blog/mac-windows-comparison-5342a98a19a785720d1a44d6a5cb842f4638912e6bd4d856bcd84edc98abb2c8.png&quot;/&gt; The left-hand image is a screenshot of Mac OS X 10.1 Puma, the right-hand image is of Windows 2000. Both date from the very early 2000s, but you can see the stark difference in approach to font rendering. These screenshots have not been modified at all, except for enlarging them to 200% with nearest-neighbour interpolation.
&lt;p&gt;Ultimately there isn't a rational justification for why we decided to mimic the early 2000s Windows style of rendering, but seeing those old browsers in Windows virtual machines resonated most with us, felt most.. &lt;em&gt;retro&lt;/em&gt;. And so, we decided to try and replicate that look and feel in modern browsers.&lt;/p&gt;
&lt;h2&gt;Idea #1: CSS&lt;/h2&gt;
&lt;p&gt;&quot;Great&quot;, we thought, &quot;we'll use CSS to take care of that&quot;. CSS in 2020 can do amazing things like rendering vector graphics and animations, so surely it should make short work of jagged fonts. But our hopes were quickly dashed by a web search. In the middle of page after page of StackOverflow posts from people who wanted to make their fonts &lt;em&gt;less&lt;/em&gt; jagged, we found that there isn't really a universal way to disable antialiasing using CSS. There's a non-standard &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/font-smooth&quot;&gt;font-smooth property&lt;/a&gt; that didn't make the cut for the CSS3 spec, but that doesn't work in all browsers, and worst of all, the results didn't quite hit the mark: the pixels were visible, but the resolution was way too high. Developers often lament the difficulty of designing for Retina screens, but we were having the opposite problem.&lt;/p&gt;
&lt;img src=&quot;https://vistaserv.net/assets/blog/foobar-font-smooth-6e775faab5bdd5388d6d7d91fd94faa59b2227d40cfbb9fb2f38266b5275f2c3.png&quot;/&gt;&lt;p&gt;It seems pretty settled that antialiasing is set at the OS level, and individual websites are discouraged from messing with that. Mostly that's because it's bad for accessibility, but in any case the font-smooth property is not part of the standards, and likely won't be in the future. And that's sensible. But making a website today that looks like it's from 1996 is not a sensible exercise either, so we continued on our quest for pixellated typographic perfection.&lt;/p&gt;
&lt;h2&gt;Idea #2: Importing bitmap font files&lt;/h2&gt;
&lt;p&gt;We couldn't make vector fonts look pixelated, but could we get around this by importing authentic 90s bitmap font files instead? We had a Windows 98 disk image with all of the system fonts including &lt;a href=&quot;https://en.wikipedia.org/wiki/MS_Serif&quot;&gt;MS Serif&lt;/a&gt;: a riff on Times New Roman in the bitmap &lt;tt&gt;.FON&lt;/tt&gt; format dating back to Windows 1.x. Unfortunately, we quickly found out that CSS &lt;tt&gt;@font-face&lt;/tt&gt; doesn't work with &lt;tt&gt;.FON&lt;/tt&gt; files, and none of the web-based font conversion tools that we could find would convert them to the vector formats that are usable with &lt;tt&gt;@font-face&lt;/tt&gt;.&lt;/p&gt;
&lt;h2&gt;Idea #3: FontForge&lt;/h2&gt;
&lt;p&gt;While searching for tools to convert bitmap font files we came across &lt;a href=&quot;https://fontforge.org/en-US/&quot;&gt;FontForge&lt;/a&gt; - a free and open source font editor. It looked impressively fully-featured and had a huge number of supported formats, so we were cautiously optimistic that we could make it work for us.&lt;/p&gt;
&lt;p&gt;Fontforge can convert fonts from vector to bitmap formats by creating &lt;a href=&quot;https://fontforge.org/docs/tutorial/editexample8.html&quot;&gt;bitmap strikes&lt;/a&gt;. Basically, a strike of a vector font, means its glyphs have been rasterised at a particular pixel size. Rasterisation at different sizes is important, because on an old-fashioned low-resolution screen, this is essentially what's happening: when rendering your text, the font is rasterised for your particular pixel density. For example, on a 75DPI screen, your 12 point font becomes 16 pixels high. These 16 pixels are big enough that you see them as jagged edges. However, if you're displaying 48 point text (a large heading, for example) on that same old-fashioned screen, you'll rasterise the font at 64 pixels, so already it'll seem much smoother. This will come back and complicate our life later on.&lt;/p&gt;
&lt;img src=&quot;https://vistaserv.net/assets/blog/12-24-32pt%20rasterisation%20illustration-ee7f2298cecbada38954356e3ba11c8fab07d65e56c6b37483c8c67b6ae431a1.png&quot;/&gt; Notice in this screenshot (taken in Windows 2000) how at different point sizes, the rasterisation of the text is clearly different. This is why we can't simply make a bitmap font at one size and scale it up – every size we want a pixellated font, we need to have a bitmap strike available.
&lt;p&gt;FontForge has the ability to work with other free software that traces the visual information conveyed by pixels into points, lines and curves, allowing you to convert bitmap fonts back into vector formats. This was promising!&lt;/p&gt;
&lt;p&gt;We made a bitmap strike of Times New Roman at 16px, and it was a pixel-perfect match of what we saw in IE5!&lt;/p&gt;
&lt;img src=&quot;https://vistaserv.net/assets/blog/foobar-ie5-b0aa394a9929b2c39a713239e3cfc4774b778ed637c2d442e0307ac7caa731ca.png&quot;/&gt;&lt;img src=&quot;https://vistaserv.net/assets/blog/fontforge%20bitmap%20strike-cf0fd3836f37f8955534f586fb9110f4015b414ec517e272031901a6027b6c74.png&quot;/&gt;&lt;p&gt;Elated, we installed &lt;a href=&quot;http://potrace.sourceforge.net/&quot;&gt;potrace&lt;/a&gt; and told FontForge to use it to trace our pixellated version of Times.&lt;/p&gt;
&lt;p&gt;This was the result:&lt;/p&gt;
&lt;img src=&quot;https://vistaserv.net/assets/blog/blobby-potrace-27dacfac1dbddb19d22b17ec112428bd72a7a35a497028f8a14e4ef308102d7d.png&quot;/&gt;&lt;p&gt;Potrace was doing its best to turn jagged pixels into smooth curves, and the result was a blobby mess.&lt;/p&gt;
&lt;img src=&quot;https://vistaserv.net/assets/blog/blobby-potrace-a-928907f482e071af3a9a17056eee6622dae15a49d4317a472c042776dbacbc78.png&quot;/&gt;&lt;h2&gt;Idea #4: Scaling up&lt;/h2&gt;
&lt;p&gt;Some further searching unearthed &lt;a href=&quot;https://stackoverflow.com/a/55020647/4997000&quot;&gt;the idea&lt;/a&gt; of scaling up the bitmap font before tracing to give potrace a higher-resolution input to work with. In our 16px bitmap version of Times we created a second, 80px strike, so it looked the same but the resolution was five times higher. We held our breath and repeated the autotrace…&lt;/p&gt;
&lt;img src=&quot;https://vistaserv.net/assets/blog/autotrace-scaled-up-5784c5caa6f3b21812d93dee274905e3791387c058f57d50da907308b34f03b0.png&quot;/&gt;&lt;p&gt;Success at last!&lt;/p&gt;
&lt;p&gt;We were thrilled with the way this looked, but the whole process was very manual. We would need to do this for the regular, bold and italic variants of Times, and if we wanted headings to look pixel-perfect we would need to trace different strike sizes as well. We wondered, was there a way we could automate this?&lt;/p&gt;
&lt;h2&gt;Automating things&lt;/h2&gt;
&lt;p&gt;Ideally, even if we limited ourselves to Times New Roman only, we wanted to have Regular, Bold, Italic, and Bold Italic font weights available, and since we wanted text to look reasonable at various sizes in the browser, we would also need to create strikes at a few different pixel sizes at least. For example, body text at 16px, but also 24px and 32px for headings, to be able to display them with appropriate levels of jaggedness – not too little, but definitely also not too much. As illustrated above, you wouldn't want to strike at 16px and then scale up to heading size. That would already mean 4x3 = 12 variants of that one font alone. And of course, we wouldn't be satisfied if we didn't also have MS Comic Sans and Lucida Handwriting available for our users ;). This would've taken us hours, if not days, to accomplish manually.&lt;/p&gt;
&lt;p&gt;We were full of hope, however, because FontForge is supposed to be scriptable using Python. Unfortunately, it doesn't act like a real library that you install with &lt;tt&gt;pip install fontforge&lt;/tt&gt; or similar, you have to somehow invoke your Python script through FontForge, or something like that. It was too difficult for us. It also seemed as if for a font without any strikes (so, all vector TTFs), you couldn't create a first strike in Python. This might just be us misunderstanding it – either way, the interface was arcane at best. Luckily, there's also the scripting interface the author dryly refers to as &quot;&lt;a href=&quot;https://fontforge.org/docs/scripting/scripting.html&quot;&gt;a legacy language [the author] came up with&lt;/a&gt;&quot;. That sounds about obscure enough for a project like ours. It turns out that the functions available when scripting FontForge are very close similes of performing the actions manually in the UI. So we dutifully came up with a procedure for generating one font – glossing over some details:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Open the TTF file (e.g., Times New Roman from Windows 98)&lt;/li&gt;
&lt;li&gt;Create a bitmap strike at 16px&lt;/li&gt;
&lt;li&gt;Create bitmap strike at 5x desired pixel size (for a 16px font, strike at 80px) – FontForge automatically scales it up with nearest-neighbour interpolation&lt;/li&gt;
&lt;li&gt;Get rid of any vector information&lt;/li&gt;
&lt;li&gt;Invoke &quot;autotrace&quot; – in our case the potrace binary, which gives back vector information from input bitmap&lt;/li&gt;
&lt;li&gt;Save that result as a WOFF file (vector-based web-font, usable in modern browsers)&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Although that sounded easy, we soon hit some snags. For example, while the UI allowed us to resize strikes in FontForge, inside a script step 3 would cause a hard segfault. That was quite disappointing, to say the least. We tried everything we could think of, but couldn't work around that bug, and as we illustrated above, it was crucial for our pixellated fonts. Just when we thought we were defeated, another approach surfaced: instead of trying to do the heavy lifting in FontForge, why not wrap or modify potrace instead? It turns out that somebody out there &lt;a href=&quot;https://github.com/koemaeda/potrace-pixelperfect/&quot;&gt;has already done that&lt;/a&gt;. We quickly set to work trying to integrate that into our font pipeline, and finally got it to work! It was slow to run and arduous to figure out, but definitely did the job much better than us manually poking at the FontForge UI. The results were quite rough out of the box, though. We had to apply heaps of little fixes like removing mysterious artefacts from the 'space' characters, copying the asterisk into the position of the 'middle dot' to get nice password mask, among other things. But with many tries and lots of tweaking for speed and aesthetics, we ended up with the fonts you're looking at right now on this website (be sure to check out the &lt;a href=&quot;https://vistaserv.net/sitebuilder/wizard&quot;&gt;Home Page Builder Wizard®&lt;/a&gt; for more!). At least, assuming you have webfonts enabled and are using Chrome or Safari – we're still relying a bit on that deprecated font-smooth CSS property to make things pixel-perfect.&lt;/p&gt;
&lt;h2&gt;Further reading&lt;/h2&gt;
&lt;p&gt;If you want to learn more about fonts, here are a few links we found interesting:&lt;/p&gt;
&lt;hr/&gt;
</description>
<pubDate>Sun, 10 May 2020 00:48:19 +0000</pubDate>
<dc:creator>hmhhcycbtsc557</dc:creator>
<og:title>Convincing-looking 90s fonts in modern browsers – Vistaserv.net</og:title>
<og:description>The Vistaserv webmasters take you on a journey to create pixel-perfect renditions of vintage fonts on the modern web.</og:description>
<og:image>https://www.vistaserv.net/social_images/90s-fonts-modern-browsers.png</og:image>
<og:url>https://www.vistaserv.net/blog/90s-fonts-modern-browsers</og:url>
<dc:format>text/html</dc:format>
<dc:identifier>https://vistaserv.net/blog/90s-fonts-modern-browsers</dc:identifier>
</item>
<item>
<title>Julia library for fast machine learning</title>
<link>https://turing.ml/dev/</link>
<guid isPermaLink="true" >https://turing.ml/dev/</guid>
<description>&lt;p&gt;Turing provides Hamiltonian Monte Carlo sampling for differentiable posterior distributions, Particle MCMC sampling for complex posterior distributions involving discrete variables and stochastic control flow, and Gibbs sampling which combines particle MCMC, HMC and many other MCMC algorithms.&lt;/p&gt;

          </description>
<pubDate>Sun, 10 May 2020 00:19:17 +0000</pubDate>
<dc:creator>todsacerdoti</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://turing.ml/dev/</dc:identifier>
</item>
</channel>
</rss>