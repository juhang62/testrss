<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Never use a dependency that you could replace with an afternoon of programming</title>
<link>https://blog.carlmjohnson.net/post/2020/avoid-dependencies/</link>
<guid isPermaLink="true" >https://blog.carlmjohnson.net/post/2020/avoid-dependencies/</guid>
<description>&lt;blockquote readability=&quot;15&quot;&gt;
&lt;p&gt;In short, I think it’s become entirely too easy for people using certain programming languages to use libraries from the wide world of clowns that is the Internet. Their ecosystems make it very very easy to become reliant on this stuff. Trouble is, those libraries are frequently 💩. If something about it is broken, you might not be able to code around it, and may have to actually deal with them to get it fixed.&lt;/p&gt;
&lt;p&gt;Repeat 100 times, and now you have a real problem brewing.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;I have a simple rule: &lt;strong&gt;never use a dependency that you could replace with an afternoon of programming&lt;/strong&gt;.&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;No dependency is so self-explanatory that you will be able to get it working with less than a few hours of:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Searching online to see what solutions to the problem exist.&lt;/li&gt;
&lt;li&gt;Reading the docs to make sure it actually works for your problem.&lt;/li&gt;
&lt;li&gt;Reading the code to make sure it’s not complete 💩.&lt;/li&gt;
&lt;li&gt;Actually wiring it up in your dependency system.&lt;/li&gt;
&lt;li&gt;Figuring how to tell the dependency to solve your problem.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;If you spent that same amount of time writing your own tool:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;You’ll know exactly how it works and what its shortcomings are.&lt;/li&gt;
&lt;li&gt;You’ll have something that solves exactly your problem instead of a general problems, so it is certainly shorter and often faster.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Many times, the best approach is first searching online and reading the code to a few other solutions, then writing your own with the knowledge you’ve gained from seeing how they work.&lt;/p&gt;
&lt;p&gt;There is an argument that dependencies solve bugs so you don’t have to. This can be true, but it’s also true that a general solution will have many bugs that you don’t care about in your specific solution because it is much harder to write a general program than a specific one.&lt;/p&gt;
&lt;p&gt;The long and the short of it is that any code that can be written in less than an afternoon should be handled yourself.&lt;/p&gt;
&lt;p&gt;And don’t forget about this:&lt;/p&gt;
&lt;blockquote readability=&quot;15.664652567976&quot;&gt;
&lt;p&gt;There’s a predictable cycle in software ecosystems. Unix, Perl, Windows, Python, PHP/Wordpress… All have followed a pattern where first the standard library is great, then user libraries take off, then there’s DLL hell, finally it’s overrun by low quality user-made libraries.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://pic.twitter.com/oFs1ua61nq&quot;&gt;&lt;img src=&quot;https://blog.carlmjohnson.net/post/img/2020-dependencies.png&quot; alt=&quot;The dialectic of dependencies&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— Carl Johnson (&lt;a href=&quot;https://twitter.com/carlmjohnson&quot;&gt;@carlmjohnson&lt;/a&gt;) &lt;a href=&quot;https://twitter.com/carlmjohnson/status/982747054614220800&quot;&gt;April 7, 2018&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Tue, 11 Aug 2020 18:26:06 +0000</pubDate>
<dc:creator>earthboundkid</dc:creator>
<og:title>Tripping over the potholes in too many libraries</og:title>
<og:description>Never use a dependency that you could replace with an afternoon of programming.</og:description>
<og:type>article</og:type>
<og:url>https://blog.carlmjohnson.net/post/2020/avoid-dependencies/</og:url>
<og:image>https://blog.carlmjohnson.net/post/img/2020-rachel-by-the-bay.jpeg</og:image>
<dc:language>en-us</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.carlmjohnson.net/post/2020/avoid-dependencies/</dc:identifier>
</item>
<item>
<title>Bevy: A data-driven game engine and app framework built in Rust</title>
<link>https://bevyengine.org/news/introducing-bevy/</link>
<guid isPermaLink="true" >https://bevyengine.org/news/introducing-bevy/</guid>
<description>&lt;p&gt;After months of work, I am ecstatic to finally announce &lt;strong&gt;Bevy Engine&lt;/strong&gt;!&lt;/p&gt;
&lt;p&gt;Bevy is a refreshingly simple data-driven game engine and app framework built in Rust. It is &lt;a href=&quot;https://github.com/bevyengine/bevy&quot;&gt;free and open-source&lt;/a&gt; forever!&lt;/p&gt;
&lt;span id=&quot;continue-reading&quot;/&gt;
&lt;p&gt;It has the following design goals:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong class=&quot;fun-list&quot;&gt;Capable&lt;/strong&gt;: Offer a complete 2D and 3D feature set&lt;/li&gt;
&lt;li&gt;&lt;strong class=&quot;fun-list&quot;&gt;Simple&lt;/strong&gt;: Easy for newbies to pick up, but infinitely flexible for power users&lt;/li&gt;
&lt;li&gt;&lt;strong class=&quot;fun-list&quot;&gt;Data Focused&lt;/strong&gt;: Data-oriented architecture using the Entity Component System paradigm&lt;/li&gt;
&lt;li&gt;&lt;strong class=&quot;fun-list&quot;&gt;Modular&lt;/strong&gt;: Use only what you need. Replace what you don't like&lt;/li&gt;
&lt;li&gt;&lt;strong class=&quot;fun-list&quot;&gt;Fast&lt;/strong&gt;: App logic should run quickly, and when possible, in parallel&lt;/li&gt;
&lt;li&gt;&lt;strong class=&quot;fun-list&quot;&gt;Productive&lt;/strong&gt;: Changes should compile quickly ... waiting isn't fun&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Bevy has a number of features that I think set it apart from other engines:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong class=&quot;fun-list&quot;&gt;Bevy ECS&lt;/strong&gt;: A custom Entity Component System with unrivaled usability and blisteringly-fast performance&lt;/li&gt;
&lt;li&gt;&lt;strong class=&quot;fun-list&quot;&gt;Render Graphs&lt;/strong&gt;: Easily build your own multi-threaded render pipelines using Render Graph nodes&lt;/li&gt;
&lt;li&gt;&lt;strong class=&quot;fun-list&quot;&gt;Bevy UI&lt;/strong&gt;: A custom ECS-driven UI framework built specifically for Bevy&lt;/li&gt;
&lt;li&gt;&lt;strong class=&quot;fun-list&quot;&gt;Productive Compile Times&lt;/strong&gt;: Expect changes to compile in ~0.8-3.0 seconds with the &quot;fast compiles&quot; config&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;It also has many features most people expect from a modern, general purpose engine:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong class=&quot;fun-list&quot;&gt;Cross Platform&lt;/strong&gt;: Windows, MacOS, and Linux (with planned support for mobile and web)&lt;/li&gt;
&lt;li&gt;&lt;strong class=&quot;fun-list&quot;&gt;3D&lt;/strong&gt;: Lights, meshes, textures, MSAA, and GLTF loading&lt;/li&gt;
&lt;li&gt;&lt;strong class=&quot;fun-list&quot;&gt;Sprites&lt;/strong&gt;: Render individual images as sprites, render from sprite sheets, and dynamically generate new sprite sheets&lt;/li&gt;
&lt;li&gt;&lt;strong class=&quot;fun-list&quot;&gt;Assets&lt;/strong&gt;: An extensible, event driven asset system that loads assets asynchronously in background threads&lt;/li&gt;
&lt;li&gt;&lt;strong class=&quot;fun-list&quot;&gt;Scenes&lt;/strong&gt;: Save ECS Worlds to human-readable scene files and load scene files into ECS Worlds&lt;/li&gt;
&lt;li&gt;&lt;strong class=&quot;fun-list&quot;&gt;Plugins&lt;/strong&gt;: All engine and app features are implemented as modular plugins&lt;/li&gt;
&lt;li&gt;&lt;strong class=&quot;fun-list&quot;&gt;Sound&lt;/strong&gt;: Load audio files as assets and play them from within systems&lt;/li&gt;
&lt;li&gt;&lt;strong class=&quot;fun-list&quot;&gt;Multiple Render Backends&lt;/strong&gt;: Vulkan, DirectX 12, and Metal (with more on the way thanks to &lt;a href=&quot;https://github.com/gfx-rs/wgpu-rs&quot;&gt;wgpu&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class=&quot;fun-list&quot;&gt;Data Driven Shaders&lt;/strong&gt;: Easily bind ECS components directly to shader uniforms&lt;/li&gt;
&lt;li&gt;&lt;strong class=&quot;fun-list&quot;&gt;Hot Asset Reloading&lt;/strong&gt;: Automatically reload changes to assets at runtime without recompiles or restarts&lt;/li&gt;
&lt;li&gt;&lt;strong class=&quot;fun-list&quot;&gt;Events&lt;/strong&gt;: Efficiently consume and produce Events from within ECS systems&lt;/li&gt;
&lt;li&gt;&lt;strong class=&quot;fun-list&quot;&gt;Properties&lt;/strong&gt;: Dynamically get and set component fields using a string version of their names&lt;/li&gt;
&lt;li&gt;&lt;strong class=&quot;fun-list&quot;&gt;Hierarchical Transforms&lt;/strong&gt;: Create parent-child relationships between entities that propagate Transforms down the hierarchy&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;That being said, Bevy is still in the very early stages. I consider it to be in the &quot;prototyping&quot; phase: features are missing, APIs will change, and documentation is sparse. &lt;span class=&quot;warning&quot;&gt;I don't yet recommend using Bevy in serious projects unless you are willing to deal with gaps and instability&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Hopefully at this point you are either (1) jazzed about Bevy or (2) not reading anymore. If you want to dive in right now, &lt;a href=&quot;https://bevyengine.org/learn/book/introduction/&quot;&gt;The Bevy Book&lt;/a&gt; is the best place to get started. You can also keep reading to find out what the current state of Bevy is and where we'd like to take it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Quick note to the reader&lt;/strong&gt;: in this article you will find text formatted like this: &lt;a href=&quot;https://docs.rs/bevy_render/latest/bevy_render/texture/struct.Texture.html&quot;&gt;&lt;code&gt;Texture&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This formatting indicates that the text is a Rust type that links to API documentation. I encourage you to click on anything that seems interesting to you!&lt;/p&gt;
&lt;h2 id=&quot;bevy-apps&quot;&gt;Bevy Apps&lt;/h2&gt;
&lt;p&gt;First, lets see what a Bevy App actually looks like. The simplest App looks like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span&gt;use &lt;/span&gt;&lt;span&gt;bevy&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;prelude&lt;/span&gt;&lt;span&gt;::*;

&lt;/span&gt;&lt;span&gt;fn &lt;/span&gt;&lt;span&gt;main&lt;/span&gt;&lt;span&gt;() {
    &lt;/span&gt;&lt;span&gt;App&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;().&lt;/span&gt;&lt;span&gt;run&lt;/span&gt;&lt;span&gt;();
}
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Thats it! This App pulls in no features and literally does nothing. Running the program would just immediately terminate. We can make it a little more interesting by doing this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span&gt;fn &lt;/span&gt;&lt;span&gt;main&lt;/span&gt;&lt;span&gt;() {
    &lt;/span&gt;&lt;span&gt;App&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;()
        .&lt;/span&gt;&lt;span&gt;add_default_plugins&lt;/span&gt;&lt;span&gt;()
        .&lt;/span&gt;&lt;span&gt;run&lt;/span&gt;&lt;span&gt;();
}
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.rs/bevy/latest/bevy/trait.AddDefaultPlugins.html#method.add_default_plugins&quot;&gt;&lt;code&gt;add_default_plugins()&lt;/code&gt;&lt;/a&gt; adds all of the features you probably expect from a game engine: a 2D / 3D renderer, asset loading, a UI system, windows, input, etc&lt;/p&gt;
&lt;p&gt;You can also register the default &lt;a href=&quot;https://docs.rs/bevy_app/latest/bevy_app/trait.Plugin.html&quot;&gt;&lt;code&gt;Plugins&lt;/code&gt;&lt;/a&gt; manually like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span&gt;fn &lt;/span&gt;&lt;span&gt;main&lt;/span&gt;&lt;span&gt;() {
    &lt;/span&gt;&lt;span&gt;App&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;()
        .&lt;/span&gt;&lt;span&gt;add_plugin&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;CorePlugin&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;())
        .&lt;/span&gt;&lt;span&gt;add_plugin&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;InputPlugin&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;())
        .&lt;/span&gt;&lt;span&gt;add_plugin&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;WindowPlugin&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;())
        .&lt;/span&gt;&lt;span&gt;add_plugin&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;RenderPlugin&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;())
        .&lt;/span&gt;&lt;span&gt;add_plugin&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;UiPlugin&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;())
        &lt;/span&gt;&lt;span&gt;/* more plugins here ... omitted for brevity */
        &lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;run&lt;/span&gt;&lt;span&gt;();
}
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And of course you can also create your own plugins. In fact, all engine and game logic is built using plugins. Hopefully now you understand what we mean by modular: you are free to add/remove plugins based on your project's unique needs. However I expect that most people will stick to &lt;a href=&quot;https://docs.rs/bevy/latest/bevy/trait.AddDefaultPlugins.html#method.add_default_plugins&quot;&gt;&lt;code&gt;add_default_plugins()&lt;/code&gt;&lt;/a&gt; for simplicity, at least initially.&lt;/p&gt;
&lt;h2 id=&quot;bevy-ecs&quot;&gt;Bevy ECS&lt;/h2&gt;
&lt;p&gt;All Bevy engine and game logic is built on top of a custom &lt;a href=&quot;https://en.wikipedia.org/wiki/Entity_component_system&quot;&gt;Entity Component System&lt;/a&gt; (or ECS for short). Entity Component Systems are a software paradigm that involves breaking data up into Components. Entities are unique ids assigned to groups of Components. For example, one entity might might have a &lt;code&gt;Position&lt;/code&gt; and &lt;code&gt;Velocity&lt;/code&gt; component, whereas another entity might have a &lt;code&gt;Position&lt;/code&gt; and &lt;code&gt;UI&lt;/code&gt; component. Systems are logic that runs on a specific set of component types. You might have a &lt;code&gt;movement&lt;/code&gt; system that runs on all entities with a &lt;code&gt;Position&lt;/code&gt; and &lt;code&gt;Velocity&lt;/code&gt; component.&lt;/p&gt;
&lt;p&gt;The ECS pattern encourages clean, decoupled designs by forcing you to break up your app data and logic into its core components.&lt;/p&gt;
&lt;p&gt;Unlike other Rust ECS implementations, which require complex lifetimes, traits, builder patterns, or macros, Bevy ECS uses normal Rust datatypes for all of these concepts:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong class=&quot;fun-list&quot;&gt;Components&lt;/strong&gt;: normal Rust structs&lt;/li&gt;
&lt;li&gt;&lt;strong class=&quot;fun-list&quot;&gt;Systems&lt;/strong&gt;: normal Rust functions&lt;/li&gt;
&lt;li&gt;&lt;strong class=&quot;fun-list&quot;&gt;Entities&lt;/strong&gt;: a type containing a unique integer&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;There are already plenty of &lt;a href=&quot;https://www.youtube.com/watch?v=2rW7ALyHaas&quot;&gt;great introductions&lt;/a&gt; to the ECS paradigm, so I'll leave &quot;getting up to speed on ECS&quot; as an exercise for the reader and skip right to what makes Bevy's ECS so special:&lt;/p&gt;
&lt;h3 id=&quot;ergonomics&quot;&gt;Ergonomics&lt;/h3&gt;
&lt;p&gt;I'm going to make a wild (and unverifiable) claim here: Bevy ECS is the most ergonomic ECS &lt;em&gt;in existence&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span&gt;use &lt;/span&gt;&lt;span&gt;bevy&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;prelude&lt;/span&gt;&lt;span&gt;::*;

&lt;/span&gt;&lt;span&gt;struct &lt;/span&gt;&lt;span&gt;Velocity&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;f32&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;struct &lt;/span&gt;&lt;span&gt;Position&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;f32&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;// this system spawns entities with the Position and Velocity components
&lt;/span&gt;&lt;span&gt;fn &lt;/span&gt;&lt;span&gt;setup&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;mut &lt;/span&gt;&lt;span&gt;commands&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; Commands&lt;/span&gt;&lt;span&gt;) {&lt;/span&gt;&lt;span&gt;
    commands
        &lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;spawn&lt;/span&gt;&lt;span&gt;((&lt;/span&gt;&lt;span&gt;Position&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;0.0&lt;/span&gt;&lt;span&gt;),&lt;/span&gt;&lt;span&gt; Velocity&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;),))
        .&lt;/span&gt;&lt;span&gt;spawn&lt;/span&gt;&lt;span&gt;((&lt;/span&gt;&lt;span&gt;Position&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;),&lt;/span&gt;&lt;span&gt; Velocity&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;2.0&lt;/span&gt;&lt;span&gt;),));
}

&lt;/span&gt;&lt;span&gt;// this system runs on each entity with a Position and Velocity component
&lt;/span&gt;&lt;span&gt;fn &lt;/span&gt;&lt;span&gt;movement&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;position&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;Mut&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Position&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;velocity&lt;/span&gt;&lt;span&gt;: &amp;amp;&lt;/span&gt;&lt;span&gt;Velocity&lt;/span&gt;&lt;span&gt;) {&lt;/span&gt;&lt;span&gt;
    position&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;0 &lt;/span&gt;&lt;span&gt;+=&lt;/span&gt;&lt;span&gt; velocity&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
}

&lt;/span&gt;&lt;span&gt;// the app entry point. hopefully you recognize it from the examples above!
&lt;/span&gt;&lt;span&gt;fn &lt;/span&gt;&lt;span&gt;main&lt;/span&gt;&lt;span&gt;() {
    &lt;/span&gt;&lt;span&gt;App&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;()
        .&lt;/span&gt;&lt;span&gt;add_startup_system&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;setup&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;system&lt;/span&gt;&lt;span&gt;())
        .&lt;/span&gt;&lt;span&gt;add_system&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;movement&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;system&lt;/span&gt;&lt;span&gt;())
        .&lt;/span&gt;&lt;span&gt;run&lt;/span&gt;&lt;span&gt;();
}
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;That is a complete self-contained Bevy app with automatic parallel system scheduling and global change detection. In my opinion, you &lt;a href=&quot;https://github.com/amethyst/specs/blob/master/examples/basic.rs&quot;&gt;won't&lt;/a&gt; find &lt;a href=&quot;https://github.com/TomGillen/legion&quot;&gt;any&lt;/a&gt; ECS &lt;a href=&quot;https://github.com/leudz/shipyard/blob/master/bunny_demo/src/systems.rs&quot;&gt;with&lt;/a&gt; better &lt;a href=&quot;https://github.com/Unity-Technologies/EntityComponentSystemSamples/tree/master/ECSSamples/Assets/HelloCube&quot;&gt;clarity&lt;/a&gt; or ergonomics. Building games (and engines) involves writing a large number of systems, so I heavily invested in making ECS code easy to write &lt;em&gt;and&lt;/em&gt; easy to read.&lt;/p&gt;
&lt;h3 id=&quot;performance&quot;&gt;Performance&lt;/h3&gt;
&lt;p&gt;One of the reasons the ECS paradigm is so popular is that it has the potential to make game logic &lt;em&gt;super&lt;/em&gt; fast, primarily for these two reasons:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;strong class=&quot;fun-list&quot;&gt;Iteration Speed&lt;/strong&gt;: Components are packed tightly together to optimize for cache-locality, which makes iterating over them blazing fast&lt;/li&gt;
&lt;li&gt;&lt;strong class=&quot;fun-list&quot;&gt;Parallelism&lt;/strong&gt;: Systems declare read/write dependencies, which enables automatic and efficient lock-free parallel scheduling&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Bevy ECS does both of these things about as well as it can. According to the popular &lt;code&gt;ecs_bench&lt;/code&gt; benchmark, Bevy ECS is the fastest Rust ECS by a pretty wide margin:&lt;/p&gt;
&lt;h4 id=&quot;system-iteration-in-nanoseconds-less-is-better&quot;&gt;System Iteration (in nanoseconds, less is better)&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://bevyengine.org/news/introducing-bevy/ecs_iter.svg&quot; alt=&quot;ecs iter performance graph&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;world-setup-in-nanoseconds-less-is-better&quot;&gt;World Setup (in nanoseconds, less is better)&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://bevyengine.org/news/introducing-bevy/ecs_build.svg&quot; alt=&quot;ecs iter performance graph&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Note that &lt;code&gt;ecs_bench&lt;/code&gt; is a single threaded benchmark, so it doesn't illustrate the multi-threading capabilities of these framework. And as always, please be aware that &lt;code&gt;ecs_bench&lt;/code&gt; is a micro benchmark and it doesn't illustrate the performance of a complex game. There is a lot of nuance in the ECS performance space and each of the ECS implementations above will perform differently under different workloads.&lt;/p&gt;
&lt;p&gt;I have pushed my version of &lt;code&gt;ecs_bench&lt;/code&gt; &lt;a href=&quot;https://github.com/cart/ecs_bench&quot;&gt;here&lt;/a&gt; if anyone wants to double-check my methodology. For some reasonable amount of time I will post updates here if anyone reports a problem or my results are not (on average) reproducible.&lt;/p&gt;
&lt;h3 id=&quot;features&quot;&gt;Features&lt;/h3&gt;
&lt;p&gt;Now you might be thinking &quot;Ok @cart, so Bevy ECS has great performance and ergonomics, but &lt;em&gt;surely&lt;/em&gt; this means you had to compromise on features!&quot;&lt;/p&gt;
&lt;p&gt;... &lt;strong&gt;NOPE&lt;/strong&gt; Bevy has you covered:&lt;/p&gt;
&lt;h4 id=&quot;for-each-systems&quot;&gt;For Each Systems&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span&gt;// &quot;for each systems&quot; run once on each entity containing the given components
&lt;/span&gt;&lt;span&gt;fn &lt;/span&gt;&lt;span&gt;system&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;position&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;Mut&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Position&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;velocity&lt;/span&gt;&lt;span&gt;: &amp;amp;&lt;/span&gt;&lt;span&gt;Velocity&lt;/span&gt;&lt;span&gt;) {
    &lt;/span&gt;&lt;span&gt;// do something
&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;query-systems&quot;&gt;Query Systems&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span&gt;// this &quot;query system&quot; is the same as the system above, but gives you control over iteration
&lt;/span&gt;&lt;span&gt;fn &lt;/span&gt;&lt;span&gt;system&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;mut &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;Query&lt;/span&gt;&lt;span&gt;&amp;lt;(&amp;amp;&lt;/span&gt;&lt;span&gt;Position, &lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;mut&lt;/span&gt;&lt;span&gt; Velocity&lt;/span&gt;&lt;span&gt;)&amp;gt;) {
    &lt;/span&gt;&lt;span&gt;for &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;position&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;mut&lt;/span&gt;&lt;span&gt; velocity&lt;/span&gt;&lt;span&gt;) in &amp;amp;&lt;/span&gt;&lt;span&gt;mut&lt;/span&gt;&lt;span&gt; query&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;iter&lt;/span&gt;&lt;span&gt;() {
        &lt;/span&gt;&lt;span&gt;// do something
    &lt;/span&gt;&lt;span&gt;}
}
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;change-detection&quot;&gt;Change Detection&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span&gt;// Added&amp;lt;T&amp;gt; queries only run when the given component has been added
&lt;/span&gt;&lt;span&gt;fn &lt;/span&gt;&lt;span&gt;system&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;mut &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;Query&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Added&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Position&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;gt;) {
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; position &lt;/span&gt;&lt;span&gt;in &amp;amp;&lt;/span&gt;&lt;span&gt;mut&lt;/span&gt;&lt;span&gt; query&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;iter&lt;/span&gt;&lt;span&gt;() {
        &lt;/span&gt;&lt;span&gt;// do something
    &lt;/span&gt;&lt;span&gt;}
}

&lt;/span&gt;&lt;span&gt;// Mutated&amp;lt;T&amp;gt; queries only run when the given component has been mutated
&lt;/span&gt;&lt;span&gt;fn &lt;/span&gt;&lt;span&gt;system&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;mut &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;Query&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Mutated&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Position&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;gt;) {
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; position &lt;/span&gt;&lt;span&gt;in &amp;amp;&lt;/span&gt;&lt;span&gt;mut&lt;/span&gt;&lt;span&gt; query&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;iter&lt;/span&gt;&lt;span&gt;() {
        &lt;/span&gt;&lt;span&gt;// do something
    &lt;/span&gt;&lt;span&gt;}
}

&lt;/span&gt;&lt;span&gt;// Changed&amp;lt;T&amp;gt; queries only run when the given component has been added or mutated
&lt;/span&gt;&lt;span&gt;fn &lt;/span&gt;&lt;span&gt;system&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;mut &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;Query&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Changed&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Position&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;gt;) {
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; position &lt;/span&gt;&lt;span&gt;in &amp;amp;&lt;/span&gt;&lt;span&gt;mut&lt;/span&gt;&lt;span&gt; query&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;iter&lt;/span&gt;&lt;span&gt;() {
        &lt;/span&gt;&lt;span&gt;// do something
    &lt;/span&gt;&lt;span&gt;}
}

&lt;/span&gt;&lt;span&gt;// query.removed&amp;lt;T&amp;gt;() will iterate over every entity where the component T was removed this update
&lt;/span&gt;&lt;span&gt;fn &lt;/span&gt;&lt;span&gt;system&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;mut &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;Query&lt;/span&gt;&lt;span&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span&gt;Position&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;) {
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; entity &lt;/span&gt;&lt;span&gt;in&lt;/span&gt;&lt;span&gt; query&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;removed&lt;/span&gt;&lt;span&gt;::&amp;lt;&lt;/span&gt;&lt;span&gt;Velocity&lt;/span&gt;&lt;span&gt;&amp;gt;() {
        &lt;/span&gt;&lt;span&gt;// do something
    &lt;/span&gt;&lt;span&gt;}
}
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;multiple-queries&quot;&gt;Multiple Queries&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span&gt;fn &lt;/span&gt;&lt;span&gt;system&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;mut &lt;/span&gt;&lt;span&gt;wall_query&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;Query&lt;/span&gt;&lt;span&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span&gt;Wall&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;mut &lt;/span&gt;&lt;span&gt;player_query&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;Query&lt;/span&gt;&lt;span&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span&gt;Player&lt;/span&gt;&lt;span&gt;&amp;gt;) {
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; player &lt;/span&gt;&lt;span&gt;in &amp;amp;&lt;/span&gt;&lt;span&gt;mut&lt;/span&gt;&lt;span&gt; player_query&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;iter&lt;/span&gt;&lt;span&gt;() {
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; wall &lt;/span&gt;&lt;span&gt;in &amp;amp;&lt;/span&gt;&lt;span&gt;mut&lt;/span&gt;&lt;span&gt; wall_query&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;iter&lt;/span&gt;&lt;span&gt;() {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; player&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;collides_with&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;wall&lt;/span&gt;&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;println!&lt;/span&gt;&lt;span&gt;(&quot;&lt;/span&gt;&lt;span&gt;ouch&lt;/span&gt;&lt;span&gt;&quot;);
            }
        }
    }
}
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;entity-queries-and-direct-component-access&quot;&gt;Entity Queries and Direct Component Access&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span&gt;fn &lt;/span&gt;&lt;span&gt;system&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;mut &lt;/span&gt;&lt;span&gt;entity_query&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;Query&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Entity&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;mut &lt;/span&gt;&lt;span&gt;player_query&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;Query&lt;/span&gt;&lt;span&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span&gt;Player&lt;/span&gt;&lt;span&gt;&amp;gt;) {
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; entity &lt;/span&gt;&lt;span&gt;in &amp;amp;&lt;/span&gt;&lt;span&gt;mut&lt;/span&gt;&lt;span&gt; entity_query&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;iter&lt;/span&gt;&lt;span&gt;() {
       &lt;/span&gt;&lt;span&gt;if let &lt;/span&gt;&lt;span&gt;Some&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;player&lt;/span&gt;&lt;span&gt;) =&lt;/span&gt;&lt;span&gt; player_query&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;::&amp;lt;&lt;/span&gt;&lt;span&gt;Player&lt;/span&gt;&lt;span&gt;&amp;gt;(&lt;/span&gt;&lt;span&gt;entity&lt;/span&gt;&lt;span&gt;) {
           &lt;/span&gt;&lt;span&gt;// the current entity has a player component
       &lt;/span&gt;&lt;span&gt;}
    }
}
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;resources&quot;&gt;Resources&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span&gt;// Res and ResMut access global resources 
&lt;/span&gt;&lt;span&gt;fn &lt;/span&gt;&lt;span&gt;system&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;time&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;Res&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Time&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;score&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;ResMut&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Score&lt;/span&gt;&lt;span&gt;&amp;gt;) {
    &lt;/span&gt;&lt;span&gt;// do something
&lt;/span&gt;&lt;span&gt;}

&lt;/span&gt;&lt;span&gt;// you can use Resources in any system type
&lt;/span&gt;&lt;span&gt;fn &lt;/span&gt;&lt;span&gt;system&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;time&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;Res&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Time&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;mut &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;Query&lt;/span&gt;&lt;span&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span&gt;Position&lt;/span&gt;&lt;span&gt;&amp;gt;) {
    &lt;/span&gt;&lt;span&gt;// do something
&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;fn &lt;/span&gt;&lt;span&gt;system&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;time&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;Res&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Time&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;Position&lt;/span&gt;&lt;span&gt;) {
    &lt;/span&gt;&lt;span&gt;// do something
&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;local-system-resources&quot;&gt;&quot;Local&quot; System Resources&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span&gt;// Local&amp;lt;T&amp;gt; resources are unique per-system. Two instances of the same system will each have their own resource. Local resources are automatically initialized to their default value.
&lt;/span&gt;&lt;span&gt;fn &lt;/span&gt;&lt;span&gt;system&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;state&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;Local&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;State&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;Position&lt;/span&gt;&lt;span&gt;) {
    &lt;/span&gt;&lt;span&gt;// do something
&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;empty-systems&quot;&gt;Empty Systems&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span&gt;// for the hyper-minimalists
&lt;/span&gt;&lt;span&gt;fn &lt;/span&gt;&lt;span&gt;system&lt;/span&gt;&lt;span&gt;() {
    &lt;/span&gt;&lt;span&gt;// do something
&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;with-without-filters&quot;&gt;With/Without Filters&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span&gt;// only runs on entities With or Without a given component
&lt;/span&gt;&lt;span&gt;fn &lt;/span&gt;&lt;span&gt;system&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;mut &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;Query&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Without&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Parent, &lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;Position&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;gt;) {
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; position &lt;/span&gt;&lt;span&gt;in &amp;amp;&lt;/span&gt;&lt;span&gt;mut&lt;/span&gt;&lt;span&gt; query&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;iter&lt;/span&gt;&lt;span&gt;() {
        &lt;/span&gt;&lt;span&gt;// do something
    &lt;/span&gt;&lt;span&gt;}
}
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;thread-local-systems&quot;&gt;Thread-Local Systems&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span&gt;// systems that must run on the main thread with exclusive access to World and Resources
&lt;/span&gt;&lt;span&gt;fn &lt;/span&gt;&lt;span&gt;system&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;world&lt;/span&gt;&lt;span&gt;: &amp;amp;&lt;/span&gt;&lt;span&gt;mut&lt;/span&gt;&lt;span&gt; World, &lt;/span&gt;&lt;span&gt;resources&lt;/span&gt;&lt;span&gt;: &amp;amp;&lt;/span&gt;&lt;span&gt;mut&lt;/span&gt;&lt;span&gt; Resources&lt;/span&gt;&lt;span&gt;) {
    &lt;/span&gt;&lt;span&gt;// do something
&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;stages&quot;&gt;Stages&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span&gt;// the scheduler provides Stages as a way to run sets of systems in order  
&lt;/span&gt;&lt;span&gt;fn &lt;/span&gt;&lt;span&gt;main&lt;/span&gt;&lt;span&gt;() {
    &lt;/span&gt;&lt;span&gt;App&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;()
        &lt;/span&gt;&lt;span&gt;// adds a system to the default stage: &quot;update&quot; 
        &lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;add_system&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;movement&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;system&lt;/span&gt;&lt;span&gt;())
        &lt;/span&gt;&lt;span&gt;// creates a new stage after &quot;update&quot;
        &lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;add_stage_after&lt;/span&gt;&lt;span&gt;(&quot;&lt;/span&gt;&lt;span&gt;update&lt;/span&gt;&lt;span&gt;&quot;, &quot;&lt;/span&gt;&lt;span&gt;do_things&lt;/span&gt;&lt;span&gt;&quot;)
        .&lt;/span&gt;&lt;span&gt;add_system_to_stage&lt;/span&gt;&lt;span&gt;(&quot;&lt;/span&gt;&lt;span&gt;do_things&lt;/span&gt;&lt;span&gt;&quot;,&lt;/span&gt;&lt;span&gt; something&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;system&lt;/span&gt;&lt;span&gt;())
}
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;commands&quot;&gt;Commands&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span&gt;// use Commands to queue up World and Resource changes, which will be applied at the end of the current Stage
&lt;/span&gt;&lt;span&gt;fn &lt;/span&gt;&lt;span&gt;system&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;mut &lt;/span&gt;&lt;span&gt;commands&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; Commands&lt;/span&gt;&lt;span&gt;) {&lt;/span&gt;&lt;span&gt;
    commands&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;spawn&lt;/span&gt;&lt;span&gt;((&lt;/span&gt;&lt;span&gt;Position&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;0.0&lt;/span&gt;&lt;span&gt;),&lt;/span&gt;&lt;span&gt; Velocity&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;)));
}

&lt;/span&gt;&lt;span&gt;// Commands can also be used alongside other types
&lt;/span&gt;&lt;span&gt;fn &lt;/span&gt;&lt;span&gt;system&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;mut &lt;/span&gt;&lt;span&gt;commands&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; Commands, &lt;/span&gt;&lt;span&gt;time&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;Res&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Time&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;mut &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;Query&lt;/span&gt;&lt;span&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span&gt;Position&lt;/span&gt;&lt;span&gt;&amp;gt;) {
    &lt;/span&gt;&lt;span&gt;// do something
&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;how-do-function-systems-work&quot;&gt;How Do Function Systems Work?&lt;/h3&gt;
&lt;p&gt;Being able to use Rust functions directly as systems might feel like magic, but I promise it's not! You may have noticed that we do this when registering systems in our App:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span&gt;fn &lt;/span&gt;&lt;span&gt;some_system&lt;/span&gt;&lt;span&gt;() { }

&lt;/span&gt;&lt;span&gt;fn &lt;/span&gt;&lt;span&gt;main&lt;/span&gt;&lt;span&gt;() {
    &lt;/span&gt;&lt;span&gt;App&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;()
        .&lt;/span&gt;&lt;span&gt;add_system&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;some_system&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;system&lt;/span&gt;&lt;span&gt;())
        .&lt;/span&gt;&lt;span&gt;run&lt;/span&gt;&lt;span&gt;();
}
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;.system()&lt;/code&gt; call takes the &lt;code&gt;some_system&lt;/code&gt; function pointer and converts it to a &lt;code&gt;Box&amp;lt;dyn System&amp;gt;&lt;/code&gt;. This works because we implement the &lt;a href=&quot;https://docs.rs/bevy_ecs/latest/bevy_ecs/trait.IntoQuerySystem.html&quot;&gt;&lt;code&gt;IntoQuerySystem&lt;/code&gt;&lt;/a&gt; trait for all functions that match a certain set of function signatures.&lt;/p&gt;
&lt;h3 id=&quot;good-bones&quot;&gt;Good Bones&lt;/h3&gt;
&lt;p&gt;Bevy ECS actually uses a heavily forked version of the minimalist &lt;a href=&quot;https://github.com/Ralith/hecs&quot;&gt;Hecs ECS&lt;/a&gt;. Hecs is an efficient single-threaded archetypal ECS. It provides the core &lt;a href=&quot;https://docs.rs/bevy_ecs/latest/bevy_ecs/struct.World.html&quot;&gt;&lt;code&gt;World&lt;/code&gt;&lt;/a&gt; , &lt;a href=&quot;https://docs.rs/bevy_ecs/latest/bevy_ecs/struct.Archetype.html&quot;&gt;&lt;code&gt;Archetype&lt;/code&gt;&lt;/a&gt; , and internal &lt;a href=&quot;https://docs.rs/bevy_ecs/latest/bevy_ecs/trait.Query.html&quot;&gt;&lt;code&gt;Query&lt;/code&gt;&lt;/a&gt; data structures. Bevy ECS adds the following on top:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong class=&quot;fun-list&quot;&gt;Function Systems&lt;/strong&gt;: Hecs actually has no concept of a &quot;system&quot; at all. You just run queries directly on the World. Bevy adds the ability to define portable, schedulable systems using normal Rust functions.&lt;/li&gt;
&lt;li&gt;&lt;strong class=&quot;fun-list&quot;&gt;Resources&lt;/strong&gt;: Hecs has no concept of unique/global data. When building games, this is often needed. Bevy adds a &lt;code&gt;Resource&lt;/code&gt; collection and resource queries&lt;/li&gt;
&lt;li&gt;&lt;strong class=&quot;fun-list&quot;&gt;Parallel Scheduler&lt;/strong&gt;: Hecs is single threaded, but it was designed to allow parallel schedulers to be built on top. Bevy ECS adds a custom dependency-aware scheduler that builds on top of the &quot;Function Systems&quot; mentioned above.&lt;/li&gt;
&lt;li&gt;&lt;strong class=&quot;fun-list&quot;&gt;Optimization&lt;/strong&gt;: Hecs is already plenty fast, but by modifying some of its internal data access patterns, we were able to improve performance significantly. This moved it from &quot;fast enough&quot; to &quot;the fastest&quot; (see the benchmark above to compare Bevy ECS to vanilla Hecs).&lt;/li&gt;
&lt;li&gt;&lt;strong class=&quot;fun-list&quot;&gt;Query Wrappers&lt;/strong&gt;: The &lt;code&gt;Query&lt;/code&gt; Bevy ECS exports is actually a wrapper around Hecs Queries. It provides safe, scoped access to the &lt;code&gt;World&lt;/code&gt; in a multi-threaded context and improves the ergonomics of iteration.&lt;/li&gt;
&lt;li&gt;&lt;strong class=&quot;fun-list&quot;&gt;Change Detection&lt;/strong&gt;: Automatically (and efficiently) tracks component add/remove/update operations and exposes them in the Query interface.&lt;/li&gt;
&lt;li&gt;&lt;strong class=&quot;fun-list&quot;&gt;Stable Entity IDs&lt;/strong&gt;: Almost every ECS (including Hecs) uses unstable entity ids that cannot be used for serialization (scenes / save files) or networking. In Bevy ECS, entity ids are globally unique and stable. You can use them in any context!&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;In the near future I will file an issue on the Hecs git repo offering to upstream whatever changes they want from Bevy ECS. I have a feeling they won't want the &quot;high level&quot; stuff like function systems and parallel scheduling, but I guess we'll see!&lt;/p&gt;
&lt;h2 id=&quot;bevy-ui&quot;&gt;Bevy UI&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://bevyengine.org/news/introducing-bevy/bevy_ui.png&quot; alt=&quot;bevy ui&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Bevy has a custom, but familiar UI system based on the &quot;flex box&quot; model. Well... semi-custom, but more on that later. In the beginning, I heavily considered using &lt;a href=&quot;https://github.com/hecrj/iced&quot;&gt;one&lt;/a&gt; of the &lt;a href=&quot;https://github.com/emilk/emigui/&quot;&gt;many&lt;/a&gt; great &lt;a href=&quot;https://github.com/linebender/druid&quot;&gt;pre-made&lt;/a&gt; UI solutions in the Rust ecosystem. But each of these frameworks felt in some way &quot;separate&quot; from the data-driven ECS approach at the core of Bevy. If we took a framework like &lt;a href=&quot;https://github.com/linebender/druid&quot;&gt;Druid&lt;/a&gt;, which is top-of-its class in terms of design, and then shoe-horned it into the Bevy data / event model, that would &lt;em&gt;compromise&lt;/em&gt; the Druid design and Bevy+Druid would end up being less compelling than just using Druid as a standalone framework.&lt;/p&gt;
&lt;p&gt;I decided that the only way Bevy could even &lt;em&gt;hope&lt;/em&gt; to bring something compelling to the table was to fully embrace the Bevy way of doing things.&lt;/p&gt;
&lt;p&gt;Bevy UI directly uses the existing ECS, hierarchy, transform, event, asset, and scene systems at the core of Bevy. Because of this, Bevy UI automatically gets features like hot-reloading of UI scene files, async texture loading, and change detection. A shared architecture means that improvements to any of these systems feed directly into Bevy UI. I am not yet convinced that this approach will produce the best UI framework, but I &lt;em&gt;am&lt;/em&gt; convinced that it will produce the best UI framework in the context of a Bevy App.&lt;/p&gt;
&lt;p&gt;We are still in the experimental stages and I expect some things to change, but the patterns we've found so far are very promising. Also keep in mind that currently the best way to compose Bevy UIs is with code, but we are in the process of designing a new file format for scenes that should make declarative, file based UI composition much nicer than it currently is.&lt;/p&gt;
&lt;h3 id=&quot;building-blocks&quot;&gt;Building Blocks&lt;/h3&gt;
&lt;p&gt;In Bevy, a UI element is just an ECS Entity with a &lt;a href=&quot;https://docs.rs/bevy_ui/latest/bevy_ui/struct.Node.html&quot;&gt;&lt;code&gt;Node&lt;/code&gt;&lt;/a&gt; component. Nodes are rectangles with a width and height, and are positioned using the same &lt;a href=&quot;https://docs.rs/bevy_transform/latest/bevy_transform/components/struct.Transform.html&quot;&gt;&lt;code&gt;Transform&lt;/code&gt;&lt;/a&gt; component used elsewhere in Bevy. The &lt;a href=&quot;https://docs.rs/bevy_ui/latest/bevy_ui/struct.Style.html&quot;&gt;&lt;code&gt;Style&lt;/code&gt;&lt;/a&gt; component is used to determine how the Node is rendered, sized, and positioned.&lt;/p&gt;
&lt;p&gt;The easiest way to add a new node (with all of the required components) is like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span&gt;commands&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;spawn&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;NodeComponents&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;())
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.rs/bevy_ui/latest/bevy_ui/entity/struct.NodeComponents.html&quot;&gt;&lt;code&gt;NodeComponents&lt;/code&gt;&lt;/a&gt; is a &quot;component bundle&quot;, which Bevy uses to make spawning entities of various &quot;types&quot; easier.&lt;/p&gt;
&lt;h3 id=&quot;layout&quot;&gt;Layout&lt;/h3&gt;
&lt;p&gt;For layout, Bevy uses a fantastic 100% Rust flexbox implementation called &lt;a href=&quot;https://github.com/vislyhq/stretch&quot;&gt;Stretch&lt;/a&gt;. Stretch provides the algorithms for positioning rectangles in 2D space according to the flexbox spec. Bevy exposes flex properties inside the &lt;a href=&quot;https://docs.rs/bevy_ui/latest/bevy_ui/struct.Style.html&quot;&gt;&lt;code&gt;Style&lt;/code&gt;&lt;/a&gt; component mentioned above and renders rectangles with the positions and sizes that Stretch outputs. Bevy uses its own z-layering algorithm to &quot;stack&quot; elements on top of each other, but its basically the same one that HTML/CSS uses.&lt;/p&gt;
&lt;h3 id=&quot;relative-positioning&quot;&gt;Relative Positioning&lt;/h3&gt;
&lt;p&gt;Nodes are positioned relative to each other by default:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://bevyengine.org/news/introducing-bevy/relative_position.png&quot; alt=&quot;relative positioning&quot;/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span&gt;commands
    &lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;spawn&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;NodeComponents &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
        style&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; Style &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            size&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;Size&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Val&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;Px&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;100.0&lt;/span&gt;&lt;span&gt;), &lt;/span&gt;&lt;span&gt;Val&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;Px&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;100.0&lt;/span&gt;&lt;span&gt;)),
            ..&lt;/span&gt;&lt;span&gt;Default&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;()
        },&lt;/span&gt;&lt;span&gt;
        material&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; materials&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;add&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Color&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;rgb&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;0.08&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;0.08&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;).&lt;/span&gt;&lt;span&gt;into&lt;/span&gt;&lt;span&gt;()),
        ..&lt;/span&gt;&lt;span&gt;Default&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;()
    })
    .&lt;/span&gt;&lt;span&gt;spawn&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;NodeComponents &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
        style&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; Style &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            size&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;Size&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Val&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;Percent&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;40.0&lt;/span&gt;&lt;span&gt;), &lt;/span&gt;&lt;span&gt;Val&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;Percent&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;40.0&lt;/span&gt;&lt;span&gt;)),
            ..&lt;/span&gt;&lt;span&gt;Default&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;()
        },&lt;/span&gt;&lt;span&gt;
        material&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; materials&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;add&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Color&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;rgb&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;0.08&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;0.08&lt;/span&gt;&lt;span&gt;).&lt;/span&gt;&lt;span&gt;into&lt;/span&gt;&lt;span&gt;()),
        ..&lt;/span&gt;&lt;span&gt;Default&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;()
    });
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;absolute-positioning&quot;&gt;Absolute Positioning&lt;/h3&gt;
&lt;p&gt;You can &quot;absolutely&quot; position a Node relative to its parent's corners like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://bevyengine.org/news/introducing-bevy/absolute_positioning.png&quot; alt=&quot;absolute positioning&quot;/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span&gt;commands
    &lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;spawn&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;NodeComponents &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
        style&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; Style &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            size&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;Size&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Val&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;Percent&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;40.0&lt;/span&gt;&lt;span&gt;), &lt;/span&gt;&lt;span&gt;Val&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;Percent&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;40.0&lt;/span&gt;&lt;span&gt;)),&lt;/span&gt;&lt;span&gt;
            position_type&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;PositionType&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;Absolute&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;
            position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; Rect &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                top&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;Val&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;Px&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;10.0&lt;/span&gt;&lt;span&gt;),&lt;/span&gt;&lt;span&gt;
                right&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;Val&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;Px&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;10.0&lt;/span&gt;&lt;span&gt;),
                ..&lt;/span&gt;&lt;span&gt;Default&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;()
            },
            ..&lt;/span&gt;&lt;span&gt;Default&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;()
        },&lt;/span&gt;&lt;span&gt;
        material&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; materials&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;add&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Color&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;rgb&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;0.08&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;0.08&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;).&lt;/span&gt;&lt;span&gt;into&lt;/span&gt;&lt;span&gt;()),
        ..&lt;/span&gt;&lt;span&gt;Default&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;()
    });
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;parenting&quot;&gt;Parenting&lt;/h3&gt;
&lt;p&gt;Just like any other Entity, Nodes can have children. Children are positioned and scaled relative to their parent. By default, children will always appear in front of their parents.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://bevyengine.org/news/introducing-bevy/ui_parenting.png&quot; alt=&quot;ui_parenting&quot;/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span&gt;commands
    &lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;spawn&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;NodeComponents &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
        style&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; Style &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            size&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;Size&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Val&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;Percent&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;60.0&lt;/span&gt;&lt;span&gt;), &lt;/span&gt;&lt;span&gt;Val&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;Percent&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;60.0&lt;/span&gt;&lt;span&gt;)),&lt;/span&gt;&lt;span&gt;
            position_type&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;PositionType&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;Absolute&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;
            position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; Rect &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                top&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;Val&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;Px&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;10.0&lt;/span&gt;&lt;span&gt;),&lt;/span&gt;&lt;span&gt;
                right&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;Val&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;Px&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;10.0&lt;/span&gt;&lt;span&gt;),
                ..&lt;/span&gt;&lt;span&gt;Default&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;()
            },
            ..&lt;/span&gt;&lt;span&gt;Default&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;()
        },&lt;/span&gt;&lt;span&gt;
        material&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; materials&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;add&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Color&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;rgb&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;0.08&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;0.08&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;).&lt;/span&gt;&lt;span&gt;into&lt;/span&gt;&lt;span&gt;()),
        ..&lt;/span&gt;&lt;span&gt;Default&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;()
    })
    .&lt;/span&gt;&lt;span&gt;with_children&lt;/span&gt;&lt;span&gt;(|&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;| {&lt;/span&gt;&lt;span&gt;
        parent
            &lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;spawn&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;NodeComponents &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                style&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; Style &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                    size&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;Size&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Val&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;Px&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;50.0&lt;/span&gt;&lt;span&gt;), &lt;/span&gt;&lt;span&gt;Val&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;Px&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;50.0&lt;/span&gt;&lt;span&gt;)),
                    ..&lt;/span&gt;&lt;span&gt;Default&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;()
                },&lt;/span&gt;&lt;span&gt;
                material&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; materials&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;add&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Color&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;rgb&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;0.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;0.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;).&lt;/span&gt;&lt;span&gt;into&lt;/span&gt;&lt;span&gt;()),
                ..&lt;/span&gt;&lt;span&gt;Default&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;()
            });
    });
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;flexbox&quot;&gt;Flexbox&lt;/h3&gt;
&lt;p&gt;I won't cover how flexbox works here, but you can use all of the same &quot;flex&quot; properties you would use in a web context. Here is an example of how you would center two Nodes vertically and horizontally within their parent:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://bevyengine.org/news/introducing-bevy/flex.png&quot; alt=&quot;flex&quot;/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span&gt;commands
    &lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;spawn&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;NodeComponents &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
        style&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; Style &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            size&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;Size&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Val&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;Percent&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;100.0&lt;/span&gt;&lt;span&gt;), &lt;/span&gt;&lt;span&gt;Val&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;Percent&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;100.0&lt;/span&gt;&lt;span&gt;)),&lt;/span&gt;&lt;span&gt;
            justify_content&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;JustifyContent&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;Center&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;
            align_items&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;AlignItems&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;Center&lt;/span&gt;&lt;span&gt;,
            ..&lt;/span&gt;&lt;span&gt;Default&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;()
        },&lt;/span&gt;&lt;span&gt;
        material&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; materials&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;add&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Color&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;rgb&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;0.04&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;0.04&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;0.04&lt;/span&gt;&lt;span&gt;).&lt;/span&gt;&lt;span&gt;into&lt;/span&gt;&lt;span&gt;()),
        ..&lt;/span&gt;&lt;span&gt;Default&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;()
    })
    .&lt;/span&gt;&lt;span&gt;with_children&lt;/span&gt;&lt;span&gt;(|&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;| {&lt;/span&gt;&lt;span&gt;
        parent
            &lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;spawn&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;NodeComponents &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                style&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; Style &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                    size&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;Size&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Val&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;Px&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;80.0&lt;/span&gt;&lt;span&gt;), &lt;/span&gt;&lt;span&gt;Val&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;Px&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;80.0&lt;/span&gt;&lt;span&gt;)),
                    ..&lt;/span&gt;&lt;span&gt;Default&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;()
                },&lt;/span&gt;&lt;span&gt;
                material&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; materials&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;add&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Color&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;rgb&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;0.08&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;0.08&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;).&lt;/span&gt;&lt;span&gt;into&lt;/span&gt;&lt;span&gt;()),
                ..&lt;/span&gt;&lt;span&gt;Default&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;()
            })
            .&lt;/span&gt;&lt;span&gt;spawn&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;NodeComponents &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                style&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; Style &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                    size&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;Size&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Val&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;Px&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;80.0&lt;/span&gt;&lt;span&gt;), &lt;/span&gt;&lt;span&gt;Val&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;Px&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;80.0&lt;/span&gt;&lt;span&gt;)),
                    ..&lt;/span&gt;&lt;span&gt;Default&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;()
                },&lt;/span&gt;&lt;span&gt;
                material&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; materials&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;add&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Color&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;rgb&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;0.08&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;0.08&lt;/span&gt;&lt;span&gt;).&lt;/span&gt;&lt;span&gt;into&lt;/span&gt;&lt;span&gt;()),
                ..&lt;/span&gt;&lt;span&gt;Default&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;()
            });
    });
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;text-and-images&quot;&gt;Text and Images&lt;/h3&gt;
&lt;p&gt;Nodes can also have Text and Image components, which affect the inferred sizes of nodes.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://bevyengine.org/news/introducing-bevy/text_and_image.png&quot; alt=&quot;text and images&quot;/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span&gt;commands
    &lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;spawn&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;TextComponents &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
        text&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; Text &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            value&lt;/span&gt;&lt;span&gt;: &quot;&lt;/span&gt;&lt;span&gt;Hello from Bevy UI!&lt;/span&gt;&lt;span&gt;&quot;.&lt;/span&gt;&lt;span&gt;to_string&lt;/span&gt;&lt;span&gt;(),&lt;/span&gt;&lt;span&gt;
            font&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; asset_server&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;load&lt;/span&gt;&lt;span&gt;(&quot;&lt;/span&gt;&lt;span&gt;FiraSans-Bold.ttf&lt;/span&gt;&lt;span&gt;&quot;).&lt;/span&gt;&lt;span&gt;unwrap&lt;/span&gt;&lt;span&gt;(),&lt;/span&gt;&lt;span&gt;
            style&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; TextStyle &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                font_size&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;25.0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;
                color&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;Color&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;WHITE&lt;/span&gt;&lt;span&gt;,
            },
        },
        ..&lt;/span&gt;&lt;span&gt;Default&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;()
    })
    .&lt;/span&gt;&lt;span&gt;spawn&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;ImageComponents &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
        style&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; Style &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            size&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;Size&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Val&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;Px&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;200.0&lt;/span&gt;&lt;span&gt;), &lt;/span&gt;&lt;span&gt;Val&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;Auto&lt;/span&gt;&lt;span&gt;),&lt;/span&gt;&lt;span&gt;
            position_type&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;PositionType&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;Absolute&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;
            position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; Rect &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                top&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;Val&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;Px&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;10.0&lt;/span&gt;&lt;span&gt;),&lt;/span&gt;&lt;span&gt;
                right&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;Val&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;Px&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;10.0&lt;/span&gt;&lt;span&gt;),
                ..&lt;/span&gt;&lt;span&gt;Default&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;()
            },
            ..&lt;/span&gt;&lt;span&gt;Default&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;()
        },&lt;/span&gt;&lt;span&gt;
        material&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; materials&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;add&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;asset_server&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;load&lt;/span&gt;&lt;span&gt;(&quot;&lt;/span&gt;&lt;span&gt;bevy_logo.png&lt;/span&gt;&lt;span&gt;&quot;).&lt;/span&gt;&lt;span&gt;unwrap&lt;/span&gt;&lt;span&gt;().&lt;/span&gt;&lt;span&gt;into&lt;/span&gt;&lt;span&gt;()),
        ..&lt;/span&gt;&lt;span&gt;Default&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;()
    });
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;interaction-events&quot;&gt;Interaction Events&lt;/h3&gt;
&lt;p&gt;Nodes with the &lt;a href=&quot;https://docs.rs/bevy_ui/latest/bevy_ui/enum.Interaction.html&quot;&gt;&lt;code&gt;Interaction&lt;/code&gt;&lt;/a&gt; component will track interaction state. You can easily build widgets like buttons this way:&lt;/p&gt;
&lt;p&gt;For example, here is a system that only runs on Buttons where the Interaction state has changed:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span&gt;fn &lt;/span&gt;&lt;span&gt;system&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;_button&lt;/span&gt;&lt;span&gt;: &amp;amp;&lt;/span&gt;&lt;span&gt;Button, &lt;/span&gt;&lt;span&gt;interaction&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;Mutated&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Interaction&lt;/span&gt;&lt;span&gt;&amp;gt;) {
    &lt;/span&gt;&lt;span&gt;match &lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;interaction &lt;/span&gt;&lt;span&gt;{
        &lt;/span&gt;&lt;span&gt;Interaction&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;Clicked &lt;/span&gt;&lt;span&gt;=&amp;gt; &lt;/span&gt;&lt;span&gt;println!&lt;/span&gt;&lt;span&gt;(&quot;&lt;/span&gt;&lt;span&gt;clicked&lt;/span&gt;&lt;span&gt;&quot;),
        &lt;/span&gt;&lt;span&gt;Interaction&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;Hovered &lt;/span&gt;&lt;span&gt;=&amp;gt; &lt;/span&gt;&lt;span&gt;println!&lt;/span&gt;&lt;span&gt;(&quot;&lt;/span&gt;&lt;span&gt;hovered&lt;/span&gt;&lt;span&gt;&quot;),
        &lt;/span&gt;&lt;span&gt;Interaction&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;None &lt;/span&gt;&lt;span&gt;=&amp;gt; {},
    }
}
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;2d-features&quot;&gt;2D Features&lt;/h2&gt;
&lt;h3 id=&quot;sprites&quot;&gt;&lt;a href=&quot;https://github.com/bevyengine/bevy/blob/master/examples/2d/sprite.rs&quot;&gt;Sprites&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You can use any &lt;a href=&quot;https://docs.rs/bevy_render/latest/bevy_render/texture/struct.Texture.html&quot;&gt;&lt;code&gt;Texture&lt;/code&gt;&lt;/a&gt; asset as a sprite directly:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://bevyengine.org/news/introducing-bevy/sprite.png&quot; alt=&quot;sprite&quot;/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; texture &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; asset_server&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;load&lt;/span&gt;&lt;span&gt;(&quot;&lt;/span&gt;&lt;span&gt;icon.png&lt;/span&gt;&lt;span&gt;&quot;).&lt;/span&gt;&lt;span&gt;unwrap&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;&lt;span&gt;
commands&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;spawn&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;SpriteComponents &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
    material&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; materials&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;add&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;texture&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;into&lt;/span&gt;&lt;span&gt;()),
    ..&lt;/span&gt;&lt;span&gt;Default&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;()
});
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;sprite-sheets&quot;&gt;&lt;a href=&quot;https://github.com/bevyengine/bevy/blob/master/examples/2d/sprite_sheet.rs&quot;&gt;Sprite Sheets&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Sprite sheets (also known as texture atlases) can be used for animations, tile sets, or just for optimized sprite rendering.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; texture_atlas &lt;/span&gt;&lt;span&gt;= &lt;/span&gt;&lt;span&gt;TextureAtlas&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;from_grid&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;texture_handle&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; texture&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;size&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; texture_atlas_handle &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; texture_atlases&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;add&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;texture_atlas&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;span&gt;
commands
    &lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;spawn&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;SpriteSheetComponents &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
        texture_atlas&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; texture_atlas_handle&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;
        sprite&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;TextureAtlasSprite&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;),
        ..&lt;/span&gt;&lt;span&gt;Default&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;()
    });
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;dynamic-texture-atlas-generation&quot;&gt;&lt;a href=&quot;https://github.com/bevyengine/bevy/blob/master/examples/2d/texture_atlas.rs&quot;&gt;Dynamic Texture Atlas Generation&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Sprites are often produced as individual files. Bevy can combine them into a single sprite sheet dynamically!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://bevyengine.org/news/introducing-bevy/dynamic_texture_atlas.png&quot; alt=&quot;dynamic texture atlas&quot;/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; sprite_handle &lt;/span&gt;&lt;span&gt;in&lt;/span&gt;&lt;span&gt; sprite_handles&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;iter&lt;/span&gt;&lt;span&gt;() {
    &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; texture &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; textures&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(&amp;amp;&lt;/span&gt;&lt;span&gt;handle&lt;/span&gt;&lt;span&gt;).&lt;/span&gt;&lt;span&gt;unwrap&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;&lt;span&gt;
    texture_atlas_builder&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;add_texture&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;handle&lt;/span&gt;&lt;span&gt;, &amp;amp;&lt;/span&gt;&lt;span&gt;texture&lt;/span&gt;&lt;span&gt;);
}

&lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; texture_atlas &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; texture_atlas_builder&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;finish&lt;/span&gt;&lt;span&gt;(&amp;amp;&lt;/span&gt;&lt;span&gt;mut&lt;/span&gt;&lt;span&gt; textures&lt;/span&gt;&lt;span&gt;).&lt;/span&gt;&lt;span&gt;unwrap&lt;/span&gt;&lt;span&gt;();
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;3d-features&quot;&gt;3D Features&lt;/h2&gt;
&lt;h3 id=&quot;gltf-model-loading&quot;&gt;&lt;a href=&quot;https://github.com/bevyengine/bevy/blob/master/examples/3d/load_model.rs&quot;&gt;GLTF Model Loading&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Load GLTF files as Mesh assets&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://bevyengine.org/news/introducing-bevy/boat.png&quot; alt=&quot;boat render&quot;/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;spawn&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;PbrComponents &lt;/span&gt;&lt;span&gt;{
    &lt;/span&gt;&lt;span&gt;// load the model
&lt;/span&gt;&lt;span&gt;    mesh&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; asset_server&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;load&lt;/span&gt;&lt;span&gt;(&quot;&lt;/span&gt;&lt;span&gt;boat.gltf&lt;/span&gt;&lt;span&gt;&quot;).&lt;/span&gt;&lt;span&gt;unwrap&lt;/span&gt;&lt;span&gt;(),
    &lt;/span&gt;&lt;span&gt;// create a material for the model
&lt;/span&gt;&lt;span&gt;    material&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; materials&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;add&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;asset_server&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;load&lt;/span&gt;&lt;span&gt;(&quot;&lt;/span&gt;&lt;span&gt;boat.png&lt;/span&gt;&lt;span&gt;&quot;).&lt;/span&gt;&lt;span&gt;into&lt;/span&gt;&lt;span&gt;()),
    ..&lt;/span&gt;&lt;span&gt;Default&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;()
})
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Note: in the near future we will add support for loading GLTF files as Scenes instead of meshes.&lt;/p&gt;
&lt;h3 id=&quot;depth-based-draw-order&quot;&gt;&lt;a href=&quot;https://github.com/bevyengine/bevy/blob/master/examples/3d/texture.rs&quot;&gt;Depth Based Draw Order&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Front-to-back drawing for fast &quot;early fragment discarding&quot; of opaque materials, and back-to-front drawing for correct transparent materials&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://bevyengine.org/news/introducing-bevy/alpha.png&quot; alt=&quot;alpha&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;parenting-1&quot;&gt;&lt;a href=&quot;https://github.com/bevyengine/bevy/blob/master/examples/3d/parenting.rs&quot;&gt;Parenting&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Parent transforms are propagated to their descendants&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;spawn&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;PbrComponents &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
    mesh&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; cube_handle&lt;/span&gt;&lt;span&gt;,
    ..&lt;/span&gt;&lt;span&gt;Default&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;()
}).&lt;/span&gt;&lt;span&gt;with_children&lt;/span&gt;&lt;span&gt;(|&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;| {&lt;/span&gt;&lt;span&gt;
    parent&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;spawn&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;PbrComponents &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
        mesh&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; cube_handle&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;
        translation&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;Translation&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;0.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;2.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;0.0&lt;/span&gt;&lt;span&gt;),
        ..&lt;/span&gt;&lt;span&gt;Default&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;()
    });
})
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;msaa&quot;&gt;&lt;a href=&quot;https://github.com/bevyengine/bevy/blob/master/examples/3d/msaa.rs&quot;&gt;MSAA&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Get nice smooth edges by using Multi-Sample Anti-Aliasing&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://bevyengine.org/news/introducing-bevy/msaa_off.png&quot; alt=&quot;msaa_off&quot;/&gt;&lt;img src=&quot;https://bevyengine.org/news/introducing-bevy/msaa_on.png&quot; alt=&quot;msaa_on&quot;/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span&gt;app&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;add_resource&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Msaa &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; samples&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;8 &lt;/span&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;scenes&quot;&gt;Scenes&lt;/h2&gt;
&lt;p&gt;Scenes are a way to compose pieces of your game/app ahead of time. In Bevy, Scenes are simply a collection of entities and components. A Scene can be &quot;spawned&quot; into a &lt;code&gt;World&lt;/code&gt; any number of times. &quot;Spawning&quot; copies the Scene's entities and components into the given &lt;code&gt;World&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Scenes can also be saved to and loaded from &quot;scene files&quot;. One of the primary goals of the future &quot;Bevy Editor&quot; will be to make it easy to compose scene files visually.&lt;/p&gt;
&lt;h3 id=&quot;file-format&quot;&gt;File Format&lt;/h3&gt;
&lt;p&gt;Scene files are a saved and loaded as a flat list of entities and components:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span&gt;[
  &lt;/span&gt;&lt;span&gt;(
    entity: &lt;/span&gt;&lt;span&gt;328997855&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;components: &lt;/span&gt;&lt;span&gt;[
      {
        &quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;: &quot;&lt;/span&gt;&lt;span&gt;Position&lt;/span&gt;&lt;span&gt;&quot;,
        &quot;&lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;&quot;: { &quot;&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span&gt;&quot;: &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, &quot;&lt;/span&gt;&lt;span&gt;y&lt;/span&gt;&lt;span&gt;&quot;: &lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;0 &lt;/span&gt;&lt;span&gt;},
      },
    ],
  &lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,
  &lt;/span&gt;&lt;span&gt;(
    entity: &lt;/span&gt;&lt;span&gt;404566393&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;components: &lt;/span&gt;&lt;span&gt;[
      {
        &quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;: &quot;&lt;/span&gt;&lt;span&gt;Position&lt;/span&gt;&lt;span&gt;&quot;,
        &quot;&lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;&quot;: { &quot;&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span&gt;&quot;: &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, &quot;&lt;/span&gt;&lt;span&gt;y&lt;/span&gt;&lt;span&gt;&quot;: &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;0 &lt;/span&gt;&lt;span&gt;},
      },
      {
        &quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;: &quot;&lt;/span&gt;&lt;span&gt;Name&lt;/span&gt;&lt;span&gt;&quot;,
        &quot;&lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;&quot;: { &quot;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&quot;: &quot;&lt;/span&gt;&lt;span&gt;Carter&lt;/span&gt;&lt;span&gt;&quot; },
      },
    ],
  &lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,
]
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The numbers assigned to the &lt;code&gt;entity&lt;/code&gt; fields are entity's id, which are completely optional. If no entity id is provided, one will be randomly generated when the scene is loaded. We have &lt;a href=&quot;https://gist.github.com/cart/3e77d6537e1a0979a69de5c6749b6bcb&quot;&gt;plans to improve this format&lt;/a&gt; in the future to be more ergonomic, indent entity hierarchies, and support nested scenes.&lt;/p&gt;
&lt;h3 id=&quot;loading-and-instancing&quot;&gt;Loading and Instancing&lt;/h3&gt;
&lt;p&gt;Scenes can be added to a &lt;code&gt;World&lt;/code&gt; using the &lt;a href=&quot;https://docs.rs/bevy_scene/latest/bevy_scene/struct.SceneSpawner.html&quot;&gt;&lt;code&gt;SceneSpawner&lt;/code&gt;&lt;/a&gt; resource. Spawning can be done with either &lt;a href=&quot;https://docs.rs/bevy_scene/latest/bevy_scene/struct.SceneSpawner.html#method.load&quot;&gt;&lt;code&gt;SceneSpawner::load()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://docs.rs/bevy_scene/latest/bevy_scene/struct.SceneSpawner.html#method.instance&quot;&gt;&lt;code&gt;SceneSpawner::instance()&lt;/code&gt;&lt;/a&gt; . &quot;Loading&quot; a Scene preserves the entity IDs in it. This is useful for something like a save file where you want entity ids to be constant and changes to be applied on top of entities already in the world. &quot;Instancing&quot; adds entities to the &lt;code&gt;World&lt;/code&gt; with brand-new IDs, which allows multiple &quot;instances&quot; of a scene to exist in the same World.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span&gt;fn &lt;/span&gt;&lt;span&gt;load_scene_system&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;asset_server&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;Res&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;AssetServer&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;mut &lt;/span&gt;&lt;span&gt;scene_spawner&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;ResMut&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;SceneSpawner&lt;/span&gt;&lt;span&gt;&amp;gt;) {
    &lt;/span&gt;&lt;span&gt;// Scenes are loaded just like any other asset.
    &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; scene&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;Handle&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Scene&lt;/span&gt;&lt;span&gt;&amp;gt; =&lt;/span&gt;&lt;span&gt; asset_server&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;load&lt;/span&gt;&lt;span&gt;(&quot;&lt;/span&gt;&lt;span&gt;my_scene.scn&lt;/span&gt;&lt;span&gt;&quot;).&lt;/span&gt;&lt;span&gt;unwrap&lt;/span&gt;&lt;span&gt;();
    &lt;/span&gt;&lt;span&gt;// Spawns the scene with entity ids preserved
&lt;/span&gt;&lt;span&gt;    scene_spawner&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;load&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;scene&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;// Spawns the scene with new entity ids
&lt;/span&gt;&lt;span&gt;    scene_spawner&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;instance&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;scene&lt;/span&gt;&lt;span&gt;);
}
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;saving-ecs-worlds-to-scenes&quot;&gt;Saving ECS Worlds To Scenes&lt;/h3&gt;
&lt;p&gt;Any ECS &lt;code&gt;World&lt;/code&gt; can be converted to a scene like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; scene &lt;/span&gt;&lt;span&gt;= &lt;/span&gt;&lt;span&gt;Scene&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;from_world&lt;/span&gt;&lt;span&gt;(&amp;amp;&lt;/span&gt;&lt;span&gt;world&lt;/span&gt;&lt;span&gt;, &amp;amp;&lt;/span&gt;&lt;span&gt;component_type_registry&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;You can then convert the scene to a RON formatted string like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; ron_string &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; scene&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;serialize_ron&lt;/span&gt;&lt;span&gt;(&amp;amp;&lt;/span&gt;&lt;span&gt;property_type_registry&lt;/span&gt;&lt;span&gt;)?;
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;hot-scene-reloading&quot;&gt;Hot Scene Reloading&lt;/h3&gt;
&lt;p&gt;Changes to Scene files can be automatically applied to spawned Scenes at runtime. This allows for immediate feedback without restarts or recompiles.&lt;/p&gt;
&lt;p&gt;Note that the video above is not sped up. Scene changes are effectively applied instantaneously.&lt;/p&gt;
&lt;h3 id=&quot;how-does-this-work&quot;&gt;How Does This Work?&lt;/h3&gt;
&lt;p&gt;Scenes are built on top of Bevy's Property and Asset systems. Components can be used in scenes provided they derive the &lt;code&gt;Properties&lt;/code&gt; trait. Properties are what enable scene serialization, deserialization, and patching changes at runtime. Check out the next section for more details.&lt;/p&gt;
&lt;h2 id=&quot;properties&quot;&gt;Properties&lt;/h2&gt;
&lt;p&gt;In a nutshell, Bevy Properties add some dynamism to Rust, which is a notoriously static language. It is often useful to get or set a struct's field using a string version of its name, or interact with a struct when you don't have a statically typed reference. Languages generally cover these cases with &quot;reflection&quot; features, but unfortunately Rust does not currently have this type of reflection. I built the &lt;code&gt;bevy_property&lt;/code&gt; crate to provide a subset of useful &quot;reflection-like&quot; features in Rust. Here is a quick surface-level introduction:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span&gt;#[&lt;/span&gt;&lt;span&gt;derive&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Properties&lt;/span&gt;&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt;pub struct &lt;/span&gt;&lt;span&gt;Counter &lt;/span&gt;&lt;span&gt;{
    &lt;/span&gt;&lt;span&gt;count&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;u32&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;}

&lt;/span&gt;&lt;span&gt;let mut&lt;/span&gt;&lt;span&gt; counter &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; Counter &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; count&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;1 &lt;/span&gt;&lt;span&gt;};

&lt;/span&gt;&lt;span&gt;// You can set a property value like this. The type must match exactly or this will fail.
&lt;/span&gt;&lt;span&gt;counter&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;set_prop_val&lt;/span&gt;&lt;span&gt;::&amp;lt;&lt;/span&gt;&lt;span&gt;u32&lt;/span&gt;&lt;span&gt;&amp;gt;(&quot;&lt;/span&gt;&lt;span&gt;count&lt;/span&gt;&lt;span&gt;&quot;, &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;assert_eq!&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;counter&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;count&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;assert_eq!&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;counter&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;prop_val&lt;/span&gt;&lt;span&gt;::&amp;lt;&lt;/span&gt;&lt;span&gt;u32&lt;/span&gt;&lt;span&gt;&amp;gt;(&quot;&lt;/span&gt;&lt;span&gt;count&lt;/span&gt;&lt;span&gt;&quot;).&lt;/span&gt;&lt;span&gt;unwrap&lt;/span&gt;&lt;span&gt;(), &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;// You can also set properties dynamically. set_prop accepts any type that implements the Property trait, but the property type must match the field type or this operation will fail.
&lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; new_count&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;u32 &lt;/span&gt;&lt;span&gt;= &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
counter&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;set_prop&lt;/span&gt;&lt;span&gt;(&quot;&lt;/span&gt;&lt;span&gt;count&lt;/span&gt;&lt;span&gt;&quot;, &amp;amp;&lt;/span&gt;&lt;span&gt;new_count&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;assert_eq!&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;counter&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;count&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;// DynamicProperties also implements the Properties trait, but it has no restrictions on field names or types
&lt;/span&gt;&lt;span&gt;let mut&lt;/span&gt;&lt;span&gt; patch &lt;/span&gt;&lt;span&gt;= &lt;/span&gt;&lt;span&gt;DynamicProperties&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;&lt;span&gt;
patch&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;set_prop_val&lt;/span&gt;&lt;span&gt;::&amp;lt;&lt;/span&gt;&lt;span&gt;usize&lt;/span&gt;&lt;span&gt;&amp;gt;(&quot;&lt;/span&gt;&lt;span&gt;count&lt;/span&gt;&lt;span&gt;&quot;, &lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;// You can &quot;apply&quot; Properties on top of other Properties. This will only set properties with the same name and type. You can use this to &quot;patch&quot; your properties with new values.
&lt;/span&gt;&lt;span&gt;counter&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;apply&lt;/span&gt;&lt;span&gt;(&amp;amp;&lt;/span&gt;&lt;span&gt;patch&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;assert_eq!&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;counter&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;count&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;// Types that implement Properties can be converted to DynamicProperties
&lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; dynamic_thing&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; DynamicProperties &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; counter&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;to_dynamic&lt;/span&gt;&lt;span&gt;();
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Properties are what make Bevy's Scene system so nice to use. I also plan to use them for features in the upcoming Bevy Editor, such as undo/redo, viewing and editing component properties at runtime, and property animation tools.&lt;/p&gt;
&lt;p&gt;Types that implement Properties can be serialized using &lt;a href=&quot;https://serde.rs/&quot;&gt;serde&lt;/a&gt; and &lt;code&gt;DynamicProperties&lt;/code&gt; can be deserialized using serde. When combined with the &lt;code&gt;Properties&lt;/code&gt; patching feature, this means any type that derives &lt;code&gt;Properties&lt;/code&gt; can be round trip serialized and deserialized.&lt;/p&gt;
&lt;p&gt;To derive &lt;code&gt;Properties&lt;/code&gt; each field in the struct must implement the &lt;code&gt;Property&lt;/code&gt; trait. This is already implemented for most core Rust and Bevy types, so you should only need to implement &lt;code&gt;Property&lt;/code&gt; for custom types (and you can derive &lt;code&gt;Property&lt;/code&gt; too).&lt;/p&gt;
&lt;p&gt;I have a feeling that the &lt;code&gt;bevy_property&lt;/code&gt; crate will be useful in non-Bevy contexts, so I'll be publishing it to crates.io in the near future.&lt;/p&gt;
&lt;h2 id=&quot;events&quot;&gt;Events&lt;/h2&gt;
&lt;p&gt;Bevy uses a double-buffered event system that enables efficient event production and consumption with zero-allocation event consumers. Here is a complete Bevy app that produces and consumes a custom event:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span&gt;fn &lt;/span&gt;&lt;span&gt;main&lt;/span&gt;&lt;span&gt;() {
    &lt;/span&gt;&lt;span&gt;App&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;()
        .&lt;/span&gt;&lt;span&gt;add_event&lt;/span&gt;&lt;span&gt;::&amp;lt;&lt;/span&gt;&lt;span&gt;MyEvent&lt;/span&gt;&lt;span&gt;&amp;gt;()
        .&lt;/span&gt;&lt;span&gt;add_system&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;event_producer&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;system&lt;/span&gt;&lt;span&gt;())
        .&lt;/span&gt;&lt;span&gt;add_system&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;event_consumer&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;system&lt;/span&gt;&lt;span&gt;())
        .&lt;/span&gt;&lt;span&gt;run&lt;/span&gt;&lt;span&gt;();
}

&lt;/span&gt;&lt;span&gt;struct &lt;/span&gt;&lt;span&gt;MyEvent &lt;/span&gt;&lt;span&gt;{
    &lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; String,
&lt;/span&gt;&lt;span&gt;}

&lt;/span&gt;&lt;span&gt;fn &lt;/span&gt;&lt;span&gt;event_producer&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;mut &lt;/span&gt;&lt;span&gt;my_events&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;ResMut&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Events&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;MyEvent&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;gt;) {&lt;/span&gt;&lt;span&gt;
    my_events&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;send&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;MyEvent &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; message&lt;/span&gt;&lt;span&gt;: &quot;&lt;/span&gt;&lt;span&gt;Hello&lt;/span&gt;&lt;span&gt;&quot;.&lt;/span&gt;&lt;span&gt;to_string&lt;/span&gt;&lt;span&gt;() });
}

#[&lt;/span&gt;&lt;span&gt;derive&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Default&lt;/span&gt;&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt;struct &lt;/span&gt;&lt;span&gt;State &lt;/span&gt;&lt;span&gt;{
    &lt;/span&gt;&lt;span&gt;reader&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;EventReader&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;MyEvent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;, 
&lt;/span&gt;&lt;span&gt;}

&lt;/span&gt;&lt;span&gt;fn &lt;/span&gt;&lt;span&gt;event_consumer&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;mut &lt;/span&gt;&lt;span&gt;state&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;Local&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;State&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;my_events&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;Res&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Events&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;MyEvent&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;gt;) {
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; event &lt;/span&gt;&lt;span&gt;in&lt;/span&gt;&lt;span&gt; state&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;reader&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;iter&lt;/span&gt;&lt;span&gt;(&amp;amp;&lt;/span&gt;&lt;span&gt;my_events&lt;/span&gt;&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;println!&lt;/span&gt;&lt;span&gt;(&quot;&lt;/span&gt;&lt;span&gt;received message: {}&lt;/span&gt;&lt;span&gt;&quot;,&lt;/span&gt;&lt;span&gt; event&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;);
    }
}
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;app.add_event::&amp;lt;MyEvent&amp;gt;()&lt;/code&gt; adds a new &lt;a href=&quot;https://docs.rs/bevy_app/latest/bevy_app/struct.Events.html&quot;&gt;&lt;code&gt;Events&lt;/code&gt;&lt;/a&gt; resource for MyEvent and a system that swaps the &lt;code&gt;Events&amp;lt;MyEvent&amp;gt;&lt;/code&gt; buffers every update. &lt;a href=&quot;https://docs.rs/bevy_app/latest/bevy_app/struct.EventReader.html&quot;&gt;&lt;code&gt;EventReaders&lt;/code&gt;&lt;/a&gt; are very cheap to create. They are essentially just an array index that tracks the last event that has been read.&lt;/p&gt;
&lt;p&gt;Events are used in Bevy for features like window resizing, assets, and input. The tradeoff for being both allocation and cpu efficient is that each system only has one chance to receive an event, otherwise it will be lost on the next update. I believe this is the correct tradeoff for apps that run in a loop (ex: games).&lt;/p&gt;
&lt;h2 id=&quot;assets&quot;&gt;Assets&lt;/h2&gt;
&lt;p&gt;Bevy &lt;a href=&quot;https://docs.rs/bevy_asset/latest/bevy_asset/struct.Assets.html&quot;&gt;&lt;code&gt;Assets&lt;/code&gt;&lt;/a&gt; are just typed data that can be referenced using asset &lt;a href=&quot;https://docs.rs/bevy_asset/latest/bevy_asset/struct.Handle.html&quot;&gt;&lt;code&gt;Handles&lt;/code&gt;&lt;/a&gt; . For example, 3d meshes, textures, fonts, materials, scenes, and sounds are assets. &lt;code&gt;Assets&amp;lt;T&amp;gt;&lt;/code&gt; is a generic collection of assets of type &lt;code&gt;T&lt;/code&gt;. In general asset usage looks like this:&lt;/p&gt;
&lt;h4 id=&quot;asset-creation&quot;&gt;Asset Creation&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span&gt;fn &lt;/span&gt;&lt;span&gt;create_texture_system&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;mut &lt;/span&gt;&lt;span&gt;textures&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;ResMut&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Assets&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Texture&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;gt;) {
    &lt;/span&gt;&lt;span&gt;// creates a new Texture asset and returns a handle, which can then be used to retrieve the actual asset
    &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; texture_handle&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;Handle&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Texture&lt;/span&gt;&lt;span&gt;&amp;gt; =&lt;/span&gt;&lt;span&gt; textures&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;add&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Texture&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;());
}
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;asset-access&quot;&gt;Asset Access&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span&gt;fn &lt;/span&gt;&lt;span&gt;read_texture_system&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;textures&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;Res&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Assets&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Texture&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;texture_handle&lt;/span&gt;&lt;span&gt;: &amp;amp;&lt;/span&gt;&lt;span&gt;Handle&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Texture&lt;/span&gt;&lt;span&gt;&amp;gt;) {
    &lt;/span&gt;&lt;span&gt;// retrieves a Texture using the current entity's Handle&amp;lt;Texture&amp;gt; component
    &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; texture&lt;/span&gt;&lt;span&gt;: &amp;amp;&lt;/span&gt;&lt;span&gt;Texture &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; textures&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;texture_handle&lt;/span&gt;&lt;span&gt;).&lt;/span&gt;&lt;span&gt;unwrap&lt;/span&gt;&lt;span&gt;();
}
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;asset-events&quot;&gt;Asset Events&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;Assets&amp;lt;T&amp;gt;&lt;/code&gt; collection is basically just a map from &lt;code&gt;Handle&amp;lt;T&amp;gt;&lt;/code&gt; to &lt;code&gt;T&lt;/code&gt; that records created, modified, and removed &lt;code&gt;Events&lt;/code&gt;. These events can also be consumed as a system resource, just like any other &lt;code&gt;Events&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span&gt;fn &lt;/span&gt;&lt;span&gt;system&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;mut &lt;/span&gt;&lt;span&gt;state&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;Local&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;State&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;texture_events&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;Res&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Events&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;AssetEvent&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;gt;) {
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; event &lt;/span&gt;&lt;span&gt;in&lt;/span&gt;&lt;span&gt; state&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;reader&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;iter&lt;/span&gt;&lt;span&gt;(&amp;amp;&lt;/span&gt;&lt;span&gt;texture_events&lt;/span&gt;&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;if let &lt;/span&gt;&lt;span&gt;AssetEvent&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;Created &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; handle &lt;/span&gt;&lt;span&gt;} =&lt;/span&gt;&lt;span&gt; event &lt;/span&gt;&lt;span&gt;{
            &lt;/span&gt;&lt;span&gt;/* do something with created asset */
        &lt;/span&gt;&lt;span&gt;}
    }
}
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;asset-server&quot;&gt;Asset Server&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;Assets&amp;lt;T&amp;gt;&lt;/code&gt; collection doesn't know anything about filesystems or multi-threading. This is the responsibility of the &lt;a href=&quot;https://docs.rs/bevy_asset/latest/bevy_asset/struct.AssetServer.html&quot;&gt;&lt;code&gt;AssetServer&lt;/code&gt;&lt;/a&gt; resource:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span&gt;fn &lt;/span&gt;&lt;span&gt;system&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;mut &lt;/span&gt;&lt;span&gt;commands&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; Commands, &lt;/span&gt;&lt;span&gt;asset_server&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;Res&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;AssetServer&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;mut &lt;/span&gt;&lt;span&gt;textures&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;ResMut&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Assets&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Texture&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;gt;) {
    &lt;/span&gt;&lt;span&gt;// this will begin asynchronously loading &quot;texture.png&quot; in parallel 
    &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; texture_handle&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;Handle&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Texture&lt;/span&gt;&lt;span&gt;&amp;gt; =&lt;/span&gt;&lt;span&gt; asset_server&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;load&lt;/span&gt;&lt;span&gt;(&quot;&lt;/span&gt;&lt;span&gt;texture.png&lt;/span&gt;&lt;span&gt;&quot;).&lt;/span&gt;&lt;span&gt;unwrap&lt;/span&gt;&lt;span&gt;();

    &lt;/span&gt;&lt;span&gt;// the texture may not be loaded yet, but you can still add the handle as a component immediately.
    // whenever possible, internal Bevy systems will wait for assets to be ready before using them:
    &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; entity &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; commands&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;spawn&lt;/span&gt;&lt;span&gt;((&lt;/span&gt;&lt;span&gt;texture_handle&lt;/span&gt;&lt;span&gt;,));

    &lt;/span&gt;&lt;span&gt;// you can also asynchronously load entire folders (recursively) by adding them as an &quot;asset folder&quot;
&lt;/span&gt;&lt;span&gt;    asset_server&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;load_asset_folder&lt;/span&gt;&lt;span&gt;(&quot;&lt;/span&gt;&lt;span&gt;assets&lt;/span&gt;&lt;span&gt;&quot;).&lt;/span&gt;&lt;span&gt;unwrap&lt;/span&gt;&lt;span&gt;();

    &lt;/span&gt;&lt;span&gt;// you can get the handle of any asset (either currently loading or loaded) like this:
    &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; music_handle&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;Handle&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;AudioSource&lt;/span&gt;&lt;span&gt;&amp;gt; =&lt;/span&gt;&lt;span&gt; asset_server&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;get_handle&lt;/span&gt;&lt;span&gt;(&quot;&lt;/span&gt;&lt;span&gt;assets/music.mp3&lt;/span&gt;&lt;span&gt;&quot;).&lt;/span&gt;&lt;span&gt;unwrap&lt;/span&gt;&lt;span&gt;(); 

    &lt;/span&gt;&lt;span&gt;// when assets have finished loading, they are automatically added to the appropriate Assets&amp;lt;T&amp;gt; collection
    // you can check if an asset is ready like this:
    &lt;/span&gt;&lt;span&gt;if let &lt;/span&gt;&lt;span&gt;Some&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;texture&lt;/span&gt;&lt;span&gt;) =&lt;/span&gt;&lt;span&gt; textures&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(&amp;amp;&lt;/span&gt;&lt;span&gt;texture_handle&lt;/span&gt;&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;// do something with texture
    &lt;/span&gt;&lt;span&gt;}

    &lt;/span&gt;&lt;span&gt;// sometimes you want access to an asset immediately. you can block the current system until an asset has
    // finished loading and immediately update Assets&amp;lt;T&amp;gt; using the &quot;load_sync&quot; method
    &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; cool_sprite&lt;/span&gt;&lt;span&gt;: &amp;amp;&lt;/span&gt;&lt;span&gt;Texture &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;  asset_server&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;load_sync&lt;/span&gt;&lt;span&gt;(&amp;amp;&lt;/span&gt;&lt;span&gt;mut&lt;/span&gt;&lt;span&gt; textures&lt;/span&gt;&lt;span&gt;, &quot;&lt;/span&gt;&lt;span&gt;assets/cool_sprite.png&lt;/span&gt;&lt;span&gt;&quot;).&lt;/span&gt;&lt;span&gt;unwrap&lt;/span&gt;&lt;span&gt;();
}
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;hot-reloading&quot;&gt;Hot Reloading&lt;/h4&gt;
&lt;p&gt;You can enable asset change detection by calling:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span&gt;asset_server&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;watch_for_changes&lt;/span&gt;&lt;span&gt;().&lt;/span&gt;&lt;span&gt;unwrap&lt;/span&gt;&lt;span&gt;();
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This will load new versions of assets whenever their files have changed.&lt;/p&gt;
&lt;h4 id=&quot;adding-new-asset-types&quot;&gt;Adding New Asset Types&lt;/h4&gt;
&lt;p&gt;To add a new asset type, implement the &lt;a href=&quot;https://docs.rs/bevy_asset/latest/bevy_asset/trait.AssetLoader.html&quot;&gt;&lt;code&gt;AssetLoader&lt;/code&gt;&lt;/a&gt; trait. This tells Bevy what file formats to look for and how to translate the file bytes into the given asset type.&lt;/p&gt;
&lt;p&gt;Once you have implemented &lt;code&gt;AssetLoader&amp;lt;MyAsset&amp;gt;&lt;/code&gt; for &lt;code&gt;MyAssetLoader&lt;/code&gt; you can register your new loader like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span&gt;app&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;add_asset_loader&lt;/span&gt;&lt;span&gt;::&amp;lt;&lt;/span&gt;&lt;span&gt;MyAsset, MyAssetLoader&lt;/span&gt;&lt;span&gt;&amp;gt;();
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Then you can access the &lt;code&gt;Assets&amp;lt;MyAsset&amp;gt;&lt;/code&gt; resource, listen for change events, and call &lt;code&gt;asset_server.load(&quot;something.my_asset&quot;)&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;sound&quot;&gt;Sound&lt;/h2&gt;
&lt;p&gt;You can currently load and play sounds like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span&gt;fn &lt;/span&gt;&lt;span&gt;system&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;asset_server&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;Res&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;AssetServer&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;audio_output&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;Res&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;AudioOutput&lt;/span&gt;&lt;span&gt;&amp;gt;) {
    &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; music&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;Handle&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;AudioSource&lt;/span&gt;&lt;span&gt;&amp;gt; =&lt;/span&gt;&lt;span&gt; asset_server&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;load&lt;/span&gt;&lt;span&gt;(&quot;&lt;/span&gt;&lt;span&gt;music.mp3&lt;/span&gt;&lt;span&gt;&quot;).&lt;/span&gt;&lt;span&gt;unwrap&lt;/span&gt;&lt;span&gt;(); 

    &lt;/span&gt;&lt;span&gt;// this will play the music asynchronously as soon as it has loaded
&lt;/span&gt;&lt;span&gt;    audio_output&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;play&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;music&lt;/span&gt;&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;// if you already have an AudioSource reference you can play it immediately like this:
&lt;/span&gt;&lt;span&gt;    audio_output&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;play_source&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;audio_source&lt;/span&gt;&lt;span&gt;);
}
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;We plan on extending the audio system with more control and features in the future.&lt;/p&gt;
&lt;h2 id=&quot;render-graph&quot;&gt;Render Graph&lt;/h2&gt;
&lt;p&gt;All render logic is built on top of Bevy's &lt;a href=&quot;https://docs.rs/bevy_render/latest/bevy_render/render_graph/struct.RenderGraph.html&quot;&gt;&lt;code&gt;RenderGraph&lt;/code&gt;&lt;/a&gt; . The Render Graph is a way to encode atomic units of render logic. For example, you might create graph nodes for a 2D pass, UI pass, cameras, texture copies, swap chains, etc. Connecting a node to another node indicates that there is a dependency of some kind between them. By encoding render logic this way, the Bevy renderer is able to analyze dependencies and render the graph in parallel. It also has the benefit of encouraging developers to write modular render logic.&lt;/p&gt;
&lt;p&gt;Bevy includes a number of nodes by default: &lt;code&gt;CameraNode&lt;/code&gt;, &lt;code&gt;PassNode&lt;/code&gt;, &lt;code&gt;RenderResourcesNode&lt;/code&gt;, &lt;code&gt;SharedBuffersNode&lt;/code&gt;, &lt;code&gt;TextureCopyNode&lt;/code&gt;, &lt;code&gt;WindowSwapChainNode&lt;/code&gt;, and &lt;code&gt;WindowTextureNode&lt;/code&gt;. It also provides subgraphs for 2d rendering, 3d rendering, and UI rendering. But you are welcome to create your own nodes, your own graphs, or extend the included graphs!&lt;/p&gt;
&lt;h3 id=&quot;data-driven-shaders&quot;&gt;&lt;a href=&quot;https://github.com/bevyengine/bevy/blob/master/examples/shader/shader_custom_material.rs&quot;&gt;Data Driven Shaders&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Components and Assets can derive the &lt;a href=&quot;https://docs.rs/bevy_render/latest/bevy_render/renderer/trait.RenderResources.html&quot;&gt;&lt;code&gt;RenderResources&lt;/code&gt;&lt;/a&gt; trait, which enables them to be directly copied to GPU resources and used as shader uniforms.&lt;/p&gt;
&lt;p&gt;Binding uniforms to a custom shader is literally as simple as deriving &lt;code&gt;RenderResources&lt;/code&gt; on your component or asset:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span&gt;#[&lt;/span&gt;&lt;span&gt;derive&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;RenderResources&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; Default&lt;/span&gt;&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt;struct &lt;/span&gt;&lt;span&gt;MyMaterial &lt;/span&gt;&lt;span&gt;{
    &lt;/span&gt;&lt;span&gt;pub &lt;/span&gt;&lt;span&gt;color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; Color,
&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And then adding a new RenderResourceNode to the Render Graph:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span&gt;// create the new node
&lt;/span&gt;&lt;span&gt;render_graph&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;add_system_node&lt;/span&gt;&lt;span&gt;(&quot;&lt;/span&gt;&lt;span&gt;my_material&lt;/span&gt;&lt;span&gt;&quot;, &lt;/span&gt;&lt;span&gt;RenderResourcesNode&lt;/span&gt;&lt;span&gt;::&amp;lt;&lt;/span&gt;&lt;span&gt;MyMaterial&lt;/span&gt;&lt;span&gt;&amp;gt;::&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;));

&lt;/span&gt;&lt;span&gt;// connect the new node to the &quot;main pass node&quot;
&lt;/span&gt;&lt;span&gt;render_graph&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;add_node_edge&lt;/span&gt;&lt;span&gt;(&quot;&lt;/span&gt;&lt;span&gt;my_material&lt;/span&gt;&lt;span&gt;&quot;, &lt;/span&gt;&lt;span&gt;base&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;node&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;MAIN_PASS&lt;/span&gt;&lt;span&gt;).&lt;/span&gt;&lt;span&gt;unwrap&lt;/span&gt;&lt;span&gt;();
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;From there, MyMaterial components will be automatically copied to GPU buffers. A shader can then reference an entity's MyMaterial like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span&gt;layout&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;set &lt;/span&gt;&lt;span&gt;= &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; binding &lt;/span&gt;&lt;span&gt;= &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; uniform MyMaterial_color &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
    vec4 color&lt;/span&gt;&lt;span&gt;;
};
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I think the simplicity of the &lt;a href=&quot;https://github.com/bevyengine/bevy/blob/master/examples/shader/shader_custom_material.rs&quot;&gt;fully self-contained custom shader example&lt;/a&gt; speaks for itself.&lt;/p&gt;
&lt;h3 id=&quot;shader-defs&quot;&gt;&lt;a href=&quot;https://github.com/bevyengine/bevy/blob/master/examples/shader/shader_defs.rs&quot;&gt;Shader Defs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Components and Assets can also add &quot;shader defs&quot; to selectively enable shader code on a per-entity basis:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span&gt;#[&lt;/span&gt;&lt;span&gt;derive&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;RenderResources&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; ShaderDefs&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; Default&lt;/span&gt;&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt;struct &lt;/span&gt;&lt;span&gt;MyMaterial &lt;/span&gt;&lt;span&gt;{
    &lt;/span&gt;&lt;span&gt;pub &lt;/span&gt;&lt;span&gt;color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; Color,
    &lt;/span&gt;&lt;span&gt;#[&lt;/span&gt;&lt;span&gt;render_resource&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;ignore&lt;/span&gt;&lt;span&gt;)]
    #[&lt;/span&gt;&lt;span&gt;shader_def&lt;/span&gt;&lt;span&gt;]
    &lt;/span&gt;&lt;span&gt;pub &lt;/span&gt;&lt;span&gt;always_blue&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;bool&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Then in your fragment shader you could do something like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span&gt;void &lt;/span&gt;&lt;span&gt;main&lt;/span&gt;&lt;span&gt;() {&lt;/span&gt;&lt;span&gt;
    o_Target &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; color&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;# ifdef&lt;/span&gt;&lt;span&gt; MYMATERIAL_ALWAYS_BLUE
    o_Target &lt;/span&gt;&lt;span&gt;= &lt;/span&gt;&lt;span&gt;vec4&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;# endif
&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Any entity with a &lt;code&gt;MyMaterial&lt;/code&gt; component and &lt;code&gt;always_blue: true&lt;/code&gt; will be rendered blue. If &lt;code&gt;always_blue&lt;/code&gt; is false, it will be rendered with &lt;code&gt;color&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We currently use this feature for toggling &quot;shadeless&quot; rendering and optional textures, but I anticipate it being useful in a variety of contexts.&lt;/p&gt;
&lt;h3 id=&quot;shader-layout-reflection&quot;&gt;&lt;a href=&quot;https://github.com/bevyengine/bevy/blob/master/examples/shader/shader_custom_material.rs&quot;&gt;Shader Layout Reflection&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Bevy can automatically reflect shader data layouts from SpirV shaders (and from GLSL shaders by compiling them to SpirV). This means that creating custom shaders is as simple as this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; shader_stages &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; ShaderStages &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
    vertex&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; shaders&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;add&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Shader&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;from_glsl&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;ShaderStage&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;Vertex&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;VERTEX_SHADER&lt;/span&gt;&lt;span&gt;)),&lt;/span&gt;&lt;span&gt;
    fragment&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;Some&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;shaders&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;add&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Shader&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;from_glsl&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;ShaderStage&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;Fragment&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;FRAGMENT_SHADER&lt;/span&gt;&lt;span&gt;))),
};
&lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; pipeline_handle &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; pipelines&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;add&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;PipelineDescriptor&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;default_config&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;shader_stages&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;productive-compile-times&quot;&gt;Productive Compile Times&lt;/h2&gt;
&lt;p&gt;One of my primary design goals for Bevy is &quot;productivity&quot;. Game development is an extremely iterative and experimental process full of small changes. If each change takes a significant amount of time to test, then development becomes a grind. Here is my personal &quot;acceptability scale&quot; for iterative changes:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong class=&quot;fun-list&quot;&gt;0-1 seconds&lt;/strong&gt;: ideal&lt;/li&gt;
&lt;li&gt;&lt;strong class=&quot;fun-list&quot;&gt;1-3 seconds&lt;/strong&gt;: fine&lt;/li&gt;
&lt;li&gt;&lt;strong class=&quot;fun-list&quot;&gt;3-5 seconds&lt;/strong&gt;: annoying&lt;/li&gt;
&lt;li&gt;&lt;strong class=&quot;fun-list&quot;&gt;5-10 seconds&lt;/strong&gt;: painful but still usable if you are committed&lt;/li&gt;
&lt;li&gt;&lt;strong class=&quot;fun-list&quot;&gt;10+ seconds&lt;/strong&gt;: completely unusable&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Note that these are &quot;iterative compile times&quot; not &quot;clean compile times&quot;. Clean compiles only need to happen once, whereas iterative compiles happen constantly. I care a lot less about the &quot;clean compile&quot; metric when it comes to productivity, although it is still important to keep clean compile times down for other reasons.&lt;/p&gt;
&lt;p&gt;One of the most popular Rust engines today takes &lt;em&gt;over 30 seconds&lt;/em&gt; to compile a single newline inserted into trivial examples. That is categorically unproductive and makes real game-dev practically impossible.&lt;/p&gt;
&lt;p&gt;Currently, with the &quot;fast compiles&quot; configuration, changes to Bevy examples can be compiled in ~0.8-3 seconds, based on your computer specs, configuration, and OS choice (more on this later). There is of course always room for improvement here, but Bevy currently falls into my &quot;usability sweet spot&quot;.&lt;/p&gt;
&lt;p&gt;The &quot;Rust compiles slow&quot; meme exists largely because many Rust projects aren't thinking enough about the compile time performance implications of certain code patterns. Rust code generally compiles slowly for three reasons:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong class=&quot;fun-list&quot;&gt;Generic Monomorphization&lt;/strong&gt;: The compile step where generic code gets turned into a non-generic copy. Compile times go up as the volume of monomorphized code goes up. To keep costs low you should either avoid generics entirely or keep generic code &quot;small&quot; and shallow.&lt;/li&gt;
&lt;li&gt;&lt;strong class=&quot;fun-list&quot;&gt;Link Time&lt;/strong&gt;: How long it takes to link code. Here the important thing is to keep code volume and dependency counts low.&lt;/li&gt;
&lt;li&gt;&lt;strong class=&quot;fun-list&quot;&gt;LLVM&lt;/strong&gt;: Rust throws a large amounts of IR code at LLVM and expects it to optimize it. This takes time. Additionally LLVM is optimized for &quot;fast code at runtime&quot; more than &quot;fast code generation&quot;.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The LLVM bit is out of our hands (for now). Keeping generic usage low and shallow isn't a particularly hard problem, provided you employ that mindset from the beginning. Link times, on the other hand, are a constant and very real &quot;enemy&quot; of iterative compile times. Linking happens on every iterative compile. Adding any code to your project will increase link times. Adding any dependency to your project will increase link times.&lt;/p&gt;
&lt;p&gt;The cards are stacked against us for a variety of reasons:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong class=&quot;fun-list&quot;&gt;The Game Engine Domain&lt;/strong&gt;
&lt;ul&gt;&lt;li&gt;Game engines inherently touch a large number of domains (and therefore involve a large number of dependencies)&lt;/li&gt;
&lt;li&gt;Game engines are &quot;big&quot; ... they require a lot of code&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong class=&quot;fun-list&quot;&gt;Rust's Design Choices&lt;/strong&gt;
&lt;ul&gt;&lt;li&gt;Dependencies are statically linked by default, which means every new dependency adds link times&lt;/li&gt;
&lt;li&gt;Rust's default linker is quite slow&lt;/li&gt;
&lt;li&gt;Cargo makes taking dependencies very easy. What appears to be a small, simple crate might actually have a large dependency tree&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;One solution to this problem is to avoid dependencies at all costs and write the smallest amount of code that you can. The &lt;a href=&quot;https://github.com/not-fl3/macroquad&quot;&gt;Macroquad&lt;/a&gt; project is a great example of this. They employ a minimalist approach to code and avoid any dependency that doesn't meet their strict compile time requirements. As a result, I think its fair to say that they are the fastest compiling (while still usable) Rust game engine, both for clean and iterative compiles. However their approach comes at the cost of dependency aversion.&lt;/p&gt;
&lt;p&gt;Bevy takes a slightly more pragmatic approach. First, being willing to take dependencies is good for the Rust ecosystem. I don't want to ignore all of the great work that has already been done, especially when it comes to projects like &lt;a href=&quot;https://github.com/rust-windowing/winit&quot;&gt;winit&lt;/a&gt; and &lt;a href=&quot;https://github.com/gfx-rs/wgpu-rs&quot;&gt;wgpu&lt;/a&gt;. But we still strive to keep our dependency tree as small as we can. And any dependency that takes Bevy out of the &quot;ideal to fine&quot; iterative compile time range must either be pared down or removed. When combined with the &quot;Fast Compiles&quot; configuration, this results in nice compile times.&lt;/p&gt;
&lt;h3 id=&quot;the-fast-compiles-configuration&quot;&gt;The &quot;Fast Compiles&quot; Configuration&lt;/h3&gt;
&lt;p&gt;The &quot;fast compiles&quot; configuration is how we achieve usable iterative compile times while still taking dependencies. It consists of three parts:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong class=&quot;fun-list&quot;&gt;LLD linker&lt;/strong&gt;: LLD is &lt;em&gt;much faster&lt;/em&gt; at linking than the default Rust linker. This is the biggest win.&lt;/li&gt;
&lt;li&gt;&lt;strong class=&quot;fun-list&quot;&gt;Nightly Rust Compiler&lt;/strong&gt;: Gives access to the latest performance improvements and &quot;unstable&quot; optimizations. Note that Bevy can still be compiled on stable Rust if that is a requirement for you.&lt;/li&gt;
&lt;li&gt;&lt;strong class=&quot;fun-list&quot;&gt;Generic Sharing&lt;/strong&gt;: Allows crates to share monomorphized generic code instead of duplicating it. In some cases this allows us to &quot;precompile&quot; generic code so it doesn't affect iterative compiles.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;To enable fast compiles, install the nightly rust compiler and LLD. Then copy &lt;a href=&quot;https://github.com/bevyengine/bevy/blob/master/.cargo/config_fast_builds&quot;&gt;this file&lt;/a&gt; to &lt;code&gt;YOUR_WORKSPACE/.cargo/config&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;current-limitations-and-future-improvements&quot;&gt;Current Limitations and Future Improvements&lt;/h3&gt;
&lt;p&gt;While Bevy is currently &quot;productive&quot; by my criteria, it isn't all sunshine and rainbows yet. First, MacOS doesn't have an up-to-date version of the LLD linker and therefore iterative compiles are &lt;em&gt;much&lt;/em&gt; slower on that platform. Additionally, LLD is &lt;em&gt;slightly&lt;/em&gt; slower on Windows than it is on Linux. On my machine I get ~1.5-3.0 seconds on Windows vs ~0.8-3.0 seconds on Linux.&lt;/p&gt;
&lt;h4 id=&quot;dynamic-linking-to-the-rescue&quot;&gt;Dynamic Linking to the Rescue&lt;/h4&gt;
&lt;p&gt;An easy way to cut down on link times is to just dynamically link instead. On my 2013 MacBook Pro running MacOS (with no LLD), I was able to drop iterative Bevy compile times from ~6 seconds to ~0.6 seconds by dynamically linking app plugins. Bevy actually already has support for dynamic App plugins, but the new Bevy ECS does not currently support dynamic linking because it relies on TypeIds (which are incompatible with dynamic linking). Fortunately, I have already solved the TypeId problem in other projects, so we should be able to add this back soon.&lt;/p&gt;
&lt;h4 id=&quot;cranelift-rustc-backend&quot;&gt;Cranelift Rustc Backend&lt;/h4&gt;
&lt;p&gt;Cranelift is an alternative compiler backend that is optimized for fast compiles. The &lt;a href=&quot;https://github.com/bjorn3/rustc_codegen_cranelift&quot;&gt;rustc cranelift backend&lt;/a&gt; is rapidly approaching a usable state. I'm hoping it will give us a nice boost eventually.&lt;/p&gt;
&lt;h2 id=&quot;example-game-breakout&quot;&gt;Example Game: Breakout&lt;/h2&gt;
&lt;p&gt;If you are curious about what actual Bevy game code looks like, check out the &lt;a href=&quot;https://github.com/bevyengine/bevy/blob/master/examples/game/breakout.rs&quot;&gt;breakout example&lt;/a&gt;. Forgive my slightly janky collision code please :)&lt;/p&gt;
&lt;h2 id=&quot;why-build-bevy&quot;&gt;Why Build Bevy?&lt;/h2&gt;
&lt;p&gt;There are plenty of fantastic engines out there ... why build another one? Especially when there are already so many in the Rust ecosystem?&lt;/p&gt;
&lt;p&gt;First a bit about me: I decided to build Bevy after years of contributing code to other engines (ex: Godot). I spent over four years &lt;a href=&quot;https://www.youtube.com/c/cartdev&quot;&gt;building a game in Godot&lt;/a&gt; and I also have experience with Unity, Unreal, and a number of other frameworks like SDL and Three.js. I have built multiple custom engines in the past using Rust, Go, HTML5, and Java. I have also used and/or closely followed most of the current players in the Rust gamedev ecosystem. I recently quit my job as Senior Software Engineer at Microsoft and my experience there deeply affected my opinions of software and what it should be.&lt;/p&gt;
&lt;p&gt;These experiences led me to want the following from a game engine:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong class=&quot;fun-list&quot;&gt;Free and Open Source&lt;/strong&gt;: It needs to be free and open source with &lt;em&gt;no strings attached&lt;/em&gt;. Games are a huge part of our culture and humanity is investing &lt;em&gt;millions&lt;/em&gt; of hours into the development of games. Why are we (as game developers / engine developers) continuing to build up the ecosystems of closed-source monopolies that take cuts of our sales and deny us visibility into the tech we use daily? As a community I believe we can do so much better. This criteria eliminates Unreal and Unity, despite their huge feature sets.&lt;/li&gt;
&lt;li&gt;&lt;strong class=&quot;fun-list&quot;&gt;Productive&lt;/strong&gt;: It needs to have fast build/run/test loops, which translates to either scripting languages or fast compile times in native languages. But scripting languages introduce runtime overhead, cognitive load, and a barrier between me and the actual engine, so my preference here is a native language with fast compile times. Sadly compile times are a huge problem in the Rust ecosystem and many Rust engines have prohibitively long iterative compiles. Fortunately Rust game engines like Macroquad and coffee prove that productive iterative compile times are possible.&lt;/li&gt;
&lt;li&gt;&lt;strong class=&quot;fun-list&quot;&gt;Turtles All The Way Down&lt;/strong&gt;: Ideally the engine is written in the same language that games are. Being able to run an IDE &quot;go to definition&quot; command on a symbol in your game and hop directly into the engine source is an extremely powerful concept. You also don't need to worry about heavy language translation layers or lossy abstractions. If an engine's community builds games in the same language as the engine, they are more likely (and able) to contribute back to the engine.&lt;/li&gt;
&lt;li&gt;&lt;strong class=&quot;fun-list&quot;&gt;Simple&lt;/strong&gt;: It needs to be easy to use for common tasks, but it also can't hide the details from you. Many engines are either &quot;easy to use but too high level&quot; or &quot;very low level but difficult to do common tasks in&quot;. Additionally, many engines in Rust are littered with lifetimes and generics. Both are powerful tools to be sure, but they also introduce cognitive load and reduce ergonomics. Generics can also have a huge impact on compile times if you aren't careful.&lt;/li&gt;
&lt;li&gt;&lt;strong class=&quot;fun-list&quot;&gt;Editor&lt;/strong&gt;: It needs to have an (optional) graphical editor. Scene creation is a large part of game development and in many cases visual editors beat code. As a bonus, the editor should be built &lt;em&gt;in the engine&lt;/em&gt;. Godot uses this approach and it is &lt;em&gt;so smart&lt;/em&gt;. Doing so &lt;a href=&quot;https://en.wikipedia.org/wiki/Eating_your_own_dog_food&quot;&gt;dogfoods&lt;/a&gt; the engine's UI system and creates positive feedback loops. Improvements to the editor are also often improvements to the core engine. It also makes sure your engine is flexible enough to build tooling (and not just games). I personally consider building an engine's editor in another stack to be a missed opportunity (ex: the web, QT, native widgets).&lt;/li&gt;
&lt;li&gt;&lt;strong class=&quot;fun-list&quot;&gt;Data Driven&lt;/strong&gt;: It needs to be data-driven/data-oriented/data-first. ECS is a common way of doing this, but it definitely isn't the only way. These paradigms can make your game faster (cache friendly, easier to parallelize), but they also make common tasks like game state serialization and synchronization delightfully straightforward.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;None of the engines on the market &lt;em&gt;quite&lt;/em&gt; line up with what I'm looking for. And the changes required to make them meet my requirements are either massive in scope, impossible (closed source), or unwelcome (the things I want aren't what the developers or customers want). On top of that, making new game engines is fun!&lt;/p&gt;
&lt;p&gt;Bevy is not trying to out-compete other open-source game engines. As much as possible we should be collaborating and building common foundations. If you are an open source game engine developer and you think a Bevy component would make your engine better, one of your engine's components could make Bevy better, or both, please reach out! Bevy is already benefitting massively from the efforts of the Rust gamedev ecosystem and we would love to pay it forward in whatever way we can.&lt;/p&gt;
&lt;h2 id=&quot;what-s-next&quot;&gt;What's Next?&lt;/h2&gt;
&lt;p&gt;I'm proud of how far Bevy has come in a relatively short period of time, but there is still plenty of work left to do. These will be our focus areas over the coming months:&lt;/p&gt;
&lt;h3 id=&quot;physically-based-rendering-pbr&quot;&gt;Physically Based Rendering (PBR)&lt;/h3&gt;
&lt;p&gt;Bevy's current 3D renderer is extremely bare bones. As I primarily make 3D games, improving the 3D renderer is a priority for me. We will be adding PBR shaders, shadows, more lighting options, skeletal animation, improved GLTF import, ambient occlusion (implementation TBD), and probably a bunch of other things.&lt;/p&gt;
&lt;h3 id=&quot;editor&quot;&gt;Editor&lt;/h3&gt;
&lt;p&gt;Bevy was architected with a visual editor in mind. The Scene and Properties systems were specifically built to make game&amp;lt;-&amp;gt;editor dataflow nicer. The editor will be built as a Bevy App and will utilize the existing Bevy UI, Bevy ECS, Scene, and Properties features. I like the &quot;build the editor in the engine&quot; approach because improvements to the editor are often improvements to the engine, and vice-versa. Additionally, it ensures that Bevy is capable of building non-game apps and tooling.&lt;/p&gt;
&lt;h3 id=&quot;platform-support-android-ios-web&quot;&gt;Platform Support: Android, iOS, Web&lt;/h3&gt;
&lt;p&gt;Under the hood Bevy uses &lt;a href=&quot;https://github.com/rust-windowing/winit&quot;&gt;winit&lt;/a&gt; (for multi-platform windows and input) and &lt;a href=&quot;https://github.com/gfx-rs/wgpu-rs&quot;&gt;wgpu&lt;/a&gt; (for multi-platform rendering). Each of these projects has varying degrees of support for the platforms above. And in general Bevy was designed to be platform-agnostic, so supporting the platforms above should be possible with a little bit of work.&lt;/p&gt;
&lt;h3 id=&quot;render-batching-and-instancing&quot;&gt;Render Batching and Instancing&lt;/h3&gt;
&lt;p&gt;Right now Bevy can render plenty fast for most use cases, but when it comes to rendering huge amounts of objects (tens of thousands) it isn't quite there yet. To accomplish that, we need to implement batching / instancing. These concepts can be defined in a number of ways, but the general gist is that we will be grouping as much geometry and data into the smallest number of draw calls possible, while also reducing GPU state changes as much as possible. I'm hoping Bevy's data driven shader approach will make the instancing implementation simple and extensible.&lt;/p&gt;
&lt;h3 id=&quot;canvas&quot;&gt;Canvas&lt;/h3&gt;
&lt;p&gt;Right now the only way to draw UI and 2D scenes is via sprites and rectangles. Bevy needs an immediate-mode drawing api capable of drawing anti-aliased curves and shapes. This can then be used to do code-driven drawing of things like rounded corners in Bevy UI, performance graphs in the editor, etc. It's very possible that we will integrate projects like &lt;a href=&quot;https://github.com/servo/pathfinder&quot;&gt;pathfinder&lt;/a&gt; or &lt;a href=&quot;https://github.com/nical/lyon&quot;&gt;lyon&lt;/a&gt; for this.&lt;/p&gt;
&lt;h3 id=&quot;animation&quot;&gt;Animation&lt;/h3&gt;
&lt;p&gt;Animation permeates almost everything in gamedev. First, I want to add a general purpose code-first animation system. Then on top of that we will add a property-based timeline system that can be saved to a config file and visualized / edited in the Bevy Editor.&lt;/p&gt;
&lt;h3 id=&quot;nicer-scene-format&quot;&gt;Nicer Scene Format&lt;/h3&gt;
&lt;p&gt;The current scene format is workable, but it isn't yet ideal for manual scene composition because it is a flat list of unordered entities. I also want to add nested scenes. Eventually, I would like the scene format to &lt;a href=&quot;https://gist.github.com/cart/3e77d6537e1a0979a69de5c6749b6bcb&quot;&gt;look something like this&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;dynamic-plugin-loading&quot;&gt;Dynamic Plugin Loading&lt;/h3&gt;
&lt;p&gt;To mitigate the cost of compiling and linking plugins and make hot-code-reloading possible, we will provide the option to dynamically load App plugins. Bevy actually already supports this feature, but there is one hangup: Rust's &lt;code&gt;TypeId&lt;/code&gt;. TypeIds are unstable across binaries, which means &lt;code&gt;TypeId::of::&amp;lt;T&amp;gt;()&lt;/code&gt; in the host binary will not match &lt;code&gt;TypeId::of::&amp;lt;T&amp;gt;()&lt;/code&gt; in a dynamically loaded binary. Bevy ECS uses TypeIds, which means dynamically loaded ECS types won't behave correctly. In the past, Bevy used a custom fork of the Legion ECS (where we fixed the TypeId problem). But since moving to Bevy ECS the problem has resurfaced. The fix is to apply the same approach we used in Legion to Bevy ECS.&lt;/p&gt;
&lt;h3 id=&quot;physics&quot;&gt;Physics&lt;/h3&gt;
&lt;p&gt;Many games require collision detection and physics. I'm planning on building a plug-able physics interface with &lt;a href=&quot;https://nphysics.org/&quot;&gt;nphysics / ncollide&lt;/a&gt; as the first backend.&lt;/p&gt;
&lt;h3 id=&quot;polish&quot;&gt;Polish&lt;/h3&gt;
&lt;p&gt;There are plenty of areas that need more design work or features. For example, I think the core Render Graph is in a pretty good state, but the mid-level and high level rendering APIs need more time and experimentation. I also want to rethink how materials are composed. If you are curious about all of the improvements on our radar, check out the &lt;a href=&quot;https://github.com/bevyengine/bevy/issues&quot;&gt;Bevy issue tracker on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;documentation&quot;&gt;Documentation&lt;/h3&gt;
&lt;p&gt;Bevy's APIs are still very unstable, so I haven't spent much time documenting anything yet. &lt;a href=&quot;https://bevyengine.org/learn/book/introduction/&quot;&gt;The Bevy Book&lt;/a&gt; is still small and the &lt;a href=&quot;https://docs.rs/bevy&quot;&gt;Rust API Docs&lt;/a&gt; have plenty of gaps. In general I subscribe to the idea of &quot;documentation proportional to stability&quot;. As features stabilize and design patterns emerge, we will increase efforts in both of those areas.&lt;/p&gt;
&lt;h2 id=&quot;join-the-bevy&quot;&gt;Join the Bevy!&lt;/h2&gt;
&lt;p&gt;If any of this sounds interesting to you, I encourage you to check out &lt;a href=&quot;https://github.com/bevyengine/bevy&quot;&gt;Bevy on GitHub&lt;/a&gt;, read &lt;a href=&quot;https://bevyengine.org/learn/book/introduction/&quot;&gt;The Bevy Book&lt;/a&gt;, and &lt;a href=&quot;https://bevyengine.org/community/&quot;&gt;join the Bevy community&lt;/a&gt;. Currently Bevy is 100% built by volunteers, so if you want to help us build the next great game engine, &lt;a href=&quot;https://discord.com/invite/gMUk5Ph&quot;&gt;please reach out&lt;/a&gt;! We need all the help we can get, especially if you are a:&lt;/p&gt;
&lt;p&gt;I want Bevy to become a vibrant developer community ... thats actually why I chose the name! A Bevy is a group of birds, just like we are a group of game developers. Join the Bevy!&lt;/p&gt;
&lt;img src=&quot;https://bevyengine.org/assets/bevy_logo_dark.svg&quot;/&gt;</description>
<pubDate>Tue, 11 Aug 2020 17:44:05 +0000</pubDate>
<dc:creator>adamnemecek</dc:creator>
<og:title>Bevy - Introducing Bevy</og:title>
<og:type>website</og:type>
<og:url>https://bevyengine.org/news/introducing-bevy/</og:url>
<og:image>https://bevyengine.org/assets/bevy_logo_fill.png</og:image>
<og:description>Bevy is a refreshingly simple data-driven game engine built in Rust. It is free and open-source forever!</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://bevyengine.org/news/introducing-bevy/</dc:identifier>
</item>
<item>
<title>Mozilla is laying off 250 people and planning a ‘new focus’ on making money</title>
<link>https://www.theverge.com/2020/8/11/21363424/mozilla-layoffs-quarter-staff-250-people-new-revenue-focus</link>
<guid isPermaLink="true" >https://www.theverge.com/2020/8/11/21363424/mozilla-layoffs-quarter-staff-250-people-new-revenue-focus</guid>
<description>&lt;p id=&quot;ggs8SL&quot;&gt;Mozilla is laying off 250 people, about a quarter of its workforce, and plans to refocus some teams on projects designed to make money. The company will have roughly 750 employees going forward, a spokesperson confirmed.&lt;/p&gt;
&lt;p id=&quot;RtW3Zt&quot;&gt;The coronavirus pandemic “significantly impacted our revenue,” Mozilla CEO Mitchell Baker wrote in a blog post this morning. “As a result, our pre-COVID plan was no longer workable.”&lt;/p&gt;
&lt;p id=&quot;quqKo7&quot;&gt;Mozilla’s operations in Taipei will be closed as a result of the layoffs. The company didn’t otherwise say which teams will be impacted. Mozilla previously laid off 70 people in January, blaming the slow rollout of new revenue products, &lt;a href=&quot;https://techcrunch.com/2020/01/15/mozilla-lays-off-70-as-it-waits-for-subscription-products-to-generate-revenue/&quot;&gt;according to &lt;em&gt;TechCrunch&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;c-float-right&quot;&gt;
&lt;aside id=&quot;A9hQ8S&quot;&gt;&lt;q&gt;“I desperately wish there was some other way.”&lt;/q&gt;&lt;/aside&gt;&lt;/div&gt;
&lt;p id=&quot;ImxnR2&quot;&gt;As part of the layoffs, Baker laid out a series of new focuses for Mozilla to set a stronger course for the company. That includes focuses on building community, building new products that “mitigate harms” and “that people love and want” to use, and crucially, to build out new revenue streams.&lt;/p&gt;
&lt;p id=&quot;FyRfB0&quot;&gt;Mozilla makes most of its money from companies paying to make their search engine the default in Firefox. This includes deals with Baidu in China, Yandex in Russia, and most notably, Google in the US and most of the rest of the world. The company also makes money from royalties, subscriptions, and advertising, but those search deals still represent the “majority” of its revenue.&lt;/p&gt;
&lt;p id=&quot;rYQb0d&quot;&gt;Baker says Mozilla will initially focus on products such as Pocket, its VPN service, its VR chatroom Hubs, and new “security and privacy” tools. The company started launching paid consumer services over the past year, offering a news subscription and access to a VPN from directly within Firefox.&lt;/p&gt;
&lt;p id=&quot;lBqUVG&quot;&gt;Firefox is also getting a stronger focus on user growth “through differentiated user experiences.” That means reducing investment in other areas, though, such as in building out developer tools.&lt;/p&gt;
&lt;p id=&quot;hJWtN9&quot;&gt;Mozilla has had a rough decade, as Firefox’s market share dwindled and attempts at bigger projects — like a Firefox phone running Firefox OS — fell apart. Baker seems to recognize that Mozilla needs to meet people where they are, building products that people want to use on the platforms they’re already using. She became CEO in April and was appointed interim CEO in December 2019; Baker has been the chair of the Mozilla Foundation since 2003.&lt;/p&gt;
&lt;p id=&quot;7QvRYP&quot;&gt;“I desperately wish there was some other way to set Mozilla up for long term success in building a better internet,” Baker writes in her blog post. “But to go further, we must be organized to be able to think about a different world.”&lt;/p&gt;
</description>
<pubDate>Tue, 11 Aug 2020 17:12:35 +0000</pubDate>
<dc:creator>leothekim</dc:creator>
<og:description>&quot;I desperately wish there was some other way.&quot;</og:description>
<og:image>https://cdn.vox-cdn.com/thumbor/78RxNPEIrphXEabfHripYCBLLUA=/0x146:2040x1214/fit-in/1200x630/cdn.vox-cdn.com/uploads/chorus_asset/file/19704536/acastro_200207_3900_firefox_0001.0.jpg</og:image>
<og:title>Mozilla is laying off 250 people and planning a ‘new focus’ on making money</og:title>
<og:type>article</og:type>
<og:url>https://www.theverge.com/2020/8/11/21363424/mozilla-layoffs-quarter-staff-250-people-new-revenue-focus</og:url>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.theverge.com/2020/8/11/21363424/mozilla-layoffs-quarter-staff-250-people-new-revenue-focus</dc:identifier>
</item>
<item>
<title>Developer won’t get hit by a bus, they’ll get hired by Netflix</title>
<link>https://www.neomindlabs.com/post/your-developer-wont-get-hit-by-a-bus-theyll-get-hired-by-netflix</link>
<guid isPermaLink="true" >https://www.neomindlabs.com/post/your-developer-wont-get-hit-by-a-bus-theyll-get-hired-by-netflix</guid>
<description>&lt;p&gt;You may have heard of the “bus factor.” The strategy and processes designed to cover for the sudden loss of a teammate. The story goes: you want more than one person in your business to have domain knowledge because they might get hit by a bus! Your business would lose all that experience and expertise in one tragic accident. The premise in isolation sounds ridiculous, but mitigating the “bus factor” is serious business.&lt;/p&gt;
&lt;p&gt;Everything gets a lot easier if you select the right software and framework, primarily if you use Ruby on Rails. Rails itself is a full-stack framework that has a best practice for every piece of a web application. If you are committed to doing things “the Rails way,” you cut the total cost of ownership by A LOT. “Staying on the Rails” makes any new developer productive almost immediately (and will keep them “out of the weeds”). Sticking to the standards evangelized by the community and adding proper documentation (possibly in the form of useful tests) makes onboarding a breeze, which creates more productive developers, which makes hiring more accessible, which reduces your “bus factor.”&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;The only guaranteed way to save money is to spend it on reducing your “bus factor”. By investing in making the code of your application more straightforward and easier to understand, you make it easier to add developers and reduce the future occurrence of bugs. You’ll make working on your code more enjoyable (reducing the likelihood your developers will want to leave), and possibly most importantly: reduce the barriers (time/money) to building new features. If you haven’t been keeping an eye on this, and find yourself in a position to hire someone, then these tasks will be their first job &lt;strong&gt;every time you hire&lt;/strong&gt;.&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Thankfully, I have no personal experience with a colleague getting hit by a bus, but I know a few that have been hired by Netflix. Remember to look both ways before crossing a street and never underestimate the amount of money the FAANGs have to poach your talent. It is effortless to lose good talent. When (not if) your developer leaves to make $500k+ a year in the valley, you’ll be in a much better position with a lower bus factor to quickly fill the gap and keep moving forward.&lt;/p&gt;
&lt;p&gt;‍&lt;/p&gt;
</description>
<pubDate>Tue, 11 Aug 2020 16:34:02 +0000</pubDate>
<dc:creator>deltamidway</dc:creator>
<og:title>Your developer won’t get hit by a bus. They’ll get hired by Netflix!</og:title>
<og:description>Sticking to the standards evangelized by the community and adding proper documentation (possibly in the form of useful tests) makes onboarding a breeze, which creates more productive developers, which makes hiring more accessible, which reduces your “bus factor.”</og:description>
<og:image></og:image>
<og:type>website</og:type>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.neomindlabs.com/post/your-developer-wont-get-hit-by-a-bus-theyll-get-hired-by-netflix</dc:identifier>
</item>
<item>
<title>The case for why Google should be regulated as a public utility</title>
<link>https://www.rankscience.com/blog/why-google-should-be-regulated-as-a-public-utility</link>
<guid isPermaLink="true" >https://www.rankscience.com/blog/why-google-should-be-regulated-as-a-public-utility</guid>
<description>&lt;p&gt;&lt;img class=&quot;aligncenter size-full wp-image-451&quot; src=&quot;https://www.rankscience.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-11-at-10.49.49-AM.png&quot; alt=&quot;google monopoly regulation&quot; width=&quot;655&quot; height=&quot;340&quot; srcset=&quot;https://www.rankscience.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-11-at-10.49.49-AM.png 655w, https://www.rankscience.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-11-at-10.49.49-AM-300x156.png 300w, https://www.rankscience.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-11-at-10.49.49-AM-600x311.png 600w&quot; sizes=&quot;(max-width: 655px) 100vw, 655px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;alignnone&quot; src=&quot;https://pbs.twimg.com/profile_images/1178728529187495937/xbH7cGaT_400x400.jpg&quot; alt=&quot;Ryan Bednar&quot; width=&quot;55&quot; height=&quot;55&quot;/&gt;&lt;/p&gt;
&lt;p&gt;By &lt;strong&gt;&lt;a href=&quot;https://twitter.com/ryanbed&quot;&gt;Ryan Bednar&lt;/a&gt;&lt;/strong&gt; (CEO of &lt;a href=&quot;https://www.rankscience.com&quot;&gt;RankScience&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Last week on July 29, 2020, the CEOs of the most powerful tech companies in the world—including Google, Facebook, Amazon, and Apple—were called in to testify in front of the House Antitrust Subcommittee. The event was widely considered to be mostly political theater, a performance act for Congress to look like they’re hard on Big Tech. But the tech titans took it seriously, knowing the one thing that actually determines whether antitrust legislation moves forward: how each company fares in the court of public opinion. The company taking the most heat from both Democrats and Republicans was, without a doubt, Google. They’re also the company that’s most likely to be regulated. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;The antitrust case against Google is the most straightforward of any of the big tech companies. Google started out as an almost benevolent index of the world wide web, showing users ten blue, unbiased links for whatever users were searching for. But over the years, Google has steadily favored showing their own products above organic search results, even when their own products arguably aren’t as good. Rand Fishkin&lt;/span&gt; &lt;a href=&quot;https://sparktoro.com/blog/google-in-2020-from-everyones-search-engine-to-everyones-competitor/&quot;&gt;&lt;span&gt;says that&lt;/span&gt;&lt;/a&gt; &lt;span&gt;in 2020, Google has gone “from everyone’s search engine to everyone’s competitor.”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;As the founder of an SEO company,&lt;/span&gt; &lt;a href=&quot;https://www.rankscience.com/&quot;&gt;&lt;span&gt;RankScience&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, and as someone who’s been working in growth and digital marketing for more than a decade, I’ve had a front-row seat to watch Google devour screen real estate to feature its own products. From my point of view, Google is squeezing businesses more than ever and the game is increasingly rigged in Google’s favor. Small and local businesses have almost no chance at succeeding with SEO because they don’t have the budget or resources for it. To make things worse, so much screen real estate is now taken up by Google’s own products, small businesses have no choice but to pay Google for search traffic. Even if users are searching directly for a business’s name, Google controls the appearance and experience of interacting with that business.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Local restaurants, for example, are forced to use Google’s partner ChowNow in order to have convenient “Order Pickup” or “Order Delivery” buttons in search results for their own name, which charges an added hefty fee to the restaurant for each order, hurting their already thin margins. During the global pandemic, this is an incredibly predatory shakedown. No small business should be forced to use Google’s preferred ordering mechanism, and pay a tax to Google, simply to allow a customer to search for their business.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter wp-image-445 size-full&quot; src=&quot;https://www.rankscience.com/wp-content/uploads/2020/08/IMG_7745-582x1024.png&quot; alt=&quot;google chownow local businesses&quot; width=&quot;582&quot; height=&quot;1024&quot; srcset=&quot;https://www.rankscience.com/wp-content/uploads/2020/08/IMG_7745-582x1024.png 582w, https://www.rankscience.com/wp-content/uploads/2020/08/IMG_7745-171x300.png 171w, https://www.rankscience.com/wp-content/uploads/2020/08/IMG_7745-768x1351.png 768w, https://www.rankscience.com/wp-content/uploads/2020/08/IMG_7745-600x1055.png 600w, https://www.rankscience.com/wp-content/uploads/2020/08/IMG_7745.png 821w&quot; sizes=&quot;(max-width: 582px) 100vw, 582px&quot;/&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;Ben Thompson of Stratechery wrote a great post summarizing the &lt;a href=&quot;https://stratechery.com/2019/tech-and-antitrust/&quot;&gt;antitrust issues each tech behemoth has&lt;/a&gt;, yet highlights his issues with Google’s position: “Google’s anticompetitive behavior is relatively clear…the company consistently favors its own properties in search results, particularly ‘above-the-fold’…that is, results that are not actually search results but which seek to answer the user’s query directly.” A few examples:&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter wp-image-446&quot; src=&quot;https://www.rankscience.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-11-at-10.23.49-AM.png&quot; alt=&quot;ben thompson stratechery google antitrust regulation issues&quot; srcset=&quot;https://www.rankscience.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-11-at-10.23.49-AM.png 419w, https://www.rankscience.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-11-at-10.23.49-AM-300x179.png 300w&quot; sizes=&quot;(max-width: 419px) 100vw, 419px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Take a look below at how Google-owned YouTube results take up the vast majority of the screen on a simple video search. Other competing video products like Vimeo or Twitch don’t get the same visual treatment or preference in search results. You can barely see the first organic search result for this query:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter wp-image-447&quot; src=&quot;https://www.rankscience.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-05-at-9.53.37-AM-929x1024.png&quot; alt=&quot;google YouTube video search results&quot; srcset=&quot;https://www.rankscience.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-05-at-9.53.37-AM-929x1024.png 929w, https://www.rankscience.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-05-at-9.53.37-AM-272x300.png 272w, https://www.rankscience.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-05-at-9.53.37-AM-768x847.png 768w, https://www.rankscience.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-05-at-9.53.37-AM-600x662.png 600w, https://www.rankscience.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-05-at-9.53.37-AM.png 956w&quot; sizes=&quot;(max-width: 929px) 100vw, 929px&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;The problem gets even worse when we’re talking about more lucrative search categories, like flight search or finding a hotel. On the flight search example below (which also includes a Covid-19 travel warning), Google Ads and Google’s own Flights product take up the entire screen, any organic search results pushed below the fold. When searching for “hotels near cape may, nj” the actual organic search results were almost two pages below the fold. How many users do you think scroll that far, instead of clicking on Google’s products?&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter wp-image-448&quot; src=&quot;https://www.rankscience.com/wp-content/uploads/2020/08/google-flight-search-seo.png&quot; alt=&quot;google flight search seo antitrust&quot; srcset=&quot;https://www.rankscience.com/wp-content/uploads/2020/08/google-flight-search-seo.png 443w, https://www.rankscience.com/wp-content/uploads/2020/08/google-flight-search-seo-260x300.png 260w&quot; sizes=&quot;(max-width: 443px) 100vw, 443px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter wp-image-449&quot; src=&quot;https://www.rankscience.com/wp-content/uploads/2020/08/google-hotel-search.png&quot; alt=&quot;google hotel search&quot; srcset=&quot;https://www.rankscience.com/wp-content/uploads/2020/08/google-hotel-search.png 255w, https://www.rankscience.com/wp-content/uploads/2020/08/google-hotel-search-149x300.png 149w&quot; sizes=&quot;(max-width: 255px) 100vw, 255px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Yelp, TripAdvisor, and other companies have been complaining about unfair treatment by Google&lt;/span&gt; &lt;a href=&quot;https://www.nytimes.com/2017/07/01/technology/yelp-google-european-union-antitrust.html&quot;&gt;&lt;span&gt;for years&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, but left unfettered, Google is only going to continue to expand their own products into more search categories over time. The list of companies with grievances against Google is growing. The landscape for businesses to compete in search is increasingly competitive, and the companies who succeed in search over the long-run are using advanced tactics like SEO A/B testing and NLP content optimization, which the average business can’t afford.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;On a recent episode of the&lt;/span&gt; &lt;a href=&quot;https://www.allinpodcast.co/&quot;&gt;&lt;span&gt;All-In Podcast&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, Jason Calacanis, Chamath Palihapitiya, and esteemed guests engage in a rigorous and detailed debate about Big Tech antitrust and censorship (I recommend&lt;/span&gt; &lt;a href=&quot;https://open.spotify.com/episode/0Ewtt593ZsFT5QXJSB97wR?si=Ej5Bx4UMRwqrU4ruSog06w&quot;&gt;&lt;span&gt;giving it a listen&lt;/span&gt;&lt;/a&gt; &lt;span&gt;if you haven’t, as it covers the strongest arguments both for and against Big Tech regulation). Chamath says what I think most people don’t want to admit:  &lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;32&quot;&gt;
&lt;p&gt;&lt;strong&gt;The internet is now a pervasive and critical part of human infrastructure. As such, there needs to be people that regulate and manage the internet&lt;/strong&gt;&lt;span&gt;—the same way that the FAA manages and regulates planes, and wind turbines, etc.… Let’s take aviation [for example], it’s impossible for you to go into your garage and build a plane that takes people from point A to point B. Take agriculture [for example], it’s impossible for you to build up a farm and supply it to Safeway, without any checks and balances. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;There are very specific kinds of businesses and business models that should be overseen. The first and most important thing is a body [that] oversees the collection of user data and privacy and identification. The second one is essentially something that tears the fig leaf off of internet companies and says, you know what, you are the equivalent of a publisher and a platform, some weird hybrid that we didn’t think could exist when we wrote these rules, so we’re now going to adapt these rules. If you think about it, nobody is happy with the internet publishers today. The left thinks that it skews right, the right thinks it skews left—everybody is confused. Nobody gets what they want and somebody has to step in. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;You go to a movie and it tells you who can go to the movie or not. You buy an album and it tells you whether there’s explicit lyrics or not. Before you turn on the TV, there’s some rating agency that tells you whether your kid should be watching with you. My point is: what is the equivalent version here? We all need to think about what it is, but for there to be nothing is crazy. &lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt;Google search is fundamentally the gateway to the internet for the majority of people and an arbiter of truth in our digital age. Google has a&lt;/span&gt; &lt;a href=&quot;https://www.internetlivestats.com/google-search-statistics/&quot;&gt;&lt;span&gt;dominant market monopoly position&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, a treasure trove of sensitive information on hundreds of millions of users. It’s incentivized to return value to shareholders and extract more value from search over time, which is at odds with doing right by businesses and citizens. Their business model doesn’t require them to act in the long-term interest of businesses and citizens, and because they have a monopoly on a utility that’s become essential to our day-to-day lives, the only solution is for the government to enforce guidelines on fair behavior within search.&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;Related Posts&lt;/h3&gt;
&lt;p&gt;&lt;img class=&quot;size-full wp-image-428 alignleft&quot; src=&quot;https://www.rankscience.com/wp-content/uploads/2020/07/Outline_Logo.png&quot; alt=&quot;&quot; width=&quot;157&quot; height=&quot;157&quot; srcset=&quot;https://www.rankscience.com/wp-content/uploads/2020/07/Outline_Logo.png 157w, https://www.rankscience.com/wp-content/uploads/2020/07/Outline_Logo-150x150.png 150w&quot; sizes=&quot;(max-width: 157px) 100vw, 157px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Get Data-Driven about growing your traffic with &lt;a href=&quot;https://www.rankscience.com&quot;&gt;RankScience&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;button&gt;&lt;a href=&quot;https://www.rankscience.com/demo&quot;&gt; Free 45 Minute Strategy Session&lt;/a&gt;&lt;/button&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 11 Aug 2020 15:00:05 +0000</pubDate>
<dc:creator>abhivyas5</dc:creator>
<og:type>article</og:type>
<og:title>The case for why Google should be regulated as a public utility | RankScience</og:title>
<og:description>By Ryan Bednar (CEO of RankScience) Last week on July 29, 2020, the CEOs of the most powerful tech companies in the world—including Google, Facebook, Amazon, and Apple—were called in to testify in front of the House Antitrust Subcommittee. The event was widely considered to be mostly political theater, a performance act for Congress to […]</og:description>
<og:url>https://www.rankscience.com/blog/why-google-should-be-regulated-as-a-public-utility</og:url>
<og:image>https://www.rankscience.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-11-at-10.49.49-AM.png</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.rankscience.com/blog/why-google-should-be-regulated-as-a-public-utility</dc:identifier>
</item>
<item>
<title>Mozilla lays off 250 employees while it refocuses on commercial products</title>
<link>https://blog.mozilla.org/blog/2020/08/11/changing-world-changing-mozilla/</link>
<guid isPermaLink="true" >https://blog.mozilla.org/blog/2020/08/11/changing-world-changing-mozilla/</guid>
<description>&lt;p&gt;This is a time of change for the internet and for Mozilla. From combatting a lethal virus and battling systemic racism to protecting individual privacy — one thing is clear: an open and accessible internet is essential to the fight.&lt;/p&gt;
&lt;p&gt;Mozilla exists so the internet can help the world collectively meet the range of challenges a moment like this presents. Firefox is a part of this. But we know we also need to go beyond the browser to give people new products and technologies that both excite them and represent their interests. Over the last while, it has been clear that Mozilla is not structured properly to create these new things — and to &lt;a href=&quot;https://www.independent.co.uk/independentpremium/voices/coronavirus-internet-online-hate-learning-surveillance-a9616451.html&quot;&gt;build the better internet we all deserve&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Today we announced a significant restructuring of Mozilla Corporation. This will strengthen our ability to build and invest in products and services that will give people alternatives to conventional Big Tech. Sadly, the changes also include a significant reduction in our workforce by approximately 250 people. These are individuals of exceptional professional and personal caliber who have made outstanding contributions to who we are today. To each of them, I extend my heartfelt thanks and deepest regrets that we have come to this point. This is a humbling recognition of the realities we face, and what is needed to overcome them.&lt;/p&gt;
&lt;p&gt;As I shared in the &lt;a href=&quot;https://blog.mozilla.org/wp-content/uploads/2020/08/Message-to-Employees-Change-in-Difficult-Times.pdf&quot;&gt;internal message&lt;/a&gt; sent to our employees today, our pre-COVID plan for 2020 included a great deal of change already: building a better internet by creating new kinds of value in Firefox; investing in innovation and creating new products; and adjusting our finances to ensure stability over the long term.  Economic conditions resulting from the global pandemic have significantly impacted our revenue. As a result, our pre-COVID plan was no longer workable. Though we’ve been talking openly with our employees about the need for change — including the likelihood of layoffs — since the spring, it was no easier today when these changes became real. I desperately wish there was some other way to set Mozilla up for long term success in building a better internet.&lt;/p&gt;
&lt;p&gt;But to go further, we must be organized to be able to think about a different world. To imagine that technology will become embedded in our world even more than it is, and we want that technology to have different characteristics and values than we experience today.&lt;/p&gt;
&lt;p&gt;So going forward we will be smaller. We’ll also be organizing ourselves very differently, acting more quickly and nimbly. We’ll experiment more. We’ll adjust more quickly. We’ll join with allies outside of our organization more often and more effectively. We’ll meet people where they are. We’ll become great at expressing and building our core values into products and programs that speak to today’s issues. We’ll join and build with all those who seek openness, decency, empowerment and common good in online life.&lt;/p&gt;
&lt;p&gt;I believe this vision of change will make a difference — that it can allow us to become a Mozilla that excites people and shapes the agenda of the internet. I also realize this vision will feel abstract to many. With this in mind, we have mapped out five specific areas to focus on as we roll out this new structure over the coming months:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;strong&gt;New focus on product&lt;/strong&gt;. Mozilla must be a world-class, modern, multi-product internet organization. That means diverse, representative, focused on people outside of our walls, solving problems, building new products, engaging with users and doing the magic of mixing tech with &lt;a href=&quot;https://www.mozilla.org/en-US/about/manifesto/&quot;&gt;our values&lt;/a&gt;. To start, that means products that mitigate harms or address the kinds of the problems that people face today. Over the longer run, our goal is to build new experiences that people love and want, that have better values and better characteristics inside those products.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;New mindset&lt;/strong&gt;. The internet has become &lt;em&gt;the&lt;/em&gt; platform. We love the traits of it — the decentralization, its permissionless innovation, the open source underpinnings of it, and the standards part — we love it all. But to enable these changes, we must shift our collective mindset from a place of defending, protecting, sometimes even huddling up and trying to keep a piece of what we love to one that is proactive, curious, and engaged with people out in the world. We will become the modern organization we aim to be — combining product, technology and advocacy — when we are building new things, making changes within ourselves and seeing how the traits of the past can show up in new ways in the future.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;New focus on technology&lt;/strong&gt;. Mozilla is a technical powerhouse of the internet activist movement. And we must stay that way. We must provide leadership, test out products, and draw businesses into areas that aren’t traditional web technology. The internet is the platform now with ubiquitous web technologies built into it, but vast new areas are developing (like &lt;a href=&quot;https://hacks.mozilla.org/2019/11/announcing-the-bytecode-alliance/&quot;&gt;Wasmtime and the Bytecode Alliance vision of nanoprocesses&lt;/a&gt;). Our vision and abilities should play in those areas too.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;New focus on community&lt;/strong&gt;. Mozilla must continue to be part of something larger than ourselves, part of the group of people looking for a better internet. Our open source volunteers today — as well as the hundreds of thousands of people who donate to and participate in Mozilla Foundation’s advocacy work — are a precious and critical part of this. But we also need to go further and think about community in new ways. We must be increasingly open to joining others on &lt;em&gt;their&lt;/em&gt; &lt;a href=&quot;https://www.youtube.com/watch?v=L2QjjvEFSS4&amp;amp;feature=youtu.be&quot;&gt;missions&lt;/a&gt;, to contribute to the better internet &lt;a href=&quot;https://twitter.com/mozillabuilders/status/1268972334003687425&quot;&gt;&lt;em&gt;they’re&lt;/em&gt;&lt;/a&gt; &lt;a href=&quot;https://www.youtube.com/watch?v=iolPqbErKL0&quot;&gt;building&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;New focus on economics&lt;/strong&gt;. Recognizing that the old model where everything was free has consequences, means we must explore a range of different business opportunities and alternate value exchanges. How can we lead towards business models that honor and protect people while creating opportunities for our business to thrive? How can we, or others who want a better internet, or those who feel like a different balance should exist between social and public benefit and private profit offer an alternative? We need to identify those people and join them. We must learn and expand different ways to support ourselves and build a business that isn’t what we see today.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;We’re fortunate that Firefox and Mozilla retain a high degree of trust in the world. Trust and a feeling of authenticity feel unusual in tech today. But there is a sense that people want more from us. They want to work with us, to build with us. The changes we are making today are hard. But with these changes we believe we’ll be ready to meet these people — and the challenges and opportunities facing the future of the internet — head on.&lt;/p&gt;
</description>
<pubDate>Tue, 11 Aug 2020 14:03:56 +0000</pubDate>
<dc:creator>rebelwebmaster</dc:creator>
<og:url>https://blog.mozilla.org/blog/2020/08/11/changing-world-changing-mozilla</og:url>
<og:title>Changing World, Changing Mozilla – The Mozilla Blog</og:title>
<og:description>This is a time of change for the internet and for Mozilla. From combatting a lethal virus and battling systemic racism to protecting individual privacy — one thing is clear: ...</og:description>
<og:image>https://blog.mozilla.org/wp-content/uploads/2018/03/Pasted-image-at-2018_03_07-09_16-PM.png</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.mozilla.org/blog/2020/08/11/changing-world-changing-mozilla/</dc:identifier>
</item>
<item>
<title>Single Page Applications using Rust</title>
<link>http://www.sheshbabu.com/posts/rust-wasm-yew-single-page-application/</link>
<guid isPermaLink="true" >http://www.sheshbabu.com/posts/rust-wasm-yew-single-page-application/</guid>
<description>&lt;p&gt;WebAssembly (wasm) allows code written in languages other than JavaScript to run on browsers. If you haven’t been paying attention, all the major browsers support wasm and &lt;a href=&quot;https://caniuse.com/#feat=wasm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;globally more than 90% of users&lt;/a&gt; have browsers that can run wasm.&lt;/p&gt;
&lt;p&gt;Since Rust compiles to wasm, is it possible to build SPAs (Single Page Applications) purely in Rust and without writing a single line of JavaScript? The short answer is YES! Read on to learn more or visit the &lt;a href=&quot;https://rustmart-yew.netlify.app&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;demo site&lt;/a&gt; if you can’t contain your excitement!&lt;/p&gt;
&lt;p&gt;We’ll be building a simple ecommerce site called “RustMart” that will have 2 pages:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;HomePage - list all the products that the customer can add to cart&lt;/li&gt;
&lt;li&gt;ProductDetailPage - show the product details when a product card is clicked&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://www.sheshbabu.com/images/2020-rust-wasm-yew-single-page-application/rust-wasm-yew-single-page-application-1.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;I’m using this example as it tests the minimal set of capabilities required to build modern SPAs:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Navigate between multiple pages without page reload&lt;/li&gt;
&lt;li&gt;Make network requests without page reload&lt;/li&gt;
&lt;li&gt;Ability to reuse UI components across multiple pages&lt;/li&gt;
&lt;li&gt;Update components in different layers of the UI hierarchy&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;Setup&quot;&gt;Setup&lt;/h2&gt;
&lt;p&gt;Follow this &lt;a href=&quot;https://www.rust-lang.org/tools/install&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;link&lt;/a&gt; to install Rust if you haven’t done so already.&lt;/p&gt;
&lt;p&gt;Install these Rust tools:&lt;/p&gt;
&lt;pre class=&quot; language-shell&quot;&gt;
&lt;code class=&quot;language-shell&quot;&gt;$ cargo install wasm-pack          # Compile Rust to Wasm and generate JS interop code
$ cargo install cargo-make         # Task runner
$ cargo install simple-http-server # Simple server to serve assets&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Create a new project:&lt;/p&gt;
&lt;pre class=&quot; language-shell&quot;&gt;
&lt;code class=&quot;language-shell&quot;&gt;$ cargo new --lib rustmart &amp;amp;&amp;amp; cd rustmart&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;We’ll be using the &lt;a href=&quot;https://yew.rs&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;Yew&lt;/code&gt;&lt;/a&gt; library to build UI components. Let’s add this and wasm dependencies to &lt;code&gt;Cargo.toml&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot; language-toml&quot;&gt;
&lt;code class=&quot;language-toml&quot;&gt;[lib]
crate-type = [&quot;cdylib&quot;, &quot;rlib&quot;]

[dependencies]
yew = &quot;0.17&quot;
wasm-bindgen = &quot;0.2&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Create a new file named &lt;code&gt;Makefile.toml&lt;/code&gt; and add this:&lt;/p&gt;
&lt;pre class=&quot; language-toml&quot;&gt;
&lt;code class=&quot;language-toml&quot;&gt;[tasks.build]
command = &quot;wasm-pack&quot;
args = [&quot;build&quot;, &quot;--dev&quot;, &quot;--target&quot;, &quot;web&quot;, &quot;--out-name&quot;, &quot;wasm&quot;, &quot;--out-dir&quot;, &quot;./static&quot;]
watch = { ignore_pattern = &quot;static/*&quot; }

[tasks.serve]
command = &quot;simple-http-server&quot;
args = [&quot;-i&quot;, &quot;./static/&quot;, &quot;-p&quot;, &quot;3000&quot;, &quot;--nocache&quot;, &quot;--try-file&quot;, &quot;./static/index.html&quot;]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Start the build task:&lt;/p&gt;
&lt;pre class=&quot; language-shell&quot;&gt;
&lt;code class=&quot;language-shell&quot;&gt;$ cargo make build&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If you’re new to Rust, I’ve written some &lt;a href=&quot;http://www.sheshbabu.com/tags/Rust-Beginners/&quot;&gt;guides for beginners&lt;/a&gt; which will help you follow this post better.&lt;/p&gt;
&lt;h2 id=&quot;Hello-World&quot;&gt;Hello World&lt;/h2&gt;
&lt;p&gt;Let’s start with a simple “hello world” example:&lt;/p&gt;
&lt;p&gt;Create &lt;code&gt;static/index.html&lt;/code&gt; and add this:&lt;/p&gt;
&lt;pre class=&quot; language-html&quot;&gt;
&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token doctype&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;en&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;charset&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;utf-8&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;RustMart&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;module&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;
      &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; init &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/wasm.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;link&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;shortcut icon&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;#&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Add this to &lt;code&gt;src/lib.rs&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot; language-rust&quot;&gt;
&lt;code class=&quot;language-rust&quot;&gt;
&lt;span class=&quot;token keyword&quot;&gt;use&lt;/span&gt; wasm_bindgen&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;prelude&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;use&lt;/span&gt; yew&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;prelude&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; Hello &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;impl&lt;/span&gt; Component &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; Hello &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; Message &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; Properties &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;_&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Self&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;Properties&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; _&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ComponentLink&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Self&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&amp;gt;&lt;/span&gt; Self &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        Self &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; _&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Self&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;Message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&amp;gt;&lt;/span&gt; ShouldRender &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; _&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Self&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;Properties&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&amp;gt;&lt;/span&gt; ShouldRender &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&amp;gt;&lt;/span&gt; Html &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token macro-rules function&quot;&gt;html!&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;span&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token attribute attr-name&quot;&gt;#[wasm_bindgen(start)]&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;run_app&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    App&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Hello&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mount_to_body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Lot of things going on but you can see that we’re creating a new component named “Hello” that renders &lt;code&gt;&amp;lt;span&amp;gt;Hello World!&amp;lt;/span&amp;gt;&lt;/code&gt; into the DOM. We’ll learn more about Yew components later.&lt;/p&gt;
&lt;p&gt;Start the serve task in a new terminal and load &lt;code&gt;http://localhost:3000&lt;/code&gt; in your browser&lt;/p&gt;
&lt;pre class=&quot; language-shell&quot;&gt;
&lt;code class=&quot;language-shell&quot;&gt;$ cargo make serve&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://www.sheshbabu.com/images/2020-rust-wasm-yew-single-page-application/image-1.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;It works!! It’s only “hello world” but this is fully written in Rust.&lt;/p&gt;
&lt;p&gt;Let’s learn about components and other SPA concepts before proceeding further.&lt;/p&gt;
&lt;h2 id=&quot;Thinking-in-Components&quot;&gt;Thinking in Components&lt;/h2&gt;
&lt;p&gt;Building UIs by composing components and passing data in a unidirectional way is a paradigm shift in the frontend world. It’s a huge improvement in the way we reason about UI and it’s very hard to go back to imperative DOM manipulation once you get used to this.&lt;/p&gt;
&lt;p&gt;A &lt;code&gt;Component&lt;/code&gt; in libraries like React, Vue, Yew, Flutter etc have these features:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Ability to be composed into bigger components&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Props&lt;/code&gt; - Pass data and callbacks from that component to its child components.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;State&lt;/code&gt; - Manipulate state local to that component.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AppState&lt;/code&gt; - Manipulate global state.&lt;/li&gt;
&lt;li&gt;Listen to lifecycle events like “Instantiated”, “Mounted in DOM” etc&lt;/li&gt;
&lt;li&gt;Perform side effects like fetching remote data, manipulating localstorage etc&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;A component gets updated (re-rendered) when one of the following happens:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Parent component is re-rendered&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Props&lt;/code&gt; changes&lt;/li&gt;
&lt;li&gt;&lt;code&gt;State&lt;/code&gt; changes&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AppState&lt;/code&gt; changes&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;So, instead of imperatively updating the UI when user interaction, network requests etc happen, we update the data (Props, State, AppState) and the UI is updated based on this data. This what someone means when they say “UI is a function of state”.&lt;/p&gt;
&lt;p&gt;The exact details differ across different libraries but this should give you a general idea. If you’re new to this, this way of thinking might take sometime to “click” and get used to.&lt;/p&gt;
&lt;h2 id=&quot;HomePage&quot;&gt;HomePage&lt;/h2&gt;
&lt;p&gt;Let’s build the HomePage first. We’ll be building the HomePage as a monolithic component and later decompose it into smaller reusable components.&lt;/p&gt;
&lt;p&gt;Let’s create the following files:&lt;/p&gt;
&lt;pre class=&quot; language-rust&quot;&gt;
&lt;code class=&quot;language-rust&quot;&gt;
&lt;span class=&quot;token keyword&quot;&gt;use&lt;/span&gt; yew&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;prelude&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; Home &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;impl&lt;/span&gt; Component &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; Home &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; Message &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; Properties &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;_&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Self&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;Properties&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; _&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ComponentLink&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Self&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&amp;gt;&lt;/span&gt; Self &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        Self &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; _&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Self&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;Message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&amp;gt;&lt;/span&gt; ShouldRender &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; _&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Self&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;Properties&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&amp;gt;&lt;/span&gt; ShouldRender &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&amp;gt;&lt;/span&gt; Html &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token macro-rules function&quot;&gt;html!&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Home Sweet Home!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;span&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot; language-rust&quot;&gt;
&lt;code class=&quot;language-rust&quot;&gt;
&lt;span class=&quot;token keyword&quot;&gt;mod&lt;/span&gt; home&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;use&lt;/span&gt; home&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;Home&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Let’s update the &lt;code&gt;src/lib.rs&lt;/code&gt; to import the HomePage component:&lt;/p&gt;
&lt;pre class=&quot; language-diff&quot;&gt;
&lt;code class=&quot;language-diff&quot;&gt;  // src/lib.rs
&lt;span class=&quot;token inserted&quot;&gt;+ mod pages;&lt;/span&gt;

&lt;span class=&quot;token inserted&quot;&gt;+ use pages::Home;&lt;/span&gt;
  use wasm_bindgen::prelude::*;
  use yew::prelude::*;

&lt;span class=&quot;token deleted&quot;&gt;- struct Hello {}&lt;/span&gt;

&lt;span class=&quot;token deleted&quot;&gt;- impl Component for Hello {&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-     type Message = ();&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-     type Properties = ();&lt;/span&gt;

&lt;span class=&quot;token deleted&quot;&gt;-     fn create(_: Self::Properties, _: ComponentLink&amp;lt;Self&amp;gt;) -&amp;gt; Self {&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-         Self {}&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-     }&lt;/span&gt;

&lt;span class=&quot;token deleted&quot;&gt;-     fn update(&amp;amp;mut self, _: Self::Message) -&amp;gt; ShouldRender {&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-         true&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-     }&lt;/span&gt;

&lt;span class=&quot;token deleted&quot;&gt;-     fn change(&amp;amp;mut self, _: Self::Properties) -&amp;gt; ShouldRender {&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-         true&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-     }&lt;/span&gt;

&lt;span class=&quot;token deleted&quot;&gt;-     fn view(&amp;amp;self) -&amp;gt; Html {&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-         html! { &amp;lt;span&amp;gt;{&quot;Hello World!&quot;}&amp;lt;/span&amp;gt; }&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-     }&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;- }&lt;/span&gt;

  #[wasm_bindgen(start)]
  pub fn run_app() {
&lt;span class=&quot;token deleted&quot;&gt;-   App::&amp;lt;Hello&amp;gt;::new().mount_to_body();&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+   App::&amp;lt;Home&amp;gt;::new().mount_to_body();&lt;/span&gt;
  }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now, you should see “Home Sweet Home!” instead of “Hello World!” rendered in your browser.&lt;/p&gt;
&lt;p&gt;Let’s start designing the &lt;code&gt;State&lt;/code&gt; of this component:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;We need to store a list of products retrieved from server&lt;/li&gt;
&lt;li&gt;Store the products the user has added to cart&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;We create a simple struct to hold the &lt;code&gt;Product&lt;/code&gt; details:&lt;/p&gt;
&lt;pre class=&quot; language-rust&quot;&gt;
&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; Product &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; String&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    description&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; String&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    image&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; String&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    price&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; f64&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;We then create a new struct &lt;code&gt;State&lt;/code&gt; with field called &lt;code&gt;products&lt;/code&gt; to hold the products from server:&lt;/p&gt;
&lt;pre class=&quot; language-rust&quot;&gt;
&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; State &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    products&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Vec&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Product&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Here’s the full list of changes in the HomePage component:&lt;/p&gt;
&lt;pre class=&quot; language-diff&quot;&gt;
&lt;code class=&quot;language-diff&quot;&gt;  use yew::prelude::*;

&lt;span class=&quot;token inserted&quot;&gt;+ struct Product {&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+     id: i32,&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+     name: String,&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+     description: String,&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+     image: String,&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+     price: f64,&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+ }&lt;/span&gt;

&lt;span class=&quot;token inserted&quot;&gt;+ struct State {&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+     products: Vec&amp;lt;Product&amp;gt;,&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+ }&lt;/span&gt;

&lt;span class=&quot;token deleted&quot;&gt;- pub struct Home {}&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+ pub struct Home {&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+     state: State,&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+ }&lt;/span&gt;

  impl Component for Home {
      type Message = ();
      type Properties = ();

      fn create(_: Self::Properties, _: ComponentLink&amp;lt;Self&amp;gt;) -&amp;gt; Self {
&lt;span class=&quot;token inserted&quot;&gt;+       let products: Vec&amp;lt;Product&amp;gt; = vec![&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+           Product {&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+               id: 1,&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+               name: &quot;Apple&quot;.to_string(),&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+               description: &quot;An apple a day keeps the doctor away&quot;.to_string(),&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+               image: &quot;/products/apple.png&quot;.to_string(),&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+               price: 3.65,&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+           },&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+           Product {&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+               id: 2,&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+               name: &quot;Banana&quot;.to_string(),&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+               description: &quot;An old banana leaf was once young and green&quot;.to_string(),&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+               image: &quot;/products/banana.png&quot;.to_string(),&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+               price: 7.99,&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+           },&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+       ];&lt;/span&gt;

&lt;span class=&quot;token deleted&quot;&gt;-       Self {}&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+       Self {&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+           state: State {&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+               products,&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+           },&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+       }&lt;/span&gt;
      }

      fn update(&amp;amp;mut self, _: Self::Message) -&amp;gt; ShouldRender {
          true
      }

      fn change(&amp;amp;mut self, _: Self::Properties) -&amp;gt; ShouldRender {
          true
      }

      fn view(&amp;amp;self) -&amp;gt; Html {
&lt;span class=&quot;token inserted&quot;&gt;+        let products: Vec&amp;lt;Html&amp;gt; = self&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+            .state&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+            .products&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+            .iter()&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+            .map(|product: &amp;amp;Product| {&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+                html! {&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+                  &amp;lt;div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+                    &amp;lt;img src={&amp;amp;product.image}/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+                    &amp;lt;div&amp;gt;{&amp;amp;product.name}&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+                    &amp;lt;div&amp;gt;{&quot;$&quot;}{&amp;amp;product.price}&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+                  &amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+                }&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+            })&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+            .collect();&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+        html! { &amp;lt;span&amp;gt;{products}&amp;lt;/span&amp;gt; }&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-        html! { &amp;lt;span&amp;gt;{&quot;Home!&quot;}&amp;lt;/span&amp;gt; }&lt;/span&gt;
      }
  }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;create&lt;/code&gt; lifecycle method is invoked when the component is created and this is where we set the initial state. For the time being, we’ve created a mock list of products and assigned it to the &lt;code&gt;products&lt;/code&gt; inside the state as initial value. Later, we’ll fetch this list using network request.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;view&lt;/code&gt; lifecycle method is invoked when the component is rendered. Here we’ve iterated over &lt;code&gt;products&lt;/code&gt; inside state to generate product cards. If you’re familiar with React, this is same as the &lt;code&gt;render&lt;/code&gt; method and the &lt;code&gt;html!&lt;/code&gt; macro is similar to &lt;code&gt;JSX&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Save some random images as &lt;code&gt;static/products/apple.png&lt;/code&gt; and &lt;code&gt;static/products/banana.png&lt;/code&gt; and you’ll get this UI:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.sheshbabu.com/images/2020-rust-wasm-yew-single-page-application/image-2.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Let’s implement the “add to cart” functionality:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;We keep track of all products added to cart in a new state field called &lt;code&gt;cart_products&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;We render a “add to cart” button for each product&lt;/li&gt;
&lt;li&gt;Add logic to update the &lt;code&gt;cart_products&lt;/code&gt; state when “add to cart” button is clicked&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot; language-diff&quot;&gt;
&lt;code class=&quot;language-diff&quot;&gt;  use yew::prelude::*;

&lt;span class=&quot;token inserted&quot;&gt;+ #[derive(Clone)]&lt;/span&gt;
  struct Product {
      id: i32,
      name: String,
      description: String,
      image: String,
      price: f64,
  }

&lt;span class=&quot;token inserted&quot;&gt;+ struct CartProduct {&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+     product: Product,&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+     quantity: i32,&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+ }&lt;/span&gt;

  struct State {
      products: Vec&amp;lt;Product&amp;gt;,
&lt;span class=&quot;token inserted&quot;&gt;+     cart_products: Vec&amp;lt;CartProduct&amp;gt;,&lt;/span&gt;
  }

  pub struct Home {
      state: State,
&lt;span class=&quot;token inserted&quot;&gt;+     link: ComponentLink&amp;lt;Self&amp;gt;,&lt;/span&gt;
  }

&lt;span class=&quot;token inserted&quot;&gt;+ pub enum Msg {&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+     AddToCart(i32),&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+ }&lt;/span&gt;

  impl Component for Home {
&lt;span class=&quot;token deleted&quot;&gt;-   type Message = ();&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+   type Message = Msg;&lt;/span&gt;
    type Properties = ();

&lt;span class=&quot;token deleted&quot;&gt;-   fn create(_: Self::Properties, _: ComponentLink&amp;lt;Self&amp;gt;) -&amp;gt; Self {&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+   fn create(_: Self::Properties, link: ComponentLink&amp;lt;Self&amp;gt;) -&amp;gt; Self {&lt;/span&gt;
        let products: Vec&amp;lt;Product&amp;gt; = vec![
            Product {
                id: 1,
                name: &quot;Apple&quot;.to_string(),
                description: &quot;An apple a day keeps the doctor away&quot;.to_string(),
                image: &quot;/products/apple.png&quot;.to_string(),
                price: 3.65,
            },
            Product {
                id: 2,
                name: &quot;Banana&quot;.to_string(),
                description: &quot;An old banana leaf was once young and green&quot;.to_string(),
                image: &quot;/products/banana.png&quot;.to_string(),
                price: 7.99,
            },
        ];
&lt;span class=&quot;token inserted&quot;&gt;+       let cart_products = vec![];&lt;/span&gt;

        Self {
            state: State {
                products,
&lt;span class=&quot;token inserted&quot;&gt;+               cart_products,&lt;/span&gt;
            },
&lt;span class=&quot;token inserted&quot;&gt;+           link,&lt;/span&gt;
        }
    }

&lt;span class=&quot;token deleted&quot;&gt;-   fn update(&amp;amp;mut self, _: Self::Message) -&amp;gt; ShouldRender {&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+   fn update(&amp;amp;mut self, message: Self::Message) -&amp;gt; ShouldRender {&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+       match message {&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+           Msg::AddToCart(product_id) =&amp;gt; {&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+               let product = self&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+                   .state&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+                   .products&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+                   .iter()&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+                   .find(|p: &amp;amp;&amp;amp;Product| p.id == product_id)&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+                   .unwrap();&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+               let cart_product = self&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+                   .state&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+                   .cart_products&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+                   .iter_mut()&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+                   .find(|cp: &amp;amp;&amp;amp;mut CartProduct| cp.product.id == product_id);&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+               if let Some(cp) = cart_product {&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+                   cp.quantity += 1;&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+               } else {&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+                   self.state.cart_products.push(CartProduct {&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+                       product: product.clone(),&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+                       quantity: 1,&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+                   })&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+               }&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+               true&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+           }&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+       }&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-       true&lt;/span&gt;
    }

    fn change(&amp;amp;mut self, _: Self::Properties) -&amp;gt; ShouldRender {
        true
    }

    fn view(&amp;amp;self) -&amp;gt; Html {
        let products: Vec&amp;lt;Html&amp;gt; = self
            .state
            .products
            .iter()
            .map(|product: &amp;amp;Product| {
&lt;span class=&quot;token inserted&quot;&gt;+              let product_id = product.id;&lt;/span&gt;
                html! {
                  &amp;lt;div&amp;gt;
                    &amp;lt;img src={&amp;amp;product.image}/&amp;gt;
                    &amp;lt;div&amp;gt;{&amp;amp;product.name}&amp;lt;/div&amp;gt;
                    &amp;lt;div&amp;gt;{&quot;$&quot;}{&amp;amp;product.price}&amp;lt;/div&amp;gt;
&lt;span class=&quot;token inserted&quot;&gt;+                   &amp;lt;button onclick=self.link.callback(move |_| Msg::AddToCart(product_id))&amp;gt;{&quot;Add To Cart&quot;}&amp;lt;/button&amp;gt;&lt;/span&gt;
                  &amp;lt;/div&amp;gt;
                }
            })
            .collect();

&lt;span class=&quot;token inserted&quot;&gt;+       let cart_value = self&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+           .state&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+           .cart_products&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+           .iter()&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+           .fold(0.0, |acc, cp| acc + (cp.quantity as f64 * cp.product.price));&lt;/span&gt;

&lt;span class=&quot;token deleted&quot;&gt;-       html! { &amp;lt;span&amp;gt;{products}&amp;lt;/span&amp;gt; }&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+       html! {&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+         &amp;lt;div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+           &amp;lt;span&amp;gt;{format!(&quot;Cart Value: {:.2}&quot;, cart_value)}&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+           &amp;lt;span&amp;gt;{products}&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+         &amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+       }&lt;/span&gt;
      }
  }
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;clone&lt;/code&gt; - We’ve derived the &lt;a href=&quot;https://doc.rust-lang.org/std/clone/trait.Clone.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;Clone&lt;/code&gt;&lt;/a&gt; trait in &lt;code&gt;Product&lt;/code&gt; struct so we can save the cloned &lt;code&gt;Product&lt;/code&gt; into &lt;code&gt;CartProduct&lt;/code&gt; whenever the user adds them to cart.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;update&lt;/code&gt; - This method is the place where the logic to update the component &lt;code&gt;State&lt;/code&gt; or perform side-effects (like network requests) exist. It is invoked using a &lt;code&gt;Message&lt;/code&gt; enum that contains all the actions the component supports. When we return &lt;code&gt;true&lt;/code&gt; from this method, the component is re-rendered. In the above code, when the user clicks the “Add To Cart” button, we send a &lt;code&gt;Msg::AddToCart&lt;/code&gt; message to &lt;code&gt;update&lt;/code&gt;. Inside &lt;code&gt;update&lt;/code&gt;, this either adds the product to &lt;code&gt;cart_product&lt;/code&gt; if it doesn’t exist or it increments the quantity.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;link&lt;/code&gt; - This allows us to register callbacks that can trigger our &lt;code&gt;update&lt;/code&gt; lifecycle method.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;If you’ve used &lt;a href=&quot;https://redux.js.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Redux&lt;/a&gt; before, &lt;code&gt;update&lt;/code&gt; is similar to &lt;a href=&quot;https://redux.js.org/basics/reducers&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;Reducer&lt;/code&gt;&lt;/a&gt; (for state updates) and &lt;a href=&quot;https://redux.js.org/basics/actions#action-creators&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;Action Creator&lt;/code&gt;&lt;/a&gt; (for side-effects), &lt;code&gt;Message&lt;/code&gt; is similar to &lt;a href=&quot;https://redux.js.org/basics/actions&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;Action&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;link&lt;/code&gt; is similar to &lt;a href=&quot;https://redux.js.org/basics/store#dispatching-actions&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;Dispatch&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.sheshbabu.com/images/2020-rust-wasm-yew-single-page-application/rust-wasm-yew-single-page-application-2.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Here’s how the UI looks like, try clicking the “Add To Cart” button and see the changes in “Cart Value”:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.sheshbabu.com/images/2020-rust-wasm-yew-single-page-application/image-3.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;Fetching-Data&quot;&gt;Fetching Data&lt;/h2&gt;
&lt;p&gt;We’ll move the product data from the &lt;code&gt;create&lt;/code&gt; function to &lt;code&gt;static/products/products.json&lt;/code&gt; and query it using the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;fetch&lt;/code&gt;&lt;/a&gt; api.&lt;/p&gt;
&lt;pre class=&quot; language-json&quot;&gt;
&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Apple&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;An apple a day keeps the doctor away&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;image&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/products/apple.png&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3.65&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Banana&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;An old banana leaf was once young and green&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;image&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/products/banana.png&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7.99&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Yew exposes common browser apis like fetch, localstorage etc through something called &lt;a href=&quot;https://docs.rs/yew/0.17.2/yew/services/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;“services”&lt;/a&gt;. We can use the &lt;code&gt;FetchService&lt;/code&gt; to make network requests. It requires &lt;code&gt;anyhow&lt;/code&gt; and &lt;code&gt;serde&lt;/code&gt; crates, let’s install them:&lt;/p&gt;
&lt;pre class=&quot; language-diff&quot;&gt;
&lt;code class=&quot;language-diff&quot;&gt;  [package]
  name = &quot;rustmart&quot;
  version = &quot;0.1.0&quot;
  authors = [&quot;sheshbabu &amp;lt;sheshbabu@gmail.com&amp;gt;&quot;]
  edition = &quot;2018&quot;

  [lib]
  crate-type = [&quot;cdylib&quot;, &quot;rlib&quot;]

  [dependencies]
  yew = &quot;0.17&quot;
  wasm-bindgen = &quot;0.2&quot;
&lt;span class=&quot;token inserted&quot;&gt;+ anyhow = &quot;1.0.32&quot;&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+ serde = { version = &quot;1.0&quot;, features = [&quot;derive&quot;] }&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Let’s extract the &lt;code&gt;Product&lt;/code&gt; and &lt;code&gt;CartProduct&lt;/code&gt; to &lt;code&gt;src/types.rs&lt;/code&gt; so we can share it across multiple files:&lt;/p&gt;
&lt;pre class=&quot; language-rust&quot;&gt;
&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;use&lt;/span&gt; serde&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;Deserialize&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Serialize&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token attribute attr-name&quot;&gt;#[derive(Deserialize, Serialize, Clone, Debug)]&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; Product &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; id&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; i32&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; String&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; description&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; String&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; image&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; String&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; price&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; f64&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token attribute attr-name&quot;&gt;#[derive(Clone, Debug)]&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; CartProduct &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; product&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Product&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; quantity&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; i32&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;We’ve made both structs and their fields public, and have derived the &lt;code&gt;Deserialize&lt;/code&gt; and &lt;code&gt;Serialize&lt;/code&gt; traits.&lt;/p&gt;
&lt;p&gt;We’ll use the &lt;a href=&quot;http://www.sheshbabu.com/posts/organizing-http-requests-using-api-module-pattern/&quot;&gt;API module pattern&lt;/a&gt; and create a separate module called &lt;code&gt;src/api.rs&lt;/code&gt; to hold our fetch logic:&lt;/p&gt;
&lt;pre class=&quot; language-rust&quot;&gt;
&lt;code class=&quot;language-rust&quot;&gt;
&lt;span class=&quot;token keyword&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;crate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;types&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;Product&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;use&lt;/span&gt; anyhow&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;Error&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;use&lt;/span&gt; yew&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;callback&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;Callback&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;use&lt;/span&gt; yew&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;format&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;Json&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Nothing&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;use&lt;/span&gt; yew&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;services&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;fetch&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;FetchService&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; FetchTask&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Request&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Response&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; FetchResponse&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;T&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Response&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Json&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Result&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;T&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Error&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; FetchCallback&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;T&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Callback&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;FetchResponse&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;T&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;get_products&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;callback&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; FetchCallback&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Vec&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Product&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&amp;gt;&lt;/span&gt; FetchTask &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; req &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Request&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/products/products.json&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Nothing&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;unwrap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    FetchService&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; callback&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;unwrap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;FetchService&lt;/code&gt; api is a bit awkward - it takes in a request object and callback as arguments and returns something called a “FetchTask”. One surprising gotcha here is that the network request gets aborted if this “FetchTask” is dropped. So we return this and store it in our component.&lt;/p&gt;
&lt;p&gt;Let’s update &lt;code&gt;lib.rs&lt;/code&gt; to add these new modules into the &lt;a href=&quot;http://www.sheshbabu.com/posts/rust-module-system/&quot;&gt;module tree&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&quot; language-diff&quot;&gt;
&lt;code class=&quot;language-diff&quot;&gt;  // src/lib.rs
&lt;span class=&quot;token inserted&quot;&gt;+ mod api;&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+ mod types;&lt;/span&gt;
  mod pages;

  use pages::Home;
  use wasm_bindgen::prelude::*;
  use yew::prelude::*;

  #[wasm_bindgen(start)]
  pub fn run_app() {
      App::&amp;lt;Home&amp;gt;::new().mount_to_body();
  }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Finally, let’s update our HomePage component:&lt;/p&gt;
&lt;pre class=&quot; language-diff&quot;&gt;
&lt;code class=&quot;language-diff&quot;&gt;&lt;span class=&quot;token inserted&quot;&gt;+ use crate::api;&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+ use crate::types::{CartProduct, Product};&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+ use anyhow::Error;&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+ use yew::format::Json;&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+ use yew::services::fetch::FetchTask;&lt;/span&gt;
  use yew::prelude::*;

&lt;span class=&quot;token deleted&quot;&gt;- #[derive(Clone)]&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;- struct Product {&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-     id: i32,&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-     name: String,&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-     description: String,&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-     image: String,&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-     price: f64,&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;- }&lt;/span&gt;

&lt;span class=&quot;token deleted&quot;&gt;- struct CartProduct {&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-     product: Product,&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-     quantity: i32,&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;- }&lt;/span&gt;

  struct State {
      products: Vec&amp;lt;Product&amp;gt;,
      cart_products: Vec&amp;lt;CartProduct&amp;gt;,
&lt;span class=&quot;token inserted&quot;&gt;+     get_products_error: Option&amp;lt;Error&amp;gt;,&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+     get_products_loaded: bool,&lt;/span&gt;
  }

  pub struct Home {
      state: State,
      link: ComponentLink&amp;lt;Self&amp;gt;,
&lt;span class=&quot;token inserted&quot;&gt;+     task: Option&amp;lt;FetchTask&amp;gt;,&lt;/span&gt;
  }

  pub enum Msg {
      AddToCart(i32),
&lt;span class=&quot;token inserted&quot;&gt;+     GetProducts,&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+     GetProductsSuccess(Vec&amp;lt;Product&amp;gt;),&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+     GetProductsError(Error),&lt;/span&gt;
  }

  impl Component for Home {
      type Message = Msg;
      type Properties = ();

      fn create(_: Self::Properties, link: ComponentLink&amp;lt;Self&amp;gt;) -&amp;gt; Self {
&lt;span class=&quot;token deleted&quot;&gt;-         let products: Vec&amp;lt;Product&amp;gt; = vec![&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-             Product {&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-                 id: 1,&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-                 name: &quot;Apple&quot;.to_string(),&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-                 description: &quot;An apple a day keeps the doctor away&quot;.to_string(),&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-                 image: &quot;/products/apple.png&quot;.to_string(),&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-                 price: 3.65,&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-             },&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-             Product {&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-                 id: 2,&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-                 name: &quot;Banana&quot;.to_string(),&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-                 description: &quot;An old banana leaf was once young and green&quot;.to_string(),&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-                 image: &quot;/products/banana.png&quot;.to_string(),&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-                 price: 7.99,&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-             },&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-         ];&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+         let products = vec![];&lt;/span&gt;
          let cart_products = vec![];

&lt;span class=&quot;token inserted&quot;&gt;+         link.send_message(Msg::GetProducts);&lt;/span&gt;

          Self {
              state: State {
                  products,
                  cart_products,
&lt;span class=&quot;token inserted&quot;&gt;+                 get_products_error: None,&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+                 get_products_loaded: false,&lt;/span&gt;
              },
              link,
&lt;span class=&quot;token inserted&quot;&gt;+             task: None,&lt;/span&gt;
          }
      }

      fn update(&amp;amp;mut self, message: Self::Message) -&amp;gt; ShouldRender {
          match message {
&lt;span class=&quot;token inserted&quot;&gt;+             Msg::GetProducts =&amp;gt; {&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+                 self.state.get_products_loaded = false;&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+                 let handler =&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+                     self.link&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+                         .callback(move |response: api::FetchResponse&amp;lt;Vec&amp;lt;Product&amp;gt;&amp;gt;| {&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+                             let (_, Json(data)) = response.into_parts();&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+                             match data {&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+                                 Ok(products) =&amp;gt; Msg::GetProductsSuccess(products),&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+                                 Err(err) =&amp;gt; Msg::GetProductsError(err),&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+                             }&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+                         });&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+                 self.task = Some(api::get_products(handler));&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+                 true&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+             }&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+             Msg::GetProductsSuccess(products) =&amp;gt; {&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+                 self.state.products = products;&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+                 self.state.get_products_loaded = true;&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+                 true&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+             }&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+             Msg::GetProductsError(error) =&amp;gt; {&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+                 self.state.get_products_error = Some(error);&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+                 self.state.get_products_loaded = true;&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+                 true&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+             }&lt;/span&gt;
              Msg::AddToCart(product_id) =&amp;gt; {
                  let product = self
                      .state
                      .products
                      .iter()
                      .find(|p: &amp;amp;&amp;amp;Product| p.id == product_id)
                      .unwrap();
                  let cart_product = self
                      .state
                      .cart_products
                      .iter_mut()
                      .find(|cp: &amp;amp;&amp;amp;mut CartProduct| cp.product.id == product_id);

                  if let Some(cp) = cart_product {
                      cp.quantity += 1;
                  } else {
                      self.state.cart_products.push(CartProduct {
                          product: product.clone(),
                          quantity: 1,
                      })
                  }
                  true
              }
          }
      }

      fn change(&amp;amp;mut self, _: Self::Properties) -&amp;gt; ShouldRender {
          true
      }

      fn view(&amp;amp;self) -&amp;gt; Html {
          let products: Vec&amp;lt;Html&amp;gt; = self
              .state
              .products
              .iter()
              .map(|product: &amp;amp;Product| {
                  let product_id = product.id;
                  html! {
                    &amp;lt;div&amp;gt;
                      &amp;lt;img src={&amp;amp;product.image}/&amp;gt;
                      &amp;lt;div&amp;gt;{&amp;amp;product.name}&amp;lt;/div&amp;gt;
                      &amp;lt;div&amp;gt;{&quot;$&quot;}{&amp;amp;product.price}&amp;lt;/div&amp;gt;
                      &amp;lt;button onclick=self.link.callback(move |_| Msg::AddToCart(product_id))&amp;gt;{&quot;Add To Cart&quot;}&amp;lt;/button&amp;gt;
                    &amp;lt;/div&amp;gt;
                  }
              })
              .collect();

          let cart_value = self
              .state
              .cart_products
              .iter()
              .fold(0.0, |acc, cp| acc + (cp.quantity as f64 * cp.product.price));

&lt;span class=&quot;token inserted&quot;&gt;+         if !self.state.get_products_loaded {&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+             html! {&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+               &amp;lt;div&amp;gt;{&quot;Loading ...&quot;}&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+             }&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+         } else if let Some(_) = self.state.get_products_error {&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+             html! {&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+               &amp;lt;div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+                 &amp;lt;span&amp;gt;{&quot;Error loading products! :(&quot;}&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+               &amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+             }&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+         } else {&lt;/span&gt;
              html! {
                &amp;lt;div&amp;gt;
                  &amp;lt;span&amp;gt;{format!(&quot;Cart Value: {:.2}&quot;, cart_value)}&amp;lt;/span&amp;gt;
                  &amp;lt;span&amp;gt;{products}&amp;lt;/span&amp;gt;
                &amp;lt;/div&amp;gt;
              }
&lt;span class=&quot;token inserted&quot;&gt;+         }&lt;/span&gt;
      }
  }
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Quite a number of changes, but you should be able to understand most of them.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;We’ve replaced the hardcoded products list in &lt;code&gt;create&lt;/code&gt; with an empty array. We’re also sending a message &lt;code&gt;Msg::GetProducts&lt;/code&gt; to &lt;code&gt;update&lt;/code&gt; which calls the &lt;code&gt;get_products&lt;/code&gt; method in the &lt;code&gt;api&lt;/code&gt; module. The returned &lt;code&gt;FetchTask&lt;/code&gt; is stored in &lt;code&gt;task&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;When the network request succeeds, the &lt;code&gt;Msg::GetProductsSuccess&lt;/code&gt; message is called with products list or &lt;code&gt;Msg::GetProductsError&lt;/code&gt; with error.&lt;/li&gt;
&lt;li&gt;These two messages set the &lt;code&gt;products&lt;/code&gt; and &lt;code&gt;get_products_error&lt;/code&gt; fields in state respectively. They also set the &lt;code&gt;get_products_loaded&lt;/code&gt; state to true after the request is fulfilled.&lt;/li&gt;
&lt;li&gt;In the &lt;code&gt;view&lt;/code&gt; method, we’ve used conditional rendering to render either the loading view, error view or products view based on the component’s state.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://www.sheshbabu.com/images/2020-rust-wasm-yew-single-page-application/rust-wasm-yew-single-page-application-3.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;Splitting-into-reusable-components&quot;&gt;Splitting into reusable components&lt;/h2&gt;
&lt;p&gt;Let’s extract the “product card” component into its own module so we can reuse it in other pages.&lt;/p&gt;
&lt;pre class=&quot; language-rust&quot;&gt;
&lt;code class=&quot;language-rust&quot;&gt;
&lt;span class=&quot;token keyword&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;crate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;types&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;Product&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;use&lt;/span&gt; yew&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;prelude&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; ProductCard &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    props&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Props&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token attribute attr-name&quot;&gt;#[derive(Properties, Clone)]&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; Props &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; product&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Product&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; on_add_to_cart&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Callback&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;impl&lt;/span&gt; Component &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; ProductCard &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; Message &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; Properties &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Props&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Self&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;Properties&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; _link&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ComponentLink&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Self&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&amp;gt;&lt;/span&gt; Self &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        Self &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; props &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; _msg&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Self&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;Message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&amp;gt;&lt;/span&gt; ShouldRender &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; _props&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Self&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;Properties&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&amp;gt;&lt;/span&gt; ShouldRender &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&amp;gt;&lt;/span&gt; Html &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; onclick &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;on_add_to_cart&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reform&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;_&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token macro-rules function&quot;&gt;html!&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;img src&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;product&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;image&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;product&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;$&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;product&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;price&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button onclick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;onclick&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Add To Cart&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot; language-rust&quot;&gt;
&lt;code class=&quot;language-rust&quot;&gt;
&lt;span class=&quot;token keyword&quot;&gt;mod&lt;/span&gt; product_card&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;use&lt;/span&gt; product_card&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;ProductCard&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot; language-diff&quot;&gt;
&lt;code class=&quot;language-diff&quot;&gt;  // src/pages/home.rs

  use crate::api;
&lt;span class=&quot;token inserted&quot;&gt;+ use crate::components::ProductCard;&lt;/span&gt;
  use crate::types::{CartProduct, Product};
  use anyhow::Error;
  use yew::format::Json;
  use yew::prelude::*;
  use yew::services::fetch::FetchTask;

  // No changes

  impl Component for Home {
      // No changes

      fn view(&amp;amp;self) -&amp;gt; Html {
          let products: Vec&amp;lt;Html&amp;gt; = self
              .state
              .products
              .iter()
              .map(|product: &amp;amp;Product| {
                  let product_id = product.id;
                  html! {
&lt;span class=&quot;token deleted&quot;&gt;-                   &amp;lt;div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-                     &amp;lt;img src={&amp;amp;product.image}/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-                     &amp;lt;div&amp;gt;{&amp;amp;product.name}&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-                     &amp;lt;div&amp;gt;{&quot;$&quot;}{&amp;amp;product.price}&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-                     &amp;lt;button onclick=self.link.callback(move |_| Msg::AddToCart(product_id))&amp;gt;{&quot;Add To Cart&quot;}&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-                   &amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+                   &amp;lt;ProductCard product={product} on_add_to_cart=self.link.callback(move |_| Msg::AddToCart(product_id))/&amp;gt;&lt;/span&gt;
                  }
              })
              .collect();

          // No changes
      }
  }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Pretty straightforward, except for &lt;code&gt;Properties&lt;/code&gt;, &lt;code&gt;Callback&lt;/code&gt; and &lt;code&gt;reform&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;Properties&lt;/code&gt; - As mentioned in the beginning of the post, “Properties” or “Props” are input to a component. If you think of components as functions, then Props are the function arguments.&lt;/li&gt;
&lt;li&gt;For the &lt;code&gt;ProductCard&lt;/code&gt; component, we’re passing the &lt;code&gt;Product&lt;/code&gt; struct as well as a &lt;code&gt;on_add_to_cart&lt;/code&gt; callback. This component doesn’t hold any state, so when user clicks on the “Add To Cart” button, this component calls the parent component to update the &lt;code&gt;cart_products&lt;/code&gt; state. This callback is represented using the &lt;code&gt;Callback&amp;lt;T&amp;gt;&lt;/code&gt; type and to call this from child component, we either use &lt;code&gt;emit&lt;/code&gt; or &lt;code&gt;reform&lt;/code&gt; methods on the callback.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://www.sheshbabu.com/images/2020-rust-wasm-yew-single-page-application/rust-wasm-yew-single-page-application-4.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;Styling&quot;&gt;Styling&lt;/h2&gt;
&lt;p&gt;The UI looks barebones as we haven’t added any styles.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.sheshbabu.com/images/2020-rust-wasm-yew-single-page-application/image-3.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;We can either use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;class attribute&lt;/a&gt; or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ElementCSSInlineStyle/style&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;inline styles&lt;/a&gt; with Yew. Let’s add some styles so the UI looks good.&lt;/p&gt;
&lt;p&gt;Let’s create a new CSS file &lt;code&gt;static/styles.css&lt;/code&gt;, add it to &lt;code&gt;static/index.html&lt;/code&gt; and then we can start using the classes in our components.&lt;/p&gt;
&lt;pre class=&quot; language-diff&quot;&gt;
&lt;code class=&quot;language-diff&quot;&gt;  // src/pages/home.rs

  html! {
    &amp;lt;div&amp;gt;
&lt;span class=&quot;token deleted&quot;&gt;-     &amp;lt;span&amp;gt;{format!(&quot;Cart Value: {:.2}&quot;, cart_value)}&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-     &amp;lt;span&amp;gt;{products}&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+     &amp;lt;div class=&quot;navbar&quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+         &amp;lt;div class=&quot;navbar_title&quot;&amp;gt;{&quot;RustMart&quot;}&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+         &amp;lt;div class=&quot;navbar_cart_value&quot;&amp;gt;{format!(&quot;${:.2}&quot;, cart_value)}&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+     &amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+     &amp;lt;div class=&quot;product_card_list&quot;&amp;gt;{products}&amp;lt;/div&amp;gt;&lt;/span&gt;
    &amp;lt;/div&amp;gt;
  }&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot; language-diff&quot;&gt;
&lt;code class=&quot;language-diff&quot;&gt;  // src/components/product_card.rs

  html! {
&lt;span class=&quot;token deleted&quot;&gt;-   &amp;lt;div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-     &amp;lt;img src={&amp;amp;self.props.product.image}/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-     &amp;lt;div&amp;gt;{&amp;amp;self.props.product.name}&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-     &amp;lt;div&amp;gt;{&quot;$&quot;}{&amp;amp;self.props.product.price}&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-     &amp;lt;button onclick=onclick&amp;gt;{&quot;Add To Cart&quot;}&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-   &amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+   &amp;lt;div class=&quot;product_card_container&quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+     &amp;lt;img class=&quot;product_card_image&quot; src={&amp;amp;self.props.product.image}/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+     &amp;lt;div class=&quot;product_card_name&quot;&amp;gt;{&amp;amp;self.props.product.name}&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+     &amp;lt;div class=&quot;product_card_price&quot;&amp;gt;{&quot;$&quot;}{&amp;amp;self.props.product.price}&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+     &amp;lt;button class=&quot;product_atc_button&quot; onclick=onclick&amp;gt;{&quot;Add To Cart&quot;}&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+   &amp;lt;/div&amp;gt;&lt;/span&gt;
  }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;After adding the styles and a few more products, here’s how the UI looks like:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.sheshbabu.com/images/2020-rust-wasm-yew-single-page-application/image-4.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;CSS changes are outside the scope of this post, please refer to the &lt;a href=&quot;https://github.com/sheshbabu/rustmart-yew-example&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub repo&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Routing&quot;&gt;Routing&lt;/h2&gt;
&lt;p&gt;In server rendered pages (Jinja, ERB, JSP etc), each page the user sees is mapped to a different template file. For example, when the user navigates to “/login”, it’s rendered in server using “login.html” and when the user goes to “/settings”, it’s rendered using “settings.html”. Using unique urls for different UI pages is also useful for bookmarking and sharing.&lt;/p&gt;
&lt;p&gt;Since SPAs only have one html page (the “Single Page” in SPA), we should be able to replicate the above behavior. This is done using a &lt;code&gt;Router&lt;/code&gt;. A Router maps different url paths (with query params, fragments etc) to different page components and helps in navigating between multiple pages without reloading.&lt;/p&gt;
&lt;p&gt;For our application, we’ll be using this mapping:&lt;/p&gt;
&lt;pre class=&quot; language-diff&quot;&gt;
&lt;code class=&quot;language-diff&quot;&gt;/            =&amp;gt; HomePage
/product/:id =&amp;gt; ProductDetailPage&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Let’s install &lt;code&gt;yew-router&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot; language-diff&quot;&gt;
&lt;code class=&quot;language-diff&quot;&gt;  [package]
  name = &quot;rustmart&quot;
  version = &quot;0.1.0&quot;
  authors = [&quot;sheshbabu &amp;lt;sheshbabu@gmail.com&amp;gt;&quot;]
  edition = &quot;2018&quot;

  [lib]
  crate-type = [&quot;cdylib&quot;, &quot;rlib&quot;]

  [dependencies]
  yew = &quot;0.17&quot;
&lt;span class=&quot;token inserted&quot;&gt;+ yew-router = &quot;0.14.0&quot;&lt;/span&gt;
  wasm-bindgen = &quot;0.2&quot;
  log = &quot;0.4.6&quot;
  wasm-logger = &quot;0.2.0&quot;
  anyhow = &quot;1.0.32&quot;
  serde = { version = &quot;1.0&quot;, features = [&quot;derive&quot;] }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Let’s add the routes in a dedicated file so it’s easier to see all available routes at a glance:&lt;/p&gt;
&lt;pre class=&quot; language-rust&quot;&gt;
&lt;code class=&quot;language-rust&quot;&gt;
&lt;span class=&quot;token keyword&quot;&gt;use&lt;/span&gt; yew_router&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;prelude&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token attribute attr-name&quot;&gt;#[derive(Switch, Debug, Clone)]&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;enum&lt;/span&gt; Route &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    #&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;to &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    HomePage&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;For the time being, it only has one route. We’ll add more later.&lt;/p&gt;
&lt;p&gt;Let’s create a new file called &lt;code&gt;src/app.rs&lt;/code&gt; to replace &lt;code&gt;HomePage&lt;/code&gt; as the new root component:&lt;/p&gt;
&lt;pre class=&quot; language-rust&quot;&gt;
&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;use&lt;/span&gt; yew&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;prelude&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;use&lt;/span&gt; yew_router&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;prelude&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;crate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;pages&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;Home&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;crate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;route&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;Route&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; App &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;impl&lt;/span&gt; Component &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; App &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; Message &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; Properties &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;_&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Self&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;Properties&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; _link&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ComponentLink&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Self&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&amp;gt;&lt;/span&gt; Self &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        Self &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; _msg&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Self&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;Message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&amp;gt;&lt;/span&gt; ShouldRender &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; _&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Self&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;Properties&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&amp;gt;&lt;/span&gt; ShouldRender &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&amp;gt;&lt;/span&gt; Html &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; render &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Router&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;switch&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Route&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;match&lt;/span&gt; switch &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            Route&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;HomePage &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;token macro-rules function&quot;&gt;html!&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Home&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token macro-rules function&quot;&gt;html!&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Router&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Route&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt; render&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;render&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Let’s make the corresponding change in &lt;code&gt;lib.rs&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot; language-diff&quot;&gt;
&lt;code class=&quot;language-diff&quot;&gt;  mod api;
&lt;span class=&quot;token inserted&quot;&gt;+ mod app;&lt;/span&gt;
  mod components;
  mod pages;
&lt;span class=&quot;token inserted&quot;&gt;+ mod route;&lt;/span&gt;
  mod types;

&lt;span class=&quot;token deleted&quot;&gt;- use pages::Home;&lt;/span&gt;
  use wasm_bindgen::prelude::*;
  use yew::prelude::*;

  #[wasm_bindgen(start)]
  pub fn run_app() {
      wasm_logger::init(wasm_logger::Config::default());
&lt;span class=&quot;token deleted&quot;&gt;-     App::&amp;lt;Home&amp;gt;::new().mount_to_body();&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+     App::&amp;lt;app::App&amp;gt;::new().mount_to_body();&lt;/span&gt;
  }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This is how our component hierarchy looks like so far:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.sheshbabu.com/images/2020-rust-wasm-yew-single-page-application/rust-wasm-yew-single-page-application-5.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;ProductDetailPage&quot;&gt;ProductDetailPage&lt;/h2&gt;
&lt;p&gt;Now that we have a router in place, let’s use it to navigate from one page to another. Since it’s a SPA, we should avoid page reload while navigating.&lt;/p&gt;
&lt;p&gt;Let’s add a route for ProductDetailPage under &lt;code&gt;/product/:id&lt;/code&gt;. When the user clicks on a &lt;code&gt;ProductCard&lt;/code&gt;, it will go to its detail page with the &lt;code&gt;id&lt;/code&gt; in the route passed as a Prop.&lt;/p&gt;
&lt;pre class=&quot; language-diff&quot;&gt;
&lt;code class=&quot;language-diff&quot;&gt;  // src/route.rs
  use yew_router::prelude::*;

  #[derive(Switch, Debug, Clone)]
  pub enum Route {
&lt;span class=&quot;token inserted&quot;&gt;+     #[to = &quot;/product/{id}&quot;]&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+     ProductDetail(i32),&lt;/span&gt;
      #[to = &quot;/&quot;]
      HomePage,
  }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Add this route to &lt;code&gt;app.rs&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot; language-diff&quot;&gt;
&lt;code class=&quot;language-diff&quot;&gt;  use yew::prelude::*;
  use yew_router::prelude::*;

&lt;span class=&quot;token deleted&quot;&gt;- use crate::pages::{Home};&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+ use crate::pages::{Home, ProductDetail};&lt;/span&gt;
  use crate::route::Route;

  pub struct App {}

  impl Component for App {
      // No changes

      fn view(&amp;amp;self) -&amp;gt; Html {
          let render = Router::render(|switch: Route| match switch {
&lt;span class=&quot;token inserted&quot;&gt;+             Route::ProductDetail(id) =&amp;gt; html! {&amp;lt;ProductDetail id=id/&amp;gt;},&lt;/span&gt;
              Route::HomePage =&amp;gt; html! {&amp;lt;Home/&amp;gt;},
          });

          html! {
              &amp;lt;Router&amp;lt;Route, ()&amp;gt; render=render/&amp;gt;
          }
      }
  }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Let’s update the &lt;code&gt;ProductCard&lt;/code&gt; so clicking on the product image, name or price takes us to this new page:&lt;/p&gt;
&lt;pre class=&quot; language-diff&quot;&gt;
&lt;code class=&quot;language-diff&quot;&gt;  // src/components/product_card.rs
&lt;span class=&quot;token inserted&quot;&gt;+ use crate::route::Route;&lt;/span&gt;
  use crate::types::Product;
  use yew::prelude::*;
&lt;span class=&quot;token inserted&quot;&gt;+ use yew_router::components::RouterAnchor;&lt;/span&gt;

  // No changes

  impl Component for ProductCard {
      // No changes

      fn view(&amp;amp;self) -&amp;gt; Html {
&lt;span class=&quot;token inserted&quot;&gt;+         type Anchor = RouterAnchor&amp;lt;Route&amp;gt;;&lt;/span&gt;
          let onclick = self.props.on_add_to_cart.reform(|_| ());

          html! {
              &amp;lt;div class=&quot;product_card_container&quot;&amp;gt;
&lt;span class=&quot;token inserted&quot;&gt;+                 &amp;lt;Anchor route=Route::ProductDetail(self.props.product.id) classes=&quot;product_card_anchor&quot;&amp;gt;&lt;/span&gt;
                      &amp;lt;img class=&quot;product_card_image&quot; src={&amp;amp;self.props.product.image}/&amp;gt;
                      &amp;lt;div class=&quot;product_card_name&quot;&amp;gt;{&amp;amp;self.props.product.name}&amp;lt;/div&amp;gt;
                      &amp;lt;div class=&quot;product_card_price&quot;&amp;gt;{&quot;$&quot;}{&amp;amp;self.props.product.price}&amp;lt;/div&amp;gt;
&lt;span class=&quot;token inserted&quot;&gt;+                 &amp;lt;/Anchor&amp;gt;&lt;/span&gt;
                  &amp;lt;button class=&quot;product_atc_button&quot; onclick=onclick&amp;gt;{&quot;Add To Cart&quot;}&amp;lt;/button&amp;gt;
              &amp;lt;/div&amp;gt;
          }
      }
  }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Notice how we used &lt;code&gt;classes&lt;/code&gt; instead of &lt;code&gt;class&lt;/code&gt; for &lt;code&gt;Anchor&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We’ll create files named &lt;code&gt;static/products/1.json&lt;/code&gt;, &lt;code&gt;static/products/2.json&lt;/code&gt; etc with mock data:&lt;/p&gt;
&lt;pre class=&quot; language-json&quot;&gt;
&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Apple&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;An apple a day keeps the doctor away&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;image&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/products/apple.png&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3.65&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Let’s update the &lt;code&gt;api.rs&lt;/code&gt; module with the new route:&lt;/p&gt;
&lt;pre class=&quot; language-diff&quot;&gt;
&lt;code class=&quot;language-diff&quot;&gt;  use crate::types::Product;
  use anyhow::Error;
  use yew::callback::Callback;
  use yew::format::{Json, Nothing};
  use yew::services::fetch::{FetchService, FetchTask, Request, Response};

  pub type FetchResponse&amp;lt;T&amp;gt; = Response&amp;lt;Json&amp;lt;Result&amp;lt;T, Error&amp;gt;&amp;gt;&amp;gt;;
  type FetchCallback&amp;lt;T&amp;gt; = Callback&amp;lt;FetchResponse&amp;lt;T&amp;gt;&amp;gt;;

  pub fn get_products(callback: FetchCallback&amp;lt;Vec&amp;lt;Product&amp;gt;&amp;gt;) -&amp;gt; FetchTask {
      let req = Request::get(&quot;/products/products.json&quot;)
          .body(Nothing)
          .unwrap();

      FetchService::fetch(req, callback).unwrap()
  }

&lt;span class=&quot;token inserted&quot;&gt;+ pub fn get_product(id: i32, callback: FetchCallback&amp;lt;Product&amp;gt;) -&amp;gt; FetchTask {&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+     let req = Request::get(format!(&quot;/products/{}.json&quot;, id))&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+         .body(Nothing)&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+         .unwrap();&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+     FetchService::fetch(req, callback).unwrap()&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+ }&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Finally, here’s the &lt;code&gt;ProductDetail&lt;/code&gt; page component:&lt;/p&gt;
&lt;pre class=&quot; language-rust&quot;&gt;
&lt;code class=&quot;language-rust&quot;&gt;
&lt;span class=&quot;token keyword&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;crate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;api&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;crate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;types&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;Product&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;use&lt;/span&gt; anyhow&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;Error&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;use&lt;/span&gt; yew&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;format&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;Json&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;use&lt;/span&gt; yew&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;prelude&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;use&lt;/span&gt; yew&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;services&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;fetch&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;FetchTask&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; State &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    product&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Option&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Product&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    get_product_error&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Option&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Error&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    get_product_loaded&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; bool&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; ProductDetail &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    props&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Props&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    state&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; State&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    link&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ComponentLink&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Self&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    task&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Option&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;FetchTask&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token attribute attr-name&quot;&gt;#[derive(Properties, Clone)]&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; Props &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; id&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; i32&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;enum&lt;/span&gt; Msg &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    GetProduct&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;GetProductSuccess&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Product&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;GetProductError&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;impl&lt;/span&gt; Component &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; ProductDetail &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; Message &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Msg&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; Properties &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Props&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Self&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;Properties&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; link&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ComponentLink&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Self&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&amp;gt;&lt;/span&gt; Self &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        link&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;send_message&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Msg&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;GetProduct&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        Self &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            props&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            state&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; State &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                product&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; None&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                get_product_error&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; None&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                get_product_loaded&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            link&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            task&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; None&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; message&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Self&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;Message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&amp;gt;&lt;/span&gt; ShouldRender &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;match&lt;/span&gt; message &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            Msg&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;GetProduct &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; handler &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;link
                    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;move&lt;/span&gt; &lt;span class=&quot;token closure-params&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt;response&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; api&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;FetchResponse&amp;lt;Product&amp;gt;&lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;into_parts&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;token keyword&quot;&gt;match&lt;/span&gt; data &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;token function&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;product&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt; Msg&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetProductSuccess&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;product&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;token function&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt; Msg&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetProductError&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

                &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;task &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;api&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get_product&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; handler&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;true&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
            Msg&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetProductSuccess&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;product&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;product &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;product&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get_product_loaded &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;true&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
            Msg&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetProductError&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get_product_error &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get_product_loaded &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;true&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; _&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Self&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;Properties&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&amp;gt;&lt;/span&gt; ShouldRender &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&amp;gt;&lt;/span&gt; Html &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;ref&lt;/span&gt; product&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;product &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token macro-rules function&quot;&gt;html!&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div class&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;product_detail_container&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;img class&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;product_detail_image&quot;&lt;/span&gt; src&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;product&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;image&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div class&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;product_card_name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;product&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div style&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;margin: 10px 0; line-height: 24px;&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;product&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;description&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div class&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;product_card_price&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;$&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;product&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;price&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button class&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;product_atc_button&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Add To Cart&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get_product_loaded &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token macro-rules function&quot;&gt;html!&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div class&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;loading_spinner_container&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div class&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;loading_spinner&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div class&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;loading_spinner_text&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Loading ...&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token macro-rules function&quot;&gt;html!&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Error loading product! :(&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;span&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Very similar to the HomePage component. Let’s also add this file to the module tree:&lt;/p&gt;
&lt;pre class=&quot; language-diff&quot;&gt;
&lt;code class=&quot;language-diff&quot;&gt;  // src/pages/mod.rs
  mod home;
&lt;span class=&quot;token inserted&quot;&gt;+ mod product_detail;&lt;/span&gt;

  pub use home::Home;
&lt;span class=&quot;token inserted&quot;&gt;+ pub use product_detail::ProductDetail;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This is how it looks like:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.sheshbabu.com/images/2020-rust-wasm-yew-single-page-application/image-5.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;We can now move between multiple pages without refreshing the page!&lt;/p&gt;
&lt;h2 id=&quot;State-Management&quot;&gt;State Management&lt;/h2&gt;
&lt;p&gt;One thing you might have noticed in the &lt;code&gt;ProductDetail&lt;/code&gt; page is that clicking on the “Add To Cart” button doesn’t update the cart. This is because the state that holds the list of products in cart &lt;code&gt;cart_products&lt;/code&gt; currently resides inside &lt;code&gt;Home&lt;/code&gt; page component:&lt;br/&gt;&lt;img src=&quot;http://www.sheshbabu.com/images/2020-rust-wasm-yew-single-page-application/rust-wasm-yew-single-page-application-6.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;To share state between two components, we can either:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Hoist the state to a common ancestor&lt;/li&gt;
&lt;li&gt;Move state to global app state&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The &lt;code&gt;App&lt;/code&gt; component is a common ancestor to both &lt;code&gt;ProductDetail&lt;/code&gt; and &lt;code&gt;Home&lt;/code&gt;. We can move the &lt;code&gt;cart_products&lt;/code&gt; state there and pass it as props to &lt;code&gt;ProductDetail&lt;/code&gt; and &lt;code&gt;Home&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.sheshbabu.com/images/2020-rust-wasm-yew-single-page-application/rust-wasm-yew-single-page-application-7.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;This works fine for shallow component hierarchies but when you have deep component hierarchy (which is common in larger SPAs), you’ll need to pass this state through multiple layers of components (which might not have use for this prop) to reach the desired node. This is called “Prop Drilling”.&lt;/p&gt;
&lt;p&gt;You can see that &lt;code&gt;cart_products&lt;/code&gt; is now passed from &lt;code&gt;App&lt;/code&gt; to &lt;code&gt;AddToCart&lt;/code&gt; component via &lt;code&gt;ProductDetail&lt;/code&gt; and &lt;code&gt;Home&lt;/code&gt; even though they have no use for this state. Imagine the same scenario with components many layers deep.&lt;/p&gt;
&lt;p&gt;This is the problem the global state solves. Here’s how it would look like:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.sheshbabu.com/images/2020-rust-wasm-yew-single-page-application/rust-wasm-yew-single-page-application-8.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Notice how there’s a direct link between the components that need this state and the global state.&lt;/p&gt;
&lt;p&gt;Unfortunately, Yew doesn’t seem to have a &lt;a href=&quot;https://github.com/yewstack/yew/issues/576&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;good solution&lt;/a&gt; for this. The recommended solution is to use &lt;code&gt;Agents&lt;/code&gt; for broadcasting state changes via pubsub. This is something I stay away from as it gets messy fast. I hope in future we see something similar to React’s &lt;a href=&quot;https://reactjs.org/docs/context.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Context&lt;/a&gt;, Redux or Mobx etc.&lt;/p&gt;
&lt;p&gt;Let’s solve our problem by hoisting the state.&lt;/p&gt;
&lt;h2 id=&quot;Hoisting-State&quot;&gt;Hoisting State&lt;/h2&gt;
&lt;p&gt;We’ll be refactoring our code by moving &lt;code&gt;cart_products&lt;/code&gt; state to &lt;code&gt;App&lt;/code&gt; and extracting &lt;code&gt;Navbar&lt;/code&gt; and &lt;code&gt;AtcButton&lt;/code&gt; as separate components:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.sheshbabu.com/images/2020-rust-wasm-yew-single-page-application/rust-wasm-yew-single-page-application-9.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;pre class=&quot; language-rust&quot;&gt;
&lt;code class=&quot;language-rust&quot;&gt;
&lt;span class=&quot;token keyword&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;crate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;types&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;CartProduct&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;use&lt;/span&gt; yew&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;prelude&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; Navbar &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    props&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Props&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token attribute attr-name&quot;&gt;#[derive(Properties, Clone)]&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; Props &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; cart_products&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Vec&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;CartProduct&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;impl&lt;/span&gt; Component &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; Navbar &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; Message &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; Properties &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Props&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Self&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;Properties&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; _link&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ComponentLink&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Self&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&amp;gt;&lt;/span&gt; Self &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        Self &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; props &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; _msg&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Self&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;Message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&amp;gt;&lt;/span&gt; ShouldRender &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; props&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Self&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;Properties&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&amp;gt;&lt;/span&gt; ShouldRender &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; props&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&amp;gt;&lt;/span&gt; Html &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; cart_value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props
            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cart_products
            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fold&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;acc&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; cp&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; acc &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;quantity &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; f64 &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; cp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;product&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;price&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token macro-rules function&quot;&gt;html!&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div class&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;navbar&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div class&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;navbar_title&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;RustMart&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div class&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;navbar_cart_value&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;format!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;${:.2}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; cart_value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Notice how we started using the &lt;code&gt;change&lt;/code&gt; lifecycle methods in the &lt;code&gt;Navbar&lt;/code&gt; component. When the props sent from parent changes, we need to update the props inside the component so the UI re-renders.&lt;/p&gt;
&lt;pre class=&quot; language-rust&quot;&gt;
&lt;code class=&quot;language-rust&quot;&gt;
&lt;span class=&quot;token keyword&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;crate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;types&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;Product&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;use&lt;/span&gt; yew&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;prelude&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; AtcButton &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    props&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Props&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    link&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ComponentLink&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Self&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token attribute attr-name&quot;&gt;#[derive(Properties, Clone)]&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; Props &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; product&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Product&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; on_add_to_cart&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Callback&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Product&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;enum&lt;/span&gt; Msg &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    AddToCart&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;impl&lt;/span&gt; Component &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; AtcButton &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; Message &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Msg&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; Properties &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Props&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Self&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;Properties&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; link&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ComponentLink&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Self&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&amp;gt;&lt;/span&gt; Self &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        Self &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; props&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; link &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; msg&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Self&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;Message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&amp;gt;&lt;/span&gt; ShouldRender &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;match&lt;/span&gt; msg &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            Msg&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;AddToCart &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;on_add_to_cart&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;product&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; props&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Self&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;Properties&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&amp;gt;&lt;/span&gt; ShouldRender &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; props&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&amp;gt;&lt;/span&gt; Html &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; onclick &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;link&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;_&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; Msg&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;AddToCart&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token macro-rules function&quot;&gt;html!&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button class&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;product_atc_button&quot;&lt;/span&gt; onclick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;onclick&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Add To Cart&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot; language-diff&quot;&gt;
&lt;code class=&quot;language-diff&quot;&gt;  // src/components/mod.rs
&lt;span class=&quot;token inserted&quot;&gt;+ mod atc_button;&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+ mod navbar;&lt;/span&gt;
  mod product_card;

&lt;span class=&quot;token inserted&quot;&gt;+ pub use atc_button::AtcButton;&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+ pub use navbar::Navbar;&lt;/span&gt;
  pub use product_card::ProductCard;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Use the new &lt;code&gt;AtcButton&lt;/code&gt; in &lt;code&gt;ProductCard&lt;/code&gt; and &lt;code&gt;ProductDetail&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot; language-diff&quot;&gt;
&lt;code class=&quot;language-diff&quot;&gt;  // src/components/product_card.rs
&lt;span class=&quot;token inserted&quot;&gt;+ use crate::components::AtcButton;&lt;/span&gt;
  use crate::route::Route;
  use crate::types::Product;
  use yew::prelude::*;
  use yew_router::components::RouterAnchor;

  pub struct ProductCard {
      props: Props,
  }

  #[derive(Properties, Clone)]
  pub struct Props {
      pub product: Product,
&lt;span class=&quot;token deleted&quot;&gt;-     pub on_add_to_cart: Callback&amp;lt;()&amp;gt;,&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+     pub on_add_to_cart: Callback&amp;lt;Product&amp;gt;,&lt;/span&gt;
  }

  impl Component for ProductCard {
      // No changes

      fn view(&amp;amp;self) -&amp;gt; Html {
          type Anchor = RouterAnchor&amp;lt;Route&amp;gt;;
&lt;span class=&quot;token deleted&quot;&gt;-         let onclick = self.props.on_add_to_cart.reform(|_| ());&lt;/span&gt;

          html! {
              &amp;lt;div class=&quot;product_card_container&quot;&amp;gt;
                  &amp;lt;Anchor route=Route::ProductDetail(self.props.product.id) classes=&quot;product_card_anchor&quot;&amp;gt;
                      &amp;lt;img class=&quot;product_card_image&quot; src={&amp;amp;self.props.product.image}/&amp;gt;
                      &amp;lt;div class=&quot;product_card_name&quot;&amp;gt;{&amp;amp;self.props.product.name}&amp;lt;/div&amp;gt;
                      &amp;lt;div class=&quot;product_card_price&quot;&amp;gt;{&quot;$&quot;}{&amp;amp;self.props.product.price}&amp;lt;/div&amp;gt;
                  &amp;lt;/Anchor&amp;gt;
&lt;span class=&quot;token deleted&quot;&gt;-                 &amp;lt;button class=&quot;product_atc_button&quot; onclick=onclick&amp;gt;{&quot;Add To Cart&quot;}&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+                 &amp;lt;AtcButton product=self.props.product.clone() on_add_to_cart=self.props.on_add_to_cart.clone() /&amp;gt;&lt;/span&gt;
              &amp;lt;/div&amp;gt;
          }
      }
  }&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot; language-diff&quot;&gt;
&lt;code class=&quot;language-diff&quot;&gt;  // src/pages/product_detail.rs
  use crate::api;
&lt;span class=&quot;token inserted&quot;&gt;+ use crate::components::AtcButton;&lt;/span&gt;
  use crate::types::Product;
  use anyhow::Error;
  use yew::format::Json;
  use yew::prelude::*;
  use yew::services::fetch::FetchTask;

  // No changes

  #[derive(Properties, Clone)]
  pub struct Props {
      pub id: i32,
&lt;span class=&quot;token inserted&quot;&gt;+     pub on_add_to_cart: Callback&amp;lt;Product&amp;gt;,&lt;/span&gt;
  }

  impl Component for ProductDetail {
      // No changes

      fn view(&amp;amp;self) -&amp;gt; Html {
          if let Some(ref product) = self.state.product {
              html! {
                  &amp;lt;div class=&quot;product_detail_container&quot;&amp;gt;
                      &amp;lt;img class=&quot;product_detail_image&quot; src={&amp;amp;product.image}/&amp;gt;
                      &amp;lt;div class=&quot;product_card_name&quot;&amp;gt;{&amp;amp;product.name}&amp;lt;/div&amp;gt;
                      &amp;lt;div style=&quot;margin: 10px 0; line-height: 24px;&quot;&amp;gt;{&amp;amp;product.description}&amp;lt;/div&amp;gt;
                      &amp;lt;div class=&quot;product_card_price&quot;&amp;gt;{&quot;$&quot;}{&amp;amp;product.price}&amp;lt;/div&amp;gt;
&lt;span class=&quot;token deleted&quot;&gt;-                     &amp;lt;button class=&quot;product_atc_button&quot;&amp;gt;{&quot;Add To Cart&quot;}&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+                     &amp;lt;AtcButton product=product.clone() on_add_to_cart=self.props.on_add_to_cart.clone() /&amp;gt;&lt;/span&gt;
                  &amp;lt;/div&amp;gt;
              }
          }

          // No changes
      }
  }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Finally, move the &lt;code&gt;cart_products&lt;/code&gt; state from &lt;code&gt;Home&lt;/code&gt; to &lt;code&gt;App&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot; language-diff&quot;&gt;
&lt;code class=&quot;language-diff&quot;&gt;  // src/app.rs
&lt;span class=&quot;token inserted&quot;&gt;+ use crate::components::Navbar;&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+ use crate::types::{CartProduct, Product};&lt;/span&gt;
  use yew::prelude::*;
  use yew_router::prelude::*;

  use crate::pages::{Home, ProductDetail};
  use crate::route::Route;

&lt;span class=&quot;token inserted&quot;&gt;+ struct State {&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+     cart_products: Vec&amp;lt;CartProduct&amp;gt;,&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+ }&lt;/span&gt;

&lt;span class=&quot;token deleted&quot;&gt;- pub struct App {}&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+ pub struct App {&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+     state: State,&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+     link: ComponentLink&amp;lt;Self&amp;gt;,&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+ }&lt;/span&gt;

&lt;span class=&quot;token inserted&quot;&gt;+ pub enum Msg {&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+     AddToCart(Product),&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+ }&lt;/span&gt;

  impl Component for App {
&lt;span class=&quot;token deleted&quot;&gt;-     type Message = ();&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+     type Message = Msg;&lt;/span&gt;
      type Properties = ();

&lt;span class=&quot;token deleted&quot;&gt;-     fn create(_: Self::Properties, _link: ComponentLink&amp;lt;Self&amp;gt;) -&amp;gt; Self {&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+     fn create(_: Self::Properties, link: ComponentLink&amp;lt;Self&amp;gt;) -&amp;gt; Self {&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+         let cart_products = vec![];&lt;/span&gt;

&lt;span class=&quot;token deleted&quot;&gt;-         Self {}&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+         Self {&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+             state: State { cart_products },&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+             link,&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+         }&lt;/span&gt;
      }

&lt;span class=&quot;token deleted&quot;&gt;-     fn update(&amp;amp;mut self, _msg: Self::Message) -&amp;gt; ShouldRender {&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+     fn update(&amp;amp;mut self, message: Self::Message) -&amp;gt; ShouldRender {&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+         match message {&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+             Msg::AddToCart(product) =&amp;gt; {&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+                 let cart_product = self&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+                     .state&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+                     .cart_products&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+                     .iter_mut()&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+                     .find(|cp: &amp;amp;&amp;amp;mut CartProduct| cp.product.id == product.id);&lt;/span&gt;

&lt;span class=&quot;token inserted&quot;&gt;+                 if let Some(cp) = cart_product {&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+                     cp.quantity += 1;&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+                 } else {&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+                     self.state.cart_products.push(CartProduct {&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+                         product: product.clone(),&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+                         quantity: 1,&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+                     })&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+                 }&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+                 true&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+             }&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+         }&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-         true&lt;/span&gt;
      }

      fn change(&amp;amp;mut self, _: Self::Properties) -&amp;gt; ShouldRender {
          false
      }

      fn view(&amp;amp;self) -&amp;gt; Html {
&lt;span class=&quot;token inserted&quot;&gt;+         let handle_add_to_cart = self&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+             .link&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+             .callback(|product: Product| Msg::AddToCart(product));&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+         let cart_products = self.state.cart_products.clone();&lt;/span&gt;

&lt;span class=&quot;token deleted&quot;&gt;-         let render = Router::render(|switch: Route| match switch {&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-           Route::ProductDetail(id) =&amp;gt; html! {&amp;lt;ProductDetail id=id/&amp;gt;},&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-           Route::HomePage =&amp;gt; html! {&amp;lt;Home/&amp;gt;},&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+         let render = Router::render(move |switch: Route| match switch {&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+             Route::ProductDetail(id) =&amp;gt; {&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+                 html! {&amp;lt;ProductDetail id=id on_add_to_cart=handle_add_to_cart.clone() /&amp;gt;}&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+             }&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+             Route::HomePage =&amp;gt; {&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+                 html! {&amp;lt;Home cart_products=cart_products.clone() on_add_to_cart=handle_add_to_cart.clone()/&amp;gt;}&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+             }&lt;/span&gt;
          });

          html! {
&lt;span class=&quot;token inserted&quot;&gt;+             &amp;lt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+                 &amp;lt;Navbar cart_products=self.state.cart_products.clone() /&amp;gt;&lt;/span&gt;
                  &amp;lt;Router&amp;lt;Route, ()&amp;gt; render=render/&amp;gt;
&lt;span class=&quot;token inserted&quot;&gt;+             &amp;lt;/&amp;gt;&lt;/span&gt;
          }
      }
  }&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot; language-diff&quot;&gt;
&lt;code class=&quot;language-diff&quot;&gt;  // src/pages/home.rs
  // No changes

  struct State {
      products: Vec&amp;lt;Product&amp;gt;,
&lt;span class=&quot;token deleted&quot;&gt;-     cart_products: Vec&amp;lt;CartProduct&amp;gt;,&lt;/span&gt;
      get_products_error: Option&amp;lt;Error&amp;gt;,
      get_products_loaded: bool,
  }

&lt;span class=&quot;token inserted&quot;&gt;+ #[derive(Properties, Clone)]&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+ pub struct Props {&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+     pub cart_products: Vec&amp;lt;CartProduct&amp;gt;,&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+     pub on_add_to_cart: Callback&amp;lt;Product&amp;gt;,&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+ }&lt;/span&gt;

  pub struct Home {
&lt;span class=&quot;token inserted&quot;&gt;+     props: Props,&lt;/span&gt;
      state: State,
      link: ComponentLink&amp;lt;Self&amp;gt;,
      task: Option&amp;lt;FetchTask&amp;gt;,
  }

  pub enum Msg {
&lt;span class=&quot;token deleted&quot;&gt;-     AddToCart(i32),&lt;/span&gt;
      GetProducts,
      GetProductsSuccess(Vec&amp;lt;Product&amp;gt;),
      GetProductsError(Error),
  }

  impl Component for Home {
      type Message = Msg;
&lt;span class=&quot;token deleted&quot;&gt;-     type Properties = ();&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+     type Properties = Props;&lt;/span&gt;

&lt;span class=&quot;token deleted&quot;&gt;-     fn create(_: Self::Properties, link: ComponentLink&amp;lt;Self&amp;gt;) -&amp;gt; Self {&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+     fn create(props: Self::Properties, link: ComponentLink&amp;lt;Self&amp;gt;) -&amp;gt; Self {&lt;/span&gt;
          let products = vec![];
&lt;span class=&quot;token deleted&quot;&gt;-         let cart_products = vec![];&lt;/span&gt;

          link.send_message(Msg::GetProducts);

          Self {
              props,
              state: State {
                  products,
&lt;span class=&quot;token deleted&quot;&gt;-                 cart_products,&lt;/span&gt;
                  get_products_error: None,
                  get_products_loaded: false,
              },
              link,
              task: None,
          }
      }

      fn update(&amp;amp;mut self, message: Self::Message) -&amp;gt; ShouldRender {
          match message {
              Msg::GetProducts =&amp;gt; {
                  self.state.get_products_loaded = false;
                  let handler =
                      self.link
                          .callback(move |response: api::FetchResponse&amp;lt;Vec&amp;lt;Product&amp;gt;&amp;gt;| {
                              let (_, Json(data)) = response.into_parts();
                              match data {
                                  Ok(products) =&amp;gt; Msg::GetProductsSuccess(products),
                                  Err(err) =&amp;gt; Msg::GetProductsError(err),
                              }
                          });

                  self.task = Some(api::get_products(handler));
                  true
              }
              Msg::GetProductsSuccess(products) =&amp;gt; {
                  self.state.products = products;
                  self.state.get_products_loaded = true;
                  true
              }
              Msg::GetProductsError(error) =&amp;gt; {
                  self.state.get_products_error = Some(error);
                  self.state.get_products_loaded = true;
                  true
              }
&lt;span class=&quot;token deleted&quot;&gt;-             Msg::AddToCart(product_id) =&amp;gt; {&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-                 let product = self&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-                     .state&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-                     .products&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-                     .iter()&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-                     .find(|p: &amp;amp;&amp;amp;Product| p.id == product_id)&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-                     .unwrap();&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-                 let cart_product = self&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-                     .state&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-                     .cart_products&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-                     .iter_mut()&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-                     .find(|cp: &amp;amp;&amp;amp;mut CartProduct| cp.product.id == product_id);&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-                 if let Some(cp) = cart_product {&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-                     cp.quantity += 1;&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-                 } else {&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-                     self.state.cart_products.push(CartProduct {&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-                         product: product.clone(),&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-                         quantity: 1,&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-                     })&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-                 }&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-                 true&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-             }&lt;/span&gt;
          }
      }

&lt;span class=&quot;token deleted&quot;&gt;-     fn change(&amp;amp;mut self, _: Self::Properties) -&amp;gt; ShouldRender {&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+     fn change(&amp;amp;mut self, props: Self::Properties) -&amp;gt; ShouldRender {&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+         self.props = props;&lt;/span&gt;
          true
      }

      fn view(&amp;amp;self) -&amp;gt; Html {
          let products: Vec&amp;lt;Html&amp;gt; = self
              .state
              .products
              .iter()
              .map(|product: &amp;amp;Product| {
&lt;span class=&quot;token deleted&quot;&gt;-                 let product_id = product.id;&lt;/span&gt;
                  html! {
&lt;span class=&quot;token deleted&quot;&gt;-                   &amp;lt;ProductCard product={product} on_add_to_cart=self.link.callback(move |_| Msg::AddToCart(product_id))/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token inserted&quot;&gt;+                   &amp;lt;ProductCard product={product} on_add_to_cart=self.props.on_add_to_cart.clone()/&amp;gt;&lt;/span&gt;
                  }
              })
              .collect();

&lt;span class=&quot;token deleted&quot;&gt;-        let cart_value = self&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-            .state&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-            .cart_products&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-            .iter()&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-            .fold(0.0, |acc, cp| acc + (cp.quantity as f64 * cp.product.price));&lt;/span&gt;

          if !self.state.get_products_loaded {
              // No changes
          } else if let Some(_) = self.state.get_products_error {
              // No changes
          } else {
              html! {
&lt;span class=&quot;token deleted&quot;&gt;-               &amp;lt;div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-                 &amp;lt;div class=&quot;navbar&quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-                     &amp;lt;div class=&quot;navbar_title&quot;&amp;gt;{&quot;RustMart&quot;}&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-                     &amp;lt;div class=&quot;navbar_cart_value&quot;&amp;gt;{format!(&quot;${:.2}&quot;, cart_value)}&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token deleted&quot;&gt;-                 &amp;lt;/div&amp;gt;&lt;/span&gt;
                  &amp;lt;div class=&quot;product_card_list&quot;&amp;gt;{products}&amp;lt;/div&amp;gt;
&lt;span class=&quot;token deleted&quot;&gt;-               &amp;lt;/div&amp;gt;&lt;/span&gt;
              }
          }
      }
  }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now we can finally add to cart from &lt;code&gt;ProductDetail&lt;/code&gt; page and we can also see the navbar in all pages&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.sheshbabu.com/images/2020-rust-wasm-yew-single-page-application/image-6.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;http://www.sheshbabu.com/images/2020-rust-wasm-yew-single-page-application/image-4.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;We’ve successfully built a SPA fully in Rust!&lt;/p&gt;
&lt;p&gt;I’ve hosted the demo &lt;a href=&quot;https://rustmart-yew.netlify.app&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;here&lt;/a&gt; and the code is in this &lt;a href=&quot;https://github.com/sheshbabu/rustmart-yew-example&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub repo&lt;/a&gt;. If you have questions or suggestions, please contact me at sheshbabu [at] gmail.com.&lt;/p&gt;
&lt;h2 id=&quot;Conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The Yew community has done a good job designing abstractions like &lt;code&gt;html!&lt;/code&gt;, &lt;code&gt;Component&lt;/code&gt; etc so someone like me who’s familiar with React can immediately start being productive. It definitely has some rough edges like FetchTask, lack of &lt;a href=&quot;https://redux.js.org/introduction/motivation&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;em&gt;predictable&lt;/em&gt;&lt;/a&gt; state management and the documentation is sparse, but has potential to become a good alternative to React, Vue etc once these issues are fixed.&lt;/p&gt;
&lt;p&gt;Thanks for reading! Feel free to follow me in &lt;a href=&quot;https://twitter.com/sheshbabu&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Twitter&lt;/a&gt; for more posts like this :)&lt;/p&gt;
</description>
<pubDate>Tue, 11 Aug 2020 14:00:51 +0000</pubDate>
<dc:creator>rkwz</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.sheshbabu.com/posts/rust-wasm-yew-single-page-application/</dc:identifier>
</item>
<item>
<title>How to stop procrastinating by using the Fogg Behavior Model</title>
<link>https://www.deprocrastination.co/blog/how-to-stop-procrastinating-by-using-the-fogg-behavior-model</link>
<guid isPermaLink="true" >https://www.deprocrastination.co/blog/how-to-stop-procrastinating-by-using-the-fogg-behavior-model</guid>
<description>&lt;p&gt;B J Fogg is a Stanford professor who came up with a simple model of behavior that helps us understand why we take action or not take action at any given moment.&lt;/p&gt;
&lt;img src=&quot;https://www.deprocrastination.co/assets/illustrations/fbm.png&quot; alt=&quot;Fogg Behavior Model&quot;/&gt;&lt;p&gt;According to FBM, there are three things we need to do something:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Motivation&lt;/li&gt;
&lt;li&gt;Ability&lt;/li&gt;
&lt;li&gt;Trigger&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The key is that we need to have all three at the same time in order to act.&lt;/p&gt;
&lt;p&gt;Since our problem is procrastination, we'll focus on how we fail at each one of these.&lt;/p&gt;

&lt;h2&gt;Motivation X Procrastination&lt;/h2&gt;
&lt;img src=&quot;https://www.deprocrastination.co/assets/illustrations/fbm_no_motivation.png&quot; alt=&quot;Fogg Behavior Model - no motivation&quot;/&gt;&lt;p&gt;Sometimes we have the ability to do something, and even have a trigger like a time window and a to-do item, but we don't feel motivated.&lt;/p&gt;
&lt;p&gt;We stare at a list of tasks, and stare, and stare, and none of them seem particularly exciting.&lt;/p&gt;
&lt;p&gt;So we do something else - procrastinate.&lt;/p&gt;
&lt;p&gt;The thing is, &lt;strong&gt;motivation doesn't come out of the blue.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We often have a fantasy in our heads of ourselves, sitting down to work, feeling inspired and tearing into work with a smile on our faces.&lt;/p&gt;
&lt;p&gt;That's often not how it goes.&lt;/p&gt;
&lt;p&gt;On the days when we don't feel motivated, &lt;strong&gt;we need to build motivation.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;How to build motivation&lt;/h3&gt;
&lt;p&gt;We feel motivated when we viscerally feel how an action is &lt;strong&gt;meaningful, or valuable&lt;/strong&gt; to us and when we &lt;strong&gt;believe we can&lt;/strong&gt; take it (we'll get to this in the next part).&lt;/p&gt;
&lt;p&gt;Therefore, we don't feel motivated when we don't see the meaning or value hiding behind a to-do item.&lt;/p&gt;
&lt;p&gt;What to do about it then?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Remind yourself of the why.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There probably was a reason why you wrote down a task or got one assigned to you.&lt;/p&gt;
&lt;p&gt;Was it to help you learn something? Was it to make you money? Was it to help someone?&lt;/p&gt;
&lt;p&gt;Take a task you're putting off, and try to remember in vivid detail why you thought you needed to do it.&lt;/p&gt;
&lt;p&gt;The important part is not only to know the reason, but to feel it, to get excited about it. How to do that? Link the task to a personal goal that you want to achieve. Attach exciting reasons to the task.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Write a thesis&lt;/em&gt;  - not motivating.&lt;/p&gt;
&lt;p&gt;Write a thesis to successfully complete a degree and do cutting-edge research.&lt;br/&gt;Write a thesis to deepen your understanding of a subject and get recognized by others in your field.&lt;br/&gt;Write a thesis to help others see things more clearly and make progress.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Add personal, meaningful reasons to the tasks that you put off. Make yourself remember why you took them on.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;Ability X Procrastination&lt;/h2&gt;
&lt;img src=&quot;https://www.deprocrastination.co/assets/illustrations/fbm_no_ability.png&quot; alt=&quot;Fogg Behavior Model - no ability&quot;/&gt;&lt;p&gt;Sometimes we feel motivated, but every task on our plate seems just too darn hard, like standing at the foot of 5 different mountains in the Himalayas and having to decide which one to climb.&lt;/p&gt;
&lt;p&gt;When everything seems hard, it's easy to succumb to procrastination and check email, or social media, or play games. All those actions are much easier than &lt;em&gt;work.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;But when &lt;strong&gt;we're finally done with our procrastination, we'll often find that our work hasn't gotten any easier while we procrastinated.&lt;/strong&gt; In fact, it seems even harder.&lt;/p&gt;
&lt;p&gt;That's clearly not a good cycle.&lt;/p&gt;
&lt;p&gt;Instead of avoiding anything hard, let's &lt;strong&gt;turn down the difficulty dial by focusing on small steps.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You probably can't climb the whole mountain at once, but you can ascend a few hundred feet. You probably can't write a whole thesis at once, but you can write 5 paragraphs. You probably can't build a business at once, but you can write a blog post, or design a prototype, or contact 10 prospects.&lt;/p&gt;
&lt;p&gt;In short, you need to &lt;strong&gt;break it down&lt;/strong&gt; into pieces you are able to complete.&lt;/p&gt;

&lt;h3&gt;How to break work down&lt;/h3&gt;
&lt;p&gt;With mental work, it's often not obvious what all the things we need to do are.&lt;/p&gt;
&lt;p&gt;We need to identify them, to list them.&lt;/p&gt;
&lt;p&gt;If you need to create a presentation, you'll need to research the topic, find images, create the slides, and rehearse. Those are 4 distinct types of activity, 4 smaller pieces that you can take on, one by one.&lt;/p&gt;
&lt;p&gt;When you break down work into parts, it becomes clearer what you feel you can or cannot do.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Identify the distinct parts that form the whole.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;But even when you identify the parts, they can still intimidate you and seem too hard in their own right. What to do then?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Create a simple timeline.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We aren't naturally good at planning work through time. We don't look at a task like &quot;Create a sales report&quot; and see a detailed calendar in our heads with all the tasks neatly organized.&lt;/p&gt;
&lt;p&gt;But we can learn to do that. How?&lt;/p&gt;
&lt;p&gt;We just need a simple timeline.&lt;/p&gt;
&lt;p&gt;It doesn't have to be complicated.&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Start with the due date.&lt;/li&gt;
&lt;li&gt;Go back day by day (or week by week) and write down what you'd like to have done by then, until you arrive at today.&lt;/li&gt;
&lt;li&gt;Put this timeline where you'll see it (remember: out of sight, out of mind).&lt;/li&gt;
&lt;li&gt;Start working on the first piece of the puzzle.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;You might have a 20 slide presentation you'll be delivering 10 days from now.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Day 10&lt;/em&gt; &lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Rehearse 3x and deliver presentation&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;em&gt;Day 9&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Add finishing touches&lt;/li&gt;
&lt;li&gt;List sources&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Day 5&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Create first 10 slides&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;em&gt;Day 3&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Write out the main points&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;em&gt;Day 2&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Read through the materials&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;em&gt;Day 1&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Make a list of at least 10 articles and other resources to use&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Even a simple, bulleted timeline like this can make a large project more manageable and ensure that you have the time to learn what you need to do to be able to accomplish your mission.&lt;/p&gt;


&lt;h2&gt;Trigger X Procrastination&lt;/h2&gt;
&lt;img src=&quot;https://www.deprocrastination.co/assets/illustrations/fbm_no_trigger.png&quot; alt=&quot;Fogg Behavior Model - no trigger&quot;/&gt;&lt;p&gt;And sometimes, we feel motivated and able, but we don't know where to start - we're missing a trigger.&lt;/p&gt;
&lt;p&gt;Professional athletes have a coach. Coach is the person who says what to do, and when. Their job is about motivating, cultivating ability, and giving triggers.&lt;/p&gt;
&lt;p&gt;Now do this, now that, now this here, now rest. There's a tight, minute-by-minute plan.&lt;/p&gt;
&lt;p&gt;As a result, the athletes know exactly what to focus on at any given moment.&lt;/p&gt;
&lt;p&gt;Unfortunately, &lt;strong&gt;modern work often doesn't have a built-in trigger.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A professor doesn't tell you when to research, when to write an outline, when to start writing, when to stop writing, when to edit... there are no stopwatches, only vague directions and loooong time windows (days, weeks, months - not minutes).&lt;/p&gt;
&lt;p&gt;As a result, &lt;strong&gt;&lt;em&gt;we&lt;/em&gt; have to make the decision to start—we have to trigger ourselves into action.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In effect, we often leave the trigger to circumstance - we start working just before a deadline because we suddenly understand that if we don't start RIGHT NOW, we won't make it. Deadline becomes the only trigger we obey.&lt;/p&gt;
&lt;p&gt;But that doesn't make for a consistent work ethic and healthy work-related confidence.&lt;/p&gt;

&lt;h2&gt;How to add a trigger&lt;/h2&gt;
&lt;p&gt;The key to an effective trigger is a sense of &lt;em&gt;I'm supposed to be doing this, right now.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The timeline exercise from the previous section can help with the first part - identifying a concrete task that will be triggered. However, a timeline doesn't provide us with a &lt;em&gt;cue.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We need to &lt;strong&gt;create a cue.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;One moment that can be used as a trigger is sitting down to work. &lt;strong&gt;When you sit down to work, you can take your to-do list and give yourself 5-15 minutes to decide which task to start with.&lt;/strong&gt; If you don't know after the time has passed, pick one at random.&lt;br/&gt;Cue #1: sitting down to work = time to find the first task.&lt;br/&gt;Cue #2: time limit ends = time to work.&lt;/p&gt;
&lt;p&gt;Another cue takes a little foresight and preparation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;At the end of one work day, determine where you want to start the next day and put it into your calendar.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Want to start writing a doc for your teammate? Put it on your calendar at 9–9:30AM, add a reminder and a link to the doc.&lt;/p&gt;
&lt;p&gt;Want to start with a brainstorm? Take a sheet of paper, write the topic in its center, and put it on your desk so that it's the first thing you see tomorrow morning.&lt;/p&gt;
&lt;p&gt;Want to start by looking up flights for a business trip? Download a picture of a plane and make it your wallpaper.&lt;/p&gt;
&lt;p&gt;You can be as creative as you want, but the main point is this:&lt;br/&gt;&lt;strong&gt;define a specific task to do, at a specific place, at a specific moment in time - and make sure you can't miss the cue.&lt;/strong&gt;&lt;/p&gt;

&lt;img src=&quot;https://www.deprocrastination.co/assets/illustrations/fbm.png&quot; alt=&quot;Fogg Behavior Model&quot;/&gt;&lt;p&gt;That's it.&lt;/p&gt;
&lt;p&gt;Build up your motivation by reinforcing personal, meaningful reasons to do something.&lt;/p&gt;
&lt;p&gt;Break down complex tasks into simple parts and plan them through time by creating a simple timeline.&lt;/p&gt;
&lt;p&gt;And define a concrete trigger that will help you start your work.&lt;/p&gt;
&lt;br/&gt;&lt;hr/&gt;&lt;p&gt;&lt;a href=&quot;https://www.deprocrastination.co/blog/how-to-stop-procrastinating-by-using-the-fogg-behavior-model-part-2&quot;&gt;Read How to stop procrastinating by using the Fogg Behavior Model - Part 2 here&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 11 Aug 2020 13:57:39 +0000</pubDate>
<dc:creator>vitabenes</dc:creator>
<og:type>article</og:type>
<og:url>https://www.deprocrastination.co/blog/how-to-overcome-procrastination-by-understanding-the-fogg-behavior-model</og:url>
<og:image>https://www.deprocrastination.co/assets/illustrations/fbm.png</og:image>
<og:title>How to stop procrastinating by using the Fogg Behavior Model</og:title>
<og:description>B J Fogg is a Stanford professor who came up with a simple model of behavior that helps us understand why we take action or not take action at any given moment.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.deprocrastination.co/blog/how-to-stop-procrastinating-by-using-the-fogg-behavior-model</dc:identifier>
</item>
<item>
<title>Belarus has shut down the internet amid a controversial election</title>
<link>https://www.wired.com/story/belarus-internet-outage-election/</link>
<guid isPermaLink="true" >https://www.wired.com/story/belarus-internet-outage-election/</guid>
<description>&lt;p&gt;&lt;span class=&quot;lead-in-text-callout&quot;&gt;Internet connectivity and&lt;/span&gt; cellular service in Belarus have been down since Sunday evening, after sporadic outages early that morning and throughout the day. The connectivity blackout, which also includes landline phones, appears to be a government-imposed outage that comes amid widespread protests and increasing social unrest over Belarus' presidential election Sunday.&lt;/p&gt;
&lt;p&gt;The ongoing shutdown has further roiled the country of about 9.5 million people, where official election results this morning indicated that five-term president Aleksandr Lukashenko had won a sixth term with about 80 percent of the vote. Around the country, protests against Lukashenko's administration, including criticisms of his foreign policy and handling of the Covid-19 pandemic, grew in the days leading up to the election and exploded on Sunday night. The government has responded to the protests by mobilizing police and military forces, particularly in Minsk, the capital. Meanwhile, opposition candidates and protesters say the election was rigged and believe the results to be illegitimate.&lt;/p&gt;
&lt;aside role=&quot;presentation&quot; aria-hidden=&quot;true&quot; class=&quot;pullquote-embed pullquote-embed--text-align-left&quot; readability=&quot;32&quot;&gt;&lt;p&gt;&lt;span class=&quot;pullquote-embed__content&quot;&gt;&quot;I think everyone understands it is caused by government, but operators do not want to recognize it publicly.&quot;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;pullquote-embed__content&quot;&gt;Franak Viačorka, Journalist&lt;/span&gt;&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;On Monday, Lukashenko &lt;a class=&quot;external-link&quot; data-event-click=&quot;{&amp;quot;element&amp;quot;:&amp;quot;ExternalLink&amp;quot;,&amp;quot;outgoingURL&amp;quot;:&amp;quot;https://www.belta.by/president/view/lukashenko-internet-v-belarusi-otkljuchajut-iz-za-granitsy-eto-ne-initsiativa-vlasti-402299-2020/&amp;quot;}&quot; href=&quot;https://www.belta.by/president/view/lukashenko-internet-v-belarusi-otkljuchajut-iz-za-granitsy-eto-ne-initsiativa-vlasti-402299-2020/&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;said in an interview&lt;/a&gt; that the internet outages were coming from abroad, and were not the result of a Belarusian government initiative. Belarus' Computer Emergency Response Team, or CERT, in a &lt;a class=&quot;external-link&quot; data-event-click=&quot;{&amp;quot;element&amp;quot;:&amp;quot;ExternalLink&amp;quot;,&amp;quot;outgoingURL&amp;quot;:&amp;quot;https://cert.by/?p=1722&amp;quot;}&quot; href=&quot;https://cert.by/?p=1722&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;statement&lt;/a&gt; on Sunday blamed large distributed denial-of-service attacks, particularly against the country's State Security Committee and Ministry of Internal Affairs, for causing &quot;problems with equipment.&quot; The Belarusian government-owned ISP RUE Beltelecom said in a &lt;a class=&quot;external-link&quot; data-event-click=&quot;{&amp;quot;element&amp;quot;:&amp;quot;ExternalLink&amp;quot;,&amp;quot;outgoingURL&amp;quot;:&amp;quot;https://beltelecom.by/news/main/vnimaniyu-abonentov-3&amp;quot;}&quot; href=&quot;https://beltelecom.by/news/main/vnimaniyu-abonentov-3&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;statement&lt;/a&gt; Monday that it is working to resolve the outages and restore service after &quot;multiple cyberattacks of varying intensity.&quot; Outside observers have met those claims with skepticism.&lt;/p&gt;

&lt;p&gt;&quot;There’s no indication of a DDoS attack. It can’t be ruled out, but there’s no external sign of it that we see,&quot; says Alp Toker, director of the nonpartisan connectivity tracking group NetBlocks. After midnight Sunday, NetBlocks observed an outage that went largely unnoticed by the Belarus population, given the hour, but the country's internet infrastructure became increasingly wobbly afterward. &quot;Then just as polls are opening in the morning, there are more disruptions, and those really continue and progress,&quot; says Toker. &quot;Then the major outage that NetBlocks detected started right as the polls were closing and is ongoing.&quot;&lt;/p&gt;
&lt;p&gt;After studying the outage overnight from Monday to Tuesday, NetBlocks says that the blocking strategy being used in Belarus started with so-called deep packet inspection, which allows a censor to filter web traffic and block access to specific sites. That's why outages were intermittent throughout Sunday beginning in the morning. Toker says that the filtering seems similar to &lt;a class=&quot;external-link&quot; data-event-click=&quot;{&amp;quot;element&amp;quot;:&amp;quot;ExternalLink&amp;quot;,&amp;quot;outgoingURL&amp;quot;:&amp;quot;https://netblocks.org/reports/egypt-filters-34000-domains-in-bid-to-block-opposition-campaign-platform-7eA1blBp&amp;quot;}&quot; href=&quot;https://netblocks.org/reports/egypt-filters-34000-domains-in-bid-to-block-opposition-campaign-platform-7eA1blBp&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;that used in Egypt&lt;/a&gt; last year. Then on Sunday evening, the government apparently instituted a more comprehensive outage.&lt;/p&gt;

&lt;p&gt;&quot;The network layer disruptions were introduced after the platform filters were gradually rolled out,&quot; Toker says. &quot;So much was filtered by the time the blackouts started that they were difficult to distinguish and report. It also paves the way for a potential total blackout,&quot; that's virtually impossible to circumvent.&lt;/p&gt;

&lt;p&gt;The disruption extended even to &lt;a href=&quot;https://www.wired.com/story/best-vpn/&quot;&gt;virtual private networks&lt;/a&gt;—a common workaround for internet outages or censorship—most of which remain unreachable. &quot;Belarus hasn’t had a lot of investment in circumvention technologies, because people there haven't needed to,&quot; Toker says.&lt;/p&gt;
&lt;p&gt;Meanwhile, there are a few anecdotal indications that the outages were planned, and even possibly that the government warned some businesses and institutions ahead of time. A prescient &lt;a class=&quot;external-link&quot; data-event-click=&quot;{&amp;quot;element&amp;quot;:&amp;quot;ExternalLink&amp;quot;,&amp;quot;outgoingURL&amp;quot;:&amp;quot;https://www.mk.ru/politics/2020/08/08/sotovaya-kompaniya-podtverdila-otklyuchenie-vsey-svyazi-v-minske.html&amp;quot;}&quot; href=&quot;https://www.mk.ru/politics/2020/08/08/sotovaya-kompaniya-podtverdila-otklyuchenie-vsey-svyazi-v-minske.html&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;report on Saturday&lt;/a&gt; from the Russian newspaper &lt;em&gt;Moskovsky Komsomolets&lt;/em&gt; included an interview with a salesperson who warned journalists attempting to buy SIM cards that the government had indicated widespread connectivity outages might be coming as soon as that night.&lt;/p&gt;
&lt;p&gt;As far back as last Tuesday, August 4, a &lt;a class=&quot;external-link&quot; data-event-click=&quot;{&amp;quot;element&amp;quot;:&amp;quot;ExternalLink&amp;quot;,&amp;quot;outgoingURL&amp;quot;:&amp;quot;https://t.me/nexta_tv/3524&amp;quot;}&quot; href=&quot;https://t.me/nexta_tv/3524&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;post&lt;/a&gt; circulating on Telegram claimed to show a screenshot of an email from a Belarusian bank employee warning customers that digital banking outages might be coming.&lt;/p&gt;
&lt;p&gt;&quot;I think everyone understands it is caused by government, but operators do not want to recognize it publicly,&quot; Franak Viačorka, a journalist in Minsk, told WIRED. &quot;It's like nobody knows what's happening. No one wants to take responsibility.&quot;&lt;/p&gt;
</description>
<pubDate>Tue, 11 Aug 2020 13:28:12 +0000</pubDate>
<dc:creator>ikse11</dc:creator>
<og:description>Human rights organizations have blamed the Belarusian government for widespread outages.</og:description>
<og:image>https://media.wired.com/photos/5f31c4e9fa7afed05b437932/191:100/w_1280,c_limit/Sec_Belarus_GettyImages-1227980106.jpg</og:image>
<og:title>Belarus Has Shut Down the Internet Amid a Controversial Election</og:title>
<og:type>article</og:type>
<og:url>https://www.wired.com/story/belarus-internet-outage-election/</og:url>
<dc:language>en-us</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.wired.com/story/belarus-internet-outage-election/</dc:identifier>
</item>
<item>
<title>Creating a QR Code step by step</title>
<link>https://www.nayuki.io/page/creating-a-qr-code-step-by-step</link>
<guid isPermaLink="true" >https://www.nayuki.io/page/creating-a-qr-code-step-by-step</guid>
<description>&lt;p&gt;This JavaScript demo application visualizes in detailed steps, how a text string is encoded into a QR Code barcode symbol. The content of this page essentially explains and justifies how my &lt;a href=&quot;https://www.nayuki.io/page/qr-code-generator-library&quot;&gt;QR Code generator library&lt;/a&gt; works internally.&lt;/p&gt;
&lt;h2&gt;User input&lt;/h2&gt;

&lt;h2&gt;QR Code output&lt;/h2&gt;
&lt;hr/&gt;&lt;h2&gt;Step-by-step process&lt;/h2&gt;
&lt;p id=&quot;show-hide-steps&quot;&gt;Show/hide each step:&lt;/p&gt;
&lt;section readability=&quot;8&quot;&gt;&lt;h3&gt;0. Analyze Unicode characters&lt;/h3&gt;
&lt;p&gt;Number of code points in the input text string: &lt;span id=&quot;num-code-points&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Details of each character:&lt;/p&gt;
&lt;table id=&quot;character-analysis&quot; class=&quot;possibly-long&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;abbr title=&quot;Index in input string&quot;&gt;Index&lt;/abbr&gt;&lt;/th&gt;
&lt;th&gt;&lt;abbr title=&quot;The character itself&quot;&gt;Char&lt;/abbr&gt;&lt;/th&gt;
&lt;th&gt;&lt;abbr title=&quot;Unicode code point value in hexadecimal&quot;&gt;CP hex&lt;/abbr&gt;&lt;/th&gt;
&lt;th&gt;&lt;abbr title=&quot;Encodable in numeric mode&quot;&gt;NM&lt;/abbr&gt;&lt;/th&gt;
&lt;th&gt;&lt;abbr title=&quot;Encodable in alphanumeric mode&quot;&gt;AM&lt;/abbr&gt;&lt;/th&gt;
&lt;th&gt;&lt;abbr title=&quot;Encodable in byte mode&quot;&gt;BM&lt;/abbr&gt;&lt;/th&gt;
&lt;th&gt;&lt;abbr title=&quot;Encodable in kanji mode&quot;&gt;KM&lt;/abbr&gt;&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;/table&gt;&lt;p&gt;Can every character be encoded in:&lt;/p&gt;
&lt;table id=&quot;character-mode-summary&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Mode&lt;/th&gt;
&lt;th&gt;Encodable&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;/table&gt;&lt;p&gt;Chosen segment mode to encode all characters: &lt;span id=&quot;chosen-segment-mode&quot;/&gt;&lt;/p&gt;
&lt;/section&gt;&lt;section readability=&quot;13.232067510549&quot;&gt;&lt;h3&gt;1. Create data segment&lt;/h3&gt;
&lt;p&gt;Convert each character to bits. For numeric and alphanumeric modes, consecutive characters are grouped together before being encoded into bits. For byte mode, a character produces either 8, 16, 24, or 32 bits.&lt;/p&gt;
&lt;table id=&quot;data-segment-chars&quot; class=&quot;possibly-long&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Index&lt;/th&gt;
&lt;th&gt;Char&lt;/th&gt;
&lt;th&gt;Values (hex)&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Combined&lt;/th&gt;
&lt;th&gt;Bits&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;/table&gt;&lt;p&gt;The created single segment:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Mode: &lt;span id=&quot;segment-mode&quot;/&gt;&lt;/li&gt;
&lt;li&gt;Count: &lt;span id=&quot;segment-count&quot;/&gt;&lt;/li&gt;
&lt;li&gt;Data: &lt;span id=&quot;segment-data&quot;/&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;(This demo program always creates a single segment for simplicity. But it is possible to &lt;a href=&quot;https://www.nayuki.io/page/optimal-text-segmentation-for-qr-codes&quot;&gt;segment the text optimally&lt;/a&gt; to minimize the total bit length.)&lt;/p&gt;
&lt;/section&gt;&lt;section readability=&quot;10&quot;&gt;&lt;h3&gt;2. Fit to version number&lt;/h3&gt;
&lt;p&gt;Total bit length needed to represent the list of segments, depending on version:&lt;/p&gt;
&lt;table id=&quot;segment-size&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Range&lt;/th&gt;
&lt;th&gt;Num bits&lt;/th&gt;
&lt;th&gt;Num codewords&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Version 1 ~ 9&lt;/td&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Version 10 ~ 26&lt;/td&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Version 27 ~ 40&lt;/td&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;(Note: A codeword is defined as 8 bits, also known as a byte.)&lt;/p&gt;
&lt;p&gt;QR Code capacity of data codewords per version and error correction level, and whether the data fits:&lt;/p&gt;
&lt;table id=&quot;codewords-per-version&quot; class=&quot;possibly-long&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Version&lt;/th&gt;
&lt;th&gt;ECC &lt;abbr title=&quot;low&quot;&gt;L&lt;/abbr&gt;&lt;/th&gt;
&lt;th&gt;ECC &lt;abbr title=&quot;medium&quot;&gt;M&lt;/abbr&gt;&lt;/th&gt;
&lt;th&gt;ECC &lt;abbr title=&quot;quartile&quot;&gt;Q&lt;/abbr&gt;&lt;/th&gt;
&lt;th&gt;ECC &lt;abbr title=&quot;high&quot;&gt;H&lt;/abbr&gt;&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;/table&gt;&lt;p&gt;Chosen version number: &lt;span id=&quot;chosen-version&quot;/&gt;&lt;/p&gt;
&lt;/section&gt;&lt;section readability=&quot;7&quot;&gt;&lt;h3&gt;3. Concatenate segments, add padding, make codewords&lt;/h3&gt;
&lt;p&gt;Join a variety of bit strings together:&lt;/p&gt;
&lt;table id=&quot;segment-and-padding-bits&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Item&lt;/th&gt;
&lt;th&gt;Bit data&lt;/th&gt;
&lt;th&gt;&lt;abbr title=&quot;Number of&quot;&gt;Num&lt;/abbr&gt; bits&lt;/th&gt;
&lt;th&gt;&lt;abbr title=&quot;Cumulative number of&quot;&gt;Sum&lt;/abbr&gt; bits&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;/table&gt;&lt;p&gt;Notes:&lt;/p&gt;
&lt;ul readability=&quot;3&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;The segment mode is always a 4-bit field.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;The character count’s field width depends on the mode and version.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;The terminator is normally four “0” bits, but fewer if the data codeword capacity is reached.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;The bit padding is between zero to seven “0” bits, to fill all unused bits in the last byte.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;The byte padding consists of alternating hex &lt;span class=&quot;binary-value&quot;&gt;EC&lt;/span&gt; and &lt;span class=&quot;binary-value&quot;&gt;11&lt;/span&gt; until the capacity is reached.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p id=&quot;full-bitstream&quot;&gt;The entire sequence of data bits:&lt;/p&gt;
&lt;p&gt;The entire sequence of data codeword bytes (by splitting the bit stream 8 bits at a time) (displayed in hexadecimal): &lt;span id=&quot;all-data-codewords&quot; class=&quot;binary-value&quot;/&gt;&lt;/p&gt;
&lt;/section&gt;&lt;section readability=&quot;15&quot;&gt;&lt;h3&gt;4. Split blocks, add ECC, interleave&lt;/h3&gt;
&lt;p&gt;Statistics about all blocks:&lt;/p&gt;
&lt;table id=&quot;block-stats&quot;&gt;&lt;tbody readability=&quot;4&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Number of data codewords:&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Number of blocks:&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Data codewords per short block:&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Data codewords per long block:&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;ECC codewords per any block:&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Number of short blocks:&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Number of long blocks:&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;Split the sequence of data codewords (green) into short and long blocks; then for each block, compute the ECC codewords (blue) and append them to the end of the block:&lt;/p&gt;
&lt;table id=&quot;blocks-and-ecc&quot; class=&quot;possibly-long&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th rowspan=&quot;2&quot; colspan=&quot;2&quot;/&gt;
&lt;th&gt;Block index&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;/table&gt;&lt;p&gt;(Note: The math behind computing the Reed-Solomon error correction codes is omitted because it is long, tedious, and not very interesting.)&lt;/p&gt;
&lt;p&gt;The final sequence of codewords formed by interleaving data/ECC codewords from different blocks: &lt;span id=&quot;interleaved-codewords&quot; class=&quot;binary-value&quot;/&gt;&lt;/p&gt;
&lt;p id=&quot;final-bit-sequence&quot;&gt;The final sequence of bits to draw in the zig-zag scan:&lt;/p&gt;
&lt;/section&gt;&lt;section readability=&quot;11&quot;&gt;&lt;h3&gt;5. Draw fixed patterns&lt;/h3&gt;
&lt;p&gt;Draw the horizontal and vertical &lt;strong&gt;timing patterns&lt;/strong&gt; (on both row 6 and column 6, counting from 0 starting at the top left corner):&lt;/p&gt;
&lt;p&gt;Draw the 7×7 &lt;strong&gt;finder patterns&lt;/strong&gt; on the three corners and 1-module separators (which overwrites some timing modules):&lt;/p&gt;
&lt;div id=&quot;alignment-patterns-container&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;Draw the grid of 5×5 &lt;strong&gt;alignment patterns&lt;/strong&gt; (but skipping the three finder corners):&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Draw temporary dummy &lt;strong&gt;format bits&lt;/strong&gt; (adjacent to the finders):&lt;/p&gt;
&lt;div id=&quot;version-information-container&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;Draw the two 6×3 &lt;strong&gt;version information&lt;/strong&gt; blocks (adjacent to the finders):&lt;/p&gt;
&lt;/div&gt;
&lt;/section&gt;&lt;section readability=&quot;17&quot;&gt;&lt;h3&gt;6. Draw codewords and remainder&lt;/h3&gt;
&lt;p&gt;Compute the zig-zag scan (which starts from the bottom right corner) to visit all unfilled modules (i.e. skipping function modules):&lt;/p&gt;
&lt;p&gt;Draw data/ECC modules according to the zig-zag scan order and bit values from the final sequence of codewords:&lt;/p&gt;
&lt;p&gt;(For example, the codeword byte &lt;span class=&quot;binary-value&quot;&gt;C5&lt;/span&gt; produces the sequence of modules [black, black, white, white, white, black, white, black].)&lt;/p&gt;
&lt;/section&gt;&lt;section readability=&quot;11&quot;&gt;&lt;h3&gt;7. Try applying each mask&lt;/h3&gt;
&lt;p&gt;Show: &lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;mask pattern&lt;/strong&gt; (only affects non-function modules):&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;XOR the mask&lt;/strong&gt; to the modules of data, ECC, and remainder:&lt;/p&gt;
&lt;p&gt;Draw the actual &lt;strong&gt;format bits&lt;/strong&gt; (adjacent to the finders):&lt;/p&gt;
&lt;/section&gt;&lt;section readability=&quot;12&quot;&gt;&lt;h3&gt;8. Find penalty patterns&lt;/h3&gt;
&lt;p&gt;Horizontal runs of same color modules (each at least 5 long):&lt;/p&gt;
&lt;p&gt;Vertical runs of same color modules (each at least 5 long):&lt;/p&gt;
&lt;p&gt;2×2 boxes of same color modules:&lt;/p&gt;
&lt;p&gt;Horizontal finder-like patterns:&lt;/p&gt;
&lt;p&gt;Vertical finder-like patterns:&lt;/p&gt;
&lt;p&gt;Balance of black/white modules:&lt;/p&gt;
&lt;table id=&quot;black-white-balance&quot; class=&quot;section-bottom&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Side length:&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Total modules:&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;White modules:&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Black modules:&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Proportion black:&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Deviation from half:&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;section readability=&quot;4&quot;&gt;&lt;h3&gt;9. Calculate penalty points, select best mask&lt;/h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;abbr title=&quot;Mask pattern number&quot;&gt;Mask&lt;/abbr&gt;&lt;/th&gt;
&lt;th&gt;&lt;abbr title=&quot;Linear same-color run penalty points&quot;&gt;RunP&lt;/abbr&gt;&lt;/th&gt;
&lt;th&gt;&lt;abbr title=&quot;2×2 same-color box penalty points&quot;&gt;BoxP&lt;/abbr&gt;&lt;/th&gt;
&lt;th&gt;&lt;abbr title=&quot;Finder-like pattern penalty points&quot;&gt;FindP&lt;/abbr&gt;&lt;/th&gt;
&lt;th&gt;&lt;abbr title=&quot;Black/white balance penalty points&quot;&gt;BalP&lt;/abbr&gt;&lt;/th&gt;
&lt;th&gt;&lt;abbr title=&quot;Total penalty points&quot;&gt;TotalP&lt;/abbr&gt;&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody id=&quot;select-best-mask&quot;/&gt;&lt;/table&gt;&lt;p&gt;Lowest total penalty points: Mask pattern &lt;span id=&quot;lowest-penalty-mask&quot;/&gt;&lt;/p&gt;
&lt;p&gt;How penalties are calculated:&lt;/p&gt;
&lt;ul readability=&quot;6&quot;&gt;&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;RunP: 3 points for each 5-module linear run of the same color, 4 points for each 6-module run, 5 points for each 7-module run, 6 points for each 8-module run, etc. Runs cannot overlap.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;BoxP: 3 points for each 2×2 box of the same color. Boxes can overlap.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;FindP: 40 points for each finder-like pattern. Finder patterns can overlap.&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;section-bottom&quot; readability=&quot;4&quot;&gt;
&lt;p class=&quot;section-bottom&quot;&gt;BalP: 0 points if the proportion of black modules is in the range [45%, 55%]; 10 points if within [40%, 60%]; 20 points if within [35%, 65%]; 30 points if within [30%, 70%]; etc.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/section&gt;&lt;hr/&gt;&lt;p&gt;This web application’s source TypeScript code (&lt;a href=&quot;https://www.nayuki.io/res/creating-a-qr-code-step-by-step/creating-qr-code-steps.ts&quot;&gt;file 0&lt;/a&gt;, &lt;a href=&quot;https://www.nayuki.io/res/creating-a-qr-code-step-by-step/instrumented-qrcodegen.ts&quot;&gt;file 1&lt;/a&gt;) and &lt;a href=&quot;https://www.nayuki.io/res/creating-a-qr-code-step-by-step/creating-qr-code-steps.js&quot;&gt;compiled JavaScript code&lt;/a&gt; are available for viewing.&lt;/p&gt;
&lt;h2&gt;More info&lt;/h2&gt;
&lt;footer&gt;

&lt;/footer&gt;</description>
<pubDate>Tue, 11 Aug 2020 11:10:28 +0000</pubDate>
<dc:creator>creolabs</dc:creator>
<dc:language>en</dc:language>
<dc:format>application/xhtml+xml</dc:format>
<dc:identifier>https://www.nayuki.io/page/creating-a-qr-code-step-by-step</dc:identifier>
</item>
</channel>
</rss>