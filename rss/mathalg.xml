<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed43.com%2Fmathalg-jtks.xml&amp;max=5&amp;links=preserve&amp;exc=1" />
<atom:link rel="alternate" title="Source URL" href="http://feed43.com/mathalg-jtks.xml" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed43.com%252Fmathalg-jtks.xml%26max%3D5%26links%3Dpreserve%26exc%3D1&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed43.com%252Fmathalg-jtks.xml%26max%3D5%26links%3Dpreserve%26exc%3D1" />
<title>算法与数学之美</title>
<link>http://www.jintiankansha.me/column/c9dZ5TM2aS</link>
<description>算法与数学之美 - 今天看啥</description>
<ttl>360</ttl>
<item>
<title>博士最“惨”能到什么程度？</title>
<link>http://www.jintiankansha.me/t/4taY3ITDju</link>
<guid isPermaLink="true" >http://www.jintiankansha.me/t/4taY3ITDju</guid>
<description>&lt;p&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span helvetica=&quot;&quot; neue=&quot;&quot; sc=&quot;&quot; sans=&quot;&quot; gb=&quot;&quot; yahei=&quot;&quot; ui=&quot;&quot; arial=&quot;&quot; sans-serif=&quot;&quot;&gt;来源 | 科学指南针服务平台&lt;/span&gt;&lt;/p&gt;
&lt;section class=&quot;V5&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot; helvetica=&quot;&quot; neue=&quot;&quot; sc=&quot;&quot; sans=&quot;&quot; gb=&quot;&quot; yahei=&quot;&quot; ui=&quot;&quot; arial=&quot;&quot; sans-serif=&quot;&quot; normal=&quot;&quot; break-word=&quot;&quot;&gt;&lt;section readability=&quot;6.5&quot;&gt;&lt;section readability=&quot;13&quot;&gt;&lt;p helvetica=&quot;&quot; neue=&quot;&quot; sc=&quot;&quot; sans=&quot;&quot; gb=&quot;&quot; yahei=&quot;&quot; ui=&quot;&quot; arial=&quot;&quot; sans-serif=&quot;&quot; normal=&quot;&quot; rgb=&quot;&quot; break-word=&quot;&quot;&gt;&lt;span&gt;你看过早上的太阳换岗晚上的月亮了吗？&lt;/span&gt;&lt;/p&gt;

&lt;p helvetica=&quot;&quot; neue=&quot;&quot; sc=&quot;&quot; sans=&quot;&quot; gb=&quot;&quot; yahei=&quot;&quot; ui=&quot;&quot; arial=&quot;&quot; sans-serif=&quot;&quot; normal=&quot;&quot; rgb=&quot;&quot; break-word=&quot;&quot;&gt;&lt;span&gt;相信每个有过读研体验的研究僧们应该都见过的！&lt;/span&gt;&lt;/p&gt;

&lt;p helvetica=&quot;&quot; neue=&quot;&quot; sc=&quot;&quot; sans=&quot;&quot; gb=&quot;&quot; yahei=&quot;&quot; ui=&quot;&quot; arial=&quot;&quot; sans-serif=&quot;&quot; normal=&quot;&quot; rgb=&quot;&quot; break-word=&quot;&quot; center=&quot;&quot;&gt;&lt;span&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/RaNu88suiaCddo77w2YYsuTFtPYRVU0uX7kv63sEofb6vIONyNSIErqay4laqSXwaiaJO3Q7iaPf3tFSKbGI8RCbw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;640&quot; helvetica=&quot;&quot; neue=&quot;&quot; sc=&quot;&quot; sans=&quot;&quot; gb=&quot;&quot; yahei=&quot;&quot; ui=&quot;&quot; arial=&quot;&quot; sans-serif=&quot;&quot; normal=&quot;&quot; border-box=&quot;&quot; break-word=&quot;&quot; visible=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p helvetica=&quot;&quot; neue=&quot;&quot; sc=&quot;&quot; sans=&quot;&quot; gb=&quot;&quot; yahei=&quot;&quot; ui=&quot;&quot; arial=&quot;&quot; sans-serif=&quot;&quot; normal=&quot;&quot; rgb=&quot;&quot; break-word=&quot;&quot;&gt;&lt;span&gt;你在那头高高反对996！研究僧们却在这头默默的体会007！&lt;/span&gt;&lt;/p&gt;

&lt;p helvetica=&quot;&quot; neue=&quot;&quot; sc=&quot;&quot; sans=&quot;&quot; gb=&quot;&quot; yahei=&quot;&quot; ui=&quot;&quot; arial=&quot;&quot; sans-serif=&quot;&quot; normal=&quot;&quot; rgb=&quot;&quot; break-word=&quot;&quot;&gt;&lt;span&gt;不！007都是家常便饭，日常通宵才是常态！&lt;/span&gt;&lt;/p&gt;

&lt;p helvetica=&quot;&quot; neue=&quot;&quot; sc=&quot;&quot; sans=&quot;&quot; gb=&quot;&quot; yahei=&quot;&quot; ui=&quot;&quot; arial=&quot;&quot; sans-serif=&quot;&quot; normal=&quot;&quot; rgb=&quot;&quot; break-word=&quot;&quot; center=&quot;&quot;&gt;&lt;span&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5597014925373134&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/RaNu88suiaCddo77w2YYsuTFtPYRVU0uXtB6O5oGrjSiaoK7PiclVNEhMFc3rpLEKoib9HI7ic9PHbQ24IxDLdf63TQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;536&quot; helvetica=&quot;&quot; neue=&quot;&quot; sc=&quot;&quot; sans=&quot;&quot; gb=&quot;&quot; yahei=&quot;&quot; ui=&quot;&quot; arial=&quot;&quot; sans-serif=&quot;&quot; normal=&quot;&quot; border-box=&quot;&quot; break-word=&quot;&quot; visible=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p helvetica=&quot;&quot; neue=&quot;&quot; sc=&quot;&quot; sans=&quot;&quot; gb=&quot;&quot; yahei=&quot;&quot; ui=&quot;&quot; arial=&quot;&quot; sans-serif=&quot;&quot; normal=&quot;&quot; rgb=&quot;&quot; break-word=&quot;&quot;&gt;&lt;span&gt;早晨五六点一睁眼！像瞎子一样摸了摸四周的眼镜，仔细一看，东西又看不清了，哎！度数又涨了一两百度。好担心过几年就啥也看不见了！接着去洗漱，对着镜子，脸上的褶子又多加了几道，鱼尾纹密的都快成新的平面了！这都不算啥，最怕的就是手里拿着梳子，不不不，现在可能连梳子都不敢拿只敢用手顺了！结果顺下来，一大把头发！&lt;/span&gt;&lt;/p&gt;

&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5766666666666667&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/RaNu88suiaCddo77w2YYsuTFtPYRVU0uXRQIfIlyp71IKjqhBDIGMPJn0ibk2icgwLiaKqxDwzjlrAlApKc3SSVRwg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;600&quot; helvetica=&quot;&quot; neue=&quot;&quot; sc=&quot;&quot; sans=&quot;&quot; gb=&quot;&quot; yahei=&quot;&quot; ui=&quot;&quot; arial=&quot;&quot; sans-serif=&quot;&quot; normal=&quot;&quot; border-box=&quot;&quot; break-word=&quot;&quot; visible=&quot;&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;刷个牙发现又刷出血了，嗯，牙龈又出问题了！或者发现自己都活到快30了，居然还能像小孩子一样又长了一颗牙齿！不过，是颗智齿！疼得半边脸都肿了！&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6666666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/RaNu88suiaCddo77w2YYsuTFtPYRVU0uXicW4svCxLE5ZBds6TQ0OTib6xlkibwvQKmyVgl1lOWKxiaH9zH7RZkncxg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;600&quot; helvetica=&quot;&quot; neue=&quot;&quot; sc=&quot;&quot; sans=&quot;&quot; gb=&quot;&quot; yahei=&quot;&quot; ui=&quot;&quot; arial=&quot;&quot; sans-serif=&quot;&quot; normal=&quot;&quot; border-box=&quot;&quot; break-word=&quot;&quot; visible=&quot;&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;毛巾随手一擦，衣服胡乱一套，又去做可能怎么都重复不出来的实验去了�&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;</description>
<pubDate>Sun, 10 Nov 2019 03:28:53 +0000</pubDate>
<dc:language>zh-CN</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.jintiankansha.me/t/4taY3ITDju</dc:identifier>
</item>
<item>
<title>启发式算法在最优化问题求解中的应用与实践</title>
<link>http://www.jintiankansha.me/t/oNhRwjfoCD</link>
<guid isPermaLink="true" >http://www.jintiankansha.me/t/oNhRwjfoCD</guid>
<description>&lt;section class=&quot;xmt-style-block&quot; data-style-type=&quot;5&quot; data-tools=&quot;&amp;#x65B0;&amp;#x5A92;&amp;#x4F53;&amp;#x6392;&amp;#x7248;&quot; data-id=&quot;2625681&quot;&gt;&lt;section class=&quot;&quot; data-mpa-template-id=&quot;90&quot; data-mpa-color=&quot;#ffffff&quot; data-mpa-category=&quot;quote&quot;&gt;&lt;section readability=&quot;2.5&quot;&gt;&lt;section data-preserve-color=&quot;t&quot; readability=&quot;5&quot;&gt;&lt;p&gt;&lt;strong&gt;最优化问题&lt;/strong&gt;广泛的存在于社会生产活动当中，我们一直努力寻求更高效、更准确的解决方式来应对这类问题。通常，最优化问题可以表述为一种数学规划的形式，对于变量在可行域中的不同组合进行搜索，以得到目标函数的最优值。在解决常规的最优化问题时，有多种解决方案，如梯度下降法，拉格朗日乘数法等。然而，有一类最优化问题却是人类目前难以逾越的门槛，即&lt;strong&gt;NP完全问题&lt;/strong&gt;（Non-deterministicPolynomial）。本文介绍了最优化问题的常见应用场景和求解方式，并重点对启发式算法在求解NP问题的次优解过程进行了分析。最后通过模拟退火算法和&lt;strong&gt;蚁群算法&lt;/strong&gt;寻求最优化路径的实例，实践了通过&lt;strong&gt;启发式算法&lt;/strong&gt;来求解NP问题的&lt;strong&gt;次优解&lt;/strong&gt;，为我们在日常生产活动中解决此类时间复杂度具有不确定性的最优化问题提供一种成本可控，目标效益更高的解决方案。&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;xmt-style-block&quot; data-style-type=&quot;5&quot; data-tools=&quot;&amp;#x65B0;&amp;#x5A92;&amp;#x4F53;&amp;#x6392;&amp;#x7248;&quot; data-id=&quot;2624531&quot;&gt;&lt;section class=&quot;&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section https:=&quot;&quot; border-box=&quot;&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section class=&quot;&quot;&gt;&lt;p&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section class=&quot;&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;引言&lt;/strong&gt;&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在日常生产活动中，我们经常会面临诸如：超市的配货卡车需要给不同的门店送去货物，如何规划卡车的配货路线，使得每个门店均可接收到货物，并且卡车配送所花时间和行驶里程最短；某视频门户网站需要在全国各地设立视频资源存放服务器，一方面要保证服务器部署节点能够覆盖所有的用户，并且要降低从用户到服务器之间的链路成本，提高用户请求视频资源的响应效率，另一方面要尽量减少服务器部署节点，以降低经济成本；这类路线规划和资源配置问题均可归类到最优化问题的求解范畴。解决最优化问题的方法被称为最优化方法，常见的最优化方法有以下几类：1）梯度下降法；2）牛顿法；3）共轭梯度法；4）拉格朗日乘数法；5）启发式算法。这五类算法每一种都有自己适用的场景和其优势，因此在解决最优化问题前，分析应用场景，选取合适的最优化方法是首要任务。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;计算机科学的两大基础目标是：发现可证明其执行效率良好且可得到问题的最优解或次优解的算法。而在最优化问题中，有这样一类问题却是目前人类难以逾越的门槛——NP完全问题，该问题也是世界七大数学难题之一（其中庞加莱猜想现已被俄罗斯数学家格里戈里·佩雷尔曼解决）。NP即多项式复杂程度的非确定性问题，所有的在非确定性多项式时间可解的判定问题构成了NP类问题。在解决这类问题时，常规的确定性时间复杂度的算法不再适用，而启发式算法这类非确定性时间复杂度的算法，却能够较好的寻找到该类问题的一个可以接受的次优解。通常，启发式算法搜索得到的问题的解不是最优解，而是随着算法的改进和迭代无限接近最优解的次优解。因为目前，我们找不到一个更好的算法，能够证明其执行效率良好、稳定，并且能得到问题最优解的算法，所以启发式算法是目前我们解决这类问题的一种较好手段。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;常用的启发式算法有模拟退火算法、遗传算法、蚁群算法和人工神经网络等。以上这些算法我们都不能给出其确定的执行时间复杂度，也不能证明其求解得到的解是否是问题的最优解。而是能够在大多数情况下，在“可接受”的时间开销内得到问题的一个“较好”的解。评价“可接受”的依据是能够保证生产的基本时间开销要求，评价“较好”的依据是，所得到的虽然不是最优解，却是一个能够满足生产活动需求并且带来更大效益的解。因此学习研究启发式算法对于我们在日常生产活动中解决某些最优化问题有着重要作用和意义。启发式算法领域也在近几年得到了广泛的应用和研究，如人工神经网络应用于机器学习等领域的研究。另外三种启发式算法，均为仿自然界生物现象的算法。模拟退火算法来源于固体退火的过程，用于求解组合优化类问题；遗传算法模拟了达尔文生物进化论的自然选择和遗传学机理的生物进化过程，用于解决搜索类问题；蚁群算法模拟了蚂蚁寻找食物过程中发现路径的行为，用于解决路径优化问题，也是一种比较有趣的算法。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;本文的主要工作是；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;1）对最优化问题及其常见的应用场景和解决方法进行了介绍和分析；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2）分析讲解了P类问题，NP类问题和NP完全问题（NP-C问题）；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;3）介绍了常见的启发式算法及其应用，并重点就模拟退火算法和蚁群算法为代表的启发式算法解决NP类问题进行了讲解和实践。&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;xmt-style-block&quot; data-style-type=&quot;5&quot; data-tools=&quot;&amp;#x65B0;&amp;#x5A92;&amp;#x4F53;&amp;#x6392;&amp;#x7248;&quot; data-id=&quot;2624531&quot;&gt;&lt;section class=&quot;&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section https:=&quot;&quot; border-box=&quot;&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section class=&quot;&quot;&gt;&lt;p&gt;&lt;strong&gt;2&lt;/strong&gt;&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section readability=&quot;1&quot;&gt;&lt;section class=&quot;&quot; powered-by=&quot;xiumi.us&quot; readability=&quot;2&quot;&gt;&lt;p&gt;&lt;strong&gt;常见最优化问题及其解决方法&lt;/strong&gt;&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;2.1下山最优路径问题与梯度下降法&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如下图2.1所示，假设有一座山，四周都是浓雾，看不清任何东西。如何在山顶的A点出发，找到一条去山脚的最快路径，这就是一个最优化问题。在解决这个问题时，我们把这座山看作可微分的函数，山的高度看作函数的目标值，也就是要找到一条路径，使得函数值下降得最快，就可以找到最快下山的路径。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.7114285714285714&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/pSqFmkOFya1mFaYOxicKicvrsZNwt2lbZv2JRgvqPeqdLy9tT4HYj4Q9U2K2o2cHpias5FGtF8S8Y3iaEX4fkpRf0A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;350&quot;/&gt;&lt;/p&gt;
&lt;section&gt;&lt;span&gt;图2.1. 梯度下降法&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;建立一个平面坐标系后，将山上每个点的高度看作关于的函数：                                                   &lt;/span&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.2972972972972973&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/pSqFmkOFya1mFaYOxicKicvrsZNwt2lbZv7jvvaMBYX1LiaG37IpvvhLjo6OsPuMu8TH7TcBEMIIXzU0HnCZtIpHg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;74&quot;/&gt;&lt;span&gt;                       (1)&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;站在A点的时候，通过求该点的梯度，梯度是一个向量，该向量的方向指向了函数值增长最快的方向。因此要下山最快，就沿着与梯度方向相反的方向走。当函数是单变量时，梯度即为导数；当函数为多变量时，梯度即为分别对每个自变量求偏导后构成的一个向量。采用梯度下降的算法有SGD，Adam。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2.2非线性函数与X轴交点问题与牛顿法&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;/&gt; &lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6140845070422535&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/pSqFmkOFya1mFaYOxicKicvrsZNwt2lbZvAUY3hL00U2jFpfgt3ibicicjZibSFKXaXckZkHCC2jEDnrXEs2zJNuwOIg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;355&quot;/&gt;&lt;/p&gt;
&lt;section&gt;&lt;span&gt;图2.2. 牛顿法&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如图2.2所示，牛顿法主要用于解决研究问题中的目标值是关于变量的非线性函数，且在可行域中只有一个交点，但是通过数学计算方法无法求得精确的交点。牛顿法提供了一种通过迭代的方式无限逼近交点，其思想为从某一点出发，求得该点处函数的切线，得到切线与x轴的交点记作，再次求处的切线，得到下一个交点，就这样无限的逼近函数与x轴的交点。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;牛顿法能够快速收敛于最优值的原因是：当函数任意阶可导时，通过展开为泰勒级数，取泰勒级数一阶展开式构建的线性函数来代替曲线，因为从微观的角度看，极小的区间内，曲线就趋近于直线。而牛顿法需要求解函数在区间内的二阶偏倒数，因此要求函数二阶连续可微。LM算法即采用的牛顿法。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2.3牛顿法的改进——拟牛顿法&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;从上面介绍的牛顿法可知，虽然收敛速度较快，但是需要计算目标函数的二阶偏导数来构建线性函数，该过程计算复杂度较大，并且目标函数的黑塞矩阵不是所有时候都保持正定，牛顿法在这种情况下就失效了。而拟牛顿法就是为了解决计算复杂度大，黑塞矩阵有时不是正定的问题而提出的。拟牛顿法的改进思想是：不用二阶偏导数近似的构造黑塞矩阵（或其逆矩阵）的正定对称阵。使用较多的拟牛顿算法有DFP，BFGS和L-BFGS。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;以上介绍的三种最优化算法是机器学习中最常用的三类迭代算法。表格2.1给出了三种算法的特点对比和常见应用场景。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;表2.1三种最优化算法的特征对比&lt;/span&gt;&lt;/section&gt;&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; width=&quot;520&quot;&gt;&lt;tbody readability=&quot;8&quot;&gt;&lt;tr&gt;&lt;td width=&quot;87&quot;&gt;
&lt;section&gt;&lt;span&gt;算法&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;
&lt;td width=&quot;114&quot;&gt;
&lt;section&gt;&lt;span&gt;迭代时间复杂度&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;
&lt;td width=&quot;101&quot;&gt;
&lt;section&gt;&lt;span&gt;算法收敛速度&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;
&lt;td width=&quot;132&quot;&gt;
&lt;section&gt;&lt;span&gt;初始值要求&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;
&lt;td width=&quot;85&quot;&gt;
&lt;section&gt;&lt;span&gt;应用场景&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td width=&quot;87&quot;&gt;
&lt;section&gt;&lt;span&gt;梯度下降法&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;
&lt;td width=&quot;114&quot;&gt;
&lt;section&gt;&lt;span&gt;需计算一阶导，复杂度为&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;
&lt;td width=&quot;101&quot;&gt;
&lt;section&gt;&lt;span&gt;收敛较慢&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;
&lt;td width=&quot;132&quot;&gt;
&lt;section&gt;&lt;span&gt;容易逃离鞍点（一阶倒数为0）&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;
&lt;td width=&quot;85&quot;&gt;
&lt;section&gt;&lt;span&gt;特征维度较大的场景&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td width=&quot;87&quot;&gt;
&lt;section&gt;&lt;span&gt;牛顿法&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;
&lt;td width=&quot;114&quot;&gt;
&lt;section&gt;&lt;span&gt;需计算二阶导，复杂度为&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;
&lt;td width=&quot;101&quot;&gt;
&lt;section&gt;&lt;span&gt;收敛快&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;
&lt;td width=&quot;132&quot;&gt;
&lt;section&gt;&lt;span&gt;有要求，非凸函数容易陷入鞍点&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;
&lt;td width=&quot;85&quot;&gt;
&lt;section&gt;&lt;span&gt;特征维度较小的场景&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td width=&quot;87&quot;&gt;
&lt;section&gt;&lt;span&gt;拟牛顿法&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;
&lt;td width=&quot;114&quot;&gt;
&lt;section&gt;&lt;span&gt;近似Hessian矩阵的逆矩阵，复杂度为&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;
&lt;td width=&quot;101&quot;&gt;
&lt;section&gt;&lt;span&gt;收敛快&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;
&lt;td width=&quot;132&quot;&gt;
&lt;section&gt;&lt;span&gt;无明显要求&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;
&lt;td width=&quot;85&quot;&gt;
&lt;section&gt;&lt;span&gt;比较适合凸优化问题&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;2.4拉格朗日乘数法&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section/&gt;&lt;section&gt;&lt;span&gt;拉格朗日乘数法由法国著名数学家约瑟夫·拉格朗日提出，用于求解多元函数在变量受一个或多个限制条件约束下的极值问题。假设一个多元函数有个变量，需要求解个约束条件下的极值，拉格朗日乘数法通过将该最优化问题转化为一个有个变量的函数的极值问题。在这个转化过程中，需要引入一个新的参数，即拉格朗日乘数：新构建的方程组中，每个向量的系数。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;下面我们看这样一个最优化问题的情境：有一个纺织工厂主想要尽可能的提高其工厂利润，假设在厂房（足够使用）等外部条件固定时，利润函数与投入的纺织机数量和雇佣的工人数量有关，假设可表示为，因为纺织机的数量和工人数量必须构成一定的比例关系，才能不造成工人空闲或工人照看不了过多的纺织机，该比例关系表示为，由于工厂主的资金有限，最多能够为纺织机购置和工人雇佣支付的金额。因此需要满足：，由于在厂房够用的情况下，工厂主希望能够以最大的资金投入，来获取更多的回报，因此，可以得到。接着，将上面的收益函数在约束条件最大化表示为以下形式：                            &lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.3681592039800995&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/pSqFmkOFya1mFaYOxicKicvrsZNwt2lbZv0OC4sAhfRok9Hzah1ada19iciaicJ15lauticSx91eP1uxXQic0Hu0Bn5og/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;201&quot;/&gt;&lt;span&gt;     (2)&lt;/span&gt;&lt;/p&gt;
&lt;section&gt;&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;/&gt; &lt;span&gt;此时引入两个新的参数构建方程：                        &lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.08108108108108109&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/pSqFmkOFya1mFaYOxicKicvrsZNwt2lbZvnaPTyMiaKYgVhZb4TDkes0SDibHpSLZZn9RV4vE0HVH7VDevJYXTTR2g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;296&quot;/&gt;&lt;span&gt;           (3)&lt;/span&gt;&lt;/p&gt;
&lt;section&gt;&lt;span&gt;然后令函数对自变量分别求一阶偏导数的值为0，可得到：                              &lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.4128113879003559&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/pSqFmkOFya1mFaYOxicKicvrsZNwt2lbZv6rntQmGpWGsZCukPb5yXKDEIKxflApweHxdThpe9fLSicXIB8lH4ljw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;281&quot;/&gt;&lt;span&gt;        (4)&lt;/span&gt;&lt;/p&gt;
&lt;section&gt;&lt;span&gt;通过求解上述方程组（4）即可得到工厂主的利润函数z的极值，这里的极值有可能是最小值，也有可能是最大值。如果求得的极值点只有一个，那么该极值点就是问题的最优解，因为不可能是最小值（不投入资金时候收益为0）。当求得的极值点有多个时候，我们很容易把这几个极值点代入到利润函数z中去，通过比较计算得到的值，其中最大值对应的极值点，就是问题的最优解。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;2.5启发式算法&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;启发式算法的定义是：一个基于直观或经验构造的算法，在可接受的花费（指计算时间和空间）下给出待解决组合优化问题每一个实例的一个可行解，该可行解与最优解的偏离程度一般不能被预计（来源于百度百科）。常见的启发式算法有：模拟退火算法，遗传算法，蚁群算法和神经网络，均为仿自然体的算法。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;2.5.1模拟退火算法&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;模拟退火算法是是仿固体退火原理，当固体被加温时，内能增大，粒子的动能增大，处于无序状态，而温度逐渐降低过程中，粒子会逐渐趋于稳定有序，内能达到最低。在这一过程中，粒子的排列组合决定了内能的大小，但固体最终会形成一种内能最低的状态。模拟退火算法就是模拟的这个随着温度下降，内能降低的过程。通常可以用来解决复杂度较高的组合问题。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.3392070484581498&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/pSqFmkOFya1mFaYOxicKicvrsZNwt2lbZvWebtlFJlro8OvFUGKhyNS5h7QJpgs29CRquv42IicsDjw6ASFX1hfPA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;454&quot;/&gt;&lt;/p&gt;
&lt;section&gt;&lt;span&gt;图2.3. 模拟退火算法示意图&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在图2.3中，固体初始温度低，粒子排列较为紧密，但不是最紧密的状态。此时将固体加热，粒子由于吸热内能变大，热运动变强烈，粒子间距离增大。随着温度逐渐降低，最终粒子会趋于平衡状态，粒子排列最为紧密，内能最低。这种粒子排列组合状态，就是使得内能最低的最优状态。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;2.5.2遗传算法&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;遗传算法模拟的是达尔文的生物进化理论，处理方法包括“选择运算”，“交叉算子”和“变异运算”，评价和选择指标则是“适者生存”。因为启发式算法主要用来解决搜索最优解复杂度较高的问题，常规的“蛮力法”搜索通常极为耗费资源，且不能在可接受的时间内得到问题的解。那么，启发式算法必须按照一种更“合理”的搜索方式来逼近问题的最优解，遗传算法就是按照生物进化论的方式来搜索，将每次得到的个体（问题的一个可行解），通过一个适应度来评价，适应度越高，距离最优解的距离也就越近。因此，在每次跌倒过程中，适应度越高的个体，其基因遗传下去的概率会更大，这就是“适者生存”。并且，个体基因遗传下去的方式有：直接遗传给下一代，或者与其他个体配对后遗传（选择运算）；当两个个体配对时，必须按照一定的规则来继承上一代的基因，这个规则就是“交叉算子”；在遗传的过程中，个体的基因会有一定概率发生改变，基因改变的过程就是“变异运算”。遗传算法的过程可用图2.4表示。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.3633093525179856&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/pSqFmkOFya1mFaYOxicKicvrsZNwt2lbZvavAsq5qicBjFibLe3HwQtAXzYAWaicprVngjlbJFK03gehWicU1TqkDWicg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;278&quot;/&gt;&lt;/p&gt;
&lt;section&gt;&lt;span&gt;图2.4. 遗传算法&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;2.5.3蚁群算法&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;蚁群算法用于解决寻找最优路径的问题，模拟的是蚂蚁找食物的过程，是一种比较有趣的算法。在自然现象中，我们可以观测到这样的现象：蚂蚁找寻找到食物时，通常能够走一条接近直线的路线到窝，如果直线上有障碍，也能够找到最短的绕过路线。这一现象就说明，蚂蚁寻找食物的过程，一定用一种机制来指导整个蚁群寻找到最优的路径。蚁群算法，就是对这一现象观测研究，然后抽象简化得到的寻找最优路径的算法。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.22687224669603523&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/pSqFmkOFya1mFaYOxicKicvrsZNwt2lbZvV2iaSjIIJHDkAtsg7FyATF6CoN3RFDYuAnZXFCHhoJ6picyfaSrY93ew/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;454&quot;/&gt;&lt;/p&gt;
&lt;section&gt;&lt;span&gt;图2.5. 蚁群运食物路线示意图&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;蚂蚁找食物最重要的两个特征是多样性和正反馈：多样性，即蚂蚁在选择路径时，有一定的概率随机选择任意的方向，以探索新的路径；正反馈则是，蚂蚁在选择路径时，较大的概率选择较多蚂蚁走过的路径。正是这两种机制巧妙的结合在一起，才使得蚂蚁能够找到一条接近最优的路径。如果多样性的影响过大，则会出现整个蚁群过于活跃，无法收敛到一条路径上，如果正反馈影响过于大，则会出现蚁群出现僵化的现象，陷入一个区域无法出来。蚁群算法，对寻路过程抽象为以下几个方面：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;1）蚂蚁的感知范围：任何一只蚂蚁只能感知以它为中心的一定半径大小圆形区域的路径。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2）信息素：有代表窝的信息素和代表食物的信息素，分别指导蚂蚁找窝和食物。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;3）遗留信息素：蚂蚁寻找到窝时，会在附近遗留下最多窝的信息素，随着距离窝越远，遗留的信息素越少。寻找到食物时，同理，距离食物越远遗留食物信息素越低。所有的信息素会以一定的速率挥发消失。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;4）蚂蚁寻路规则：如果周围有信息素，则较大概率走信息素高的地方，否则按照惯性保持直线行走，有小概率会选择其他的方向，并且能够记住最近走过的点，不重复。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;5）躲避障碍物：有信息素时候，选取信息素高的地方，否则随机选择其他方向。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;2.5.4神经网络&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这里所说的神经网络指的是人工神经网络（ArtificialNeural Network，ANN），是近年来人工智能领域的研究热点，模拟的是人脑神经元之间的传递过程，通过构建数学映射模型，在神经元之间通过激励函数来传递信息，从而从输入映射到输出。由于最开始构建的神经网络模型，没有得到任何训练，从输入映射得到的输出可能相对于我们期望的输出误差较大，这时通过把误差反向传播，以调节中间神经元之间的权值，经过大量这种训练和反馈调节过程，最终神经网络系统能够得到准确度较高的结果。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.762114537444934&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/pSqFmkOFya1mFaYOxicKicvrsZNwt2lbZvMzJmXhTQyoRSEt3eN9iaibGgL8oNtTct1vuE5D2HZf5EqeKD0WIvPITA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;454&quot;/&gt;&lt;/p&gt;
&lt;section&gt;&lt;span&gt;图2.6. 神经网络示意图&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;图2.6中通过一个形象的例子来示意了神经网络工作的过程，将神经网络系统看做一个复杂的水管管道系统，每一层都有很多节点，每一个节点均与上下邻近的所有节点相邻，且位于节点上的开关可以控制流向下一层的每个节点的水量大小。现在希望神经网络能够识别阿拉伯数字，在图片库中有很多写有数字的照片，我们将照片的数据看做水流，从最上层流入最下层，该系统会将最下层接收到水流最多的桶上的数字判定为输入照片的数字。最开始的时候，误差比较大，经常识别错误，这时我们就调节中间层每一个开关，控制不同方向的流量。经过大量这种训练调节过程，最终我们只要将写有数字的卡片输入，就能非常准确的识别出对应的数字。&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;xmt-style-block&quot; data-style-type=&quot;5&quot; data-tools=&quot;&amp;#x65B0;&amp;#x5A92;&amp;#x4F53;&amp;#x6392;&amp;#x7248;&quot; data-id=&quot;2624531&quot;&gt;&lt;section class=&quot;&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section https:=&quot;&quot; border-box=&quot;&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; readability=&quot;1&quot;&gt;&lt;section class=&quot;&quot; readability=&quot;2&quot;&gt;&lt;p&gt;&lt;strong&gt;3 NP类问题与启发式算法&lt;/strong&gt;&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;/&gt; &lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section readability=&quot;1&quot;&gt;&lt;section class=&quot;&quot; powered-by=&quot;xiumi.us&quot; readability=&quot;2&quot;&gt;&lt;p&gt;&lt;strong&gt;NP类问题与启发式算法&lt;/strong&gt;&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;3.1 P类问题、NP类问题和NP完全问题&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在介绍这三类问题时，首先介绍一下多项式时间复杂度。当我们说起冒泡排序算法，会将其时间复杂度表示为，而快速排序算法，时间复杂度表示为，这两种算法均为多项式时间复杂度。通常，一个算法具有多项式时间复杂度时，均可表示为以下形式：&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.16071428571428573&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/pSqFmkOFya1mFaYOxicKicvrsZNwt2lbZvIwQibU6HME51SWnAjWemGJqvHzibw4SGv49XacGkEIGjdEZrSwJ89nvw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;168&quot;/&gt;&lt;span&gt;   (5)&lt;/span&gt;&lt;/p&gt;

&lt;section&gt;&lt;span&gt;P（Polynominal）类问题，即能够在多项式时间复杂度内得到该问题的解。而NP类问题（Non-DeterministicPolynomial Problems），从字面上翻译为“非确定性多项式问题”，即不能在确定的多项式时间复杂度内得到该问题的解。另一方面来定义，NP类问题指的是“能够在多项式时间复杂度内验证问题的一个解”。也就是说，虽然我们不知道是否存在一个算法能够在多项式时间复杂度内得到NP问题的解，但我们可以在多项式时间复杂度内验证某个答案是否是NP问题的一个可行解。旅行商问题（TSP）是一个著名的NP问题，该问题描述了一个商人要去拜访n个城市，要求途中经过每个城市1次且仅1次，最后回到出发城市，如何找到最短的那条回路？该问题，如果用蛮力法来罗列所有的组合，复杂度为，这就不是多项式时间复杂度了。NP完全问题是NP问题的一个子集，如果任何一个NP问题，均可在多项式时间复杂度内转化为某个NP问题，那么就被称为NP完全问题。进而可以推得，如果中存在某个NP问题可以在多项式时间复杂度内求解，那么任何一个NP问题都可以在多项式时间复杂度内求解，即著名的难题“NP=P？”。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;3.2 模拟退火算法求解TSP问题&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;模拟退火算法其实也是一种贪婪算法，只不过加入了随机因素来接受一个比当前解更差的解。由于普通的贪婪算法容易陷入局部最优，因此，以一定概率接受更差的解可以跳出一些局部最优。如下图3.1所示，从A点开始出发搜索最低点，普通贪婪算法搜索到B点时即停止搜索，而B点是一个局部最优解。模拟退火算法会以一个概率接受继续向C点移动，因此有可能会跨过C点，进而到达问题的最优解D。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5493421052631579&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/pSqFmkOFya1mFaYOxicKicvrsZNwt2lbZv03VY9aj2GrXLMQhFmNKwXZibklGz8ny4oSeWJEFR3bujgmibosGUoAibQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;304&quot;/&gt;&lt;/p&gt;
&lt;section&gt;&lt;span&gt;图 3.1. 模拟退火算法寻求最优解示意图&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;将模拟退火算法的执行步骤，表示为如下伪代码形式：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;算法1：采用模拟退火算法求解组合优化问题的执行步骤&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;     输入：组合优化问题的一个初始解，及目标函数的值。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;     输出：问题的解（可能为最优解，也可能为次优解）&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;     01：产生问题的一个初始解，目标函数值及初始温度；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;     02：产生问题的一个新解，并计算其目标函数值和衰减后的温度；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;     03：当时，接受解，否则，以概率接受解；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;     04：如果超过一定次数均没有接受新解，结束当前搜索，否则，重复02~03步骤。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;算法1所示步骤为在一次温度衰减下的搜索过程，通常会重复执行算法1直到温度衰减到某个较低的值，不断迭代优化当前已经找到的最优解，然后从这些解中选择使得目标值最小的那个解为问题搜索得到的最优解。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6754385964912281&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/pSqFmkOFya1mFaYOxicKicvrsZNwt2lbZvkpC9XCyGAfPpYyiboM1ibKzpBymMydft6N6vvm0Jf0A0QrNybzJibo7cA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;228&quot;/&gt;&lt;/p&gt;
&lt;section&gt;&lt;span&gt;图 3.2. 旅行商问题&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在求解TSP问题时，需要在如图3.2所示的无向图中，寻求从某点出发并回到该点的一个哈密顿回路。每两个点之间的路径有一个权重，可看作路程里数，现在需要从A点出发，经过图中其他所有点1次回到A点的最短路径。模拟退火算法的做法是，首先我们从一条可行的回路出发，如A—&amp;gt;B—&amp;gt;D—&amp;gt;E—&amp;gt;F—&amp;gt;C—&amp;gt;A，这条回路看做初始解，并将路径长度24记为目标函数初始值。然后将起点与终点之外的路径做一个随机的重排，比如随机交换两点的位置，得到问题的新的解，根据新的解对应的目标函数值的大小判断是否接受新的解，运用算法1来循环执行该优化过程。&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;xmt-style-block&quot; data-style-type=&quot;5&quot; data-tools=&quot;&amp;#x65B0;&amp;#x5A92;&amp;#x4F53;&amp;#x6392;&amp;#x7248;&quot; data-id=&quot;2624531&quot;&gt;&lt;section class=&quot;&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section https:=&quot;&quot; border-box=&quot;&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section class=&quot;&quot;&gt;&lt;p&gt;&lt;strong&gt;04&lt;/strong&gt;&lt;br/&gt;&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section readability=&quot;1&quot;&gt;&lt;section class=&quot;&quot; powered-by=&quot;xiumi.us&quot; readability=&quot;2&quot;&gt;&lt;p&gt;&lt;strong&gt;启发式算法在寻找最优路径中的应用与实践&lt;/strong&gt;&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;    本节介绍通过模拟退火算法实现求解TSP问题和蚁群算法模拟蚂蚁找食物的仿真程序及其结果。程序通过C语言编写，在VisualStudio2012中编译通过。在通过图形化界面动态展现蚁群寻找食物过程时，用到了EasyX图形库。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;4.1 模拟退火算法应用于求解TSP问题的实践&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在该仿真中，解决一个有30个节点的全连通无向图的TSP问题，该问题如果通过暴力求解法，需要判别的组合数量为30！，这是一个非常巨大的数字。程序首先通过一个函数生成了图数据，写入到txt文本中，如图4.1和图4.2所示。第一行表示图中有30个节点，总共有435条边数据。第二行开始，（x，y，m）表示从节点x到节点y的权重为m。图4.3为模拟退火算法参数设定。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6685393258426966&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/pSqFmkOFya1mFaYOxicKicvrsZNwt2lbZvLNLoGOE0gFialWffia5lV1OEKn88ria36v9kR5Rr4KMl6lHvicbchQwfdw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;356&quot;/&gt;&lt;/p&gt;
&lt;section&gt;&lt;span&gt;图 4.1.图数据&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6685393258426966&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/pSqFmkOFya1mFaYOxicKicvrsZNwt2lbZvxtxbg20PHibpZx6wYsrbhcwOoUjsiaVKPu9TSRKVZXGCAWlqxl3fvIzQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;356&quot;/&gt;&lt;/p&gt;
&lt;section&gt;&lt;span&gt;图 4.2.图数据&lt;/span&gt; &lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;/&gt; &lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.30132450331125826&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/pSqFmkOFya1mFaYOxicKicvrsZNwt2lbZvKrcuGMbmp5LvpBGHBTO6q7Y77IHw7KkibyHcwvfj1wqCftkwp7dFe9g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;302&quot;/&gt;&lt;/p&gt;
&lt;section&gt;&lt;span&gt;图 4.3.模拟退火算法参数&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;首先生成一个初始解，并计算该解对应的TSP回路的总代价，然后经过模拟退火算法优化，对比优化后的解与初始解的总代价。图4.4表示模拟退火过程连续拒绝接受更差解的次数为50，图4.5表示连续拒绝更差解的次数为5000，即在一次温度衰减时，尝试更多次的搜索新解。可以看到，搜索次数更多时，能够得到一个代价更低的TSP回路。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.3251231527093596&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/pSqFmkOFya1mFaYOxicKicvrsZNwt2lbZvAffTJH2BkXNZG65ktqLCpe9VltiahSjtNb8QKyZauQ7NQmxydOjiaVFg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;406&quot;/&gt;&lt;/p&gt;
&lt;section&gt;&lt;span&gt;图 4.4.模拟退火算法优化结果（拒绝次数为50）&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.3393316195372751&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/pSqFmkOFya1mFaYOxicKicvrsZNwt2lbZvS634BNKV4dhegTq1wibsqibEWmiaqRoMRGyS6F4ZAIctNDnJcYhic1SdgA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;389&quot;/&gt;&lt;/p&gt;
&lt;section&gt;&lt;span&gt;图 4.5.模拟退火算法优化结果（拒绝次数为5000）&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;439&quot; data-backw=&quot;574&quot; data-before-oversubscription-url=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/pSqFmkOFya1mFaYOxicKicvrsZNwt2lbZvAcrscwpaba0Scriaqg3UOibnlspibTT7Dn1KUXj5W2iadV0ia5gelLSkibbA/0?wx_fmt=png&quot; data-ratio=&quot;0.7655259822560203&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/pSqFmkOFya1mFaYOxicKicvrsZNwt2lbZvAcrscwpaba0Scriaqg3UOibnlspibTT7Dn1KUXj5W2iadV0ia5gelLSkibbA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;789&quot;/&gt;&lt;/p&gt;
&lt;section/&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.622&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/pSqFmkOFya1mFaYOxicKicvrsZNwt2lbZvia7iceDcMJTRFzcO3rGWmdIryEG0CvH5YvvmiciaPqsTOoCmR1icchK5eUQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;500&quot;/&gt;&lt;/p&gt;

&lt;section&gt;&lt;strong&gt;&lt;span&gt;4.2 蚁群算法应用于求解最短路径问题的实践&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在本节中，介绍通过C语言编写蚁群算法模拟蚂蚁找食物的过程，并通过EasyX图形库将蚁群的位置动态的显示出来。蚁群活动的区域为一个600x600像素点的区域，每个蚂蚁每次可以移动一个像素点，移动的方向为以它为中心的周围8个方向，如下图4.6所示。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.2543859649122807&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/pSqFmkOFya1mFaYOxicKicvrsZNwt2lbZvQmgfYWXaqtTENicTqwUz4j7rsn5LqGNpRXHXxqPwLAOyGiavmBrt1nrw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;228&quot;/&gt;&lt;/p&gt;
&lt;section&gt;&lt;span&gt;图 4.6.蚂蚁移动方向示意图&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;蚁群在移动时，初始化时去寻找食物，当寻找到食物的时候，就会寻找窝，寻找窝和寻找食物的过程，均依据不同信息素来表征方向。在没有信息素的时候，大概率直线移动，但会以一定概率选取其他方向。图4.7~图4.10为蚁群算法在模拟蚂蚁找食物过程的结果图。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.0452830188679245&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/pSqFmkOFya1mFaYOxicKicvrsZNwt2lbZvgT0bQtCc4lG6r8dgVKsukI9EpaCPNSYTMbCnfOWrwhFuJDOfC6MAicQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;265&quot;/&gt;&lt;/p&gt;
&lt;section&gt;&lt;span&gt;图 4.7.蚁群算法仿真图1&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.0335820895522387&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/pSqFmkOFya1mFaYOxicKicvrsZNwt2lbZv0p3HUxtALFa8Kn8g82RDxMBMzwHEvIpxia5AUjqaQ1XDcFz20sE5FiaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;268&quot;/&gt;&lt;/p&gt;
&lt;section&gt;&lt;span&gt;图 4.8.蚁群算法仿真图2&lt;/span&gt;&lt;/section&gt;&lt;section/&gt;&lt;section/&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.0452830188679245&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/pSqFmkOFya1mFaYOxicKicvrsZNwt2lbZvPhibHTeZtVRFJCX6avCK2YY50flsB9o9DKnead8CR0Pyf7DJ6Ij6fOA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;265&quot;/&gt;&lt;/p&gt;
&lt;section&gt;&lt;span&gt;图 4.9.蚁群算法仿真图3&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.0413533834586466&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/pSqFmkOFya1mFaYOxicKicvrsZNwt2lbZvGI1ydgJUt2ovodYGmBPezeRbEqBxgErRX1qtic6ic9I6hiaAic2BpC3qEA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;266&quot;/&gt;&lt;/p&gt;
&lt;section&gt;&lt;span&gt;图 4.10.蚁群算法仿真图4&lt;/span&gt;&lt;/section&gt;&lt;section/&gt;&lt;section&gt;&lt;span&gt;该次仿真结果得到了蚁群移动区域收敛于食物（黄色圆点）和窝（红色圆点）之间的路径，但结果收敛的效果并不是特别理想。这是因为信息素的损耗系数，蚂蚁犯错的概率，已经遗留信息素的多少，均影响了算法的结果。而在本次实验中，均根据估计设定的参数，另一方面算法实现本身还需进一步优化修正，因此，算法并没有收敛于最优的路径。但从整个结果的趋势可以看出，蚁群是能够依靠信息素使得移动区域收敛于食物和窝之间的路径，并且接近于直线。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;342&quot; data-backw=&quot;574&quot; data-before-oversubscription-url=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/pSqFmkOFya1mFaYOxicKicvrsZNwt2lbZvKuhxFF9Ez73W74c8sA71HgGJrLwVHNAB13qDoYDoEP5WkwVfAibbWzA/?wx_fmt=png&quot; data-ratio=&quot;0.5959885386819485&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/pSqFmkOFya1mFaYOxicKicvrsZNwt2lbZvKuhxFF9Ez73W74c8sA71HgGJrLwVHNAB13qDoYDoEP5WkwVfAibbWzA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;698&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;459&quot; data-backw=&quot;574&quot; data-before-oversubscription-url=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/pSqFmkOFya1mFaYOxicKicvrsZNwt2lbZvzlRq4qy42icKyl3l5kv8UkglFD3qsjpZgMuSBIAhoiau4eCytE7Loc3g/0?wx_fmt=png&quot; data-ratio=&quot;0.7986577181208053&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/pSqFmkOFya1mFaYOxicKicvrsZNwt2lbZvzlRq4qy42icKyl3l5kv8UkglFD3qsjpZgMuSBIAhoiau4eCytE7Loc3g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;596&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.7388613861386139&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/pSqFmkOFya1mFaYOxicKicvrsZNwt2lbZv6To5uxXGicdB1IDdX1QmIqVSpydsjmZFK3fLO3UyQAOV9Cz0GOM9mKw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;808&quot;/&gt;&lt;/p&gt;
&lt;section class=&quot;xmt-style-block&quot; data-style-type=&quot;5&quot; data-tools=&quot;&amp;#x65B0;&amp;#x5A92;&amp;#x4F53;&amp;#x6392;&amp;#x7248;&quot; data-id=&quot;2624531&quot;&gt;&lt;section class=&quot;&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section https:=&quot;&quot; border-box=&quot;&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section class=&quot;&quot;&gt;&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt;&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;/&gt; &lt;section&gt;&lt;section class=&quot;&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;本文针对常见的最优化问题及其应用场景进行了分析和实践。首先，介绍了常用最优化方法，包括方法的基本模型，使用步骤，算法特性等。然后，对比分析了P类问题，NP问题，NP完全问题，以及如何通过启发式算法去解决优化此类非确定性时间复杂度问题。最后，在仿真实践部分，通过实现模拟退火算法解决具有NP难度的TSP问题，并得到了一条代价更低的路径。通过实现蚁群算法，模拟了蚂蚁找食物的过程，并得到了蚁群移动区域收敛于食物和窝之间区域的结果。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;【参考文献】&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;section&gt;&lt;span&gt;[1] ThomasH.Cormen, Charles E.Leiserson, Ronald L.Rivest,CliffordStein著.算法导论[M].机械工业出版社,2012.&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;[2] 马学森,宫帅,朱建,唐昊.动态凸包引导的偏优规划蚁群算法求解TSP问题[J].通信学报,2018.&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;[3]https://baike.baidu.com/item/NP%E5%AE%8C%E5%85%A8%E9%97%AE%E9%A2%98/4934286?fr=aladdin&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;xmt-style-block&quot; data-style-type=&quot;5&quot; data-tools=&quot;&amp;#x65B0;&amp;#x5A92;&amp;#x4F53;&amp;#x6392;&amp;#x7248;&quot; data-id=&quot;2700366&quot;&gt;&lt;section class=&quot;&quot; data-style-type=&quot;5&quot; data-tools=&quot;&amp;#x65B0;&amp;#x5A92;&amp;#x4F53;&amp;#x6392;&amp;#x7248;&quot; data-id=&quot;2634661&quot;&gt;&lt;section class=&quot;&quot; data-style-type=&quot;5&quot; data-tools=&quot;&amp;#x65B0;&amp;#x5A92;&amp;#x4F53;&amp;#x6392;&amp;#x7248;&quot; data-id=&quot;2590675&quot;&gt;&lt;p class=&quot;&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;— THE END —&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/section&gt;&lt;section class=&quot;&quot; data-style-type=&quot;5&quot; data-tools=&quot;&amp;#x65B0;&amp;#x5A92;&amp;#x4F53;&amp;#x6392;&amp;#x7248;&quot; data-id=&quot;2625487&quot;&gt;&lt;section class=&quot;&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;&quot; data-style-type=&quot;5&quot; data-tools=&quot;&amp;#x65B0;&amp;#x5A92;&amp;#x4F53;&amp;#x6392;&amp;#x7248;&quot; data-id=&quot;2697295&quot;&gt;&lt;section class=&quot;&quot;&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.1871508379888268&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/pSqFmkOFya18spZuOticj7bLrtCCQtBxpHx4BBD29iahkbNf25fqIiczCkvDTp0OFK2S9GVx8z8aaTvDKrIOsLPiaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;358&quot;/&gt;&lt;/section&gt;&lt;section class=&quot;&quot; data-style-type=&quot;5&quot; data-tools=&quot;&amp;#x65B0;&amp;#x5A92;&amp;#x4F53;&amp;#x6392;&amp;#x7248;&quot; data-id=&quot;2625492&quot;&gt;&lt;section class=&quot;&quot; data-style-type=&quot;5&quot; data-tools=&quot;&amp;#x65B0;&amp;#x5A92;&amp;#x4F53;&amp;#x6392;&amp;#x7248;&quot; data-id=&quot;2617381&quot;&gt;&lt;section class=&quot;&quot;&gt;&lt;span&gt;☞&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4NTY3OTU3MA==&amp;amp;mid=2247484852&amp;amp;idx=1&amp;amp;sn=4d17b3c5736ed1b6ca99f642cf0deecb&amp;amp;chksm=ebe9cf09dc9e461f17774aa17507251f6374fcb3053de503d71df0542fc30fe934c68ec3786e&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;一盘红烧肉告诉你：本科、硕士、博士，区别在哪儿？&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;&quot;&gt;&lt;span&gt;☞&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4NTY3OTU3MA==&amp;amp;mid=2247484850&amp;amp;idx=1&amp;amp;sn=521d81aa8b48d1f4bf737a351c5013e9&amp;amp;chksm=ebe9cf0fdc9e4619784eb3a4965d57ff2d4317bfed99544316dd093aaab39b3f66bcec125ede&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;现代数学确实在改变世界&lt;/a&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;&quot;&gt;&lt;span&gt;☞&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4NTY3OTU3MA==&amp;amp;mid=2247484881&amp;amp;idx=1&amp;amp;sn=cfb0396b9960fc45662fcba68b537d93&amp;amp;chksm=ebe9cf6cdc9e467afaf4a181ceb8869783135fb20f5ce0090ca484216aefa70ab7569969d24e&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot;&gt;微积分必背公式&lt;/a&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;&quot;&gt;&lt;span&gt;☞&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4NTY3OTU3MA==&amp;amp;mid=2247484882&amp;amp;idx=1&amp;amp;sn=1918916b71f92e6367a46dd9cce19a24&amp;amp;chksm=ebe9cf6fdc9e467927095667cd0fcd6826c6a78b1f3335194aac954b1183ff40afd056100e48&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot;&gt;机器学习中距离和相似性度量方法&lt;/a&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;&quot;&gt;&lt;span&gt;☞&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4NTY3OTU3MA==&amp;amp;mid=2247484813&amp;amp;idx=1&amp;amp;sn=31efc77fb6c05a1f7a6822da4d2f26ff&amp;amp;chksm=ebe9cf30dc9e4626684d2b795db19c75da978c1b51884e6ef0371fbc45ecbfa2ec2f3ba86423&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;算法你都懂_如何一年赚它几百万&lt;/a&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;&quot;&gt;&lt;span&gt;☞&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4NTY3OTU3MA==&amp;amp;mid=2247484829&amp;amp;idx=1&amp;amp;sn=21d3a5b75f0c80140163fb9926eacf8c&amp;amp;chksm=ebe9cf20dc9e46364d08181430f156eb3f8b2363538688f2bf4e3c8a30606d592b37b1bd071d&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;他的科学生涯堪称加速器，30岁当博导，38岁当选中科院院士，40岁当选德国科学院院士。。。&lt;/a&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;</description>
<pubDate>Sun, 10 Nov 2019 03:28:54 +0000</pubDate>
<dc:language>zh-CN</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.jintiankansha.me/t/oNhRwjfoCD</dc:identifier>
</item>
</channel>
</rss>