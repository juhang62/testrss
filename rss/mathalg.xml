<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed43.com%2Fmathalg-jtks.xml&amp;max=5&amp;links=preserve&amp;exc=1" />
<atom:link rel="alternate" title="Source URL" href="http://feed43.com/mathalg-jtks.xml" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed43.com%252Fmathalg-jtks.xml%26max%3D5%26links%3Dpreserve%26exc%3D1&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed43.com%252Fmathalg-jtks.xml%26max%3D5%26links%3Dpreserve%26exc%3D1" />
<title>算法与数学之美</title>
<link>http://www.jintiankansha.me/column/c9dZ5TM2aS</link>
<description>算法与数学之美 - 今天看啥</description>
<ttl>360</ttl>
<item>
<title>面试官问我：一个 TCP 连接可以发多少个 HTTP 请求？我竟然回答不上来...</title>
<link>http://www.jintiankansha.me/t/pEj8wTZ4PH</link>
<guid isPermaLink="true" >http://www.jintiankansha.me/t/pEj8wTZ4PH</guid>
<description>&lt;section/&gt;&lt;section&gt;&lt;section/&gt;&lt;section&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.0609375&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_gif/951TjTgiabkyibhvGLgaqX9NkLdhIcdPwR25icvKqfV9L0leq4zoIuDGk5MVNXKRO7bZg9KgWg9ozC6icfRIWtSQKg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;640&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;一道经典的面试题是从 URL 在浏览器被被输入到页面展现的过程中发生了什么，大多数回答都是说请求响应之后 DOM 怎么被构建，被绘制出来。但是你有没有想过，收到的 HTML 如果包含几十个图片标签，这些图片是以什么方式、什么顺序、建立了多少连接、使用什么协议被下载下来的呢？&lt;/span&gt;&lt;/section&gt;
&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;要搞懂这个问题，我们需要先解决下面五个问题：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;
&lt;ol class=&quot; list-paddingleft-2&quot; readability=&quot;3&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;现代浏览器在与服务器建立了一个 TCP 连接后是否会在一个 HTTP 请求完成后断开？什么情况下会断开？&lt;/span&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;一个 TCP 连接可以对应几个 HTTP 请求？&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;一个 TCP 连接中 HTTP 请求发送可以一起发送么（比如一起发三个请求，再三个响应一起接收）？&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;为什么有的时候刷新页面不需要重新建立 SSL 连接？&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;浏览器对同一 Host 建立 TCP 连接到数量有没有限制？&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;section&gt;&lt;span&gt;先来谈谈第一个问题：&lt;strong&gt;现代浏览器在与服务器建立了一个 TCP 连接后是否会在一个 HTTP 请求完成后断开？什么情况下会断开？&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;
&lt;section&gt;&lt;span&gt;在 HTTP/1.0 中，一个服务器在发送完一个 HTTP 响应后，会断开 TCP 链接。但是这样每次请求都会重新建立和断开 TCP 连接，代价过大。所以虽然标准中没有设定，某些服务器对 Connection: keep-alive 的 Header 进行了支持。&lt;/span&gt;&lt;/section&gt;
&lt;section&gt;&lt;span&gt;意思是说，完成这个 HTTP 请求之后，不要断开 HTTP 请求使用的 TCP 连接。这样的好处是连接可以被重新使用，之后发送 HTTP 请求的时候不需要重新建立 TCP 连接，以及如果维持连接，那么 SSL 的开销也可以避免，两张图片是我短时间内两次访问 github.com 的时间统计：&lt;/span&gt;&lt;/section&gt;
&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.963302752293578&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabkyTf9TiaYpjpnwePjTIA04JxY6HnwextBc35iaEOa09lUS3icJgUqw3dpqBcVzNIaE1lsrfFXE4U0xFQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;545&quot;/&gt;&lt;/p&gt;
&lt;section&gt;&lt;strong&gt;&lt;span&gt;头一次访问，有初始化连接和 SSL 开销&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.7730627306273062&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabkyTf9TiaYpjpnwePjTIA04JxHIIpbu28dzTXmgDTPq9ABWspoC7oSjMmMwsCic611117y389WRfXIicQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;542&quot;/&gt;&lt;/p&gt;
&lt;section&gt;&lt;strong&gt;&lt;span&gt;初始化连接和 SSL 开销消失了，说明使用的是同一个 TCP 连接&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;持久连接：既然维持 TCP 连接好处这么多，HTTP/1.1 就把 Connection 头写进标准，并且默认开启持久连接，除非请求中写明 Connection: close，那么浏览器和服务器之间是会维持一段时间的 TCP 连接，不会一个请求结束就断掉。&lt;/span&gt;&lt;/section&gt;
&lt;section&gt;&lt;span&gt;所以第一个问题的答案是：默认情况下建立 TCP 连接不会断开，只有在请求报头中声明 Connection: close 才会在请求完成后关闭连接。（详细文档见下面的链接）&lt;/span&gt;&lt;span&gt;https://tools.ietf.org/html/rfc2616#section-8.1&lt;/span&gt;&lt;/section&gt;
&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;第二个问题：&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;一个 TCP 连接可以对应几个 HTTP 请求？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;
&lt;section&gt;&lt;span&gt;了解了第一个问题之后，其实这个问题已经有了答案，如果维持连接，一个 TCP 连接是可以发送多个 HTTP 请求的。&lt;/span&gt;&lt;/section&gt;
&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;第三个问题：&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;一个 TCP 连接中 HTTP 请求发送可以一起发送么（比如一起发三个请求，再三个响应一起接收）？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;
&lt;section&gt;&lt;span&gt;HTTP/1.1 存在一个问题，单个 TCP 连接在同一时刻只能处理一个请求，意思是说：两个请求的生命周期不能重叠，任意两个 HTTP 请求从开始到结束的时间在同一个 TCP 连接里不能重叠。&lt;/span&gt;&lt;/section&gt;
&lt;section&gt;&lt;span&gt;虽然 HTTP/1.1 规范中规定了 Pipelining 来试图解决这个问题，但是这个功能在浏览器中默认是关闭的。&lt;/span&gt;&lt;/section&gt;
&lt;section&gt;&lt;span&gt;先来看一下 Pipelining 是什么，RFC 2616 中规定了：&lt;/span&gt;&lt;/section&gt;
&lt;section&gt;&lt;span&gt;A client that supports persistent connections MAY &quot;pipeline&quot; its requests (i.e., send multiple requests without waiting for each response). A server MUST send its responses to those requests in the same order that the requests were received.&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;一个支持持久连接的客户端可以在一个连接中发送多个请求（不需要等待任意请求的响应）。收到请求的服务器必须按照请求收到的顺序发送响应。&lt;/span&gt;&lt;/section&gt;
&lt;section&gt;&lt;span&gt;&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;/&gt;  至于标准为什么这么设定，我们可以大概推测一个原因：由于 HTTP/1.1 是个文本协议，同时返回的内容也并不能区分对应于哪个发送的请求，所以顺序必须维持一致。比如你向服务器发送了两个请求 GET /query?q=A 和 GET /query?q=B，服务器返回了两个结果，浏览器是没有办法根据响应结果来判断响应对应于哪一个请求的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Pipelining 这种设想看起来比较美好，但是在实践中会出现许多问题：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;
&lt;ul class=&quot; list-paddingleft-2&quot; readability=&quot;1.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;一些代理服务器不能正确的处理 HTTP Pipelining。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;正确的流水线实现是复杂的。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;span&gt;Head-of-line Blocking 连接头阻塞：在建立起一个 TCP 连接之后，假设客户端在这个连接连续向服务器发送了几个请求。按照标准，服务器应该按照收到请求的顺序返回结果，假设服务器在处理首个请求时花费了大量时间，那么后面所有的请求都需要等着首个请求结束才能响应。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;section&gt;&lt;span&gt;所以现代浏览器默认是不开启 HTTP Pipelining 的。&lt;/span&gt;&lt;/section&gt;
&lt;section&gt;&lt;span&gt;但是，HTTP2 提供了 Multiplexing 多路传输特性，可以在一个 TCP 连接中同时完成多个 HTTP 请求。至于 Multiplexing 具体怎么实现的就是另一个问题了。我们可以看一下使用 HTTP2 的效果。&lt;/span&gt;&lt;/section&gt;
&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.44964028776978415&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabkyTf9TiaYpjpnwePjTIA04JxbpAlDpL7ImibsDtNbF066oayyKSKx8hZHo8zIhCaEI8XJ5WDKcUX62g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;556&quot;/&gt;&lt;/p&gt;
&lt;section&gt;&lt;span&gt;绿色是发起请求到请求返回的等待时间，蓝色是响应的下载时间，可以看到都是在同一个 Connection，并行完成的&lt;/span&gt;&lt;/section&gt;
&lt;section&gt;&lt;span&gt;所以这个问题也有了答案：在 HTTP/1.1 存在 Pipelining 技术可以完成这个多个请求同时发送，但是由于浏览器默认关闭，所以可以认为这是不可行的。在 HTTP2 中由于 Multiplexing 特点的存在，多个 HTTP 请求可以在同一个 TCP 连接中并行进行。&lt;/span&gt;&lt;/section&gt;
&lt;section&gt;&lt;span&gt;那么在 HTTP/1.1 时代，浏览器是如何提高页面加载效率的呢？主要有下面两点：&lt;/span&gt;&lt;/section&gt;
&lt;ol class=&quot; list-paddingleft-2&quot; readability=&quot;-1&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;维持和服务器已经建立的 TCP 连接，在同一连接上顺序处理多个请求。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;和服务器建立多个 TCP 连接。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;第四个问题：&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;为什么有的时候刷新页面不需要重新建立 SSL 连接？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;
&lt;section&gt;&lt;span&gt;在第一个问题的讨论中已经有答案了，TCP 连接有的时候会被浏览器和服务端维持一段时间。TCP 不需要重新建立，SSL 自然也会用之前的。&lt;/span&gt;&lt;/section&gt;
&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;第五个问题：&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;浏览器对同一 Host 建立 TCP 连接到数量有没有限制？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;
&lt;section&gt;&lt;span&gt;假设我们还处在 HTTP/1.1 时代，那个时候没有多路传输，当浏览器拿到一个有几十张图片的网页该怎么办呢？肯定不能只开一个 TCP 连接顺序下载，那样用户肯定等的很难受，但是如果每个图片都开一个 TCP 连接发 HTTP 请求，那电脑或者服务器都可能受不了，要是有 1000 张图片的话总不能开 1000 个TCP 连接吧，你的电脑同意 NAT 也不一定会同意。&lt;/span&gt;&lt;/section&gt;
&lt;section&gt;&lt;span&gt;所以答案是：有。Chrome 最多允许对同一个 Host 建立六个 TCP 连接。不同的浏览器有一些区别。https://developers.google.com/web/tools/chrome-devtools/network/issues#queued-or-stalled-requestsevelopers.google.com&lt;/span&gt;&lt;/section&gt;
&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;那么回到最开始的问题，收到的 HTML 如果包含几十个图片标签，这些图片是以什么方式、什么顺序、建立了多少连接、使用什么协议被下载下来的呢？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;
&lt;section&gt;&lt;span&gt;如果图片都是 HTTPS 连接并且在同一个域名下，那么浏览器在 SSL 握手之后会和服务器商量能不能用 HTTP2，如果能的话就使用 Multiplexing 功能在这个连接上进行多路传输。不过也未必会所有挂在这个域名的资源都会使用一个 TCP 连接去获取，但是可以确定的是 Multiplexing 很可能会被用到。&lt;/span&gt;&lt;/section&gt;
&lt;section&gt;&lt;span&gt;如果发现用不了 HTTP2 呢？或者用不了 HTTPS（现实中的 HTTP2 都是在 HTTPS 上实现的，所以也就是只能使用 HTTP/1.1）。那浏览器就会在一个 HOST 上建立多个 TCP 连接，连接数量的最大限制取决于浏览器设置，这些连接会在空闲的时候被浏览器用来发送新的请求，如果所有的连接都正在发送请求呢？那其他的请求就只能等等了。&lt;/span&gt;&lt;/section&gt;&lt;p helvetica=&quot;&quot; neue=&quot;&quot; sc=&quot;&quot; sans=&quot;&quot; gb=&quot;&quot; yahei=&quot;&quot; ui=&quot;&quot; arial=&quot;&quot; sans-serif=&quot;&quot; normal=&quot;&quot; rgb=&quot;&quot; center=&quot;&quot; border-box=&quot;&quot; break-word=&quot;&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;————&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p helvetica=&quot;&quot; neue=&quot;&quot; sc=&quot;&quot; sans=&quot;&quot; gb=&quot;&quot; yahei=&quot;&quot; ui=&quot;&quot; arial=&quot;&quot; sans-serif=&quot;&quot; normal=&quot;&quot; rgb=&quot;&quot; border-box=&quot;&quot; break-word=&quot;&quot;&gt;&lt;span&gt;编辑 ∑Gemini&lt;/span&gt;&lt;/p&gt;
&lt;p helvetica=&quot;&quot; neue=&quot;&quot; sc=&quot;&quot; sans=&quot;&quot; gb=&quot;&quot; yahei=&quot;&quot; ui=&quot;&quot; arial=&quot;&quot; sans-serif=&quot;&quot; normal=&quot;&quot; rgb=&quot;&quot; border-box=&quot;&quot; break-word=&quot;&quot;&gt;&lt;span&gt; 来源：程序猿&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;☞&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4NTY3OTU3MA==&amp;amp;mid=2247484097&amp;amp;idx=1&amp;amp;sn=9566979109fefc1907edad8a0b67cb27&amp;amp;chksm=ebe9c87cdc9e416ac5246da86ef23e6b45671441511a210554a965eb8c5a5ad210f72834a141&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;泰勒定理的奇闻轶事&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;/&gt; &lt;p&gt;&lt;span&gt;☞&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4NTY3OTU3MA==&amp;amp;mid=2247484094&amp;amp;idx=1&amp;amp;sn=1a93ee4b182b6fd3a74bd4b93d205d9e&amp;amp;chksm=ebe9c803dc9e4115ae1e90d7e64af1ccb0687cb77237d45fdc5039f771ec122da2d9b7ece9fd&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;丘成桐：漫谈微分几何&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;☞&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4NTY3OTU3MA==&amp;amp;mid=2247484092&amp;amp;idx=1&amp;amp;sn=56e2befc4cbcc6e0a138c41c0a445451&amp;amp;chksm=ebe9c801dc9e4117126f5df3938fe5b93ce10ca4bb00692fe16e906e64620c14754895e24d9c&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;Leibniz 如何想出微积分？（一）&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;☞&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4NTY3OTU3MA==&amp;amp;mid=2247484090&amp;amp;idx=1&amp;amp;sn=c4778f29071d0388f6f7d5d25b2207d3&amp;amp;chksm=ebe9c807dc9e4111784b02ad43ed7b9958a0da5108c9db84a659f2b1d853a4a982bcef72aacc&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;线性相关和秩的物理意义&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;☞&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4NTY3OTU3MA==&amp;amp;mid=2247484087&amp;amp;idx=1&amp;amp;sn=466ad19b059aa635a0ae282adca9342e&amp;amp;chksm=ebe9c80adc9e411c38ec3006c5bc2f622b4d7d6a3887f356db114ed3b79f0bf957a43b79eb75&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;数学史上你认为最丑陋的公式是什么？&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;☞&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4NTY3OTU3MA==&amp;amp;mid=2247484083&amp;amp;idx=2&amp;amp;sn=107822b9a73eba79d34ba6a8488b13a6&amp;amp;chksm=ebe9c80edc9e411812d049bdd6ca8d4607688e815c8ba92c504748fdbbeab852f3166371eb9d&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;陶哲轩谈什么是好的数学&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;☞&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4NTY3OTU3MA==&amp;amp;mid=2247484080&amp;amp;idx=1&amp;amp;sn=b754ee91c37493f3cff118a925f3d7d8&amp;amp;chksm=ebe9c80ddc9e411bc25ceef06631a406d7eafc73bb913f697b533c67665396e55565d1675bcd&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;田渊栋：数学的用处（下篇）&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;☞&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4NTY3OTU3MA==&amp;amp;mid=2247484029&amp;amp;idx=1&amp;amp;sn=d85a35df3ebd0884f3cb60536c5ccf75&amp;amp;chksm=ebe9c8c0dc9e41d6b43a3918624d8885f91c9af2346c2163c54c090c80c58ab844872278635c&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;你绝对没想过原来数学家这么流氓，一言不合就进行暴力证明&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;☞&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4NTY3OTU3MA==&amp;amp;mid=2247484037&amp;amp;idx=1&amp;amp;sn=16e68092098b573bfff13f69c28b6285&amp;amp;chksm=ebe9c838dc9e412e4f0eceece3372c28256508af1f77d714dd1a7b8fd7f20de71e01d77bc836&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;世界上最牛的五篇博士论文&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;☞&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4NTY3OTU3MA==&amp;amp;mid=2247484082&amp;amp;idx=2&amp;amp;sn=85da1e76707c8c1a9120cbbcf1da9aca&amp;amp;chksm=ebe9c80fdc9e411984cf41a248860de6982e8c9d291f25fe4420fbf43c38b138a2ea38bd644a&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;数学中有哪些巧合让人眼前一亮？&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;☞&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4NTY3OTU3MA==&amp;amp;mid=2247484014&amp;amp;idx=1&amp;amp;sn=5b94b17a277a0e25581d58a2582b5d0a&amp;amp;chksm=ebe9c8d3dc9e41c57f2137c285ac44ec24f6e20029158351588cf519b022ba65f417a0710fac&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;算法立功！清华毕业教授美国被抢车，警察无能为力自己用“贪心算法”找回&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;/&gt; &lt;span&gt;☞&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4NTY3OTU3MA==&amp;amp;mid=2247483984&amp;amp;idx=2&amp;amp;sn=620b603edf54785adeeae775b5cf7325&amp;amp;chksm=ebe9c8eddc9e41fba6883062a4b82f05d17d8292771a397d2fafdad2b1a77062472e95e13405&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;学术史上的奇文：怎样用数学抓狮子&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;☞&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4NTY3OTU3MA==&amp;amp;mid=2247483968&amp;amp;idx=1&amp;amp;sn=098491812586b1806465ef2c7f055b39&amp;amp;chksm=ebe9c8fddc9e41eb88a15c509a228568da5cdbfe4eeda595941c9bd5d25a135fef17a239fc00&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;台大教授的反思：最难的一课 我们却没教给学生&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4NTY3OTU3MA==&amp;amp;mid=2247483962&amp;amp;idx=1&amp;amp;sn=13ebe38d0b455b43c525284f550f1eda&amp;amp;chksm=ebe9c887dc9e4191bbe4c64d9027a27e94b01aaa6ae8435e2e5846374b3b94b8a8c46ddaaecb&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;☞麻省理工学院(MIT)研究生学习指导—— 怎样做研究生&lt;/a&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4NTY3OTU3MA==&amp;amp;mid=2247483957&amp;amp;idx=1&amp;amp;sn=f97ade0ac2643a31e2859f2f0186509f&amp;amp;chksm=ebe9c888dc9e419e8623cf164d9d5964ffcf80d6ac1c90c9cbe721533ec0848495bcab82e5be&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;☞分享 数学，常识和运气 ——投资大师詹姆斯·西蒙斯2010年在MIT的讲座&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p helvetica=&quot;&quot; neue=&quot;&quot; sc=&quot;&quot; sans=&quot;&quot; gb=&quot;&quot; yahei=&quot;&quot; ui=&quot;&quot; arial=&quot;&quot; sans-serif=&quot;&quot; normal=&quot;&quot; rgb=&quot;&quot; center=&quot;&quot; border-box=&quot;&quot; break-word=&quot;&quot;&gt;&lt;span&gt;算法数学之美微信公众号欢迎赐稿&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p helvetica=&quot;&quot; neue=&quot;&quot; sc=&quot;&quot; sans=&quot;&quot; gb=&quot;&quot; yahei=&quot;&quot; ui=&quot;&quot; arial=&quot;&quot; sans-serif=&quot;&quot; normal=&quot;&quot; rgb=&quot;&quot; center=&quot;&quot; border-box=&quot;&quot; break-word=&quot;&quot;&gt;&lt;span&gt;稿件涉及数学、物理、算法、计算机、编程等相关领域，经采用我们将奉上稿酬。&lt;/span&gt;&lt;/p&gt;
&lt;p helvetica=&quot;&quot; neue=&quot;&quot; sc=&quot;&quot; sans=&quot;&quot; gb=&quot;&quot; yahei=&quot;&quot; ui=&quot;&quot; arial=&quot;&quot; sans-serif=&quot;&quot; normal=&quot;&quot; rgb=&quot;&quot; center=&quot;&quot; border-box=&quot;&quot; break-word=&quot;&quot;&gt;&lt;span&gt;投稿邮箱：math_alg@163.com&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 12 Oct 2019 05:49:45 +0000</pubDate>
<dc:language>zh-CN</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.jintiankansha.me/t/pEj8wTZ4PH</dc:identifier>
</item>
<item>
<title>理科生爸爸是这样陪着写作业的</title>
<link>http://www.jintiankansha.me/t/WBhNBeQm2O</link>
<guid isPermaLink="true" >http://www.jintiankansha.me/t/WBhNBeQm2O</guid>
<description>&lt;div id=&quot;img-content&quot; class=&quot;paper rich_media_area_primary &quot; readability=&quot;4.5221238938053&quot;&gt;

                        

                        
                            
&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;&gt;&lt;/ins&gt;
&lt;p&gt;
                &lt;h2 class=&quot;common_share_title&quot;&gt;
                                        &lt;span id=&quot;video_title&quot;&gt;理科生爸爸是这样陪着写作业的&lt;/span&gt;
                &lt;/h2&gt;
                            &lt;/p&gt;
                        

                        &lt;br /&gt;&lt;/div&gt;

                    &lt;div class=&quot;post-meta&quot;&gt;
                        &lt;div class=&quot;&quot;&gt;
                            &lt;p&gt;分享到&lt;/p&gt;
                            &lt;a target=&quot;_blank&quot; href=&quot;http://service.weibo.com/share/share.php?url=http%3A%2F%2Fwww.jintiankansha.me%2Ft%2FWBhNBeQm2O&amp;amp;appkey=2206014828&amp;amp;pic=&amp;amp;title=%E7%90%86%E7%A7%91%E7%94%9F%E7%88%B8%E7%88%B8%E6%98%AF%E8%BF%99%E6%A0%B7%E9%99%AA%E7%9D%80%E5%86%99%E4%BD%9C%E4%B8%9A%E7%9A%84+%40%E4%BB%8A%E5%A4%A9%E7%9C%8B%E5%95%A5&quot;&gt;
                                &lt;img width=&quot;30px&quot; src=&quot;http://www.jintiankansha.me/static/img/site/weibo.svg?v=fa758ebd6691cf5931bbbed63230327b&quot; /&gt;&lt;/a&gt;
                        &lt;/div&gt;
                    &lt;/div&gt;

                    
                    
                </description>
<pubDate>Sat, 12 Oct 2019 05:49:43 +0000</pubDate>
<dc:language>zh-CN</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.jintiankansha.me/t/WBhNBeQm2O</dc:identifier>
</item>
</channel>
</rss>