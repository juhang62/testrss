<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed43.com%2Fmathalg-jtks.xml&amp;max=5&amp;links=preserve&amp;exc=1" />
<atom:link rel="alternate" title="Source URL" href="http://feed43.com/mathalg-jtks.xml" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed43.com%252Fmathalg-jtks.xml%26max%3D5%26links%3Dpreserve%26exc%3D1&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed43.com%252Fmathalg-jtks.xml%26max%3D5%26links%3Dpreserve%26exc%3D1" />
<title>算法与数学之美</title>
<link>http://www.jintiankansha.me/column/c9dZ5TM2aS</link>
<description>算法与数学之美 - 今天看啥</description>
<ttl>360</ttl>
<item>
<title>一线互联网常见的14个Java面试题，你颤抖了吗程序员</title>
<link>http://www.jintiankansha.me/t/zM49m4mMgN</link>
<guid isPermaLink="true" >http://www.jintiankansha.me/t/zM49m4mMgN</guid>
<description>&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;跳槽不算频繁，但参加过不少面试（电话面试、face to face面试），面过大/小公司、互联网/传统软件公司，面糊过（眼高手低，缺乏实战经验，挂掉），也面过人，所幸未因失败而气馁，在此过程中不断查缺补漏，养成了踏实、追本溯源、持续改进的习惯，特此将自己经历过、构思过的一些面试题记录下来，如果答案有问题，欢迎拍砖讨论，希望能对找工作或者感兴趣的同学有所帮助，陆续整理中。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;&lt;strong&gt; 1. synchronized和reentrantlock异同 &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;相同点&lt;/p&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;不同点&lt;/p&gt;
&lt;ul class=&quot; list-paddingleft-2&quot; readability=&quot;4&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;实现机制不同 synchronized通过java对象头锁标记和Monitor对象实现 reentrantlock通过CAS、ASQ（AbstractQueuedSynchronizer）和locksupport（用于阻塞和解除阻塞）实现 synchronized依赖jvm内存模型保证包含共享变量的多线程内存可见性 reentrantlock通过ASQ的volatile state保证包含共享变量的多线程内存可见性&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;使用方式不同 synchronized可以修饰实例方法（锁住实例对象）、静态方法（锁住类对象）、代码块（显示指定锁对象） reentrantlock显示调用trylock()/lock()方法，需要在finally块中释放锁&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;功能丰富程度不同 reentrantlock提供有限时间等候锁（设置过期时间）、可中断锁（lockInterruptibly）、condition（提供await、signal等方法）等丰富语义 reentrantlock提供公平锁和非公平锁实现 synchronized不可设置等待时间、不可被中断（interrupted）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;&lt;strong&gt; 2. concurrenthashmap为何读不用加锁 &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot; list-paddingleft-2&quot; readability=&quot;4.5&quot;&gt;&lt;li&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;jdk1.7&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;1）HashEntry中的key、hash、next 均为final 型，只能表头插入、删除结点&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;2）HashEntry类的value域被声明为volatile型&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;3）不允许用null作为键和值，当读线程读到某个HashEntry的 value域的值为null时，便知道产生了冲突——发生了重排序现象（put设置新value对象的字节码指令重排序），需要加锁后重新读入这个value值&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;4）volatile变量count协调读写线程之间的内存可见性，写操作后修改count，读操作先读count，根据happen-before传递性原则写操作的修改读操作能够看到&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;jdk1.8&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;1）Node的val和next均为volatile型&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;2）tabAt和casTabAt对应的unsafe操作实现了volatile语义&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;&lt;strong&gt; 3. ContextClassLoader（线程上下文类加载器）的作用 &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot; list-paddingleft-2&quot; readability=&quot;0&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;越过类加载器的双亲委派机制去加载类，如serviceloader实现&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;使用线程上下文类加载器加载类，要注意保证多个需要通信的线程间的类加载器应该是同一个，防止因为不同的类加载器导致类型转换异常(ClassCastException)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;&lt;strong&gt; 4. tomcat 类加载机制 &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;img data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/951TjTgiabky8UA1YLWFFykoic3EXZCshFKQnQ2uWjuuTwrqeXesxkoWfRA4CGStWoWHCUK1MOCfeI57MBZv2fUA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; class=&quot;&quot; data-ratio=&quot;0.7859375&quot; data-w=&quot;640&quot;/&gt;&lt;/p&gt;
&lt;ul class=&quot; list-paddingleft-2&quot; readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;不同应用使用不同的 webapp类加载器，实现应用隔离的效果，webapp类加载器下面是jsp类加载器&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;不同应用共享的jar包可以放到Shared类加载器/shared目录下&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;&lt;strong&gt; 5. osgi类加载机制 &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;img data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/951TjTgiabky8UA1YLWFFykoic3EXZCshFARrmFHAt8iamjMglcRXRywkuH0YHjyeVwU62FwLtxhs3JqKHk2exwCQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; class=&quot;&quot; data-ratio=&quot;0.6921875&quot; data-w=&quot;640&quot;/&gt;&lt;/p&gt;
&lt;ul class=&quot; list-paddingleft-2&quot; readability=&quot;11.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;osgi类加载模型是网状的，可以在模块（Bundle）间互相委托&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;osgi实现模块化热部署的关键是自定义类加载器机制的实现，每个Bundle都有一个自己的类加载器，当需要更换一个Bundle时，就把Bundle连同类加载器一起换掉以实现代码的热替换&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;当收到类加载请求时，osgi将按照下面的顺序进行类搜索：&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;1）将以java.*开头的类委派给父类加载器加载&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;2）否则，将委派列表名单（配置文件org.osgi.framework.bootdelegation中定义）内的类委派给父类加载器加载&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;3）否则，检查是否在Import-Package中声明，如果是，则委派给Export这个类的Bundle的类加载器加载&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;/&gt;  4）否则，检查是否在Require-Bundle中声明，如果是，则将类加载请求委托给required bundle的类加载器&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;5）否则，查找当前Bundle的ClassPath，使用自己的类加载器加载&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;6）否则，查找类是否在自己的Fragment Bundle中，如果在，则委派给Fragment Bundle的类加载器加载&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;7）否则，查找Dynamic Import-Package（Dynamic Import只有在真正用到此Package的时候才进行加载）的Bundle，委派给对应Bundle的类加载器加载&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;8）否则，类查找失败&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;&lt;strong&gt; 6. 如何结束一个一直运行的线程 &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;&lt;strong&gt; 7. threadlocal使用场景及问题 &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot; list-paddingleft-2&quot; readability=&quot;4&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;threadlocal并不能解决多线程共享变量的问题，同一个 threadlocal所包含的对象，在不同的thread中有不同的副本，互不干扰&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;用于存放线程上下文变量，方便同一线程对变量的前后多次读取，如事务、数据库connection连接，在web编程中使用的更多&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;strong&gt;问题：&lt;/strong&gt; 注意线程池场景使用threadlocal，因为实际变量值存放在了thread的threadlocalmap类型变量中，如果该值没有remove，也没有先set的话，可能会得到以前的旧值&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;strong&gt;问题：&lt;/strong&gt; 注意线程池场景下的内存泄露，虽然threadlocal的get/set会清除key（key为threadlocal的弱引用，value是强引用，导致value不释放）为null的entry，但是最好remove&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;&lt;strong&gt; 8. 线程池从启动到工作的流程 &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot; list-paddingleft-2&quot; readability=&quot;9.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;刚创建时，里面没有线程&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;调用 execute() 添加任务时：&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;1）如果正在运行的线程数量小于核心参数corePoolSize，继续创建线程运行这个任务&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;2）否则，如果正在运行的线程数量大于或等于corePoolSize，将任务加入到阻塞队列中&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;3）否则，如果队列已满，同时正在运行的线程数量小于核心参数maximumPoolSize，继续创建线程运行这个任务&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;4）否则，如果队列已满，同时正在运行的线程数量大于或等于 maximumPoolSize，根据设置的拒绝策略处理&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;5）完成一个任务，继续取下一个任务处理&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;6）没有任务继续处理，线程被中断或者线程池被关闭时，线程退出执行，如果线程池被关闭，线程结束&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;7）否则，判断线程池正在运行的线程数量是否大于核心线程数，如果是，线程结束，否则线程阻塞。因此线程池任务全部执行完成后，继续留存的线程池大小为corePoolSize&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;&lt;strong&gt; 9. 阻塞队列BlockingQueue take和poll区别 &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot; list-paddingleft-2&quot; readability=&quot;0.5&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;poll(time)：取走BlockingQueue里排在首位的对象,若不能立即取出，则可以等time参数规定的时间，取不到时返回null&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;take()：取走BlockingQueue里排在首位的对象，若BlockingQueue为空，阻塞直到BlockingQueue有新的对象被加入&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;&lt;strong&gt; 10. 如何从FutureTask不阻塞获取结果 &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot; list-paddingleft-2&quot; readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;get(long timeout,TimeUnit unit)，超时则返回&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;轮询，先通过isDone()判断是否结束，然后调用get()&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;&lt;strong&gt; 11. blockingqueue如果存放了比较关键的数据，系统宕机该如何处理 &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;开放性问题，欢迎讨论&lt;/p&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;将队列持久化，比较麻烦，需要将生产数据持久化到磁盘，持久化成功才返回，消费者线程从磁盘加载数据到内存阻塞队列中，维护消费offset，启动时，根据消费offset从磁盘加载数据&lt;/p&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;加入消息队列，保证消息不丢失，生成序列号，消费幂等，根据消费进程决定系统重启后的生产状态&lt;/p&gt;

&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;&lt;strong&gt; 12. NIO与传统I/O的区别 &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot; list-paddingleft-2&quot; readability=&quot;1.5&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;节约线程，NIO由原来的每个线程都需要阻塞读写变成了由单线程（即Selector）负责处理多个channel注册（register）的兴趣事件（SelectionKey）集合（底层借助操作系统提供的epoll()），netty bossgroup处理accept连接（&lt;strong&gt;没看明白为什么bossgroup设置多个thread的必要性&lt;/strong&gt;），workergroup处理具体业务流程和数据读写&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;NIO提供非阻塞操作&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;/&gt; &lt;p mpa-paragraph-type=&quot;body&quot;&gt;传统I/O 以流的方式处理数据，而 NIO 以块的方式处理数据，NIO提供bytebuffer，分为堆内和堆外缓冲区，读写时均先放到该缓冲区中，然后由内核通过channel传输到对端，堆外缓冲区不走内核，提升了性能&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;&lt;strong&gt; 13. list中存放可重复字符串，如何删除某个字符串 &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;&lt;strong&gt; 14. 有哪些GC ROOTS（跟日常开发比较相关的是和此相关的内存泄露） &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot; list-paddingleft-2&quot; readability=&quot;4.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;所有Java线程当前活跃的栈帧里指向GC堆里的对象的引用，因此用不到的对象及时置null，提升内存回收效率&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;静态变量引用的对象，因此减少静态变量特别是静态集合变量的大小，集合存放的对象覆写euqls()和hashcode()，防止持续增长&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;本地方法JNI引用的对象&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;方法区中的常量引用的对象，因此减少在长字符串上调用String.intern()&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;classloader加载的class对象，因此自定义classloader无效时及时置null并且注意类加载器加载对象之间的隔离&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;jvm里的一些静态数据结构里指向GC堆里的对象的引用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p mpa-paragraph-type=&quot;body&quot;&gt;…&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;section&gt;&lt;section class=&quot;&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;section readability=&quot;2.7622259696459&quot;&gt;&lt;section readability=&quot;5.5244519392917&quot;&gt;&lt;section helvetica=&quot;&quot; neue=&quot;&quot; pingfang=&quot;&quot; sc=&quot;&quot; hiragino=&quot;&quot; sans=&quot;&quot; gb=&quot;&quot; microsoft=&quot;&quot; yahei=&quot;&quot; ui=&quot;&quot; arial=&quot;&quot; sans-serif=&quot;&quot; px=&quot;&quot; justify=&quot;&quot; normal=&quot;&quot; rgb=&quot;&quot; display:=&quot;&quot; inline-block=&quot;&quot; top=&quot;&quot; solid=&quot;&quot; overflow-wrap:=&quot;&quot; break-word=&quot;&quot; important=&quot;&quot;&gt;&lt;section class=&quot;&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;section readability=&quot;1.5&quot;&gt;&lt;section readability=&quot;3&quot;&gt;&lt;p&gt;微信公众号“算法数学之美”，由算法与数学之美团队打造的另一个公众号，欢迎大家扫码关注！&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p pingfang=&quot;&quot; sc=&quot;&quot; hiragino=&quot;&quot; sans=&quot;&quot; gb=&quot;&quot; microsoft=&quot;&quot; yahei=&quot;&quot; wenquanyi=&quot;&quot; micro=&quot;&quot; hei=&quot;&quot; helvetica=&quot;&quot; neue=&quot;&quot; arial=&quot;&quot; sans-serif=&quot;&quot; px=&quot;&quot; normal=&quot;&quot; rgb=&quot;&quot; text-align:=&quot;&quot; justify=&quot;&quot; em=&quot;&quot;&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;258&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/951TjTgiabkyjQVC3BFiaFKQ4DJqz2xhrwkzeCPbjQdnnG8678fRf1sxc2ZQtvtVib2dqWUkeopYtmgckINoOoGoQ/640?wx_fmt=jpeg&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;更多精彩：&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;☞&lt;/span&gt;&lt;span&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4NTY3OTU3MA==&amp;amp;mid=2247483726&amp;amp;idx=1&amp;amp;sn=e5e008fb68a7d837546d0ac5b5438042&amp;amp;chksm=ebe9cbf3dc9e42e5d625b2da6b9b3866dff9f08d442d8106f4cbf035d8602e1fdda86eec6476&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;如何向5岁小孩解释什么是支持向量机（SVM）？&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;☞&lt;/span&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4NTY3OTU3MA==&amp;amp;mid=2247483726&amp;amp;idx=2&amp;amp;sn=18272b7eaa172794b51c30d0a2dd9c48&amp;amp;chksm=ebe9cbf3dc9e42e5ddf9a189822a2fa099543a631ad63a1d6ed0158b51c76212eb65ebbfe71b&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;自然底数e的意义是什么？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4NTY3OTU3MA==&amp;amp;mid=2247483715&amp;amp;idx=1&amp;amp;sn=9069dadf4bbce2aa34bd64b85a69dcee&amp;amp;chksm=ebe9cbfedc9e42e81c27d72da15c0dbf848e505946f231051b8b4033d0941bc6f51cef32790e&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;☞&lt;/span&gt;费马大定理，集惊险与武侠于一体&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;☞&lt;/span&gt; &lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;/&gt; &lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4NTY3OTU3MA==&amp;amp;mid=2247483715&amp;amp;idx=2&amp;amp;sn=55a16f37c89b27994b263e0dc9837561&amp;amp;chksm=ebe9cbfedc9e42e842deb581ea62b750cedd839abd58c2db3261bf9fbcd172a2cf18512e4d2d&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;简单的解释，让你秒懂“最优化” 问题&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4NTY3OTU3MA==&amp;amp;mid=2247483676&amp;amp;idx=1&amp;amp;sn=2366a39bca3ef42a6e868e91ea718813&amp;amp;chksm=ebe9cba1dc9e42b70c7e147b9e43828c1a7c68401f442890471a06e5cf0704437f9813ca0e0f&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;☞&lt;/span&gt;一分钟看懂一维空间到十维空间&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;☞ &lt;/span&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4NTY3OTU3MA==&amp;amp;mid=2247483661&amp;amp;idx=1&amp;amp;sn=d822666a054ba70b37dfb06d14c60f3a&amp;amp;chksm=ebe9cbb0dc9e42a6c476f7f81095b772aa45d960bf516f60c5b2e1155c9093696222cea0a83d&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;本科、硕士和博士到底有什么区别？&lt;/a&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;☞&lt;/span&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4NTY3OTU3MA==&amp;amp;mid=2247483654&amp;amp;idx=1&amp;amp;sn=7d0d05c78cd01df91495f1d14609cbce&amp;amp;chksm=ebe9cbbbdc9e42add13cfe99f3383745fa5c059df705a3a9e28644d073dff804569af94970e3&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;小波变换通俗解释&lt;/a&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;☞&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4NTY3OTU3MA==&amp;amp;mid=2247483654&amp;amp;idx=4&amp;amp;sn=ce88086b650c601bdbf57ecfe5a490a1&amp;amp;chksm=ebe9cbbbdc9e42adfaf0e4ee644d254835c830ef47663315b70a39a2b47e6a7cf10d0826b88d&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;微积分必背公式&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;☞&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4NTY3OTU3MA==&amp;amp;mid=2247483654&amp;amp;idx=3&amp;amp;sn=ceaec6043bb0e8a851033482f8f572bf&amp;amp;chksm=ebe9cbbbdc9e42ad30fd38383cf1caa609ac6e81964da17277f8e2a7f17a933cd11e0f3840c8&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;影响计算机算法世界的十位大师&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;☞&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4NTY3OTU3MA==&amp;amp;mid=2247483654&amp;amp;idx=2&amp;amp;sn=bf439d56bc7d42083708fa76434a6025&amp;amp;chksm=ebe9cbbbdc9e42ad9e5f2b3c1952e620e0e3d4452aae25b611e7e54be8678b0d80e002e7be6d&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;数据挖掘之七种常用的方法&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
&lt;p&gt;&lt;span&gt;算法数学之美微信公众号欢迎赐稿&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p helvetica=&quot;&quot; neue=&quot;&quot; pingfang=&quot;&quot; sc=&quot;&quot; hiragino=&quot;&quot; sans=&quot;&quot; gb=&quot;&quot; microsoft=&quot;&quot; yahei=&quot;&quot; ui=&quot;&quot; arial=&quot;&quot; sans-serif=&quot;&quot; px=&quot;&quot; normal=&quot;&quot; rgb=&quot;&quot; text-align:=&quot;&quot; center=&quot;&quot; border-box=&quot;&quot; important=&quot;&quot; break-word=&quot;&quot;&gt;&lt;span&gt;稿件涉及数学、物理、算法、计算机、编程等相关领域，经采用我们将奉上稿酬。&lt;/span&gt;&lt;/p&gt;
&lt;p helvetica=&quot;&quot; neue=&quot;&quot; pingfang=&quot;&quot; sc=&quot;&quot; hiragino=&quot;&quot; sans=&quot;&quot; gb=&quot;&quot; microsoft=&quot;&quot; yahei=&quot;&quot; ui=&quot;&quot; arial=&quot;&quot; sans-serif=&quot;&quot; px=&quot;&quot; normal=&quot;&quot; center=&quot;&quot; rgb=&quot;&quot; margin-left:=&quot;&quot; border-box=&quot;&quot; important=&quot;&quot; break-word=&quot;&quot;&gt;&lt;span&gt;投稿邮箱：math_alg@163.com&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 13 Jan 2019 14:33:10 +0000</pubDate>
<dc:language>zh-CN</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.jintiankansha.me/t/zM49m4mMgN</dc:identifier>
</item>
<item>
<title>2018年数学与计算机大事件：18岁少年大放异彩！ABC猜想</title>
<link>http://www.jintiankansha.me/t/8L5Cr95Ij1</link>
<guid isPermaLink="true" >http://www.jintiankansha.me/t/8L5Cr95Ij1</guid>
<description>&lt;p&gt;&lt;img class=&quot;__bg_gif&quot; data-ratio=&quot;0.060382916053019146&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_gif/951TjTgiabkyYNr2mLLFgV8rAcf8TKrhVVxPz4sJSdjDum3ia43TqSj6sPicZVQ5XqpfDhulibnGRdeLqAhyHf8TWw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;679&quot; data-width=&quot;100%&quot;/&gt;&lt;/p&gt;

&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p microsoft=&quot;&quot; yahei=&quot;&quot; simsun=&quot;&quot;&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;&lt;span&gt;【导读】2018年数学和计算机科学领域发生了哪些重大事件？量子霸权并未实现，年轻的菲尔兹奖得主质疑日本数学家望月新一对ABC猜想的证明。还有18岁的少年、苦读8年不毕业的女研究生，以及退休软件工程师和抗衰老组织联合创始人，都在今年留下了令人难忘的印记。&lt;/span&gt;&lt;/strong&gt;&lt;/em&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p microsoft=&quot;&quot; yahei=&quot;&quot; simsun=&quot;&quot;&gt;&lt;span&gt;2018年，青年在数学领域大放光彩。&lt;/span&gt;&lt;/p&gt;
&lt;p microsoft=&quot;&quot; yahei=&quot;&quot; simsun=&quot;&quot;&gt;&lt;span&gt;首先，菲尔兹奖章——每四年颁发给不超过40岁的顶级数学家——的四位得主已经在数学史上留下了他们的名字。尤其是今年30岁的Peter Scholze，成为有史以来最年轻的菲尔兹奖获得者之一。&lt;/span&gt;&lt;/p&gt;
&lt;p microsoft=&quot;&quot; yahei=&quot;&quot; simsun=&quot;&quot;&gt;&lt;span&gt;但是，2018年，有时候连30岁都会让你觉得不再年轻。&lt;/span&gt;&lt;/p&gt;
&lt;p microsoft=&quot;&quot; yahei=&quot;&quot; simsun=&quot;&quot;&gt;&lt;span&gt;两个学生，一个研究生在读，另一个只有18岁，分别在量子计算领域取得了令人瞩目的突破。另一位研究生则证明了一个关于椭圆曲线的猜想，这个猜想已经困扰了数学家好几十年。还有业余数学家们，也为搁置已久的数学问题做出了重大贡献。&lt;/span&gt;&lt;/p&gt;
&lt;p microsoft=&quot;&quot; yahei=&quot;&quot; simsun=&quot;&quot;&gt;&lt;span&gt;但或许2018年青年崛起最重要的标志，是在菲尔兹奖颁奖典礼后不到一个月，Scholze公开质疑日本数学家望月新一6年前对“ABC猜想”的证明。&lt;/span&gt;&lt;/p&gt;

&lt;section class=&quot;_135editor&quot; data-tools=&quot;135&amp;#x7F16;&amp;#x8F91;&amp;#x5668;&quot; data-id=&quot;94065&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;0&lt;span class=&quot;autonum&quot; data-original-title=&quot;&quot; title=&quot;&quot;&gt;1&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;18岁华裔少年解决量子计算重大问题&lt;/section&gt;&lt;section/&gt;&lt;section data-width=&quot;90%&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
&lt;p microsoft=&quot;&quot; yahei=&quot;&quot; simsun=&quot;&quot;&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.6529850746268657&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/951TjTgiabkwlY2QXbqLBKIWLvm2Gg7gppv1qF6gTDtrM5cpDstCYgmibZW98g7xwXVaEqakmwrx00WvhBBWp58A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;536&quot;/&gt;&lt;/p&gt;
&lt;p microsoft=&quot;&quot; yahei=&quot;&quot; simsun=&quot;&quot;&gt;&lt;span&gt;Ewin Tang&lt;/span&gt;&lt;/p&gt;
&lt;p microsoft=&quot;&quot; yahei=&quot;&quot; simsun=&quot;&quot;&gt;&lt;span&gt;2018年原本应该是量子计算机实现“量子霸权”的一年，也即出现证据表明量子计算机远远超过普通的经典计算机。&lt;/span&gt;&lt;/p&gt;
&lt;p microsoft=&quot;&quot; yahei=&quot;&quot; simsun=&quot;&quot;&gt;&lt;span&gt;但事实却并非如此。&lt;/span&gt;&lt;/p&gt;
&lt;p microsoft=&quot;&quot; yahei=&quot;&quot; simsun=&quot;&quot;&gt;&lt;span&gt;今年7月，当时年仅18岁的华裔少年Ewin Tang提出了一种传统计算机AI算法，其运算速度可以与量子计算比肩，相对之前的传统算法实现了运算速度的指数级增长。&lt;/span&gt;&lt;/p&gt;
&lt;p microsoft=&quot;&quot; yahei=&quot;&quot; simsun=&quot;&quot;&gt;&lt;span&gt;这一发现不仅推翻了两位量子计算重量级人物的量子加速神话，而且证明了量子算法和经典算法研究之间存在富有成效的相互作用。&lt;/span&gt;&lt;/p&gt;
&lt;p microsoft=&quot;&quot; yahei=&quot;&quot; simsun=&quot;&quot;&gt;&lt;span&gt;Tang本来打算证明这样的算法是不存在的。但随着时间推移，他发现这样的算法确实存在。&lt;/span&gt;&lt;/p&gt;
&lt;p microsoft=&quot;&quot; yahei=&quot;&quot; simsun=&quot;&quot;&gt;&lt;span&gt;量子霸权的延迟甚至导致一些理论计算机科学家认为，量子计算机永远不会超越最好的经典计算机。&lt;/span&gt;&lt;/p&gt;

&lt;section class=&quot;_135editor&quot; data-tools=&quot;135&amp;#x7F16;&amp;#x8F91;&amp;#x5668;&quot; data-id=&quot;94065&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;02&lt;/section&gt;&lt;section&gt;&lt;section class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;震惊世人的“ABC猜想”证明被推翻？&lt;/section&gt;&lt;section/&gt;&lt;section data-width=&quot;90%&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
&lt;p microsoft=&quot;&quot; yahei=&quot;&quot; simsun=&quot;&quot;&gt;&lt;span&gt;理论上，任何职业数学家都应该能够分辨出来，一个数学证明要么是正确的，要么就还需要更多补充。&lt;/span&gt;&lt;/p&gt;
&lt;p microsoft=&quot;&quot; yahei=&quot;&quot; simsun=&quot;&quot;&gt;&lt;span&gt;但在实践中，一个看上去合乎逻辑的数学问题证明也能难道不少数学家。&lt;/span&gt;&lt;/p&gt;
&lt;p microsoft=&quot;&quot; yahei=&quot;&quot; simsun=&quot;&quot;&gt;&lt;span&gt;其中最典型的例子便是ABC猜想。&lt;/span&gt;&lt;/p&gt;
&lt;p microsoft=&quot;&quot; yahei=&quot;&quot; simsun=&quot;&quot;&gt;&lt;span&gt;ABC猜想是数论中的一个重要问题。2012年，日本数学家望月新一宣布，他证明了这个猜想。但在那之后的整整6年时间里，仅有为数不多的几名数学家表示自己看懂了望月的证明并且表示赞同，大部分数学家面对望月冗长而令人困惑的证明，都处于迷茫中，这也导致一些人怀疑望月新一的证明。&lt;/span&gt;&lt;/p&gt;
&lt;p microsoft=&quot;&quot; yahei=&quot;&quot; simsun=&quot;&quot;&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.596&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/951TjTgiabkwlY2QXbqLBKIWLvm2Gg7gpcicGyFaWPCHtudlZ4kxbe15996GpohUpW0ZE0WgdopDU711FSfHAoDQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;500&quot;/&gt;&lt;/p&gt;
&lt;p microsoft=&quot;&quot; yahei=&quot;&quot; simsun=&quot;&quot;&gt;&lt;span&gt;法兰克福歌德大学的Peter Scholze，今年菲尔兹奖得主之一&lt;/span&gt;&lt;/p&gt;
&lt;p microsoft=&quot;&quot; yahei=&quot;&quot; simsun=&quot;&quot;&gt;&lt;span&gt;今年9月，法兰克福歌德大学的Peter Scholze和Jakob Stix宣布，他们在望月证明ABC猜想的论文中发现了一个“严重的、无法修复的差错” (serious, unfixable gap)。&lt;/span&gt;&lt;/p&gt;
&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;/&gt; &lt;p microsoft=&quot;&quot; yahei=&quot;&quot; simsun=&quot;&quot;&gt;&lt;span&gt;但是，望月继续声称，他的证明是正确又完整的。&lt;/span&gt;&lt;/p&gt;
&lt;p microsoft=&quot;&quot; yahei=&quot;&quot; simsun=&quot;&quot;&gt;&lt;span&gt;就在一个月前，Scholze被授予菲尔兹奖章，这是40岁以下数学家能够获得的最高荣誉。其他三位菲尔兹奖得主是英籍库尔德裔数学家、剑桥大学教授Caucher Birkar，意大利数学家Alessio Figalli和澳大利亚数学家Akshay Venkatesh。&lt;/span&gt;&lt;/p&gt;
&lt;p microsoft=&quot;&quot; yahei=&quot;&quot; simsun=&quot;&quot;&gt;&lt;span&gt;说到“不超过40岁”——希腊理论计算机科学家、MIT电气工程和计算机科学系教授，MIT计算机科学和人工智能实验室成员Constantinos Daskalakis，获得了理论计算机科学的内万林纳奖 (Nevanlinna Prize)。&lt;/span&gt;&lt;/p&gt;
&lt;p microsoft=&quot;&quot; yahei=&quot;&quot; simsun=&quot;&quot;&gt;&lt;span&gt;内万林纳奖于1981年由国际数学家大会执行委员会设立，以纪念在前一年过世的芬兰数学家罗尔夫·内万林纳 (Rolf Nevanlinna)。每四年在国际数学家大会颁发，得奖者必须在获奖那一年不大于40岁。&lt;/span&gt;&lt;/p&gt;

&lt;section class=&quot;_135editor&quot; data-tools=&quot;135&amp;#x7F16;&amp;#x8F91;&amp;#x5668;&quot; data-id=&quot;94065&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;03&lt;/section&gt;&lt;section&gt;&lt;section class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;机器学习无法发现房间里的大象&lt;/section&gt;&lt;section/&gt;&lt;section data-width=&quot;90%&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
&lt;p&gt;&lt;span microsoft=&quot;&quot; yahei=&quot;&quot; simsun=&quot;&quot; start=&quot;&quot;&gt;由机器学习驱动的人工智能在2018年变得越来越重要。但研究人员还是在继续探索机器的极限。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p microsoft=&quot;&quot; yahei=&quot;&quot; simsun=&quot;&quot;&gt;&lt;span&gt;NYU的研究人员发现，将一头大象叠加在起居室的照片上，先进的图像识别系统竟然无法识别！&lt;/span&gt;&lt;/p&gt;
&lt;p microsoft=&quot;&quot; yahei=&quot;&quot; simsun=&quot;&quot;&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.36666666666666664&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/951TjTgiabkwlY2QXbqLBKIWLvm2Gg7gpalXMtvED8U23RajicuEQBoGkuribDAicQYFCdagibTQEQ753RmMLVywIBg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;
&lt;p microsoft=&quot;&quot; yahei=&quot;&quot; simsun=&quot;&quot;&gt;&lt;span&gt;NYU的研究人员发现，将一头大象（右图红色圆圈处）叠加在起居室的照片上，先进的图像识别系统竟然无法识别&lt;/span&gt;&lt;/p&gt;
&lt;p microsoft=&quot;&quot; yahei=&quot;&quot; simsun=&quot;&quot;&gt;&lt;span&gt;AI 在游戏方面取得了巨大进步，可以通过自我对弈学会日本将棋、围棋、国际象棋等棋盘游戏，并且超越人类水平。但是，对于类似的系统能否处理复杂的现实场景，仍然存在疑问。&lt;/span&gt;&lt;/p&gt;
&lt;p microsoft=&quot;&quot; yahei=&quot;&quot; simsun=&quot;&quot;&gt;&lt;span&gt;MIT认知科学家Josh Tenenbaum表示，“真正的思维活动、创意探索和我们目前在AI中看到的东西，其间存在着巨大的鸿沟。” &lt;/span&gt;&lt;/p&gt;
&lt;p microsoft=&quot;&quot; yahei=&quot;&quot; simsun=&quot;&quot;&gt;&lt;span&gt;“那种超凡的人工智能是存在的，但主要存在于伟大的AI研究人员的脑海中。”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span microsoft=&quot;&quot; yahei=&quot;&quot; simsun=&quot;&quot; rgb=&quot;&quot;&gt;八年苦读，研究生证明量子验证问题&lt;/span&gt;&lt;/p&gt;
&lt;p microsoft=&quot;&quot; yahei=&quot;&quot; simsun=&quot;&quot;&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.5662460567823344&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/951TjTgiabkwlY2QXbqLBKIWLvm2Gg7gpmBwicz3S9yCcFsVCOiaPVCB1AyD6kLnBNicCssoMUSYsOpFfTqLZTKfXg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;634&quot;/&gt;&lt;/p&gt;
&lt;p microsoft=&quot;&quot; yahei=&quot;&quot; simsun=&quot;&quot;&gt;&lt;span&gt;今年10月，Urmila Mahadev（上图）提出了对量子验证问题的解决方案。&lt;/span&gt;&lt;/p&gt;
&lt;p microsoft=&quot;&quot; yahei=&quot;&quot; simsun=&quot;&quot;&gt;&lt;span&gt;量子验证问题是量子信息理论的一个基本问题。简单说，就是当你让一台量子计算机执行一个计算时，你如何确保它执行了指令，甚至如何得知它是否做了与量子相关的事情。&lt;/span&gt;&lt;/p&gt;
&lt;p microsoft=&quot;&quot; yahei=&quot;&quot; simsun=&quot;&quot;&gt;&lt;span&gt;Mahadev花了八年时间读研，并提出了一种方法来确保量子计算机使用某种“量子”来解决问题。 &lt;/span&gt;&lt;/p&gt;
&lt;p microsoft=&quot;&quot; yahei=&quot;&quot; simsun=&quot;&quot;&gt;&lt;span&gt;加州理工学院的计算机科学家Thomas Vidick说，Mahadev以“真正具有源创新”的方式将量子计算与经典密码学联系起来，从而设计出这样的解决方案。 &lt;/span&gt;&lt;/p&gt;
&lt;p microsoft=&quot;&quot; yahei=&quot;&quot; simsun=&quot;&quot;&gt;&lt;span&gt;“希望在这些想法的基础上，能够得出更多的结果。”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span microsoft=&quot;&quot; yahei=&quot;&quot; simsun=&quot;&quot; rgb=&quot;&quot;&gt;新证据表明无限曲线有两种类型&lt;/span&gt;&lt;/p&gt;
&lt;p microsoft=&quot;&quot; yahei=&quot;&quot; simsun=&quot;&quot;&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.4675925925925926&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/951TjTgiabkwlY2QXbqLBKIWLvm2Gg7gpqACY3ibibY2CTSiaNw9ibPmLnkj4XDb6Q7TKVoEMAy4ibMxPqbIIdEbk1jQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;
&lt;p microsoft=&quot;&quot; yahei=&quot;&quot; simsun=&quot;&quot;&gt;&lt;span&gt;正好有一半的椭圆曲线的“秩”(rank) 为0，另一半的秩为1&lt;/span&gt;&lt;/p&gt;
&lt;p microsoft=&quot;&quot; yahei=&quot;&quot; simsun=&quot;&quot;&gt;&lt;span&gt;椭圆曲线 (Elliptic curves) 是一个基本的数学对象，在费马大定理的证明等重要数学问题中起到关键的作用。 &lt;/span&gt;&lt;/p&gt;
&lt;p microsoft=&quot;&quot; yahei=&quot;&quot; simsun=&quot;&quot;&gt;&lt;span&gt;今年11月，Quanta Magazine报道了2017年的一篇论文，哈佛大学研究生Alexander Smith证明了一个关于椭圆曲线长达40年的猜想 Goldfeld 猜想。&lt;/span&gt;&lt;/p&gt;
&lt;p microsoft=&quot;&quot; yahei=&quot;&quot; simsun=&quot;&quot;&gt;&lt;span&gt;Alexander Smith发现，正好有一半的椭圆曲线的“秩”(rank) 为0，另一半的秩为1。&lt;/span&gt;&lt;/p&gt;
&lt;p microsoft=&quot;&quot; yahei=&quot;&quot; simsun=&quot;&quot;&gt;&lt;span&gt;秩是曲线的一组有理解（可以用分数表示的解）的复杂性的度量。虽然没有证明曲线的等级有多高的极限，但是数学家已经发现最高等级的曲线的等级是28，Goldfeld 猜想预测，总体而言，所有椭圆曲线的一半有秩0，一半有秩1。&lt;/span&gt;&lt;/p&gt;

&lt;section class=&quot;_135editor&quot; data-tools=&quot;135&amp;#x7F16;&amp;#x8F91;&amp;#x5668;&quot; data-id=&quot;94065&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;04&lt;/section&gt;&lt;section&gt;&lt;section class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;业余数学家解决百年数学难题&lt;/section&gt;&lt;section/&gt;&lt;section data-width=&quot;90%&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;/&gt; 
&lt;p microsoft=&quot;&quot; yahei=&quot;&quot; simsun=&quot;&quot;&gt;&lt;span&gt;2018年是业余数学家大放光彩的一年。&lt;/span&gt;&lt;/p&gt;
&lt;p microsoft=&quot;&quot; yahei=&quot;&quot; simsun=&quot;&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt; 最小万有覆叠问题 &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p microsoft=&quot;&quot; yahei=&quot;&quot; simsun=&quot;&quot;&gt;&lt;span&gt;业余数学家 Philip Gibbs 虽然拥有剑桥大学数学本科和格拉斯哥大学理论物理博士学位，然后工作后却成了一名软件工程师。直到2006年退休之前，他都忙于为船舶设计、空中交通管制和金融等领域设计软件系统。&lt;/span&gt;&lt;/p&gt;
&lt;p microsoft=&quot;&quot; yahei=&quot;&quot; simsun=&quot;&quot;&gt;&lt;span&gt;Philip Gibbs 应对的是法国数学家亨利·勒贝格 (Henri Lebesgue) 的万有覆叠问题 (Universal Covering Problem）：&lt;/span&gt;&lt;/p&gt;
&lt;p microsoft=&quot;&quot; yahei=&quot;&quot; simsun=&quot;&quot;&gt;&lt;span&gt;1914年，勒贝格在给朋友的信中问道，“对于许多不同 (但都具某种共同特征) 的形状，能够覆盖他们的最小面积的形状是什么？”&lt;/span&gt;&lt;/p&gt;
&lt;p microsoft=&quot;&quot; yahei=&quot;&quot; simsun=&quot;&quot;&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.4236111111111111&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_gif/951TjTgiabkwlY2QXbqLBKIWLvm2Gg7gpgKw7zCyJiaySMiaSLEc7JQ9eDyN4L5Vp9VHdqUbXNXaD2TnH27CTjiaiag/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;2880&quot;/&gt;&lt;/p&gt;
&lt;p microsoft=&quot;&quot; yahei=&quot;&quot; simsun=&quot;&quot;&gt;&lt;span&gt;2014年，Gibbs用计算机随机生成了200个直径为1个单位的形状，并用它们做数学模拟。他的思路是，将所有直径为1的形状都放到之前的最小万有覆叠的一个角落，然后剪切掉相反角落多余的面积。&lt;/span&gt;&lt;/p&gt;
&lt;p microsoft=&quot;&quot; yahei=&quot;&quot; simsun=&quot;&quot;&gt;&lt;span&gt;2015年，他与人合作发表论文，新的结果将最小万有覆叠的面积从0.8441377减少到0.8441153个单位，虽然剪切掉的那部分面积只有0.0000224个单位，但却几乎是上一次数学家针对这个问题剪切掉面积的100万倍。&lt;/span&gt;&lt;/p&gt;
&lt;p microsoft=&quot;&quot; yahei=&quot;&quot; simsun=&quot;&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt; 排列问题 &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p microsoft=&quot;&quot; yahei=&quot;&quot; simsun=&quot;&quot;&gt;&lt;span&gt;澳大利亚科幻作家 Greg Egan 和一位在2011年在线匿名发布的新证据，为困扰了数学家们 25 年的一个排列问题取得了重大进展。&lt;/span&gt;&lt;/p&gt;
&lt;p microsoft=&quot;&quot; yahei=&quot;&quot; simsun=&quot;&quot;&gt;&lt;img class=&quot;&quot; data-ratio=&quot;1.9068736141906875&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/951TjTgiabkwlY2QXbqLBKIWLvm2Gg7gpDKKjiceSNc0Op1MSibpC5oSEhAYnpf19bn0yRdJJrCWS8niavy0Yn09DA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;902&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt; 图着色问题 &lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p microsoft=&quot;&quot; yahei=&quot;&quot; simsun=&quot;&quot;&gt;&lt;span&gt;抗衰老组织的联合创始人Edward Nelso，在图着色问题 (Graph Coloring Problem, GCP)，取得了60年来的首个进展。&lt;/span&gt;&lt;/p&gt;
&lt;p microsoft=&quot;&quot; yahei=&quot;&quot; simsun=&quot;&quot;&gt;&lt;span&gt;图着色问题又称着色问题，是最著名的NP-完全问题之一。具体说，给定无向连通图G和m种不同的颜色。用这些颜色为图G的各顶点着色，每个顶点着一种颜色，是否有一种着色法，使G中任意相邻的2个顶点着不同的颜色?&lt;/span&gt;&lt;/p&gt;
&lt;p microsoft=&quot;&quot; yahei=&quot;&quot; simsun=&quot;&quot;&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.9395017793594306&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/951TjTgiabkwlY2QXbqLBKIWLvm2Gg7gpRvJtZmvRUVPpZdabX3d1PzNZgUsuUUKJyKj2Svzib2P01HnKWibK9LSA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;562&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;————&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;来源：&lt;span microsoft=&quot;&quot; yahei=&quot;&quot; simsun=&quot;&quot; start=&quot;&quot; rgb=&quot;&quot;&gt;quantamagazine&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;编辑 &lt;span&gt;∑ Gemini&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;section&gt;&lt;section class=&quot;&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;section readability=&quot;2.7516891891892&quot;&gt;&lt;section readability=&quot;5.5033783783784&quot;&gt;&lt;section helvetica=&quot;&quot; neue=&quot;&quot; pingfang=&quot;&quot; sc=&quot;&quot; hiragino=&quot;&quot; sans=&quot;&quot; gb=&quot;&quot; microsoft=&quot;&quot; yahei=&quot;&quot; ui=&quot;&quot; arial=&quot;&quot; sans-serif=&quot;&quot; px=&quot;&quot; justify=&quot;&quot; normal=&quot;&quot; rgb=&quot;&quot; display:=&quot;&quot; inline-block=&quot;&quot; top=&quot;&quot; solid=&quot;&quot; overflow-wrap:=&quot;&quot; break-word=&quot;&quot; important=&quot;&quot;&gt;&lt;section class=&quot;&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;section readability=&quot;1.5&quot;&gt;&lt;section readability=&quot;3&quot;&gt;&lt;p&gt;&lt;span&gt;微信公众号“算法数学之美”，由算法与数学之美团队打造的另一个公众号，欢迎大家扫码关注！&lt;/span&gt;&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p pingfang=&quot;&quot; sc=&quot;&quot; hiragino=&quot;&quot; sans=&quot;&quot; gb=&quot;&quot; microsoft=&quot;&quot; yahei=&quot;&quot; wenquanyi=&quot;&quot; micro=&quot;&quot; hei=&quot;&quot; helvetica=&quot;&quot; neue=&quot;&quot; arial=&quot;&quot; sans-serif=&quot;&quot; px=&quot;&quot; normal=&quot;&quot; rgb=&quot;&quot; text-align:=&quot;&quot; justify=&quot;&quot; em=&quot;&quot;&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/951TjTgiabkyjQVC3BFiaFKQ4DJqz2xhrwkzeCPbjQdnnG8678fRf1sxc2ZQtvtVib2dqWUkeopYtmgckINoOoGoQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;258&quot;/&gt;&lt;/p&gt;

&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;/&gt; &lt;p&gt;&lt;strong&gt;&lt;span&gt;更多精彩：&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;☞&lt;/span&gt;&lt;span&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4NTY3OTU3MA==&amp;amp;mid=2247483726&amp;amp;idx=1&amp;amp;sn=e5e008fb68a7d837546d0ac5b5438042&amp;amp;chksm=ebe9cbf3dc9e42e5d625b2da6b9b3866dff9f08d442d8106f4cbf035d8602e1fdda86eec6476&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;如何向5岁小孩解释什么是支持向量机（SVM）？&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;☞&lt;/span&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4NTY3OTU3MA==&amp;amp;mid=2247483726&amp;amp;idx=2&amp;amp;sn=18272b7eaa172794b51c30d0a2dd9c48&amp;amp;chksm=ebe9cbf3dc9e42e5ddf9a189822a2fa099543a631ad63a1d6ed0158b51c76212eb65ebbfe71b&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;自然底数e的意义是什么？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4NTY3OTU3MA==&amp;amp;mid=2247483715&amp;amp;idx=1&amp;amp;sn=9069dadf4bbce2aa34bd64b85a69dcee&amp;amp;chksm=ebe9cbfedc9e42e81c27d72da15c0dbf848e505946f231051b8b4033d0941bc6f51cef32790e&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;☞&lt;/span&gt;费马大定理，集惊险与武侠于一体&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;☞&lt;/span&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4NTY3OTU3MA==&amp;amp;mid=2247483715&amp;amp;idx=2&amp;amp;sn=55a16f37c89b27994b263e0dc9837561&amp;amp;chksm=ebe9cbfedc9e42e842deb581ea62b750cedd839abd58c2db3261bf9fbcd172a2cf18512e4d2d&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;简单的解释，让你秒懂“最优化” 问题&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4NTY3OTU3MA==&amp;amp;mid=2247483676&amp;amp;idx=1&amp;amp;sn=2366a39bca3ef42a6e868e91ea718813&amp;amp;chksm=ebe9cba1dc9e42b70c7e147b9e43828c1a7c68401f442890471a06e5cf0704437f9813ca0e0f&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;☞&lt;/span&gt;一分钟看懂一维空间到十维空间&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;☞ &lt;/span&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4NTY3OTU3MA==&amp;amp;mid=2247483661&amp;amp;idx=1&amp;amp;sn=d822666a054ba70b37dfb06d14c60f3a&amp;amp;chksm=ebe9cbb0dc9e42a6c476f7f81095b772aa45d960bf516f60c5b2e1155c9093696222cea0a83d&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;本科、硕士和博士到底有什么区别？&lt;/a&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;☞&lt;/span&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4NTY3OTU3MA==&amp;amp;mid=2247483654&amp;amp;idx=1&amp;amp;sn=7d0d05c78cd01df91495f1d14609cbce&amp;amp;chksm=ebe9cbbbdc9e42add13cfe99f3383745fa5c059df705a3a9e28644d073dff804569af94970e3&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;小波变换通俗解释&lt;/a&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;☞&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4NTY3OTU3MA==&amp;amp;mid=2247483654&amp;amp;idx=4&amp;amp;sn=ce88086b650c601bdbf57ecfe5a490a1&amp;amp;chksm=ebe9cbbbdc9e42adfaf0e4ee644d254835c830ef47663315b70a39a2b47e6a7cf10d0826b88d&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;微积分必背公式&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;☞&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4NTY3OTU3MA==&amp;amp;mid=2247483654&amp;amp;idx=3&amp;amp;sn=ceaec6043bb0e8a851033482f8f572bf&amp;amp;chksm=ebe9cbbbdc9e42ad30fd38383cf1caa609ac6e81964da17277f8e2a7f17a933cd11e0f3840c8&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;影响计算机算法世界的十位大师&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;/&gt; &lt;p&gt;&lt;span&gt;☞&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4NTY3OTU3MA==&amp;amp;mid=2247483654&amp;amp;idx=2&amp;amp;sn=bf439d56bc7d42083708fa76434a6025&amp;amp;chksm=ebe9cbbbdc9e42ad9e5f2b3c1952e620e0e3d4452aae25b611e7e54be8678b0d80e002e7be6d&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;数据挖掘之七种常用的方法&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;算法数学之美微信公众号欢迎赐稿&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;稿件涉及数学、物理、算法、计算机、编程等相关领域，经采用我们将奉上稿酬。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;投稿邮箱：math_alg@163.com&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 13 Jan 2019 01:53:57 +0000</pubDate>
<dc:language>zh-CN</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.jintiankansha.me/t/8L5Cr95Ij1</dc:identifier>
</item>
</channel>
</rss>