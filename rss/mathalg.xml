<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed43.com%2Fmathalg-jtks.xml&amp;max=5&amp;links=preserve&amp;exc=1" />
<atom:link rel="alternate" title="Source URL" href="http://feed43.com/mathalg-jtks.xml" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed43.com%252Fmathalg-jtks.xml%26max%3D5%26links%3Dpreserve%26exc%3D1&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed43.com%252Fmathalg-jtks.xml%26max%3D5%26links%3Dpreserve%26exc%3D1" />
<title>算法与数学之美</title>
<link>http://www.jintiankansha.me/column/c9dZ5TM2aS</link>
<description>算法与数学之美 - 今天看啥</description>
<ttl>360</ttl>
<item>
<title>地球史上可能发生过的重大事件！</title>
<link>http://www.jintiankansha.me/t/zMt3IeER26</link>
<guid isPermaLink="true" >http://www.jintiankansha.me/t/zMt3IeER26</guid>
<description>&lt;div id=&quot;img-content&quot; class=&quot;paper rich_media_area_primary &quot; readability=&quot;4.5862068965517&quot;&gt;

                        

                        
                            
&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;&gt;&lt;/ins&gt;
&lt;p&gt;
                                                    &lt;h2 class=&quot;common_share_title&quot;&gt;
                      
            地球史上可能发生过的重大事件！
                          &lt;/h2&gt;
                                                            &lt;/p&gt;
                        

                        &lt;br /&gt;&lt;/div&gt;

                    &lt;div class=&quot;post-meta&quot;&gt;
                        &lt;div class=&quot;&quot;&gt;
                            &lt;p&gt;分享到&lt;/p&gt;
                            &lt;a target=&quot;_blank&quot; href=&quot;http://service.weibo.com/share/share.php?url=http%3A%2F%2Fwww.jintiankansha.me%2Ft%2FzMt3IeER26&amp;amp;appkey=2206014828&amp;amp;pic=&amp;amp;title=%E5%9C%B0%E7%90%83%E5%8F%B2%E4%B8%8A%E5%8F%AF%E8%83%BD%E5%8F%91%E7%94%9F%E8%BF%87%E7%9A%84%E9%87%8D%E5%A4%A7%E4%BA%8B%E4%BB%B6%EF%BC%81+%40%E4%BB%8A%E5%A4%A9%E7%9C%8B%E5%95%A5&quot;&gt;
                                &lt;img width=&quot;30px&quot; src=&quot;http://www.jintiankansha.me/static/img/site/weibo.svg?v=fa758ebd6691cf5931bbbed63230327b&quot; /&gt;&lt;/a&gt;
                        &lt;/div&gt;
                    &lt;/div&gt;

                    
                    
                </description>
<pubDate>Wed, 27 Nov 2019 08:17:20 +0000</pubDate>
<dc:language>zh-CN</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.jintiankansha.me/t/zMt3IeER26</dc:identifier>
</item>
<item>
<title>从一个程序员的角度告诉你：12306有多牛逼？</title>
<link>http://www.jintiankansha.me/t/S5Je4bbtXn</link>
<guid isPermaLink="true" >http://www.jintiankansha.me/t/S5Je4bbtXn</guid>
<description>&lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;每到节假日期间，一二线城市返乡、外出游玩的人们几乎都面临着一个问题：&lt;/span&gt;&lt;span&gt;抢火车票！&lt;/span&gt;&lt;/p&gt;
&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot; readability=&quot;1&quot;&gt;&lt;section class=&quot;&quot; readability=&quot;2&quot;&gt;&lt;p&gt;12306 抢票，极限并发带来的思考&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
&lt;p&gt;&lt;span&gt;虽然现在大多数情况下都能订到票，但是放票瞬间即无票的场景，相信大家都深有体会。&lt;/span&gt;&lt;/p&gt;
&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;尤其是春节期间，大家不仅使用 12306，还会考虑“智行”和其他的抢票软件，全国上下几亿人在这段时间都在抢票。&lt;/span&gt;&lt;/p&gt;
&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;“12306 服务”承受着这个世界上任何秒杀系统都无法超越的 QPS，上百万的并发再正常不过了！&lt;/span&gt;&lt;/p&gt;
&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;笔者专门研究了一下“12306”的服务端架构，学习到了其系统设计上很多亮点，在这里和大家分享一下并模拟一个例子：如何在 100 万人同时抢 1 万张火车票时，系统提供正常、稳定的服务。&lt;/span&gt;&lt;/p&gt;
&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Github代码地址：&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;&quot; readability=&quot;2&quot;&gt;&lt;pre&gt;
&lt;code class=&quot;&quot;&gt;https:&lt;span class=&quot;&quot;&gt;//github.com/GuoZhaoran/spikeSystem&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/section&gt;&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;/&gt; &lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot; readability=&quot;1&quot;&gt;&lt;section class=&quot;&quot; readability=&quot;2&quot;&gt;&lt;p class=&quot;&quot;&gt;大型高并发系统架构&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section/&gt;&lt;p&gt;&lt;span&gt;高并发的系统架构都会采用分布式集群部署，服务上层有着层层负载均衡，并提供各种容灾手段（双火机房、节点容错、服务器灾备等&lt;span&gt;）&lt;/span&gt;保证系统的高可用，流量也会根据不同的负载能力和配置策略均衡到不同的服务器上。&lt;/span&gt;&lt;/p&gt;
&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;下边是一个简单的示意图：&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6666666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/MOwlO0INfQrfowULp3xliaU43T7YCHWW9J8hQicqicMYNlHuPDGWhMOP1kpfcwopVW9vic5mPWlHzWbj1sz1c9mekA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;593&quot;/&gt;&lt;/p&gt;
&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section/&gt;&lt;section class=&quot;&quot;&gt;&lt;p class=&quot;&quot;&gt;&lt;strong&gt;负载均衡简介&lt;/strong&gt;&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;上图中描述了用户请求到服务器经历了三层的负载均衡，下边分别简单介绍一下这三种负载均衡。&lt;/span&gt;&lt;/p&gt;
&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;①OSPF（开放式最短链路优先&lt;span&gt;）&lt;/span&gt;是一个内部网关协议（Interior Gateway Protocol，简称 IGP&lt;span&gt;）&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;/&gt; &lt;span&gt;OSPF 通过路由器之间通告网络接口的状态来建立链路状态数据库，生成最短路径树，OSPF 会自动计算路由接口上的 Cost 值，但也可以通过手工指定该接口的 Cost 值，手工指定的优先于自动计算的值。&lt;/span&gt;&lt;/p&gt;
&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;OSPF 计算的 Cost，同样是和接口带宽成反比，带宽越高，Cost 值越小。到达目标相同 Cost 值的路径，可以执行负载均衡，最多 6 条链路同时执行负载均衡。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;②LVS （Linux Virtual Server&lt;span&gt;）&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;它是一种集群（Cluster&lt;span&gt;）&lt;/span&gt;技术，采用 IP 负载均衡技术和基于内容请求分发技术。&lt;/span&gt;&lt;/p&gt;
&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;调度器具有很好的吞吐率，将请求均衡地转移到不同的服务器上执行，且调度器自动屏蔽掉服务器的故障，从而将一组服务器构成一个高性能的、高可用的虚拟服务器。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;③Nginx&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;想必大家都很熟悉了，是一款非常高性能的 HTTP 代理/反向代理服务器，服务开发中也经常使用它来做负载均衡。&lt;/span&gt;&lt;/p&gt;
&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;Nginx 实现负载均衡的方式主要有三种：&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;轮询&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;加权轮询&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;/&gt; &lt;p&gt;&lt;strong&gt;&lt;span&gt;IP Hash 轮询&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;下面我们就针对 Nginx 的加权轮询做专门的配置和测试。&lt;/span&gt;&lt;/p&gt;
&lt;h4 class=&quot;&quot; data-id=&quot;heading-3&quot;&gt;&lt;br/&gt;&lt;/h4&gt;
&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot; readability=&quot;1&quot;&gt;&lt;section/&gt;&lt;section class=&quot;&quot; readability=&quot;2&quot;&gt;&lt;p class=&quot;&quot;&gt;&lt;strong&gt;Nginx 加权轮询的演示&lt;/strong&gt;&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Nginx 实现负载均衡通过 Upstream 模块实现，其中加权轮询的配置是可以给相关的服务加上一个权重值，配置的时候可能根据服务器的性能、负载能力设置相应的负载。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;下面是一个加权轮询负载的配置，我将在本地的监听 3001-3004 端口，分别配置 1，2，3，4 的权重：&lt;/span&gt;&lt;/p&gt;
&lt;section class=&quot;&quot; readability=&quot;4&quot;&gt;&lt;pre&gt;
&lt;code class=&quot;&quot;&gt;&lt;span class=&quot;&quot;&gt;#配置负载均衡&lt;/span&gt;&lt;br/&gt;upstream load_rule {&lt;br/&gt;server &lt;span class=&quot;&quot;&gt;127.0.0.1&lt;/span&gt;:&lt;span class=&quot;&quot;&gt;3001&lt;/span&gt; weight=&lt;span class=&quot;&quot;&gt;1&lt;/span&gt;;&lt;br/&gt;server &lt;span class=&quot;&quot;&gt;127.0.0.1&lt;/span&gt;:&lt;span class=&quot;&quot;&gt;3002&lt;/span&gt; weight=&lt;span class=&quot;&quot;&gt;2&lt;/span&gt;;&lt;br/&gt;server &lt;span class=&quot;&quot;&gt;127.0.0.1&lt;/span&gt;:&lt;span class=&quot;&quot;&gt;3003&lt;/span&gt; weight=&lt;span class=&quot;&quot;&gt;3&lt;/span&gt;;&lt;br/&gt;server &lt;span class=&quot;&quot;&gt;127.0.0.1&lt;/span&gt;&lt;/code&gt;
&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;/&gt;

    
:&lt;span class=&quot;&quot;&gt;3004&lt;/span&gt; weight=&lt;span class=&quot;&quot;&gt;4&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;...&lt;br/&gt;server {&lt;br/&gt;listen       &lt;span class=&quot;&quot;&gt;80&lt;/span&gt;;&lt;br/&gt;server_name  load_balance.com www.load_balance.com;&lt;br/&gt;location / {&lt;br/&gt;proxy_pass http:&lt;span class=&quot;&quot;&gt;//load_rule;&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/pre&gt;&lt;/section&gt;
&lt;section&gt;&lt;span&gt;我在本地 /etc/hosts 目录下配置了 www.load_balance.com 的虚拟域名地址。&lt;/span&gt;&lt;/section&gt;
&lt;p&gt;&lt;span&gt;接下来使用 Go 语言开启四个 HTTP 端口监听服务，下面是监听在 3001 端口的 Go 程序，其他几个只需要修改端口即可：&lt;/span&gt;&lt;/p&gt;
&lt;section class=&quot;&quot; readability=&quot;16&quot;&gt;&lt;pre readability=&quot;14&quot;&gt;
&lt;code class=&quot;&quot; readability=&quot;22&quot;&gt;&lt;span class=&quot;&quot;&gt;package&lt;/span&gt; main&lt;p&gt;&lt;span class=&quot;&quot;&gt;import&lt;/span&gt; (&lt;br/&gt;&lt;span class=&quot;&quot;&gt;&quot;net/http&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;&quot;&gt;&quot;os&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;&quot;&gt;&quot;strings&quot;&lt;/span&gt;&lt;br/&gt;)&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;&quot;&gt;&lt;span class=&quot;&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;http.HandleFunc(&lt;span class=&quot;&quot;&gt;&quot;/buy/ticket&quot;&lt;/span&gt;, handleReq)&lt;br/&gt;http.ListenAndServe(&lt;span class=&quot;&quot;&gt;&quot;:3001&quot;&lt;/span&gt;, &lt;span class=&quot;&quot;&gt;nil&lt;/span&gt;)&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;&quot;&gt;//处理请求函数,根据请求将响应结果信息写入日志&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;&quot;&gt;&lt;span class=&quot;&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;&quot;&gt;handleReq&lt;/span&gt;&lt;span class=&quot;&quot;&gt;(w http.ResponseWriter, r *http.Request)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;/&gt;

    
    failedMsg :=  &lt;span class=&quot;&quot;&gt;&quot;handle in port:&quot;&lt;/span&gt;&lt;br/&gt;writeLog(failedMsg, &lt;span class=&quot;&quot;&gt;&quot;./stat.log&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;&quot;&gt;//写入日志&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;&quot;&gt;&lt;span class=&quot;&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;&quot;&gt;writeLog&lt;/span&gt;&lt;span class=&quot;&quot;&gt;(msg &lt;span class=&quot;&quot;&gt;string&lt;/span&gt;, logPath &lt;span class=&quot;&quot;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;fd, _ := os.OpenFile(logPath, os.O_RDWR|os.O_CREATE|os.O_APPEND, &lt;span class=&quot;&quot;&gt;0644&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;&quot;&gt;defer&lt;/span&gt; fd.Close()&lt;br/&gt;content := strings.Join([]&lt;span class=&quot;&quot;&gt;string&lt;/span&gt;{msg, &lt;span class=&quot;&quot;&gt;&quot;\r\n&quot;&lt;/span&gt;}, &lt;span class=&quot;&quot;&gt;&quot;3001&quot;&lt;/span&gt;)&lt;br/&gt;buf := []&lt;span class=&quot;&quot;&gt;byte&lt;/span&gt;(content)&lt;br/&gt;fd.Write(buf)&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/section&gt;
&lt;p&gt;&lt;span&gt;我将请求的端口日志信息写到了 ./stat.log 文件当中，然后使用 AB 压测工具做压测：&lt;/span&gt;&lt;/p&gt;
&lt;section class=&quot;&quot; readability=&quot;2&quot;&gt;&lt;pre&gt;
&lt;code class=&quot;&quot;&gt;&lt;span class=&quot;&quot;&gt;ab&lt;/span&gt; -n &lt;span class=&quot;&quot;&gt;1000&lt;/span&gt; -c &lt;span class=&quot;&quot;&gt;100&lt;/span&gt; http://www.load_balance.com/buy/ticket&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/section&gt;
&lt;section&gt;&lt;span&gt;统计日志中的结果，3001-3004 端口分别得到了 100、200、300、400 的请求量。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这和我在 Nginx 中配置的权重占比很好的吻合在了一起，并且负载后的流量非常的均匀、随机。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;/&gt; &lt;p&gt;&lt;span&gt;具体的实现大家可以参考 Nginx 的 Upsteam 模块实现源码，这里推荐一篇文章《Nginx 中 Upstream 机制的负载均衡&lt;span&gt;》：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;section class=&quot;&quot; readability=&quot;2&quot;&gt;&lt;pre&gt;
&lt;code class=&quot;&quot;&gt;&lt;span class=&quot;&quot;&gt;https:&lt;/span&gt;/&lt;span class=&quot;&quot;&gt;/www.kancloud.cn/digest/understandingnginx/&lt;/span&gt;&lt;span class=&quot;&quot;&gt;202607&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section class=&quot;&quot;&gt;&lt;p class=&quot;&quot;&gt;秒杀抢购系统选型&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section/&gt;</description>
<pubDate>Wed, 27 Nov 2019 08:17:19 +0000</pubDate>
<dc:language>zh-CN</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.jintiankansha.me/t/S5Je4bbtXn</dc:identifier>
</item>
</channel>
</rss>